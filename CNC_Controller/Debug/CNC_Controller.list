
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b900  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800ba90  0800ba90  0000ca90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c034  0800c034  0000e078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c034  0800c034  0000d034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c03c  0800c03c  0000e078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c03c  0800c03c  0000d03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c040  0800c040  0000d040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800c044  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000078  0800c0bc  0000e078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0800c0bc  0000e628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001961c  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f2  00000000  00000000  000276c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114a  00000000  00000000  0002ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028944  00000000  00000000  0002df8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002063b  00000000  00000000  000568ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b4d  00000000  00000000  00076f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016da56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006420  00000000  00000000  0016da9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00173ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba78 	.word	0x0800ba78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800ba78 	.word	0x0800ba78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <xor_reduce_bytes>:
// =====================
// Conjunto genérico de auxiliares
// =====================

// XOR sobre bytes (paridade byte a byte)
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e009      	b.n	800070c <xor_reduce_bytes+0x28>
		x ^= p[i];
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4053      	eors	r3, r2
 8000704:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3f1      	bcc.n	80006f8 <xor_reduce_bytes+0x14>
	return x;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <set_parity_byte>:
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
		uint32_t parity_index) {
 8000722:	b590      	push	{r4, r7, lr}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <set_parity_byte+0x1a>
		return -1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e00b      	b.n	8000754 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	18d0      	adds	r0, r2, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	18d4      	adds	r4, r2, r3
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	f7ff ffcb 	bl	80006e4 <xor_reduce_bytes>
 800074e:	4603      	mov	r3, r0
 8000750:	7023      	strb	r3, [r4, #0]
	return 0;
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	22ab      	movs	r2, #171	@ 0xab
 800076c:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	4413      	add	r3, r2
 8000792:	2254      	movs	r2, #84	@ 0x54
 8000794:	701a      	strb	r2, [r3, #0]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	2101      	movs	r1, #1
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f7ff ffb4 	bl	8000722 <set_parity_byte>
 80007ba:	4603      	mov	r3, r0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d005      	beq.n	80007e2 <led_ctrl_resp_encoder+0x1e>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <led_ctrl_resp_encoder+0x1e>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d802      	bhi.n	80007e8 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e01c      	b.n	8000822 <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 80007e8:	2107      	movs	r1, #7
 80007ea:	68b8      	ldr	r0, [r7, #8]
 80007ec:	f7ff ffb6 	bl	800075c <resp_init>
	raw[2] = in->frameId;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	3302      	adds	r3, #2
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3303      	adds	r3, #3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	7852      	ldrb	r2, [r2, #1]
 8000802:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	3304      	adds	r3, #4
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	7892      	ldrb	r2, [r2, #2]
 800080c:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 800080e:	2205      	movs	r2, #5
 8000810:	2104      	movs	r1, #4
 8000812:	68b8      	ldr	r0, [r7, #8]
 8000814:	f7ff ffc5 	bl	80007a2 <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000818:	2106      	movs	r1, #6
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff ffb1 	bl	8000782 <resp_set_tail>
	return PROTO_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 800082e:	210c      	movs	r1, #12
 8000830:	2001      	movs	r0, #1
 8000832:	f009 ffd5 	bl	800a7e0 <calloc>
 8000836:	4603      	mov	r3, r0
}
 8000838:	4618      	mov	r0, r3
 800083a:	bd80      	pop	{r7, pc}

0800083c <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d005      	beq.n	800085a <resp_fifo_push+0x1e>
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <resp_fifo_push+0x1e>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d102      	bne.n	8000860 <resp_fifo_push+0x24>
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e03d      	b.n	80008dc <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 8000860:	200c      	movs	r0, #12
 8000862:	f009 ffd9 	bl	800a818 <malloc>
 8000866:	4603      	mov	r3, r0
 8000868:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <resp_fifo_push+0x3a>
 8000870:	f06f 0302 	mvn.w	r3, #2
 8000874:	e032      	b.n	80008dc <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f009 ffce 	bl	800a818 <malloc>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d105      	bne.n	8000898 <resp_fifo_push+0x5c>
 800088c:	6978      	ldr	r0, [r7, #20]
 800088e:	f009 ffcb 	bl	800a828 <free>
 8000892:	f06f 0302 	mvn.w	r3, #2
 8000896:	e021      	b.n	80008dc <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00a fa56 	bl	800ad52 <memcpy>
    n->len = len;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d004      	beq.n	80008c4 <resp_fifo_push+0x88>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	e002      	b.n	80008ca <resp_fifo_push+0x8e>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	601a      	str	r2, [r3, #0]
    q->tail = n;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	605a      	str	r2, [r3, #4]
    q->count++;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d006      	beq.n	8000904 <resp_fifo_pop+0x20>
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <resp_fifo_pop+0x20>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <resp_fifo_pop+0x24>
 8000904:	2300      	movs	r3, #0
 8000906:	e02e      	b.n	8000966 <resp_fifo_pop+0x82>
    node_t *n = q->head;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	d202      	bcs.n	800091e <resp_fifo_pop+0x3a>
 8000918:	f06f 0303 	mvn.w	r3, #3
 800091c:	e023      	b.n	8000966 <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	461a      	mov	r2, r3
 8000928:	68b8      	ldr	r0, [r7, #8]
 800092a:	f00a fa12 	bl	800ad52 <memcpy>
    int ret = (int)n->len;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <resp_fifo_pop+0x66>
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
    q->count--;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	1e5a      	subs	r2, r3, #1
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	609a      	str	r2, [r3, #8]
    free(n->buf);
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f009 ff65 	bl	800a828 <free>
    free(n);
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f009 ff62 	bl	800a828 <free>
    return ret;
 8000964:	693b      	ldr	r3, [r7, #16]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
    if (!r) return;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d01a      	beq.n	80009b8 <router_init+0x48>
    memset(r, 0, sizeof(*r));
 8000982:	2248      	movs	r2, #72	@ 0x48
 8000984:	2100      	movs	r1, #0
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f00a f958 	bl	800ac3c <memset>
    r->resp = resp_fifo;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	2100      	movs	r1, #0
 8000996:	480a      	ldr	r0, [pc, #40]	@ (80009c0 <router_init+0x50>)
 8000998:	f00a f950 	bl	800ac3c <memset>
    if (h) g_handlers = *h;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00b      	beq.n	80009ba <router_init+0x4a>
 80009a2:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <router_init+0x50>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4614      	mov	r4, r2
 80009a8:	461d      	mov	r5, r3
 80009aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	6023      	str	r3, [r4, #0]
 80009b6:	e000      	b.n	80009ba <router_init+0x4a>
    if (!r) return;
 80009b8:	bf00      	nop
}
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bdb0      	pop	{r4, r5, r7, pc}
 80009c0:	20000094 	.word	0x20000094

080009c4 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 80c0 	beq.w	8000b58 <dispatch+0x194>
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 80bc 	beq.w	8000b58 <dispatch+0x194>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	f240 80b8 	bls.w	8000b58 <dispatch+0x194>
    uint8_t type = f[1];
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3301      	adds	r3, #1
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b20      	cmp	r3, #32
 80009f4:	dc4a      	bgt.n	8000a8c <dispatch+0xc8>
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f340 80b0 	ble.w	8000b5c <dispatch+0x198>
 80009fc:	3b01      	subs	r3, #1
 80009fe:	2b1f      	cmp	r3, #31
 8000a00:	f200 80ac 	bhi.w	8000b5c <dispatch+0x198>
 8000a04:	a201      	add	r2, pc, #4	@ (adr r2, 8000a0c <dispatch+0x48>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000a93 	.word	0x08000a93
 8000a10:	08000aa9 	.word	0x08000aa9
 8000a14:	08000abf 	.word	0x08000abf
 8000a18:	08000ad5 	.word	0x08000ad5
 8000a1c:	08000aeb 	.word	0x08000aeb
 8000a20:	08000b01 	.word	0x08000b01
 8000a24:	08000b17 	.word	0x08000b17
 8000a28:	08000b5d 	.word	0x08000b5d
 8000a2c:	08000b5d 	.word	0x08000b5d
 8000a30:	08000b5d 	.word	0x08000b5d
 8000a34:	08000b5d 	.word	0x08000b5d
 8000a38:	08000b5d 	.word	0x08000b5d
 8000a3c:	08000b5d 	.word	0x08000b5d
 8000a40:	08000b5d 	.word	0x08000b5d
 8000a44:	08000b5d 	.word	0x08000b5d
 8000a48:	08000b5d 	.word	0x08000b5d
 8000a4c:	08000b5d 	.word	0x08000b5d
 8000a50:	08000b5d 	.word	0x08000b5d
 8000a54:	08000b5d 	.word	0x08000b5d
 8000a58:	08000b5d 	.word	0x08000b5d
 8000a5c:	08000b5d 	.word	0x08000b5d
 8000a60:	08000b5d 	.word	0x08000b5d
 8000a64:	08000b5d 	.word	0x08000b5d
 8000a68:	08000b5d 	.word	0x08000b5d
 8000a6c:	08000b5d 	.word	0x08000b5d
 8000a70:	08000b5d 	.word	0x08000b5d
 8000a74:	08000b5d 	.word	0x08000b5d
 8000a78:	08000b5d 	.word	0x08000b5d
 8000a7c:	08000b5d 	.word	0x08000b5d
 8000a80:	08000b5d 	.word	0x08000b5d
 8000a84:	08000b5d 	.word	0x08000b5d
 8000a88:	08000b2d 	.word	0x08000b2d
 8000a8c:	2b68      	cmp	r3, #104	@ 0x68
 8000a8e:	d058      	beq.n	8000b42 <dispatch+0x17e>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
        case REQ_MOVE_END:           CALL(on_move_end);           break;
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 8000a90:	e064      	b.n	8000b5c <dispatch+0x198>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 8000a92:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <dispatch+0x1c4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d062      	beq.n	8000b60 <dispatch+0x19c>
 8000a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b88 <dispatch+0x1c4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	4798      	blx	r3
 8000aa6:	e05b      	b.n	8000b60 <dispatch+0x19c>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 8000aa8:	4b37      	ldr	r3, [pc, #220]	@ (8000b88 <dispatch+0x1c4>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d059      	beq.n	8000b64 <dispatch+0x1a0>
 8000ab0:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <dispatch+0x1c4>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	4798      	blx	r3
 8000abc:	e052      	b.n	8000b64 <dispatch+0x1a0>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8000abe:	4b32      	ldr	r3, [pc, #200]	@ (8000b88 <dispatch+0x1c4>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d050      	beq.n	8000b68 <dispatch+0x1a4>
 8000ac6:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <dispatch+0x1c4>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	4798      	blx	r3
 8000ad2:	e049      	b.n	8000b68 <dispatch+0x1a4>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b88 <dispatch+0x1c4>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d047      	beq.n	8000b6c <dispatch+0x1a8>
 8000adc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <dispatch+0x1c4>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	68f8      	ldr	r0, [r7, #12]
 8000ae6:	4798      	blx	r3
 8000ae8:	e040      	b.n	8000b6c <dispatch+0x1a8>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8000aea:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <dispatch+0x1c4>)
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d03e      	beq.n	8000b70 <dispatch+0x1ac>
 8000af2:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <dispatch+0x1c4>)
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	4798      	blx	r3
 8000afe:	e037      	b.n	8000b70 <dispatch+0x1ac>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8000b00:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <dispatch+0x1c4>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d035      	beq.n	8000b74 <dispatch+0x1b0>
 8000b08:	4b1f      	ldr	r3, [pc, #124]	@ (8000b88 <dispatch+0x1c4>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	4798      	blx	r3
 8000b14:	e02e      	b.n	8000b74 <dispatch+0x1b0>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <dispatch+0x1c4>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d02c      	beq.n	8000b78 <dispatch+0x1b4>
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <dispatch+0x1c4>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	4798      	blx	r3
 8000b2a:	e025      	b.n	8000b78 <dispatch+0x1b4>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <dispatch+0x1c4>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d023      	beq.n	8000b7c <dispatch+0x1b8>
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <dispatch+0x1c4>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	4798      	blx	r3
 8000b40:	e01c      	b.n	8000b7c <dispatch+0x1b8>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <dispatch+0x1c4>)
 8000b44:	6a1b      	ldr	r3, [r3, #32]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d01a      	beq.n	8000b80 <dispatch+0x1bc>
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <dispatch+0x1c4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	4798      	blx	r3
 8000b56:	e013      	b.n	8000b80 <dispatch+0x1bc>
    if (!r || !f || len < 4) return;
 8000b58:	bf00      	nop
 8000b5a:	e012      	b.n	8000b82 <dispatch+0x1be>
        default: /* desconhecido */  break;
 8000b5c:	bf00      	nop
 8000b5e:	e010      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 8000b60:	bf00      	nop
 8000b62:	e00e      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 8000b64:	bf00      	nop
 8000b66:	e00c      	b.n	8000b82 <dispatch+0x1be>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8000b68:	bf00      	nop
 8000b6a:	e00a      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8000b6c:	bf00      	nop
 8000b6e:	e008      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8000b70:	bf00      	nop
 8000b72:	e006      	b.n	8000b82 <dispatch+0x1be>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8000b74:	bf00      	nop
 8000b76:	e004      	b.n	8000b82 <dispatch+0x1be>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8000b78:	bf00      	nop
 8000b7a:	e002      	b.n	8000b82 <dispatch+0x1be>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8000b7c:	bf00      	nop
 8000b7e:	e000      	b.n	8000b82 <dispatch+0x1be>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8000b80:	bf00      	nop
    }
    #undef CALL
}
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000094 	.word	0x20000094

08000b8c <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d016      	beq.n	8000bcc <router_feed_bytes+0x40>
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d013      	beq.n	8000bcc <router_feed_bytes+0x40>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d910      	bls.n	8000bcc <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2baa      	cmp	r3, #170	@ 0xaa
 8000bb0:	d10e      	bne.n	8000bd0 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b55      	cmp	r3, #85	@ 0x55
 8000bbe:	d109      	bne.n	8000bd4 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff fefd 	bl	80009c4 <dispatch>
 8000bca:	e004      	b.n	8000bd6 <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8000bcc:	bf00      	nop
 8000bce:	e002      	b.n	8000bd6 <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8000bd0:	bf00      	nop
 8000bd2:	e000      	b.n	8000bd6 <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8000bd4:	bf00      	nop
}
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8000be6:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <home_on_move_home+0x2c>)
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <home_on_move_home+0x30>)
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <home_on_move_home+0x34>)
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <home_on_move_home+0x38>)
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f000 fc0c 	bl	8001418 <log_event_auto>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	0800ba90 	.word	0x0800ba90
 8000c0c:	0800baa8 	.word	0x0800baa8
 8000c10:	0800ba9c 	.word	0x0800ba9c
 8000c14:	0800bab8 	.word	0x0800bab8

08000c18 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    if (!led)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d019      	beq.n	8000c5a <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	889b      	ldrh	r3, [r3, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f107 020c 	add.w	r2, r7, #12
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fd46 	bl	80036e4 <HAL_GPIO_Init>
 8000c58:	e000      	b.n	8000c5c <led_gpio_config_output+0x44>
        return;
 8000c5a:	bf00      	nop
}
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b088      	sub	sp, #32
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
    if (!led)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d01c      	beq.n	8000caa <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	889b      	ldrh	r3, [r3, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f107 020c 	add.w	r2, r7, #12
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fd1e 	bl	80036e4 <HAL_GPIO_Init>
 8000ca8:	e000      	b.n	8000cac <led_gpio_config_pwm+0x4a>
        return;
 8000caa:	bf00      	nop
}
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	733b      	strb	r3, [r7, #12]
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	737b      	strb	r3, [r7, #13]
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8000cd2:	f107 0110 	add.w	r1, r7, #16
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2207      	movs	r2, #7
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fd71 	bl	80007c4 <led_ctrl_resp_encoder>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8000ce8:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <led_push_response+0x80>)
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <led_push_response+0x84>)
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <led_push_response+0x88>)
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	f06f 0201 	mvn.w	r2, #1
 8000cf8:	2164      	movs	r1, #100	@ 0x64
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f000 fb8c 	bl	8001418 <log_event_auto>
 8000d00:	e014      	b.n	8000d2c <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2107      	movs	r1, #7
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fe9b 	bl	8001a44 <app_resp_push>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00b      	beq.n	8000d2c <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <led_push_response+0x80>)
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <led_push_response+0x8c>)
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <led_push_response+0x88>)
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	f06f 0203 	mvn.w	r2, #3
 8000d24:	2164      	movs	r1, #100	@ 0x64
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fb76 	bl	8001418 <log_event_auto>
    }
}
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	0800bac4 	.word	0x0800bac4
 8000d38:	0800bac8 	.word	0x0800bac8
 8000d3c:	0800bae4 	.word	0x0800bae4
 8000d40:	0800baec 	.word	0x0800baec

08000d44 <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 8000d4a:	f004 f891 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
 8000d4e:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <led_timer_get_clock+0x34>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000d58:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <led_timer_get_clock+0x28>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <led_timer_get_clock+0x28>
        clk *= 2u;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8000d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d80:	b094      	sub	sp, #80	@ 0x50
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8000d88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <led_compute_period_ticks+0x16>
        return 0u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e066      	b.n	8000e60 <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 8000d92:	f7ff ffd7 	bl	8000d44 <led_timer_get_clock>
 8000d96:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8000d98:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <led_compute_period_ticks+0xf0>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 8000da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <led_compute_period_ticks+0x2e>
        return 0u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e05a      	b.n	8000e60 <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8000daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8000db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <led_compute_period_ticks+0x42>
        return 0u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e050      	b.n	8000e60 <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 8000dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	464b      	mov	r3, r9
 8000dca:	1891      	adds	r1, r2, r2
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	415b      	adcs	r3, r3
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dd6:	eb12 0408 	adds.w	r4, r2, r8
 8000dda:	eb43 0509 	adc.w	r5, r3, r9
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	016b      	lsls	r3, r5, #5
 8000de8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000dec:	0162      	lsls	r2, r4, #5
 8000dee:	eb14 0a02 	adds.w	sl, r4, r2
 8000df2:	eb45 0b03 	adc.w	fp, r5, r3
 8000df6:	eb1a 0308 	adds.w	r3, sl, r8
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	eb4b 0309 	adc.w	r3, fp, r9
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000e06:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 8000e0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	2200      	movs	r2, #0
 8000e14:	623b      	str	r3, [r7, #32]
 8000e16:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000e1c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000e20:	4621      	mov	r1, r4
 8000e22:	1889      	adds	r1, r1, r2
 8000e24:	61b9      	str	r1, [r7, #24]
 8000e26:	4629      	mov	r1, r5
 8000e28:	eb43 0101 	adc.w	r1, r3, r1
 8000e2c:	61f9      	str	r1, [r7, #28]
 8000e2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e30:	2200      	movs	r2, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	617a      	str	r2, [r7, #20]
 8000e36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e3e:	f7ff fa17 	bl	8000270 <__aeabi_uldivmod>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 8000e4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d305      	bcc.n	8000e5e <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 8000e52:	f04f 32ff 	mov.w	r2, #4294967295
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 8000e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3750      	adds	r7, #80	@ 0x50
 8000e64:	46bd      	mov	sp, r7
 8000e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000404 	.word	0x20000404

08000e70 <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <led_apply_pwm+0x14>
        period_ticks = 1u;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d901      	bls.n	8000e90 <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <led_apply_pwm+0x2c>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <led_apply_pwm+0x2e>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ea8:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 8000eae:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000eba:	f007 f963 	bl	8008184 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 8000ebe:	4a03      	ldr	r2, [pc, #12]	@ (8000ecc <led_apply_pwm+0x5c>)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000404 	.word	0x20000404

08000ed0 <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	6078      	str	r0, [r7, #4]
    if (!led)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d029      	beq.n	8000f32 <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8000ede:	f000 f913 	bl	8001108 <led_pwm_stop>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00d      	beq.n	8000f08 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8000eec:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <led_force_off+0x6c>)
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <led_force_off+0x70>)
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <led_force_off+0x74>)
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	f06f 0203 	mvn.w	r2, #3
 8000f00:	2164      	movs	r1, #100	@ 0x64
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 fa88 	bl	8001418 <log_event_auto>
    }
    led_gpio_config_output(led);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff fe85 	bl	8000c18 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	889b      	ldrh	r3, [r3, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f002 ff99 	bl	8003e50 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	735a      	strb	r2, [r3, #13]
 8000f30:	e000      	b.n	8000f34 <led_force_off+0x64>
        return;
 8000f32:	bf00      	nop
}
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800bac4 	.word	0x0800bac4
 8000f40:	0800bb04 	.word	0x0800bb04
 8000f44:	0800bb28 	.word	0x0800bb28

08000f48 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	6078      	str	r0, [r7, #4]
    if (!led)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d029      	beq.n	8000faa <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8000f56:	f000 f8d7 	bl	8001108 <led_pwm_stop>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00d      	beq.n	8000f80 <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8000f64:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <led_force_on+0x6c>)
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <led_force_on+0x70>)
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <led_force_on+0x74>)
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	f06f 0203 	mvn.w	r2, #3
 8000f78:	2164      	movs	r1, #100	@ 0x64
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f000 fa4c 	bl	8001418 <log_event_auto>
    }
    led_gpio_config_output(led);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fe49 	bl	8000c18 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	889b      	ldrh	r3, [r3, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4619      	mov	r1, r3
 8000f92:	f002 ff5d 	bl	8003e50 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	735a      	strb	r2, [r3, #13]
 8000fa8:	e000      	b.n	8000fac <led_force_on+0x64>
        return;
 8000faa:	bf00      	nop
}
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0800bac4 	.word	0x0800bac4
 8000fb8:	0800bb04 	.word	0x0800bb04
 8000fbc:	0800bb28 	.word	0x0800bb28

08000fc0 <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d03c      	beq.n	800104c <led_force_blink+0x8c>
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d039      	beq.n	800104c <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fece 	bl	8000d7c <led_compute_period_ticks>
 8000fe0:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d801      	bhi.n	8000fec <led_force_blink+0x2c>
        period_ticks = 2u;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff2:	d902      	bls.n	8000ffa <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff8:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	085b      	lsrs	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fe2e 	bl	8000c62 <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff ff31 	bl	8000e70 <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 800100e:	f000 f85d 	bl	80010cc <led_pwm_start>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00f      	beq.n	8001038 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 8001018:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <led_force_blink+0x94>)
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <led_force_blink+0x98>)
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <led_force_blink+0x9c>)
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4613      	mov	r3, r2
 8001024:	f06f 0203 	mvn.w	r2, #3
 8001028:	2164      	movs	r1, #100	@ 0x64
 800102a:	2001      	movs	r0, #1
 800102c:	f000 f9f4 	bl	8001418 <log_event_auto>
        led_force_off(led);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff4d 	bl	8000ed0 <led_force_off>
        return;
 8001036:	e00a      	b.n	800104e <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	735a      	strb	r2, [r3, #13]
 800104a:	e000      	b.n	800104e <led_force_blink+0x8e>
        return;
 800104c:	bf00      	nop
}
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	0800bac4 	.word	0x0800bac4
 8001058:	0800bb30 	.word	0x0800bb30
 800105c:	0800bb28 	.word	0x0800bb28

08001060 <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
 800106c:	4613      	mov	r3, r2
 800106e:	803b      	strh	r3, [r7, #0]
    if (!led)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d026      	beq.n	80010c4 <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 800107c:	2300      	movs	r3, #0
 800107e:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001080:	f3ef 8310 	mrs	r3, PRIMASK
 8001084:	60bb      	str	r3, [r7, #8]
  return(result);
 8001086:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8001088:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800108a:	b672      	cpsid	i
}
 800108c:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d103      	bne.n	800109c <led_apply_config+0x3c>
        led_force_on(led);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff57 	bl	8000f48 <led_force_on>
 800109a:	e00e      	b.n	80010ba <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d108      	bne.n	80010b4 <led_apply_config+0x54>
 80010a2:	883b      	ldrh	r3, [r7, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 80010a8:	883b      	ldrh	r3, [r7, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff87 	bl	8000fc0 <led_force_blink>
 80010b2:	e002      	b.n	80010ba <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff0b 	bl	8000ed0 <led_force_off>
    }

    if (primask == 0u) {
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 80010c0:	b662      	cpsie	i
}
 80010c2:	e000      	b.n	80010c6 <led_apply_config+0x66>
        return;
 80010c4:	bf00      	nop
        __enable_irq();
    }
}
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <led_pwm_start+0x34>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <led_pwm_start+0x12>
        return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e00c      	b.n	80010f8 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80010de:	2100      	movs	r1, #0
 80010e0:	4808      	ldr	r0, [pc, #32]	@ (8001104 <led_pwm_start+0x38>)
 80010e2:	f006 f853 	bl	800718c <HAL_TIM_PWM_Start>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <led_pwm_start+0x34>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
    }
    return st;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000b8 	.word	0x200000b8
 8001104:	20000404 	.word	0x20000404

08001108 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <led_pwm_stop+0x64>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <led_pwm_stop+0x12>
        return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e024      	b.n	8001164 <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800111a:	2100      	movs	r1, #0
 800111c:	4814      	ldr	r0, [pc, #80]	@ (8001170 <led_pwm_stop+0x68>)
 800111e:	f006 f9e5 	bl	80074ec <HAL_TIM_PWM_Stop>
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d11a      	bne.n	8001162 <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <led_pwm_stop+0x68>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6a1a      	ldr	r2, [r3, #32]
 8001132:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <led_pwm_stop+0x54>
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <led_pwm_stop+0x68>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a1a      	ldr	r2, [r3, #32]
 8001142:	f240 4344 	movw	r3, #1092	@ 0x444
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <led_pwm_stop+0x54>
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <led_pwm_stop+0x68>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <led_pwm_stop+0x68>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <led_pwm_stop+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001162:	79fb      	ldrb	r3, [r7, #7]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000b8 	.word	0x200000b8
 8001170:	20000404 	.word	0x20000404

08001174 <led_on_led_ctrl>:
    }

    led_force_off(&g_leds[0]);
}

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b097      	sub	sp, #92	@ 0x5c
 8001178:	af0a      	add	r7, sp, #40	@ 0x28
 800117a:	6178      	str	r0, [r7, #20]
 800117c:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80d2 	beq.w	800132a <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2b08      	cmp	r3, #8
 800118a:	d902      	bls.n	8001192 <led_on_led_ctrl+0x1e>
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001190:	d90e      	bls.n	80011b0 <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 8001192:	4a68      	ldr	r2, [pc, #416]	@ (8001334 <led_on_led_ctrl+0x1c0>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	4b67      	ldr	r3, [pc, #412]	@ (8001338 <led_on_led_ctrl+0x1c4>)
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	4b67      	ldr	r3, [pc, #412]	@ (800133c <led_on_led_ctrl+0x1c8>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	f06f 0203 	mvn.w	r2, #3
 80011a6:	2164      	movs	r1, #100	@ 0x64
 80011a8:	2001      	movs	r0, #1
 80011aa:	f000 f935 	bl	8001418 <log_event_auto>
        return;
 80011ae:	e0bd      	b.n	800132c <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	461a      	mov	r2, r3
 80011b6:	6939      	ldr	r1, [r7, #16]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f7ff fa55 	bl	8000668 <led_ctrl_req_decoder>
 80011be:	4603      	mov	r3, r0
 80011c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 80011c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00f      	beq.n	80011ec <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 80011cc:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80011d0:	4958      	ldr	r1, [pc, #352]	@ (8001334 <led_on_led_ctrl+0x1c0>)
 80011d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	4b59      	ldr	r3, [pc, #356]	@ (8001340 <led_on_led_ctrl+0x1cc>)
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	4b59      	ldr	r3, [pc, #356]	@ (8001344 <led_on_led_ctrl+0x1d0>)
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	460b      	mov	r3, r1
 80011e2:	2164      	movs	r1, #100	@ 0x64
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 f917 	bl	8001418 <log_event_auto>
        return;
 80011ea:	e09f      	b.n	800132c <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 80011ec:	7f7b      	ldrb	r3, [r7, #29]
 80011ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001208:	e02d      	b.n	8001266 <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 800120a:	2301      	movs	r3, #1
 800120c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 8001210:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001214:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001218:	4013      	ands	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01e      	beq.n	800125e <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8001220:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001224:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001228:	4313      	orrs	r3, r2
 800122a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 800122e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4a45      	ldr	r2, [pc, #276]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 8001234:	1898      	adds	r0, r3, r2
 8001236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	3320      	adds	r3, #32
 800123c:	f107 0210 	add.w	r2, r7, #16
 8001240:	4413      	add	r3, r2
 8001242:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	3320      	adds	r3, #32
 800124c:	f107 0210 	add.w	r2, r7, #16
 8001250:	4413      	add	r3, r2
 8001252:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001256:	461a      	mov	r2, r3
 8001258:	f7ff ff02 	bl	8001060 <led_apply_config>
 800125c:	e000      	b.n	8001260 <led_on_led_ctrl+0xec>
            continue;
 800125e:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001262:	3301      	adds	r3, #1
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ce      	beq.n	800120a <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 800126c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001270:	43db      	mvns	r3, r3
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001278:	4013      	ands	r3, r2
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8001280:	2301      	movs	r3, #1
 8001282:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001286:	e00a      	b.n	800129e <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8001288:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800128c:	2b00      	cmp	r3, #0
 800128e:	d106      	bne.n	800129e <led_on_led_ctrl+0x12a>
 8001290:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8001298:	2301      	movs	r3, #1
 800129a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 800129e:	7f3b      	ldrb	r3, [r7, #28]
 80012a0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80012a4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd03 	bl	8000cb4 <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 80012ae:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80012b2:	4e20      	ldr	r6, [pc, #128]	@ (8001334 <led_on_led_ctrl+0x1c0>)
 80012b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012b8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 80012be:	7b1b      	ldrb	r3, [r3, #12]
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 80012c4:	89db      	ldrh	r3, [r3, #14]
 80012c6:	4821      	ldr	r0, [pc, #132]	@ (800134c <led_on_led_ctrl+0x1d8>)
 80012c8:	fba0 0303 	umull	r0, r3, r0, r3
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 80012d4:	89db      	ldrh	r3, [r3, #14]
 80012d6:	481d      	ldr	r0, [pc, #116]	@ (800134c <led_on_led_ctrl+0x1d8>)
 80012d8:	fba0 5003 	umull	r5, r0, r0, r3
 80012dc:	0940      	lsrs	r0, r0, #5
 80012de:	2564      	movs	r5, #100	@ 0x64
 80012e0:	fb05 f000 	mul.w	r0, r5, r0
 80012e4:	1a1b      	subs	r3, r3, r0
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461d      	mov	r5, r3
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <led_on_led_ctrl+0x1d4>)
 80012ec:	7b5b      	ldrb	r3, [r3, #13]
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <led_on_led_ctrl+0x1dc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	3301      	adds	r3, #1
 80012f8:	4815      	ldr	r0, [pc, #84]	@ (8001350 <led_on_led_ctrl+0x1dc>)
 80012fa:	6800      	ldr	r0, [r0, #0]
 80012fc:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80012fe:	9009      	str	r0, [sp, #36]	@ 0x24
 8001300:	9308      	str	r3, [sp, #32]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	9007      	str	r0, [sp, #28]
 8001306:	9506      	str	r5, [sp, #24]
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	9005      	str	r0, [sp, #20]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	9304      	str	r3, [sp, #16]
 8001310:	9103      	str	r1, [sp, #12]
 8001312:	9202      	str	r2, [sp, #8]
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <led_on_led_ctrl+0x1e0>)
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <led_on_led_ctrl+0x1e4>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4633      	mov	r3, r6
 800131e:	4622      	mov	r2, r4
 8001320:	2102      	movs	r1, #2
 8001322:	2001      	movs	r0, #1
 8001324:	f000 f878 	bl	8001418 <log_event_auto>
 8001328:	e000      	b.n	800132c <led_on_led_ctrl+0x1b8>
        return;
 800132a:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
}
 800132c:	3734      	adds	r7, #52	@ 0x34
 800132e:	46bd      	mov	sp, r7
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	bf00      	nop
 8001334:	0800bac4 	.word	0x0800bac4
 8001338:	0800bb9c 	.word	0x0800bb9c
 800133c:	0800bbb8 	.word	0x0800bbb8
 8001340:	0800bbbc 	.word	0x0800bbbc
 8001344:	0800bbe0 	.word	0x0800bbe0
 8001348:	20000000 	.word	0x20000000
 800134c:	51eb851f 	.word	0x51eb851f
 8001350:	20000404 	.word	0x20000404
 8001354:	0800bbe8 	.word	0x0800bbe8
 8001358:	0800bc38 	.word	0x0800bc38

0800135c <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	603a      	str	r2, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	460b      	mov	r3, r1
 800136a:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 800136c:	79f9      	ldrb	r1, [r7, #7]
 800136e:	79ba      	ldrb	r2, [r7, #6]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	4803      	ldr	r0, [pc, #12]	@ (8001380 <log_event_ids+0x24>)
 8001374:	f009 fbd0 	bl	800ab18 <iprintf>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	0800bc40 	.word	0x0800bc40

08001384 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <log_event_names+0x16>
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <log_event_names+0x40>)
 8001398:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <log_event_names+0x20>
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <log_event_names+0x40>)
 80013a2:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <log_event_names+0x2a>
 80013aa:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <log_event_names+0x40>)
 80013ac:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	68f9      	ldr	r1, [r7, #12]
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <log_event_names+0x44>)
 80013b6:	f009 fbaf 	bl	800ab18 <iprintf>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	0800bc60 	.word	0x0800bc60
 80013c8:	0800bc64 	.word	0x0800bc64

080013cc <_write>:

// Mantém _write exatamente igual: utilizado pelo printf para enviar à USART1.
int _write(int fd, char *ptr, int len) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d002      	beq.n	80013e4 <_write+0x18>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d111      	bne.n	8001408 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	4809      	ldr	r0, [pc, #36]	@ (8001414 <_write+0x48>)
 80013f0:	f008 fb34 	bl	8009a5c <HAL_UART_Transmit>
 80013f4:	4603      	mov	r3, r0
 80013f6:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <_write+0x36>
        return len;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	e004      	b.n	800140c <_write+0x40>
      else
        return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e001      	b.n	800140c <_write+0x40>
    }
    return -1;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000450 	.word	0x20000450

08001418 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8001418:	b580      	push	{r7, lr}
 800141a:	b0a8      	sub	sp, #160	@ 0xa0
 800141c:	af00      	add	r7, sp, #0
 800141e:	60ba      	str	r2, [r7, #8]
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	460b      	mov	r3, r1
 8001428:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 800142a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800142e:	2b00      	cmp	r3, #0
 8001430:	d010      	beq.n	8001454 <log_event_auto+0x3c>
 8001432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 800143c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001440:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001442:	f107 0018 	add.w	r0, r7, #24
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800144c:	2180      	movs	r1, #128	@ 0x80
 800144e:	f009 fbe7 	bl	800ac20 <vsniprintf>
    if(fmt && fmt[0]){
 8001452:	e003      	b.n	800145c <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001454:	233f      	movs	r3, #63	@ 0x3f
 8001456:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8001458:	2300      	movs	r3, #0
 800145a:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <log_event_auto+0x4e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e000      	b.n	8001468 <log_event_auto+0x50>
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <log_event_auto+0x84>)
 8001468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 800146c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <log_event_auto+0x62>
 8001474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001478:	e000      	b.n	800147c <log_event_auto+0x64>
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <log_event_auto+0x84>)
 800147c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001488:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <log_event_auto+0x88>)
 800148e:	f009 fb43 	bl	800ab18 <iprintf>
}
 8001492:	bf00      	nop
 8001494:	37a0      	adds	r7, #160	@ 0xa0
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0800bc60 	.word	0x0800bc60
 80014a0:	0800bc64 	.word	0x0800bc64

080014a4 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014ca:	705a      	strb	r2, [r3, #1]

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_add", "queue_depth=%u", (unsigned)g_status.queue_depth);
 80014cc:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <motion_on_move_queue_add+0x54>)
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <motion_on_move_queue_add+0x50>)
 80014d0:	785b      	ldrb	r3, [r3, #1]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <motion_on_move_queue_add+0x58>)
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <motion_on_move_queue_add+0x5c>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	2200      	movs	r2, #0
 80014e2:	2101      	movs	r1, #1
 80014e4:	2002      	movs	r0, #2
 80014e6:	f7ff ff97 	bl	8001418 <log_event_auto>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000bc 	.word	0x200000bc
 80014f8:	0800bc88 	.word	0x0800bc88
 80014fc:	0800bca0 	.word	0x0800bca0
 8001500:	0800bcb0 	.word	0x0800bcb0

08001504 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af04      	add	r7, sp, #16
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status", "queue_depth=%u,state=%u", (unsigned)g_status.queue_depth, (unsigned)g_status.state);
 800150e:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <motion_on_move_queue_status+0x3c>)
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <motion_on_move_queue_status+0x40>)
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4619      	mov	r1, r3
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <motion_on_move_queue_status+0x40>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	9102      	str	r1, [sp, #8]
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <motion_on_move_queue_status+0x44>)
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <motion_on_move_queue_status+0x48>)
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	2002      	movs	r0, #2
 8001532:	f7ff ff71 	bl	8001418 <log_event_auto>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	0800bc88 	.word	0x0800bc88
 8001544:	200000bc 	.word	0x200000bc
 8001548:	0800bcbc 	.word	0x0800bcbc
 800154c:	0800bcd4 	.word	0x0800bcd4

08001550 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af04      	add	r7, sp, #16
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <motion_on_start_move+0x4c>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <motion_on_start_move+0x4c>)
 8001566:	2202      	movs	r2, #2
 8001568:	701a      	strb	r2, [r3, #0]

	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", "%s", (g_status.state == MOTION_RUNNING ? "running" : "ignored"));
 800156a:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <motion_on_start_move+0x50>)
 800156c:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <motion_on_start_move+0x4c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d101      	bne.n	800157a <motion_on_start_move+0x2a>
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <motion_on_start_move+0x54>)
 8001578:	e000      	b.n	800157c <motion_on_start_move+0x2c>
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <motion_on_start_move+0x58>)
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <motion_on_start_move+0x5c>)
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <motion_on_start_move+0x60>)
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4613      	mov	r3, r2
 8001588:	2200      	movs	r2, #0
 800158a:	2102      	movs	r1, #2
 800158c:	2002      	movs	r0, #2
 800158e:	f7ff ff43 	bl	8001418 <log_event_auto>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000bc 	.word	0x200000bc
 80015a0:	0800bc88 	.word	0x0800bc88
 80015a4:	0800bce4 	.word	0x0800bce4
 80015a8:	0800bcec 	.word	0x0800bcec
 80015ac:	0800bc94 	.word	0x0800bc94
 80015b0:	0800bcf4 	.word	0x0800bcf4

080015b4 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <motion_on_move_end+0x34>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopping");
 80015c4:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <motion_on_move_end+0x38>)
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <motion_on_move_end+0x3c>)
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <motion_on_move_end+0x40>)
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <motion_on_move_end+0x44>)
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	4613      	mov	r3, r2
 80015d4:	2200      	movs	r2, #0
 80015d6:	2102      	movs	r1, #2
 80015d8:	2002      	movs	r0, #2
 80015da:	f7ff ff1d 	bl	8001418 <log_event_auto>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000bc 	.word	0x200000bc
 80015ec:	0800bc88 	.word	0x0800bc88
 80015f0:	0800bd00 	.word	0x0800bd00
 80015f4:	0800bc94 	.word	0x0800bc94
 80015f8:	0800bd0c 	.word	0x0800bd0c

080015fc <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af04      	add	r7, sp, #16
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 8001606:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <probe_on_move_probe_level+0x2c>)
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <probe_on_move_probe_level+0x30>)
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <probe_on_move_probe_level+0x34>)
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <probe_on_move_probe_level+0x38>)
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4613      	mov	r3, r2
 8001616:	2200      	movs	r2, #0
 8001618:	2101      	movs	r1, #1
 800161a:	2004      	movs	r0, #4
 800161c:	f7ff fefc 	bl	8001418 <log_event_auto>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	0800bd18 	.word	0x0800bd18
 800162c:	0800bd30 	.word	0x0800bd30
 8001630:	0800bd24 	.word	0x0800bd24
 8001634:	0800bd40 	.word	0x0800bd40

08001638 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	68b8      	ldr	r0, [r7, #8]
 8001648:	f7ff ff2c 	bl	80014a4 <motion_on_move_queue_add>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	68b8      	ldr	r0, [r7, #8]
 8001664:	f7ff ff4e 	bl	8001504 <motion_on_move_queue_status>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f7ff ff66 	bl	8001550 <motion_on_start_move>
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	68b8      	ldr	r0, [r7, #8]
 800169c:	f7ff fa9e 	bl	8000bdc <home_on_move_home>
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	68b8      	ldr	r0, [r7, #8]
 80016b8:	f7ff ffa0 	bl	80015fc <probe_on_move_probe_level>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f7ff ff6e 	bl	80015b4 <motion_on_move_end>
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff fd40 	bl	8001174 <led_on_led_ctrl>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	if (!h)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01b      	beq.n	8001772 <services_register_handlers+0x46>
		return;
	h->on_move_queue_add = h_move_queue_add;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <services_register_handlers+0x54>)
 800173e:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a10      	ldr	r2, [pc, #64]	@ (8001784 <services_register_handlers+0x58>)
 8001744:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a0f      	ldr	r2, [pc, #60]	@ (8001788 <services_register_handlers+0x5c>)
 800174a:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <services_register_handlers+0x60>)
 8001750:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <services_register_handlers+0x64>)
 8001756:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <services_register_handlers+0x68>)
 800175c:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <services_register_handlers+0x6c>)
 8001762:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <services_register_handlers+0x70>)
 8001768:	61da      	str	r2, [r3, #28]
	h->on_test_hello = h_test_hello;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <services_register_handlers+0x74>)
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	e000      	b.n	8001774 <services_register_handlers+0x48>
		return;
 8001772:	bf00      	nop
}
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	08001639 	.word	0x08001639
 8001784:	08001655 	.word	0x08001655
 8001788:	08001671 	.word	0x08001671
 800178c:	0800168d 	.word	0x0800168d
 8001790:	080016a9 	.word	0x080016a9
 8001794:	080016c5 	.word	0x080016c5
 8001798:	080016e1 	.word	0x080016e1
 800179c:	080016fd 	.word	0x080016fd
 80017a0:	08001715 	.word	0x08001715

080017a4 <is_fill42>:
static volatile app_spi_state_t g_state         = APP_SPI_READY;

// ----------------- Helpers mínimos -----------------

// Verifica se todo o buffer é preenchido por "val" (ex.: 42×0x3C)
static int is_fill42(const uint8_t *buf, uint8_t val) {
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e00b      	b.n	80017ce <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <is_fill42+0x24>
 80017c4:	2300      	movs	r3, #0
 80017c6:	e006      	b.n	80017d6 <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b29      	cmp	r3, #41	@ 0x29
 80017d2:	d9f0      	bls.n	80017b6 <is_fill42+0x12>
    return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <find_frame>:

// Localiza um quadro [0xAA ... 0x55] dentro do buffer
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len) {
 80017e2:	b480      	push	{r7}
 80017e4:	b087      	sub	sp, #28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 80017f2:	e002      	b.n	80017fa <find_frame+0x18>
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	3301      	adds	r3, #1
 80017f8:	82fb      	strh	r3, [r7, #22]
 80017fa:	8afb      	ldrh	r3, [r7, #22]
 80017fc:	2b29      	cmp	r3, #41	@ 0x29
 80017fe:	d805      	bhi.n	800180c <find_frame+0x2a>
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2baa      	cmp	r3, #170	@ 0xaa
 800180a:	d1f3      	bne.n	80017f4 <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 800180c:	8afb      	ldrh	r3, [r7, #22]
 800180e:	2b29      	cmp	r3, #41	@ 0x29
 8001810:	d901      	bls.n	8001816 <find_frame+0x34>
 8001812:	2300      	movs	r3, #0
 8001814:	e01d      	b.n	8001852 <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8001816:	8afb      	ldrh	r3, [r7, #22]
 8001818:	3301      	adds	r3, #1
 800181a:	82bb      	strh	r3, [r7, #20]
 800181c:	e015      	b.n	800184a <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 800181e:	8abb      	ldrh	r3, [r7, #20]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b55      	cmp	r3, #85	@ 0x55
 8001828:	d10c      	bne.n	8001844 <find_frame+0x62>
            *off = i;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	8afa      	ldrh	r2, [r7, #22]
 800182e:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8001830:	8aba      	ldrh	r2, [r7, #20]
 8001832:	8afb      	ldrh	r3, [r7, #22]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b29b      	uxth	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	801a      	strh	r2, [r3, #0]
            return 1;
 8001840:	2301      	movs	r3, #1
 8001842:	e006      	b.n	8001852 <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8001844:	8abb      	ldrh	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	82bb      	strh	r3, [r7, #20]
 800184a:	8abb      	ldrh	r3, [r7, #20]
 800184c:	2b29      	cmp	r3, #41	@ 0x29
 800184e:	d9e6      	bls.n	800181e <find_frame+0x3c>
        }
    }
    return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <prepare_next_tx>:

// Prepara TX para o próximo round: copia resposta (se houver) ou 42×A5
// Prepara TX para o próximo round:
// - Se houver resposta (n > 0): zera o quadro e alinha a resposta à direita.
// - Se não houver: 42×A5 (filler/poll sem payload).
static void prepare_next_tx(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (!g_resp_fifo) {
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <prepare_next_tx+0x7c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d108      	bne.n	8001884 <prepare_next_tx+0x24>
        // Sem fila -> filler A5
        memset(g_spi_tx_dma_buf, SPI_FILL_BYTE, APP_SPI_DMA_BUF_LEN);
 8001872:	222a      	movs	r2, #42	@ 0x2a
 8001874:	21a5      	movs	r1, #165	@ 0xa5
 8001876:	481a      	ldr	r0, [pc, #104]	@ (80018e0 <prepare_next_tx+0x80>)
 8001878:	f009 f9e0 	bl	800ac3c <memset>
        g_state = APP_SPI_READY;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <prepare_next_tx+0x84>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e028      	b.n	80018d6 <prepare_next_tx+0x76>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <prepare_next_tx+0x7c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4639      	mov	r1, r7
 800188a:	222a      	movs	r2, #42	@ 0x2a
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f829 	bl	80008e4 <resp_fifo_pop>
 8001892:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (n > 0) {
 8001894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001896:	2b00      	cmp	r3, #0
 8001898:	dd15      	ble.n	80018c6 <prepare_next_tx+0x66>
        // >>> comportamento desejado <<<
        // zeros à esquerda + payload encodado (com 0xAB no começo) à direita
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 800189a:	222a      	movs	r2, #42	@ 0x2a
 800189c:	2100      	movs	r1, #0
 800189e:	4810      	ldr	r0, [pc, #64]	@ (80018e0 <prepare_next_tx+0x80>)
 80018a0:	f009 f9cc 	bl	800ac3c <memset>
        uint16_t off = (uint16_t)(APP_SPI_DMA_BUF_LEN - (uint16_t)n);
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80018ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
        memcpy(&g_spi_tx_dma_buf[off], tmp, (size_t)n);
 80018ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80018b0:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <prepare_next_tx+0x80>)
 80018b2:	4413      	add	r3, r2
 80018b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b6:	4639      	mov	r1, r7
 80018b8:	4618      	mov	r0, r3
 80018ba:	f009 fa4a 	bl	800ad52 <memcpy>
        g_state = APP_SPI_PENDING;
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <prepare_next_tx+0x84>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <prepare_next_tx+0x76>
    } else {
        // sem resposta -> 42 × A5
        memset(g_spi_tx_dma_buf, SPI_FILL_BYTE, APP_SPI_DMA_BUF_LEN);
 80018c6:	222a      	movs	r2, #42	@ 0x2a
 80018c8:	21a5      	movs	r1, #165	@ 0xa5
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <prepare_next_tx+0x80>)
 80018cc:	f009 f9b6 	bl	800ac3c <memset>
        g_state = APP_SPI_READY;
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <prepare_next_tx+0x84>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
    }
}
 80018d6:	3730      	adds	r7, #48	@ 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000130 	.word	0x20000130
 80018e0:	20000160 	.word	0x20000160
 80018e4:	2000018c 	.word	0x2000018c

080018e8 <restart_spi_dma>:


// Reinicia uma transação DMA (não bloqueante)
static void restart_spi_dma(void) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 80018ec:	480d      	ldr	r0, [pc, #52]	@ (8001924 <restart_spi_dma+0x3c>)
 80018ee:	f004 ff77 	bl	80067e0 <HAL_SPI_GetState>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d003      	beq.n	8001900 <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <restart_spi_dma+0x40>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
        return;
 80018fe:	e00f      	b.n	8001920 <restart_spi_dma+0x38>
    }
    if (HAL_SPI_TransmitReceive_DMA(&hspi1,
 8001900:	232a      	movs	r3, #42	@ 0x2a
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <restart_spi_dma+0x44>)
 8001904:	490a      	ldr	r1, [pc, #40]	@ (8001930 <restart_spi_dma+0x48>)
 8001906:	4807      	ldr	r0, [pc, #28]	@ (8001924 <restart_spi_dma+0x3c>)
 8001908:	f004 fc9e 	bl	8006248 <HAL_SPI_TransmitReceive_DMA>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <restart_spi_dma+0x40>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
        return;
 8001918:	e002      	b.n	8001920 <restart_spi_dma+0x38>
    }
    g_state = APP_SPI_BUSY;
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <restart_spi_dma+0x4c>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
}
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000190 	.word	0x20000190
 8001928:	2000018b 	.word	0x2000018b
 800192c:	20000134 	.word	0x20000134
 8001930:	20000160 	.word	0x20000160
 8001934:	2000018c 	.word	0x2000018c

08001938 <app_init>:

// ----------------- API -----------------

void app_init(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    // Registra serviços no router (seu projeto já deve prover isso)
    memset(&g_handlers, 0, sizeof g_handlers);
 800193c:	2224      	movs	r2, #36	@ 0x24
 800193e:	2100      	movs	r1, #0
 8001940:	480e      	ldr	r0, [pc, #56]	@ (800197c <app_init+0x44>)
 8001942:	f009 f97b 	bl	800ac3c <memset>
    // Se você usa adapters de serviços, registre aqui:
    services_register_handlers(&g_handlers);
 8001946:	480d      	ldr	r0, [pc, #52]	@ (800197c <app_init+0x44>)
 8001948:	f7ff fef0 	bl	800172c <services_register_handlers>

    g_resp_fifo = resp_fifo_create();
 800194c:	f7fe ff6d 	bl	800082a <resp_fifo_create>
 8001950:	4603      	mov	r3, r0
 8001952:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <app_init+0x48>)
 8001954:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <app_init+0x48>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a08      	ldr	r2, [pc, #32]	@ (800197c <app_init+0x44>)
 800195c:	4619      	mov	r1, r3
 800195e:	4809      	ldr	r0, [pc, #36]	@ (8001984 <app_init+0x4c>)
 8001960:	f7ff f806 	bl	8000970 <router_init>

    // Primeiro frame: apenas filler
    memset(g_spi_tx_dma_buf, SPI_FILL_BYTE, APP_SPI_DMA_BUF_LEN);
 8001964:	222a      	movs	r2, #42	@ 0x2a
 8001966:	21a5      	movs	r1, #165	@ 0xa5
 8001968:	4807      	ldr	r0, [pc, #28]	@ (8001988 <app_init+0x50>)
 800196a:	f009 f967 	bl	800ac3c <memset>
    restart_spi_dma();
 800196e:	f7ff ffbb 	bl	80018e8 <restart_spi_dma>
    g_state = APP_SPI_READY;
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <app_init+0x54>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2000010c 	.word	0x2000010c
 8001980:	20000130 	.word	0x20000130
 8001984:	200000c4 	.word	0x200000c4
 8001988:	20000160 	.word	0x20000160
 800198c:	2000018c 	.word	0x2000018c

08001990 <app_poll>:

void app_poll(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
    // Só processa quando um round DMA foi concluído pelo HAL
    if (!g_spi_round_done) return;
 8001996:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <app_poll+0x6c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d028      	beq.n	80019f2 <app_poll+0x62>
    g_spi_round_done = 0u;
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <app_poll+0x6c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

    // 1) Interpretar o RX atual
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 80019a6:	213c      	movs	r1, #60	@ 0x3c
 80019a8:	4815      	ldr	r0, [pc, #84]	@ (8001a00 <app_poll+0x70>)
 80019aa:	f7ff fefb 	bl	80017a4 <is_fill42>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d119      	bne.n	80019e8 <app_poll+0x58>
        // 42×0x3C => cliente apenas leu respostas; não alimenta router
    } else {
        // Tenta extrair [0xAA ... 0x55] e empurrar para o router
        uint16_t off = 0, len = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	80fb      	strh	r3, [r7, #6]
 80019b8:	2300      	movs	r3, #0
 80019ba:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 80019bc:	1d3a      	adds	r2, r7, #4
 80019be:	1dbb      	adds	r3, r7, #6
 80019c0:	4619      	mov	r1, r3
 80019c2:	480f      	ldr	r0, [pc, #60]	@ (8001a00 <app_poll+0x70>)
 80019c4:	f7ff ff0d 	bl	80017e2 <find_frame>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <app_poll+0x70>)
 80019d4:	4413      	add	r3, r2
 80019d6:	88ba      	ldrh	r2, [r7, #4]
 80019d8:	4619      	mov	r1, r3
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <app_poll+0x74>)
 80019dc:	f7ff f8d6 	bl	8000b8c <router_feed_bytes>
 80019e0:	e002      	b.n	80019e8 <app_poll+0x58>
        } else {
            // quadro inválido/parcial ou outro padrão -> marca erro
            g_spi_error_flag = 1u;
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <app_poll+0x78>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
        }
    }

    // 2) Preparar TX (resposta ou 42×A5)
    prepare_next_tx();
 80019e8:	f7ff ff3a 	bl	8001860 <prepare_next_tx>

    // 3) Reiniciar o DMA para o próximo round
    restart_spi_dma();
 80019ec:	f7ff ff7c 	bl	80018e8 <restart_spi_dma>
 80019f0:	e000      	b.n	80019f4 <app_poll+0x64>
    if (!g_spi_round_done) return;
 80019f2:	bf00      	nop
}
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000018a 	.word	0x2000018a
 8001a00:	20000134 	.word	0x20000134
 8001a04:	200000c4 	.word	0x200000c4
 8001a08:	2000018b 	.word	0x2000018b

08001a0c <app_spi_isr_txrx_done>:
app_spi_state_t app_spi_get_state(void) { return g_state; }
uint8_t         app_spi_get_error(void) { return g_spi_error_flag; }

// ----------------- Chamadas a partir dos callbacks do HAL -----------------

void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <app_spi_isr_txrx_done+0x30>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d105      	bne.n	8001a30 <app_spi_isr_txrx_done+0x24>
    // Sinaliza para o loop principal processar RX->router e TX->DMA
    g_spi_round_done = 1u;
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <app_spi_isr_txrx_done+0x34>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e002      	b.n	8001a32 <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 8001a2c:	bf00      	nop
 8001a2e:	e000      	b.n	8001a32 <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8001a30:	bf00      	nop
}
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40013000 	.word	0x40013000
 8001a40:	2000018a 	.word	0x2000018a

08001a44 <app_resp_push>:

int app_resp_push(const uint8_t *frame, uint32_t len) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <app_resp_push+0x48>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <app_resp_push+0x1e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <app_resp_push+0x1e>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e00d      	b.n	8001a84 <app_resp_push+0x40>
    }
    // opcional: proteger contra resposta maior que o quadro DMA
    if (len > APP_SPI_DMA_BUF_LEN) {
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a6c:	d902      	bls.n	8001a74 <app_resp_push+0x30>
        return PROTO_ERR_RANGE;
 8001a6e:	f06f 0303 	mvn.w	r3, #3
 8001a72:	e007      	b.n	8001a84 <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <app_resp_push+0x48>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fedd 	bl	800083c <resp_fifo_push>
 8001a82:	4603      	mov	r3, r0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000130 	.word	0x20000130

08001a90 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	@ 0x38
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2224      	movs	r2, #36	@ 0x24
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f009 f8cb 	bl	800ac3c <memset>
    TIM_MasterConfigTypeDef master = {0};
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aca:	2301      	movs	r3, #1
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f005 fe39 	bl	8007754 <HAL_TIM_Encoder_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 8001ae8:	f000 fa90 	bl	800200c <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f007 fc5a 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 8001b06:	f000 fa81 	bl	800200c <Error_Handler>
    }
}
 8001b0a:	bf00      	nop
 8001b0c:	3738      	adds	r7, #56	@ 0x38
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b08a      	sub	sp, #40	@ 0x28
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f001 fdcd 	bl	80036e4 <HAL_GPIO_Init>
}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	@ 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8001b68:	2203      	movs	r2, #3
 8001b6a:	2113      	movs	r1, #19
 8001b6c:	4824      	ldr	r0, [pc, #144]	@ (8001c00 <board_config_apply_motion_gpio+0xac>)
 8001b6e:	f7ff ffd0 	bl	8001b12 <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8001b72:	2203      	movs	r2, #3
 8001b74:	2104      	movs	r1, #4
 8001b76:	4822      	ldr	r0, [pc, #136]	@ (8001c00 <board_config_apply_motion_gpio+0xac>)
 8001b78:	f7ff ffcb 	bl	8001b12 <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	210c      	movs	r1, #12
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b84:	f7ff ffc5 	bl	8001b12 <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2130      	movs	r1, #48	@ 0x30
 8001b8c:	481d      	ldr	r0, [pc, #116]	@ (8001c04 <board_config_apply_motion_gpio+0xb0>)
 8001b8e:	f7ff ffc0 	bl	8001b12 <configure_output>
    configure_output(GPIOA, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 8001b92:	2200      	movs	r2, #0
 8001b94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9c:	f7ff ffb9 	bl	8001b12 <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2117      	movs	r1, #23
 8001ba4:	4816      	ldr	r0, [pc, #88]	@ (8001c00 <board_config_apply_motion_gpio+0xac>)
 8001ba6:	f002 f953 	bl	8003e50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	210c      	movs	r1, #12
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb2:	f002 f94d 	bl	8003e50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2130      	movs	r1, #48	@ 0x30
 8001bba:	4812      	ldr	r0, [pc, #72]	@ (8001c04 <board_config_apply_motion_gpio+0xb0>)
 8001bbc:	f002 f948 	bl	8003e50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bca:	f002 f941 	bl	8003e50 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001bd2:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001bd8:	2307      	movs	r3, #7
 8001bda:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4808      	ldr	r0, [pc, #32]	@ (8001c04 <board_config_apply_motion_gpio+0xb0>)
 8001be2:	f001 fd7f 	bl	80036e4 <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 8001be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bea:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <board_config_apply_motion_gpio+0xb0>)
 8001bf2:	f001 fd77 	bl	80036e4 <HAL_GPIO_Init>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	48000400 	.word	0x48000400
 8001c04:	48000800 	.word	0x48000800

08001c08 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim2);
 8001c0c:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <board_config_force_encoder_quadrature+0x1c>)
 8001c0e:	f7ff ff3f 	bl	8001a90 <configure_encoder_timer>
    configure_encoder_timer(&htim3);
 8001c12:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <board_config_force_encoder_quadrature+0x20>)
 8001c14:	f7ff ff3c 	bl	8001a90 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <board_config_force_encoder_quadrature+0x24>)
 8001c1a:	f7ff ff39 	bl	8001a90 <configure_encoder_timer>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000288 	.word	0x20000288
 8001c28:	200002d4 	.word	0x200002d4
 8001c2c:	20000320 	.word	0x20000320

08001c30 <board_config_remap_tim3_encoder_pins>:

void board_config_remap_tim3_encoder_pins(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]

    /* Libera a configuração padrão do CubeMX e migra o encoder para PC6/PC7 */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3 | GPIO_PIN_4);
 8001c44:	2118      	movs	r1, #24
 8001c46:	4811      	ldr	r0, [pc, #68]	@ (8001c8c <board_config_remap_tim3_encoder_pins+0x5c>)
 8001c48:	f001 ffd8 	bl	8003bfc <HAL_GPIO_DeInit>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <board_config_remap_tim3_encoder_pins+0x60>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <board_config_remap_tim3_encoder_pins+0x60>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <board_config_remap_tim3_encoder_pins+0x60>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]

    init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001c64:	23c0      	movs	r3, #192	@ 0xc0
 8001c66:	607b      	str	r3, [r7, #4]
    init.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
    init.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
    init.Alternate = GPIO_AF2_TIM3;
 8001c74:	2302      	movs	r3, #2
 8001c76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &init);
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <board_config_remap_tim3_encoder_pins+0x64>)
 8001c7e:	f001 fd31 	bl	80036e4 <HAL_GPIO_Init>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	48001000 	.word	0x48001000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	48000800 	.word	0x48000800

08001c98 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2006      	movs	r0, #6
 8001ca2:	f001 f989 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ca6:	2006      	movs	r0, #6
 8001ca8:	f001 f9b2 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2007      	movs	r0, #7
 8001cb2:	f001 f981 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001cb6:	2007      	movs	r0, #7
 8001cb8:	f001 f9aa 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2008      	movs	r0, #8
 8001cc2:	f001 f979 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001cc6:	2008      	movs	r0, #8
 8001cc8:	f001 f9a2 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2028      	movs	r0, #40	@ 0x28
 8001cd2:	f001 f971 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cd6:	2028      	movs	r0, #40	@ 0x28
 8001cd8:	f001 f99a 	bl	8003010 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2101      	movs	r1, #1
 8001ce0:	2036      	movs	r0, #54	@ 0x36
 8001ce2:	f001 f969 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ce6:	2036      	movs	r0, #54	@ 0x36
 8001ce8:	f001 f992 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2102      	movs	r1, #2
 8001cf0:	200c      	movs	r0, #12
 8001cf2:	f001 f961 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001cf6:	200c      	movs	r0, #12
 8001cf8:	f001 f98a 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2102      	movs	r1, #2
 8001d00:	200d      	movs	r0, #13
 8001d02:	f001 f959 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d06:	200d      	movs	r0, #13
 8001d08:	f001 f982 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2103      	movs	r1, #3
 8001d10:	2037      	movs	r0, #55	@ 0x37
 8001d12:	f001 f951 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d16:	2037      	movs	r0, #55	@ 0x37
 8001d18:	f001 f97a 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2104      	movs	r1, #4
 8001d20:	2025      	movs	r0, #37	@ 0x25
 8001d22:	f001 f949 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d26:	2025      	movs	r0, #37	@ 0x25
 8001d28:	f001 f972 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2105      	movs	r1, #5
 8001d30:	2023      	movs	r0, #35	@ 0x23
 8001d32:	f001 f941 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d36:	2023      	movs	r0, #35	@ 0x23
 8001d38:	f001 f96a 	bl	8003010 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2106      	movs	r1, #6
 8001d40:	2018      	movs	r0, #24
 8001d42:	f001 f939 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d46:	2018      	movs	r0, #24
 8001d48:	f001 f962 	bl	8003010 <HAL_NVIC_EnableIRQ>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <MX_DMA_Init+0x48>)
 8001d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <MX_DMA_Init+0x48>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <MX_DMA_Init+0x48>)
 8001d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	200c      	movs	r0, #12
 8001d74:	f001 f920 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d78:	200c      	movs	r0, #12
 8001d7a:	f001 f949 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	200d      	movs	r0, #13
 8001d84:	f001 f918 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d88:	200d      	movs	r0, #13
 8001d8a:	f001 f941 	bl	8003010 <HAL_NVIC_EnableIRQ>

}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000

08001d9c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a46      	ldr	r2, [pc, #280]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b44      	ldr	r3, [pc, #272]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de2:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	4a40      	ldr	r2, [pc, #256]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e06:	4b38      	ldr	r3, [pc, #224]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e16:	4a34      	ldr	r2, [pc, #208]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <MX_GPIO_Init+0x14c>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001e42:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 8001e46:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4825      	ldr	r0, [pc, #148]	@ (8001eec <MX_GPIO_Init+0x150>)
 8001e58:	f001 fc44 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001e5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e60:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e62:	2303      	movs	r3, #3
 8001e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	481f      	ldr	r0, [pc, #124]	@ (8001ef0 <MX_GPIO_Init+0x154>)
 8001e72:	f001 fc37 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e76:	2303      	movs	r3, #3
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	481a      	ldr	r0, [pc, #104]	@ (8001ef4 <MX_GPIO_Init+0x158>)
 8001e8a:	f001 fc2b 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e8e:	f641 7308 	movw	r3, #7944	@ 0x1f08
 8001e92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e94:	2303      	movs	r3, #3
 8001e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea6:	f001 fc1d 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001eaa:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 8001eae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480e      	ldr	r0, [pc, #56]	@ (8001ef8 <MX_GPIO_Init+0x15c>)
 8001ec0:	f001 fc10 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ec8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4808      	ldr	r0, [pc, #32]	@ (8001efc <MX_GPIO_Init+0x160>)
 8001eda:	f001 fc03 	bl	80036e4 <HAL_GPIO_Init>

}
 8001ede:	bf00      	nop
 8001ee0:	3730      	adds	r7, #48	@ 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	48001000 	.word	0x48001000
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	48001c00 	.word	0x48001c00
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	48000c00 	.word	0x48000c00

08001f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f04:	f000 fef3 	bl	8002cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f08:	f000 f821 	bl	8001f4e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f0c:	f7ff ff46 	bl	8001d9c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f10:	f7ff ff1e 	bl	8001d50 <MX_DMA_Init>
  MX_SPI1_Init();
 8001f14:	f000 f89e 	bl	8002054 <MX_SPI1_Init>
  MX_TIM6_Init();
 8001f18:	f000 fbb6 	bl	8002688 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001f1c:	f000 fab4 	bl	8002488 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001f20:	f000 fb5c 	bl	80025dc <MX_TIM5_Init>
  MX_TIM7_Init();
 8001f24:	f000 fbe6 	bl	80026f4 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001f28:	f000 fb02 	bl	8002530 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001f2c:	f000 fe28 	bl	8002b80 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8001f30:	f000 fc16 	bl	8002760 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8001f34:	f7ff fe0e 	bl	8001b54 <board_config_apply_motion_gpio>
    board_config_remap_tim3_encoder_pins();
 8001f38:	f7ff fe7a 	bl	8001c30 <board_config_remap_tim3_encoder_pins>
    board_config_force_encoder_quadrature();
 8001f3c:	f7ff fe64 	bl	8001c08 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 8001f40:	f7ff feaa 	bl	8001c98 <board_config_apply_interrupt_priorities>
    //board_config_apply_spi_dma_profile();
    app_init();
 8001f44:	f7ff fcf8 	bl	8001938 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8001f48:	f7ff fd22 	bl	8001990 <app_poll>
 8001f4c:	e7fc      	b.n	8001f48 <main+0x48>

08001f4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b096      	sub	sp, #88	@ 0x58
 8001f52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2244      	movs	r2, #68	@ 0x44
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f008 fe6d 	bl	800ac3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f62:	463b      	mov	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f70:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f74:	f001 ffca 	bl	8003f0c <HAL_PWREx_ControlVoltageScaling>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f7e:	f000 f845 	bl	800200c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f82:	2310      	movs	r3, #16
 8001f84:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f86:	2301      	movs	r3, #1
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f8e:	2360      	movs	r3, #96	@ 0x60
 8001f90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f92:	2302      	movs	r3, #2
 8001f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001f96:	2301      	movs	r3, #1
 8001f98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001f9e:	2328      	movs	r3, #40	@ 0x28
 8001fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 f80c 	bl	8003fd0 <HAL_RCC_OscConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001fbe:	f000 f825 	bl	800200c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fd8:	463b      	mov	r3, r7
 8001fda:	2104      	movs	r1, #4
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fcf9 	bl	80049d4 <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001fe8:	f000 f810 	bl	800200c <Error_Handler>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3758      	adds	r7, #88	@ 0x58
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fd05 	bl	8001a0c <app_spi_isr_txrx_done>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	2164      	movs	r1, #100	@ 0x64
 8002016:	2000      	movs	r0, #0
 8002018:	f7ff f9a0 	bl	800135c <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 800201c:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <Error_Handler+0x24>)
 800201e:	4905      	ldr	r1, [pc, #20]	@ (8002034 <Error_Handler+0x28>)
 8002020:	4805      	ldr	r0, [pc, #20]	@ (8002038 <Error_Handler+0x2c>)
 8002022:	f7ff f9af 	bl	8001384 <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8002026:	b672      	cpsid	i
}
 8002028:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 800202a:	bf00      	nop
 800202c:	e7fd      	b.n	800202a <Error_Handler+0x1e>
 800202e:	bf00      	nop
 8002030:	0800bd54 	.word	0x0800bd54
 8002034:	0800bd64 	.word	0x0800bd64
 8002038:	0800bd6c 	.word	0x0800bd6c

0800203c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002058:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <MX_SPI1_Init+0x68>)
 800205a:	4a19      	ldr	r2, [pc, #100]	@ (80020c0 <MX_SPI1_Init+0x6c>)
 800205c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800205e:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <MX_SPI1_Init+0x68>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <MX_SPI1_Init+0x68>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <MX_SPI1_Init+0x68>)
 800206c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002072:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <MX_SPI1_Init+0x68>)
 8002074:	2202      	movs	r2, #2
 8002076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002078:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <MX_SPI1_Init+0x68>)
 800207a:	2201      	movs	r2, #1
 800207c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800207e:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <MX_SPI1_Init+0x68>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002084:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <MX_SPI1_Init+0x68>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800208a:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <MX_SPI1_Init+0x68>)
 800208c:	2200      	movs	r2, #0
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002090:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <MX_SPI1_Init+0x68>)
 8002092:	2200      	movs	r2, #0
 8002094:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <MX_SPI1_Init+0x68>)
 8002098:	2207      	movs	r2, #7
 800209a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <MX_SPI1_Init+0x68>)
 800209e:	2200      	movs	r2, #0
 80020a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <MX_SPI1_Init+0x68>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020a8:	4804      	ldr	r0, [pc, #16]	@ (80020bc <MX_SPI1_Init+0x68>)
 80020aa:	f003 fedf 	bl	8005e6c <HAL_SPI_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80020b4:	f7ff ffaa 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000190 	.word	0x20000190
 80020c0:	40013000 	.word	0x40013000

080020c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a45      	ldr	r2, [pc, #276]	@ (80021f8 <HAL_SPI_MspInit+0x134>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	f040 8083 	bne.w	80021ee <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e8:	4b44      	ldr	r3, [pc, #272]	@ (80021fc <HAL_SPI_MspInit+0x138>)
 80020ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ec:	4a43      	ldr	r2, [pc, #268]	@ (80021fc <HAL_SPI_MspInit+0x138>)
 80020ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f4:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <HAL_SPI_MspInit+0x138>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	4b3e      	ldr	r3, [pc, #248]	@ (80021fc <HAL_SPI_MspInit+0x138>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002104:	4a3d      	ldr	r2, [pc, #244]	@ (80021fc <HAL_SPI_MspInit+0x138>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210c:	4b3b      	ldr	r3, [pc, #236]	@ (80021fc <HAL_SPI_MspInit+0x138>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002118:	23f0      	movs	r3, #240	@ 0xf0
 800211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002128:	2305      	movs	r3, #5
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002136:	f001 fad5 	bl	80036e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800213a:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 800213c:	4a31      	ldr	r2, [pc, #196]	@ (8002204 <HAL_SPI_MspInit+0x140>)
 800213e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002140:	4b2f      	ldr	r3, [pc, #188]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 8002142:	2201      	movs	r2, #1
 8002144:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002146:	4b2e      	ldr	r3, [pc, #184]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800214c:	4b2c      	ldr	r3, [pc, #176]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002152:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 8002154:	2280      	movs	r2, #128	@ 0x80
 8002156:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002158:	4b29      	ldr	r3, [pc, #164]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800215e:	4b28      	ldr	r3, [pc, #160]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002164:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 8002166:	2220      	movs	r2, #32
 8002168:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800216a:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002170:	4823      	ldr	r0, [pc, #140]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 8002172:	f000 ff71 	bl	8003058 <HAL_DMA_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 800217c:	f7ff ff46 	bl	800200c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a1f      	ldr	r2, [pc, #124]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 8002184:	659a      	str	r2, [r3, #88]	@ 0x58
 8002186:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_SPI_MspInit+0x13c>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800218c:	4b1e      	ldr	r3, [pc, #120]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 800218e:	4a1f      	ldr	r2, [pc, #124]	@ (800220c <HAL_SPI_MspInit+0x148>)
 8002190:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002192:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 8002194:	2201      	movs	r2, #1
 8002196:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 800219a:	2210      	movs	r2, #16
 800219c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219e:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a4:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021a6:	2280      	movs	r2, #128	@ 0x80
 80021a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021aa:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021b8:	2220      	movs	r2, #32
 80021ba:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80021c2:	4811      	ldr	r0, [pc, #68]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021c4:	f000 ff48 	bl	8003058 <HAL_DMA_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80021ce:	f7ff ff1d 	bl	800200c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80021d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002208 <HAL_SPI_MspInit+0x144>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2023      	movs	r0, #35	@ 0x23
 80021e4:	f000 fee8 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80021e8:	2023      	movs	r0, #35	@ 0x23
 80021ea:	f000 ff11 	bl	8003010 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	@ 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40013000 	.word	0x40013000
 80021fc:	40021000 	.word	0x40021000
 8002200:	200001f4 	.word	0x200001f4
 8002204:	4002001c 	.word	0x4002001c
 8002208:	2000023c 	.word	0x2000023c
 800220c:	40020030 	.word	0x40020030

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_MspInit+0x44>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221a:	4a0e      	ldr	r2, [pc, #56]	@ (8002254 <HAL_MspInit+0x44>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6613      	str	r3, [r2, #96]	@ 0x60
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <HAL_MspInit+0x44>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_MspInit+0x44>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002232:	4a08      	ldr	r2, [pc, #32]	@ (8002254 <HAL_MspInit+0x44>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	@ 0x58
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_MspInit+0x44>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <NMI_Handler+0x4>

08002260 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <HardFault_Handler+0x4>

08002268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <MemManage_Handler+0x4>

08002270 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <UsageFault_Handler+0x4>

08002280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ae:	f000 fd73 	bl	8002d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <DMA1_Channel2_IRQHandler+0x10>)
 80022be:	f001 f932 	bl	8003526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200001f4 	.word	0x200001f4

080022cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <DMA1_Channel3_IRQHandler+0x10>)
 80022d2:	f001 f928 	bl	8003526 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000023c 	.word	0x2000023c

080022e0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <SPI1_IRQHandler+0x10>)
 80022e6:	f004 f953 	bl	8006590 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000190 	.word	0x20000190

080022f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <TIM6_DAC_IRQHandler+0x10>)
 80022fa:	f005 fbed 	bl	8007ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000036c 	.word	0x2000036c

08002308 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <TIM7_IRQHandler+0x10>)
 800230e:	f005 fbe3 	bl	8007ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200003b8 	.word	0x200003b8

0800231c <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002320:	2001      	movs	r0, #1
 8002322:	f001 fdc1 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}

0800232a <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800232e:	2002      	movs	r0, #2
 8002330:	f001 fdba 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800233c:	2004      	movs	r0, #4
 800233e:	f001 fdb3 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}

08002346 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800234a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800234e:	f001 fdab 	bl	8003ea8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}

08002356 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e00a      	b.n	800237e <_read+0x28>
		*ptr++ = __io_getchar();
 8002368:	f3af 8000 	nop.w
 800236c:	4601      	mov	r1, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	dbf0      	blt.n	8002368 <_read+0x12>
	}

	return len;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_fstat>:

int _fstat(int file, struct stat *st) {
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023b8:	605a      	str	r2, [r3, #4]
	return 0;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_isatty>:

int _isatty(int file) {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002402:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002414:	4b11      	ldr	r3, [pc, #68]	@ (800245c <_sbrk+0x64>)
 8002416:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <_sbrk+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <_sbrk+0x40>
		errno = ENOMEM;
 8002428:	f008 fc66 	bl	800acf8 <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e009      	b.n	800244c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	4a05      	ldr	r2, [pc, #20]	@ (800245c <_sbrk+0x64>)
 8002448:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20018000 	.word	0x20018000
 8002458:	00000400 	.word	0x00000400
 800245c:	20000284 	.word	0x20000284
 8002460:	20000628 	.word	0x20000628

08002464 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <SystemInit+0x20>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	4a05      	ldr	r2, [pc, #20]	@ (8002484 <SystemInit+0x20>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	@ 0x30
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f008 fbd0 	bl	800ac3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	463b      	mov	r3, r7
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024a6:	4b21      	ldr	r3, [pc, #132]	@ (800252c <MX_TIM2_Init+0xa4>)
 80024a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024ae:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <MX_TIM2_Init+0xa4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	@ (800252c <MX_TIM2_Init+0xa4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024ba:	4b1c      	ldr	r3, [pc, #112]	@ (800252c <MX_TIM2_Init+0xa4>)
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	@ (800252c <MX_TIM2_Init+0xa4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c8:	4b18      	ldr	r3, [pc, #96]	@ (800252c <MX_TIM2_Init+0xa4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024d6:	2301      	movs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024e2:	2300      	movs	r3, #0
 80024e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e6:	2301      	movs	r3, #1
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	4619      	mov	r1, r3
 80024f8:	480c      	ldr	r0, [pc, #48]	@ (800252c <MX_TIM2_Init+0xa4>)
 80024fa:	f005 f92b 	bl	8007754 <HAL_TIM_Encoder_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002504:	f7ff fd82 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002510:	463b      	mov	r3, r7
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	@ (800252c <MX_TIM2_Init+0xa4>)
 8002516:	f006 ff4d 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002520:	f7ff fd74 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3730      	adds	r7, #48	@ 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000288 	.word	0x20000288

08002530 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	@ 0x30
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002536:	f107 030c 	add.w	r3, r7, #12
 800253a:	2224      	movs	r2, #36	@ 0x24
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f008 fb7c 	bl	800ac3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002544:	463b      	mov	r3, r7
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800254e:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 8002550:	4a21      	ldr	r2, [pc, #132]	@ (80025d8 <MX_TIM3_Init+0xa8>)
 8002552:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002554:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 8002556:	2200      	movs	r2, #0
 8002558:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b1e      	ldr	r3, [pc, #120]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002560:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 8002562:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002566:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256e:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002574:	2301      	movs	r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800257c:	2301      	movs	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4619      	mov	r1, r3
 800259e:	480d      	ldr	r0, [pc, #52]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 80025a0:	f005 f8d8 	bl	8007754 <HAL_TIM_Encoder_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80025aa:	f7ff fd2f 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b6:	463b      	mov	r3, r7
 80025b8:	4619      	mov	r1, r3
 80025ba:	4806      	ldr	r0, [pc, #24]	@ (80025d4 <MX_TIM3_Init+0xa4>)
 80025bc:	f006 fefa 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80025c6:	f7ff fd21 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	3730      	adds	r7, #48	@ 0x30
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200002d4 	.word	0x200002d4
 80025d8:	40000400 	.word	0x40000400

080025dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	@ 0x30
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	2224      	movs	r2, #36	@ 0x24
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f008 fb26 	bl	800ac3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f0:	463b      	mov	r3, r7
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025fa:	4b21      	ldr	r3, [pc, #132]	@ (8002680 <MX_TIM5_Init+0xa4>)
 80025fc:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <MX_TIM5_Init+0xa8>)
 80025fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002600:	4b1f      	ldr	r3, [pc, #124]	@ (8002680 <MX_TIM5_Init+0xa4>)
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <MX_TIM5_Init+0xa4>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800260c:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <MX_TIM5_Init+0xa4>)
 800260e:	f04f 32ff 	mov.w	r2, #4294967295
 8002612:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002614:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <MX_TIM5_Init+0xa4>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <MX_TIM5_Init+0xa4>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002620:	2301      	movs	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002628:	2301      	movs	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002638:	2301      	movs	r3, #1
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800263c:	2300      	movs	r3, #0
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4619      	mov	r1, r3
 800264a:	480d      	ldr	r0, [pc, #52]	@ (8002680 <MX_TIM5_Init+0xa4>)
 800264c:	f005 f882 	bl	8007754 <HAL_TIM_Encoder_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002656:	f7ff fcd9 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002662:	463b      	mov	r3, r7
 8002664:	4619      	mov	r1, r3
 8002666:	4806      	ldr	r0, [pc, #24]	@ (8002680 <MX_TIM5_Init+0xa4>)
 8002668:	f006 fea4 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002672:	f7ff fccb 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	3730      	adds	r7, #48	@ 0x30
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000320 	.word	0x20000320
 8002684:	40000c00 	.word	0x40000c00

08002688 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002698:	4b14      	ldr	r3, [pc, #80]	@ (80026ec <MX_TIM6_Init+0x64>)
 800269a:	4a15      	ldr	r2, [pc, #84]	@ (80026f0 <MX_TIM6_Init+0x68>)
 800269c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800269e:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <MX_TIM6_Init+0x64>)
 80026a0:	224f      	movs	r2, #79	@ 0x4f
 80026a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <MX_TIM6_Init+0x64>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <MX_TIM6_Init+0x64>)
 80026ac:	2213      	movs	r2, #19
 80026ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026b0:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <MX_TIM6_Init+0x64>)
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026b6:	480d      	ldr	r0, [pc, #52]	@ (80026ec <MX_TIM6_Init+0x64>)
 80026b8:	f004 fb4a 	bl	8006d50 <HAL_TIM_Base_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80026c2:	f7ff fca3 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026c6:	2320      	movs	r3, #32
 80026c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4806      	ldr	r0, [pc, #24]	@ (80026ec <MX_TIM6_Init+0x64>)
 80026d4:	f006 fe6e 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026de:	f7ff fc95 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000036c 	.word	0x2000036c
 80026f0:	40001000 	.word	0x40001000

080026f4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <MX_TIM7_Init+0x64>)
 8002706:	4a15      	ldr	r2, [pc, #84]	@ (800275c <MX_TIM7_Init+0x68>)
 8002708:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800270a:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <MX_TIM7_Init+0x64>)
 800270c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002710:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002712:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <MX_TIM7_Init+0x64>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <MX_TIM7_Init+0x64>)
 800271a:	2209      	movs	r2, #9
 800271c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <MX_TIM7_Init+0x64>)
 8002720:	2280      	movs	r2, #128	@ 0x80
 8002722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002724:	480c      	ldr	r0, [pc, #48]	@ (8002758 <MX_TIM7_Init+0x64>)
 8002726:	f004 fb13 	bl	8006d50 <HAL_TIM_Base_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002730:	f7ff fc6c 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	@ (8002758 <MX_TIM7_Init+0x64>)
 8002742:	f006 fe37 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800274c:	f7ff fc5e 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200003b8 	.word	0x200003b8
 800275c:	40001400 	.word	0x40001400

08002760 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b09a      	sub	sp, #104	@ 0x68
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002766:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002774:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002780:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	615a      	str	r2, [r3, #20]
 8002792:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	222c      	movs	r2, #44	@ 0x2c
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f008 fa4e 	bl	800ac3c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027a0:	4b3e      	ldr	r3, [pc, #248]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027a2:	4a3f      	ldr	r2, [pc, #252]	@ (80028a0 <MX_TIM15_Init+0x140>)
 80027a4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 80027a6:	4b3d      	ldr	r3, [pc, #244]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027a8:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80027ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ae:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80027b4:	4b39      	ldr	r3, [pc, #228]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027ba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027bc:	4b37      	ldr	r3, [pc, #220]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027c2:	4b36      	ldr	r3, [pc, #216]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c8:	4b34      	ldr	r3, [pc, #208]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80027ce:	4833      	ldr	r0, [pc, #204]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027d0:	f004 fabe 	bl	8006d50 <HAL_TIM_Base_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80027da:	f7ff fc17 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80027e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027e8:	4619      	mov	r1, r3
 80027ea:	482c      	ldr	r0, [pc, #176]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027ec:	f005 fd4e 	bl	800828c <HAL_TIM_ConfigClockSource>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 80027f6:	f7ff fc09 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80027fa:	4828      	ldr	r0, [pc, #160]	@ (800289c <MX_TIM15_Init+0x13c>)
 80027fc:	f004 fbb2 	bl	8006f64 <HAL_TIM_PWM_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8002806:	f7ff fc01 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002812:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002816:	4619      	mov	r1, r3
 8002818:	4820      	ldr	r0, [pc, #128]	@ (800289c <MX_TIM15_Init+0x13c>)
 800281a:	f006 fdcb 	bl	80093b4 <HAL_TIMEx_MasterConfigSynchronization>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8002824:	f7ff fbf2 	bl	800200c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002828:	2360      	movs	r3, #96	@ 0x60
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002830:	2300      	movs	r3, #0
 8002832:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002834:	2300      	movs	r3, #0
 8002836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002844:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002848:	2200      	movs	r2, #0
 800284a:	4619      	mov	r1, r3
 800284c:	4813      	ldr	r0, [pc, #76]	@ (800289c <MX_TIM15_Init+0x13c>)
 800284e:	f005 fa4b 	bl	8007ce8 <HAL_TIM_PWM_ConfigChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8002858:	f7ff fbd8 	bl	800200c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4807      	ldr	r0, [pc, #28]	@ (800289c <MX_TIM15_Init+0x13c>)
 8002880:	f006 feee 	bl	8009660 <HAL_TIMEx_ConfigBreakDeadTime>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 800288a:	f7ff fbbf 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800288e:	4803      	ldr	r0, [pc, #12]	@ (800289c <MX_TIM15_Init+0x13c>)
 8002890:	f000 f920 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 8002894:	bf00      	nop
 8002896:	3768      	adds	r7, #104	@ 0x68
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000404 	.word	0x20000404
 80028a0:	40014000 	.word	0x40014000

080028a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08e      	sub	sp, #56	@ 0x38
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c4:	d146      	bne.n	8002954 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028c6:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ca:	4a52      	ldr	r2, [pc, #328]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d2:	4b50      	ldr	r3, [pc, #320]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	4b4d      	ldr	r3, [pc, #308]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	4a46      	ldr	r2, [pc, #280]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002902:	4b44      	ldr	r3, [pc, #272]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800290e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002920:	2301      	movs	r3, #1
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002928:	4619      	mov	r1, r3
 800292a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800292e:	f000 fed9 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002932:	2308      	movs	r3, #8
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002942:	2301      	movs	r3, #1
 8002944:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800294a:	4619      	mov	r1, r3
 800294c:	4832      	ldr	r0, [pc, #200]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x174>)
 800294e:	f000 fec9 	bl	80036e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002952:	e05b      	b.n	8002a0c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a30      	ldr	r2, [pc, #192]	@ (8002a1c <HAL_TIM_Encoder_MspInit+0x178>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d128      	bne.n	80029b0 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800295e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	4a2c      	ldr	r2, [pc, #176]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6593      	str	r3, [r2, #88]	@ 0x58
 800296a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002976:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	4a26      	ldr	r2, [pc, #152]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 800297c:	f043 0310 	orr.w	r3, r3, #16
 8002980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002982:	4b24      	ldr	r3, [pc, #144]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800298e:	2318      	movs	r3, #24
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800299e:	2302      	movs	r3, #2
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a6:	4619      	mov	r1, r3
 80029a8:	481d      	ldr	r0, [pc, #116]	@ (8002a20 <HAL_TIM_Encoder_MspInit+0x17c>)
 80029aa:	f000 fe9b 	bl	80036e4 <HAL_GPIO_Init>
}
 80029ae:	e02d      	b.n	8002a0c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_TIM_Encoder_MspInit+0x180>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d128      	bne.n	8002a0c <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	4a15      	ldr	r2, [pc, #84]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c6:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x170>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029ea:	2303      	movs	r3, #3
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029fa:	2302      	movs	r3, #2
 80029fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a02:	4619      	mov	r1, r3
 8002a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a08:	f000 fe6c 	bl	80036e4 <HAL_GPIO_Init>
}
 8002a0c:	bf00      	nop
 8002a0e:	3738      	adds	r7, #56	@ 0x38
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	48000400 	.word	0x48000400
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	48001000 	.word	0x48001000
 8002a24:	40000c00 	.word	0x40000c00

08002a28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a23      	ldr	r2, [pc, #140]	@ (8002ac4 <HAL_TIM_Base_MspInit+0x9c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d114      	bne.n	8002a64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a3a:	4b23      	ldr	r3, [pc, #140]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3e:	4a22      	ldr	r2, [pc, #136]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002a40:	f043 0310 	orr.w	r3, r3, #16
 8002a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a46:	4b20      	ldr	r3, [pc, #128]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	2036      	movs	r0, #54	@ 0x36
 8002a58:	f000 faae 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a5c:	2036      	movs	r0, #54	@ 0x36
 8002a5e:	f000 fad7 	bl	8003010 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002a62:	e02a      	b.n	8002aba <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <HAL_TIM_Base_MspInit+0xa4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d114      	bne.n	8002a98 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a72:	4a15      	ldr	r2, [pc, #84]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002a74:	f043 0320 	orr.w	r3, r3, #32
 8002a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2037      	movs	r0, #55	@ 0x37
 8002a8c:	f000 fa94 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a90:	2037      	movs	r0, #55	@ 0x37
 8002a92:	f000 fabd 	bl	8003010 <HAL_NVIC_EnableIRQ>
}
 8002a96:	e010      	b.n	8002aba <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad0 <HAL_TIM_Base_MspInit+0xa8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10b      	bne.n	8002aba <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa6:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xa0>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40001000 	.word	0x40001000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40001400 	.word	0x40001400
 8002ad0:	40014000 	.word	0x40014000

08002ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	@ 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a20      	ldr	r2, [pc, #128]	@ (8002b74 <HAL_TIM_MspPostInit+0xa0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d139      	bne.n	8002b6a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_TIM_MspPostInit+0xa4>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <HAL_TIM_MspPostInit+0xa4>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b02:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_TIM_MspPostInit+0xa4>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <HAL_TIM_MspPostInit+0xa4>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b12:	4a19      	ldr	r2, [pc, #100]	@ (8002b78 <HAL_TIM_MspPostInit+0xa4>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b1a:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <HAL_TIM_MspPostInit+0xa4>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b26:	2304      	movs	r3, #4
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002b36:	230e      	movs	r3, #14
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b44:	f000 fdce 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002b5a:	230e      	movs	r3, #14
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <HAL_TIM_MspPostInit+0xa8>)
 8002b66:	f000 fdbd 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	@ 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40014000 	.word	0x40014000
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	48000400 	.word	0x48000400

08002b80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b84:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002b86:	4a15      	ldr	r2, [pc, #84]	@ (8002bdc <MX_USART1_UART_Init+0x5c>)
 8002b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b92:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002baa:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb6:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bc2:	4805      	ldr	r0, [pc, #20]	@ (8002bd8 <MX_USART1_UART_Init+0x58>)
 8002bc4:	f006 fea2 	bl	800990c <HAL_UART_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002bce:	f7ff fa1d 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000450 	.word	0x20000450
 8002bdc:	40013800 	.word	0x40013800

08002be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0ac      	sub	sp, #176	@ 0xb0
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	2288      	movs	r2, #136	@ 0x88
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f008 f81b 	bl	800ac3c <memset>
  if(uartHandle->Instance==USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a21      	ldr	r2, [pc, #132]	@ (8002c90 <HAL_UART_MspInit+0xb0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d13a      	bne.n	8002c86 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c10:	2301      	movs	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c14:	2300      	movs	r3, #0
 8002c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 f99d 	bl	8004f5c <HAL_RCCEx_PeriphCLKConfig>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c28:	f7ff f9f0 	bl	800200c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_UART_MspInit+0xb4>)
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c30:	4a18      	ldr	r2, [pc, #96]	@ (8002c94 <HAL_UART_MspInit+0xb4>)
 8002c32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c36:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c38:	4b16      	ldr	r3, [pc, #88]	@ (8002c94 <HAL_UART_MspInit+0xb4>)
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c44:	4b13      	ldr	r3, [pc, #76]	@ (8002c94 <HAL_UART_MspInit+0xb4>)
 8002c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c48:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <HAL_UART_MspInit+0xb4>)
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c50:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <HAL_UART_MspInit+0xb4>)
 8002c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c5c:	23c0      	movs	r3, #192	@ 0xc0
 8002c5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c74:	2307      	movs	r3, #7
 8002c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4805      	ldr	r0, [pc, #20]	@ (8002c98 <HAL_UART_MspInit+0xb8>)
 8002c82:	f000 fd2f 	bl	80036e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c86:	bf00      	nop
 8002c88:	37b0      	adds	r7, #176	@ 0xb0
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40013800 	.word	0x40013800
 8002c94:	40021000 	.word	0x40021000
 8002c98:	48000400 	.word	0x48000400

08002c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca0:	f7ff fbe0 	bl	8002464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca4:	480c      	ldr	r0, [pc, #48]	@ (8002cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ca6:	490d      	ldr	r1, [pc, #52]	@ (8002cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce0 <LoopForever+0xe>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ce8 <LoopForever+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cca:	f008 f81b 	bl	800ad04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cce:	f7ff f917 	bl	8001f00 <main>

08002cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cd2:	e7fe      	b.n	8002cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cdc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002ce0:	0800c044 	.word	0x0800c044
  ldr r2, =_sbss
 8002ce4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002ce8:	20000628 	.word	0x20000628

08002cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_2_IRQHandler>

08002cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f000 f93d 	bl	8002f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfe:	200f      	movs	r0, #15
 8002d00:	f000 f80e 	bl	8002d20 <HAL_InitTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	71fb      	strb	r3, [r7, #7]
 8002d0e:	e001      	b.n	8002d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d10:	f7ff fa7e 	bl	8002210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d14:	79fb      	ldrb	r3, [r7, #7]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_InitTick+0x6c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d34:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <HAL_InitTick+0x70>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <HAL_InitTick+0x6c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f978 	bl	8003040 <HAL_SYSTICK_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b0f      	cmp	r3, #15
 8002d5a:	d809      	bhi.n	8002d70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f000 f928 	bl	8002fb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d68:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <HAL_InitTick+0x74>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e007      	b.n	8002d80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	e004      	b.n	8002d80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e001      	b.n	8002d80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000018 	.word	0x20000018
 8002d90:	20000010 	.word	0x20000010
 8002d94:	20000014 	.word	0x20000014

08002d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_IncTick+0x20>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_IncTick+0x24>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <HAL_IncTick+0x24>)
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000018 	.word	0x20000018
 8002dbc:	200004d8 	.word	0x200004d8

08002dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <HAL_GetTick+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	200004d8 	.word	0x200004d8

08002dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0a:	4a04      	ldr	r2, [pc, #16]	@ (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60d3      	str	r3, [r2, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e24:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <__NVIC_GetPriorityGrouping+0x18>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0307 	and.w	r3, r3, #7
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	db0b      	blt.n	8002e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4907      	ldr	r1, [pc, #28]	@ (8002e74 <__NVIC_EnableIRQ+0x38>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000e100 	.word	0xe000e100

08002e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db0a      	blt.n	8002ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	490c      	ldr	r1, [pc, #48]	@ (8002ec4 <__NVIC_SetPriority+0x4c>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea0:	e00a      	b.n	8002eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4908      	ldr	r1, [pc, #32]	@ (8002ec8 <__NVIC_SetPriority+0x50>)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	761a      	strb	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	@ 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf28      	it	cs
 8002eea:	2304      	movcs	r3, #4
 8002eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <NVIC_EncodePriority+0x30>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3b03      	subs	r3, #3
 8002efa:	e000      	b.n	8002efe <NVIC_EncodePriority+0x32>
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	4313      	orrs	r3, r2
         );
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	@ 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f44:	d301      	bcc.n	8002f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f74 <SysTick_Config+0x40>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f52:	210f      	movs	r1, #15
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	f7ff ff8e 	bl	8002e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <SysTick_Config+0x40>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f62:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <SysTick_Config+0x40>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b07      	cmp	r3, #7
 8002f84:	d00f      	beq.n	8002fa6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d009      	beq.n	8002fa6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d006      	beq.n	8002fa6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d003      	beq.n	8002fa6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f9e:	21a6      	movs	r1, #166	@ 0xa6
 8002fa0:	4804      	ldr	r0, [pc, #16]	@ (8002fb4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002fa2:	f7ff f84b 	bl	800203c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ff16 	bl	8002dd8 <__NVIC_SetPriorityGrouping>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	0800bd70 	.word	0x0800bd70

08002fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b0f      	cmp	r3, #15
 8002fce:	d903      	bls.n	8002fd8 <HAL_NVIC_SetPriority+0x20>
 8002fd0:	21be      	movs	r1, #190	@ 0xbe
 8002fd2:	480e      	ldr	r0, [pc, #56]	@ (800300c <HAL_NVIC_SetPriority+0x54>)
 8002fd4:	f7ff f832 	bl	800203c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	d903      	bls.n	8002fe6 <HAL_NVIC_SetPriority+0x2e>
 8002fde:	21bf      	movs	r1, #191	@ 0xbf
 8002fe0:	480a      	ldr	r0, [pc, #40]	@ (800300c <HAL_NVIC_SetPriority+0x54>)
 8002fe2:	f7ff f82b 	bl	800203c <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe6:	f7ff ff1b 	bl	8002e20 <__NVIC_GetPriorityGrouping>
 8002fea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	6978      	ldr	r0, [r7, #20]
 8002ff2:	f7ff ff6b 	bl	8002ecc <NVIC_EncodePriority>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff3a 	bl	8002e78 <__NVIC_SetPriority>
}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	0800bd70 	.word	0x0800bd70

08003010 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	da03      	bge.n	800302a <HAL_NVIC_EnableIRQ+0x1a>
 8003022:	21d2      	movs	r1, #210	@ 0xd2
 8003024:	4805      	ldr	r0, [pc, #20]	@ (800303c <HAL_NVIC_EnableIRQ+0x2c>)
 8003026:	f7ff f809 	bl	800203c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff ff04 	bl	8002e3c <__NVIC_EnableIRQ>
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	0800bd70 	.word	0x0800bd70

08003040 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff73 	bl	8002f34 <SysTick_Config>
 800304e:	4603      	mov	r3, r0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e19d      	b.n	80033a6 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a79      	ldr	r2, [pc, #484]	@ (8003254 <HAL_DMA_Init+0x1fc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d044      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a77      	ldr	r2, [pc, #476]	@ (8003258 <HAL_DMA_Init+0x200>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d03f      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a76      	ldr	r2, [pc, #472]	@ (800325c <HAL_DMA_Init+0x204>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d03a      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a74      	ldr	r2, [pc, #464]	@ (8003260 <HAL_DMA_Init+0x208>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d035      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a73      	ldr	r2, [pc, #460]	@ (8003264 <HAL_DMA_Init+0x20c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d030      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a71      	ldr	r2, [pc, #452]	@ (8003268 <HAL_DMA_Init+0x210>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d02b      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a70      	ldr	r2, [pc, #448]	@ (800326c <HAL_DMA_Init+0x214>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d026      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003270 <HAL_DMA_Init+0x218>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d021      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6d      	ldr	r2, [pc, #436]	@ (8003274 <HAL_DMA_Init+0x21c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d01c      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003278 <HAL_DMA_Init+0x220>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d017      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6a      	ldr	r2, [pc, #424]	@ (800327c <HAL_DMA_Init+0x224>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d012      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a68      	ldr	r2, [pc, #416]	@ (8003280 <HAL_DMA_Init+0x228>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00d      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a67      	ldr	r2, [pc, #412]	@ (8003284 <HAL_DMA_Init+0x22c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d008      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a65      	ldr	r2, [pc, #404]	@ (8003288 <HAL_DMA_Init+0x230>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <HAL_DMA_Init+0xa6>
 80030f6:	21a5      	movs	r1, #165	@ 0xa5
 80030f8:	4864      	ldr	r0, [pc, #400]	@ (800328c <HAL_DMA_Init+0x234>)
 80030fa:	f7fe ff9f 	bl	800203c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <HAL_DMA_Init+0xc8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b10      	cmp	r3, #16
 800310c:	d008      	beq.n	8003120 <HAL_DMA_Init+0xc8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003116:	d003      	beq.n	8003120 <HAL_DMA_Init+0xc8>
 8003118:	21a6      	movs	r1, #166	@ 0xa6
 800311a:	485c      	ldr	r0, [pc, #368]	@ (800328c <HAL_DMA_Init+0x234>)
 800311c:	f7fe ff8e 	bl	800203c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b40      	cmp	r3, #64	@ 0x40
 8003126:	d007      	beq.n	8003138 <HAL_DMA_Init+0xe0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_DMA_Init+0xe0>
 8003130:	21a7      	movs	r1, #167	@ 0xa7
 8003132:	4856      	ldr	r0, [pc, #344]	@ (800328c <HAL_DMA_Init+0x234>)
 8003134:	f7fe ff82 	bl	800203c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b80      	cmp	r3, #128	@ 0x80
 800313e:	d007      	beq.n	8003150 <HAL_DMA_Init+0xf8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_DMA_Init+0xf8>
 8003148:	21a8      	movs	r1, #168	@ 0xa8
 800314a:	4850      	ldr	r0, [pc, #320]	@ (800328c <HAL_DMA_Init+0x234>)
 800314c:	f7fe ff76 	bl	800203c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_DMA_Init+0x11c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003160:	d008      	beq.n	8003174 <HAL_DMA_Init+0x11c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316a:	d003      	beq.n	8003174 <HAL_DMA_Init+0x11c>
 800316c:	21a9      	movs	r1, #169	@ 0xa9
 800316e:	4847      	ldr	r0, [pc, #284]	@ (800328c <HAL_DMA_Init+0x234>)
 8003170:	f7fe ff64 	bl	800203c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <HAL_DMA_Init+0x140>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003184:	d008      	beq.n	8003198 <HAL_DMA_Init+0x140>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800318e:	d003      	beq.n	8003198 <HAL_DMA_Init+0x140>
 8003190:	21aa      	movs	r1, #170	@ 0xaa
 8003192:	483e      	ldr	r0, [pc, #248]	@ (800328c <HAL_DMA_Init+0x234>)
 8003194:	f7fe ff52 	bl	800203c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_DMA_Init+0x158>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d003      	beq.n	80031b0 <HAL_DMA_Init+0x158>
 80031a8:	21ab      	movs	r1, #171	@ 0xab
 80031aa:	4838      	ldr	r0, [pc, #224]	@ (800328c <HAL_DMA_Init+0x234>)
 80031ac:	f7fe ff46 	bl	800203c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <HAL_DMA_Init+0x186>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c0:	d00d      	beq.n	80031de <HAL_DMA_Init+0x186>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ca:	d008      	beq.n	80031de <HAL_DMA_Init+0x186>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031d4:	d003      	beq.n	80031de <HAL_DMA_Init+0x186>
 80031d6:	21ac      	movs	r1, #172	@ 0xac
 80031d8:	482c      	ldr	r0, [pc, #176]	@ (800328c <HAL_DMA_Init+0x234>)
 80031da:	f7fe ff2f 	bl	800203c <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01f      	beq.n	8003226 <HAL_DMA_Init+0x1ce>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d01b      	beq.n	8003226 <HAL_DMA_Init+0x1ce>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d017      	beq.n	8003226 <HAL_DMA_Init+0x1ce>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d013      	beq.n	8003226 <HAL_DMA_Init+0x1ce>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d00f      	beq.n	8003226 <HAL_DMA_Init+0x1ce>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b05      	cmp	r3, #5
 800320c:	d00b      	beq.n	8003226 <HAL_DMA_Init+0x1ce>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b06      	cmp	r3, #6
 8003214:	d007      	beq.n	8003226 <HAL_DMA_Init+0x1ce>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b07      	cmp	r3, #7
 800321c:	d003      	beq.n	8003226 <HAL_DMA_Init+0x1ce>
 800321e:	21ae      	movs	r1, #174	@ 0xae
 8003220:	481a      	ldr	r0, [pc, #104]	@ (800328c <HAL_DMA_Init+0x234>)
 8003222:	f7fe ff0b 	bl	800203c <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	4b18      	ldr	r3, [pc, #96]	@ (8003290 <HAL_DMA_Init+0x238>)
 800322e:	429a      	cmp	r2, r3
 8003230:	d836      	bhi.n	80032a0 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	4b16      	ldr	r3, [pc, #88]	@ (8003294 <HAL_DMA_Init+0x23c>)
 800323a:	4413      	add	r3, r2
 800323c:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <HAL_DMA_Init+0x240>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	009a      	lsls	r2, r3, #2
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a13      	ldr	r2, [pc, #76]	@ (800329c <HAL_DMA_Init+0x244>)
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003250:	e035      	b.n	80032be <HAL_DMA_Init+0x266>
 8003252:	bf00      	nop
 8003254:	40020008 	.word	0x40020008
 8003258:	4002001c 	.word	0x4002001c
 800325c:	40020030 	.word	0x40020030
 8003260:	40020044 	.word	0x40020044
 8003264:	40020058 	.word	0x40020058
 8003268:	4002006c 	.word	0x4002006c
 800326c:	40020080 	.word	0x40020080
 8003270:	40020408 	.word	0x40020408
 8003274:	4002041c 	.word	0x4002041c
 8003278:	40020430 	.word	0x40020430
 800327c:	40020444 	.word	0x40020444
 8003280:	40020458 	.word	0x40020458
 8003284:	4002046c 	.word	0x4002046c
 8003288:	40020480 	.word	0x40020480
 800328c:	0800bdac 	.word	0x0800bdac
 8003290:	40020407 	.word	0x40020407
 8003294:	bffdfff8 	.word	0xbffdfff8
 8003298:	cccccccd 	.word	0xcccccccd
 800329c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b42      	ldr	r3, [pc, #264]	@ (80033b0 <HAL_DMA_Init+0x358>)
 80032a8:	4413      	add	r3, r2
 80032aa:	4a42      	ldr	r2, [pc, #264]	@ (80033b4 <HAL_DMA_Init+0x35c>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3f      	ldr	r2, [pc, #252]	@ (80033b8 <HAL_DMA_Init+0x360>)
 80032bc:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80032d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003318:	d039      	beq.n	800338e <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <HAL_DMA_Init+0x364>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d11a      	bne.n	800335a <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003324:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <HAL_DMA_Init+0x368>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	f003 031c 	and.w	r3, r3, #28
 8003330:	210f      	movs	r1, #15
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	4921      	ldr	r1, [pc, #132]	@ (80033c0 <HAL_DMA_Init+0x368>)
 800333a:	4013      	ands	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800333e:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <HAL_DMA_Init+0x368>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f003 031c 	and.w	r3, r3, #28
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	491b      	ldr	r1, [pc, #108]	@ (80033c0 <HAL_DMA_Init+0x368>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e019      	b.n	800338e <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800335a:	4b1a      	ldr	r3, [pc, #104]	@ (80033c4 <HAL_DMA_Init+0x36c>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f003 031c 	and.w	r3, r3, #28
 8003366:	210f      	movs	r1, #15
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	4915      	ldr	r1, [pc, #84]	@ (80033c4 <HAL_DMA_Init+0x36c>)
 8003370:	4013      	ands	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003374:	4b13      	ldr	r3, [pc, #76]	@ (80033c4 <HAL_DMA_Init+0x36c>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003380:	f003 031c 	and.w	r3, r3, #28
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	490e      	ldr	r1, [pc, #56]	@ (80033c4 <HAL_DMA_Init+0x36c>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	bffdfbf8 	.word	0xbffdfbf8
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020000 	.word	0x40020000
 80033c0:	400200a8 	.word	0x400200a8
 80033c4:	400204a8 	.word	0x400204a8

080033c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_DMA_Start_IT+0x20>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e6:	d304      	bcc.n	80033f2 <HAL_DMA_Start_IT+0x2a>
 80033e8:	f240 11df 	movw	r1, #479	@ 0x1df
 80033ec:	482c      	ldr	r0, [pc, #176]	@ (80034a0 <HAL_DMA_Start_IT+0xd8>)
 80033ee:	f7fe fe25 	bl	800203c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_DMA_Start_IT+0x38>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e04b      	b.n	8003498 <HAL_DMA_Start_IT+0xd0>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	d13a      	bne.n	800348a <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f923 	bl	8003684 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 020e 	orr.w	r2, r2, #14
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e00f      	b.n	8003478 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 020a 	orr.w	r2, r2, #10
 8003476:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e005      	b.n	8003496 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	0800bdac 	.word	0x0800bdac

080034a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d005      	beq.n	80034c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2204      	movs	r2, #4
 80034c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e029      	b.n	800351c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 020e 	bic.w	r2, r2, #14
 80034d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ec:	f003 021c 	and.w	r2, r3, #28
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f202 	lsl.w	r2, r1, r2
 80034fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
    }
  }
  return status;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	f003 031c 	and.w	r3, r3, #28
 8003546:	2204      	movs	r2, #4
 8003548:	409a      	lsls	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d026      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x7a>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d021      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0204 	bic.w	r2, r2, #4
 8003578:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	f003 021c 	and.w	r2, r3, #28
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2104      	movs	r1, #4
 8003588:	fa01 f202 	lsl.w	r2, r1, r2
 800358c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	2b00      	cmp	r3, #0
 8003594:	d071      	beq.n	800367a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800359e:	e06c      	b.n	800367a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	f003 031c 	and.w	r3, r3, #28
 80035a8:	2202      	movs	r2, #2
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d02e      	beq.n	8003612 <HAL_DMA_IRQHandler+0xec>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d029      	beq.n	8003612 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 020a 	bic.w	r2, r2, #10
 80035da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	f003 021c 	and.w	r2, r3, #28
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	2102      	movs	r1, #2
 80035f2:	fa01 f202 	lsl.w	r2, r1, r2
 80035f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d038      	beq.n	800367a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003610:	e033      	b.n	800367a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	f003 031c 	and.w	r3, r3, #28
 800361a:	2208      	movs	r2, #8
 800361c:	409a      	lsls	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02a      	beq.n	800367c <HAL_DMA_IRQHandler+0x156>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d025      	beq.n	800367c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 020e 	bic.w	r2, r2, #14
 800363e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	f003 021c 	and.w	r2, r3, #28
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	2101      	movs	r1, #1
 800364e:	fa01 f202 	lsl.w	r2, r1, r2
 8003652:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800367a:	bf00      	nop
 800367c:	bf00      	nop
}
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	f003 021c 	and.w	r2, r3, #28
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f202 	lsl.w	r2, r1, r2
 80036a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d108      	bne.n	80036c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036c6:	e007      	b.n	80036d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036f8:	d01f      	beq.n	800373a <HAL_GPIO_Init+0x56>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a3c      	ldr	r2, [pc, #240]	@ (80037f0 <HAL_GPIO_Init+0x10c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01b      	beq.n	800373a <HAL_GPIO_Init+0x56>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a3b      	ldr	r2, [pc, #236]	@ (80037f4 <HAL_GPIO_Init+0x110>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d017      	beq.n	800373a <HAL_GPIO_Init+0x56>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a3a      	ldr	r2, [pc, #232]	@ (80037f8 <HAL_GPIO_Init+0x114>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_GPIO_Init+0x56>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a39      	ldr	r2, [pc, #228]	@ (80037fc <HAL_GPIO_Init+0x118>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00f      	beq.n	800373a <HAL_GPIO_Init+0x56>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a38      	ldr	r2, [pc, #224]	@ (8003800 <HAL_GPIO_Init+0x11c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <HAL_GPIO_Init+0x56>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a37      	ldr	r2, [pc, #220]	@ (8003804 <HAL_GPIO_Init+0x120>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x56>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a36      	ldr	r2, [pc, #216]	@ (8003808 <HAL_GPIO_Init+0x124>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x56>
 8003732:	21aa      	movs	r1, #170	@ 0xaa
 8003734:	4835      	ldr	r0, [pc, #212]	@ (800380c <HAL_GPIO_Init+0x128>)
 8003736:	f7fe fc81 	bl	800203c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HAL_GPIO_Init+0x6a>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374c:	d303      	bcc.n	8003756 <HAL_GPIO_Init+0x72>
 800374e:	21ab      	movs	r1, #171	@ 0xab
 8003750:	482e      	ldr	r0, [pc, #184]	@ (800380c <HAL_GPIO_Init+0x128>)
 8003752:	f7fe fc73 	bl	800203c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 823d 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b01      	cmp	r3, #1
 8003766:	f000 8238 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b11      	cmp	r3, #17
 8003770:	f000 8233 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b02      	cmp	r3, #2
 800377a:	f000 822e 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b12      	cmp	r3, #18
 8003784:	f000 8229 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003790:	f000 8223 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800379c:	f000 821d 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80037a8:	f000 8217 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80037b4:	f000 8211 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80037c0:	f000 820b 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80037cc:	f000 8205 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	f000 8200 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b0b      	cmp	r3, #11
 80037e0:	f000 81fb 	beq.w	8003bda <HAL_GPIO_Init+0x4f6>
 80037e4:	21ac      	movs	r1, #172	@ 0xac
 80037e6:	4809      	ldr	r0, [pc, #36]	@ (800380c <HAL_GPIO_Init+0x128>)
 80037e8:	f7fe fc28 	bl	800203c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ec:	e1f5      	b.n	8003bda <HAL_GPIO_Init+0x4f6>
 80037ee:	bf00      	nop
 80037f0:	48000400 	.word	0x48000400
 80037f4:	48000800 	.word	0x48000800
 80037f8:	48000c00 	.word	0x48000c00
 80037fc:	48001000 	.word	0x48001000
 8003800:	48001400 	.word	0x48001400
 8003804:	48001800 	.word	0x48001800
 8003808:	48001c00 	.word	0x48001c00
 800380c:	0800bde4 	.word	0x0800bde4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 81d6 	beq.w	8003bd4 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d005      	beq.n	8003840 <HAL_GPIO_Init+0x15c>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d144      	bne.n	80038ca <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00f      	beq.n	8003868 <HAL_GPIO_Init+0x184>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d00b      	beq.n	8003868 <HAL_GPIO_Init+0x184>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d007      	beq.n	8003868 <HAL_GPIO_Init+0x184>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x184>
 8003860:	21bb      	movs	r1, #187	@ 0xbb
 8003862:	489c      	ldr	r0, [pc, #624]	@ (8003ad4 <HAL_GPIO_Init+0x3f0>)
 8003864:	f7fe fbea 	bl	800203c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	2203      	movs	r2, #3
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800389e:	2201      	movs	r2, #1
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0201 	and.w	r2, r3, #1
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d118      	bne.n	8003908 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038dc:	2201      	movs	r2, #1
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f003 0201 	and.w	r2, r3, #1
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b03      	cmp	r3, #3
 8003912:	d027      	beq.n	8003964 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_GPIO_Init+0x250>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d007      	beq.n	8003934 <HAL_GPIO_Init+0x250>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x250>
 800392c:	21dc      	movs	r1, #220	@ 0xdc
 800392e:	4869      	ldr	r0, [pc, #420]	@ (8003ad4 <HAL_GPIO_Init+0x3f0>)
 8003930:	f7fe fb84 	bl	800203c <assert_failed>

        temp = GPIOx->PUPDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d14f      	bne.n	8003a10 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003976:	d01f      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a57      	ldr	r2, [pc, #348]	@ (8003ad8 <HAL_GPIO_Init+0x3f4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d01b      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a56      	ldr	r2, [pc, #344]	@ (8003adc <HAL_GPIO_Init+0x3f8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d017      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a55      	ldr	r2, [pc, #340]	@ (8003ae0 <HAL_GPIO_Init+0x3fc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a54      	ldr	r2, [pc, #336]	@ (8003ae4 <HAL_GPIO_Init+0x400>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00f      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a53      	ldr	r2, [pc, #332]	@ (8003ae8 <HAL_GPIO_Init+0x404>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00b      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a52      	ldr	r2, [pc, #328]	@ (8003aec <HAL_GPIO_Init+0x408>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a51      	ldr	r2, [pc, #324]	@ (8003af0 <HAL_GPIO_Init+0x40c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x2d4>
 80039b0:	21e8      	movs	r1, #232	@ 0xe8
 80039b2:	4848      	ldr	r0, [pc, #288]	@ (8003ad4 <HAL_GPIO_Init+0x3f0>)
 80039b4:	f7fe fb42 	bl	800203c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b0f      	cmp	r3, #15
 80039be:	d903      	bls.n	80039c8 <HAL_GPIO_Init+0x2e4>
 80039c0:	21e9      	movs	r1, #233	@ 0xe9
 80039c2:	4844      	ldr	r0, [pc, #272]	@ (8003ad4 <HAL_GPIO_Init+0x3f0>)
 80039c4:	f7fe fb3a 	bl	800203c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	08da      	lsrs	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3208      	adds	r2, #8
 80039d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	08da      	lsrs	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	6939      	ldr	r1, [r7, #16]
 8003a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0203 	and.w	r2, r3, #3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80c1 	beq.w	8003bd4 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a52:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <HAL_GPIO_Init+0x410>)
 8003a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a56:	4a27      	ldr	r2, [pc, #156]	@ (8003af4 <HAL_GPIO_Init+0x410>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a5e:	4b25      	ldr	r3, [pc, #148]	@ (8003af4 <HAL_GPIO_Init+0x410>)
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a6a:	4a23      	ldr	r2, [pc, #140]	@ (8003af8 <HAL_GPIO_Init+0x414>)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a94:	d03a      	beq.n	8003b0c <HAL_GPIO_Init+0x428>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad8 <HAL_GPIO_Init+0x3f4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d034      	beq.n	8003b08 <HAL_GPIO_Init+0x424>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8003adc <HAL_GPIO_Init+0x3f8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02e      	beq.n	8003b04 <HAL_GPIO_Init+0x420>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae0 <HAL_GPIO_Init+0x3fc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d028      	beq.n	8003b00 <HAL_GPIO_Init+0x41c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae4 <HAL_GPIO_Init+0x400>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d022      	beq.n	8003afc <HAL_GPIO_Init+0x418>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae8 <HAL_GPIO_Init+0x404>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_GPIO_Init+0x3ea>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8003aec <HAL_GPIO_Init+0x408>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_GPIO_Init+0x3e6>
 8003ac6:	2306      	movs	r3, #6
 8003ac8:	e021      	b.n	8003b0e <HAL_GPIO_Init+0x42a>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e01f      	b.n	8003b0e <HAL_GPIO_Init+0x42a>
 8003ace:	2305      	movs	r3, #5
 8003ad0:	e01d      	b.n	8003b0e <HAL_GPIO_Init+0x42a>
 8003ad2:	bf00      	nop
 8003ad4:	0800bde4 	.word	0x0800bde4
 8003ad8:	48000400 	.word	0x48000400
 8003adc:	48000800 	.word	0x48000800
 8003ae0:	48000c00 	.word	0x48000c00
 8003ae4:	48001000 	.word	0x48001000
 8003ae8:	48001400 	.word	0x48001400
 8003aec:	48001800 	.word	0x48001800
 8003af0:	48001c00 	.word	0x48001c00
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40010000 	.word	0x40010000
 8003afc:	2304      	movs	r3, #4
 8003afe:	e006      	b.n	8003b0e <HAL_GPIO_Init+0x42a>
 8003b00:	2303      	movs	r3, #3
 8003b02:	e004      	b.n	8003b0e <HAL_GPIO_Init+0x42a>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e002      	b.n	8003b0e <HAL_GPIO_Init+0x42a>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_GPIO_Init+0x42a>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	f002 0203 	and.w	r2, r2, #3
 8003b14:	0092      	lsls	r2, r2, #2
 8003b16:	4093      	lsls	r3, r2
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b1e:	4935      	ldr	r1, [pc, #212]	@ (8003bf4 <HAL_GPIO_Init+0x510>)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	3302      	adds	r3, #2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b2c:	4b32      	ldr	r3, [pc, #200]	@ (8003bf8 <HAL_GPIO_Init+0x514>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b50:	4a29      	ldr	r2, [pc, #164]	@ (8003bf8 <HAL_GPIO_Init+0x514>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b56:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <HAL_GPIO_Init+0x514>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_GPIO_Init+0x514>)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b80:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_GPIO_Init+0x514>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ba4:	4a14      	ldr	r2, [pc, #80]	@ (8003bf8 <HAL_GPIO_Init+0x514>)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003baa:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <HAL_GPIO_Init+0x514>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bce:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf8 <HAL_GPIO_Init+0x514>)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f47f ae13 	bne.w	8003810 <HAL_GPIO_Init+0x12c>
  }
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40010400 	.word	0x40010400

08003bfc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c10:	d020      	beq.n	8003c54 <HAL_GPIO_DeInit+0x58>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a84      	ldr	r2, [pc, #528]	@ (8003e28 <HAL_GPIO_DeInit+0x22c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01c      	beq.n	8003c54 <HAL_GPIO_DeInit+0x58>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a83      	ldr	r2, [pc, #524]	@ (8003e2c <HAL_GPIO_DeInit+0x230>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_GPIO_DeInit+0x58>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a82      	ldr	r2, [pc, #520]	@ (8003e30 <HAL_GPIO_DeInit+0x234>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d014      	beq.n	8003c54 <HAL_GPIO_DeInit+0x58>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a81      	ldr	r2, [pc, #516]	@ (8003e34 <HAL_GPIO_DeInit+0x238>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d010      	beq.n	8003c54 <HAL_GPIO_DeInit+0x58>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a80      	ldr	r2, [pc, #512]	@ (8003e38 <HAL_GPIO_DeInit+0x23c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00c      	beq.n	8003c54 <HAL_GPIO_DeInit+0x58>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e3c <HAL_GPIO_DeInit+0x240>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d008      	beq.n	8003c54 <HAL_GPIO_DeInit+0x58>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a7e      	ldr	r2, [pc, #504]	@ (8003e40 <HAL_GPIO_DeInit+0x244>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_GPIO_DeInit+0x58>
 8003c4a:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8003c4e:	487d      	ldr	r0, [pc, #500]	@ (8003e44 <HAL_GPIO_DeInit+0x248>)
 8003c50:	f7fe f9f4 	bl	800203c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_GPIO_DeInit+0x6a>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c62:	f0c0 80d4 	bcc.w	8003e0e <HAL_GPIO_DeInit+0x212>
 8003c66:	f240 113b 	movw	r1, #315	@ 0x13b
 8003c6a:	4876      	ldr	r0, [pc, #472]	@ (8003e44 <HAL_GPIO_DeInit+0x248>)
 8003c6c:	f7fe f9e6 	bl	800203c <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c70:	e0cd      	b.n	8003e0e <HAL_GPIO_DeInit+0x212>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c72:	2201      	movs	r2, #1
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80c0 	beq.w	8003e08 <HAL_GPIO_DeInit+0x20c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003c88:	4a6f      	ldr	r2, [pc, #444]	@ (8003e48 <HAL_GPIO_DeInit+0x24c>)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c94:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	220f      	movs	r2, #15
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cb0:	d025      	beq.n	8003cfe <HAL_GPIO_DeInit+0x102>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a5c      	ldr	r2, [pc, #368]	@ (8003e28 <HAL_GPIO_DeInit+0x22c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01f      	beq.n	8003cfa <HAL_GPIO_DeInit+0xfe>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a5b      	ldr	r2, [pc, #364]	@ (8003e2c <HAL_GPIO_DeInit+0x230>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d019      	beq.n	8003cf6 <HAL_GPIO_DeInit+0xfa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e30 <HAL_GPIO_DeInit+0x234>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_GPIO_DeInit+0xf6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a59      	ldr	r2, [pc, #356]	@ (8003e34 <HAL_GPIO_DeInit+0x238>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00d      	beq.n	8003cee <HAL_GPIO_DeInit+0xf2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	@ (8003e38 <HAL_GPIO_DeInit+0x23c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_DeInit+0xee>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a57      	ldr	r2, [pc, #348]	@ (8003e3c <HAL_GPIO_DeInit+0x240>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_GPIO_DeInit+0xea>
 8003ce2:	2306      	movs	r3, #6
 8003ce4:	e00c      	b.n	8003d00 <HAL_GPIO_DeInit+0x104>
 8003ce6:	2307      	movs	r3, #7
 8003ce8:	e00a      	b.n	8003d00 <HAL_GPIO_DeInit+0x104>
 8003cea:	2305      	movs	r3, #5
 8003cec:	e008      	b.n	8003d00 <HAL_GPIO_DeInit+0x104>
 8003cee:	2304      	movs	r3, #4
 8003cf0:	e006      	b.n	8003d00 <HAL_GPIO_DeInit+0x104>
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e004      	b.n	8003d00 <HAL_GPIO_DeInit+0x104>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e002      	b.n	8003d00 <HAL_GPIO_DeInit+0x104>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_GPIO_DeInit+0x104>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	f002 0203 	and.w	r2, r2, #3
 8003d06:	0092      	lsls	r2, r2, #2
 8003d08:	4093      	lsls	r3, r2
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d132      	bne.n	8003d76 <HAL_GPIO_DeInit+0x17a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003d10:	4b4e      	ldr	r3, [pc, #312]	@ (8003e4c <HAL_GPIO_DeInit+0x250>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	494c      	ldr	r1, [pc, #304]	@ (8003e4c <HAL_GPIO_DeInit+0x250>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e4c <HAL_GPIO_DeInit+0x250>)
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	4949      	ldr	r1, [pc, #292]	@ (8003e4c <HAL_GPIO_DeInit+0x250>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d2c:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_GPIO_DeInit+0x250>)
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	4945      	ldr	r1, [pc, #276]	@ (8003e4c <HAL_GPIO_DeInit+0x250>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d3a:	4b44      	ldr	r3, [pc, #272]	@ (8003e4c <HAL_GPIO_DeInit+0x250>)
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	4942      	ldr	r1, [pc, #264]	@ (8003e4c <HAL_GPIO_DeInit+0x250>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003d58:	4a3b      	ldr	r2, [pc, #236]	@ (8003e48 <HAL_GPIO_DeInit+0x24c>)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43da      	mvns	r2, r3
 8003d68:	4837      	ldr	r0, [pc, #220]	@ (8003e48 <HAL_GPIO_DeInit+0x24c>)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	400a      	ands	r2, r1
 8003d70:	3302      	adds	r3, #2
 8003d72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	2103      	movs	r1, #3
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	08da      	lsrs	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3208      	adds	r2, #8
 8003d92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	220f      	movs	r2, #15
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	08d2      	lsrs	r2, r2, #3
 8003daa:	4019      	ands	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3208      	adds	r2, #8
 8003db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	2103      	movs	r1, #3
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	2101      	movs	r1, #1
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	401a      	ands	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2103      	movs	r1, #3
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	401a      	ands	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df8:	2101      	movs	r1, #1
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	401a      	ands	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f47f af2b 	bne.w	8003c72 <HAL_GPIO_DeInit+0x76>
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	48000400 	.word	0x48000400
 8003e2c:	48000800 	.word	0x48000800
 8003e30:	48000c00 	.word	0x48000c00
 8003e34:	48001000 	.word	0x48001000
 8003e38:	48001400 	.word	0x48001400
 8003e3c:	48001800 	.word	0x48001800
 8003e40:	48001c00 	.word	0x48001c00
 8003e44:	0800bde4 	.word	0x0800bde4
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e60:	887b      	ldrh	r3, [r7, #2]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <HAL_GPIO_WritePin+0x20>
 8003e66:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8003e6a:	480e      	ldr	r0, [pc, #56]	@ (8003ea4 <HAL_GPIO_WritePin+0x54>)
 8003e6c:	f7fe f8e6 	bl	800203c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003e70:	787b      	ldrb	r3, [r7, #1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_GPIO_WritePin+0x36>
 8003e76:	787b      	ldrb	r3, [r7, #1]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d004      	beq.n	8003e86 <HAL_GPIO_WritePin+0x36>
 8003e7c:	f240 11af 	movw	r1, #431	@ 0x1af
 8003e80:	4808      	ldr	r0, [pc, #32]	@ (8003ea4 <HAL_GPIO_WritePin+0x54>)
 8003e82:	f7fe f8db 	bl	800203c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003e86:	787b      	ldrb	r3, [r7, #1]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e8c:	887a      	ldrh	r2, [r7, #2]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e92:	e002      	b.n	8003e9a <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e94:	887a      	ldrh	r2, [r7, #2]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	0800bde4 	.word	0x0800bde4

08003ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eb2:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ebe:	4a05      	ldr	r2, [pc, #20]	@ (8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f806 	bl	8003ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ef4:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40007000 	.word	0x40007000

08003f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1a:	d007      	beq.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x20>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f22:	d003      	beq.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x20>
 8003f24:	21a7      	movs	r1, #167	@ 0xa7
 8003f26:	4826      	ldr	r0, [pc, #152]	@ (8003fc0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003f28:	f7fe f888 	bl	800203c <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f32:	d130      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f34:	4b23      	ldr	r3, [pc, #140]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f40:	d038      	beq.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f42:	4b20      	ldr	r3, [pc, #128]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003f4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f52:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2232      	movs	r2, #50	@ 0x32
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0c9b      	lsrs	r3, r3, #18
 8003f64:	3301      	adds	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f68:	e002      	b.n	8003f70 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f70:	4b14      	ldr	r3, [pc, #80]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7c:	d102      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x78>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f2      	bne.n	8003f6a <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f84:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f90:	d110      	bne.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e00f      	b.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f96:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa2:	d007      	beq.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fa4:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fac:	4a05      	ldr	r2, [pc, #20]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	0800be20 	.word	0x0800be20
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	20000010 	.word	0x20000010
 8003fcc:	431bde83 	.word	0x431bde83

08003fd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f000 bcef 	b.w	80049c2 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_OscConfig+0x2e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b1f      	cmp	r3, #31
 8003ff2:	d904      	bls.n	8003ffe <HAL_RCC_OscConfig+0x2e>
 8003ff4:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8003ff8:	489a      	ldr	r0, [pc, #616]	@ (8004264 <HAL_RCC_OscConfig+0x294>)
 8003ffa:	f7fe f81f 	bl	800203c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffe:	4b9a      	ldr	r3, [pc, #616]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004008:	4b97      	ldr	r3, [pc, #604]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 813d 	beq.w	800429a <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_OscConfig+0x6a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d004      	beq.n	800403a <HAL_RCC_OscConfig+0x6a>
 8004030:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8004034:	488b      	ldr	r0, [pc, #556]	@ (8004264 <HAL_RCC_OscConfig+0x294>)
 8004036:	f7fe f801 	bl	800203c <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	2bff      	cmp	r3, #255	@ 0xff
 8004040:	d904      	bls.n	800404c <HAL_RCC_OscConfig+0x7c>
 8004042:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8004046:	4887      	ldr	r0, [pc, #540]	@ (8004264 <HAL_RCC_OscConfig+0x294>)
 8004048:	f7fd fff8 	bl	800203c <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d030      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	2b10      	cmp	r3, #16
 800405a:	d02c      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	2b20      	cmp	r3, #32
 8004062:	d028      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	2b30      	cmp	r3, #48	@ 0x30
 800406a:	d024      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	2b40      	cmp	r3, #64	@ 0x40
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	2b50      	cmp	r3, #80	@ 0x50
 800407a:	d01c      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	2b60      	cmp	r3, #96	@ 0x60
 8004082:	d018      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	2b70      	cmp	r3, #112	@ 0x70
 800408a:	d014      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	2b80      	cmp	r3, #128	@ 0x80
 8004092:	d010      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	2b90      	cmp	r3, #144	@ 0x90
 800409a:	d00c      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	2bb0      	cmp	r3, #176	@ 0xb0
 80040aa:	d004      	beq.n	80040b6 <HAL_RCC_OscConfig+0xe6>
 80040ac:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80040b0:	486c      	ldr	r0, [pc, #432]	@ (8004264 <HAL_RCC_OscConfig+0x294>)
 80040b2:	f7fd ffc3 	bl	800203c <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_RCC_OscConfig+0xfc>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	f040 808e 	bne.w	80041e0 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f040 808a 	bne.w	80041e0 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040cc:	4b66      	ldr	r3, [pc, #408]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <HAL_RCC_OscConfig+0x116>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f000 bc6e 	b.w	80049c2 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_RCC_OscConfig+0x130>
 80040f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040fe:	e005      	b.n	800410c <HAL_RCC_OscConfig+0x13c>
 8004100:	4b59      	ldr	r3, [pc, #356]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800410c:	4293      	cmp	r3, r2
 800410e:	d224      	bcs.n	800415a <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fec1 	bl	8004e9c <RCC_SetFlashLatencyFromMSIRange>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f000 bc4e 	b.w	80049c2 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004126:	4b50      	ldr	r3, [pc, #320]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a4f      	ldr	r2, [pc, #316]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 800412c:	f043 0308 	orr.w	r3, r3, #8
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b4d      	ldr	r3, [pc, #308]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	494a      	ldr	r1, [pc, #296]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004144:	4b48      	ldr	r3, [pc, #288]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	4945      	ldr	r1, [pc, #276]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	e026      	b.n	80041a8 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800415a:	4b43      	ldr	r3, [pc, #268]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a42      	ldr	r2, [pc, #264]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004160:	f043 0308 	orr.w	r3, r3, #8
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b40      	ldr	r3, [pc, #256]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	493d      	ldr	r1, [pc, #244]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004178:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	4938      	ldr	r1, [pc, #224]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fe80 	bl	8004e9c <RCC_SetFlashLatencyFromMSIRange>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f000 bc0d 	b.w	80049c2 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a8:	f000 fdb4 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	492c      	ldr	r1, [pc, #176]	@ (800426c <HAL_RCC_OscConfig+0x29c>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <HAL_RCC_OscConfig+0x2a0>)
 80041c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004274 <HAL_RCC_OscConfig+0x2a4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fda7 	bl	8002d20 <HAL_InitTick>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05d      	beq.n	8004298 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	e3f0      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d032      	beq.n	800424e <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fde4 	bl	8002dc0 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041fc:	f7fe fde0 	bl	8002dc0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e3d9      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800420e:	4b16      	ldr	r3, [pc, #88]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800421a:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a12      	ldr	r2, [pc, #72]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	490d      	ldr	r1, [pc, #52]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004238:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	4908      	ldr	r1, [pc, #32]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
 800424c:	e025      	b.n	800429a <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800424e:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a05      	ldr	r2, [pc, #20]	@ (8004268 <HAL_RCC_OscConfig+0x298>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800425a:	f7fe fdb1 	bl	8002dc0 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004260:	e013      	b.n	800428a <HAL_RCC_OscConfig+0x2ba>
 8004262:	bf00      	nop
 8004264:	0800be5c 	.word	0x0800be5c
 8004268:	40021000 	.word	0x40021000
 800426c:	0800bfb8 	.word	0x0800bfb8
 8004270:	20000010 	.word	0x20000010
 8004274:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004278:	f7fe fda2 	bl	8002dc0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e39b      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800428a:	4b97      	ldr	r3, [pc, #604]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x2a8>
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004298:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d07e      	beq.n	80043a4 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <HAL_RCC_OscConfig+0x2fc>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b6:	d009      	beq.n	80042cc <HAL_RCC_OscConfig+0x2fc>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c0:	d004      	beq.n	80042cc <HAL_RCC_OscConfig+0x2fc>
 80042c2:	f240 2119 	movw	r1, #537	@ 0x219
 80042c6:	4889      	ldr	r0, [pc, #548]	@ (80044ec <HAL_RCC_OscConfig+0x51c>)
 80042c8:	f7fd feb8 	bl	800203c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x30e>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d10e      	bne.n	80042f6 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042de:	4b82      	ldr	r3, [pc, #520]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d05b      	beq.n	80043a2 <HAL_RCC_OscConfig+0x3d2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d157      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e365      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fe:	d106      	bne.n	800430e <HAL_RCC_OscConfig+0x33e>
 8004300:	4b79      	ldr	r3, [pc, #484]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a78      	ldr	r2, [pc, #480]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	e01d      	b.n	800434a <HAL_RCC_OscConfig+0x37a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004316:	d10c      	bne.n	8004332 <HAL_RCC_OscConfig+0x362>
 8004318:	4b73      	ldr	r3, [pc, #460]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a72      	ldr	r2, [pc, #456]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800431e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b70      	ldr	r3, [pc, #448]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6f      	ldr	r2, [pc, #444]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800432a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e00b      	b.n	800434a <HAL_RCC_OscConfig+0x37a>
 8004332:	4b6d      	ldr	r3, [pc, #436]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6c      	ldr	r2, [pc, #432]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b6a      	ldr	r3, [pc, #424]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a69      	ldr	r2, [pc, #420]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004344:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004348:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d013      	beq.n	800437a <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fe fd35 	bl	8002dc0 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435a:	f7fe fd31 	bl	8002dc0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b64      	cmp	r3, #100	@ 0x64
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e32a      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436c:	4b5e      	ldr	r3, [pc, #376]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x38a>
 8004378:	e014      	b.n	80043a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fe fd21 	bl	8002dc0 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004382:	f7fe fd1d 	bl	8002dc0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b64      	cmp	r3, #100	@ 0x64
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e316      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004394:	4b54      	ldr	r3, [pc, #336]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCC_OscConfig+0x3b2>
 80043a0:	e000      	b.n	80043a4 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d077      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <HAL_RCC_OscConfig+0x3fc>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c0:	d004      	beq.n	80043cc <HAL_RCC_OscConfig+0x3fc>
 80043c2:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80043c6:	4849      	ldr	r0, [pc, #292]	@ (80044ec <HAL_RCC_OscConfig+0x51c>)
 80043c8:	f7fd fe38 	bl	800203c <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b1f      	cmp	r3, #31
 80043d2:	d904      	bls.n	80043de <HAL_RCC_OscConfig+0x40e>
 80043d4:	f240 214d 	movw	r1, #589	@ 0x24d
 80043d8:	4844      	ldr	r0, [pc, #272]	@ (80044ec <HAL_RCC_OscConfig+0x51c>)
 80043da:	f7fd fe2f 	bl	800203c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x420>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d119      	bne.n	800441e <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d116      	bne.n	800441e <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f0:	4b3d      	ldr	r3, [pc, #244]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_OscConfig+0x438>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e2dc      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	4b37      	ldr	r3, [pc, #220]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	4934      	ldr	r1, [pc, #208]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800441c:	e040      	b.n	80044a0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d023      	beq.n	800446e <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004426:	4b30      	ldr	r3, [pc, #192]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2f      	ldr	r2, [pc, #188]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fe fcc5 	bl	8002dc0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443a:	f7fe fcc1 	bl	8002dc0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e2ba      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444c:	4b26      	ldr	r3, [pc, #152]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b23      	ldr	r3, [pc, #140]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	4920      	ldr	r1, [pc, #128]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
 800446c:	e018      	b.n	80044a0 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b1e      	ldr	r3, [pc, #120]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1d      	ldr	r2, [pc, #116]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fe fca1 	bl	8002dc0 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004482:	f7fe fc9d 	bl	8002dc0 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e296      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004494:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d04e      	beq.n	800454a <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_OscConfig+0x4f6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d004      	beq.n	80044c6 <HAL_RCC_OscConfig+0x4f6>
 80044bc:	f240 218d 	movw	r1, #653	@ 0x28d
 80044c0:	480a      	ldr	r0, [pc, #40]	@ (80044ec <HAL_RCC_OscConfig+0x51c>)
 80044c2:	f7fd fdbb 	bl	800203c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d021      	beq.n	8004512 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 80044d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044d4:	4a04      	ldr	r2, [pc, #16]	@ (80044e8 <HAL_RCC_OscConfig+0x518>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044de:	f7fe fc6f 	bl	8002dc0 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044e4:	e00d      	b.n	8004502 <HAL_RCC_OscConfig+0x532>
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	0800be5c 	.word	0x0800be5c
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f0:	f7fe fc66 	bl	8002dc0 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e25f      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004502:	4b66      	ldr	r3, [pc, #408]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ef      	beq.n	80044f0 <HAL_RCC_OscConfig+0x520>
 8004510:	e01b      	b.n	800454a <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004512:	4b62      	ldr	r3, [pc, #392]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004518:	4a60      	ldr	r2, [pc, #384]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fe fc4d 	bl	8002dc0 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452a:	f7fe fc49 	bl	8002dc0 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e242      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800453c:	4b57      	ldr	r3, [pc, #348]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1ef      	bne.n	800452a <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80b8 	beq.w	80046c8 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004558:	2300      	movs	r3, #0
 800455a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00c      	beq.n	800457e <HAL_RCC_OscConfig+0x5ae>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d008      	beq.n	800457e <HAL_RCC_OscConfig+0x5ae>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b05      	cmp	r3, #5
 8004572:	d004      	beq.n	800457e <HAL_RCC_OscConfig+0x5ae>
 8004574:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8004578:	4849      	ldr	r0, [pc, #292]	@ (80046a0 <HAL_RCC_OscConfig+0x6d0>)
 800457a:	f7fd fd5f 	bl	800203c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800457e:	4b47      	ldr	r3, [pc, #284]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10d      	bne.n	80045a6 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	4b44      	ldr	r3, [pc, #272]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	4a43      	ldr	r2, [pc, #268]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004594:	6593      	str	r3, [r2, #88]	@ 0x58
 8004596:	4b41      	ldr	r3, [pc, #260]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a2:	2301      	movs	r3, #1
 80045a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a6:	4b3f      	ldr	r3, [pc, #252]	@ (80046a4 <HAL_RCC_OscConfig+0x6d4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d118      	bne.n	80045e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b2:	4b3c      	ldr	r3, [pc, #240]	@ (80046a4 <HAL_RCC_OscConfig+0x6d4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	@ (80046a4 <HAL_RCC_OscConfig+0x6d4>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045be:	f7fe fbff 	bl	8002dc0 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fe fbfb 	bl	8002dc0 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e1f4      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d8:	4b32      	ldr	r3, [pc, #200]	@ (80046a4 <HAL_RCC_OscConfig+0x6d4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d108      	bne.n	80045fe <HAL_RCC_OscConfig+0x62e>
 80045ec:	4b2b      	ldr	r3, [pc, #172]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	4a2a      	ldr	r2, [pc, #168]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045fc:	e024      	b.n	8004648 <HAL_RCC_OscConfig+0x678>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b05      	cmp	r3, #5
 8004604:	d110      	bne.n	8004628 <HAL_RCC_OscConfig+0x658>
 8004606:	4b25      	ldr	r3, [pc, #148]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460c:	4a23      	ldr	r2, [pc, #140]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 800460e:	f043 0304 	orr.w	r3, r3, #4
 8004612:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004616:	4b21      	ldr	r3, [pc, #132]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	4a1f      	ldr	r2, [pc, #124]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004626:	e00f      	b.n	8004648 <HAL_RCC_OscConfig+0x678>
 8004628:	4b1c      	ldr	r3, [pc, #112]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	4a1b      	ldr	r2, [pc, #108]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004638:	4b18      	ldr	r3, [pc, #96]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	4a17      	ldr	r2, [pc, #92]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d016      	beq.n	800467e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fe fbb6 	bl	8002dc0 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004656:	e00a      	b.n	800466e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fe fbb2 	bl	8002dc0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1a9      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_RCC_OscConfig+0x6cc>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ed      	beq.n	8004658 <HAL_RCC_OscConfig+0x688>
 800467c:	e01b      	b.n	80046b6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fe fb9f 	bl	8002dc0 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004684:	e010      	b.n	80046a8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fe fb9b 	bl	8002dc0 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d907      	bls.n	80046a8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e192      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
 800469c:	40021000 	.word	0x40021000
 80046a0:	0800be5c 	.word	0x0800be5c
 80046a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046a8:	4b98      	ldr	r3, [pc, #608]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e7      	bne.n	8004686 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b6:	7ffb      	ldrb	r3, [r7, #31]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4b93      	ldr	r3, [pc, #588]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c0:	4a92      	ldr	r2, [pc, #584]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00c      	beq.n	80046ea <HAL_RCC_OscConfig+0x71a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d008      	beq.n	80046ea <HAL_RCC_OscConfig+0x71a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d004      	beq.n	80046ea <HAL_RCC_OscConfig+0x71a>
 80046e0:	f240 316e 	movw	r1, #878	@ 0x36e
 80046e4:	488a      	ldr	r0, [pc, #552]	@ (8004910 <HAL_RCC_OscConfig+0x940>)
 80046e6:	f7fd fca9 	bl	800203c <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8166 	beq.w	80049c0 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f040 813c 	bne.w	8004976 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d010      	beq.n	8004728 <HAL_RCC_OscConfig+0x758>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d00c      	beq.n	8004728 <HAL_RCC_OscConfig+0x758>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	2b02      	cmp	r3, #2
 8004714:	d008      	beq.n	8004728 <HAL_RCC_OscConfig+0x758>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	2b03      	cmp	r3, #3
 800471c:	d004      	beq.n	8004728 <HAL_RCC_OscConfig+0x758>
 800471e:	f240 3176 	movw	r1, #886	@ 0x376
 8004722:	487b      	ldr	r0, [pc, #492]	@ (8004910 <HAL_RCC_OscConfig+0x940>)
 8004724:	f7fd fc8a 	bl	800203c <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_RCC_OscConfig+0x768>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	2b08      	cmp	r3, #8
 8004736:	d904      	bls.n	8004742 <HAL_RCC_OscConfig+0x772>
 8004738:	f240 3177 	movw	r1, #887	@ 0x377
 800473c:	4874      	ldr	r0, [pc, #464]	@ (8004910 <HAL_RCC_OscConfig+0x940>)
 800473e:	f7fd fc7d 	bl	800203c <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004746:	2b07      	cmp	r3, #7
 8004748:	d903      	bls.n	8004752 <HAL_RCC_OscConfig+0x782>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474e:	2b56      	cmp	r3, #86	@ 0x56
 8004750:	d904      	bls.n	800475c <HAL_RCC_OscConfig+0x78c>
 8004752:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8004756:	486e      	ldr	r0, [pc, #440]	@ (8004910 <HAL_RCC_OscConfig+0x940>)
 8004758:	f7fd fc70 	bl	800203c <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	2b07      	cmp	r3, #7
 8004762:	d008      	beq.n	8004776 <HAL_RCC_OscConfig+0x7a6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004768:	2b11      	cmp	r3, #17
 800476a:	d004      	beq.n	8004776 <HAL_RCC_OscConfig+0x7a6>
 800476c:	f240 317a 	movw	r1, #890	@ 0x37a
 8004770:	4867      	ldr	r0, [pc, #412]	@ (8004910 <HAL_RCC_OscConfig+0x940>)
 8004772:	f7fd fc63 	bl	800203c <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477a:	2b02      	cmp	r3, #2
 800477c:	d010      	beq.n	80047a0 <HAL_RCC_OscConfig+0x7d0>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004782:	2b04      	cmp	r3, #4
 8004784:	d00c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x7d0>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478a:	2b06      	cmp	r3, #6
 800478c:	d008      	beq.n	80047a0 <HAL_RCC_OscConfig+0x7d0>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004792:	2b08      	cmp	r3, #8
 8004794:	d004      	beq.n	80047a0 <HAL_RCC_OscConfig+0x7d0>
 8004796:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 800479a:	485d      	ldr	r0, [pc, #372]	@ (8004910 <HAL_RCC_OscConfig+0x940>)
 800479c:	f7fd fc4e 	bl	800203c <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_OscConfig+0x7fa>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d00c      	beq.n	80047ca <HAL_RCC_OscConfig+0x7fa>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	2b06      	cmp	r3, #6
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_OscConfig+0x7fa>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d004      	beq.n	80047ca <HAL_RCC_OscConfig+0x7fa>
 80047c0:	f240 317d 	movw	r1, #893	@ 0x37d
 80047c4:	4852      	ldr	r0, [pc, #328]	@ (8004910 <HAL_RCC_OscConfig+0x940>)
 80047c6:	f7fd fc39 	bl	800203c <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047ca:	4b50      	ldr	r3, [pc, #320]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0203 	and.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	429a      	cmp	r2, r3
 80047dc:	d130      	bne.n	8004840 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	3b01      	subs	r3, #1
 80047ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d127      	bne.n	8004840 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d11f      	bne.n	8004840 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800480a:	2a07      	cmp	r2, #7
 800480c:	bf14      	ite	ne
 800480e:	2201      	movne	r2, #1
 8004810:	2200      	moveq	r2, #0
 8004812:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004814:	4293      	cmp	r3, r2
 8004816:	d113      	bne.n	8004840 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d109      	bne.n	8004840 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	3b01      	subs	r3, #1
 800483a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d074      	beq.n	800492a <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b0c      	cmp	r3, #12
 8004844:	d06f      	beq.n	8004926 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004846:	4b31      	ldr	r3, [pc, #196]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d105      	bne.n	800485e <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004852:	4b2e      	ldr	r3, [pc, #184]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0af      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004862:	4b2a      	ldr	r3, [pc, #168]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a29      	ldr	r2, [pc, #164]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 8004868:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800486c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800486e:	f7fe faa7 	bl	8002dc0 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fe faa3 	bl	8002dc0 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e09c      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004888:	4b20      	ldr	r3, [pc, #128]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004894:	4b1d      	ldr	r3, [pc, #116]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	4b1e      	ldr	r3, [pc, #120]	@ (8004914 <HAL_RCC_OscConfig+0x944>)
 800489a:	4013      	ands	r3, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048a4:	3a01      	subs	r2, #1
 80048a6:	0112      	lsls	r2, r2, #4
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048ae:	0212      	lsls	r2, r2, #8
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048b6:	0852      	lsrs	r2, r2, #1
 80048b8:	3a01      	subs	r2, #1
 80048ba:	0552      	lsls	r2, r2, #21
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048c2:	0852      	lsrs	r2, r2, #1
 80048c4:	3a01      	subs	r2, #1
 80048c6:	0652      	lsls	r2, r2, #25
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048ce:	0912      	lsrs	r2, r2, #4
 80048d0:	0452      	lsls	r2, r2, #17
 80048d2:	430a      	orrs	r2, r1
 80048d4:	490d      	ldr	r1, [pc, #52]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048da:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a0b      	ldr	r2, [pc, #44]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80048e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048e4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048e6:	4b09      	ldr	r3, [pc, #36]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	4a08      	ldr	r2, [pc, #32]	@ (800490c <HAL_RCC_OscConfig+0x93c>)
 80048ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048f0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048f2:	f7fe fa65 	bl	8002dc0 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f8:	e00e      	b.n	8004918 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fa:	f7fe fa61 	bl	8002dc0 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d907      	bls.n	8004918 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e05a      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
 800490c:	40021000 	.word	0x40021000
 8004910:	0800be5c 	.word	0x0800be5c
 8004914:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004918:	4b2c      	ldr	r3, [pc, #176]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ea      	beq.n	80048fa <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004924:	e04c      	b.n	80049c0 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e04b      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492a:	4b28      	ldr	r3, [pc, #160]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d144      	bne.n	80049c0 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004936:	4b25      	ldr	r3, [pc, #148]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a24      	ldr	r2, [pc, #144]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 800493c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004940:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 8004948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800494c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800494e:	f7fe fa37 	bl	8002dc0 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004956:	f7fe fa33 	bl	8002dc0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e02c      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004968:	4b18      	ldr	r3, [pc, #96]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x986>
 8004974:	e024      	b.n	80049c0 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b0c      	cmp	r3, #12
 800497a:	d01f      	beq.n	80049bc <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497c:	4b13      	ldr	r3, [pc, #76]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a12      	ldr	r2, [pc, #72]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 8004982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fe fa1a 	bl	8002dc0 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fe fa16 	bl	8002dc0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e00f      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a2:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049ae:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	4906      	ldr	r1, [pc, #24]	@ (80049cc <HAL_RCC_OscConfig+0x9fc>)
 80049b4:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_RCC_OscConfig+0xa00>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	60cb      	str	r3, [r1, #12]
 80049ba:	e001      	b.n	80049c0 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	feeefffc 	.word	0xfeeefffc

080049d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e186      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x24>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b0f      	cmp	r3, #15
 80049f6:	d904      	bls.n	8004a02 <HAL_RCC_ClockConfig+0x2e>
 80049f8:	f240 4159 	movw	r1, #1113	@ 0x459
 80049fc:	4882      	ldr	r0, [pc, #520]	@ (8004c08 <HAL_RCC_ClockConfig+0x234>)
 80049fe:	f7fd fb1d 	bl	800203c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d010      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x56>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d00d      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x56>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x56>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d007      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x56>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d004      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x56>
 8004a20:	f240 415a 	movw	r1, #1114	@ 0x45a
 8004a24:	4878      	ldr	r0, [pc, #480]	@ (8004c08 <HAL_RCC_ClockConfig+0x234>)
 8004a26:	f7fd fb09 	bl	800203c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2a:	4b78      	ldr	r3, [pc, #480]	@ (8004c0c <HAL_RCC_ClockConfig+0x238>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d910      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a38:	4b74      	ldr	r3, [pc, #464]	@ (8004c0c <HAL_RCC_ClockConfig+0x238>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 0207 	bic.w	r2, r3, #7
 8004a40:	4972      	ldr	r1, [pc, #456]	@ (8004c0c <HAL_RCC_ClockConfig+0x238>)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a48:	4b70      	ldr	r3, [pc, #448]	@ (8004c0c <HAL_RCC_ClockConfig+0x238>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e14d      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d039      	beq.n	8004ada <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d024      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b80      	cmp	r3, #128	@ 0x80
 8004a74:	d020      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b90      	cmp	r3, #144	@ 0x90
 8004a7c:	d01c      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2ba0      	cmp	r3, #160	@ 0xa0
 8004a84:	d018      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2bb0      	cmp	r3, #176	@ 0xb0
 8004a8c:	d014      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a94:	d010      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2bd0      	cmp	r3, #208	@ 0xd0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2be0      	cmp	r3, #224	@ 0xe0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2bf0      	cmp	r3, #240	@ 0xf0
 8004aac:	d004      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xe4>
 8004aae:	f240 4172 	movw	r1, #1138	@ 0x472
 8004ab2:	4855      	ldr	r0, [pc, #340]	@ (8004c08 <HAL_RCC_ClockConfig+0x234>)
 8004ab4:	f7fd fac2 	bl	800203c <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d908      	bls.n	8004ada <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac8:	4b51      	ldr	r3, [pc, #324]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	494e      	ldr	r1, [pc, #312]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d061      	beq.n	8004baa <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d010      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x13c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d00c      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x13c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d008      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x13c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d004      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x13c>
 8004b06:	f240 417d 	movw	r1, #1149	@ 0x47d
 8004b0a:	483f      	ldr	r0, [pc, #252]	@ (8004c08 <HAL_RCC_ClockConfig+0x234>)
 8004b0c:	f7fd fa96 	bl	800203c <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d107      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b18:	4b3d      	ldr	r3, [pc, #244]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d121      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0e6      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b30:	4b37      	ldr	r3, [pc, #220]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d115      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0da      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b48:	4b31      	ldr	r3, [pc, #196]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0ce      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b58:	4b2d      	ldr	r3, [pc, #180]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0c6      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b68:	4b29      	ldr	r3, [pc, #164]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f023 0203 	bic.w	r2, r3, #3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4926      	ldr	r1, [pc, #152]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7a:	f7fe f921 	bl	8002dc0 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b80:	e00a      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b82:	f7fe f91d 	bl	8002dc0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e0ae      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b98:	4b1d      	ldr	r3, [pc, #116]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 020c 	and.w	r2, r3, #12
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d1eb      	bne.n	8004b82 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d010      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d208      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc6:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	490f      	ldr	r1, [pc, #60]	@ (8004c10 <HAL_RCC_ClockConfig+0x23c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c0c <HAL_RCC_ClockConfig+0x238>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d216      	bcs.n	8004c14 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <HAL_RCC_ClockConfig+0x238>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 0207 	bic.w	r2, r3, #7
 8004bee:	4907      	ldr	r1, [pc, #28]	@ (8004c0c <HAL_RCC_ClockConfig+0x238>)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_RCC_ClockConfig+0x238>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d007      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e076      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x322>
 8004c08:	0800be5c 	.word	0x0800be5c
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d025      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d018      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x286>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c30:	d013      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x286>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004c3a:	d00e      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x286>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c44:	d009      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x286>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c4e:	d004      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x286>
 8004c50:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8004c54:	482a      	ldr	r0, [pc, #168]	@ (8004d00 <HAL_RCC_ClockConfig+0x32c>)
 8004c56:	f7fd f9f1 	bl	800203c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d04 <HAL_RCC_ClockConfig+0x330>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4927      	ldr	r1, [pc, #156]	@ (8004d04 <HAL_RCC_ClockConfig+0x330>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d026      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d018      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x2de>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c88:	d013      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x2de>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004c92:	d00e      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x2de>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c9c:	d009      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x2de>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ca6:	d004      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x2de>
 8004ca8:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8004cac:	4814      	ldr	r0, [pc, #80]	@ (8004d00 <HAL_RCC_ClockConfig+0x32c>)
 8004cae:	f7fd f9c5 	bl	800203c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cb2:	4b14      	ldr	r3, [pc, #80]	@ (8004d04 <HAL_RCC_ClockConfig+0x330>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4910      	ldr	r1, [pc, #64]	@ (8004d04 <HAL_RCC_ClockConfig+0x330>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cc6:	f000 f825 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <HAL_RCC_ClockConfig+0x330>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	490c      	ldr	r1, [pc, #48]	@ (8004d08 <HAL_RCC_ClockConfig+0x334>)
 8004cd8:	5ccb      	ldrb	r3, [r1, r3]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d0c <HAL_RCC_ClockConfig+0x338>)
 8004ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <HAL_RCC_ClockConfig+0x33c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe f818 	bl	8002d20 <HAL_InitTick>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	0800be5c 	.word	0x0800be5c
 8004d04:	40021000 	.word	0x40021000
 8004d08:	0800bfb8 	.word	0x0800bfb8
 8004d0c:	20000010 	.word	0x20000010
 8004d10:	20000014 	.word	0x20000014

08004d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	@ 0x24
 8004d18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d22:	4b3e      	ldr	r3, [pc, #248]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x34>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d121      	bne.n	8004d86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d11e      	bne.n	8004d86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d48:	4b34      	ldr	r3, [pc, #208]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d107      	bne.n	8004d64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d54:	4b31      	ldr	r3, [pc, #196]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e005      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d64:	4b2d      	ldr	r3, [pc, #180]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d70:	4a2b      	ldr	r2, [pc, #172]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10d      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d84:	e00a      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d102      	bne.n	8004d92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d8c:	4b25      	ldr	r3, [pc, #148]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e004      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d98:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d134      	bne.n	8004e0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004da2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_GetSysClockFreq+0xa6>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d003      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0xac>
 8004db8:	e005      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dba:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dbc:	617b      	str	r3, [r7, #20]
      break;
 8004dbe:	e005      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dc0:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dc2:	617b      	str	r3, [r7, #20]
      break;
 8004dc4:	e002      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	617b      	str	r3, [r7, #20]
      break;
 8004dca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dcc:	4b13      	ldr	r3, [pc, #76]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dda:	4b10      	ldr	r3, [pc, #64]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	fb03 f202 	mul.w	r2, r3, r2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004df2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	0e5b      	lsrs	r3, r3, #25
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3724      	adds	r7, #36	@ 0x24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	0800bfd0 	.word	0x0800bfd0
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	007a1200 	.word	0x007a1200

08004e2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	@ (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000010 	.word	0x20000010

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4904      	ldr	r1, [pc, #16]	@ (8004e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	0800bfc8 	.word	0x0800bfc8

08004e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e74:	f7ff ffda 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0adb      	lsrs	r3, r3, #11
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4904      	ldr	r1, [pc, #16]	@ (8004e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40021000 	.word	0x40021000
 8004e98:	0800bfc8 	.word	0x0800bfc8

08004e9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eb4:	f7ff f81c 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004eb8:	6178      	str	r0, [r7, #20]
 8004eba:	e014      	b.n	8004ee6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ebc:	4b25      	ldr	r3, [pc, #148]	@ (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec0:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ec8:	4b22      	ldr	r3, [pc, #136]	@ (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ed4:	f7ff f80c 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004ed8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eda:	4b1e      	ldr	r3, [pc, #120]	@ (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ede:	4a1d      	ldr	r2, [pc, #116]	@ (8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eec:	d10b      	bne.n	8004f06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b80      	cmp	r3, #128	@ 0x80
 8004ef2:	d919      	bls.n	8004f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ef8:	d902      	bls.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004efa:	2302      	movs	r3, #2
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	e013      	b.n	8004f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f00:	2301      	movs	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e010      	b.n	8004f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b80      	cmp	r3, #128	@ 0x80
 8004f0a:	d902      	bls.n	8004f12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	e00a      	b.n	8004f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b80      	cmp	r3, #128	@ 0x80
 8004f16:	d102      	bne.n	8004f1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f18:	2302      	movs	r3, #2
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	e004      	b.n	8004f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b70      	cmp	r3, #112	@ 0x70
 8004f22:	d101      	bne.n	8004f28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f24:	2301      	movs	r3, #1
 8004f26:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f023 0207 	bic.w	r2, r3, #7
 8004f30:	4909      	ldr	r1, [pc, #36]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f38:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d001      	beq.n	8004f4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40022000 	.word	0x40022000

08004f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f64:	2300      	movs	r3, #0
 8004f66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f80:	d303      	bcc.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8004f82:	21c9      	movs	r1, #201	@ 0xc9
 8004f84:	4889      	ldr	r0, [pc, #548]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004f86:	f7fd f859 	bl	800203c <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d058      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d012      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fb0:	d008      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fba:	d003      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004fbc:	21d1      	movs	r1, #209	@ 0xd1
 8004fbe:	487b      	ldr	r0, [pc, #492]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004fc0:	f7fd f83c 	bl	800203c <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fcc:	d02a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8004fce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fd2:	d824      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004fd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fd8:	d008      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004fda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fde:	d81e      	bhi.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004fe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fe8:	d010      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8004fea:	e018      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fec:	4b70      	ldr	r3, [pc, #448]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a6f      	ldr	r2, [pc, #444]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff8:	e015      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fc69 	bl	80058d8 <RCCEx_PLLSAI1_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800500a:	e00c      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3320      	adds	r3, #32
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fde0 	bl	8005bd8 <RCCEx_PLLSAI2_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800501c:	e003      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	74fb      	strb	r3, [r7, #19]
      break;
 8005022:	e000      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8005024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005026:	7cfb      	ldrb	r3, [r7, #19]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10b      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800502c:	4b60      	ldr	r3, [pc, #384]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005032:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800503a:	495d      	ldr	r1, [pc, #372]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005042:	e001      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d059      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005064:	d00e      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800506a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800506e:	d009      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005074:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005078:	d004      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800507a:	f240 110f 	movw	r1, #271	@ 0x10f
 800507e:	484b      	ldr	r0, [pc, #300]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005080:	f7fc ffdc 	bl	800203c <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005088:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800508c:	d02a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800508e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005092:	d824      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005094:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005098:	d008      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x150>
 800509a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800509e:	d81e      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x182>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80050a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050a8:	d010      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x170>
 80050aa:	e018      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050ac:	4b40      	ldr	r3, [pc, #256]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4a3f      	ldr	r2, [pc, #252]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050b8:	e015      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	2100      	movs	r1, #0
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fc09 	bl	80058d8 <RCCEx_PLLSAI1_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ca:	e00c      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3320      	adds	r3, #32
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fd80 	bl	8005bd8 <RCCEx_PLLSAI2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050dc:	e003      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	74fb      	strb	r3, [r7, #19]
      break;
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 80050e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050ec:	4b30      	ldr	r3, [pc, #192]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050fa:	492d      	ldr	r1, [pc, #180]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005102:	e001      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80c2 	beq.w	800529a <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005116:	2300      	movs	r3, #0
 8005118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005120:	2b00      	cmp	r3, #0
 8005122:	d016      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800512a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800512e:	d010      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005142:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005146:	d004      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005148:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800514c:	4817      	ldr	r0, [pc, #92]	@ (80051ac <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800514e:	f7fc ff75 	bl	800203c <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005152:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005168:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800516a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516c:	4a10      	ldr	r2, [pc, #64]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800516e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005172:	6593      	str	r3, [r2, #88]	@ 0x58
 8005174:	4b0e      	ldr	r3, [pc, #56]	@ (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005180:	2301      	movs	r3, #1
 8005182:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005184:	4b0b      	ldr	r3, [pc, #44]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a0a      	ldr	r2, [pc, #40]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800518a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005190:	f7fd fe16 	bl	8002dc0 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005196:	e00f      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005198:	f7fd fe12 	bl	8002dc0 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d908      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	74fb      	strb	r3, [r7, #19]
        break;
 80051aa:	e00b      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80051ac:	0800be94 	.word	0x0800be94
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051b8:	4b30      	ldr	r3, [pc, #192]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0e9      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d15c      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d019      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051e8:	4b25      	ldr	r3, [pc, #148]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051f4:	4b22      	ldr	r3, [pc, #136]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fa:	4a21      	ldr	r2, [pc, #132]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005204:	4b1e      	ldr	r3, [pc, #120]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	4a1d      	ldr	r2, [pc, #116]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800520c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005214:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fd fdcb 	bl	8002dc0 <HAL_GetTick>
 800522a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800522c:	e00b      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fd fdc7 	bl	8002dc0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d902      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	74fb      	strb	r3, [r7, #19]
            break;
 8005244:	e006      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005246:	4b0e      	ldr	r3, [pc, #56]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ec      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10c      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800525a:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800526a:	4905      	ldr	r1, [pc, #20]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005272:	e009      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	74bb      	strb	r3, [r7, #18]
 8005278:	e006      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 800527a:	bf00      	nop
 800527c:	40007000 	.word	0x40007000
 8005280:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005288:	7c7b      	ldrb	r3, [r7, #17]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d105      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800528e:	4b8d      	ldr	r3, [pc, #564]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005292:	4a8c      	ldr	r2, [pc, #560]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005298:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01f      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d010      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d00c      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d008      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d004      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80052c6:	f240 1199 	movw	r1, #409	@ 0x199
 80052ca:	487f      	ldr	r0, [pc, #508]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80052cc:	f7fc feb6 	bl	800203c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052d0:	4b7c      	ldr	r3, [pc, #496]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	4979      	ldr	r1, [pc, #484]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01f      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d010      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d00c      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005306:	2b0c      	cmp	r3, #12
 8005308:	d008      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	2b08      	cmp	r3, #8
 8005310:	d004      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005312:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8005316:	486c      	ldr	r0, [pc, #432]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005318:	f7fc fe90 	bl	800203c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800531c:	4b69      	ldr	r3, [pc, #420]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005322:	f023 020c 	bic.w	r2, r3, #12
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532a:	4966      	ldr	r1, [pc, #408]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01f      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	2b10      	cmp	r3, #16
 800534c:	d00c      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	2b30      	cmp	r3, #48	@ 0x30
 8005354:	d008      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	2b20      	cmp	r3, #32
 800535c:	d004      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800535e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005362:	4859      	ldr	r0, [pc, #356]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005364:	f7fc fe6a 	bl	800203c <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005368:	4b56      	ldr	r3, [pc, #344]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	4953      	ldr	r1, [pc, #332]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01f      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	2b40      	cmp	r3, #64	@ 0x40
 8005398:	d00c      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	2bc0      	cmp	r3, #192	@ 0xc0
 80053a0:	d008      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d004      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80053aa:	f240 11bd 	movw	r1, #445	@ 0x1bd
 80053ae:	4846      	ldr	r0, [pc, #280]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80053b0:	f7fc fe44 	bl	800203c <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053b4:	4b43      	ldr	r3, [pc, #268]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c2:	4940      	ldr	r1, [pc, #256]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d022      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d013      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053e6:	d00e      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053f0:	d009      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053fa:	d004      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80053fc:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8005400:	4831      	ldr	r0, [pc, #196]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005402:	f7fc fe1b 	bl	800203c <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005406:	4b2f      	ldr	r3, [pc, #188]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005414:	492b      	ldr	r1, [pc, #172]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d022      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d013      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005438:	d00e      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005442:	d009      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800544c:	d004      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800544e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8005452:	481d      	ldr	r0, [pc, #116]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005454:	f7fc fdf2 	bl	800203c <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005458:	4b1a      	ldr	r3, [pc, #104]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005466:	4917      	ldr	r1, [pc, #92]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005476:	2b00      	cmp	r3, #0
 8005478:	d028      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800548a:	d00e      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005490:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005494:	d009      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800549e:	d004      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80054a0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80054a4:	4808      	ldr	r0, [pc, #32]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80054a6:	f7fc fdc9 	bl	800203c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054aa:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b8:	4902      	ldr	r1, [pc, #8]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054c0:	e004      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x570>
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
 80054c8:	0800be94 	.word	0x0800be94
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d022      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d013      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e8:	d00e      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054f2:	d009      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054fc:	d004      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054fe:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8005502:	489e      	ldr	r0, [pc, #632]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005504:	f7fc fd9a 	bl	800203c <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005508:	4b9d      	ldr	r3, [pc, #628]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005516:	499a      	ldr	r1, [pc, #616]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01d      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00e      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800553a:	d009      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005544:	d004      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005546:	f240 11ef 	movw	r1, #495	@ 0x1ef
 800554a:	488c      	ldr	r0, [pc, #560]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800554c:	f7fc fd76 	bl	800203c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005550:	4b8b      	ldr	r3, [pc, #556]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005556:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800555e:	4988      	ldr	r1, [pc, #544]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01d      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00e      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005582:	d009      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800558c:	d004      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800558e:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8005592:	487a      	ldr	r0, [pc, #488]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005594:	f7fc fd52 	bl	800203c <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005598:	4b79      	ldr	r3, [pc, #484]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a6:	4976      	ldr	r1, [pc, #472]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01d      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ca:	d009      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d4:	d004      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80055d6:	f240 2107 	movw	r1, #519	@ 0x207
 80055da:	4868      	ldr	r0, [pc, #416]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80055dc:	f7fc fd2e 	bl	800203c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055e0:	4b67      	ldr	r3, [pc, #412]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ee:	4964      	ldr	r1, [pc, #400]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d040      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d013      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800560e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005612:	d00e      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800561c:	d009      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005622:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005626:	d004      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005628:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800562c:	4853      	ldr	r0, [pc, #332]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800562e:	f7fc fd05 	bl	800203c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005632:	4b53      	ldr	r3, [pc, #332]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005638:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005640:	494f      	ldr	r1, [pc, #316]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800564c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005650:	d106      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005652:	4b4b      	ldr	r3, [pc, #300]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	4a4a      	ldr	r2, [pc, #296]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800565c:	60d3      	str	r3, [r2, #12]
 800565e:	e011      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005664:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005668:	d10c      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	2101      	movs	r1, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f931 	bl	80058d8 <RCCEx_PLLSAI1_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800567a:	7cfb      	ldrb	r3, [r7, #19]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d040      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005694:	2b00      	cmp	r3, #0
 8005696:	d013      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056a0:	d00e      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056aa:	d009      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80056b4:	d004      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80056b6:	f240 2141 	movw	r1, #577	@ 0x241
 80056ba:	4830      	ldr	r0, [pc, #192]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80056bc:	f7fc fcbe 	bl	800203c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056c0:	4b2f      	ldr	r3, [pc, #188]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	492c      	ldr	r1, [pc, #176]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056de:	d106      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e0:	4b27      	ldr	r3, [pc, #156]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a26      	ldr	r2, [pc, #152]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80056e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ea:	60d3      	str	r3, [r2, #12]
 80056ec:	e011      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f6:	d10c      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	2101      	movs	r1, #1
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f8ea 	bl	80058d8 <RCCEx_PLLSAI1_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d044      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005722:	2b00      	cmp	r3, #0
 8005724:	d013      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800572e:	d00e      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005738:	d009      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005742:	d004      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005744:	f240 2166 	movw	r1, #614	@ 0x266
 8005748:	480c      	ldr	r0, [pc, #48]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800574a:	f7fc fc77 	bl	800203c <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800574e:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005754:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575c:	4908      	ldr	r1, [pc, #32]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800576c:	d10a      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576e:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4a03      	ldr	r2, [pc, #12]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005774:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005778:	60d3      	str	r3, [r2, #12]
 800577a:	e015      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800577c:	0800be94 	.word	0x0800be94
 8005780:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005788:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800578c:	d10c      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f89f 	bl	80058d8 <RCCEx_PLLSAI1_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d047      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d013      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057c4:	d00e      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ce:	d009      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057d8:	d004      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80057da:	f240 2186 	movw	r1, #646	@ 0x286
 80057de:	483c      	ldr	r0, [pc, #240]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80057e0:	f7fc fc2c 	bl	800203c <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e4:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057f2:	4938      	ldr	r1, [pc, #224]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005802:	d10d      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	2102      	movs	r1, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f864 	bl	80058d8 <RCCEx_PLLSAI1_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	74bb      	strb	r3, [r7, #18]
 800581e:	e011      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3320      	adds	r3, #32
 800582e:	2102      	movs	r1, #2
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f9d1 	bl	8005bd8 <RCCEx_PLLSAI2_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8005840:	7cfb      	ldrb	r3, [r7, #19]
 8005842:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d018      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005860:	d004      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005862:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8005866:	481a      	ldr	r0, [pc, #104]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005868:	f7fc fbe8 	bl	800203c <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800586c:	4b19      	ldr	r3, [pc, #100]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005872:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800587a:	4916      	ldr	r1, [pc, #88]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01b      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058a2:	d004      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 80058a4:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 80058a8:	4809      	ldr	r0, [pc, #36]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80058aa:	f7fc fbc7 	bl	800203c <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058ae:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058be:	4905      	ldr	r1, [pc, #20]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	0800be94 	.word	0x0800be94
 80058d4:	40021000 	.word	0x40021000

080058d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d010      	beq.n	8005910 <RCCEx_PLLSAI1_Config+0x38>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d00c      	beq.n	8005910 <RCCEx_PLLSAI1_Config+0x38>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d008      	beq.n	8005910 <RCCEx_PLLSAI1_Config+0x38>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d004      	beq.n	8005910 <RCCEx_PLLSAI1_Config+0x38>
 8005906:	f640 3162 	movw	r1, #2914	@ 0xb62
 800590a:	4887      	ldr	r0, [pc, #540]	@ (8005b28 <RCCEx_PLLSAI1_Config+0x250>)
 800590c:	f7fc fb96 	bl	800203c <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <RCCEx_PLLSAI1_Config+0x48>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d904      	bls.n	800592a <RCCEx_PLLSAI1_Config+0x52>
 8005920:	f640 3163 	movw	r1, #2915	@ 0xb63
 8005924:	4880      	ldr	r0, [pc, #512]	@ (8005b28 <RCCEx_PLLSAI1_Config+0x250>)
 8005926:	f7fc fb89 	bl	800203c <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2b07      	cmp	r3, #7
 8005930:	d903      	bls.n	800593a <RCCEx_PLLSAI1_Config+0x62>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b56      	cmp	r3, #86	@ 0x56
 8005938:	d904      	bls.n	8005944 <RCCEx_PLLSAI1_Config+0x6c>
 800593a:	f640 3164 	movw	r1, #2916	@ 0xb64
 800593e:	487a      	ldr	r0, [pc, #488]	@ (8005b28 <RCCEx_PLLSAI1_Config+0x250>)
 8005940:	f7fc fb7c 	bl	800203c <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <RCCEx_PLLSAI1_Config+0x90>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d105      	bne.n	8005968 <RCCEx_PLLSAI1_Config+0x90>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <RCCEx_PLLSAI1_Config+0xa0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d004      	beq.n	8005982 <RCCEx_PLLSAI1_Config+0xaa>
 8005978:	f640 3165 	movw	r1, #2917	@ 0xb65
 800597c:	486a      	ldr	r0, [pc, #424]	@ (8005b28 <RCCEx_PLLSAI1_Config+0x250>)
 800597e:	f7fc fb5d 	bl	800203c <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005982:	4b6a      	ldr	r3, [pc, #424]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d018      	beq.n	80059c0 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800598e:	4b67      	ldr	r3, [pc, #412]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f003 0203 	and.w	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d10d      	bne.n	80059ba <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
       ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059a6:	4b61      	ldr	r3, [pc, #388]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
       ||
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d047      	beq.n	8005a4a <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	73fb      	strb	r3, [r7, #15]
 80059be:	e044      	b.n	8005a4a <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d018      	beq.n	80059fa <RCCEx_PLLSAI1_Config+0x122>
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d825      	bhi.n	8005a18 <RCCEx_PLLSAI1_Config+0x140>
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d002      	beq.n	80059d6 <RCCEx_PLLSAI1_Config+0xfe>
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d009      	beq.n	80059e8 <RCCEx_PLLSAI1_Config+0x110>
 80059d4:	e020      	b.n	8005a18 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059d6:	4b55      	ldr	r3, [pc, #340]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d11d      	bne.n	8005a1e <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e6:	e01a      	b.n	8005a1e <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059e8:	4b50      	ldr	r3, [pc, #320]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d116      	bne.n	8005a22 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059f8:	e013      	b.n	8005a22 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059fa:	4b4c      	ldr	r3, [pc, #304]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10f      	bne.n	8005a26 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a06:	4b49      	ldr	r3, [pc, #292]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a16:	e006      	b.n	8005a26 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1c:	e004      	b.n	8005a28 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10d      	bne.n	8005a4a <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	430b      	orrs	r3, r1
 8005a44:	4939      	ldr	r1, [pc, #228]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 80ba 	bne.w	8005bc6 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a52:	4b36      	ldr	r3, [pc, #216]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a35      	ldr	r2, [pc, #212]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005a58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a5e:	f7fd f9af 	bl	8002dc0 <HAL_GetTick>
 8005a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a64:	e009      	b.n	8005a7a <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a66:	f7fd f9ab 	bl	8002dc0 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d902      	bls.n	8005a7a <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	73fb      	strb	r3, [r7, #15]
        break;
 8005a78:	e005      	b.n	8005a86 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1ef      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 809c 	bne.w	8005bc6 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11e      	bne.n	8005ad2 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	2b07      	cmp	r3, #7
 8005a9a:	d008      	beq.n	8005aae <RCCEx_PLLSAI1_Config+0x1d6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b11      	cmp	r3, #17
 8005aa2:	d004      	beq.n	8005aae <RCCEx_PLLSAI1_Config+0x1d6>
 8005aa4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8005aa8:	481f      	ldr	r0, [pc, #124]	@ (8005b28 <RCCEx_PLLSAI1_Config+0x250>)
 8005aaa:	f7fc fac7 	bl	800203c <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aae:	4b1f      	ldr	r3, [pc, #124]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6892      	ldr	r2, [r2, #8]
 8005abe:	0211      	lsls	r1, r2, #8
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68d2      	ldr	r2, [r2, #12]
 8005ac4:	0912      	lsrs	r2, r2, #4
 8005ac6:	0452      	lsls	r2, r2, #17
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	4918      	ldr	r1, [pc, #96]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	610b      	str	r3, [r1, #16]
 8005ad0:	e055      	b.n	8005b7e <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d12b      	bne.n	8005b30 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d010      	beq.n	8005b02 <RCCEx_PLLSAI1_Config+0x22a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d00c      	beq.n	8005b02 <RCCEx_PLLSAI1_Config+0x22a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b06      	cmp	r3, #6
 8005aee:	d008      	beq.n	8005b02 <RCCEx_PLLSAI1_Config+0x22a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d004      	beq.n	8005b02 <RCCEx_PLLSAI1_Config+0x22a>
 8005af8:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8005afc:	480a      	ldr	r0, [pc, #40]	@ (8005b28 <RCCEx_PLLSAI1_Config+0x250>)
 8005afe:	f7fc fa9d 	bl	800203c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b02:	4b0a      	ldr	r3, [pc, #40]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6892      	ldr	r2, [r2, #8]
 8005b12:	0211      	lsls	r1, r2, #8
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6912      	ldr	r2, [r2, #16]
 8005b18:	0852      	lsrs	r2, r2, #1
 8005b1a:	3a01      	subs	r2, #1
 8005b1c:	0552      	lsls	r2, r2, #21
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	4902      	ldr	r1, [pc, #8]	@ (8005b2c <RCCEx_PLLSAI1_Config+0x254>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	610b      	str	r3, [r1, #16]
 8005b26:	e02a      	b.n	8005b7e <RCCEx_PLLSAI1_Config+0x2a6>
 8005b28:	0800be94 	.word	0x0800be94
 8005b2c:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d010      	beq.n	8005b5a <RCCEx_PLLSAI1_Config+0x282>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d00c      	beq.n	8005b5a <RCCEx_PLLSAI1_Config+0x282>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	2b06      	cmp	r3, #6
 8005b46:	d008      	beq.n	8005b5a <RCCEx_PLLSAI1_Config+0x282>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d004      	beq.n	8005b5a <RCCEx_PLLSAI1_Config+0x282>
 8005b50:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8005b54:	481e      	ldr	r0, [pc, #120]	@ (8005bd0 <RCCEx_PLLSAI1_Config+0x2f8>)
 8005b56:	f7fc fa71 	bl	800203c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b62:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6892      	ldr	r2, [r2, #8]
 8005b6a:	0211      	lsls	r1, r2, #8
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6952      	ldr	r2, [r2, #20]
 8005b70:	0852      	lsrs	r2, r2, #1
 8005b72:	3a01      	subs	r2, #1
 8005b74:	0652      	lsls	r2, r2, #25
 8005b76:	430a      	orrs	r2, r1
 8005b78:	4916      	ldr	r1, [pc, #88]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b7e:	4b15      	ldr	r3, [pc, #84]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a14      	ldr	r2, [pc, #80]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005b84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8a:	f7fd f919 	bl	8002dc0 <HAL_GetTick>
 8005b8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b90:	e009      	b.n	8005ba6 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b92:	f7fd f915 	bl	8002dc0 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d902      	bls.n	8005ba6 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ba4:	e005      	b.n	8005bb2 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0ef      	beq.n	8005b92 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bb8:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	4904      	ldr	r1, [pc, #16]	@ (8005bd4 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	0800be94 	.word	0x0800be94
 8005bd4:	40021000 	.word	0x40021000

08005bd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d010      	beq.n	8005c10 <RCCEx_PLLSAI2_Config+0x38>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d00c      	beq.n	8005c10 <RCCEx_PLLSAI2_Config+0x38>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d008      	beq.n	8005c10 <RCCEx_PLLSAI2_Config+0x38>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d004      	beq.n	8005c10 <RCCEx_PLLSAI2_Config+0x38>
 8005c06:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8005c0a:	4896      	ldr	r0, [pc, #600]	@ (8005e64 <RCCEx_PLLSAI2_Config+0x28c>)
 8005c0c:	f7fc fa16 	bl	800203c <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <RCCEx_PLLSAI2_Config+0x48>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d904      	bls.n	8005c2a <RCCEx_PLLSAI2_Config+0x52>
 8005c20:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8005c24:	488f      	ldr	r0, [pc, #572]	@ (8005e64 <RCCEx_PLLSAI2_Config+0x28c>)
 8005c26:	f7fc fa09 	bl	800203c <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b07      	cmp	r3, #7
 8005c30:	d903      	bls.n	8005c3a <RCCEx_PLLSAI2_Config+0x62>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b56      	cmp	r3, #86	@ 0x56
 8005c38:	d904      	bls.n	8005c44 <RCCEx_PLLSAI2_Config+0x6c>
 8005c3a:	f640 4131 	movw	r1, #3121	@ 0xc31
 8005c3e:	4889      	ldr	r0, [pc, #548]	@ (8005e64 <RCCEx_PLLSAI2_Config+0x28c>)
 8005c40:	f7fc f9fc 	bl	800203c <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d105      	bne.n	8005c5c <RCCEx_PLLSAI2_Config+0x84>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <RCCEx_PLLSAI2_Config+0x94>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <RCCEx_PLLSAI2_Config+0x9e>
 8005c6c:	f640 4132 	movw	r1, #3122	@ 0xc32
 8005c70:	487c      	ldr	r0, [pc, #496]	@ (8005e64 <RCCEx_PLLSAI2_Config+0x28c>)
 8005c72:	f7fc f9e3 	bl	800203c <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c76:	4b7c      	ldr	r3, [pc, #496]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c82:	4b79      	ldr	r3, [pc, #484]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0203 	and.w	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d10d      	bne.n	8005cae <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
       ||
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c9a:	4b73      	ldr	r3, [pc, #460]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	091b      	lsrs	r3, r3, #4
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
       ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d047      	beq.n	8005d3e <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	e044      	b.n	8005d3e <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d018      	beq.n	8005cee <RCCEx_PLLSAI2_Config+0x116>
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d825      	bhi.n	8005d0c <RCCEx_PLLSAI2_Config+0x134>
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d002      	beq.n	8005cca <RCCEx_PLLSAI2_Config+0xf2>
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d009      	beq.n	8005cdc <RCCEx_PLLSAI2_Config+0x104>
 8005cc8:	e020      	b.n	8005d0c <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cca:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d11d      	bne.n	8005d12 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cda:	e01a      	b.n	8005d12 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cdc:	4b62      	ldr	r3, [pc, #392]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d116      	bne.n	8005d16 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cec:	e013      	b.n	8005d16 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cee:	4b5e      	ldr	r3, [pc, #376]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10f      	bne.n	8005d1a <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d0a:	e006      	b.n	8005d1a <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d10:	e004      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d22:	4b51      	ldr	r3, [pc, #324]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	430b      	orrs	r3, r1
 8005d38:	494b      	ldr	r1, [pc, #300]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f040 808a 	bne.w	8005e5a <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d46:	4b48      	ldr	r3, [pc, #288]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a47      	ldr	r2, [pc, #284]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d52:	f7fd f835 	bl	8002dc0 <HAL_GetTick>
 8005d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d58:	e009      	b.n	8005d6e <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d5a:	f7fd f831 	bl	8002dc0 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d902      	bls.n	8005d6e <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	73fb      	strb	r3, [r7, #15]
        break;
 8005d6c:	e005      	b.n	8005d7a <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1ef      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d16c      	bne.n	8005e5a <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d11e      	bne.n	8005dc4 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b07      	cmp	r3, #7
 8005d8c:	d008      	beq.n	8005da0 <RCCEx_PLLSAI2_Config+0x1c8>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b11      	cmp	r3, #17
 8005d94:	d004      	beq.n	8005da0 <RCCEx_PLLSAI2_Config+0x1c8>
 8005d96:	f640 4185 	movw	r1, #3205	@ 0xc85
 8005d9a:	4832      	ldr	r0, [pc, #200]	@ (8005e64 <RCCEx_PLLSAI2_Config+0x28c>)
 8005d9c:	f7fc f94e 	bl	800203c <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005da0:	4b31      	ldr	r3, [pc, #196]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6892      	ldr	r2, [r2, #8]
 8005db0:	0211      	lsls	r1, r2, #8
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68d2      	ldr	r2, [r2, #12]
 8005db6:	0912      	lsrs	r2, r2, #4
 8005db8:	0452      	lsls	r2, r2, #17
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	492a      	ldr	r1, [pc, #168]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	614b      	str	r3, [r1, #20]
 8005dc2:	e026      	b.n	8005e12 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d010      	beq.n	8005dee <RCCEx_PLLSAI2_Config+0x216>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d00c      	beq.n	8005dee <RCCEx_PLLSAI2_Config+0x216>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b06      	cmp	r3, #6
 8005dda:	d008      	beq.n	8005dee <RCCEx_PLLSAI2_Config+0x216>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d004      	beq.n	8005dee <RCCEx_PLLSAI2_Config+0x216>
 8005de4:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8005de8:	481e      	ldr	r0, [pc, #120]	@ (8005e64 <RCCEx_PLLSAI2_Config+0x28c>)
 8005dea:	f7fc f927 	bl	800203c <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dee:	4b1e      	ldr	r3, [pc, #120]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005df6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6892      	ldr	r2, [r2, #8]
 8005dfe:	0211      	lsls	r1, r2, #8
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6912      	ldr	r2, [r2, #16]
 8005e04:	0852      	lsrs	r2, r2, #1
 8005e06:	3a01      	subs	r2, #1
 8005e08:	0652      	lsls	r2, r2, #25
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	4916      	ldr	r1, [pc, #88]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e12:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a14      	ldr	r2, [pc, #80]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1e:	f7fc ffcf 	bl	8002dc0 <HAL_GetTick>
 8005e22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e24:	e009      	b.n	8005e3a <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e26:	f7fc ffcb 	bl	8002dc0 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d902      	bls.n	8005e3a <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	73fb      	strb	r3, [r7, #15]
          break;
 8005e38:	e005      	b.n	8005e46 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0ef      	beq.n	8005e26 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e4c:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	4904      	ldr	r1, [pc, #16]	@ (8005e68 <RCCEx_PLLSAI2_Config+0x290>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	0800be94 	.word	0x0800be94
 8005e68:	40021000 	.word	0x40021000

08005e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e1dd      	b.n	800623a <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a7b      	ldr	r2, [pc, #492]	@ (8006070 <HAL_SPI_Init+0x204>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_SPI_Init+0x3a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a79      	ldr	r2, [pc, #484]	@ (8006074 <HAL_SPI_Init+0x208>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_SPI_Init+0x3a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a78      	ldr	r2, [pc, #480]	@ (8006078 <HAL_SPI_Init+0x20c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_SPI_Init+0x3a>
 8005e9c:	f240 1147 	movw	r1, #327	@ 0x147
 8005ea0:	4876      	ldr	r0, [pc, #472]	@ (800607c <HAL_SPI_Init+0x210>)
 8005ea2:	f7fc f8cb 	bl	800203c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_SPI_Init+0x56>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eb6:	d004      	beq.n	8005ec2 <HAL_SPI_Init+0x56>
 8005eb8:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8005ebc:	486f      	ldr	r0, [pc, #444]	@ (800607c <HAL_SPI_Init+0x210>)
 8005ebe:	f7fc f8bd 	bl	800203c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_SPI_Init+0x7c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed2:	d009      	beq.n	8005ee8 <HAL_SPI_Init+0x7c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005edc:	d004      	beq.n	8005ee8 <HAL_SPI_Init+0x7c>
 8005ede:	f240 1149 	movw	r1, #329	@ 0x149
 8005ee2:	4866      	ldr	r0, [pc, #408]	@ (800607c <HAL_SPI_Init+0x210>)
 8005ee4:	f7fc f8aa 	bl	800203c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ef0:	d040      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005efa:	d03b      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8005f04:	d036      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f0e:	d031      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8005f18:	d02c      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005f22:	d027      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8005f2c:	d022      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f36:	d01d      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f40:	d018      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f4a:	d013      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005f54:	d00e      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5e:	d009      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f68:	d004      	beq.n	8005f74 <HAL_SPI_Init+0x108>
 8005f6a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8005f6e:	4843      	ldr	r0, [pc, #268]	@ (800607c <HAL_SPI_Init+0x210>)
 8005f70:	f7fc f864 	bl	800203c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f7c:	d00d      	beq.n	8005f9a <HAL_SPI_Init+0x12e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <HAL_SPI_Init+0x12e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f8e:	d004      	beq.n	8005f9a <HAL_SPI_Init+0x12e>
 8005f90:	f240 114b 	movw	r1, #331	@ 0x14b
 8005f94:	4839      	ldr	r0, [pc, #228]	@ (800607c <HAL_SPI_Init+0x210>)
 8005f96:	f7fc f851 	bl	800203c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d008      	beq.n	8005fb4 <HAL_SPI_Init+0x148>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d004      	beq.n	8005fb4 <HAL_SPI_Init+0x148>
 8005faa:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8005fae:	4833      	ldr	r0, [pc, #204]	@ (800607c <HAL_SPI_Init+0x210>)
 8005fb0:	f7fc f844 	bl	800203c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d020      	beq.n	8005ffe <HAL_SPI_Init+0x192>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d01c      	beq.n	8005ffe <HAL_SPI_Init+0x192>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d018      	beq.n	8005ffe <HAL_SPI_Init+0x192>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	2b18      	cmp	r3, #24
 8005fd2:	d014      	beq.n	8005ffe <HAL_SPI_Init+0x192>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d010      	beq.n	8005ffe <HAL_SPI_Init+0x192>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	2b28      	cmp	r3, #40	@ 0x28
 8005fe2:	d00c      	beq.n	8005ffe <HAL_SPI_Init+0x192>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	2b30      	cmp	r3, #48	@ 0x30
 8005fea:	d008      	beq.n	8005ffe <HAL_SPI_Init+0x192>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	2b38      	cmp	r3, #56	@ 0x38
 8005ff2:	d004      	beq.n	8005ffe <HAL_SPI_Init+0x192>
 8005ff4:	f240 114d 	movw	r1, #333	@ 0x14d
 8005ff8:	4820      	ldr	r0, [pc, #128]	@ (800607c <HAL_SPI_Init+0x210>)
 8005ffa:	f7fc f81f 	bl	800203c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_SPI_Init+0x1ac>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	2b80      	cmp	r3, #128	@ 0x80
 800600c:	d004      	beq.n	8006018 <HAL_SPI_Init+0x1ac>
 800600e:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8006012:	481a      	ldr	r0, [pc, #104]	@ (800607c <HAL_SPI_Init+0x210>)
 8006014:	f7fc f812 	bl	800203c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_SPI_Init+0x1c6>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	2b10      	cmp	r3, #16
 8006026:	d004      	beq.n	8006032 <HAL_SPI_Init+0x1c6>
 8006028:	f240 114f 	movw	r1, #335	@ 0x14f
 800602c:	4813      	ldr	r0, [pc, #76]	@ (800607c <HAL_SPI_Init+0x210>)
 800602e:	f7fc f805 	bl	800203c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d151      	bne.n	80060de <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <HAL_SPI_Init+0x1e8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d004      	beq.n	8006054 <HAL_SPI_Init+0x1e8>
 800604a:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800604e:	480b      	ldr	r0, [pc, #44]	@ (800607c <HAL_SPI_Init+0x210>)
 8006050:	f7fb fff4 	bl	800203c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d011      	beq.n	8006080 <HAL_SPI_Init+0x214>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d00d      	beq.n	8006080 <HAL_SPI_Init+0x214>
 8006064:	f240 1153 	movw	r1, #339	@ 0x153
 8006068:	4804      	ldr	r0, [pc, #16]	@ (800607c <HAL_SPI_Init+0x210>)
 800606a:	f7fb ffe7 	bl	800203c <assert_failed>
 800606e:	e007      	b.n	8006080 <HAL_SPI_Init+0x214>
 8006070:	40013000 	.word	0x40013000
 8006074:	40003800 	.word	0x40003800
 8006078:	40003c00 	.word	0x40003c00
 800607c:	0800bed0 	.word	0x0800bed0

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006088:	d125      	bne.n	80060d6 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d050      	beq.n	8006134 <HAL_SPI_Init+0x2c8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	2b08      	cmp	r3, #8
 8006098:	d04c      	beq.n	8006134 <HAL_SPI_Init+0x2c8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d048      	beq.n	8006134 <HAL_SPI_Init+0x2c8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	2b18      	cmp	r3, #24
 80060a8:	d044      	beq.n	8006134 <HAL_SPI_Init+0x2c8>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d040      	beq.n	8006134 <HAL_SPI_Init+0x2c8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	2b28      	cmp	r3, #40	@ 0x28
 80060b8:	d03c      	beq.n	8006134 <HAL_SPI_Init+0x2c8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	2b30      	cmp	r3, #48	@ 0x30
 80060c0:	d038      	beq.n	8006134 <HAL_SPI_Init+0x2c8>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	2b38      	cmp	r3, #56	@ 0x38
 80060c8:	d034      	beq.n	8006134 <HAL_SPI_Init+0x2c8>
 80060ca:	f240 1157 	movw	r1, #343	@ 0x157
 80060ce:	485d      	ldr	r0, [pc, #372]	@ (8006244 <HAL_SPI_Init+0x3d8>)
 80060d0:	f7fb ffb4 	bl	800203c <assert_failed>
 80060d4:	e02e      	b.n	8006134 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	61da      	str	r2, [r3, #28]
 80060dc:	e02a      	b.n	8006134 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d020      	beq.n	8006128 <HAL_SPI_Init+0x2bc>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d01c      	beq.n	8006128 <HAL_SPI_Init+0x2bc>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d018      	beq.n	8006128 <HAL_SPI_Init+0x2bc>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	2b18      	cmp	r3, #24
 80060fc:	d014      	beq.n	8006128 <HAL_SPI_Init+0x2bc>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	2b20      	cmp	r3, #32
 8006104:	d010      	beq.n	8006128 <HAL_SPI_Init+0x2bc>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	2b28      	cmp	r3, #40	@ 0x28
 800610c:	d00c      	beq.n	8006128 <HAL_SPI_Init+0x2bc>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	2b30      	cmp	r3, #48	@ 0x30
 8006114:	d008      	beq.n	8006128 <HAL_SPI_Init+0x2bc>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	2b38      	cmp	r3, #56	@ 0x38
 800611c:	d004      	beq.n	8006128 <HAL_SPI_Init+0x2bc>
 800611e:	f240 1161 	movw	r1, #353	@ 0x161
 8006122:	4848      	ldr	r0, [pc, #288]	@ (8006244 <HAL_SPI_Init+0x3d8>)
 8006124:	f7fb ff8a 	bl	800203c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fb ffb8 	bl	80020c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800616a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006174:	d902      	bls.n	800617c <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	e002      	b.n	8006182 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800617c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006180:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800618a:	d007      	beq.n	800619c <HAL_SPI_Init+0x330>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006194:	d002      	beq.n	800619c <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061de:	ea42 0103 	orr.w	r1, r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	0c1b      	lsrs	r3, r3, #16
 80061f8:	f003 0204 	and.w	r2, r3, #4
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006218:	ea42 0103 	orr.w	r1, r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	0800bed0 	.word	0x0800bed0

08006248 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <HAL_SPI_TransmitReceive_DMA+0x20>
 800625e:	f640 0172 	movw	r1, #2162	@ 0x872
 8006262:	487f      	ldr	r0, [pc, #508]	@ (8006460 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006264:	f7fb feea 	bl	800203c <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <HAL_SPI_TransmitReceive_DMA+0x32>
 8006270:	f640 0173 	movw	r1, #2163	@ 0x873
 8006274:	487a      	ldr	r0, [pc, #488]	@ (8006460 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006276:	f7fb fee1 	bl	800203c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <HAL_SPI_TransmitReceive_DMA+0x44>
 8006282:	f640 0176 	movw	r1, #2166	@ 0x876
 8006286:	4876      	ldr	r0, [pc, #472]	@ (8006460 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006288:	f7fb fed8 	bl	800203c <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006292:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d00c      	beq.n	80062ba <HAL_SPI_TransmitReceive_DMA+0x72>
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062a6:	d106      	bne.n	80062b6 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <HAL_SPI_TransmitReceive_DMA+0x6e>
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d001      	beq.n	80062ba <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
 80062b8:	e15f      	b.n	800657a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_SPI_TransmitReceive_DMA+0x84>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_SPI_TransmitReceive_DMA+0x84>
 80062c6:	887b      	ldrh	r3, [r7, #2]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e154      	b.n	800657a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_SPI_TransmitReceive_DMA+0x96>
 80062da:	2302      	movs	r3, #2
 80062dc:	e14d      	b.n	800657a <HAL_SPI_TransmitReceive_DMA+0x332>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d003      	beq.n	80062fa <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2205      	movs	r2, #5
 80062f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	887a      	ldrh	r2, [r7, #2]
 800630a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	887a      	ldrh	r2, [r7, #2]
 800631c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	887a      	ldrh	r2, [r7, #2]
 8006324:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8006342:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800634c:	d908      	bls.n	8006360 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800635c:	605a      	str	r2, [r3, #4]
 800635e:	e06f      	b.n	8006440 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800636e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800637a:	d126      	bne.n	80063ca <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10f      	bne.n	80063a8 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006396:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800639c:	b29b      	uxth	r3, r3
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063a6:	e010      	b.n	80063ca <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3301      	adds	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d4:	d134      	bne.n	8006440 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063e4:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d111      	bne.n	800641a <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006404:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800640c:	b29b      	uxth	r3, r3
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006418:	e012      	b.n	8006440 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006428:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006430:	b29b      	uxth	r3, r3
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	b29b      	uxth	r3, r3
 8006436:	3301      	adds	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b04      	cmp	r3, #4
 800644a:	d10f      	bne.n	800646c <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006450:	4a04      	ldr	r2, [pc, #16]	@ (8006464 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8006452:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006458:	4a03      	ldr	r2, [pc, #12]	@ (8006468 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800645a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800645c:	e00e      	b.n	800647c <HAL_SPI_TransmitReceive_DMA+0x234>
 800645e:	bf00      	nop
 8006460:	0800bed0 	.word	0x0800bed0
 8006464:	08006935 	.word	0x08006935
 8006468:	080067fd 	.word	0x080067fd
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006470:	4a44      	ldr	r2, [pc, #272]	@ (8006584 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8006472:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006478:	4a43      	ldr	r2, [pc, #268]	@ (8006588 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800647a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006480:	4a42      	ldr	r2, [pc, #264]	@ (800658c <HAL_SPI_TransmitReceive_DMA+0x344>)
 8006482:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006488:	2200      	movs	r2, #0
 800648a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	4619      	mov	r1, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80064a6:	f7fc ff8f 	bl	80033c8 <HAL_DMA_Start_IT>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b4:	f043 0210 	orr.w	r2, r3, #16
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e058      	b.n	800657a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e4:	2200      	movs	r2, #0
 80064e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ec:	2200      	movs	r2, #0
 80064ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f4:	2200      	movs	r2, #0
 80064f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006500:	4619      	mov	r1, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006510:	f7fc ff5a 	bl	80033c8 <HAL_DMA_Start_IT>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00b      	beq.n	8006532 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651e:	f043 0210 	orr.w	r2, r3, #16
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e023      	b.n	800657a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	d007      	beq.n	8006550 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800654e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0220 	orr.w	r2, r2, #32
 8006566:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0202 	orr.w	r2, r2, #2
 8006576:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	08006951 	.word	0x08006951
 8006588:	080068a5 	.word	0x080068a5
 800658c:	0800696d 	.word	0x0800696d

08006590 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	099b      	lsrs	r3, r3, #6
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10f      	bne.n	80065d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	099b      	lsrs	r3, r3, #6
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
    return;
 80065d2:	e0d7      	b.n	8006784 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <HAL_SPI_IRQHandler+0x66>
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	09db      	lsrs	r3, r3, #7
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
    return;
 80065f4:	e0c6      	b.n	8006784 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10c      	bne.n	800661c <HAL_SPI_IRQHandler+0x8c>
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	099b      	lsrs	r3, r3, #6
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	0a1b      	lsrs	r3, r3, #8
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 80b4 	beq.w	8006784 <HAL_SPI_IRQHandler+0x1f4>
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80ad 	beq.w	8006784 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	099b      	lsrs	r3, r3, #6
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d023      	beq.n	800667e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b03      	cmp	r3, #3
 8006640:	d011      	beq.n	8006666 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006646:	f043 0204 	orr.w	r2, r3, #4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	e00b      	b.n	800667e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006666:	2300      	movs	r3, #0
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	693b      	ldr	r3, [r7, #16]
        return;
 800667c:	e082      	b.n	8006784 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d014      	beq.n	80066b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800668e:	f043 0201 	orr.w	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00c      	beq.n	80066da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c4:	f043 0208 	orr.w	r2, r3, #8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066cc:	2300      	movs	r3, #0
 80066ce:	60bb      	str	r3, [r7, #8]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	60bb      	str	r3, [r7, #8]
 80066d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d04f      	beq.n	8006782 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <HAL_SPI_IRQHandler+0x17e>
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d034      	beq.n	8006778 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0203 	bic.w	r2, r2, #3
 800671c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672a:	4a18      	ldr	r2, [pc, #96]	@ (800678c <HAL_SPI_IRQHandler+0x1fc>)
 800672c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	4618      	mov	r0, r3
 8006734:	f7fc feb6 	bl	80034a4 <HAL_DMA_Abort_IT>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006742:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674e:	2b00      	cmp	r3, #0
 8006750:	d016      	beq.n	8006780 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006756:	4a0d      	ldr	r2, [pc, #52]	@ (800678c <HAL_SPI_IRQHandler+0x1fc>)
 8006758:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675e:	4618      	mov	r0, r3
 8006760:	f7fc fea0 	bl	80034a4 <HAL_DMA_Abort_IT>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006776:	e003      	b.n	8006780 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f827 	bl	80067cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800677e:	e000      	b.n	8006782 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006780:	bf00      	nop
    return;
 8006782:	bf00      	nop
  }
}
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	080069ad 	.word	0x080069ad

08006790 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067ee:	b2db      	uxtb	r3, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006808:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800680a:	f7fc fad9 	bl	8002dc0 <HAL_GetTick>
 800680e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b20      	cmp	r3, #32
 800681c:	d03c      	beq.n	8006898 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0220 	bic.w	r2, r2, #32
 800682c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10d      	bne.n	8006852 <SPI_DMAReceiveCplt+0x56>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800683e:	d108      	bne.n	8006852 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0203 	bic.w	r2, r2, #3
 800684e:	605a      	str	r2, [r3, #4]
 8006850:	e007      	b.n	8006862 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	2164      	movs	r1, #100	@ 0x64
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f9d4 	bl	8006c14 <SPI_EndRxTransaction>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7ff ff9b 	bl	80067cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006896:	e002      	b.n	800689e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7ff ff79 	bl	8006790 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068b2:	f7fc fa85 	bl	8002dc0 <HAL_GetTick>
 80068b6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d030      	beq.n	8006928 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0220 	bic.w	r2, r2, #32
 80068d4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	2164      	movs	r1, #100	@ 0x64
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f9f2 	bl	8006cc4 <SPI_EndRxTxTransaction>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0203 	bic.w	r2, r2, #3
 8006900:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff ff53 	bl	80067cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006926:	e002      	b.n	800692e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7fb fb63 	bl	8001ff4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff ff2e 	bl	80067a4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff ff2a 	bl	80067b8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0203 	bic.w	r2, r2, #3
 8006988:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800698e:	f043 0210 	orr.w	r2, r3, #16
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff ff14 	bl	80067cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff feff 	bl	80067cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069e8:	f7fc f9ea 	bl	8002dc0 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069f8:	f7fc f9e2 	bl	8002dc0 <HAL_GetTick>
 80069fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069fe:	4b39      	ldr	r3, [pc, #228]	@ (8006ae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	015b      	lsls	r3, r3, #5
 8006a04:	0d1b      	lsrs	r3, r3, #20
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	fb02 f303 	mul.w	r3, r2, r3
 8006a0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a0e:	e054      	b.n	8006aba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	d050      	beq.n	8006aba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a18:	f7fc f9d2 	bl	8002dc0 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d902      	bls.n	8006a2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d13d      	bne.n	8006aaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a46:	d111      	bne.n	8006a6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a50:	d004      	beq.n	8006a5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a5a:	d107      	bne.n	8006a6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a74:	d10f      	bne.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e017      	b.n	8006ada <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	bf0c      	ite	eq
 8006aca:	2301      	moveq	r3, #1
 8006acc:	2300      	movne	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d19b      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000010 	.word	0x20000010

08006ae8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	@ 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006afa:	f7fc f961 	bl	8002dc0 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	4413      	add	r3, r2
 8006b08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006b0a:	f7fc f959 	bl	8002dc0 <HAL_GetTick>
 8006b0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b18:	4b3d      	ldr	r3, [pc, #244]	@ (8006c10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	00da      	lsls	r2, r3, #3
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	0d1b      	lsrs	r3, r3, #20
 8006b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b30:	e060      	b.n	8006bf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b38:	d107      	bne.n	8006b4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b50:	d050      	beq.n	8006bf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b52:	f7fc f935 	bl	8002dc0 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d902      	bls.n	8006b68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d13d      	bne.n	8006be4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b80:	d111      	bne.n	8006ba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b8a:	d004      	beq.n	8006b96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b94:	d107      	bne.n	8006ba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ba4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bae:	d10f      	bne.n	8006bd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e010      	b.n	8006c06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d196      	bne.n	8006b32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3728      	adds	r7, #40	@ 0x28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000010 	.word	0x20000010

08006c14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c28:	d111      	bne.n	8006c4e <SPI_EndRxTransaction+0x3a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c32:	d004      	beq.n	8006c3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c3c:	d107      	bne.n	8006c4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c4c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2200      	movs	r2, #0
 8006c56:	2180      	movs	r1, #128	@ 0x80
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f7ff febd 	bl	80069d8 <SPI_WaitFlagStateUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d007      	beq.n	8006c74 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c68:	f043 0220 	orr.w	r2, r3, #32
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e023      	b.n	8006cbc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c7c:	d11d      	bne.n	8006cba <SPI_EndRxTransaction+0xa6>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c86:	d004      	beq.n	8006c92 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c90:	d113      	bne.n	8006cba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff ff22 	bl	8006ae8 <SPI_WaitFifoStateUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e000      	b.n	8006cbc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff ff03 	bl	8006ae8 <SPI_WaitFifoStateUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e027      	b.n	8006d48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2180      	movs	r1, #128	@ 0x80
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff fe68 	bl	80069d8 <SPI_WaitFlagStateUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e014      	b.n	8006d48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fedc 	bl	8006ae8 <SPI_WaitFifoStateUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d3a:	f043 0220 	orr.w	r2, r3, #32
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e000      	b.n	8006d48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e0e6      	b.n	8006f30 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a74      	ldr	r2, [pc, #464]	@ (8006f38 <HAL_TIM_Base_Init+0x1e8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d036      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d74:	d031      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a70      	ldr	r2, [pc, #448]	@ (8006f3c <HAL_TIM_Base_Init+0x1ec>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d02c      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a6e      	ldr	r2, [pc, #440]	@ (8006f40 <HAL_TIM_Base_Init+0x1f0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d027      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8006f44 <HAL_TIM_Base_Init+0x1f4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d022      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a6b      	ldr	r2, [pc, #428]	@ (8006f48 <HAL_TIM_Base_Init+0x1f8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d01d      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a6a      	ldr	r2, [pc, #424]	@ (8006f4c <HAL_TIM_Base_Init+0x1fc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d018      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a68      	ldr	r2, [pc, #416]	@ (8006f50 <HAL_TIM_Base_Init+0x200>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a67      	ldr	r2, [pc, #412]	@ (8006f54 <HAL_TIM_Base_Init+0x204>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a65      	ldr	r2, [pc, #404]	@ (8006f58 <HAL_TIM_Base_Init+0x208>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a64      	ldr	r2, [pc, #400]	@ (8006f5c <HAL_TIM_Base_Init+0x20c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_TIM_Base_Init+0x8a>
 8006dd0:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006dd4:	4862      	ldr	r0, [pc, #392]	@ (8006f60 <HAL_TIM_Base_Init+0x210>)
 8006dd6:	f7fb f931 	bl	800203c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d014      	beq.n	8006e0c <HAL_TIM_Base_Init+0xbc>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b10      	cmp	r3, #16
 8006de8:	d010      	beq.n	8006e0c <HAL_TIM_Base_Init+0xbc>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d00c      	beq.n	8006e0c <HAL_TIM_Base_Init+0xbc>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b40      	cmp	r3, #64	@ 0x40
 8006df8:	d008      	beq.n	8006e0c <HAL_TIM_Base_Init+0xbc>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b60      	cmp	r3, #96	@ 0x60
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_Base_Init+0xbc>
 8006e02:	f240 1117 	movw	r1, #279	@ 0x117
 8006e06:	4856      	ldr	r0, [pc, #344]	@ (8006f60 <HAL_TIM_Base_Init+0x210>)
 8006e08:	f7fb f918 	bl	800203c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00e      	beq.n	8006e32 <HAL_TIM_Base_Init+0xe2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e1c:	d009      	beq.n	8006e32 <HAL_TIM_Base_Init+0xe2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e26:	d004      	beq.n	8006e32 <HAL_TIM_Base_Init+0xe2>
 8006e28:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006e2c:	484c      	ldr	r0, [pc, #304]	@ (8006f60 <HAL_TIM_Base_Init+0x210>)
 8006e2e:	f7fb f905 	bl	800203c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3a:	d004      	beq.n	8006e46 <HAL_TIM_Base_Init+0xf6>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a40      	ldr	r2, [pc, #256]	@ (8006f44 <HAL_TIM_Base_Init+0x1f4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d107      	bne.n	8006e56 <HAL_TIM_Base_Init+0x106>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bf14      	ite	ne
 8006e4e:	2301      	movne	r3, #1
 8006e50:	2300      	moveq	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	e00e      	b.n	8006e74 <HAL_TIM_Base_Init+0x124>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d006      	beq.n	8006e6c <HAL_TIM_Base_Init+0x11c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e66:	d201      	bcs.n	8006e6c <HAL_TIM_Base_Init+0x11c>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <HAL_TIM_Base_Init+0x11e>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <HAL_TIM_Base_Init+0x132>
 8006e78:	f240 1119 	movw	r1, #281	@ 0x119
 8006e7c:	4838      	ldr	r0, [pc, #224]	@ (8006f60 <HAL_TIM_Base_Init+0x210>)
 8006e7e:	f7fb f8dd 	bl	800203c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <HAL_TIM_Base_Init+0x14c>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	2b80      	cmp	r3, #128	@ 0x80
 8006e90:	d004      	beq.n	8006e9c <HAL_TIM_Base_Init+0x14c>
 8006e92:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8006e96:	4832      	ldr	r0, [pc, #200]	@ (8006f60 <HAL_TIM_Base_Init+0x210>)
 8006e98:	f7fb f8d0 	bl	800203c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7fb fdb9 	bl	8002a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f001 fd5b 	bl	8008984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40000400 	.word	0x40000400
 8006f40:	40000800 	.word	0x40000800
 8006f44:	40000c00 	.word	0x40000c00
 8006f48:	40001000 	.word	0x40001000
 8006f4c:	40001400 	.word	0x40001400
 8006f50:	40013400 	.word	0x40013400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400
 8006f5c:	40014800 	.word	0x40014800
 8006f60:	0800bf08 	.word	0x0800bf08

08006f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e0e6      	b.n	8007144 <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a74      	ldr	r2, [pc, #464]	@ (800714c <HAL_TIM_PWM_Init+0x1e8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d036      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f88:	d031      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a70      	ldr	r2, [pc, #448]	@ (8007150 <HAL_TIM_PWM_Init+0x1ec>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d02c      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a6e      	ldr	r2, [pc, #440]	@ (8007154 <HAL_TIM_PWM_Init+0x1f0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d027      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a6d      	ldr	r2, [pc, #436]	@ (8007158 <HAL_TIM_PWM_Init+0x1f4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d022      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a6b      	ldr	r2, [pc, #428]	@ (800715c <HAL_TIM_PWM_Init+0x1f8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01d      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a6a      	ldr	r2, [pc, #424]	@ (8007160 <HAL_TIM_PWM_Init+0x1fc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d018      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a68      	ldr	r2, [pc, #416]	@ (8007164 <HAL_TIM_PWM_Init+0x200>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a67      	ldr	r2, [pc, #412]	@ (8007168 <HAL_TIM_PWM_Init+0x204>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00e      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a65      	ldr	r2, [pc, #404]	@ (800716c <HAL_TIM_PWM_Init+0x208>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a64      	ldr	r2, [pc, #400]	@ (8007170 <HAL_TIM_PWM_Init+0x20c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d004      	beq.n	8006fee <HAL_TIM_PWM_Init+0x8a>
 8006fe4:	f240 5133 	movw	r1, #1331	@ 0x533
 8006fe8:	4862      	ldr	r0, [pc, #392]	@ (8007174 <HAL_TIM_PWM_Init+0x210>)
 8006fea:	f7fb f827 	bl	800203c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d014      	beq.n	8007020 <HAL_TIM_PWM_Init+0xbc>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d010      	beq.n	8007020 <HAL_TIM_PWM_Init+0xbc>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b20      	cmp	r3, #32
 8007004:	d00c      	beq.n	8007020 <HAL_TIM_PWM_Init+0xbc>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b40      	cmp	r3, #64	@ 0x40
 800700c:	d008      	beq.n	8007020 <HAL_TIM_PWM_Init+0xbc>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	2b60      	cmp	r3, #96	@ 0x60
 8007014:	d004      	beq.n	8007020 <HAL_TIM_PWM_Init+0xbc>
 8007016:	f240 5134 	movw	r1, #1332	@ 0x534
 800701a:	4856      	ldr	r0, [pc, #344]	@ (8007174 <HAL_TIM_PWM_Init+0x210>)
 800701c:	f7fb f80e 	bl	800203c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00e      	beq.n	8007046 <HAL_TIM_PWM_Init+0xe2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007030:	d009      	beq.n	8007046 <HAL_TIM_PWM_Init+0xe2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800703a:	d004      	beq.n	8007046 <HAL_TIM_PWM_Init+0xe2>
 800703c:	f240 5135 	movw	r1, #1333	@ 0x535
 8007040:	484c      	ldr	r0, [pc, #304]	@ (8007174 <HAL_TIM_PWM_Init+0x210>)
 8007042:	f7fa fffb 	bl	800203c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704e:	d004      	beq.n	800705a <HAL_TIM_PWM_Init+0xf6>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a40      	ldr	r2, [pc, #256]	@ (8007158 <HAL_TIM_PWM_Init+0x1f4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d107      	bne.n	800706a <HAL_TIM_PWM_Init+0x106>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bf14      	ite	ne
 8007062:	2301      	movne	r3, #1
 8007064:	2300      	moveq	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	e00e      	b.n	8007088 <HAL_TIM_PWM_Init+0x124>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d006      	beq.n	8007080 <HAL_TIM_PWM_Init+0x11c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800707a:	d201      	bcs.n	8007080 <HAL_TIM_PWM_Init+0x11c>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_TIM_PWM_Init+0x11e>
 8007080:	2300      	movs	r3, #0
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d104      	bne.n	8007096 <HAL_TIM_PWM_Init+0x132>
 800708c:	f240 5136 	movw	r1, #1334	@ 0x536
 8007090:	4838      	ldr	r0, [pc, #224]	@ (8007174 <HAL_TIM_PWM_Init+0x210>)
 8007092:	f7fa ffd3 	bl	800203c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d008      	beq.n	80070b0 <HAL_TIM_PWM_Init+0x14c>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	2b80      	cmp	r3, #128	@ 0x80
 80070a4:	d004      	beq.n	80070b0 <HAL_TIM_PWM_Init+0x14c>
 80070a6:	f240 5137 	movw	r1, #1335	@ 0x537
 80070aa:	4832      	ldr	r0, [pc, #200]	@ (8007174 <HAL_TIM_PWM_Init+0x210>)
 80070ac:	f7fa ffc6 	bl	800203c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f857 	bl	8007178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f001 fc51 	bl	8008984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40012c00 	.word	0x40012c00
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40001000 	.word	0x40001000
 8007160:	40001400 	.word	0x40001400
 8007164:	40013400 	.word	0x40013400
 8007168:	40014000 	.word	0x40014000
 800716c:	40014400 	.word	0x40014400
 8007170:	40014800 	.word	0x40014800
 8007174:	0800bf08 	.word	0x0800bf08

08007178 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a85      	ldr	r2, [pc, #532]	@ (80073b0 <HAL_TIM_PWM_Start+0x224>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d115      	bne.n	80071cc <HAL_TIM_PWM_Start+0x40>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 808d 	beq.w	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	f000 8089 	beq.w	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	f000 8085 	beq.w	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b0c      	cmp	r3, #12
 80071bc:	f000 8081 	beq.w	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b10      	cmp	r3, #16
 80071c4:	d07d      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b14      	cmp	r3, #20
 80071ca:	d07a      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071d4:	d10b      	bne.n	80071ee <HAL_TIM_PWM_Start+0x62>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d072      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d06f      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d06c      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b0c      	cmp	r3, #12
 80071ec:	d069      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a70      	ldr	r2, [pc, #448]	@ (80073b4 <HAL_TIM_PWM_Start+0x228>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d10b      	bne.n	8007210 <HAL_TIM_PWM_Start+0x84>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d061      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b04      	cmp	r3, #4
 8007202:	d05e      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b08      	cmp	r3, #8
 8007208:	d05b      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b0c      	cmp	r3, #12
 800720e:	d058      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a68      	ldr	r2, [pc, #416]	@ (80073b8 <HAL_TIM_PWM_Start+0x22c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d10b      	bne.n	8007232 <HAL_TIM_PWM_Start+0xa6>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d050      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b04      	cmp	r3, #4
 8007224:	d04d      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b08      	cmp	r3, #8
 800722a:	d04a      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b0c      	cmp	r3, #12
 8007230:	d047      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a61      	ldr	r2, [pc, #388]	@ (80073bc <HAL_TIM_PWM_Start+0x230>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d10b      	bne.n	8007254 <HAL_TIM_PWM_Start+0xc8>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d03f      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d03c      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b08      	cmp	r3, #8
 800724c:	d039      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b0c      	cmp	r3, #12
 8007252:	d036      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a59      	ldr	r2, [pc, #356]	@ (80073c0 <HAL_TIM_PWM_Start+0x234>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d111      	bne.n	8007282 <HAL_TIM_PWM_Start+0xf6>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d02e      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b04      	cmp	r3, #4
 8007268:	d02b      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b08      	cmp	r3, #8
 800726e:	d028      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d025      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b10      	cmp	r3, #16
 800727a:	d022      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b14      	cmp	r3, #20
 8007280:	d01f      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a4f      	ldr	r2, [pc, #316]	@ (80073c4 <HAL_TIM_PWM_Start+0x238>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d105      	bne.n	8007298 <HAL_TIM_PWM_Start+0x10c>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d017      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b04      	cmp	r3, #4
 8007296:	d014      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a4a      	ldr	r2, [pc, #296]	@ (80073c8 <HAL_TIM_PWM_Start+0x23c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d102      	bne.n	80072a8 <HAL_TIM_PWM_Start+0x11c>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00c      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a47      	ldr	r2, [pc, #284]	@ (80073cc <HAL_TIM_PWM_Start+0x240>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d102      	bne.n	80072b8 <HAL_TIM_PWM_Start+0x12c>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <HAL_TIM_PWM_Start+0x136>
 80072b8:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 80072bc:	4844      	ldr	r0, [pc, #272]	@ (80073d0 <HAL_TIM_PWM_Start+0x244>)
 80072be:	f7fa febd 	bl	800203c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <HAL_TIM_PWM_Start+0x150>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	bf14      	ite	ne
 80072d4:	2301      	movne	r3, #1
 80072d6:	2300      	moveq	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	e03c      	b.n	8007356 <HAL_TIM_PWM_Start+0x1ca>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d109      	bne.n	80072f6 <HAL_TIM_PWM_Start+0x16a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	bf14      	ite	ne
 80072ee:	2301      	movne	r3, #1
 80072f0:	2300      	moveq	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	e02f      	b.n	8007356 <HAL_TIM_PWM_Start+0x1ca>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d109      	bne.n	8007310 <HAL_TIM_PWM_Start+0x184>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	bf14      	ite	ne
 8007308:	2301      	movne	r3, #1
 800730a:	2300      	moveq	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	e022      	b.n	8007356 <HAL_TIM_PWM_Start+0x1ca>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b0c      	cmp	r3, #12
 8007314:	d109      	bne.n	800732a <HAL_TIM_PWM_Start+0x19e>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b01      	cmp	r3, #1
 8007320:	bf14      	ite	ne
 8007322:	2301      	movne	r3, #1
 8007324:	2300      	moveq	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	e015      	b.n	8007356 <HAL_TIM_PWM_Start+0x1ca>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b10      	cmp	r3, #16
 800732e:	d109      	bne.n	8007344 <HAL_TIM_PWM_Start+0x1b8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b01      	cmp	r3, #1
 800733a:	bf14      	ite	ne
 800733c:	2301      	movne	r3, #1
 800733e:	2300      	moveq	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	e008      	b.n	8007356 <HAL_TIM_PWM_Start+0x1ca>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b01      	cmp	r3, #1
 800734e:	bf14      	ite	ne
 8007350:	2301      	movne	r3, #1
 8007352:	2300      	moveq	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e0af      	b.n	80074be <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <HAL_TIM_PWM_Start+0x1e2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800736c:	e036      	b.n	80073dc <HAL_TIM_PWM_Start+0x250>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b04      	cmp	r3, #4
 8007372:	d104      	bne.n	800737e <HAL_TIM_PWM_Start+0x1f2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800737c:	e02e      	b.n	80073dc <HAL_TIM_PWM_Start+0x250>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d104      	bne.n	800738e <HAL_TIM_PWM_Start+0x202>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800738c:	e026      	b.n	80073dc <HAL_TIM_PWM_Start+0x250>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b0c      	cmp	r3, #12
 8007392:	d104      	bne.n	800739e <HAL_TIM_PWM_Start+0x212>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800739c:	e01e      	b.n	80073dc <HAL_TIM_PWM_Start+0x250>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d117      	bne.n	80073d4 <HAL_TIM_PWM_Start+0x248>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073ac:	e016      	b.n	80073dc <HAL_TIM_PWM_Start+0x250>
 80073ae:	bf00      	nop
 80073b0:	40012c00 	.word	0x40012c00
 80073b4:	40000400 	.word	0x40000400
 80073b8:	40000800 	.word	0x40000800
 80073bc:	40000c00 	.word	0x40000c00
 80073c0:	40013400 	.word	0x40013400
 80073c4:	40014000 	.word	0x40014000
 80073c8:	40014400 	.word	0x40014400
 80073cc:	40014800 	.word	0x40014800
 80073d0:	0800bf08 	.word	0x0800bf08
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2201      	movs	r2, #1
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 ff6d 	bl	80092c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a36      	ldr	r2, [pc, #216]	@ (80074c8 <HAL_TIM_PWM_Start+0x33c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d013      	beq.n	800741c <HAL_TIM_PWM_Start+0x290>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a34      	ldr	r2, [pc, #208]	@ (80074cc <HAL_TIM_PWM_Start+0x340>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00e      	beq.n	800741c <HAL_TIM_PWM_Start+0x290>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a33      	ldr	r2, [pc, #204]	@ (80074d0 <HAL_TIM_PWM_Start+0x344>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d009      	beq.n	800741c <HAL_TIM_PWM_Start+0x290>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a31      	ldr	r2, [pc, #196]	@ (80074d4 <HAL_TIM_PWM_Start+0x348>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d004      	beq.n	800741c <HAL_TIM_PWM_Start+0x290>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a30      	ldr	r2, [pc, #192]	@ (80074d8 <HAL_TIM_PWM_Start+0x34c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d101      	bne.n	8007420 <HAL_TIM_PWM_Start+0x294>
 800741c:	2301      	movs	r3, #1
 800741e:	e000      	b.n	8007422 <HAL_TIM_PWM_Start+0x296>
 8007420:	2300      	movs	r3, #0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007434:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a23      	ldr	r2, [pc, #140]	@ (80074c8 <HAL_TIM_PWM_Start+0x33c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d01d      	beq.n	800747c <HAL_TIM_PWM_Start+0x2f0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007448:	d018      	beq.n	800747c <HAL_TIM_PWM_Start+0x2f0>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a23      	ldr	r2, [pc, #140]	@ (80074dc <HAL_TIM_PWM_Start+0x350>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d013      	beq.n	800747c <HAL_TIM_PWM_Start+0x2f0>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a21      	ldr	r2, [pc, #132]	@ (80074e0 <HAL_TIM_PWM_Start+0x354>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00e      	beq.n	800747c <HAL_TIM_PWM_Start+0x2f0>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a20      	ldr	r2, [pc, #128]	@ (80074e4 <HAL_TIM_PWM_Start+0x358>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d009      	beq.n	800747c <HAL_TIM_PWM_Start+0x2f0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a17      	ldr	r2, [pc, #92]	@ (80074cc <HAL_TIM_PWM_Start+0x340>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_TIM_PWM_Start+0x2f0>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a16      	ldr	r2, [pc, #88]	@ (80074d0 <HAL_TIM_PWM_Start+0x344>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d115      	bne.n	80074a8 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	4b19      	ldr	r3, [pc, #100]	@ (80074e8 <HAL_TIM_PWM_Start+0x35c>)
 8007484:	4013      	ands	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b06      	cmp	r3, #6
 800748c:	d015      	beq.n	80074ba <HAL_TIM_PWM_Start+0x32e>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007494:	d011      	beq.n	80074ba <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f042 0201 	orr.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a6:	e008      	b.n	80074ba <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e000      	b.n	80074bc <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40013400 	.word	0x40013400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800
 80074dc:	40000400 	.word	0x40000400
 80074e0:	40000800 	.word	0x40000800
 80074e4:	40000c00 	.word	0x40000c00
 80074e8:	00010007 	.word	0x00010007

080074ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a8d      	ldr	r2, [pc, #564]	@ (8007730 <HAL_TIM_PWM_Stop+0x244>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d115      	bne.n	800752c <HAL_TIM_PWM_Stop+0x40>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 808d 	beq.w	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b04      	cmp	r3, #4
 800750c:	f000 8089 	beq.w	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b08      	cmp	r3, #8
 8007514:	f000 8085 	beq.w	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b0c      	cmp	r3, #12
 800751c:	f000 8081 	beq.w	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b10      	cmp	r3, #16
 8007524:	d07d      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b14      	cmp	r3, #20
 800752a:	d07a      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007534:	d10b      	bne.n	800754e <HAL_TIM_PWM_Stop+0x62>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d072      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b04      	cmp	r3, #4
 8007540:	d06f      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b08      	cmp	r3, #8
 8007546:	d06c      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d069      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a78      	ldr	r2, [pc, #480]	@ (8007734 <HAL_TIM_PWM_Stop+0x248>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d10b      	bne.n	8007570 <HAL_TIM_PWM_Stop+0x84>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d061      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b04      	cmp	r3, #4
 8007562:	d05e      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b08      	cmp	r3, #8
 8007568:	d05b      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b0c      	cmp	r3, #12
 800756e:	d058      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a70      	ldr	r2, [pc, #448]	@ (8007738 <HAL_TIM_PWM_Stop+0x24c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d10b      	bne.n	8007592 <HAL_TIM_PWM_Stop+0xa6>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d050      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b04      	cmp	r3, #4
 8007584:	d04d      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b08      	cmp	r3, #8
 800758a:	d04a      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b0c      	cmp	r3, #12
 8007590:	d047      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a69      	ldr	r2, [pc, #420]	@ (800773c <HAL_TIM_PWM_Stop+0x250>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d10b      	bne.n	80075b4 <HAL_TIM_PWM_Stop+0xc8>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d03f      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d03c      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d039      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b0c      	cmp	r3, #12
 80075b2:	d036      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a61      	ldr	r2, [pc, #388]	@ (8007740 <HAL_TIM_PWM_Stop+0x254>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d111      	bne.n	80075e2 <HAL_TIM_PWM_Stop+0xf6>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02e      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d02b      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d028      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b0c      	cmp	r3, #12
 80075d4:	d025      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b10      	cmp	r3, #16
 80075da:	d022      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b14      	cmp	r3, #20
 80075e0:	d01f      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a57      	ldr	r2, [pc, #348]	@ (8007744 <HAL_TIM_PWM_Stop+0x258>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d105      	bne.n	80075f8 <HAL_TIM_PWM_Stop+0x10c>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d017      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d014      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a52      	ldr	r2, [pc, #328]	@ (8007748 <HAL_TIM_PWM_Stop+0x25c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d102      	bne.n	8007608 <HAL_TIM_PWM_Stop+0x11c>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00c      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a4f      	ldr	r2, [pc, #316]	@ (800774c <HAL_TIM_PWM_Stop+0x260>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d102      	bne.n	8007618 <HAL_TIM_PWM_Stop+0x12c>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <HAL_TIM_PWM_Stop+0x136>
 8007618:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800761c:	484c      	ldr	r0, [pc, #304]	@ (8007750 <HAL_TIM_PWM_Stop+0x264>)
 800761e:	f7fa fd0d 	bl	800203c <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f001 fe4a 	bl	80092c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a3e      	ldr	r2, [pc, #248]	@ (8007730 <HAL_TIM_PWM_Stop+0x244>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_TIM_PWM_Stop+0x176>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a40      	ldr	r2, [pc, #256]	@ (8007740 <HAL_TIM_PWM_Stop+0x254>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00e      	beq.n	8007662 <HAL_TIM_PWM_Stop+0x176>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a3e      	ldr	r2, [pc, #248]	@ (8007744 <HAL_TIM_PWM_Stop+0x258>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIM_PWM_Stop+0x176>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a3d      	ldr	r2, [pc, #244]	@ (8007748 <HAL_TIM_PWM_Stop+0x25c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIM_PWM_Stop+0x176>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a3b      	ldr	r2, [pc, #236]	@ (800774c <HAL_TIM_PWM_Stop+0x260>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d101      	bne.n	8007666 <HAL_TIM_PWM_Stop+0x17a>
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <HAL_TIM_PWM_Stop+0x17c>
 8007666:	2300      	movs	r3, #0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d017      	beq.n	800769c <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007676:	4013      	ands	r3, r2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10f      	bne.n	800769c <HAL_TIM_PWM_Stop+0x1b0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a1a      	ldr	r2, [r3, #32]
 8007682:	f240 4344 	movw	r3, #1092	@ 0x444
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d107      	bne.n	800769c <HAL_TIM_PWM_Stop+0x1b0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800769a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6a1a      	ldr	r2, [r3, #32]
 80076a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80076a6:	4013      	ands	r3, r2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10f      	bne.n	80076cc <HAL_TIM_PWM_Stop+0x1e0>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6a1a      	ldr	r2, [r3, #32]
 80076b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d107      	bne.n	80076cc <HAL_TIM_PWM_Stop+0x1e0>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 0201 	bic.w	r2, r2, #1
 80076ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d104      	bne.n	80076dc <HAL_TIM_PWM_Stop+0x1f0>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076da:	e023      	b.n	8007724 <HAL_TIM_PWM_Stop+0x238>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d104      	bne.n	80076ec <HAL_TIM_PWM_Stop+0x200>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076ea:	e01b      	b.n	8007724 <HAL_TIM_PWM_Stop+0x238>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d104      	bne.n	80076fc <HAL_TIM_PWM_Stop+0x210>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076fa:	e013      	b.n	8007724 <HAL_TIM_PWM_Stop+0x238>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b0c      	cmp	r3, #12
 8007700:	d104      	bne.n	800770c <HAL_TIM_PWM_Stop+0x220>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800770a:	e00b      	b.n	8007724 <HAL_TIM_PWM_Stop+0x238>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b10      	cmp	r3, #16
 8007710:	d104      	bne.n	800771c <HAL_TIM_PWM_Stop+0x230>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800771a:	e003      	b.n	8007724 <HAL_TIM_PWM_Stop+0x238>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40012c00 	.word	0x40012c00
 8007734:	40000400 	.word	0x40000400
 8007738:	40000800 	.word	0x40000800
 800773c:	40000c00 	.word	0x40000c00
 8007740:	40013400 	.word	0x40013400
 8007744:	40014000 	.word	0x40014000
 8007748:	40014400 	.word	0x40014400
 800774c:	40014800 	.word	0x40014800
 8007750:	0800bf08 	.word	0x0800bf08

08007754 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e1b0      	b.n	8007aca <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a7f      	ldr	r2, [pc, #508]	@ (800796c <HAL_TIM_Encoder_Init+0x218>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01d      	beq.n	80077ae <HAL_TIM_Encoder_Init+0x5a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800777a:	d018      	beq.n	80077ae <HAL_TIM_Encoder_Init+0x5a>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a7b      	ldr	r2, [pc, #492]	@ (8007970 <HAL_TIM_Encoder_Init+0x21c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_TIM_Encoder_Init+0x5a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a7a      	ldr	r2, [pc, #488]	@ (8007974 <HAL_TIM_Encoder_Init+0x220>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_TIM_Encoder_Init+0x5a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a78      	ldr	r2, [pc, #480]	@ (8007978 <HAL_TIM_Encoder_Init+0x224>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_TIM_Encoder_Init+0x5a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a77      	ldr	r2, [pc, #476]	@ (800797c <HAL_TIM_Encoder_Init+0x228>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_TIM_Encoder_Init+0x5a>
 80077a4:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 80077a8:	4875      	ldr	r0, [pc, #468]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 80077aa:	f7fa fc47 	bl	800203c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d014      	beq.n	80077e0 <HAL_TIM_Encoder_Init+0x8c>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b10      	cmp	r3, #16
 80077bc:	d010      	beq.n	80077e0 <HAL_TIM_Encoder_Init+0x8c>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	d00c      	beq.n	80077e0 <HAL_TIM_Encoder_Init+0x8c>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b40      	cmp	r3, #64	@ 0x40
 80077cc:	d008      	beq.n	80077e0 <HAL_TIM_Encoder_Init+0x8c>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2b60      	cmp	r3, #96	@ 0x60
 80077d4:	d004      	beq.n	80077e0 <HAL_TIM_Encoder_Init+0x8c>
 80077d6:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80077da:	4869      	ldr	r0, [pc, #420]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 80077dc:	f7fa fc2e 	bl	800203c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00e      	beq.n	8007806 <HAL_TIM_Encoder_Init+0xb2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077f0:	d009      	beq.n	8007806 <HAL_TIM_Encoder_Init+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077fa:	d004      	beq.n	8007806 <HAL_TIM_Encoder_Init+0xb2>
 80077fc:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8007800:	485f      	ldr	r0, [pc, #380]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 8007802:	f7fa fc1b 	bl	800203c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <HAL_TIM_Encoder_Init+0xcc>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	2b80      	cmp	r3, #128	@ 0x80
 8007814:	d004      	beq.n	8007820 <HAL_TIM_Encoder_Init+0xcc>
 8007816:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800781a:	4859      	ldr	r0, [pc, #356]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 800781c:	f7fa fc0e 	bl	800203c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d00c      	beq.n	8007842 <HAL_TIM_Encoder_Init+0xee>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d008      	beq.n	8007842 <HAL_TIM_Encoder_Init+0xee>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d004      	beq.n	8007842 <HAL_TIM_Encoder_Init+0xee>
 8007838:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 800783c:	4850      	ldr	r0, [pc, #320]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 800783e:	f7fa fbfd 	bl	800203c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d00c      	beq.n	8007864 <HAL_TIM_Encoder_Init+0x110>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d008      	beq.n	8007864 <HAL_TIM_Encoder_Init+0x110>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b03      	cmp	r3, #3
 8007858:	d004      	beq.n	8007864 <HAL_TIM_Encoder_Init+0x110>
 800785a:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800785e:	4848      	ldr	r0, [pc, #288]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 8007860:	f7fa fbec 	bl	800203c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d00c      	beq.n	8007886 <HAL_TIM_Encoder_Init+0x132>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	2b02      	cmp	r3, #2
 8007872:	d008      	beq.n	8007886 <HAL_TIM_Encoder_Init+0x132>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2b03      	cmp	r3, #3
 800787a:	d004      	beq.n	8007886 <HAL_TIM_Encoder_Init+0x132>
 800787c:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8007880:	483f      	ldr	r0, [pc, #252]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 8007882:	f7fa fbdb 	bl	800203c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <HAL_TIM_Encoder_Init+0x14c>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_Encoder_Init+0x14c>
 8007896:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800789a:	4839      	ldr	r0, [pc, #228]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 800789c:	f7fa fbce 	bl	800203c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_TIM_Encoder_Init+0x166>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d004      	beq.n	80078ba <HAL_TIM_Encoder_Init+0x166>
 80078b0:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 80078b4:	4832      	ldr	r0, [pc, #200]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 80078b6:	f7fa fbc1 	bl	800203c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d010      	beq.n	80078e4 <HAL_TIM_Encoder_Init+0x190>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d00c      	beq.n	80078e4 <HAL_TIM_Encoder_Init+0x190>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2b08      	cmp	r3, #8
 80078d0:	d008      	beq.n	80078e4 <HAL_TIM_Encoder_Init+0x190>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	2b0c      	cmp	r3, #12
 80078d8:	d004      	beq.n	80078e4 <HAL_TIM_Encoder_Init+0x190>
 80078da:	f640 31ec 	movw	r1, #3052	@ 0xbec
 80078de:	4828      	ldr	r0, [pc, #160]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 80078e0:	f7fa fbac 	bl	800203c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d010      	beq.n	800790e <HAL_TIM_Encoder_Init+0x1ba>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d00c      	beq.n	800790e <HAL_TIM_Encoder_Init+0x1ba>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d008      	beq.n	800790e <HAL_TIM_Encoder_Init+0x1ba>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	d004      	beq.n	800790e <HAL_TIM_Encoder_Init+0x1ba>
 8007904:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8007908:	481d      	ldr	r0, [pc, #116]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 800790a:	f7fa fb97 	bl	800203c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b0f      	cmp	r3, #15
 8007914:	d904      	bls.n	8007920 <HAL_TIM_Encoder_Init+0x1cc>
 8007916:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800791a:	4819      	ldr	r0, [pc, #100]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 800791c:	f7fa fb8e 	bl	800203c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	2b0f      	cmp	r3, #15
 8007926:	d904      	bls.n	8007932 <HAL_TIM_Encoder_Init+0x1de>
 8007928:	f640 31ef 	movw	r1, #3055	@ 0xbef
 800792c:	4814      	ldr	r0, [pc, #80]	@ (8007980 <HAL_TIM_Encoder_Init+0x22c>)
 800792e:	f7fa fb85 	bl	800203c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800793a:	d004      	beq.n	8007946 <HAL_TIM_Encoder_Init+0x1f2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a0d      	ldr	r2, [pc, #52]	@ (8007978 <HAL_TIM_Encoder_Init+0x224>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d107      	bne.n	8007956 <HAL_TIM_Encoder_Init+0x202>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf14      	ite	ne
 800794e:	2301      	movne	r3, #1
 8007950:	2300      	moveq	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	e01a      	b.n	800798c <HAL_TIM_Encoder_Init+0x238>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d012      	beq.n	8007984 <HAL_TIM_Encoder_Init+0x230>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007966:	d20d      	bcs.n	8007984 <HAL_TIM_Encoder_Init+0x230>
 8007968:	2301      	movs	r3, #1
 800796a:	e00c      	b.n	8007986 <HAL_TIM_Encoder_Init+0x232>
 800796c:	40012c00 	.word	0x40012c00
 8007970:	40000400 	.word	0x40000400
 8007974:	40000800 	.word	0x40000800
 8007978:	40000c00 	.word	0x40000c00
 800797c:	40013400 	.word	0x40013400
 8007980:	0800bf08 	.word	0x0800bf08
 8007984:	2300      	movs	r3, #0
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <HAL_TIM_Encoder_Init+0x246>
 8007990:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8007994:	484f      	ldr	r0, [pc, #316]	@ (8007ad4 <HAL_TIM_Encoder_Init+0x380>)
 8007996:	f7fa fb51 	bl	800203c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d106      	bne.n	80079b4 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fa ff78 	bl	80028a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80079ca:	f023 0307 	bic.w	r3, r3, #7
 80079ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f000 ffd2 	bl	8008984 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a08:	f023 0303 	bic.w	r3, r3, #3
 8007a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007a26:	f023 030c 	bic.w	r3, r3, #12
 8007a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	4313      	orrs	r3, r2
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	011a      	lsls	r2, r3, #4
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	031b      	lsls	r3, r3, #12
 8007a56:	4313      	orrs	r3, r2
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007a64:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007a6c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	0800bf08 	.word	0x0800bf08

08007ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d020      	beq.n	8007b3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d01b      	beq.n	8007b3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0202 	mvn.w	r2, #2
 8007b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 ff10 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 8007b28:	e005      	b.n	8007b36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 ff02 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 ff13 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d020      	beq.n	8007b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01b      	beq.n	8007b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0204 	mvn.w	r2, #4
 8007b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 feea 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fedc 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 feed 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d020      	beq.n	8007bd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01b      	beq.n	8007bd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0208 	mvn.w	r2, #8
 8007ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2204      	movs	r2, #4
 8007baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fec4 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 8007bc0:	e005      	b.n	8007bce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 feb6 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fec7 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d020      	beq.n	8007c20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01b      	beq.n	8007c20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0210 	mvn.w	r2, #16
 8007bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fe9e 	bl	8008948 <HAL_TIM_IC_CaptureCallback>
 8007c0c:	e005      	b.n	8007c1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fe90 	bl	8008934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fea1 	bl	800895c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00c      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0201 	mvn.w	r2, #1
 8007c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fe6e 	bl	8008920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d104      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00c      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fe39 	bl	80098e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00c      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fe31 	bl	80098f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00c      	beq.n	8007cba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fe5b 	bl	8008970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00c      	beq.n	8007cde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d007      	beq.n	8007cde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f06f 0220 	mvn.w	r2, #32
 8007cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 fdf9 	bl	80098d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d016      	beq.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x44>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d013      	beq.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d010      	beq.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b0c      	cmp	r3, #12
 8007d0e:	d00d      	beq.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d00a      	beq.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b14      	cmp	r3, #20
 8007d1a:	d007      	beq.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b3c      	cmp	r3, #60	@ 0x3c
 8007d20:	d004      	beq.n	8007d2c <HAL_TIM_PWM_ConfigChannel+0x44>
 8007d22:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8007d26:	488b      	ldr	r0, [pc, #556]	@ (8007f54 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007d28:	f7fa f988 	bl	800203c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b60      	cmp	r3, #96	@ 0x60
 8007d32:	d01c      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x86>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b70      	cmp	r3, #112	@ 0x70
 8007d3a:	d018      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x86>
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a85      	ldr	r2, [pc, #532]	@ (8007f58 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d013      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x86>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a84      	ldr	r2, [pc, #528]	@ (8007f5c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00e      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x86>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a82      	ldr	r2, [pc, #520]	@ (8007f60 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d009      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x86>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a81      	ldr	r2, [pc, #516]	@ (8007f64 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d004      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x86>
 8007d64:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8007d68:	487a      	ldr	r0, [pc, #488]	@ (8007f54 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007d6a:	f7fa f967 	bl	800203c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d004      	beq.n	8007d88 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8007d7e:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8007d82:	4874      	ldr	r0, [pc, #464]	@ (8007f54 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007d84:	f7fa f95a 	bl	800203c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d008      	beq.n	8007da2 <HAL_TIM_PWM_ConfigChannel+0xba>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d004      	beq.n	8007da2 <HAL_TIM_PWM_ConfigChannel+0xba>
 8007d98:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8007d9c:	486d      	ldr	r0, [pc, #436]	@ (8007f54 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007d9e:	f7fa f94d 	bl	800203c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e1d9      	b.n	8008164 <HAL_TIM_PWM_ConfigChannel+0x47c>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b14      	cmp	r3, #20
 8007dbc:	f200 81ca 	bhi.w	8008154 <HAL_TIM_PWM_ConfigChannel+0x46c>
 8007dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08008155 	.word	0x08008155
 8007dd0:	08008155 	.word	0x08008155
 8007dd4:	08008155 	.word	0x08008155
 8007dd8:	08007ec1 	.word	0x08007ec1
 8007ddc:	08008155 	.word	0x08008155
 8007de0:	08008155 	.word	0x08008155
 8007de4:	08008155 	.word	0x08008155
 8007de8:	08007f89 	.word	0x08007f89
 8007dec:	08008155 	.word	0x08008155
 8007df0:	08008155 	.word	0x08008155
 8007df4:	08008155 	.word	0x08008155
 8007df8:	0800800f 	.word	0x0800800f
 8007dfc:	08008155 	.word	0x08008155
 8007e00:	08008155 	.word	0x08008155
 8007e04:	08008155 	.word	0x08008155
 8007e08:	08008097 	.word	0x08008097
 8007e0c:	08008155 	.word	0x08008155
 8007e10:	08008155 	.word	0x08008155
 8007e14:	08008155 	.word	0x08008155
 8007e18:	080080f5 	.word	0x080080f5
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a51      	ldr	r2, [pc, #324]	@ (8007f68 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d02c      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2e:	d027      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a4d      	ldr	r2, [pc, #308]	@ (8007f6c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d022      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a4c      	ldr	r2, [pc, #304]	@ (8007f70 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d01d      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a4a      	ldr	r2, [pc, #296]	@ (8007f74 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d018      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a49      	ldr	r2, [pc, #292]	@ (8007f78 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d013      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a47      	ldr	r2, [pc, #284]	@ (8007f7c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00e      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a46      	ldr	r2, [pc, #280]	@ (8007f80 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d009      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a44      	ldr	r2, [pc, #272]	@ (8007f84 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <HAL_TIM_PWM_ConfigChannel+0x198>
 8007e76:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8007e7a:	4836      	ldr	r0, [pc, #216]	@ (8007f54 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007e7c:	f7fa f8de 	bl	800203c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fe22 	bl	8008ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0208 	orr.w	r2, r2, #8
 8007e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0204 	bic.w	r2, r2, #4
 8007eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6999      	ldr	r1, [r3, #24]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	691a      	ldr	r2, [r3, #16]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	619a      	str	r2, [r3, #24]
      break;
 8007ebe:	e14c      	b.n	800815a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a28      	ldr	r2, [pc, #160]	@ (8007f68 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d022      	beq.n	8007f10 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed2:	d01d      	beq.n	8007f10 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a24      	ldr	r2, [pc, #144]	@ (8007f6c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d018      	beq.n	8007f10 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a23      	ldr	r2, [pc, #140]	@ (8007f70 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d013      	beq.n	8007f10 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a21      	ldr	r2, [pc, #132]	@ (8007f74 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d00e      	beq.n	8007f10 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a20      	ldr	r2, [pc, #128]	@ (8007f78 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d009      	beq.n	8007f10 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a1e      	ldr	r2, [pc, #120]	@ (8007f7c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d004      	beq.n	8007f10 <HAL_TIM_PWM_ConfigChannel+0x228>
 8007f06:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8007f0a:	4812      	ldr	r0, [pc, #72]	@ (8007f54 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007f0c:	f7fa f896 	bl	800203c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fe94 	bl	8008c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699a      	ldr	r2, [r3, #24]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6999      	ldr	r1, [r3, #24]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	021a      	lsls	r2, r3, #8
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	619a      	str	r2, [r3, #24]
      break;
 8007f50:	e103      	b.n	800815a <HAL_TIM_PWM_ConfigChannel+0x472>
 8007f52:	bf00      	nop
 8007f54:	0800bf08 	.word	0x0800bf08
 8007f58:	00010040 	.word	0x00010040
 8007f5c:	00010050 	.word	0x00010050
 8007f60:	00010060 	.word	0x00010060
 8007f64:	00010070 	.word	0x00010070
 8007f68:	40012c00 	.word	0x40012c00
 8007f6c:	40000400 	.word	0x40000400
 8007f70:	40000800 	.word	0x40000800
 8007f74:	40000c00 	.word	0x40000c00
 8007f78:	40013400 	.word	0x40013400
 8007f7c:	40014000 	.word	0x40014000
 8007f80:	40014400 	.word	0x40014400
 8007f84:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a77      	ldr	r2, [pc, #476]	@ (800816c <HAL_TIM_PWM_ConfigChannel+0x484>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01d      	beq.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f9a:	d018      	beq.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a73      	ldr	r2, [pc, #460]	@ (8008170 <HAL_TIM_PWM_ConfigChannel+0x488>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d013      	beq.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a72      	ldr	r2, [pc, #456]	@ (8008174 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00e      	beq.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a70      	ldr	r2, [pc, #448]	@ (8008178 <HAL_TIM_PWM_ConfigChannel+0x490>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d009      	beq.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a6f      	ldr	r2, [pc, #444]	@ (800817c <HAL_TIM_PWM_ConfigChannel+0x494>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d004      	beq.n	8007fce <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8007fc4:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8007fc8:	486d      	ldr	r0, [pc, #436]	@ (8008180 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8007fca:	f7fa f837 	bl	800203c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fee7 	bl	8008da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0208 	orr.w	r2, r2, #8
 8007fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0204 	bic.w	r2, r2, #4
 8007ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69d9      	ldr	r1, [r3, #28]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	61da      	str	r2, [r3, #28]
      break;
 800800c:	e0a5      	b.n	800815a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a56      	ldr	r2, [pc, #344]	@ (800816c <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d01d      	beq.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008020:	d018      	beq.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a52      	ldr	r2, [pc, #328]	@ (8008170 <HAL_TIM_PWM_ConfigChannel+0x488>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a50      	ldr	r2, [pc, #320]	@ (8008174 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00e      	beq.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a4f      	ldr	r2, [pc, #316]	@ (8008178 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a4d      	ldr	r2, [pc, #308]	@ (800817c <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800804a:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800804e:	484c      	ldr	r0, [pc, #304]	@ (8008180 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008050:	f7f9 fff4 	bl	800203c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68b9      	ldr	r1, [r7, #8]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 ff56 	bl	8008f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	69da      	ldr	r2, [r3, #28]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800806e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69da      	ldr	r2, [r3, #28]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800807e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69d9      	ldr	r1, [r3, #28]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	61da      	str	r2, [r3, #28]
      break;
 8008094:	e061      	b.n	800815a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a34      	ldr	r2, [pc, #208]	@ (800816c <HAL_TIM_PWM_ConfigChannel+0x484>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d009      	beq.n	80080b4 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a35      	ldr	r2, [pc, #212]	@ (800817c <HAL_TIM_PWM_ConfigChannel+0x494>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 80080aa:	f241 1104 	movw	r1, #4356	@ 0x1104
 80080ae:	4834      	ldr	r0, [pc, #208]	@ (8008180 <HAL_TIM_PWM_ConfigChannel+0x498>)
 80080b0:	f7f9 ffc4 	bl	800203c <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 ff9e 	bl	8008ffc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0208 	orr.w	r2, r2, #8
 80080ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0204 	bic.w	r2, r2, #4
 80080de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	691a      	ldr	r2, [r3, #16]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80080f2:	e032      	b.n	800815a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1c      	ldr	r2, [pc, #112]	@ (800816c <HAL_TIM_PWM_ConfigChannel+0x484>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_TIM_PWM_ConfigChannel+0x42a>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1e      	ldr	r2, [pc, #120]	@ (800817c <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIM_PWM_ConfigChannel+0x42a>
 8008108:	f241 1115 	movw	r1, #4373	@ 0x1115
 800810c:	481c      	ldr	r0, [pc, #112]	@ (8008180 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800810e:	f7f9 ff95 	bl	800203c <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 ffd3 	bl	80090c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800812c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800813c:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	021a      	lsls	r2, r3, #8
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008152:	e002      	b.n	800815a <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	75fb      	strb	r3, [r7, #23]
      break;
 8008158:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	40012c00 	.word	0x40012c00
 8008170:	40000400 	.word	0x40000400
 8008174:	40000800 	.word	0x40000800
 8008178:	40000c00 	.word	0x40000c00
 800817c:	40013400 	.word	0x40013400
 8008180:	0800bf08 	.word	0x0800bf08

08008184 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a33      	ldr	r2, [pc, #204]	@ (8008260 <HAL_TIM_GenerateEvent+0xdc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d036      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081a0:	d031      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008264 <HAL_TIM_GenerateEvent+0xe0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d02c      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008268 <HAL_TIM_GenerateEvent+0xe4>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d027      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a2c      	ldr	r2, [pc, #176]	@ (800826c <HAL_TIM_GenerateEvent+0xe8>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d022      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008270 <HAL_TIM_GenerateEvent+0xec>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01d      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a29      	ldr	r2, [pc, #164]	@ (8008274 <HAL_TIM_GenerateEvent+0xf0>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d018      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a27      	ldr	r2, [pc, #156]	@ (8008278 <HAL_TIM_GenerateEvent+0xf4>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a26      	ldr	r2, [pc, #152]	@ (800827c <HAL_TIM_GenerateEvent+0xf8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a24      	ldr	r2, [pc, #144]	@ (8008280 <HAL_TIM_GenerateEvent+0xfc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a23      	ldr	r2, [pc, #140]	@ (8008284 <HAL_TIM_GenerateEvent+0x100>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_TIM_GenerateEvent+0x82>
 80081fc:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8008200:	4821      	ldr	r0, [pc, #132]	@ (8008288 <HAL_TIM_GenerateEvent+0x104>)
 8008202:	f7f9 ff1b 	bl	800203c <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800820c:	d202      	bcs.n	8008214 <HAL_TIM_GenerateEvent+0x90>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <HAL_TIM_GenerateEvent+0x9a>
 8008214:	f241 4181 	movw	r1, #5249	@ 0x1481
 8008218:	481b      	ldr	r0, [pc, #108]	@ (8008288 <HAL_TIM_GenerateEvent+0x104>)
 800821a:	f7f9 ff0f 	bl	800203c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008224:	2b01      	cmp	r3, #1
 8008226:	d101      	bne.n	800822c <HAL_TIM_GenerateEvent+0xa8>
 8008228:	2302      	movs	r3, #2
 800822a:	e014      	b.n	8008256 <HAL_TIM_GenerateEvent+0xd2>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40012c00 	.word	0x40012c00
 8008264:	40000400 	.word	0x40000400
 8008268:	40000800 	.word	0x40000800
 800826c:	40000c00 	.word	0x40000c00
 8008270:	40001000 	.word	0x40001000
 8008274:	40001400 	.word	0x40001400
 8008278:	40013400 	.word	0x40013400
 800827c:	40014000 	.word	0x40014000
 8008280:	40014400 	.word	0x40014400
 8008284:	40014800 	.word	0x40014800
 8008288:	0800bf08 	.word	0x0800bf08

0800828c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_TIM_ConfigClockSource+0x1c>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e329      	b.n	80088fc <HAL_TIM_ConfigClockSource+0x670>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c0:	d029      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b70      	cmp	r3, #112	@ 0x70
 80082c8:	d025      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d2:	d020      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b40      	cmp	r3, #64	@ 0x40
 80082da:	d01c      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b50      	cmp	r3, #80	@ 0x50
 80082e2:	d018      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b60      	cmp	r3, #96	@ 0x60
 80082ea:	d014      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d010      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b10      	cmp	r3, #16
 80082fa:	d00c      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b20      	cmp	r3, #32
 8008302:	d008      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b30      	cmp	r3, #48	@ 0x30
 800830a:	d004      	beq.n	8008316 <HAL_TIM_ConfigClockSource+0x8a>
 800830c:	f241 5156 	movw	r1, #5462	@ 0x1556
 8008310:	4888      	ldr	r0, [pc, #544]	@ (8008534 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008312:	f7f9 fe93 	bl	800203c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008324:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008328:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008330:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008342:	f000 810d 	beq.w	8008560 <HAL_TIM_ConfigClockSource+0x2d4>
 8008346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834a:	f200 82ca 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x656>
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008352:	d02d      	beq.n	80083b0 <HAL_TIM_ConfigClockSource+0x124>
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008358:	f200 82c3 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x656>
 800835c:	2b70      	cmp	r3, #112	@ 0x70
 800835e:	d06f      	beq.n	8008440 <HAL_TIM_ConfigClockSource+0x1b4>
 8008360:	2b70      	cmp	r3, #112	@ 0x70
 8008362:	f200 82be 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x656>
 8008366:	2b60      	cmp	r3, #96	@ 0x60
 8008368:	f000 81d4 	beq.w	8008714 <HAL_TIM_ConfigClockSource+0x488>
 800836c:	2b60      	cmp	r3, #96	@ 0x60
 800836e:	f200 82b8 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x656>
 8008372:	2b50      	cmp	r3, #80	@ 0x50
 8008374:	f000 8165 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x3b6>
 8008378:	2b50      	cmp	r3, #80	@ 0x50
 800837a:	f200 82b2 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x656>
 800837e:	2b40      	cmp	r3, #64	@ 0x40
 8008380:	f000 8223 	beq.w	80087ca <HAL_TIM_ConfigClockSource+0x53e>
 8008384:	2b40      	cmp	r3, #64	@ 0x40
 8008386:	f200 82ac 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x656>
 800838a:	2b30      	cmp	r3, #48	@ 0x30
 800838c:	f000 8278 	beq.w	8008880 <HAL_TIM_ConfigClockSource+0x5f4>
 8008390:	2b30      	cmp	r3, #48	@ 0x30
 8008392:	f200 82a6 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x656>
 8008396:	2b20      	cmp	r3, #32
 8008398:	f000 8272 	beq.w	8008880 <HAL_TIM_ConfigClockSource+0x5f4>
 800839c:	2b20      	cmp	r3, #32
 800839e:	f200 82a0 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x656>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 826c 	beq.w	8008880 <HAL_TIM_ConfigClockSource+0x5f4>
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	f000 8269 	beq.w	8008880 <HAL_TIM_ConfigClockSource+0x5f4>
 80083ae:	e298      	b.n	80088e2 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a60      	ldr	r2, [pc, #384]	@ (8008538 <HAL_TIM_ConfigClockSource+0x2ac>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	f000 8296 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c4:	f000 8290 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a5b      	ldr	r2, [pc, #364]	@ (800853c <HAL_TIM_ConfigClockSource+0x2b0>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	f000 828a 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a59      	ldr	r2, [pc, #356]	@ (8008540 <HAL_TIM_ConfigClockSource+0x2b4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	f000 8284 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a57      	ldr	r2, [pc, #348]	@ (8008544 <HAL_TIM_ConfigClockSource+0x2b8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f000 827e 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a55      	ldr	r2, [pc, #340]	@ (8008548 <HAL_TIM_ConfigClockSource+0x2bc>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	f000 8278 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a53      	ldr	r2, [pc, #332]	@ (800854c <HAL_TIM_ConfigClockSource+0x2c0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	f000 8272 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a51      	ldr	r2, [pc, #324]	@ (8008550 <HAL_TIM_ConfigClockSource+0x2c4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f000 826c 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a4f      	ldr	r2, [pc, #316]	@ (8008554 <HAL_TIM_ConfigClockSource+0x2c8>)
 8008416:	4293      	cmp	r3, r2
 8008418:	f000 8266 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a4d      	ldr	r2, [pc, #308]	@ (8008558 <HAL_TIM_ConfigClockSource+0x2cc>)
 8008422:	4293      	cmp	r3, r2
 8008424:	f000 8260 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a4b      	ldr	r2, [pc, #300]	@ (800855c <HAL_TIM_ConfigClockSource+0x2d0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	f000 825a 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
 8008434:	f241 5162 	movw	r1, #5474	@ 0x1562
 8008438:	483e      	ldr	r0, [pc, #248]	@ (8008534 <HAL_TIM_ConfigClockSource+0x2a8>)
 800843a:	f7f9 fdff 	bl	800203c <assert_failed>
      break;
 800843e:	e253      	b.n	80088e8 <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a3c      	ldr	r2, [pc, #240]	@ (8008538 <HAL_TIM_ConfigClockSource+0x2ac>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d022      	beq.n	8008490 <HAL_TIM_ConfigClockSource+0x204>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008452:	d01d      	beq.n	8008490 <HAL_TIM_ConfigClockSource+0x204>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a38      	ldr	r2, [pc, #224]	@ (800853c <HAL_TIM_ConfigClockSource+0x2b0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d018      	beq.n	8008490 <HAL_TIM_ConfigClockSource+0x204>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a37      	ldr	r2, [pc, #220]	@ (8008540 <HAL_TIM_ConfigClockSource+0x2b4>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d013      	beq.n	8008490 <HAL_TIM_ConfigClockSource+0x204>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a35      	ldr	r2, [pc, #212]	@ (8008544 <HAL_TIM_ConfigClockSource+0x2b8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00e      	beq.n	8008490 <HAL_TIM_ConfigClockSource+0x204>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a36      	ldr	r2, [pc, #216]	@ (8008550 <HAL_TIM_ConfigClockSource+0x2c4>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d009      	beq.n	8008490 <HAL_TIM_ConfigClockSource+0x204>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a34      	ldr	r2, [pc, #208]	@ (8008554 <HAL_TIM_ConfigClockSource+0x2c8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d004      	beq.n	8008490 <HAL_TIM_ConfigClockSource+0x204>
 8008486:	f241 5169 	movw	r1, #5481	@ 0x1569
 800848a:	482a      	ldr	r0, [pc, #168]	@ (8008534 <HAL_TIM_ConfigClockSource+0x2a8>)
 800848c:	f7f9 fdd6 	bl	800203c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d013      	beq.n	80084c0 <HAL_TIM_ConfigClockSource+0x234>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084a0:	d00e      	beq.n	80084c0 <HAL_TIM_ConfigClockSource+0x234>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084aa:	d009      	beq.n	80084c0 <HAL_TIM_ConfigClockSource+0x234>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084b4:	d004      	beq.n	80084c0 <HAL_TIM_ConfigClockSource+0x234>
 80084b6:	f241 516c 	movw	r1, #5484	@ 0x156c
 80084ba:	481e      	ldr	r0, [pc, #120]	@ (8008534 <HAL_TIM_ConfigClockSource+0x2a8>)
 80084bc:	f7f9 fdbe 	bl	800203c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084c8:	d014      	beq.n	80084f4 <HAL_TIM_ConfigClockSource+0x268>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d010      	beq.n	80084f4 <HAL_TIM_ConfigClockSource+0x268>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <HAL_TIM_ConfigClockSource+0x268>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d008      	beq.n	80084f4 <HAL_TIM_ConfigClockSource+0x268>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b0a      	cmp	r3, #10
 80084e8:	d004      	beq.n	80084f4 <HAL_TIM_ConfigClockSource+0x268>
 80084ea:	f241 516d 	movw	r1, #5485	@ 0x156d
 80084ee:	4811      	ldr	r0, [pc, #68]	@ (8008534 <HAL_TIM_ConfigClockSource+0x2a8>)
 80084f0:	f7f9 fda4 	bl	800203c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	2b0f      	cmp	r3, #15
 80084fa:	d904      	bls.n	8008506 <HAL_TIM_ConfigClockSource+0x27a>
 80084fc:	f241 516e 	movw	r1, #5486	@ 0x156e
 8008500:	480c      	ldr	r0, [pc, #48]	@ (8008534 <HAL_TIM_ConfigClockSource+0x2a8>)
 8008502:	f7f9 fd9b 	bl	800203c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008516:	f000 feb5 	bl	8009284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	609a      	str	r2, [r3, #8]
      break;
 8008532:	e1da      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x65e>
 8008534:	0800bf08 	.word	0x0800bf08
 8008538:	40012c00 	.word	0x40012c00
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40001000 	.word	0x40001000
 800854c:	40001400 	.word	0x40001400
 8008550:	40013400 	.word	0x40013400
 8008554:	40014000 	.word	0x40014000
 8008558:	40014400 	.word	0x40014400
 800855c:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a64      	ldr	r2, [pc, #400]	@ (80086f8 <HAL_TIM_ConfigClockSource+0x46c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d01d      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x31a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008572:	d018      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x31a>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a60      	ldr	r2, [pc, #384]	@ (80086fc <HAL_TIM_ConfigClockSource+0x470>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x31a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a5f      	ldr	r2, [pc, #380]	@ (8008700 <HAL_TIM_ConfigClockSource+0x474>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00e      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x31a>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a5d      	ldr	r2, [pc, #372]	@ (8008704 <HAL_TIM_ConfigClockSource+0x478>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d009      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x31a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a5c      	ldr	r2, [pc, #368]	@ (8008708 <HAL_TIM_ConfigClockSource+0x47c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d004      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x31a>
 800859c:	f241 5181 	movw	r1, #5505	@ 0x1581
 80085a0:	485a      	ldr	r0, [pc, #360]	@ (800870c <HAL_TIM_ConfigClockSource+0x480>)
 80085a2:	f7f9 fd4b 	bl	800203c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d013      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x34a>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085b6:	d00e      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x34a>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085c0:	d009      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x34a>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085ca:	d004      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x34a>
 80085cc:	f241 5184 	movw	r1, #5508	@ 0x1584
 80085d0:	484e      	ldr	r0, [pc, #312]	@ (800870c <HAL_TIM_ConfigClockSource+0x480>)
 80085d2:	f7f9 fd33 	bl	800203c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085de:	d014      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x37e>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x37e>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x37e>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d008      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x37e>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2b0a      	cmp	r3, #10
 80085fe:	d004      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x37e>
 8008600:	f241 5185 	movw	r1, #5509	@ 0x1585
 8008604:	4841      	ldr	r0, [pc, #260]	@ (800870c <HAL_TIM_ConfigClockSource+0x480>)
 8008606:	f7f9 fd19 	bl	800203c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d904      	bls.n	800861c <HAL_TIM_ConfigClockSource+0x390>
 8008612:	f241 5186 	movw	r1, #5510	@ 0x1586
 8008616:	483d      	ldr	r0, [pc, #244]	@ (800870c <HAL_TIM_ConfigClockSource+0x480>)
 8008618:	f7f9 fd10 	bl	800203c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800862c:	f000 fe2a 	bl	8009284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800863e:	609a      	str	r2, [r3, #8]
      break;
 8008640:	e153      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a2c      	ldr	r2, [pc, #176]	@ (80086f8 <HAL_TIM_ConfigClockSource+0x46c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d022      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x406>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008654:	d01d      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x406>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a28      	ldr	r2, [pc, #160]	@ (80086fc <HAL_TIM_ConfigClockSource+0x470>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d018      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x406>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a26      	ldr	r2, [pc, #152]	@ (8008700 <HAL_TIM_ConfigClockSource+0x474>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d013      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x406>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a25      	ldr	r2, [pc, #148]	@ (8008704 <HAL_TIM_ConfigClockSource+0x478>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00e      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x406>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a23      	ldr	r2, [pc, #140]	@ (8008708 <HAL_TIM_ConfigClockSource+0x47c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d009      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x406>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a23      	ldr	r2, [pc, #140]	@ (8008710 <HAL_TIM_ConfigClockSource+0x484>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d004      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x406>
 8008688:	f241 5195 	movw	r1, #5525	@ 0x1595
 800868c:	481f      	ldr	r0, [pc, #124]	@ (800870c <HAL_TIM_ConfigClockSource+0x480>)
 800868e:	f7f9 fcd5 	bl	800203c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800869a:	d014      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0x43a>
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d010      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0x43a>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0x43a>
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d008      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0x43a>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b0a      	cmp	r3, #10
 80086ba:	d004      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0x43a>
 80086bc:	f241 5198 	movw	r1, #5528	@ 0x1598
 80086c0:	4812      	ldr	r0, [pc, #72]	@ (800870c <HAL_TIM_ConfigClockSource+0x480>)
 80086c2:	f7f9 fcbb 	bl	800203c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b0f      	cmp	r3, #15
 80086cc:	d904      	bls.n	80086d8 <HAL_TIM_ConfigClockSource+0x44c>
 80086ce:	f241 5199 	movw	r1, #5529	@ 0x1599
 80086d2:	480e      	ldr	r0, [pc, #56]	@ (800870c <HAL_TIM_ConfigClockSource+0x480>)
 80086d4:	f7f9 fcb2 	bl	800203c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e4:	461a      	mov	r2, r3
 80086e6:	f000 fd53 	bl	8009190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2150      	movs	r1, #80	@ 0x50
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fdac 	bl	800924e <TIM_ITRx_SetConfig>
      break;
 80086f6:	e0f8      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x65e>
 80086f8:	40012c00 	.word	0x40012c00
 80086fc:	40000400 	.word	0x40000400
 8008700:	40000800 	.word	0x40000800
 8008704:	40000c00 	.word	0x40000c00
 8008708:	40013400 	.word	0x40013400
 800870c:	0800bf08 	.word	0x0800bf08
 8008710:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a7a      	ldr	r2, [pc, #488]	@ (8008904 <HAL_TIM_ConfigClockSource+0x678>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d022      	beq.n	8008764 <HAL_TIM_ConfigClockSource+0x4d8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008726:	d01d      	beq.n	8008764 <HAL_TIM_ConfigClockSource+0x4d8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a76      	ldr	r2, [pc, #472]	@ (8008908 <HAL_TIM_ConfigClockSource+0x67c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d018      	beq.n	8008764 <HAL_TIM_ConfigClockSource+0x4d8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a75      	ldr	r2, [pc, #468]	@ (800890c <HAL_TIM_ConfigClockSource+0x680>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d013      	beq.n	8008764 <HAL_TIM_ConfigClockSource+0x4d8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a73      	ldr	r2, [pc, #460]	@ (8008910 <HAL_TIM_ConfigClockSource+0x684>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00e      	beq.n	8008764 <HAL_TIM_ConfigClockSource+0x4d8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a72      	ldr	r2, [pc, #456]	@ (8008914 <HAL_TIM_ConfigClockSource+0x688>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d009      	beq.n	8008764 <HAL_TIM_ConfigClockSource+0x4d8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a70      	ldr	r2, [pc, #448]	@ (8008918 <HAL_TIM_ConfigClockSource+0x68c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d004      	beq.n	8008764 <HAL_TIM_ConfigClockSource+0x4d8>
 800875a:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800875e:	486f      	ldr	r0, [pc, #444]	@ (800891c <HAL_TIM_ConfigClockSource+0x690>)
 8008760:	f7f9 fc6c 	bl	800203c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800876c:	d014      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x50c>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d010      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x50c>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00c      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x50c>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d008      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x50c>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b0a      	cmp	r3, #10
 800878c:	d004      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x50c>
 800878e:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 8008792:	4862      	ldr	r0, [pc, #392]	@ (800891c <HAL_TIM_ConfigClockSource+0x690>)
 8008794:	f7f9 fc52 	bl	800203c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	2b0f      	cmp	r3, #15
 800879e:	d904      	bls.n	80087aa <HAL_TIM_ConfigClockSource+0x51e>
 80087a0:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 80087a4:	485d      	ldr	r0, [pc, #372]	@ (800891c <HAL_TIM_ConfigClockSource+0x690>)
 80087a6:	f7f9 fc49 	bl	800203c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087b6:	461a      	mov	r2, r3
 80087b8:	f000 fd19 	bl	80091ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2160      	movs	r1, #96	@ 0x60
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fd43 	bl	800924e <TIM_ITRx_SetConfig>
      break;
 80087c8:	e08f      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a4d      	ldr	r2, [pc, #308]	@ (8008904 <HAL_TIM_ConfigClockSource+0x678>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d022      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x58e>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087dc:	d01d      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x58e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a49      	ldr	r2, [pc, #292]	@ (8008908 <HAL_TIM_ConfigClockSource+0x67c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d018      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x58e>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a47      	ldr	r2, [pc, #284]	@ (800890c <HAL_TIM_ConfigClockSource+0x680>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d013      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x58e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a46      	ldr	r2, [pc, #280]	@ (8008910 <HAL_TIM_ConfigClockSource+0x684>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d00e      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x58e>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a44      	ldr	r2, [pc, #272]	@ (8008914 <HAL_TIM_ConfigClockSource+0x688>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d009      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x58e>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a43      	ldr	r2, [pc, #268]	@ (8008918 <HAL_TIM_ConfigClockSource+0x68c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d004      	beq.n	800881a <HAL_TIM_ConfigClockSource+0x58e>
 8008810:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 8008814:	4841      	ldr	r0, [pc, #260]	@ (800891c <HAL_TIM_ConfigClockSource+0x690>)
 8008816:	f7f9 fc11 	bl	800203c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008822:	d014      	beq.n	800884e <HAL_TIM_ConfigClockSource+0x5c2>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d010      	beq.n	800884e <HAL_TIM_ConfigClockSource+0x5c2>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00c      	beq.n	800884e <HAL_TIM_ConfigClockSource+0x5c2>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d008      	beq.n	800884e <HAL_TIM_ConfigClockSource+0x5c2>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	2b0a      	cmp	r3, #10
 8008842:	d004      	beq.n	800884e <HAL_TIM_ConfigClockSource+0x5c2>
 8008844:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 8008848:	4834      	ldr	r0, [pc, #208]	@ (800891c <HAL_TIM_ConfigClockSource+0x690>)
 800884a:	f7f9 fbf7 	bl	800203c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	2b0f      	cmp	r3, #15
 8008854:	d904      	bls.n	8008860 <HAL_TIM_ConfigClockSource+0x5d4>
 8008856:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800885a:	4830      	ldr	r0, [pc, #192]	@ (800891c <HAL_TIM_ConfigClockSource+0x690>)
 800885c:	f7f9 fbee 	bl	800203c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800886c:	461a      	mov	r2, r3
 800886e:	f000 fc8f 	bl	8009190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2140      	movs	r1, #64	@ 0x40
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fce8 	bl	800924e <TIM_ITRx_SetConfig>
      break;
 800887e:	e034      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1f      	ldr	r2, [pc, #124]	@ (8008904 <HAL_TIM_ConfigClockSource+0x678>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d022      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x644>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008892:	d01d      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x644>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1b      	ldr	r2, [pc, #108]	@ (8008908 <HAL_TIM_ConfigClockSource+0x67c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d018      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x644>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a1a      	ldr	r2, [pc, #104]	@ (800890c <HAL_TIM_ConfigClockSource+0x680>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d013      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x644>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a18      	ldr	r2, [pc, #96]	@ (8008910 <HAL_TIM_ConfigClockSource+0x684>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00e      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x644>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a17      	ldr	r2, [pc, #92]	@ (8008914 <HAL_TIM_ConfigClockSource+0x688>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d009      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x644>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a15      	ldr	r2, [pc, #84]	@ (8008918 <HAL_TIM_ConfigClockSource+0x68c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d004      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x644>
 80088c6:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 80088ca:	4814      	ldr	r0, [pc, #80]	@ (800891c <HAL_TIM_ConfigClockSource+0x690>)
 80088cc:	f7f9 fbb6 	bl	800203c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f000 fcb7 	bl	800924e <TIM_ITRx_SetConfig>
      break;
 80088e0:	e003      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	73fb      	strb	r3, [r7, #15]
      break;
 80088e6:	e000      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x65e>
      break;
 80088e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	40012c00 	.word	0x40012c00
 8008908:	40000400 	.word	0x40000400
 800890c:	40000800 	.word	0x40000800
 8008910:	40000c00 	.word	0x40000c00
 8008914:	40013400 	.word	0x40013400
 8008918:	40014000 	.word	0x40014000
 800891c:	0800bf08 	.word	0x0800bf08

08008920 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a46      	ldr	r2, [pc, #280]	@ (8008ab0 <TIM_Base_SetConfig+0x12c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d013      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a2:	d00f      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a43      	ldr	r2, [pc, #268]	@ (8008ab4 <TIM_Base_SetConfig+0x130>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00b      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a42      	ldr	r2, [pc, #264]	@ (8008ab8 <TIM_Base_SetConfig+0x134>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d007      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a41      	ldr	r2, [pc, #260]	@ (8008abc <TIM_Base_SetConfig+0x138>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d003      	beq.n	80089c4 <TIM_Base_SetConfig+0x40>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a40      	ldr	r2, [pc, #256]	@ (8008ac0 <TIM_Base_SetConfig+0x13c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d108      	bne.n	80089d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a35      	ldr	r2, [pc, #212]	@ (8008ab0 <TIM_Base_SetConfig+0x12c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d01f      	beq.n	8008a1e <TIM_Base_SetConfig+0x9a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089e4:	d01b      	beq.n	8008a1e <TIM_Base_SetConfig+0x9a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a32      	ldr	r2, [pc, #200]	@ (8008ab4 <TIM_Base_SetConfig+0x130>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d017      	beq.n	8008a1e <TIM_Base_SetConfig+0x9a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a31      	ldr	r2, [pc, #196]	@ (8008ab8 <TIM_Base_SetConfig+0x134>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <TIM_Base_SetConfig+0x9a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a30      	ldr	r2, [pc, #192]	@ (8008abc <TIM_Base_SetConfig+0x138>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00f      	beq.n	8008a1e <TIM_Base_SetConfig+0x9a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a2f      	ldr	r2, [pc, #188]	@ (8008ac0 <TIM_Base_SetConfig+0x13c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d00b      	beq.n	8008a1e <TIM_Base_SetConfig+0x9a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a2e      	ldr	r2, [pc, #184]	@ (8008ac4 <TIM_Base_SetConfig+0x140>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d007      	beq.n	8008a1e <TIM_Base_SetConfig+0x9a>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a2d      	ldr	r2, [pc, #180]	@ (8008ac8 <TIM_Base_SetConfig+0x144>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d003      	beq.n	8008a1e <TIM_Base_SetConfig+0x9a>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a2c      	ldr	r2, [pc, #176]	@ (8008acc <TIM_Base_SetConfig+0x148>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d108      	bne.n	8008a30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a16      	ldr	r2, [pc, #88]	@ (8008ab0 <TIM_Base_SetConfig+0x12c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00f      	beq.n	8008a7c <TIM_Base_SetConfig+0xf8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a18      	ldr	r2, [pc, #96]	@ (8008ac0 <TIM_Base_SetConfig+0x13c>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d00b      	beq.n	8008a7c <TIM_Base_SetConfig+0xf8>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a17      	ldr	r2, [pc, #92]	@ (8008ac4 <TIM_Base_SetConfig+0x140>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d007      	beq.n	8008a7c <TIM_Base_SetConfig+0xf8>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a16      	ldr	r2, [pc, #88]	@ (8008ac8 <TIM_Base_SetConfig+0x144>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d003      	beq.n	8008a7c <TIM_Base_SetConfig+0xf8>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a15      	ldr	r2, [pc, #84]	@ (8008acc <TIM_Base_SetConfig+0x148>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d103      	bne.n	8008a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d105      	bne.n	8008aa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	f023 0201 	bic.w	r2, r3, #1
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	611a      	str	r2, [r3, #16]
  }
}
 8008aa2:	bf00      	nop
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40012c00 	.word	0x40012c00
 8008ab4:	40000400 	.word	0x40000400
 8008ab8:	40000800 	.word	0x40000800
 8008abc:	40000c00 	.word	0x40000c00
 8008ac0:	40013400 	.word	0x40013400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800

08008ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	f023 0201 	bic.w	r2, r3, #1
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0303 	bic.w	r3, r3, #3
 8008b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f023 0302 	bic.w	r3, r3, #2
 8008b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a40      	ldr	r2, [pc, #256]	@ (8008c2c <TIM_OC1_SetConfig+0x15c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d00f      	beq.n	8008b50 <TIM_OC1_SetConfig+0x80>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a3f      	ldr	r2, [pc, #252]	@ (8008c30 <TIM_OC1_SetConfig+0x160>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00b      	beq.n	8008b50 <TIM_OC1_SetConfig+0x80>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8008c34 <TIM_OC1_SetConfig+0x164>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d007      	beq.n	8008b50 <TIM_OC1_SetConfig+0x80>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a3d      	ldr	r2, [pc, #244]	@ (8008c38 <TIM_OC1_SetConfig+0x168>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d003      	beq.n	8008b50 <TIM_OC1_SetConfig+0x80>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a3c      	ldr	r2, [pc, #240]	@ (8008c3c <TIM_OC1_SetConfig+0x16c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d119      	bne.n	8008b84 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d008      	beq.n	8008b6a <TIM_OC1_SetConfig+0x9a>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d004      	beq.n	8008b6a <TIM_OC1_SetConfig+0x9a>
 8008b60:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 8008b64:	4836      	ldr	r0, [pc, #216]	@ (8008c40 <TIM_OC1_SetConfig+0x170>)
 8008b66:	f7f9 fa69 	bl	800203c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f023 0308 	bic.w	r3, r3, #8
 8008b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0304 	bic.w	r3, r3, #4
 8008b82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a29      	ldr	r2, [pc, #164]	@ (8008c2c <TIM_OC1_SetConfig+0x15c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00f      	beq.n	8008bac <TIM_OC1_SetConfig+0xdc>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a28      	ldr	r2, [pc, #160]	@ (8008c30 <TIM_OC1_SetConfig+0x160>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00b      	beq.n	8008bac <TIM_OC1_SetConfig+0xdc>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a27      	ldr	r2, [pc, #156]	@ (8008c34 <TIM_OC1_SetConfig+0x164>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d007      	beq.n	8008bac <TIM_OC1_SetConfig+0xdc>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a26      	ldr	r2, [pc, #152]	@ (8008c38 <TIM_OC1_SetConfig+0x168>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_OC1_SetConfig+0xdc>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a25      	ldr	r2, [pc, #148]	@ (8008c3c <TIM_OC1_SetConfig+0x16c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d12d      	bne.n	8008c08 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb4:	d008      	beq.n	8008bc8 <TIM_OC1_SetConfig+0xf8>
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <TIM_OC1_SetConfig+0xf8>
 8008bbe:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 8008bc2:	481f      	ldr	r0, [pc, #124]	@ (8008c40 <TIM_OC1_SetConfig+0x170>)
 8008bc4:	f7f9 fa3a 	bl	800203c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bd0:	d008      	beq.n	8008be4 <TIM_OC1_SetConfig+0x114>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <TIM_OC1_SetConfig+0x114>
 8008bda:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 8008bde:	4818      	ldr	r0, [pc, #96]	@ (8008c40 <TIM_OC1_SetConfig+0x170>)
 8008be0:	f7f9 fa2c 	bl	800203c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	621a      	str	r2, [r3, #32]
}
 8008c22:	bf00      	nop
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	40012c00 	.word	0x40012c00
 8008c30:	40013400 	.word	0x40013400
 8008c34:	40014000 	.word	0x40014000
 8008c38:	40014400 	.word	0x40014400
 8008c3c:	40014800 	.word	0x40014800
 8008c40:	0800bf08 	.word	0x0800bf08

08008c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	f023 0210 	bic.w	r2, r3, #16
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f023 0320 	bic.w	r3, r3, #32
 8008c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8008d90 <TIM_OC2_SetConfig+0x14c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_OC2_SetConfig+0x6c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3a      	ldr	r2, [pc, #232]	@ (8008d94 <TIM_OC2_SetConfig+0x150>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d11a      	bne.n	8008ce6 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d008      	beq.n	8008cca <TIM_OC2_SetConfig+0x86>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d004      	beq.n	8008cca <TIM_OC2_SetConfig+0x86>
 8008cc0:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 8008cc4:	4834      	ldr	r0, [pc, #208]	@ (8008d98 <TIM_OC2_SetConfig+0x154>)
 8008cc6:	f7f9 f9b9 	bl	800203c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a29      	ldr	r2, [pc, #164]	@ (8008d90 <TIM_OC2_SetConfig+0x14c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00f      	beq.n	8008d0e <TIM_OC2_SetConfig+0xca>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a28      	ldr	r2, [pc, #160]	@ (8008d94 <TIM_OC2_SetConfig+0x150>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00b      	beq.n	8008d0e <TIM_OC2_SetConfig+0xca>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a28      	ldr	r2, [pc, #160]	@ (8008d9c <TIM_OC2_SetConfig+0x158>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d007      	beq.n	8008d0e <TIM_OC2_SetConfig+0xca>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a27      	ldr	r2, [pc, #156]	@ (8008da0 <TIM_OC2_SetConfig+0x15c>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d003      	beq.n	8008d0e <TIM_OC2_SetConfig+0xca>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a26      	ldr	r2, [pc, #152]	@ (8008da4 <TIM_OC2_SetConfig+0x160>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d12f      	bne.n	8008d6e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d16:	d008      	beq.n	8008d2a <TIM_OC2_SetConfig+0xe6>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <TIM_OC2_SetConfig+0xe6>
 8008d20:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 8008d24:	481c      	ldr	r0, [pc, #112]	@ (8008d98 <TIM_OC2_SetConfig+0x154>)
 8008d26:	f7f9 f989 	bl	800203c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d32:	d008      	beq.n	8008d46 <TIM_OC2_SetConfig+0x102>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <TIM_OC2_SetConfig+0x102>
 8008d3c:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 8008d40:	4815      	ldr	r0, [pc, #84]	@ (8008d98 <TIM_OC2_SetConfig+0x154>)
 8008d42:	f7f9 f97b 	bl	800203c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	621a      	str	r2, [r3, #32]
}
 8008d88:	bf00      	nop
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	40012c00 	.word	0x40012c00
 8008d94:	40013400 	.word	0x40013400
 8008d98:	0800bf08 	.word	0x0800bf08
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40014400 	.word	0x40014400
 8008da4:	40014800 	.word	0x40014800

08008da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a3b      	ldr	r2, [pc, #236]	@ (8008ef4 <TIM_OC3_SetConfig+0x14c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC3_SetConfig+0x6a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8008ef8 <TIM_OC3_SetConfig+0x150>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d11a      	bne.n	8008e48 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d008      	beq.n	8008e2c <TIM_OC3_SetConfig+0x84>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	d004      	beq.n	8008e2c <TIM_OC3_SetConfig+0x84>
 8008e22:	f641 4105 	movw	r1, #7173	@ 0x1c05
 8008e26:	4835      	ldr	r0, [pc, #212]	@ (8008efc <TIM_OC3_SetConfig+0x154>)
 8008e28:	f7f9 f908 	bl	800203c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	021b      	lsls	r3, r3, #8
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ef4 <TIM_OC3_SetConfig+0x14c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00f      	beq.n	8008e70 <TIM_OC3_SetConfig+0xc8>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a29      	ldr	r2, [pc, #164]	@ (8008ef8 <TIM_OC3_SetConfig+0x150>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00b      	beq.n	8008e70 <TIM_OC3_SetConfig+0xc8>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a29      	ldr	r2, [pc, #164]	@ (8008f00 <TIM_OC3_SetConfig+0x158>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d007      	beq.n	8008e70 <TIM_OC3_SetConfig+0xc8>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a28      	ldr	r2, [pc, #160]	@ (8008f04 <TIM_OC3_SetConfig+0x15c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d003      	beq.n	8008e70 <TIM_OC3_SetConfig+0xc8>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a27      	ldr	r2, [pc, #156]	@ (8008f08 <TIM_OC3_SetConfig+0x160>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d12f      	bne.n	8008ed0 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e78:	d008      	beq.n	8008e8c <TIM_OC3_SetConfig+0xe4>
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d004      	beq.n	8008e8c <TIM_OC3_SetConfig+0xe4>
 8008e82:	f641 4112 	movw	r1, #7186	@ 0x1c12
 8008e86:	481d      	ldr	r0, [pc, #116]	@ (8008efc <TIM_OC3_SetConfig+0x154>)
 8008e88:	f7f9 f8d8 	bl	800203c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e94:	d008      	beq.n	8008ea8 <TIM_OC3_SetConfig+0x100>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <TIM_OC3_SetConfig+0x100>
 8008e9e:	f641 4113 	movw	r1, #7187	@ 0x1c13
 8008ea2:	4816      	ldr	r0, [pc, #88]	@ (8008efc <TIM_OC3_SetConfig+0x154>)
 8008ea4:	f7f9 f8ca 	bl	800203c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008eae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	011b      	lsls	r3, r3, #4
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40013400 	.word	0x40013400
 8008efc:	0800bf08 	.word	0x0800bf08
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40014400 	.word	0x40014400
 8008f08:	40014800 	.word	0x40014800

08008f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	031b      	lsls	r3, r3, #12
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8008fe4 <TIM_OC4_SetConfig+0xd8>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d00f      	beq.n	8008f90 <TIM_OC4_SetConfig+0x84>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe8 <TIM_OC4_SetConfig+0xdc>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00b      	beq.n	8008f90 <TIM_OC4_SetConfig+0x84>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8008fec <TIM_OC4_SetConfig+0xe0>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d007      	beq.n	8008f90 <TIM_OC4_SetConfig+0x84>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff0 <TIM_OC4_SetConfig+0xe4>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d003      	beq.n	8008f90 <TIM_OC4_SetConfig+0x84>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ff4 <TIM_OC4_SetConfig+0xe8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d117      	bne.n	8008fc0 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f98:	d008      	beq.n	8008fac <TIM_OC4_SetConfig+0xa0>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d004      	beq.n	8008fac <TIM_OC4_SetConfig+0xa0>
 8008fa2:	f641 4152 	movw	r1, #7250	@ 0x1c52
 8008fa6:	4814      	ldr	r0, [pc, #80]	@ (8008ff8 <TIM_OC4_SetConfig+0xec>)
 8008fa8:	f7f9 f848 	bl	800203c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	019b      	lsls	r3, r3, #6
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	621a      	str	r2, [r3, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	40012c00 	.word	0x40012c00
 8008fe8:	40013400 	.word	0x40013400
 8008fec:	40014000 	.word	0x40014000
 8008ff0:	40014400 	.word	0x40014400
 8008ff4:	40014800 	.word	0x40014800
 8008ff8:	0800bf08 	.word	0x0800bf08

08008ffc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800902a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800902e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009040:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	041b      	lsls	r3, r3, #16
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a17      	ldr	r2, [pc, #92]	@ (80090b0 <TIM_OC5_SetConfig+0xb4>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d00f      	beq.n	8009076 <TIM_OC5_SetConfig+0x7a>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a16      	ldr	r2, [pc, #88]	@ (80090b4 <TIM_OC5_SetConfig+0xb8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d00b      	beq.n	8009076 <TIM_OC5_SetConfig+0x7a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a15      	ldr	r2, [pc, #84]	@ (80090b8 <TIM_OC5_SetConfig+0xbc>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d007      	beq.n	8009076 <TIM_OC5_SetConfig+0x7a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a14      	ldr	r2, [pc, #80]	@ (80090bc <TIM_OC5_SetConfig+0xc0>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d003      	beq.n	8009076 <TIM_OC5_SetConfig+0x7a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a13      	ldr	r2, [pc, #76]	@ (80090c0 <TIM_OC5_SetConfig+0xc4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d109      	bne.n	800908a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800907c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	021b      	lsls	r3, r3, #8
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	4313      	orrs	r3, r2
 8009088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	621a      	str	r2, [r3, #32]
}
 80090a4:	bf00      	nop
 80090a6:	371c      	adds	r7, #28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	40012c00 	.word	0x40012c00
 80090b4:	40013400 	.word	0x40013400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800

080090c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800910a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	051b      	lsls	r3, r3, #20
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4313      	orrs	r3, r2
 8009116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a18      	ldr	r2, [pc, #96]	@ (800917c <TIM_OC6_SetConfig+0xb8>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00f      	beq.n	8009140 <TIM_OC6_SetConfig+0x7c>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a17      	ldr	r2, [pc, #92]	@ (8009180 <TIM_OC6_SetConfig+0xbc>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00b      	beq.n	8009140 <TIM_OC6_SetConfig+0x7c>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a16      	ldr	r2, [pc, #88]	@ (8009184 <TIM_OC6_SetConfig+0xc0>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d007      	beq.n	8009140 <TIM_OC6_SetConfig+0x7c>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a15      	ldr	r2, [pc, #84]	@ (8009188 <TIM_OC6_SetConfig+0xc4>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d003      	beq.n	8009140 <TIM_OC6_SetConfig+0x7c>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a14      	ldr	r2, [pc, #80]	@ (800918c <TIM_OC6_SetConfig+0xc8>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d109      	bne.n	8009154 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	029b      	lsls	r3, r3, #10
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	621a      	str	r2, [r3, #32]
}
 800916e:	bf00      	nop
 8009170:	371c      	adds	r7, #28
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40012c00 	.word	0x40012c00
 8009180:	40013400 	.word	0x40013400
 8009184:	40014000 	.word	0x40014000
 8009188:	40014400 	.word	0x40014400
 800918c:	40014800 	.word	0x40014800

08009190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f023 0201 	bic.w	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f023 030a 	bic.w	r3, r3, #10
 80091cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	621a      	str	r2, [r3, #32]
}
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b087      	sub	sp, #28
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	f023 0210 	bic.w	r2, r3, #16
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	031b      	lsls	r3, r3, #12
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800922a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	4313      	orrs	r3, r2
 8009234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	bf00      	nop
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800924e:	b480      	push	{r7}
 8009250:	b085      	sub	sp, #20
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4313      	orrs	r3, r2
 800926c:	f043 0307 	orr.w	r3, r3, #7
 8009270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	609a      	str	r2, [r3, #8]
}
 8009278:	bf00      	nop
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800929e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	021a      	lsls	r2, r3, #8
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	609a      	str	r2, [r3, #8]
}
 80092b8:	bf00      	nop
 80092ba:	371c      	adds	r7, #28
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4a2f      	ldr	r2, [pc, #188]	@ (8009390 <TIM_CCxChannelCmd+0xcc>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d024      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092de:	d020      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009394 <TIM_CCxChannelCmd+0xd0>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d01c      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4a2b      	ldr	r2, [pc, #172]	@ (8009398 <TIM_CCxChannelCmd+0xd4>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d018      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4a2a      	ldr	r2, [pc, #168]	@ (800939c <TIM_CCxChannelCmd+0xd8>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d014      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4a29      	ldr	r2, [pc, #164]	@ (80093a0 <TIM_CCxChannelCmd+0xdc>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d010      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4a28      	ldr	r2, [pc, #160]	@ (80093a4 <TIM_CCxChannelCmd+0xe0>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d00c      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4a27      	ldr	r2, [pc, #156]	@ (80093a8 <TIM_CCxChannelCmd+0xe4>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d008      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4a26      	ldr	r2, [pc, #152]	@ (80093ac <TIM_CCxChannelCmd+0xe8>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d004      	beq.n	8009322 <TIM_CCxChannelCmd+0x5e>
 8009318:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800931c:	4824      	ldr	r0, [pc, #144]	@ (80093b0 <TIM_CCxChannelCmd+0xec>)
 800931e:	f7f8 fe8d 	bl	800203c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d016      	beq.n	8009356 <TIM_CCxChannelCmd+0x92>
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	2b04      	cmp	r3, #4
 800932c:	d013      	beq.n	8009356 <TIM_CCxChannelCmd+0x92>
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b08      	cmp	r3, #8
 8009332:	d010      	beq.n	8009356 <TIM_CCxChannelCmd+0x92>
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b0c      	cmp	r3, #12
 8009338:	d00d      	beq.n	8009356 <TIM_CCxChannelCmd+0x92>
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b10      	cmp	r3, #16
 800933e:	d00a      	beq.n	8009356 <TIM_CCxChannelCmd+0x92>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2b14      	cmp	r3, #20
 8009344:	d007      	beq.n	8009356 <TIM_CCxChannelCmd+0x92>
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b3c      	cmp	r3, #60	@ 0x3c
 800934a:	d004      	beq.n	8009356 <TIM_CCxChannelCmd+0x92>
 800934c:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 8009350:	4817      	ldr	r0, [pc, #92]	@ (80093b0 <TIM_CCxChannelCmd+0xec>)
 8009352:	f7f8 fe73 	bl	800203c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f003 031f 	and.w	r3, r3, #31
 800935c:	2201      	movs	r2, #1
 800935e:	fa02 f303 	lsl.w	r3, r2, r3
 8009362:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a1a      	ldr	r2, [r3, #32]
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	43db      	mvns	r3, r3
 800936c:	401a      	ands	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1a      	ldr	r2, [r3, #32]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f003 031f 	and.w	r3, r3, #31
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	fa01 f303 	lsl.w	r3, r1, r3
 8009382:	431a      	orrs	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	621a      	str	r2, [r3, #32]
}
 8009388:	bf00      	nop
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	40012c00 	.word	0x40012c00
 8009394:	40000400 	.word	0x40000400
 8009398:	40000800 	.word	0x40000800
 800939c:	40000c00 	.word	0x40000c00
 80093a0:	40013400 	.word	0x40013400
 80093a4:	40014000 	.word	0x40014000
 80093a8:	40014400 	.word	0x40014400
 80093ac:	40014800 	.word	0x40014800
 80093b0:	0800bf08 	.word	0x0800bf08

080093b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a34      	ldr	r2, [pc, #208]	@ (8009494 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d02c      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093d0:	d027      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a30      	ldr	r2, [pc, #192]	@ (8009498 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d022      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a2e      	ldr	r2, [pc, #184]	@ (800949c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d01d      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a2d      	ldr	r2, [pc, #180]	@ (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d018      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a2b      	ldr	r2, [pc, #172]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d013      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a2a      	ldr	r2, [pc, #168]	@ (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d00e      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a28      	ldr	r2, [pc, #160]	@ (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d009      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a27      	ldr	r2, [pc, #156]	@ (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d004      	beq.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009418:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800941c:	4825      	ldr	r0, [pc, #148]	@ (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800941e:	f7f8 fe0d 	bl	800203c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d020      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b10      	cmp	r3, #16
 8009430:	d01c      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b20      	cmp	r3, #32
 8009438:	d018      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b30      	cmp	r3, #48	@ 0x30
 8009440:	d014      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b40      	cmp	r3, #64	@ 0x40
 8009448:	d010      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b50      	cmp	r3, #80	@ 0x50
 8009450:	d00c      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b60      	cmp	r3, #96	@ 0x60
 8009458:	d008      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b70      	cmp	r3, #112	@ 0x70
 8009460:	d004      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009462:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8009466:	4813      	ldr	r0, [pc, #76]	@ (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009468:	f7f8 fde8 	bl	800203c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	2b80      	cmp	r3, #128	@ 0x80
 8009472:	d008      	beq.n	8009486 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800947c:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8009480:	480c      	ldr	r0, [pc, #48]	@ (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009482:	f7f8 fddb 	bl	800203c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800948c:	2b01      	cmp	r3, #1
 800948e:	d113      	bne.n	80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8009490:	2302      	movs	r3, #2
 8009492:	e0d3      	b.n	800963c <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8009494:	40012c00 	.word	0x40012c00
 8009498:	40000400 	.word	0x40000400
 800949c:	40000800 	.word	0x40000800
 80094a0:	40000c00 	.word	0x40000c00
 80094a4:	40001000 	.word	0x40001000
 80094a8:	40001400 	.word	0x40001400
 80094ac:	40013400 	.word	0x40013400
 80094b0:	40014000 	.word	0x40014000
 80094b4:	0800bf40 	.word	0x0800bf40
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a59      	ldr	r2, [pc, #356]	@ (8009644 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d004      	beq.n	80094ec <HAL_TIMEx_MasterConfigSynchronization+0x138>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a58      	ldr	r2, [pc, #352]	@ (8009648 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d161      	bne.n	80095b0 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d054      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094fc:	d04f      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009506:	d04a      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009510:	d045      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800951a:	d040      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009524:	d03b      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800952e:	d036      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009538:	d031      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8009542:	d02c      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800954c:	d027      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8009556:	d022      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009560:	d01d      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800956a:	d018      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009574:	d013      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800957e:	d00e      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8009588:	d009      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8009592:	d004      	beq.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009594:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8009598:	482c      	ldr	r0, [pc, #176]	@ (800964c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800959a:	f7f8 fd4f 	bl	800203c <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1d      	ldr	r2, [pc, #116]	@ (8009644 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d01d      	beq.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095dc:	d018      	beq.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009650 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d013      	beq.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a19      	ldr	r2, [pc, #100]	@ (8009654 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00e      	beq.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a18      	ldr	r2, [pc, #96]	@ (8009658 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d009      	beq.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a11      	ldr	r2, [pc, #68]	@ (8009648 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d004      	beq.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a14      	ldr	r2, [pc, #80]	@ (800965c <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d10c      	bne.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009616:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	4313      	orrs	r3, r2
 8009620:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40012c00 	.word	0x40012c00
 8009648:	40013400 	.word	0x40013400
 800964c:	0800bf40 	.word	0x0800bf40
 8009650:	40000400 	.word	0x40000400
 8009654:	40000800 	.word	0x40000800
 8009658:	40000c00 	.word	0x40000c00
 800965c:	40014000 	.word	0x40014000

08009660 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800966a:	2300      	movs	r3, #0
 800966c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a91      	ldr	r2, [pc, #580]	@ (80098b8 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d018      	beq.n	80096aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a8f      	ldr	r2, [pc, #572]	@ (80098bc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d013      	beq.n	80096aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a8e      	ldr	r2, [pc, #568]	@ (80098c0 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d00e      	beq.n	80096aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a8c      	ldr	r2, [pc, #560]	@ (80098c4 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d009      	beq.n	80096aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a8b      	ldr	r2, [pc, #556]	@ (80098c8 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d004      	beq.n	80096aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 80096a0:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 80096a4:	4889      	ldr	r0, [pc, #548]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80096a6:	f7f8 fcc9 	bl	800203c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096b2:	d008      	beq.n	80096c6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d004      	beq.n	80096c6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 80096bc:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 80096c0:	4882      	ldr	r0, [pc, #520]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80096c2:	f7f8 fcbb 	bl	800203c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ce:	d008      	beq.n	80096e2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 80096d8:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 80096dc:	487b      	ldr	r0, [pc, #492]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 80096de:	f7f8 fcad 	bl	800203c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d013      	beq.n	8009712 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f2:	d00e      	beq.n	8009712 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096fc:	d009      	beq.n	8009712 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009706:	d004      	beq.n	8009712 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009708:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800970c:	486f      	ldr	r0, [pc, #444]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800970e:	f7f8 fc95 	bl	800203c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	2bff      	cmp	r3, #255	@ 0xff
 8009718:	d904      	bls.n	8009724 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800971a:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800971e:	486b      	ldr	r0, [pc, #428]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009720:	f7f8 fc8c 	bl	800203c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800972c:	d008      	beq.n	8009740 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d004      	beq.n	8009740 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009736:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800973a:	4864      	ldr	r0, [pc, #400]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800973c:	f7f8 fc7e 	bl	800203c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d009      	beq.n	800975c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009750:	d004      	beq.n	800975c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009752:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 8009756:	485d      	ldr	r0, [pc, #372]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009758:	f7f8 fc70 	bl	800203c <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	2b0f      	cmp	r3, #15
 8009762:	d904      	bls.n	800976e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009764:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8009768:	4858      	ldr	r0, [pc, #352]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800976a:	f7f8 fc67 	bl	800203c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009776:	d008      	beq.n	800978a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009780:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 8009784:	4851      	ldr	r0, [pc, #324]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009786:	f7f8 fc59 	bl	800203c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009790:	2b01      	cmp	r3, #1
 8009792:	d101      	bne.n	8009798 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 8009794:	2302      	movs	r3, #2
 8009796:	e08a      	b.n	80098ae <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	041b      	lsls	r3, r3, #16
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a28      	ldr	r2, [pc, #160]	@ (80098b8 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d004      	beq.n	8009826 <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a26      	ldr	r2, [pc, #152]	@ (80098bc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d13a      	bne.n	800989c <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800982e:	d008      	beq.n	8009842 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d004      	beq.n	8009842 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8009838:	f640 0112 	movw	r1, #2066	@ 0x812
 800983c:	4823      	ldr	r0, [pc, #140]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800983e:	f7f8 fbfd 	bl	800203c <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d009      	beq.n	800985e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009852:	d004      	beq.n	800985e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8009854:	f640 0113 	movw	r1, #2067	@ 0x813
 8009858:	481c      	ldr	r0, [pc, #112]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800985a:	f7f8 fbef 	bl	800203c <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009862:	2b0f      	cmp	r3, #15
 8009864:	d904      	bls.n	8009870 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 8009866:	f640 0114 	movw	r1, #2068	@ 0x814
 800986a:	4818      	ldr	r0, [pc, #96]	@ (80098cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800986c:	f7f8 fbe6 	bl	800203c <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987a:	051b      	lsls	r3, r3, #20
 800987c:	4313      	orrs	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	4313      	orrs	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	40012c00 	.word	0x40012c00
 80098bc:	40013400 	.word	0x40013400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	40014400 	.word	0x40014400
 80098c8:	40014800 	.word	0x40014800
 80098cc:	0800bf40 	.word	0x0800bf40

080098d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e08b      	b.n	8009a36 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d023      	beq.n	800996e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a45      	ldr	r2, [pc, #276]	@ (8009a40 <HAL_UART_Init+0x134>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d041      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a43      	ldr	r2, [pc, #268]	@ (8009a44 <HAL_UART_Init+0x138>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d03c      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a42      	ldr	r2, [pc, #264]	@ (8009a48 <HAL_UART_Init+0x13c>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d037      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a40      	ldr	r2, [pc, #256]	@ (8009a4c <HAL_UART_Init+0x140>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d032      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a3f      	ldr	r2, [pc, #252]	@ (8009a50 <HAL_UART_Init+0x144>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d02d      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a3d      	ldr	r2, [pc, #244]	@ (8009a54 <HAL_UART_Init+0x148>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d028      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 8009962:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8009966:	483c      	ldr	r0, [pc, #240]	@ (8009a58 <HAL_UART_Init+0x14c>)
 8009968:	f7f8 fb68 	bl	800203c <assert_failed>
 800996c:	e022      	b.n	80099b4 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a33      	ldr	r2, [pc, #204]	@ (8009a40 <HAL_UART_Init+0x134>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d01d      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a31      	ldr	r2, [pc, #196]	@ (8009a44 <HAL_UART_Init+0x138>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d018      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a30      	ldr	r2, [pc, #192]	@ (8009a48 <HAL_UART_Init+0x13c>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d013      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a2e      	ldr	r2, [pc, #184]	@ (8009a4c <HAL_UART_Init+0x140>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d00e      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a2d      	ldr	r2, [pc, #180]	@ (8009a50 <HAL_UART_Init+0x144>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d009      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a2b      	ldr	r2, [pc, #172]	@ (8009a54 <HAL_UART_Init+0x148>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d004      	beq.n	80099b4 <HAL_UART_Init+0xa8>
 80099aa:	f240 1157 	movw	r1, #343	@ 0x157
 80099ae:	482a      	ldr	r0, [pc, #168]	@ (8009a58 <HAL_UART_Init+0x14c>)
 80099b0:	f7f8 fb44 	bl	800203c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d106      	bne.n	80099ca <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7f9 f90b 	bl	8002be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2224      	movs	r2, #36	@ 0x24
 80099ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f022 0201 	bic.w	r2, r2, #1
 80099de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fc1f 	bl	800a22c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f8be 	bl	8009b70 <UART_SetConfig>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e01b      	b.n	8009a36 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f042 0201 	orr.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fd5c 	bl	800a4ec <UART_CheckIdleState>
 8009a34:	4603      	mov	r3, r0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	40013800 	.word	0x40013800
 8009a44:	40004400 	.word	0x40004400
 8009a48:	40004800 	.word	0x40004800
 8009a4c:	40004c00 	.word	0x40004c00
 8009a50:	40005000 	.word	0x40005000
 8009a54:	40008000 	.word	0x40008000
 8009a58:	0800bf7c 	.word	0x0800bf7c

08009a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	@ 0x28
 8009a60:	af02      	add	r7, sp, #8
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a70:	2b20      	cmp	r3, #32
 8009a72:	d177      	bne.n	8009b64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <HAL_UART_Transmit+0x24>
 8009a7a:	88fb      	ldrh	r3, [r7, #6]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e070      	b.n	8009b66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2221      	movs	r2, #33	@ 0x21
 8009a90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a92:	f7f9 f995 	bl	8002dc0 <HAL_GetTick>
 8009a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	88fa      	ldrh	r2, [r7, #6]
 8009a9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	88fa      	ldrh	r2, [r7, #6]
 8009aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab0:	d108      	bne.n	8009ac4 <HAL_UART_Transmit+0x68>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d104      	bne.n	8009ac4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	e003      	b.n	8009acc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009acc:	e02f      	b.n	8009b2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2180      	movs	r1, #128	@ 0x80
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fdaf 	bl	800a63c <UART_WaitOnFlagUntilTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e03b      	b.n	8009b66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10b      	bne.n	8009b0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	881a      	ldrh	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b00:	b292      	uxth	r2, r2
 8009b02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	3302      	adds	r3, #2
 8009b08:	61bb      	str	r3, [r7, #24]
 8009b0a:	e007      	b.n	8009b1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	781a      	ldrb	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	3b01      	subs	r3, #1
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1c9      	bne.n	8009ace <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2200      	movs	r2, #0
 8009b42:	2140      	movs	r1, #64	@ 0x40
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 fd79 	bl	800a63c <UART_WaitOnFlagUntilTimeout>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2220      	movs	r2, #32
 8009b54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e005      	b.n	8009b66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	e000      	b.n	8009b66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009b64:	2302      	movs	r3, #2
  }
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b74:	b08a      	sub	sp, #40	@ 0x28
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	4a9e      	ldr	r2, [pc, #632]	@ (8009e00 <UART_SetConfig+0x290>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d904      	bls.n	8009b94 <UART_SetConfig+0x24>
 8009b8a:	f640 4158 	movw	r1, #3160	@ 0xc58
 8009b8e:	489d      	ldr	r0, [pc, #628]	@ (8009e04 <UART_SetConfig+0x294>)
 8009b90:	f7f8 fa54 	bl	800203c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b9c:	d00d      	beq.n	8009bba <UART_SetConfig+0x4a>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d009      	beq.n	8009bba <UART_SetConfig+0x4a>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bae:	d004      	beq.n	8009bba <UART_SetConfig+0x4a>
 8009bb0:	f640 4159 	movw	r1, #3161	@ 0xc59
 8009bb4:	4893      	ldr	r0, [pc, #588]	@ (8009e04 <UART_SetConfig+0x294>)
 8009bb6:	f7f8 fa41 	bl	800203c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a92      	ldr	r2, [pc, #584]	@ (8009e08 <UART_SetConfig+0x298>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d10e      	bne.n	8009be2 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d030      	beq.n	8009c2e <UART_SetConfig+0xbe>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bd4:	d02b      	beq.n	8009c2e <UART_SetConfig+0xbe>
 8009bd6:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8009bda:	488a      	ldr	r0, [pc, #552]	@ (8009e04 <UART_SetConfig+0x294>)
 8009bdc:	f7f8 fa2e 	bl	800203c <assert_failed>
 8009be0:	e025      	b.n	8009c2e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bea:	d012      	beq.n	8009c12 <UART_SetConfig+0xa2>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00e      	beq.n	8009c12 <UART_SetConfig+0xa2>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009bfc:	d009      	beq.n	8009c12 <UART_SetConfig+0xa2>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c06:	d004      	beq.n	8009c12 <UART_SetConfig+0xa2>
 8009c08:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8009c0c:	487d      	ldr	r0, [pc, #500]	@ (8009e04 <UART_SetConfig+0x294>)
 8009c0e:	f7f8 fa15 	bl	800203c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d009      	beq.n	8009c2e <UART_SetConfig+0xbe>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c22:	d004      	beq.n	8009c2e <UART_SetConfig+0xbe>
 8009c24:	f640 4161 	movw	r1, #3169	@ 0xc61
 8009c28:	4876      	ldr	r0, [pc, #472]	@ (8009e04 <UART_SetConfig+0x294>)
 8009c2a:	f7f8 fa07 	bl	800203c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00e      	beq.n	8009c54 <UART_SetConfig+0xe4>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c3e:	d009      	beq.n	8009c54 <UART_SetConfig+0xe4>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009c48:	d004      	beq.n	8009c54 <UART_SetConfig+0xe4>
 8009c4a:	f640 4164 	movw	r1, #3172	@ 0xc64
 8009c4e:	486d      	ldr	r0, [pc, #436]	@ (8009e04 <UART_SetConfig+0x294>)
 8009c50:	f7f8 f9f4 	bl	800203c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	f023 030c 	bic.w	r3, r3, #12
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d103      	bne.n	8009c68 <UART_SetConfig+0xf8>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d104      	bne.n	8009c72 <UART_SetConfig+0x102>
 8009c68:	f640 4165 	movw	r1, #3173	@ 0xc65
 8009c6c:	4865      	ldr	r0, [pc, #404]	@ (8009e04 <UART_SetConfig+0x294>)
 8009c6e:	f7f8 f9e5 	bl	800203c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d013      	beq.n	8009ca2 <UART_SetConfig+0x132>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c82:	d00e      	beq.n	8009ca2 <UART_SetConfig+0x132>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c8c:	d009      	beq.n	8009ca2 <UART_SetConfig+0x132>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c96:	d004      	beq.n	8009ca2 <UART_SetConfig+0x132>
 8009c98:	f640 4166 	movw	r1, #3174	@ 0xc66
 8009c9c:	4859      	ldr	r0, [pc, #356]	@ (8009e04 <UART_SetConfig+0x294>)
 8009c9e:	f7f8 f9cd 	bl	800203c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <UART_SetConfig+0x14e>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	69db      	ldr	r3, [r3, #28]
 8009cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cb2:	d004      	beq.n	8009cbe <UART_SetConfig+0x14e>
 8009cb4:	f640 4167 	movw	r1, #3175	@ 0xc67
 8009cb8:	4852      	ldr	r0, [pc, #328]	@ (8009e04 <UART_SetConfig+0x294>)
 8009cba:	f7f8 f9bf 	bl	800203c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	689a      	ldr	r2, [r3, #8]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8009e0c <UART_SetConfig+0x29c>)
 8009cde:	4013      	ands	r3, r2
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	6812      	ldr	r2, [r2, #0]
 8009ce4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ce6:	430b      	orrs	r3, r1
 8009ce8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68da      	ldr	r2, [r3, #12]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8009e08 <UART_SetConfig+0x298>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d004      	beq.n	8009d1a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d16:	4313      	orrs	r3, r2
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a37      	ldr	r2, [pc, #220]	@ (8009e10 <UART_SetConfig+0x2a0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d125      	bne.n	8009d84 <UART_SetConfig+0x214>
 8009d38:	4b36      	ldr	r3, [pc, #216]	@ (8009e14 <UART_SetConfig+0x2a4>)
 8009d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d81a      	bhi.n	8009d7c <UART_SetConfig+0x20c>
 8009d46:	a201      	add	r2, pc, #4	@ (adr r2, 8009d4c <UART_SetConfig+0x1dc>)
 8009d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4c:	08009d5d 	.word	0x08009d5d
 8009d50:	08009d6d 	.word	0x08009d6d
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009d75 	.word	0x08009d75
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d62:	e114      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009d64:	2302      	movs	r3, #2
 8009d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d6a:	e110      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009d6c:	2304      	movs	r3, #4
 8009d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d72:	e10c      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009d74:	2308      	movs	r3, #8
 8009d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d7a:	e108      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d82:	e104      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a23      	ldr	r2, [pc, #140]	@ (8009e18 <UART_SetConfig+0x2a8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d146      	bne.n	8009e1c <UART_SetConfig+0x2ac>
 8009d8e:	4b21      	ldr	r3, [pc, #132]	@ (8009e14 <UART_SetConfig+0x2a4>)
 8009d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d94:	f003 030c 	and.w	r3, r3, #12
 8009d98:	2b0c      	cmp	r3, #12
 8009d9a:	d82d      	bhi.n	8009df8 <UART_SetConfig+0x288>
 8009d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009da4 <UART_SetConfig+0x234>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009dd9 	.word	0x08009dd9
 8009da8:	08009df9 	.word	0x08009df9
 8009dac:	08009df9 	.word	0x08009df9
 8009db0:	08009df9 	.word	0x08009df9
 8009db4:	08009de9 	.word	0x08009de9
 8009db8:	08009df9 	.word	0x08009df9
 8009dbc:	08009df9 	.word	0x08009df9
 8009dc0:	08009df9 	.word	0x08009df9
 8009dc4:	08009de1 	.word	0x08009de1
 8009dc8:	08009df9 	.word	0x08009df9
 8009dcc:	08009df9 	.word	0x08009df9
 8009dd0:	08009df9 	.word	0x08009df9
 8009dd4:	08009df1 	.word	0x08009df1
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dde:	e0d6      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009de0:	2302      	movs	r3, #2
 8009de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009de6:	e0d2      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009de8:	2304      	movs	r3, #4
 8009dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dee:	e0ce      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009df0:	2308      	movs	r3, #8
 8009df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009df6:	e0ca      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009df8:	2310      	movs	r3, #16
 8009dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dfe:	e0c6      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009e00:	00989680 	.word	0x00989680
 8009e04:	0800bf7c 	.word	0x0800bf7c
 8009e08:	40008000 	.word	0x40008000
 8009e0c:	efff69f3 	.word	0xefff69f3
 8009e10:	40013800 	.word	0x40013800
 8009e14:	40021000 	.word	0x40021000
 8009e18:	40004400 	.word	0x40004400
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4aae      	ldr	r2, [pc, #696]	@ (800a0dc <UART_SetConfig+0x56c>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d125      	bne.n	8009e72 <UART_SetConfig+0x302>
 8009e26:	4bae      	ldr	r3, [pc, #696]	@ (800a0e0 <UART_SetConfig+0x570>)
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e30:	2b30      	cmp	r3, #48	@ 0x30
 8009e32:	d016      	beq.n	8009e62 <UART_SetConfig+0x2f2>
 8009e34:	2b30      	cmp	r3, #48	@ 0x30
 8009e36:	d818      	bhi.n	8009e6a <UART_SetConfig+0x2fa>
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	d00a      	beq.n	8009e52 <UART_SetConfig+0x2e2>
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	d814      	bhi.n	8009e6a <UART_SetConfig+0x2fa>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <UART_SetConfig+0x2da>
 8009e44:	2b10      	cmp	r3, #16
 8009e46:	d008      	beq.n	8009e5a <UART_SetConfig+0x2ea>
 8009e48:	e00f      	b.n	8009e6a <UART_SetConfig+0x2fa>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e50:	e09d      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009e52:	2302      	movs	r3, #2
 8009e54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e58:	e099      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e60:	e095      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009e62:	2308      	movs	r3, #8
 8009e64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e68:	e091      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009e6a:	2310      	movs	r3, #16
 8009e6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e70:	e08d      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a9b      	ldr	r2, [pc, #620]	@ (800a0e4 <UART_SetConfig+0x574>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d125      	bne.n	8009ec8 <UART_SetConfig+0x358>
 8009e7c:	4b98      	ldr	r3, [pc, #608]	@ (800a0e0 <UART_SetConfig+0x570>)
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e88:	d016      	beq.n	8009eb8 <UART_SetConfig+0x348>
 8009e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e8c:	d818      	bhi.n	8009ec0 <UART_SetConfig+0x350>
 8009e8e:	2b80      	cmp	r3, #128	@ 0x80
 8009e90:	d00a      	beq.n	8009ea8 <UART_SetConfig+0x338>
 8009e92:	2b80      	cmp	r3, #128	@ 0x80
 8009e94:	d814      	bhi.n	8009ec0 <UART_SetConfig+0x350>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <UART_SetConfig+0x330>
 8009e9a:	2b40      	cmp	r3, #64	@ 0x40
 8009e9c:	d008      	beq.n	8009eb0 <UART_SetConfig+0x340>
 8009e9e:	e00f      	b.n	8009ec0 <UART_SetConfig+0x350>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ea6:	e072      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eae:	e06e      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eb6:	e06a      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009eb8:	2308      	movs	r3, #8
 8009eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ebe:	e066      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009ec0:	2310      	movs	r3, #16
 8009ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ec6:	e062      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a86      	ldr	r2, [pc, #536]	@ (800a0e8 <UART_SetConfig+0x578>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d12a      	bne.n	8009f28 <UART_SetConfig+0x3b8>
 8009ed2:	4b83      	ldr	r3, [pc, #524]	@ (800a0e0 <UART_SetConfig+0x570>)
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ee0:	d01a      	beq.n	8009f18 <UART_SetConfig+0x3a8>
 8009ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ee6:	d81b      	bhi.n	8009f20 <UART_SetConfig+0x3b0>
 8009ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009eec:	d00c      	beq.n	8009f08 <UART_SetConfig+0x398>
 8009eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ef2:	d815      	bhi.n	8009f20 <UART_SetConfig+0x3b0>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <UART_SetConfig+0x390>
 8009ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009efc:	d008      	beq.n	8009f10 <UART_SetConfig+0x3a0>
 8009efe:	e00f      	b.n	8009f20 <UART_SetConfig+0x3b0>
 8009f00:	2300      	movs	r3, #0
 8009f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f06:	e042      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f0e:	e03e      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f10:	2304      	movs	r3, #4
 8009f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f16:	e03a      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f18:	2308      	movs	r3, #8
 8009f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f1e:	e036      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f20:	2310      	movs	r3, #16
 8009f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f26:	e032      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a6f      	ldr	r2, [pc, #444]	@ (800a0ec <UART_SetConfig+0x57c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d12a      	bne.n	8009f88 <UART_SetConfig+0x418>
 8009f32:	4b6b      	ldr	r3, [pc, #428]	@ (800a0e0 <UART_SetConfig+0x570>)
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f40:	d01a      	beq.n	8009f78 <UART_SetConfig+0x408>
 8009f42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f46:	d81b      	bhi.n	8009f80 <UART_SetConfig+0x410>
 8009f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f4c:	d00c      	beq.n	8009f68 <UART_SetConfig+0x3f8>
 8009f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f52:	d815      	bhi.n	8009f80 <UART_SetConfig+0x410>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d003      	beq.n	8009f60 <UART_SetConfig+0x3f0>
 8009f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f5c:	d008      	beq.n	8009f70 <UART_SetConfig+0x400>
 8009f5e:	e00f      	b.n	8009f80 <UART_SetConfig+0x410>
 8009f60:	2300      	movs	r3, #0
 8009f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f66:	e012      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f6e:	e00e      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f70:	2304      	movs	r3, #4
 8009f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f76:	e00a      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f7e:	e006      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f80:	2310      	movs	r3, #16
 8009f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f86:	e002      	b.n	8009f8e <UART_SetConfig+0x41e>
 8009f88:	2310      	movs	r3, #16
 8009f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a56      	ldr	r2, [pc, #344]	@ (800a0ec <UART_SetConfig+0x57c>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d17a      	bne.n	800a08e <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d824      	bhi.n	8009fea <UART_SetConfig+0x47a>
 8009fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa8 <UART_SetConfig+0x438>)
 8009fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa6:	bf00      	nop
 8009fa8:	08009fcd 	.word	0x08009fcd
 8009fac:	08009feb 	.word	0x08009feb
 8009fb0:	08009fd5 	.word	0x08009fd5
 8009fb4:	08009feb 	.word	0x08009feb
 8009fb8:	08009fdb 	.word	0x08009fdb
 8009fbc:	08009feb 	.word	0x08009feb
 8009fc0:	08009feb 	.word	0x08009feb
 8009fc4:	08009feb 	.word	0x08009feb
 8009fc8:	08009fe3 	.word	0x08009fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fcc:	f7fa ff3a 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8009fd0:	61f8      	str	r0, [r7, #28]
        break;
 8009fd2:	e010      	b.n	8009ff6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fd4:	4b46      	ldr	r3, [pc, #280]	@ (800a0f0 <UART_SetConfig+0x580>)
 8009fd6:	61fb      	str	r3, [r7, #28]
        break;
 8009fd8:	e00d      	b.n	8009ff6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fda:	f7fa fe9b 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8009fde:	61f8      	str	r0, [r7, #28]
        break;
 8009fe0:	e009      	b.n	8009ff6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fe6:	61fb      	str	r3, [r7, #28]
        break;
 8009fe8:	e005      	b.n	8009ff6 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009ff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 8107 	beq.w	800a20c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	4613      	mov	r3, r2
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	4413      	add	r3, r2
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d305      	bcc.n	800a01a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a014:	69fa      	ldr	r2, [r7, #28]
 800a016:	429a      	cmp	r2, r3
 800a018:	d903      	bls.n	800a022 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a020:	e0f4      	b.n	800a20c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	2200      	movs	r2, #0
 800a026:	461c      	mov	r4, r3
 800a028:	4615      	mov	r5, r2
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	022b      	lsls	r3, r5, #8
 800a034:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a038:	0222      	lsls	r2, r4, #8
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	6849      	ldr	r1, [r1, #4]
 800a03e:	0849      	lsrs	r1, r1, #1
 800a040:	2000      	movs	r0, #0
 800a042:	4688      	mov	r8, r1
 800a044:	4681      	mov	r9, r0
 800a046:	eb12 0a08 	adds.w	sl, r2, r8
 800a04a:	eb43 0b09 	adc.w	fp, r3, r9
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	603b      	str	r3, [r7, #0]
 800a056:	607a      	str	r2, [r7, #4]
 800a058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a05c:	4650      	mov	r0, sl
 800a05e:	4659      	mov	r1, fp
 800a060:	f7f6 f906 	bl	8000270 <__aeabi_uldivmod>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4613      	mov	r3, r2
 800a06a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a072:	d308      	bcc.n	800a086 <UART_SetConfig+0x516>
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a07a:	d204      	bcs.n	800a086 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	60da      	str	r2, [r3, #12]
 800a084:	e0c2      	b.n	800a20c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a08c:	e0be      	b.n	800a20c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a096:	d16a      	bne.n	800a16e <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800a098:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d834      	bhi.n	800a10a <UART_SetConfig+0x59a>
 800a0a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a8 <UART_SetConfig+0x538>)
 800a0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a6:	bf00      	nop
 800a0a8:	0800a0cd 	.word	0x0800a0cd
 800a0ac:	0800a0d5 	.word	0x0800a0d5
 800a0b0:	0800a0f5 	.word	0x0800a0f5
 800a0b4:	0800a10b 	.word	0x0800a10b
 800a0b8:	0800a0fb 	.word	0x0800a0fb
 800a0bc:	0800a10b 	.word	0x0800a10b
 800a0c0:	0800a10b 	.word	0x0800a10b
 800a0c4:	0800a10b 	.word	0x0800a10b
 800a0c8:	0800a103 	.word	0x0800a103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0cc:	f7fa feba 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 800a0d0:	61f8      	str	r0, [r7, #28]
        break;
 800a0d2:	e020      	b.n	800a116 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0d4:	f7fa fecc 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
 800a0d8:	61f8      	str	r0, [r7, #28]
        break;
 800a0da:	e01c      	b.n	800a116 <UART_SetConfig+0x5a6>
 800a0dc:	40004800 	.word	0x40004800
 800a0e0:	40021000 	.word	0x40021000
 800a0e4:	40004c00 	.word	0x40004c00
 800a0e8:	40005000 	.word	0x40005000
 800a0ec:	40008000 	.word	0x40008000
 800a0f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0f4:	4b4c      	ldr	r3, [pc, #304]	@ (800a228 <UART_SetConfig+0x6b8>)
 800a0f6:	61fb      	str	r3, [r7, #28]
        break;
 800a0f8:	e00d      	b.n	800a116 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0fa:	f7fa fe0b 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 800a0fe:	61f8      	str	r0, [r7, #28]
        break;
 800a100:	e009      	b.n	800a116 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a106:	61fb      	str	r3, [r7, #28]
        break;
 800a108:	e005      	b.n	800a116 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d077      	beq.n	800a20c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	005a      	lsls	r2, r3, #1
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	085b      	lsrs	r3, r3, #1
 800a126:	441a      	add	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a130:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	2b0f      	cmp	r3, #15
 800a136:	d916      	bls.n	800a166 <UART_SetConfig+0x5f6>
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a13e:	d212      	bcs.n	800a166 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	b29b      	uxth	r3, r3
 800a144:	f023 030f 	bic.w	r3, r3, #15
 800a148:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	085b      	lsrs	r3, r3, #1
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f003 0307 	and.w	r3, r3, #7
 800a154:	b29a      	uxth	r2, r3
 800a156:	8afb      	ldrh	r3, [r7, #22]
 800a158:	4313      	orrs	r3, r2
 800a15a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	8afa      	ldrh	r2, [r7, #22]
 800a162:	60da      	str	r2, [r3, #12]
 800a164:	e052      	b.n	800a20c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a16c:	e04e      	b.n	800a20c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a16e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a172:	2b08      	cmp	r3, #8
 800a174:	d827      	bhi.n	800a1c6 <UART_SetConfig+0x656>
 800a176:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <UART_SetConfig+0x60c>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a1a1 	.word	0x0800a1a1
 800a180:	0800a1a9 	.word	0x0800a1a9
 800a184:	0800a1b1 	.word	0x0800a1b1
 800a188:	0800a1c7 	.word	0x0800a1c7
 800a18c:	0800a1b7 	.word	0x0800a1b7
 800a190:	0800a1c7 	.word	0x0800a1c7
 800a194:	0800a1c7 	.word	0x0800a1c7
 800a198:	0800a1c7 	.word	0x0800a1c7
 800a19c:	0800a1bf 	.word	0x0800a1bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1a0:	f7fa fe50 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 800a1a4:	61f8      	str	r0, [r7, #28]
        break;
 800a1a6:	e014      	b.n	800a1d2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1a8:	f7fa fe62 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
 800a1ac:	61f8      	str	r0, [r7, #28]
        break;
 800a1ae:	e010      	b.n	800a1d2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a228 <UART_SetConfig+0x6b8>)
 800a1b2:	61fb      	str	r3, [r7, #28]
        break;
 800a1b4:	e00d      	b.n	800a1d2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1b6:	f7fa fdad 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 800a1ba:	61f8      	str	r0, [r7, #28]
        break;
 800a1bc:	e009      	b.n	800a1d2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1c2:	61fb      	str	r3, [r7, #28]
        break;
 800a1c4:	e005      	b.n	800a1d2 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a1d0:	bf00      	nop
    }

    if (pclk != 0U)
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d019      	beq.n	800a20c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	085a      	lsrs	r2, r3, #1
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	441a      	add	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	2b0f      	cmp	r3, #15
 800a1f0:	d909      	bls.n	800a206 <UART_SetConfig+0x696>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1f8:	d205      	bcs.n	800a206 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	60da      	str	r2, [r3, #12]
 800a204:	e002      	b.n	800a20c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a218:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3728      	adds	r7, #40	@ 0x28
 800a220:	46bd      	mov	sp, r7
 800a222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a226:	bf00      	nop
 800a228:	00f42400 	.word	0x00f42400

0800a22c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a238:	2bff      	cmp	r3, #255	@ 0xff
 800a23a:	d904      	bls.n	800a246 <UART_AdvFeatureConfig+0x1a>
 800a23c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800a240:	4891      	ldr	r0, [pc, #580]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a242:	f7f7 fefb 	bl	800203c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24a:	f003 0308 	and.w	r3, r3, #8
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d018      	beq.n	800a284 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a256:	2b00      	cmp	r3, #0
 800a258:	d009      	beq.n	800a26e <UART_AdvFeatureConfig+0x42>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a25e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a262:	d004      	beq.n	800a26e <UART_AdvFeatureConfig+0x42>
 800a264:	f640 5152 	movw	r1, #3410	@ 0xd52
 800a268:	4887      	ldr	r0, [pc, #540]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a26a:	f7f7 fee7 	bl	800203c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	430a      	orrs	r2, r1
 800a282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d018      	beq.n	800a2c2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a294:	2b00      	cmp	r3, #0
 800a296:	d009      	beq.n	800a2ac <UART_AdvFeatureConfig+0x80>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2a0:	d004      	beq.n	800a2ac <UART_AdvFeatureConfig+0x80>
 800a2a2:	f640 5159 	movw	r1, #3417	@ 0xd59
 800a2a6:	4878      	ldr	r0, [pc, #480]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a2a8:	f7f7 fec8 	bl	800203c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d018      	beq.n	800a300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d009      	beq.n	800a2ea <UART_AdvFeatureConfig+0xbe>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2de:	d004      	beq.n	800a2ea <UART_AdvFeatureConfig+0xbe>
 800a2e0:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800a2e4:	4868      	ldr	r0, [pc, #416]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a2e6:	f7f7 fea9 	bl	800203c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d018      	beq.n	800a33e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a310:	2b00      	cmp	r3, #0
 800a312:	d009      	beq.n	800a328 <UART_AdvFeatureConfig+0xfc>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a318:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a31c:	d004      	beq.n	800a328 <UART_AdvFeatureConfig+0xfc>
 800a31e:	f640 5167 	movw	r1, #3431	@ 0xd67
 800a322:	4859      	ldr	r0, [pc, #356]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a324:	f7f7 fe8a 	bl	800203c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a342:	f003 0310 	and.w	r3, r3, #16
 800a346:	2b00      	cmp	r3, #0
 800a348:	d018      	beq.n	800a37c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d009      	beq.n	800a366 <UART_AdvFeatureConfig+0x13a>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a35a:	d004      	beq.n	800a366 <UART_AdvFeatureConfig+0x13a>
 800a35c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800a360:	4849      	ldr	r0, [pc, #292]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a362:	f7f7 fe6b 	bl	800203c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a380:	f003 0320 	and.w	r3, r3, #32
 800a384:	2b00      	cmp	r3, #0
 800a386:	d018      	beq.n	800a3ba <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d009      	beq.n	800a3a4 <UART_AdvFeatureConfig+0x178>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a398:	d004      	beq.n	800a3a4 <UART_AdvFeatureConfig+0x178>
 800a39a:	f640 5175 	movw	r1, #3445	@ 0xd75
 800a39e:	483a      	ldr	r0, [pc, #232]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a3a0:	f7f7 fe4c 	bl	800203c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d06c      	beq.n	800a4a0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a30      	ldr	r2, [pc, #192]	@ (800a48c <UART_AdvFeatureConfig+0x260>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d018      	beq.n	800a402 <UART_AdvFeatureConfig+0x1d6>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a2e      	ldr	r2, [pc, #184]	@ (800a490 <UART_AdvFeatureConfig+0x264>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d013      	beq.n	800a402 <UART_AdvFeatureConfig+0x1d6>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a2d      	ldr	r2, [pc, #180]	@ (800a494 <UART_AdvFeatureConfig+0x268>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00e      	beq.n	800a402 <UART_AdvFeatureConfig+0x1d6>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a2b      	ldr	r2, [pc, #172]	@ (800a498 <UART_AdvFeatureConfig+0x26c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d009      	beq.n	800a402 <UART_AdvFeatureConfig+0x1d6>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a49c <UART_AdvFeatureConfig+0x270>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d004      	beq.n	800a402 <UART_AdvFeatureConfig+0x1d6>
 800a3f8:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800a3fc:	4822      	ldr	r0, [pc, #136]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a3fe:	f7f7 fe1d 	bl	800203c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a406:	2b00      	cmp	r3, #0
 800a408:	d009      	beq.n	800a41e <UART_AdvFeatureConfig+0x1f2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a40e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a412:	d004      	beq.n	800a41e <UART_AdvFeatureConfig+0x1f2>
 800a414:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800a418:	481b      	ldr	r0, [pc, #108]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a41a:	f7f7 fe0f 	bl	800203c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a43c:	d130      	bne.n	800a4a0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a442:	2b00      	cmp	r3, #0
 800a444:	d013      	beq.n	800a46e <UART_AdvFeatureConfig+0x242>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a44a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a44e:	d00e      	beq.n	800a46e <UART_AdvFeatureConfig+0x242>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a454:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a458:	d009      	beq.n	800a46e <UART_AdvFeatureConfig+0x242>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a45e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a462:	d004      	beq.n	800a46e <UART_AdvFeatureConfig+0x242>
 800a464:	f640 5182 	movw	r1, #3458	@ 0xd82
 800a468:	4807      	ldr	r0, [pc, #28]	@ (800a488 <UART_AdvFeatureConfig+0x25c>)
 800a46a:	f7f7 fde7 	bl	800203c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	605a      	str	r2, [r3, #4]
 800a484:	e00c      	b.n	800a4a0 <UART_AdvFeatureConfig+0x274>
 800a486:	bf00      	nop
 800a488:	0800bf7c 	.word	0x0800bf7c
 800a48c:	40013800 	.word	0x40013800
 800a490:	40004400 	.word	0x40004400
 800a494:	40004800 	.word	0x40004800
 800a498:	40004c00 	.word	0x40004c00
 800a49c:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d018      	beq.n	800a4de <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d009      	beq.n	800a4c8 <UART_AdvFeatureConfig+0x29c>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a4bc:	d004      	beq.n	800a4c8 <UART_AdvFeatureConfig+0x29c>
 800a4be:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800a4c2:	4809      	ldr	r0, [pc, #36]	@ (800a4e8 <UART_AdvFeatureConfig+0x2bc>)
 800a4c4:	f7f7 fdba 	bl	800203c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	605a      	str	r2, [r3, #4]
  }
}
 800a4de:	bf00      	nop
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	0800bf7c 	.word	0x0800bf7c

0800a4ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b098      	sub	sp, #96	@ 0x60
 800a4f0:	af02      	add	r7, sp, #8
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4fc:	f7f8 fc60 	bl	8002dc0 <HAL_GetTick>
 800a500:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d12e      	bne.n	800a56e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a518:	2200      	movs	r2, #0
 800a51a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f88c 	bl	800a63c <UART_WaitOnFlagUntilTimeout>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d021      	beq.n	800a56e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a532:	e853 3f00 	ldrex	r3, [r3]
 800a536:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a53e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	461a      	mov	r2, r3
 800a546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a548:	647b      	str	r3, [r7, #68]	@ 0x44
 800a54a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a54e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a550:	e841 2300 	strex	r3, r2, [r1]
 800a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e6      	bne.n	800a52a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2220      	movs	r2, #32
 800a560:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e062      	b.n	800a634 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0304 	and.w	r3, r3, #4
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d149      	bne.n	800a610 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a57c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a584:	2200      	movs	r2, #0
 800a586:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f856 	bl	800a63c <UART_WaitOnFlagUntilTimeout>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d03c      	beq.n	800a610 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	623b      	str	r3, [r7, #32]
   return(result);
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e6      	bne.n	800a596 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 0301 	bic.w	r3, r3, #1
 800a5de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5e8:	61fa      	str	r2, [r7, #28]
 800a5ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	69b9      	ldr	r1, [r7, #24]
 800a5ee:	69fa      	ldr	r2, [r7, #28]
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e5      	bne.n	800a5c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e011      	b.n	800a634 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2220      	movs	r2, #32
 800a614:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2220      	movs	r2, #32
 800a61a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3758      	adds	r7, #88	@ 0x58
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	4613      	mov	r3, r2
 800a64a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a64c:	e04f      	b.n	800a6ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a654:	d04b      	beq.n	800a6ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a656:	f7f8 fbb3 	bl	8002dc0 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	429a      	cmp	r2, r3
 800a664:	d302      	bcc.n	800a66c <UART_WaitOnFlagUntilTimeout+0x30>
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e04e      	b.n	800a70e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d037      	beq.n	800a6ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b80      	cmp	r3, #128	@ 0x80
 800a682:	d034      	beq.n	800a6ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2b40      	cmp	r3, #64	@ 0x40
 800a688:	d031      	beq.n	800a6ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	69db      	ldr	r3, [r3, #28]
 800a690:	f003 0308 	and.w	r3, r3, #8
 800a694:	2b08      	cmp	r3, #8
 800a696:	d110      	bne.n	800a6ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2208      	movs	r2, #8
 800a69e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 f838 	bl	800a716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e029      	b.n	800a70e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6c8:	d111      	bne.n	800a6ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f000 f81e 	bl	800a716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e00f      	b.n	800a70e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	69da      	ldr	r2, [r3, #28]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	bf0c      	ite	eq
 800a6fe:	2301      	moveq	r3, #1
 800a700:	2300      	movne	r3, #0
 800a702:	b2db      	uxtb	r3, r3
 800a704:	461a      	mov	r2, r3
 800a706:	79fb      	ldrb	r3, [r7, #7]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d0a0      	beq.n	800a64e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a716:	b480      	push	{r7}
 800a718:	b095      	sub	sp, #84	@ 0x54
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a73c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a73e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a742:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a744:	e841 2300 	strex	r3, r2, [r1]
 800a748:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e6      	bne.n	800a71e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3308      	adds	r3, #8
 800a756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	e853 3f00 	ldrex	r3, [r3]
 800a75e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	f023 0301 	bic.w	r3, r3, #1
 800a766:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3308      	adds	r3, #8
 800a76e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a772:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a774:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a778:	e841 2300 	strex	r3, r2, [r1]
 800a77c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1e5      	bne.n	800a750 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d118      	bne.n	800a7be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	60bb      	str	r3, [r7, #8]
   return(result);
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f023 0310 	bic.w	r3, r3, #16
 800a7a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7aa:	61bb      	str	r3, [r7, #24]
 800a7ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ae:	6979      	ldr	r1, [r7, #20]
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	e841 2300 	strex	r3, r2, [r1]
 800a7b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1e6      	bne.n	800a78c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2220      	movs	r2, #32
 800a7c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a7d2:	bf00      	nop
 800a7d4:	3754      	adds	r7, #84	@ 0x54
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
	...

0800a7e0 <calloc>:
 800a7e0:	4b02      	ldr	r3, [pc, #8]	@ (800a7ec <calloc+0xc>)
 800a7e2:	460a      	mov	r2, r1
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	f000 b802 	b.w	800a7f0 <_calloc_r>
 800a7ec:	20000028 	.word	0x20000028

0800a7f0 <_calloc_r>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	fba1 5402 	umull	r5, r4, r1, r2
 800a7f6:	b934      	cbnz	r4, 800a806 <_calloc_r+0x16>
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	f000 f83f 	bl	800a87c <_malloc_r>
 800a7fe:	4606      	mov	r6, r0
 800a800:	b928      	cbnz	r0, 800a80e <_calloc_r+0x1e>
 800a802:	4630      	mov	r0, r6
 800a804:	bd70      	pop	{r4, r5, r6, pc}
 800a806:	220c      	movs	r2, #12
 800a808:	6002      	str	r2, [r0, #0]
 800a80a:	2600      	movs	r6, #0
 800a80c:	e7f9      	b.n	800a802 <_calloc_r+0x12>
 800a80e:	462a      	mov	r2, r5
 800a810:	4621      	mov	r1, r4
 800a812:	f000 fa13 	bl	800ac3c <memset>
 800a816:	e7f4      	b.n	800a802 <_calloc_r+0x12>

0800a818 <malloc>:
 800a818:	4b02      	ldr	r3, [pc, #8]	@ (800a824 <malloc+0xc>)
 800a81a:	4601      	mov	r1, r0
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	f000 b82d 	b.w	800a87c <_malloc_r>
 800a822:	bf00      	nop
 800a824:	20000028 	.word	0x20000028

0800a828 <free>:
 800a828:	4b02      	ldr	r3, [pc, #8]	@ (800a834 <free+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f000 ba9f 	b.w	800ad70 <_free_r>
 800a832:	bf00      	nop
 800a834:	20000028 	.word	0x20000028

0800a838 <sbrk_aligned>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	4e0f      	ldr	r6, [pc, #60]	@ (800a878 <sbrk_aligned+0x40>)
 800a83c:	460c      	mov	r4, r1
 800a83e:	6831      	ldr	r1, [r6, #0]
 800a840:	4605      	mov	r5, r0
 800a842:	b911      	cbnz	r1, 800a84a <sbrk_aligned+0x12>
 800a844:	f000 fa36 	bl	800acb4 <_sbrk_r>
 800a848:	6030      	str	r0, [r6, #0]
 800a84a:	4621      	mov	r1, r4
 800a84c:	4628      	mov	r0, r5
 800a84e:	f000 fa31 	bl	800acb4 <_sbrk_r>
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	d103      	bne.n	800a85e <sbrk_aligned+0x26>
 800a856:	f04f 34ff 	mov.w	r4, #4294967295
 800a85a:	4620      	mov	r0, r4
 800a85c:	bd70      	pop	{r4, r5, r6, pc}
 800a85e:	1cc4      	adds	r4, r0, #3
 800a860:	f024 0403 	bic.w	r4, r4, #3
 800a864:	42a0      	cmp	r0, r4
 800a866:	d0f8      	beq.n	800a85a <sbrk_aligned+0x22>
 800a868:	1a21      	subs	r1, r4, r0
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 fa22 	bl	800acb4 <_sbrk_r>
 800a870:	3001      	adds	r0, #1
 800a872:	d1f2      	bne.n	800a85a <sbrk_aligned+0x22>
 800a874:	e7ef      	b.n	800a856 <sbrk_aligned+0x1e>
 800a876:	bf00      	nop
 800a878:	200004dc 	.word	0x200004dc

0800a87c <_malloc_r>:
 800a87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a880:	1ccd      	adds	r5, r1, #3
 800a882:	f025 0503 	bic.w	r5, r5, #3
 800a886:	3508      	adds	r5, #8
 800a888:	2d0c      	cmp	r5, #12
 800a88a:	bf38      	it	cc
 800a88c:	250c      	movcc	r5, #12
 800a88e:	2d00      	cmp	r5, #0
 800a890:	4606      	mov	r6, r0
 800a892:	db01      	blt.n	800a898 <_malloc_r+0x1c>
 800a894:	42a9      	cmp	r1, r5
 800a896:	d904      	bls.n	800a8a2 <_malloc_r+0x26>
 800a898:	230c      	movs	r3, #12
 800a89a:	6033      	str	r3, [r6, #0]
 800a89c:	2000      	movs	r0, #0
 800a89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a978 <_malloc_r+0xfc>
 800a8a6:	f000 f869 	bl	800a97c <__malloc_lock>
 800a8aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ae:	461c      	mov	r4, r3
 800a8b0:	bb44      	cbnz	r4, 800a904 <_malloc_r+0x88>
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff ffbf 	bl	800a838 <sbrk_aligned>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	4604      	mov	r4, r0
 800a8be:	d158      	bne.n	800a972 <_malloc_r+0xf6>
 800a8c0:	f8d8 4000 	ldr.w	r4, [r8]
 800a8c4:	4627      	mov	r7, r4
 800a8c6:	2f00      	cmp	r7, #0
 800a8c8:	d143      	bne.n	800a952 <_malloc_r+0xd6>
 800a8ca:	2c00      	cmp	r4, #0
 800a8cc:	d04b      	beq.n	800a966 <_malloc_r+0xea>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	eb04 0903 	add.w	r9, r4, r3
 800a8d8:	f000 f9ec 	bl	800acb4 <_sbrk_r>
 800a8dc:	4581      	cmp	r9, r0
 800a8de:	d142      	bne.n	800a966 <_malloc_r+0xea>
 800a8e0:	6821      	ldr	r1, [r4, #0]
 800a8e2:	1a6d      	subs	r5, r5, r1
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f7ff ffa6 	bl	800a838 <sbrk_aligned>
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d03a      	beq.n	800a966 <_malloc_r+0xea>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	442b      	add	r3, r5
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	bb62      	cbnz	r2, 800a958 <_malloc_r+0xdc>
 800a8fe:	f8c8 7000 	str.w	r7, [r8]
 800a902:	e00f      	b.n	800a924 <_malloc_r+0xa8>
 800a904:	6822      	ldr	r2, [r4, #0]
 800a906:	1b52      	subs	r2, r2, r5
 800a908:	d420      	bmi.n	800a94c <_malloc_r+0xd0>
 800a90a:	2a0b      	cmp	r2, #11
 800a90c:	d917      	bls.n	800a93e <_malloc_r+0xc2>
 800a90e:	1961      	adds	r1, r4, r5
 800a910:	42a3      	cmp	r3, r4
 800a912:	6025      	str	r5, [r4, #0]
 800a914:	bf18      	it	ne
 800a916:	6059      	strne	r1, [r3, #4]
 800a918:	6863      	ldr	r3, [r4, #4]
 800a91a:	bf08      	it	eq
 800a91c:	f8c8 1000 	streq.w	r1, [r8]
 800a920:	5162      	str	r2, [r4, r5]
 800a922:	604b      	str	r3, [r1, #4]
 800a924:	4630      	mov	r0, r6
 800a926:	f000 f82f 	bl	800a988 <__malloc_unlock>
 800a92a:	f104 000b 	add.w	r0, r4, #11
 800a92e:	1d23      	adds	r3, r4, #4
 800a930:	f020 0007 	bic.w	r0, r0, #7
 800a934:	1ac2      	subs	r2, r0, r3
 800a936:	bf1c      	itt	ne
 800a938:	1a1b      	subne	r3, r3, r0
 800a93a:	50a3      	strne	r3, [r4, r2]
 800a93c:	e7af      	b.n	800a89e <_malloc_r+0x22>
 800a93e:	6862      	ldr	r2, [r4, #4]
 800a940:	42a3      	cmp	r3, r4
 800a942:	bf0c      	ite	eq
 800a944:	f8c8 2000 	streq.w	r2, [r8]
 800a948:	605a      	strne	r2, [r3, #4]
 800a94a:	e7eb      	b.n	800a924 <_malloc_r+0xa8>
 800a94c:	4623      	mov	r3, r4
 800a94e:	6864      	ldr	r4, [r4, #4]
 800a950:	e7ae      	b.n	800a8b0 <_malloc_r+0x34>
 800a952:	463c      	mov	r4, r7
 800a954:	687f      	ldr	r7, [r7, #4]
 800a956:	e7b6      	b.n	800a8c6 <_malloc_r+0x4a>
 800a958:	461a      	mov	r2, r3
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	d1fb      	bne.n	800a958 <_malloc_r+0xdc>
 800a960:	2300      	movs	r3, #0
 800a962:	6053      	str	r3, [r2, #4]
 800a964:	e7de      	b.n	800a924 <_malloc_r+0xa8>
 800a966:	230c      	movs	r3, #12
 800a968:	6033      	str	r3, [r6, #0]
 800a96a:	4630      	mov	r0, r6
 800a96c:	f000 f80c 	bl	800a988 <__malloc_unlock>
 800a970:	e794      	b.n	800a89c <_malloc_r+0x20>
 800a972:	6005      	str	r5, [r0, #0]
 800a974:	e7d6      	b.n	800a924 <_malloc_r+0xa8>
 800a976:	bf00      	nop
 800a978:	200004e0 	.word	0x200004e0

0800a97c <__malloc_lock>:
 800a97c:	4801      	ldr	r0, [pc, #4]	@ (800a984 <__malloc_lock+0x8>)
 800a97e:	f000 b9e6 	b.w	800ad4e <__retarget_lock_acquire_recursive>
 800a982:	bf00      	nop
 800a984:	20000624 	.word	0x20000624

0800a988 <__malloc_unlock>:
 800a988:	4801      	ldr	r0, [pc, #4]	@ (800a990 <__malloc_unlock+0x8>)
 800a98a:	f000 b9e1 	b.w	800ad50 <__retarget_lock_release_recursive>
 800a98e:	bf00      	nop
 800a990:	20000624 	.word	0x20000624

0800a994 <std>:
 800a994:	2300      	movs	r3, #0
 800a996:	b510      	push	{r4, lr}
 800a998:	4604      	mov	r4, r0
 800a99a:	e9c0 3300 	strd	r3, r3, [r0]
 800a99e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9a2:	6083      	str	r3, [r0, #8]
 800a9a4:	8181      	strh	r1, [r0, #12]
 800a9a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9a8:	81c2      	strh	r2, [r0, #14]
 800a9aa:	6183      	str	r3, [r0, #24]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	2208      	movs	r2, #8
 800a9b0:	305c      	adds	r0, #92	@ 0x5c
 800a9b2:	f000 f943 	bl	800ac3c <memset>
 800a9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9ec <std+0x58>)
 800a9b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f0 <std+0x5c>)
 800a9bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9be:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f4 <std+0x60>)
 800a9c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f8 <std+0x64>)
 800a9c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9fc <std+0x68>)
 800a9c8:	6224      	str	r4, [r4, #32]
 800a9ca:	429c      	cmp	r4, r3
 800a9cc:	d006      	beq.n	800a9dc <std+0x48>
 800a9ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9d2:	4294      	cmp	r4, r2
 800a9d4:	d002      	beq.n	800a9dc <std+0x48>
 800a9d6:	33d0      	adds	r3, #208	@ 0xd0
 800a9d8:	429c      	cmp	r4, r3
 800a9da:	d105      	bne.n	800a9e8 <std+0x54>
 800a9dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e4:	f000 b9b2 	b.w	800ad4c <__retarget_lock_init_recursive>
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800ab3d 	.word	0x0800ab3d
 800a9f0:	0800ab5f 	.word	0x0800ab5f
 800a9f4:	0800ab97 	.word	0x0800ab97
 800a9f8:	0800abbb 	.word	0x0800abbb
 800a9fc:	200004e4 	.word	0x200004e4

0800aa00 <stdio_exit_handler>:
 800aa00:	4a02      	ldr	r2, [pc, #8]	@ (800aa0c <stdio_exit_handler+0xc>)
 800aa02:	4903      	ldr	r1, [pc, #12]	@ (800aa10 <stdio_exit_handler+0x10>)
 800aa04:	4803      	ldr	r0, [pc, #12]	@ (800aa14 <stdio_exit_handler+0x14>)
 800aa06:	f000 b869 	b.w	800aadc <_fwalk_sglue>
 800aa0a:	bf00      	nop
 800aa0c:	2000001c 	.word	0x2000001c
 800aa10:	0800b759 	.word	0x0800b759
 800aa14:	2000002c 	.word	0x2000002c

0800aa18 <cleanup_stdio>:
 800aa18:	6841      	ldr	r1, [r0, #4]
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa4c <cleanup_stdio+0x34>)
 800aa1c:	4299      	cmp	r1, r3
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	4604      	mov	r4, r0
 800aa22:	d001      	beq.n	800aa28 <cleanup_stdio+0x10>
 800aa24:	f000 fe98 	bl	800b758 <_fflush_r>
 800aa28:	68a1      	ldr	r1, [r4, #8]
 800aa2a:	4b09      	ldr	r3, [pc, #36]	@ (800aa50 <cleanup_stdio+0x38>)
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	d002      	beq.n	800aa36 <cleanup_stdio+0x1e>
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 fe91 	bl	800b758 <_fflush_r>
 800aa36:	68e1      	ldr	r1, [r4, #12]
 800aa38:	4b06      	ldr	r3, [pc, #24]	@ (800aa54 <cleanup_stdio+0x3c>)
 800aa3a:	4299      	cmp	r1, r3
 800aa3c:	d004      	beq.n	800aa48 <cleanup_stdio+0x30>
 800aa3e:	4620      	mov	r0, r4
 800aa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa44:	f000 be88 	b.w	800b758 <_fflush_r>
 800aa48:	bd10      	pop	{r4, pc}
 800aa4a:	bf00      	nop
 800aa4c:	200004e4 	.word	0x200004e4
 800aa50:	2000054c 	.word	0x2000054c
 800aa54:	200005b4 	.word	0x200005b4

0800aa58 <global_stdio_init.part.0>:
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa88 <global_stdio_init.part.0+0x30>)
 800aa5c:	4c0b      	ldr	r4, [pc, #44]	@ (800aa8c <global_stdio_init.part.0+0x34>)
 800aa5e:	4a0c      	ldr	r2, [pc, #48]	@ (800aa90 <global_stdio_init.part.0+0x38>)
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	4620      	mov	r0, r4
 800aa64:	2200      	movs	r2, #0
 800aa66:	2104      	movs	r1, #4
 800aa68:	f7ff ff94 	bl	800a994 <std>
 800aa6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa70:	2201      	movs	r2, #1
 800aa72:	2109      	movs	r1, #9
 800aa74:	f7ff ff8e 	bl	800a994 <std>
 800aa78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa82:	2112      	movs	r1, #18
 800aa84:	f7ff bf86 	b.w	800a994 <std>
 800aa88:	2000061c 	.word	0x2000061c
 800aa8c:	200004e4 	.word	0x200004e4
 800aa90:	0800aa01 	.word	0x0800aa01

0800aa94 <__sfp_lock_acquire>:
 800aa94:	4801      	ldr	r0, [pc, #4]	@ (800aa9c <__sfp_lock_acquire+0x8>)
 800aa96:	f000 b95a 	b.w	800ad4e <__retarget_lock_acquire_recursive>
 800aa9a:	bf00      	nop
 800aa9c:	20000625 	.word	0x20000625

0800aaa0 <__sfp_lock_release>:
 800aaa0:	4801      	ldr	r0, [pc, #4]	@ (800aaa8 <__sfp_lock_release+0x8>)
 800aaa2:	f000 b955 	b.w	800ad50 <__retarget_lock_release_recursive>
 800aaa6:	bf00      	nop
 800aaa8:	20000625 	.word	0x20000625

0800aaac <__sinit>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	4604      	mov	r4, r0
 800aab0:	f7ff fff0 	bl	800aa94 <__sfp_lock_acquire>
 800aab4:	6a23      	ldr	r3, [r4, #32]
 800aab6:	b11b      	cbz	r3, 800aac0 <__sinit+0x14>
 800aab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aabc:	f7ff bff0 	b.w	800aaa0 <__sfp_lock_release>
 800aac0:	4b04      	ldr	r3, [pc, #16]	@ (800aad4 <__sinit+0x28>)
 800aac2:	6223      	str	r3, [r4, #32]
 800aac4:	4b04      	ldr	r3, [pc, #16]	@ (800aad8 <__sinit+0x2c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1f5      	bne.n	800aab8 <__sinit+0xc>
 800aacc:	f7ff ffc4 	bl	800aa58 <global_stdio_init.part.0>
 800aad0:	e7f2      	b.n	800aab8 <__sinit+0xc>
 800aad2:	bf00      	nop
 800aad4:	0800aa19 	.word	0x0800aa19
 800aad8:	2000061c 	.word	0x2000061c

0800aadc <_fwalk_sglue>:
 800aadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae0:	4607      	mov	r7, r0
 800aae2:	4688      	mov	r8, r1
 800aae4:	4614      	mov	r4, r2
 800aae6:	2600      	movs	r6, #0
 800aae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaec:	f1b9 0901 	subs.w	r9, r9, #1
 800aaf0:	d505      	bpl.n	800aafe <_fwalk_sglue+0x22>
 800aaf2:	6824      	ldr	r4, [r4, #0]
 800aaf4:	2c00      	cmp	r4, #0
 800aaf6:	d1f7      	bne.n	800aae8 <_fwalk_sglue+0xc>
 800aaf8:	4630      	mov	r0, r6
 800aafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aafe:	89ab      	ldrh	r3, [r5, #12]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d907      	bls.n	800ab14 <_fwalk_sglue+0x38>
 800ab04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	d003      	beq.n	800ab14 <_fwalk_sglue+0x38>
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	4638      	mov	r0, r7
 800ab10:	47c0      	blx	r8
 800ab12:	4306      	orrs	r6, r0
 800ab14:	3568      	adds	r5, #104	@ 0x68
 800ab16:	e7e9      	b.n	800aaec <_fwalk_sglue+0x10>

0800ab18 <iprintf>:
 800ab18:	b40f      	push	{r0, r1, r2, r3}
 800ab1a:	b507      	push	{r0, r1, r2, lr}
 800ab1c:	4906      	ldr	r1, [pc, #24]	@ (800ab38 <iprintf+0x20>)
 800ab1e:	ab04      	add	r3, sp, #16
 800ab20:	6808      	ldr	r0, [r1, #0]
 800ab22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab26:	6881      	ldr	r1, [r0, #8]
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	f000 faed 	bl	800b108 <_vfiprintf_r>
 800ab2e:	b003      	add	sp, #12
 800ab30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab34:	b004      	add	sp, #16
 800ab36:	4770      	bx	lr
 800ab38:	20000028 	.word	0x20000028

0800ab3c <__sread>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	460c      	mov	r4, r1
 800ab40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab44:	f000 f8a4 	bl	800ac90 <_read_r>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	bfab      	itete	ge
 800ab4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab4e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab50:	181b      	addge	r3, r3, r0
 800ab52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab56:	bfac      	ite	ge
 800ab58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab5a:	81a3      	strhlt	r3, [r4, #12]
 800ab5c:	bd10      	pop	{r4, pc}

0800ab5e <__swrite>:
 800ab5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab62:	461f      	mov	r7, r3
 800ab64:	898b      	ldrh	r3, [r1, #12]
 800ab66:	05db      	lsls	r3, r3, #23
 800ab68:	4605      	mov	r5, r0
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	d505      	bpl.n	800ab7c <__swrite+0x1e>
 800ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab74:	2302      	movs	r3, #2
 800ab76:	2200      	movs	r2, #0
 800ab78:	f000 f878 	bl	800ac6c <_lseek_r>
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab86:	81a3      	strh	r3, [r4, #12]
 800ab88:	4632      	mov	r2, r6
 800ab8a:	463b      	mov	r3, r7
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	f000 b89f 	b.w	800acd4 <_write_r>

0800ab96 <__sseek>:
 800ab96:	b510      	push	{r4, lr}
 800ab98:	460c      	mov	r4, r1
 800ab9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9e:	f000 f865 	bl	800ac6c <_lseek_r>
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	bf15      	itete	ne
 800aba8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abb2:	81a3      	strheq	r3, [r4, #12]
 800abb4:	bf18      	it	ne
 800abb6:	81a3      	strhne	r3, [r4, #12]
 800abb8:	bd10      	pop	{r4, pc}

0800abba <__sclose>:
 800abba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abbe:	f000 b845 	b.w	800ac4c <_close_r>

0800abc2 <_vsniprintf_r>:
 800abc2:	b530      	push	{r4, r5, lr}
 800abc4:	4614      	mov	r4, r2
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	b09b      	sub	sp, #108	@ 0x6c
 800abca:	4605      	mov	r5, r0
 800abcc:	461a      	mov	r2, r3
 800abce:	da05      	bge.n	800abdc <_vsniprintf_r+0x1a>
 800abd0:	238b      	movs	r3, #139	@ 0x8b
 800abd2:	6003      	str	r3, [r0, #0]
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	b01b      	add	sp, #108	@ 0x6c
 800abda:	bd30      	pop	{r4, r5, pc}
 800abdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800abe0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800abe4:	f04f 0300 	mov.w	r3, #0
 800abe8:	9319      	str	r3, [sp, #100]	@ 0x64
 800abea:	bf14      	ite	ne
 800abec:	f104 33ff 	addne.w	r3, r4, #4294967295
 800abf0:	4623      	moveq	r3, r4
 800abf2:	9302      	str	r3, [sp, #8]
 800abf4:	9305      	str	r3, [sp, #20]
 800abf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800abfa:	9100      	str	r1, [sp, #0]
 800abfc:	9104      	str	r1, [sp, #16]
 800abfe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ac02:	4669      	mov	r1, sp
 800ac04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ac06:	f000 f959 	bl	800aebc <_svfiprintf_r>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	bfbc      	itt	lt
 800ac0e:	238b      	movlt	r3, #139	@ 0x8b
 800ac10:	602b      	strlt	r3, [r5, #0]
 800ac12:	2c00      	cmp	r4, #0
 800ac14:	d0e0      	beq.n	800abd8 <_vsniprintf_r+0x16>
 800ac16:	9b00      	ldr	r3, [sp, #0]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	e7dc      	b.n	800abd8 <_vsniprintf_r+0x16>
	...

0800ac20 <vsniprintf>:
 800ac20:	b507      	push	{r0, r1, r2, lr}
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	4613      	mov	r3, r2
 800ac26:	460a      	mov	r2, r1
 800ac28:	4601      	mov	r1, r0
 800ac2a:	4803      	ldr	r0, [pc, #12]	@ (800ac38 <vsniprintf+0x18>)
 800ac2c:	6800      	ldr	r0, [r0, #0]
 800ac2e:	f7ff ffc8 	bl	800abc2 <_vsniprintf_r>
 800ac32:	b003      	add	sp, #12
 800ac34:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac38:	20000028 	.word	0x20000028

0800ac3c <memset>:
 800ac3c:	4402      	add	r2, r0
 800ac3e:	4603      	mov	r3, r0
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d100      	bne.n	800ac46 <memset+0xa>
 800ac44:	4770      	bx	lr
 800ac46:	f803 1b01 	strb.w	r1, [r3], #1
 800ac4a:	e7f9      	b.n	800ac40 <memset+0x4>

0800ac4c <_close_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d06      	ldr	r5, [pc, #24]	@ (800ac68 <_close_r+0x1c>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f7 fb9a 	bl	8002390 <_close>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_close_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_close_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20000620 	.word	0x20000620

0800ac6c <_lseek_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d07      	ldr	r5, [pc, #28]	@ (800ac8c <_lseek_r+0x20>)
 800ac70:	4604      	mov	r4, r0
 800ac72:	4608      	mov	r0, r1
 800ac74:	4611      	mov	r1, r2
 800ac76:	2200      	movs	r2, #0
 800ac78:	602a      	str	r2, [r5, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f7f7 fbaf 	bl	80023de <_lseek>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_lseek_r+0x1e>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_lseek_r+0x1e>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	20000620 	.word	0x20000620

0800ac90 <_read_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d07      	ldr	r5, [pc, #28]	@ (800acb0 <_read_r+0x20>)
 800ac94:	4604      	mov	r4, r0
 800ac96:	4608      	mov	r0, r1
 800ac98:	4611      	mov	r1, r2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	602a      	str	r2, [r5, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f7f7 fb59 	bl	8002356 <_read>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d102      	bne.n	800acae <_read_r+0x1e>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	b103      	cbz	r3, 800acae <_read_r+0x1e>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	20000620 	.word	0x20000620

0800acb4 <_sbrk_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d06      	ldr	r5, [pc, #24]	@ (800acd0 <_sbrk_r+0x1c>)
 800acb8:	2300      	movs	r3, #0
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f7 fb9a 	bl	80023f8 <_sbrk>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_sbrk_r+0x1a>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_sbrk_r+0x1a>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	20000620 	.word	0x20000620

0800acd4 <_write_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d07      	ldr	r5, [pc, #28]	@ (800acf4 <_write_r+0x20>)
 800acd8:	4604      	mov	r4, r0
 800acda:	4608      	mov	r0, r1
 800acdc:	4611      	mov	r1, r2
 800acde:	2200      	movs	r2, #0
 800ace0:	602a      	str	r2, [r5, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	f7f6 fb72 	bl	80013cc <_write>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d102      	bne.n	800acf2 <_write_r+0x1e>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	b103      	cbz	r3, 800acf2 <_write_r+0x1e>
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	20000620 	.word	0x20000620

0800acf8 <__errno>:
 800acf8:	4b01      	ldr	r3, [pc, #4]	@ (800ad00 <__errno+0x8>)
 800acfa:	6818      	ldr	r0, [r3, #0]
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	20000028 	.word	0x20000028

0800ad04 <__libc_init_array>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	4d0d      	ldr	r5, [pc, #52]	@ (800ad3c <__libc_init_array+0x38>)
 800ad08:	4c0d      	ldr	r4, [pc, #52]	@ (800ad40 <__libc_init_array+0x3c>)
 800ad0a:	1b64      	subs	r4, r4, r5
 800ad0c:	10a4      	asrs	r4, r4, #2
 800ad0e:	2600      	movs	r6, #0
 800ad10:	42a6      	cmp	r6, r4
 800ad12:	d109      	bne.n	800ad28 <__libc_init_array+0x24>
 800ad14:	4d0b      	ldr	r5, [pc, #44]	@ (800ad44 <__libc_init_array+0x40>)
 800ad16:	4c0c      	ldr	r4, [pc, #48]	@ (800ad48 <__libc_init_array+0x44>)
 800ad18:	f000 feae 	bl	800ba78 <_init>
 800ad1c:	1b64      	subs	r4, r4, r5
 800ad1e:	10a4      	asrs	r4, r4, #2
 800ad20:	2600      	movs	r6, #0
 800ad22:	42a6      	cmp	r6, r4
 800ad24:	d105      	bne.n	800ad32 <__libc_init_array+0x2e>
 800ad26:	bd70      	pop	{r4, r5, r6, pc}
 800ad28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad2c:	4798      	blx	r3
 800ad2e:	3601      	adds	r6, #1
 800ad30:	e7ee      	b.n	800ad10 <__libc_init_array+0xc>
 800ad32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad36:	4798      	blx	r3
 800ad38:	3601      	adds	r6, #1
 800ad3a:	e7f2      	b.n	800ad22 <__libc_init_array+0x1e>
 800ad3c:	0800c03c 	.word	0x0800c03c
 800ad40:	0800c03c 	.word	0x0800c03c
 800ad44:	0800c03c 	.word	0x0800c03c
 800ad48:	0800c040 	.word	0x0800c040

0800ad4c <__retarget_lock_init_recursive>:
 800ad4c:	4770      	bx	lr

0800ad4e <__retarget_lock_acquire_recursive>:
 800ad4e:	4770      	bx	lr

0800ad50 <__retarget_lock_release_recursive>:
 800ad50:	4770      	bx	lr

0800ad52 <memcpy>:
 800ad52:	440a      	add	r2, r1
 800ad54:	4291      	cmp	r1, r2
 800ad56:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad5a:	d100      	bne.n	800ad5e <memcpy+0xc>
 800ad5c:	4770      	bx	lr
 800ad5e:	b510      	push	{r4, lr}
 800ad60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad68:	4291      	cmp	r1, r2
 800ad6a:	d1f9      	bne.n	800ad60 <memcpy+0xe>
 800ad6c:	bd10      	pop	{r4, pc}
	...

0800ad70 <_free_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4605      	mov	r5, r0
 800ad74:	2900      	cmp	r1, #0
 800ad76:	d041      	beq.n	800adfc <_free_r+0x8c>
 800ad78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad7c:	1f0c      	subs	r4, r1, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	bfb8      	it	lt
 800ad82:	18e4      	addlt	r4, r4, r3
 800ad84:	f7ff fdfa 	bl	800a97c <__malloc_lock>
 800ad88:	4a1d      	ldr	r2, [pc, #116]	@ (800ae00 <_free_r+0x90>)
 800ad8a:	6813      	ldr	r3, [r2, #0]
 800ad8c:	b933      	cbnz	r3, 800ad9c <_free_r+0x2c>
 800ad8e:	6063      	str	r3, [r4, #4]
 800ad90:	6014      	str	r4, [r2, #0]
 800ad92:	4628      	mov	r0, r5
 800ad94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad98:	f7ff bdf6 	b.w	800a988 <__malloc_unlock>
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	d908      	bls.n	800adb2 <_free_r+0x42>
 800ada0:	6820      	ldr	r0, [r4, #0]
 800ada2:	1821      	adds	r1, r4, r0
 800ada4:	428b      	cmp	r3, r1
 800ada6:	bf01      	itttt	eq
 800ada8:	6819      	ldreq	r1, [r3, #0]
 800adaa:	685b      	ldreq	r3, [r3, #4]
 800adac:	1809      	addeq	r1, r1, r0
 800adae:	6021      	streq	r1, [r4, #0]
 800adb0:	e7ed      	b.n	800ad8e <_free_r+0x1e>
 800adb2:	461a      	mov	r2, r3
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	b10b      	cbz	r3, 800adbc <_free_r+0x4c>
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d9fa      	bls.n	800adb2 <_free_r+0x42>
 800adbc:	6811      	ldr	r1, [r2, #0]
 800adbe:	1850      	adds	r0, r2, r1
 800adc0:	42a0      	cmp	r0, r4
 800adc2:	d10b      	bne.n	800addc <_free_r+0x6c>
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	4401      	add	r1, r0
 800adc8:	1850      	adds	r0, r2, r1
 800adca:	4283      	cmp	r3, r0
 800adcc:	6011      	str	r1, [r2, #0]
 800adce:	d1e0      	bne.n	800ad92 <_free_r+0x22>
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	6053      	str	r3, [r2, #4]
 800add6:	4408      	add	r0, r1
 800add8:	6010      	str	r0, [r2, #0]
 800adda:	e7da      	b.n	800ad92 <_free_r+0x22>
 800addc:	d902      	bls.n	800ade4 <_free_r+0x74>
 800adde:	230c      	movs	r3, #12
 800ade0:	602b      	str	r3, [r5, #0]
 800ade2:	e7d6      	b.n	800ad92 <_free_r+0x22>
 800ade4:	6820      	ldr	r0, [r4, #0]
 800ade6:	1821      	adds	r1, r4, r0
 800ade8:	428b      	cmp	r3, r1
 800adea:	bf04      	itt	eq
 800adec:	6819      	ldreq	r1, [r3, #0]
 800adee:	685b      	ldreq	r3, [r3, #4]
 800adf0:	6063      	str	r3, [r4, #4]
 800adf2:	bf04      	itt	eq
 800adf4:	1809      	addeq	r1, r1, r0
 800adf6:	6021      	streq	r1, [r4, #0]
 800adf8:	6054      	str	r4, [r2, #4]
 800adfa:	e7ca      	b.n	800ad92 <_free_r+0x22>
 800adfc:	bd38      	pop	{r3, r4, r5, pc}
 800adfe:	bf00      	nop
 800ae00:	200004e0 	.word	0x200004e0

0800ae04 <__ssputs_r>:
 800ae04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	688e      	ldr	r6, [r1, #8]
 800ae0a:	461f      	mov	r7, r3
 800ae0c:	42be      	cmp	r6, r7
 800ae0e:	680b      	ldr	r3, [r1, #0]
 800ae10:	4682      	mov	sl, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	4690      	mov	r8, r2
 800ae16:	d82d      	bhi.n	800ae74 <__ssputs_r+0x70>
 800ae18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae20:	d026      	beq.n	800ae70 <__ssputs_r+0x6c>
 800ae22:	6965      	ldr	r5, [r4, #20]
 800ae24:	6909      	ldr	r1, [r1, #16]
 800ae26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae2a:	eba3 0901 	sub.w	r9, r3, r1
 800ae2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae32:	1c7b      	adds	r3, r7, #1
 800ae34:	444b      	add	r3, r9
 800ae36:	106d      	asrs	r5, r5, #1
 800ae38:	429d      	cmp	r5, r3
 800ae3a:	bf38      	it	cc
 800ae3c:	461d      	movcc	r5, r3
 800ae3e:	0553      	lsls	r3, r2, #21
 800ae40:	d527      	bpl.n	800ae92 <__ssputs_r+0x8e>
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7ff fd1a 	bl	800a87c <_malloc_r>
 800ae48:	4606      	mov	r6, r0
 800ae4a:	b360      	cbz	r0, 800aea6 <__ssputs_r+0xa2>
 800ae4c:	6921      	ldr	r1, [r4, #16]
 800ae4e:	464a      	mov	r2, r9
 800ae50:	f7ff ff7f 	bl	800ad52 <memcpy>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae5e:	81a3      	strh	r3, [r4, #12]
 800ae60:	6126      	str	r6, [r4, #16]
 800ae62:	6165      	str	r5, [r4, #20]
 800ae64:	444e      	add	r6, r9
 800ae66:	eba5 0509 	sub.w	r5, r5, r9
 800ae6a:	6026      	str	r6, [r4, #0]
 800ae6c:	60a5      	str	r5, [r4, #8]
 800ae6e:	463e      	mov	r6, r7
 800ae70:	42be      	cmp	r6, r7
 800ae72:	d900      	bls.n	800ae76 <__ssputs_r+0x72>
 800ae74:	463e      	mov	r6, r7
 800ae76:	6820      	ldr	r0, [r4, #0]
 800ae78:	4632      	mov	r2, r6
 800ae7a:	4641      	mov	r1, r8
 800ae7c:	f000 fd8a 	bl	800b994 <memmove>
 800ae80:	68a3      	ldr	r3, [r4, #8]
 800ae82:	1b9b      	subs	r3, r3, r6
 800ae84:	60a3      	str	r3, [r4, #8]
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	4433      	add	r3, r6
 800ae8a:	6023      	str	r3, [r4, #0]
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae92:	462a      	mov	r2, r5
 800ae94:	f000 fdba 	bl	800ba0c <_realloc_r>
 800ae98:	4606      	mov	r6, r0
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d1e0      	bne.n	800ae60 <__ssputs_r+0x5c>
 800ae9e:	6921      	ldr	r1, [r4, #16]
 800aea0:	4650      	mov	r0, sl
 800aea2:	f7ff ff65 	bl	800ad70 <_free_r>
 800aea6:	230c      	movs	r3, #12
 800aea8:	f8ca 3000 	str.w	r3, [sl]
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb8:	e7e9      	b.n	800ae8e <__ssputs_r+0x8a>
	...

0800aebc <_svfiprintf_r>:
 800aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	4698      	mov	r8, r3
 800aec2:	898b      	ldrh	r3, [r1, #12]
 800aec4:	061b      	lsls	r3, r3, #24
 800aec6:	b09d      	sub	sp, #116	@ 0x74
 800aec8:	4607      	mov	r7, r0
 800aeca:	460d      	mov	r5, r1
 800aecc:	4614      	mov	r4, r2
 800aece:	d510      	bpl.n	800aef2 <_svfiprintf_r+0x36>
 800aed0:	690b      	ldr	r3, [r1, #16]
 800aed2:	b973      	cbnz	r3, 800aef2 <_svfiprintf_r+0x36>
 800aed4:	2140      	movs	r1, #64	@ 0x40
 800aed6:	f7ff fcd1 	bl	800a87c <_malloc_r>
 800aeda:	6028      	str	r0, [r5, #0]
 800aedc:	6128      	str	r0, [r5, #16]
 800aede:	b930      	cbnz	r0, 800aeee <_svfiprintf_r+0x32>
 800aee0:	230c      	movs	r3, #12
 800aee2:	603b      	str	r3, [r7, #0]
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295
 800aee8:	b01d      	add	sp, #116	@ 0x74
 800aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeee:	2340      	movs	r3, #64	@ 0x40
 800aef0:	616b      	str	r3, [r5, #20]
 800aef2:	2300      	movs	r3, #0
 800aef4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef6:	2320      	movs	r3, #32
 800aef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800af00:	2330      	movs	r3, #48	@ 0x30
 800af02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0a0 <_svfiprintf_r+0x1e4>
 800af06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af0a:	f04f 0901 	mov.w	r9, #1
 800af0e:	4623      	mov	r3, r4
 800af10:	469a      	mov	sl, r3
 800af12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af16:	b10a      	cbz	r2, 800af1c <_svfiprintf_r+0x60>
 800af18:	2a25      	cmp	r2, #37	@ 0x25
 800af1a:	d1f9      	bne.n	800af10 <_svfiprintf_r+0x54>
 800af1c:	ebba 0b04 	subs.w	fp, sl, r4
 800af20:	d00b      	beq.n	800af3a <_svfiprintf_r+0x7e>
 800af22:	465b      	mov	r3, fp
 800af24:	4622      	mov	r2, r4
 800af26:	4629      	mov	r1, r5
 800af28:	4638      	mov	r0, r7
 800af2a:	f7ff ff6b 	bl	800ae04 <__ssputs_r>
 800af2e:	3001      	adds	r0, #1
 800af30:	f000 80a7 	beq.w	800b082 <_svfiprintf_r+0x1c6>
 800af34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af36:	445a      	add	r2, fp
 800af38:	9209      	str	r2, [sp, #36]	@ 0x24
 800af3a:	f89a 3000 	ldrb.w	r3, [sl]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 809f 	beq.w	800b082 <_svfiprintf_r+0x1c6>
 800af44:	2300      	movs	r3, #0
 800af46:	f04f 32ff 	mov.w	r2, #4294967295
 800af4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af4e:	f10a 0a01 	add.w	sl, sl, #1
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	9307      	str	r3, [sp, #28]
 800af56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800af5c:	4654      	mov	r4, sl
 800af5e:	2205      	movs	r2, #5
 800af60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af64:	484e      	ldr	r0, [pc, #312]	@ (800b0a0 <_svfiprintf_r+0x1e4>)
 800af66:	f7f5 f933 	bl	80001d0 <memchr>
 800af6a:	9a04      	ldr	r2, [sp, #16]
 800af6c:	b9d8      	cbnz	r0, 800afa6 <_svfiprintf_r+0xea>
 800af6e:	06d0      	lsls	r0, r2, #27
 800af70:	bf44      	itt	mi
 800af72:	2320      	movmi	r3, #32
 800af74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af78:	0711      	lsls	r1, r2, #28
 800af7a:	bf44      	itt	mi
 800af7c:	232b      	movmi	r3, #43	@ 0x2b
 800af7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af82:	f89a 3000 	ldrb.w	r3, [sl]
 800af86:	2b2a      	cmp	r3, #42	@ 0x2a
 800af88:	d015      	beq.n	800afb6 <_svfiprintf_r+0xfa>
 800af8a:	9a07      	ldr	r2, [sp, #28]
 800af8c:	4654      	mov	r4, sl
 800af8e:	2000      	movs	r0, #0
 800af90:	f04f 0c0a 	mov.w	ip, #10
 800af94:	4621      	mov	r1, r4
 800af96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af9a:	3b30      	subs	r3, #48	@ 0x30
 800af9c:	2b09      	cmp	r3, #9
 800af9e:	d94b      	bls.n	800b038 <_svfiprintf_r+0x17c>
 800afa0:	b1b0      	cbz	r0, 800afd0 <_svfiprintf_r+0x114>
 800afa2:	9207      	str	r2, [sp, #28]
 800afa4:	e014      	b.n	800afd0 <_svfiprintf_r+0x114>
 800afa6:	eba0 0308 	sub.w	r3, r0, r8
 800afaa:	fa09 f303 	lsl.w	r3, r9, r3
 800afae:	4313      	orrs	r3, r2
 800afb0:	9304      	str	r3, [sp, #16]
 800afb2:	46a2      	mov	sl, r4
 800afb4:	e7d2      	b.n	800af5c <_svfiprintf_r+0xa0>
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	1d19      	adds	r1, r3, #4
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	9103      	str	r1, [sp, #12]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bfbb      	ittet	lt
 800afc2:	425b      	neglt	r3, r3
 800afc4:	f042 0202 	orrlt.w	r2, r2, #2
 800afc8:	9307      	strge	r3, [sp, #28]
 800afca:	9307      	strlt	r3, [sp, #28]
 800afcc:	bfb8      	it	lt
 800afce:	9204      	strlt	r2, [sp, #16]
 800afd0:	7823      	ldrb	r3, [r4, #0]
 800afd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800afd4:	d10a      	bne.n	800afec <_svfiprintf_r+0x130>
 800afd6:	7863      	ldrb	r3, [r4, #1]
 800afd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800afda:	d132      	bne.n	800b042 <_svfiprintf_r+0x186>
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	1d1a      	adds	r2, r3, #4
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	9203      	str	r2, [sp, #12]
 800afe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afe8:	3402      	adds	r4, #2
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0b0 <_svfiprintf_r+0x1f4>
 800aff0:	7821      	ldrb	r1, [r4, #0]
 800aff2:	2203      	movs	r2, #3
 800aff4:	4650      	mov	r0, sl
 800aff6:	f7f5 f8eb 	bl	80001d0 <memchr>
 800affa:	b138      	cbz	r0, 800b00c <_svfiprintf_r+0x150>
 800affc:	9b04      	ldr	r3, [sp, #16]
 800affe:	eba0 000a 	sub.w	r0, r0, sl
 800b002:	2240      	movs	r2, #64	@ 0x40
 800b004:	4082      	lsls	r2, r0
 800b006:	4313      	orrs	r3, r2
 800b008:	3401      	adds	r4, #1
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b010:	4824      	ldr	r0, [pc, #144]	@ (800b0a4 <_svfiprintf_r+0x1e8>)
 800b012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b016:	2206      	movs	r2, #6
 800b018:	f7f5 f8da 	bl	80001d0 <memchr>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d036      	beq.n	800b08e <_svfiprintf_r+0x1d2>
 800b020:	4b21      	ldr	r3, [pc, #132]	@ (800b0a8 <_svfiprintf_r+0x1ec>)
 800b022:	bb1b      	cbnz	r3, 800b06c <_svfiprintf_r+0x1b0>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	3307      	adds	r3, #7
 800b028:	f023 0307 	bic.w	r3, r3, #7
 800b02c:	3308      	adds	r3, #8
 800b02e:	9303      	str	r3, [sp, #12]
 800b030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b032:	4433      	add	r3, r6
 800b034:	9309      	str	r3, [sp, #36]	@ 0x24
 800b036:	e76a      	b.n	800af0e <_svfiprintf_r+0x52>
 800b038:	fb0c 3202 	mla	r2, ip, r2, r3
 800b03c:	460c      	mov	r4, r1
 800b03e:	2001      	movs	r0, #1
 800b040:	e7a8      	b.n	800af94 <_svfiprintf_r+0xd8>
 800b042:	2300      	movs	r3, #0
 800b044:	3401      	adds	r4, #1
 800b046:	9305      	str	r3, [sp, #20]
 800b048:	4619      	mov	r1, r3
 800b04a:	f04f 0c0a 	mov.w	ip, #10
 800b04e:	4620      	mov	r0, r4
 800b050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b054:	3a30      	subs	r2, #48	@ 0x30
 800b056:	2a09      	cmp	r2, #9
 800b058:	d903      	bls.n	800b062 <_svfiprintf_r+0x1a6>
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0c6      	beq.n	800afec <_svfiprintf_r+0x130>
 800b05e:	9105      	str	r1, [sp, #20]
 800b060:	e7c4      	b.n	800afec <_svfiprintf_r+0x130>
 800b062:	fb0c 2101 	mla	r1, ip, r1, r2
 800b066:	4604      	mov	r4, r0
 800b068:	2301      	movs	r3, #1
 800b06a:	e7f0      	b.n	800b04e <_svfiprintf_r+0x192>
 800b06c:	ab03      	add	r3, sp, #12
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	462a      	mov	r2, r5
 800b072:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ac <_svfiprintf_r+0x1f0>)
 800b074:	a904      	add	r1, sp, #16
 800b076:	4638      	mov	r0, r7
 800b078:	f3af 8000 	nop.w
 800b07c:	1c42      	adds	r2, r0, #1
 800b07e:	4606      	mov	r6, r0
 800b080:	d1d6      	bne.n	800b030 <_svfiprintf_r+0x174>
 800b082:	89ab      	ldrh	r3, [r5, #12]
 800b084:	065b      	lsls	r3, r3, #25
 800b086:	f53f af2d 	bmi.w	800aee4 <_svfiprintf_r+0x28>
 800b08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b08c:	e72c      	b.n	800aee8 <_svfiprintf_r+0x2c>
 800b08e:	ab03      	add	r3, sp, #12
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	462a      	mov	r2, r5
 800b094:	4b05      	ldr	r3, [pc, #20]	@ (800b0ac <_svfiprintf_r+0x1f0>)
 800b096:	a904      	add	r1, sp, #16
 800b098:	4638      	mov	r0, r7
 800b09a:	f000 f9bb 	bl	800b414 <_printf_i>
 800b09e:	e7ed      	b.n	800b07c <_svfiprintf_r+0x1c0>
 800b0a0:	0800c000 	.word	0x0800c000
 800b0a4:	0800c00a 	.word	0x0800c00a
 800b0a8:	00000000 	.word	0x00000000
 800b0ac:	0800ae05 	.word	0x0800ae05
 800b0b0:	0800c006 	.word	0x0800c006

0800b0b4 <__sfputc_r>:
 800b0b4:	6893      	ldr	r3, [r2, #8]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	b410      	push	{r4}
 800b0bc:	6093      	str	r3, [r2, #8]
 800b0be:	da08      	bge.n	800b0d2 <__sfputc_r+0x1e>
 800b0c0:	6994      	ldr	r4, [r2, #24]
 800b0c2:	42a3      	cmp	r3, r4
 800b0c4:	db01      	blt.n	800b0ca <__sfputc_r+0x16>
 800b0c6:	290a      	cmp	r1, #10
 800b0c8:	d103      	bne.n	800b0d2 <__sfputc_r+0x1e>
 800b0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ce:	f000 bbcd 	b.w	800b86c <__swbuf_r>
 800b0d2:	6813      	ldr	r3, [r2, #0]
 800b0d4:	1c58      	adds	r0, r3, #1
 800b0d6:	6010      	str	r0, [r2, #0]
 800b0d8:	7019      	strb	r1, [r3, #0]
 800b0da:	4608      	mov	r0, r1
 800b0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <__sfputs_r>:
 800b0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	460f      	mov	r7, r1
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	18d5      	adds	r5, r2, r3
 800b0ec:	42ac      	cmp	r4, r5
 800b0ee:	d101      	bne.n	800b0f4 <__sfputs_r+0x12>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	e007      	b.n	800b104 <__sfputs_r+0x22>
 800b0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f8:	463a      	mov	r2, r7
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ffda 	bl	800b0b4 <__sfputc_r>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d1f3      	bne.n	800b0ec <__sfputs_r+0xa>
 800b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b108 <_vfiprintf_r>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	460d      	mov	r5, r1
 800b10e:	b09d      	sub	sp, #116	@ 0x74
 800b110:	4614      	mov	r4, r2
 800b112:	4698      	mov	r8, r3
 800b114:	4606      	mov	r6, r0
 800b116:	b118      	cbz	r0, 800b120 <_vfiprintf_r+0x18>
 800b118:	6a03      	ldr	r3, [r0, #32]
 800b11a:	b90b      	cbnz	r3, 800b120 <_vfiprintf_r+0x18>
 800b11c:	f7ff fcc6 	bl	800aaac <__sinit>
 800b120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b122:	07d9      	lsls	r1, r3, #31
 800b124:	d405      	bmi.n	800b132 <_vfiprintf_r+0x2a>
 800b126:	89ab      	ldrh	r3, [r5, #12]
 800b128:	059a      	lsls	r2, r3, #22
 800b12a:	d402      	bmi.n	800b132 <_vfiprintf_r+0x2a>
 800b12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b12e:	f7ff fe0e 	bl	800ad4e <__retarget_lock_acquire_recursive>
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	071b      	lsls	r3, r3, #28
 800b136:	d501      	bpl.n	800b13c <_vfiprintf_r+0x34>
 800b138:	692b      	ldr	r3, [r5, #16]
 800b13a:	b99b      	cbnz	r3, 800b164 <_vfiprintf_r+0x5c>
 800b13c:	4629      	mov	r1, r5
 800b13e:	4630      	mov	r0, r6
 800b140:	f000 fbd2 	bl	800b8e8 <__swsetup_r>
 800b144:	b170      	cbz	r0, 800b164 <_vfiprintf_r+0x5c>
 800b146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b148:	07dc      	lsls	r4, r3, #31
 800b14a:	d504      	bpl.n	800b156 <_vfiprintf_r+0x4e>
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	b01d      	add	sp, #116	@ 0x74
 800b152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b156:	89ab      	ldrh	r3, [r5, #12]
 800b158:	0598      	lsls	r0, r3, #22
 800b15a:	d4f7      	bmi.n	800b14c <_vfiprintf_r+0x44>
 800b15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b15e:	f7ff fdf7 	bl	800ad50 <__retarget_lock_release_recursive>
 800b162:	e7f3      	b.n	800b14c <_vfiprintf_r+0x44>
 800b164:	2300      	movs	r3, #0
 800b166:	9309      	str	r3, [sp, #36]	@ 0x24
 800b168:	2320      	movs	r3, #32
 800b16a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b172:	2330      	movs	r3, #48	@ 0x30
 800b174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b324 <_vfiprintf_r+0x21c>
 800b178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b17c:	f04f 0901 	mov.w	r9, #1
 800b180:	4623      	mov	r3, r4
 800b182:	469a      	mov	sl, r3
 800b184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b188:	b10a      	cbz	r2, 800b18e <_vfiprintf_r+0x86>
 800b18a:	2a25      	cmp	r2, #37	@ 0x25
 800b18c:	d1f9      	bne.n	800b182 <_vfiprintf_r+0x7a>
 800b18e:	ebba 0b04 	subs.w	fp, sl, r4
 800b192:	d00b      	beq.n	800b1ac <_vfiprintf_r+0xa4>
 800b194:	465b      	mov	r3, fp
 800b196:	4622      	mov	r2, r4
 800b198:	4629      	mov	r1, r5
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7ff ffa1 	bl	800b0e2 <__sfputs_r>
 800b1a0:	3001      	adds	r0, #1
 800b1a2:	f000 80a7 	beq.w	800b2f4 <_vfiprintf_r+0x1ec>
 800b1a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1a8:	445a      	add	r2, fp
 800b1aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 809f 	beq.w	800b2f4 <_vfiprintf_r+0x1ec>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1c0:	f10a 0a01 	add.w	sl, sl, #1
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	9307      	str	r3, [sp, #28]
 800b1c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1ce:	4654      	mov	r4, sl
 800b1d0:	2205      	movs	r2, #5
 800b1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d6:	4853      	ldr	r0, [pc, #332]	@ (800b324 <_vfiprintf_r+0x21c>)
 800b1d8:	f7f4 fffa 	bl	80001d0 <memchr>
 800b1dc:	9a04      	ldr	r2, [sp, #16]
 800b1de:	b9d8      	cbnz	r0, 800b218 <_vfiprintf_r+0x110>
 800b1e0:	06d1      	lsls	r1, r2, #27
 800b1e2:	bf44      	itt	mi
 800b1e4:	2320      	movmi	r3, #32
 800b1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1ea:	0713      	lsls	r3, r2, #28
 800b1ec:	bf44      	itt	mi
 800b1ee:	232b      	movmi	r3, #43	@ 0x2b
 800b1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1fa:	d015      	beq.n	800b228 <_vfiprintf_r+0x120>
 800b1fc:	9a07      	ldr	r2, [sp, #28]
 800b1fe:	4654      	mov	r4, sl
 800b200:	2000      	movs	r0, #0
 800b202:	f04f 0c0a 	mov.w	ip, #10
 800b206:	4621      	mov	r1, r4
 800b208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b20c:	3b30      	subs	r3, #48	@ 0x30
 800b20e:	2b09      	cmp	r3, #9
 800b210:	d94b      	bls.n	800b2aa <_vfiprintf_r+0x1a2>
 800b212:	b1b0      	cbz	r0, 800b242 <_vfiprintf_r+0x13a>
 800b214:	9207      	str	r2, [sp, #28]
 800b216:	e014      	b.n	800b242 <_vfiprintf_r+0x13a>
 800b218:	eba0 0308 	sub.w	r3, r0, r8
 800b21c:	fa09 f303 	lsl.w	r3, r9, r3
 800b220:	4313      	orrs	r3, r2
 800b222:	9304      	str	r3, [sp, #16]
 800b224:	46a2      	mov	sl, r4
 800b226:	e7d2      	b.n	800b1ce <_vfiprintf_r+0xc6>
 800b228:	9b03      	ldr	r3, [sp, #12]
 800b22a:	1d19      	adds	r1, r3, #4
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	9103      	str	r1, [sp, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	bfbb      	ittet	lt
 800b234:	425b      	neglt	r3, r3
 800b236:	f042 0202 	orrlt.w	r2, r2, #2
 800b23a:	9307      	strge	r3, [sp, #28]
 800b23c:	9307      	strlt	r3, [sp, #28]
 800b23e:	bfb8      	it	lt
 800b240:	9204      	strlt	r2, [sp, #16]
 800b242:	7823      	ldrb	r3, [r4, #0]
 800b244:	2b2e      	cmp	r3, #46	@ 0x2e
 800b246:	d10a      	bne.n	800b25e <_vfiprintf_r+0x156>
 800b248:	7863      	ldrb	r3, [r4, #1]
 800b24a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b24c:	d132      	bne.n	800b2b4 <_vfiprintf_r+0x1ac>
 800b24e:	9b03      	ldr	r3, [sp, #12]
 800b250:	1d1a      	adds	r2, r3, #4
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	9203      	str	r2, [sp, #12]
 800b256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b25a:	3402      	adds	r4, #2
 800b25c:	9305      	str	r3, [sp, #20]
 800b25e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b334 <_vfiprintf_r+0x22c>
 800b262:	7821      	ldrb	r1, [r4, #0]
 800b264:	2203      	movs	r2, #3
 800b266:	4650      	mov	r0, sl
 800b268:	f7f4 ffb2 	bl	80001d0 <memchr>
 800b26c:	b138      	cbz	r0, 800b27e <_vfiprintf_r+0x176>
 800b26e:	9b04      	ldr	r3, [sp, #16]
 800b270:	eba0 000a 	sub.w	r0, r0, sl
 800b274:	2240      	movs	r2, #64	@ 0x40
 800b276:	4082      	lsls	r2, r0
 800b278:	4313      	orrs	r3, r2
 800b27a:	3401      	adds	r4, #1
 800b27c:	9304      	str	r3, [sp, #16]
 800b27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b282:	4829      	ldr	r0, [pc, #164]	@ (800b328 <_vfiprintf_r+0x220>)
 800b284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b288:	2206      	movs	r2, #6
 800b28a:	f7f4 ffa1 	bl	80001d0 <memchr>
 800b28e:	2800      	cmp	r0, #0
 800b290:	d03f      	beq.n	800b312 <_vfiprintf_r+0x20a>
 800b292:	4b26      	ldr	r3, [pc, #152]	@ (800b32c <_vfiprintf_r+0x224>)
 800b294:	bb1b      	cbnz	r3, 800b2de <_vfiprintf_r+0x1d6>
 800b296:	9b03      	ldr	r3, [sp, #12]
 800b298:	3307      	adds	r3, #7
 800b29a:	f023 0307 	bic.w	r3, r3, #7
 800b29e:	3308      	adds	r3, #8
 800b2a0:	9303      	str	r3, [sp, #12]
 800b2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a4:	443b      	add	r3, r7
 800b2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2a8:	e76a      	b.n	800b180 <_vfiprintf_r+0x78>
 800b2aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	2001      	movs	r0, #1
 800b2b2:	e7a8      	b.n	800b206 <_vfiprintf_r+0xfe>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	3401      	adds	r4, #1
 800b2b8:	9305      	str	r3, [sp, #20]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	f04f 0c0a 	mov.w	ip, #10
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2c6:	3a30      	subs	r2, #48	@ 0x30
 800b2c8:	2a09      	cmp	r2, #9
 800b2ca:	d903      	bls.n	800b2d4 <_vfiprintf_r+0x1cc>
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0c6      	beq.n	800b25e <_vfiprintf_r+0x156>
 800b2d0:	9105      	str	r1, [sp, #20]
 800b2d2:	e7c4      	b.n	800b25e <_vfiprintf_r+0x156>
 800b2d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2d8:	4604      	mov	r4, r0
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e7f0      	b.n	800b2c0 <_vfiprintf_r+0x1b8>
 800b2de:	ab03      	add	r3, sp, #12
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	462a      	mov	r2, r5
 800b2e4:	4b12      	ldr	r3, [pc, #72]	@ (800b330 <_vfiprintf_r+0x228>)
 800b2e6:	a904      	add	r1, sp, #16
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f3af 8000 	nop.w
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	1c78      	adds	r0, r7, #1
 800b2f2:	d1d6      	bne.n	800b2a2 <_vfiprintf_r+0x19a>
 800b2f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2f6:	07d9      	lsls	r1, r3, #31
 800b2f8:	d405      	bmi.n	800b306 <_vfiprintf_r+0x1fe>
 800b2fa:	89ab      	ldrh	r3, [r5, #12]
 800b2fc:	059a      	lsls	r2, r3, #22
 800b2fe:	d402      	bmi.n	800b306 <_vfiprintf_r+0x1fe>
 800b300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b302:	f7ff fd25 	bl	800ad50 <__retarget_lock_release_recursive>
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	065b      	lsls	r3, r3, #25
 800b30a:	f53f af1f 	bmi.w	800b14c <_vfiprintf_r+0x44>
 800b30e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b310:	e71e      	b.n	800b150 <_vfiprintf_r+0x48>
 800b312:	ab03      	add	r3, sp, #12
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	462a      	mov	r2, r5
 800b318:	4b05      	ldr	r3, [pc, #20]	@ (800b330 <_vfiprintf_r+0x228>)
 800b31a:	a904      	add	r1, sp, #16
 800b31c:	4630      	mov	r0, r6
 800b31e:	f000 f879 	bl	800b414 <_printf_i>
 800b322:	e7e4      	b.n	800b2ee <_vfiprintf_r+0x1e6>
 800b324:	0800c000 	.word	0x0800c000
 800b328:	0800c00a 	.word	0x0800c00a
 800b32c:	00000000 	.word	0x00000000
 800b330:	0800b0e3 	.word	0x0800b0e3
 800b334:	0800c006 	.word	0x0800c006

0800b338 <_printf_common>:
 800b338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33c:	4616      	mov	r6, r2
 800b33e:	4698      	mov	r8, r3
 800b340:	688a      	ldr	r2, [r1, #8]
 800b342:	690b      	ldr	r3, [r1, #16]
 800b344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b348:	4293      	cmp	r3, r2
 800b34a:	bfb8      	it	lt
 800b34c:	4613      	movlt	r3, r2
 800b34e:	6033      	str	r3, [r6, #0]
 800b350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b354:	4607      	mov	r7, r0
 800b356:	460c      	mov	r4, r1
 800b358:	b10a      	cbz	r2, 800b35e <_printf_common+0x26>
 800b35a:	3301      	adds	r3, #1
 800b35c:	6033      	str	r3, [r6, #0]
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	0699      	lsls	r1, r3, #26
 800b362:	bf42      	ittt	mi
 800b364:	6833      	ldrmi	r3, [r6, #0]
 800b366:	3302      	addmi	r3, #2
 800b368:	6033      	strmi	r3, [r6, #0]
 800b36a:	6825      	ldr	r5, [r4, #0]
 800b36c:	f015 0506 	ands.w	r5, r5, #6
 800b370:	d106      	bne.n	800b380 <_printf_common+0x48>
 800b372:	f104 0a19 	add.w	sl, r4, #25
 800b376:	68e3      	ldr	r3, [r4, #12]
 800b378:	6832      	ldr	r2, [r6, #0]
 800b37a:	1a9b      	subs	r3, r3, r2
 800b37c:	42ab      	cmp	r3, r5
 800b37e:	dc26      	bgt.n	800b3ce <_printf_common+0x96>
 800b380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b384:	6822      	ldr	r2, [r4, #0]
 800b386:	3b00      	subs	r3, #0
 800b388:	bf18      	it	ne
 800b38a:	2301      	movne	r3, #1
 800b38c:	0692      	lsls	r2, r2, #26
 800b38e:	d42b      	bmi.n	800b3e8 <_printf_common+0xb0>
 800b390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b394:	4641      	mov	r1, r8
 800b396:	4638      	mov	r0, r7
 800b398:	47c8      	blx	r9
 800b39a:	3001      	adds	r0, #1
 800b39c:	d01e      	beq.n	800b3dc <_printf_common+0xa4>
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	6922      	ldr	r2, [r4, #16]
 800b3a2:	f003 0306 	and.w	r3, r3, #6
 800b3a6:	2b04      	cmp	r3, #4
 800b3a8:	bf02      	ittt	eq
 800b3aa:	68e5      	ldreq	r5, [r4, #12]
 800b3ac:	6833      	ldreq	r3, [r6, #0]
 800b3ae:	1aed      	subeq	r5, r5, r3
 800b3b0:	68a3      	ldr	r3, [r4, #8]
 800b3b2:	bf0c      	ite	eq
 800b3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3b8:	2500      	movne	r5, #0
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	bfc4      	itt	gt
 800b3be:	1a9b      	subgt	r3, r3, r2
 800b3c0:	18ed      	addgt	r5, r5, r3
 800b3c2:	2600      	movs	r6, #0
 800b3c4:	341a      	adds	r4, #26
 800b3c6:	42b5      	cmp	r5, r6
 800b3c8:	d11a      	bne.n	800b400 <_printf_common+0xc8>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e008      	b.n	800b3e0 <_printf_common+0xa8>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	4652      	mov	r2, sl
 800b3d2:	4641      	mov	r1, r8
 800b3d4:	4638      	mov	r0, r7
 800b3d6:	47c8      	blx	r9
 800b3d8:	3001      	adds	r0, #1
 800b3da:	d103      	bne.n	800b3e4 <_printf_common+0xac>
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e4:	3501      	adds	r5, #1
 800b3e6:	e7c6      	b.n	800b376 <_printf_common+0x3e>
 800b3e8:	18e1      	adds	r1, r4, r3
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	2030      	movs	r0, #48	@ 0x30
 800b3ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b3f2:	4422      	add	r2, r4
 800b3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b3f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b3fc:	3302      	adds	r3, #2
 800b3fe:	e7c7      	b.n	800b390 <_printf_common+0x58>
 800b400:	2301      	movs	r3, #1
 800b402:	4622      	mov	r2, r4
 800b404:	4641      	mov	r1, r8
 800b406:	4638      	mov	r0, r7
 800b408:	47c8      	blx	r9
 800b40a:	3001      	adds	r0, #1
 800b40c:	d0e6      	beq.n	800b3dc <_printf_common+0xa4>
 800b40e:	3601      	adds	r6, #1
 800b410:	e7d9      	b.n	800b3c6 <_printf_common+0x8e>
	...

0800b414 <_printf_i>:
 800b414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b418:	7e0f      	ldrb	r7, [r1, #24]
 800b41a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b41c:	2f78      	cmp	r7, #120	@ 0x78
 800b41e:	4691      	mov	r9, r2
 800b420:	4680      	mov	r8, r0
 800b422:	460c      	mov	r4, r1
 800b424:	469a      	mov	sl, r3
 800b426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b42a:	d807      	bhi.n	800b43c <_printf_i+0x28>
 800b42c:	2f62      	cmp	r7, #98	@ 0x62
 800b42e:	d80a      	bhi.n	800b446 <_printf_i+0x32>
 800b430:	2f00      	cmp	r7, #0
 800b432:	f000 80d1 	beq.w	800b5d8 <_printf_i+0x1c4>
 800b436:	2f58      	cmp	r7, #88	@ 0x58
 800b438:	f000 80b8 	beq.w	800b5ac <_printf_i+0x198>
 800b43c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b444:	e03a      	b.n	800b4bc <_printf_i+0xa8>
 800b446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b44a:	2b15      	cmp	r3, #21
 800b44c:	d8f6      	bhi.n	800b43c <_printf_i+0x28>
 800b44e:	a101      	add	r1, pc, #4	@ (adr r1, 800b454 <_printf_i+0x40>)
 800b450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b454:	0800b4ad 	.word	0x0800b4ad
 800b458:	0800b4c1 	.word	0x0800b4c1
 800b45c:	0800b43d 	.word	0x0800b43d
 800b460:	0800b43d 	.word	0x0800b43d
 800b464:	0800b43d 	.word	0x0800b43d
 800b468:	0800b43d 	.word	0x0800b43d
 800b46c:	0800b4c1 	.word	0x0800b4c1
 800b470:	0800b43d 	.word	0x0800b43d
 800b474:	0800b43d 	.word	0x0800b43d
 800b478:	0800b43d 	.word	0x0800b43d
 800b47c:	0800b43d 	.word	0x0800b43d
 800b480:	0800b5bf 	.word	0x0800b5bf
 800b484:	0800b4eb 	.word	0x0800b4eb
 800b488:	0800b579 	.word	0x0800b579
 800b48c:	0800b43d 	.word	0x0800b43d
 800b490:	0800b43d 	.word	0x0800b43d
 800b494:	0800b5e1 	.word	0x0800b5e1
 800b498:	0800b43d 	.word	0x0800b43d
 800b49c:	0800b4eb 	.word	0x0800b4eb
 800b4a0:	0800b43d 	.word	0x0800b43d
 800b4a4:	0800b43d 	.word	0x0800b43d
 800b4a8:	0800b581 	.word	0x0800b581
 800b4ac:	6833      	ldr	r3, [r6, #0]
 800b4ae:	1d1a      	adds	r2, r3, #4
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6032      	str	r2, [r6, #0]
 800b4b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e09c      	b.n	800b5fa <_printf_i+0x1e6>
 800b4c0:	6833      	ldr	r3, [r6, #0]
 800b4c2:	6820      	ldr	r0, [r4, #0]
 800b4c4:	1d19      	adds	r1, r3, #4
 800b4c6:	6031      	str	r1, [r6, #0]
 800b4c8:	0606      	lsls	r6, r0, #24
 800b4ca:	d501      	bpl.n	800b4d0 <_printf_i+0xbc>
 800b4cc:	681d      	ldr	r5, [r3, #0]
 800b4ce:	e003      	b.n	800b4d8 <_printf_i+0xc4>
 800b4d0:	0645      	lsls	r5, r0, #25
 800b4d2:	d5fb      	bpl.n	800b4cc <_printf_i+0xb8>
 800b4d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b4d8:	2d00      	cmp	r5, #0
 800b4da:	da03      	bge.n	800b4e4 <_printf_i+0xd0>
 800b4dc:	232d      	movs	r3, #45	@ 0x2d
 800b4de:	426d      	negs	r5, r5
 800b4e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4e4:	4858      	ldr	r0, [pc, #352]	@ (800b648 <_printf_i+0x234>)
 800b4e6:	230a      	movs	r3, #10
 800b4e8:	e011      	b.n	800b50e <_printf_i+0xfa>
 800b4ea:	6821      	ldr	r1, [r4, #0]
 800b4ec:	6833      	ldr	r3, [r6, #0]
 800b4ee:	0608      	lsls	r0, r1, #24
 800b4f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4f4:	d402      	bmi.n	800b4fc <_printf_i+0xe8>
 800b4f6:	0649      	lsls	r1, r1, #25
 800b4f8:	bf48      	it	mi
 800b4fa:	b2ad      	uxthmi	r5, r5
 800b4fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b4fe:	4852      	ldr	r0, [pc, #328]	@ (800b648 <_printf_i+0x234>)
 800b500:	6033      	str	r3, [r6, #0]
 800b502:	bf14      	ite	ne
 800b504:	230a      	movne	r3, #10
 800b506:	2308      	moveq	r3, #8
 800b508:	2100      	movs	r1, #0
 800b50a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b50e:	6866      	ldr	r6, [r4, #4]
 800b510:	60a6      	str	r6, [r4, #8]
 800b512:	2e00      	cmp	r6, #0
 800b514:	db05      	blt.n	800b522 <_printf_i+0x10e>
 800b516:	6821      	ldr	r1, [r4, #0]
 800b518:	432e      	orrs	r6, r5
 800b51a:	f021 0104 	bic.w	r1, r1, #4
 800b51e:	6021      	str	r1, [r4, #0]
 800b520:	d04b      	beq.n	800b5ba <_printf_i+0x1a6>
 800b522:	4616      	mov	r6, r2
 800b524:	fbb5 f1f3 	udiv	r1, r5, r3
 800b528:	fb03 5711 	mls	r7, r3, r1, r5
 800b52c:	5dc7      	ldrb	r7, [r0, r7]
 800b52e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b532:	462f      	mov	r7, r5
 800b534:	42bb      	cmp	r3, r7
 800b536:	460d      	mov	r5, r1
 800b538:	d9f4      	bls.n	800b524 <_printf_i+0x110>
 800b53a:	2b08      	cmp	r3, #8
 800b53c:	d10b      	bne.n	800b556 <_printf_i+0x142>
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	07df      	lsls	r7, r3, #31
 800b542:	d508      	bpl.n	800b556 <_printf_i+0x142>
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	6861      	ldr	r1, [r4, #4]
 800b548:	4299      	cmp	r1, r3
 800b54a:	bfde      	ittt	le
 800b54c:	2330      	movle	r3, #48	@ 0x30
 800b54e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b552:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b556:	1b92      	subs	r2, r2, r6
 800b558:	6122      	str	r2, [r4, #16]
 800b55a:	f8cd a000 	str.w	sl, [sp]
 800b55e:	464b      	mov	r3, r9
 800b560:	aa03      	add	r2, sp, #12
 800b562:	4621      	mov	r1, r4
 800b564:	4640      	mov	r0, r8
 800b566:	f7ff fee7 	bl	800b338 <_printf_common>
 800b56a:	3001      	adds	r0, #1
 800b56c:	d14a      	bne.n	800b604 <_printf_i+0x1f0>
 800b56e:	f04f 30ff 	mov.w	r0, #4294967295
 800b572:	b004      	add	sp, #16
 800b574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	f043 0320 	orr.w	r3, r3, #32
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	4832      	ldr	r0, [pc, #200]	@ (800b64c <_printf_i+0x238>)
 800b582:	2778      	movs	r7, #120	@ 0x78
 800b584:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	6831      	ldr	r1, [r6, #0]
 800b58c:	061f      	lsls	r7, r3, #24
 800b58e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b592:	d402      	bmi.n	800b59a <_printf_i+0x186>
 800b594:	065f      	lsls	r7, r3, #25
 800b596:	bf48      	it	mi
 800b598:	b2ad      	uxthmi	r5, r5
 800b59a:	6031      	str	r1, [r6, #0]
 800b59c:	07d9      	lsls	r1, r3, #31
 800b59e:	bf44      	itt	mi
 800b5a0:	f043 0320 	orrmi.w	r3, r3, #32
 800b5a4:	6023      	strmi	r3, [r4, #0]
 800b5a6:	b11d      	cbz	r5, 800b5b0 <_printf_i+0x19c>
 800b5a8:	2310      	movs	r3, #16
 800b5aa:	e7ad      	b.n	800b508 <_printf_i+0xf4>
 800b5ac:	4826      	ldr	r0, [pc, #152]	@ (800b648 <_printf_i+0x234>)
 800b5ae:	e7e9      	b.n	800b584 <_printf_i+0x170>
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	f023 0320 	bic.w	r3, r3, #32
 800b5b6:	6023      	str	r3, [r4, #0]
 800b5b8:	e7f6      	b.n	800b5a8 <_printf_i+0x194>
 800b5ba:	4616      	mov	r6, r2
 800b5bc:	e7bd      	b.n	800b53a <_printf_i+0x126>
 800b5be:	6833      	ldr	r3, [r6, #0]
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	6961      	ldr	r1, [r4, #20]
 800b5c4:	1d18      	adds	r0, r3, #4
 800b5c6:	6030      	str	r0, [r6, #0]
 800b5c8:	062e      	lsls	r6, r5, #24
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	d501      	bpl.n	800b5d2 <_printf_i+0x1be>
 800b5ce:	6019      	str	r1, [r3, #0]
 800b5d0:	e002      	b.n	800b5d8 <_printf_i+0x1c4>
 800b5d2:	0668      	lsls	r0, r5, #25
 800b5d4:	d5fb      	bpl.n	800b5ce <_printf_i+0x1ba>
 800b5d6:	8019      	strh	r1, [r3, #0]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	6123      	str	r3, [r4, #16]
 800b5dc:	4616      	mov	r6, r2
 800b5de:	e7bc      	b.n	800b55a <_printf_i+0x146>
 800b5e0:	6833      	ldr	r3, [r6, #0]
 800b5e2:	1d1a      	adds	r2, r3, #4
 800b5e4:	6032      	str	r2, [r6, #0]
 800b5e6:	681e      	ldr	r6, [r3, #0]
 800b5e8:	6862      	ldr	r2, [r4, #4]
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7f4 fdef 	bl	80001d0 <memchr>
 800b5f2:	b108      	cbz	r0, 800b5f8 <_printf_i+0x1e4>
 800b5f4:	1b80      	subs	r0, r0, r6
 800b5f6:	6060      	str	r0, [r4, #4]
 800b5f8:	6863      	ldr	r3, [r4, #4]
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b602:	e7aa      	b.n	800b55a <_printf_i+0x146>
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	4632      	mov	r2, r6
 800b608:	4649      	mov	r1, r9
 800b60a:	4640      	mov	r0, r8
 800b60c:	47d0      	blx	sl
 800b60e:	3001      	adds	r0, #1
 800b610:	d0ad      	beq.n	800b56e <_printf_i+0x15a>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	079b      	lsls	r3, r3, #30
 800b616:	d413      	bmi.n	800b640 <_printf_i+0x22c>
 800b618:	68e0      	ldr	r0, [r4, #12]
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	4298      	cmp	r0, r3
 800b61e:	bfb8      	it	lt
 800b620:	4618      	movlt	r0, r3
 800b622:	e7a6      	b.n	800b572 <_printf_i+0x15e>
 800b624:	2301      	movs	r3, #1
 800b626:	4632      	mov	r2, r6
 800b628:	4649      	mov	r1, r9
 800b62a:	4640      	mov	r0, r8
 800b62c:	47d0      	blx	sl
 800b62e:	3001      	adds	r0, #1
 800b630:	d09d      	beq.n	800b56e <_printf_i+0x15a>
 800b632:	3501      	adds	r5, #1
 800b634:	68e3      	ldr	r3, [r4, #12]
 800b636:	9903      	ldr	r1, [sp, #12]
 800b638:	1a5b      	subs	r3, r3, r1
 800b63a:	42ab      	cmp	r3, r5
 800b63c:	dcf2      	bgt.n	800b624 <_printf_i+0x210>
 800b63e:	e7eb      	b.n	800b618 <_printf_i+0x204>
 800b640:	2500      	movs	r5, #0
 800b642:	f104 0619 	add.w	r6, r4, #25
 800b646:	e7f5      	b.n	800b634 <_printf_i+0x220>
 800b648:	0800c011 	.word	0x0800c011
 800b64c:	0800c022 	.word	0x0800c022

0800b650 <__sflush_r>:
 800b650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b658:	0716      	lsls	r6, r2, #28
 800b65a:	4605      	mov	r5, r0
 800b65c:	460c      	mov	r4, r1
 800b65e:	d454      	bmi.n	800b70a <__sflush_r+0xba>
 800b660:	684b      	ldr	r3, [r1, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	dc02      	bgt.n	800b66c <__sflush_r+0x1c>
 800b666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dd48      	ble.n	800b6fe <__sflush_r+0xae>
 800b66c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b66e:	2e00      	cmp	r6, #0
 800b670:	d045      	beq.n	800b6fe <__sflush_r+0xae>
 800b672:	2300      	movs	r3, #0
 800b674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b678:	682f      	ldr	r7, [r5, #0]
 800b67a:	6a21      	ldr	r1, [r4, #32]
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	d030      	beq.n	800b6e2 <__sflush_r+0x92>
 800b680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	0759      	lsls	r1, r3, #29
 800b686:	d505      	bpl.n	800b694 <__sflush_r+0x44>
 800b688:	6863      	ldr	r3, [r4, #4]
 800b68a:	1ad2      	subs	r2, r2, r3
 800b68c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b68e:	b10b      	cbz	r3, 800b694 <__sflush_r+0x44>
 800b690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b692:	1ad2      	subs	r2, r2, r3
 800b694:	2300      	movs	r3, #0
 800b696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b698:	6a21      	ldr	r1, [r4, #32]
 800b69a:	4628      	mov	r0, r5
 800b69c:	47b0      	blx	r6
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	d106      	bne.n	800b6b2 <__sflush_r+0x62>
 800b6a4:	6829      	ldr	r1, [r5, #0]
 800b6a6:	291d      	cmp	r1, #29
 800b6a8:	d82b      	bhi.n	800b702 <__sflush_r+0xb2>
 800b6aa:	4a2a      	ldr	r2, [pc, #168]	@ (800b754 <__sflush_r+0x104>)
 800b6ac:	40ca      	lsrs	r2, r1
 800b6ae:	07d6      	lsls	r6, r2, #31
 800b6b0:	d527      	bpl.n	800b702 <__sflush_r+0xb2>
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	6062      	str	r2, [r4, #4]
 800b6b6:	04d9      	lsls	r1, r3, #19
 800b6b8:	6922      	ldr	r2, [r4, #16]
 800b6ba:	6022      	str	r2, [r4, #0]
 800b6bc:	d504      	bpl.n	800b6c8 <__sflush_r+0x78>
 800b6be:	1c42      	adds	r2, r0, #1
 800b6c0:	d101      	bne.n	800b6c6 <__sflush_r+0x76>
 800b6c2:	682b      	ldr	r3, [r5, #0]
 800b6c4:	b903      	cbnz	r3, 800b6c8 <__sflush_r+0x78>
 800b6c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6ca:	602f      	str	r7, [r5, #0]
 800b6cc:	b1b9      	cbz	r1, 800b6fe <__sflush_r+0xae>
 800b6ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6d2:	4299      	cmp	r1, r3
 800b6d4:	d002      	beq.n	800b6dc <__sflush_r+0x8c>
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7ff fb4a 	bl	800ad70 <_free_r>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6e0:	e00d      	b.n	800b6fe <__sflush_r+0xae>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b0      	blx	r6
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	1c50      	adds	r0, r2, #1
 800b6ec:	d1c9      	bne.n	800b682 <__sflush_r+0x32>
 800b6ee:	682b      	ldr	r3, [r5, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0c6      	beq.n	800b682 <__sflush_r+0x32>
 800b6f4:	2b1d      	cmp	r3, #29
 800b6f6:	d001      	beq.n	800b6fc <__sflush_r+0xac>
 800b6f8:	2b16      	cmp	r3, #22
 800b6fa:	d11e      	bne.n	800b73a <__sflush_r+0xea>
 800b6fc:	602f      	str	r7, [r5, #0]
 800b6fe:	2000      	movs	r0, #0
 800b700:	e022      	b.n	800b748 <__sflush_r+0xf8>
 800b702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b706:	b21b      	sxth	r3, r3
 800b708:	e01b      	b.n	800b742 <__sflush_r+0xf2>
 800b70a:	690f      	ldr	r7, [r1, #16]
 800b70c:	2f00      	cmp	r7, #0
 800b70e:	d0f6      	beq.n	800b6fe <__sflush_r+0xae>
 800b710:	0793      	lsls	r3, r2, #30
 800b712:	680e      	ldr	r6, [r1, #0]
 800b714:	bf08      	it	eq
 800b716:	694b      	ldreq	r3, [r1, #20]
 800b718:	600f      	str	r7, [r1, #0]
 800b71a:	bf18      	it	ne
 800b71c:	2300      	movne	r3, #0
 800b71e:	eba6 0807 	sub.w	r8, r6, r7
 800b722:	608b      	str	r3, [r1, #8]
 800b724:	f1b8 0f00 	cmp.w	r8, #0
 800b728:	dde9      	ble.n	800b6fe <__sflush_r+0xae>
 800b72a:	6a21      	ldr	r1, [r4, #32]
 800b72c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b72e:	4643      	mov	r3, r8
 800b730:	463a      	mov	r2, r7
 800b732:	4628      	mov	r0, r5
 800b734:	47b0      	blx	r6
 800b736:	2800      	cmp	r0, #0
 800b738:	dc08      	bgt.n	800b74c <__sflush_r+0xfc>
 800b73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b742:	81a3      	strh	r3, [r4, #12]
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b74c:	4407      	add	r7, r0
 800b74e:	eba8 0800 	sub.w	r8, r8, r0
 800b752:	e7e7      	b.n	800b724 <__sflush_r+0xd4>
 800b754:	20400001 	.word	0x20400001

0800b758 <_fflush_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	690b      	ldr	r3, [r1, #16]
 800b75c:	4605      	mov	r5, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	b913      	cbnz	r3, 800b768 <_fflush_r+0x10>
 800b762:	2500      	movs	r5, #0
 800b764:	4628      	mov	r0, r5
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	b118      	cbz	r0, 800b772 <_fflush_r+0x1a>
 800b76a:	6a03      	ldr	r3, [r0, #32]
 800b76c:	b90b      	cbnz	r3, 800b772 <_fflush_r+0x1a>
 800b76e:	f7ff f99d 	bl	800aaac <__sinit>
 800b772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0f3      	beq.n	800b762 <_fflush_r+0xa>
 800b77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b77c:	07d0      	lsls	r0, r2, #31
 800b77e:	d404      	bmi.n	800b78a <_fflush_r+0x32>
 800b780:	0599      	lsls	r1, r3, #22
 800b782:	d402      	bmi.n	800b78a <_fflush_r+0x32>
 800b784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b786:	f7ff fae2 	bl	800ad4e <__retarget_lock_acquire_recursive>
 800b78a:	4628      	mov	r0, r5
 800b78c:	4621      	mov	r1, r4
 800b78e:	f7ff ff5f 	bl	800b650 <__sflush_r>
 800b792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b794:	07da      	lsls	r2, r3, #31
 800b796:	4605      	mov	r5, r0
 800b798:	d4e4      	bmi.n	800b764 <_fflush_r+0xc>
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	059b      	lsls	r3, r3, #22
 800b79e:	d4e1      	bmi.n	800b764 <_fflush_r+0xc>
 800b7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7a2:	f7ff fad5 	bl	800ad50 <__retarget_lock_release_recursive>
 800b7a6:	e7dd      	b.n	800b764 <_fflush_r+0xc>

0800b7a8 <__swhatbuf_r>:
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b0:	2900      	cmp	r1, #0
 800b7b2:	b096      	sub	sp, #88	@ 0x58
 800b7b4:	4615      	mov	r5, r2
 800b7b6:	461e      	mov	r6, r3
 800b7b8:	da0d      	bge.n	800b7d6 <__swhatbuf_r+0x2e>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7c0:	f04f 0100 	mov.w	r1, #0
 800b7c4:	bf14      	ite	ne
 800b7c6:	2340      	movne	r3, #64	@ 0x40
 800b7c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	6031      	str	r1, [r6, #0]
 800b7d0:	602b      	str	r3, [r5, #0]
 800b7d2:	b016      	add	sp, #88	@ 0x58
 800b7d4:	bd70      	pop	{r4, r5, r6, pc}
 800b7d6:	466a      	mov	r2, sp
 800b7d8:	f000 f8f6 	bl	800b9c8 <_fstat_r>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	dbec      	blt.n	800b7ba <__swhatbuf_r+0x12>
 800b7e0:	9901      	ldr	r1, [sp, #4]
 800b7e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7ea:	4259      	negs	r1, r3
 800b7ec:	4159      	adcs	r1, r3
 800b7ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7f2:	e7eb      	b.n	800b7cc <__swhatbuf_r+0x24>

0800b7f4 <__smakebuf_r>:
 800b7f4:	898b      	ldrh	r3, [r1, #12]
 800b7f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7f8:	079d      	lsls	r5, r3, #30
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	d507      	bpl.n	800b810 <__smakebuf_r+0x1c>
 800b800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	6123      	str	r3, [r4, #16]
 800b808:	2301      	movs	r3, #1
 800b80a:	6163      	str	r3, [r4, #20]
 800b80c:	b003      	add	sp, #12
 800b80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b810:	ab01      	add	r3, sp, #4
 800b812:	466a      	mov	r2, sp
 800b814:	f7ff ffc8 	bl	800b7a8 <__swhatbuf_r>
 800b818:	9f00      	ldr	r7, [sp, #0]
 800b81a:	4605      	mov	r5, r0
 800b81c:	4639      	mov	r1, r7
 800b81e:	4630      	mov	r0, r6
 800b820:	f7ff f82c 	bl	800a87c <_malloc_r>
 800b824:	b948      	cbnz	r0, 800b83a <__smakebuf_r+0x46>
 800b826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82a:	059a      	lsls	r2, r3, #22
 800b82c:	d4ee      	bmi.n	800b80c <__smakebuf_r+0x18>
 800b82e:	f023 0303 	bic.w	r3, r3, #3
 800b832:	f043 0302 	orr.w	r3, r3, #2
 800b836:	81a3      	strh	r3, [r4, #12]
 800b838:	e7e2      	b.n	800b800 <__smakebuf_r+0xc>
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	6020      	str	r0, [r4, #0]
 800b83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	9b01      	ldr	r3, [sp, #4]
 800b846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b84a:	b15b      	cbz	r3, 800b864 <__smakebuf_r+0x70>
 800b84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b850:	4630      	mov	r0, r6
 800b852:	f000 f8cb 	bl	800b9ec <_isatty_r>
 800b856:	b128      	cbz	r0, 800b864 <__smakebuf_r+0x70>
 800b858:	89a3      	ldrh	r3, [r4, #12]
 800b85a:	f023 0303 	bic.w	r3, r3, #3
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	81a3      	strh	r3, [r4, #12]
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	431d      	orrs	r5, r3
 800b868:	81a5      	strh	r5, [r4, #12]
 800b86a:	e7cf      	b.n	800b80c <__smakebuf_r+0x18>

0800b86c <__swbuf_r>:
 800b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86e:	460e      	mov	r6, r1
 800b870:	4614      	mov	r4, r2
 800b872:	4605      	mov	r5, r0
 800b874:	b118      	cbz	r0, 800b87e <__swbuf_r+0x12>
 800b876:	6a03      	ldr	r3, [r0, #32]
 800b878:	b90b      	cbnz	r3, 800b87e <__swbuf_r+0x12>
 800b87a:	f7ff f917 	bl	800aaac <__sinit>
 800b87e:	69a3      	ldr	r3, [r4, #24]
 800b880:	60a3      	str	r3, [r4, #8]
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	071a      	lsls	r2, r3, #28
 800b886:	d501      	bpl.n	800b88c <__swbuf_r+0x20>
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	b943      	cbnz	r3, 800b89e <__swbuf_r+0x32>
 800b88c:	4621      	mov	r1, r4
 800b88e:	4628      	mov	r0, r5
 800b890:	f000 f82a 	bl	800b8e8 <__swsetup_r>
 800b894:	b118      	cbz	r0, 800b89e <__swbuf_r+0x32>
 800b896:	f04f 37ff 	mov.w	r7, #4294967295
 800b89a:	4638      	mov	r0, r7
 800b89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	6922      	ldr	r2, [r4, #16]
 800b8a2:	1a98      	subs	r0, r3, r2
 800b8a4:	6963      	ldr	r3, [r4, #20]
 800b8a6:	b2f6      	uxtb	r6, r6
 800b8a8:	4283      	cmp	r3, r0
 800b8aa:	4637      	mov	r7, r6
 800b8ac:	dc05      	bgt.n	800b8ba <__swbuf_r+0x4e>
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f7ff ff51 	bl	800b758 <_fflush_r>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d1ed      	bne.n	800b896 <__swbuf_r+0x2a>
 800b8ba:	68a3      	ldr	r3, [r4, #8]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	60a3      	str	r3, [r4, #8]
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	1c5a      	adds	r2, r3, #1
 800b8c4:	6022      	str	r2, [r4, #0]
 800b8c6:	701e      	strb	r6, [r3, #0]
 800b8c8:	6962      	ldr	r2, [r4, #20]
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d004      	beq.n	800b8da <__swbuf_r+0x6e>
 800b8d0:	89a3      	ldrh	r3, [r4, #12]
 800b8d2:	07db      	lsls	r3, r3, #31
 800b8d4:	d5e1      	bpl.n	800b89a <__swbuf_r+0x2e>
 800b8d6:	2e0a      	cmp	r6, #10
 800b8d8:	d1df      	bne.n	800b89a <__swbuf_r+0x2e>
 800b8da:	4621      	mov	r1, r4
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f7ff ff3b 	bl	800b758 <_fflush_r>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d0d9      	beq.n	800b89a <__swbuf_r+0x2e>
 800b8e6:	e7d6      	b.n	800b896 <__swbuf_r+0x2a>

0800b8e8 <__swsetup_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4b29      	ldr	r3, [pc, #164]	@ (800b990 <__swsetup_r+0xa8>)
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	6818      	ldr	r0, [r3, #0]
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	b118      	cbz	r0, 800b8fc <__swsetup_r+0x14>
 800b8f4:	6a03      	ldr	r3, [r0, #32]
 800b8f6:	b90b      	cbnz	r3, 800b8fc <__swsetup_r+0x14>
 800b8f8:	f7ff f8d8 	bl	800aaac <__sinit>
 800b8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b900:	0719      	lsls	r1, r3, #28
 800b902:	d422      	bmi.n	800b94a <__swsetup_r+0x62>
 800b904:	06da      	lsls	r2, r3, #27
 800b906:	d407      	bmi.n	800b918 <__swsetup_r+0x30>
 800b908:	2209      	movs	r2, #9
 800b90a:	602a      	str	r2, [r5, #0]
 800b90c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b910:	81a3      	strh	r3, [r4, #12]
 800b912:	f04f 30ff 	mov.w	r0, #4294967295
 800b916:	e033      	b.n	800b980 <__swsetup_r+0x98>
 800b918:	0758      	lsls	r0, r3, #29
 800b91a:	d512      	bpl.n	800b942 <__swsetup_r+0x5a>
 800b91c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b91e:	b141      	cbz	r1, 800b932 <__swsetup_r+0x4a>
 800b920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b924:	4299      	cmp	r1, r3
 800b926:	d002      	beq.n	800b92e <__swsetup_r+0x46>
 800b928:	4628      	mov	r0, r5
 800b92a:	f7ff fa21 	bl	800ad70 <_free_r>
 800b92e:	2300      	movs	r3, #0
 800b930:	6363      	str	r3, [r4, #52]	@ 0x34
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b938:	81a3      	strh	r3, [r4, #12]
 800b93a:	2300      	movs	r3, #0
 800b93c:	6063      	str	r3, [r4, #4]
 800b93e:	6923      	ldr	r3, [r4, #16]
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	f043 0308 	orr.w	r3, r3, #8
 800b948:	81a3      	strh	r3, [r4, #12]
 800b94a:	6923      	ldr	r3, [r4, #16]
 800b94c:	b94b      	cbnz	r3, 800b962 <__swsetup_r+0x7a>
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b958:	d003      	beq.n	800b962 <__swsetup_r+0x7a>
 800b95a:	4621      	mov	r1, r4
 800b95c:	4628      	mov	r0, r5
 800b95e:	f7ff ff49 	bl	800b7f4 <__smakebuf_r>
 800b962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b966:	f013 0201 	ands.w	r2, r3, #1
 800b96a:	d00a      	beq.n	800b982 <__swsetup_r+0x9a>
 800b96c:	2200      	movs	r2, #0
 800b96e:	60a2      	str	r2, [r4, #8]
 800b970:	6962      	ldr	r2, [r4, #20]
 800b972:	4252      	negs	r2, r2
 800b974:	61a2      	str	r2, [r4, #24]
 800b976:	6922      	ldr	r2, [r4, #16]
 800b978:	b942      	cbnz	r2, 800b98c <__swsetup_r+0xa4>
 800b97a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b97e:	d1c5      	bne.n	800b90c <__swsetup_r+0x24>
 800b980:	bd38      	pop	{r3, r4, r5, pc}
 800b982:	0799      	lsls	r1, r3, #30
 800b984:	bf58      	it	pl
 800b986:	6962      	ldrpl	r2, [r4, #20]
 800b988:	60a2      	str	r2, [r4, #8]
 800b98a:	e7f4      	b.n	800b976 <__swsetup_r+0x8e>
 800b98c:	2000      	movs	r0, #0
 800b98e:	e7f7      	b.n	800b980 <__swsetup_r+0x98>
 800b990:	20000028 	.word	0x20000028

0800b994 <memmove>:
 800b994:	4288      	cmp	r0, r1
 800b996:	b510      	push	{r4, lr}
 800b998:	eb01 0402 	add.w	r4, r1, r2
 800b99c:	d902      	bls.n	800b9a4 <memmove+0x10>
 800b99e:	4284      	cmp	r4, r0
 800b9a0:	4623      	mov	r3, r4
 800b9a2:	d807      	bhi.n	800b9b4 <memmove+0x20>
 800b9a4:	1e43      	subs	r3, r0, #1
 800b9a6:	42a1      	cmp	r1, r4
 800b9a8:	d008      	beq.n	800b9bc <memmove+0x28>
 800b9aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9b2:	e7f8      	b.n	800b9a6 <memmove+0x12>
 800b9b4:	4402      	add	r2, r0
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	428a      	cmp	r2, r1
 800b9ba:	d100      	bne.n	800b9be <memmove+0x2a>
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9c6:	e7f7      	b.n	800b9b8 <memmove+0x24>

0800b9c8 <_fstat_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4d07      	ldr	r5, [pc, #28]	@ (800b9e8 <_fstat_r+0x20>)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	602b      	str	r3, [r5, #0]
 800b9d6:	f7f6 fce7 	bl	80023a8 <_fstat>
 800b9da:	1c43      	adds	r3, r0, #1
 800b9dc:	d102      	bne.n	800b9e4 <_fstat_r+0x1c>
 800b9de:	682b      	ldr	r3, [r5, #0]
 800b9e0:	b103      	cbz	r3, 800b9e4 <_fstat_r+0x1c>
 800b9e2:	6023      	str	r3, [r4, #0]
 800b9e4:	bd38      	pop	{r3, r4, r5, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20000620 	.word	0x20000620

0800b9ec <_isatty_r>:
 800b9ec:	b538      	push	{r3, r4, r5, lr}
 800b9ee:	4d06      	ldr	r5, [pc, #24]	@ (800ba08 <_isatty_r+0x1c>)
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	602b      	str	r3, [r5, #0]
 800b9f8:	f7f6 fce6 	bl	80023c8 <_isatty>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_isatty_r+0x1a>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_isatty_r+0x1a>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	20000620 	.word	0x20000620

0800ba0c <_realloc_r>:
 800ba0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba10:	4607      	mov	r7, r0
 800ba12:	4614      	mov	r4, r2
 800ba14:	460d      	mov	r5, r1
 800ba16:	b921      	cbnz	r1, 800ba22 <_realloc_r+0x16>
 800ba18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	f7fe bf2d 	b.w	800a87c <_malloc_r>
 800ba22:	b92a      	cbnz	r2, 800ba30 <_realloc_r+0x24>
 800ba24:	f7ff f9a4 	bl	800ad70 <_free_r>
 800ba28:	4625      	mov	r5, r4
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba30:	f000 f81a 	bl	800ba68 <_malloc_usable_size_r>
 800ba34:	4284      	cmp	r4, r0
 800ba36:	4606      	mov	r6, r0
 800ba38:	d802      	bhi.n	800ba40 <_realloc_r+0x34>
 800ba3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba3e:	d8f4      	bhi.n	800ba2a <_realloc_r+0x1e>
 800ba40:	4621      	mov	r1, r4
 800ba42:	4638      	mov	r0, r7
 800ba44:	f7fe ff1a 	bl	800a87c <_malloc_r>
 800ba48:	4680      	mov	r8, r0
 800ba4a:	b908      	cbnz	r0, 800ba50 <_realloc_r+0x44>
 800ba4c:	4645      	mov	r5, r8
 800ba4e:	e7ec      	b.n	800ba2a <_realloc_r+0x1e>
 800ba50:	42b4      	cmp	r4, r6
 800ba52:	4622      	mov	r2, r4
 800ba54:	4629      	mov	r1, r5
 800ba56:	bf28      	it	cs
 800ba58:	4632      	movcs	r2, r6
 800ba5a:	f7ff f97a 	bl	800ad52 <memcpy>
 800ba5e:	4629      	mov	r1, r5
 800ba60:	4638      	mov	r0, r7
 800ba62:	f7ff f985 	bl	800ad70 <_free_r>
 800ba66:	e7f1      	b.n	800ba4c <_realloc_r+0x40>

0800ba68 <_malloc_usable_size_r>:
 800ba68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba6c:	1f18      	subs	r0, r3, #4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bfbc      	itt	lt
 800ba72:	580b      	ldrlt	r3, [r1, r0]
 800ba74:	18c0      	addlt	r0, r0, r3
 800ba76:	4770      	bx	lr

0800ba78 <_init>:
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7a:	bf00      	nop
 800ba7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7e:	bc08      	pop	{r3}
 800ba80:	469e      	mov	lr, r3
 800ba82:	4770      	bx	lr

0800ba84 <_fini>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	bf00      	nop
 800ba88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8a:	bc08      	pop	{r3}
 800ba8c:	469e      	mov	lr, r3
 800ba8e:	4770      	bx	lr
