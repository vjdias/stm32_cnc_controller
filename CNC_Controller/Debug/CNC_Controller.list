
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000859c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  0800872c  0800872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a60  08008a60  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a68  08008a68  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a68  08008a68  00009a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a6c  08008a6c  00009a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008a70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000060  08008ad0  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000acc  08008ad0  0000aacc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156b3  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380e  00000000  00000000  0001f743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00022f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbb  00000000  00000000  000243c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027757  00000000  00000000  0002537b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e120  00000000  00000000  0004cad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f42fc  00000000  00000000  0006abf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015eeee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f0  00000000  00000000  0015ef34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00164724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008714 	.word	0x08008714

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008714 	.word	0x08008714

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <has_header_tail>:
	return 0;
}

// Generic header/tail validation
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	460b      	mov	r3, r1
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4613      	mov	r3, r2
 80005c0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d011      	beq.n	80005ec <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d90e      	bls.n	80005ec <has_header_tail+0x40>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d109      	bne.n	80005ec <has_header_tail+0x40>
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3b01      	subs	r3, #1
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d101      	bne.n	80005ec <has_header_tail+0x40>
 80005e8:	2301      	movs	r3, #1
 80005ea:	e000      	b.n	80005ee <has_header_tail+0x42>
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <frame_expect_req>:
// =====================
// Frame validators
// =====================
// Ensure buffer has min length, proper header/tail, and expected type
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b084      	sub	sp, #16
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4613      	mov	r3, r2
 8000608:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <frame_expect_req+0x1e>
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d202      	bcs.n	800061e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	e012      	b.n	8000644 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800061e:	2355      	movs	r3, #85	@ 0x55
 8000620:	22aa      	movs	r2, #170	@ 0xaa
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f7ff ffc1 	bl	80005ac <has_header_tail>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3301      	adds	r3, #1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	429a      	cmp	r2, r3
 800063a:	d002      	beq.n	8000642 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 800063c:	f06f 0301 	mvn.w	r3, #1
 8000640:	e000      	b.n	8000644 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <led_ctrl_req_decoder>:

// New LED_CTRL (RGB) request is 9 bytes total:
// [0]=0xAA, [1]=0x07, [2]=frameId, [3]=ledMask, [4]=R, [5]=G, [6]=B,
// [7]=parity(byte XOR over 1..6), [8]=0x55

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <led_ctrl_req_decoder+0x18>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	e025      	b.n	80006b6 <led_ctrl_req_decoder+0x6a>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, 9);
 800066a:	2309      	movs	r3, #9
 800066c:	2207      	movs	r2, #7
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffc2 	bl	80005fa <frame_expect_req>
 8000676:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <led_ctrl_req_decoder+0x36>
        return st;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	e019      	b.n	80006b6 <led_ctrl_req_decoder+0x6a>
    out->frameId = raw[2];
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3302      	adds	r3, #2
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3303      	adds	r3, #3
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	705a      	strb	r2, [r3, #1]
    out->r = raw[4];
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3304      	adds	r3, #4
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	709a      	strb	r2, [r3, #2]
    out->g = raw[5];
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3305      	adds	r3, #5
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	70da      	strb	r2, [r3, #3]
    out->b = raw[6];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3306      	adds	r3, #6
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	711a      	strb	r2, [r3, #4]
    return PROTO_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 80006cc:	2248      	movs	r2, #72	@ 0x48
 80006ce:	2100      	movs	r1, #0
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f007 fc4f 	bl	8007f74 <memset>
	r->resp = resp_fifo;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d009      	beq.n	80006f6 <router_init+0x36>
		handlers = *h;
 80006e2:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <router_init+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4614      	mov	r4, r2
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bdb0      	pop	{r4, r5, r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000007c 	.word	0x2000007c

08000704 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	if (n < 4)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d801      	bhi.n	8000718 <is_req_complete+0x14>
		return 0; // mínimo
 8000714:	2300      	movs	r3, #0
 8000716:	e01a      	b.n	800074e <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2baa      	cmp	r3, #170	@ 0xaa
 800071e:	d002      	beq.n	8000726 <is_req_complete+0x22>
		return -1; // inválido
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	e013      	b.n	800074e <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 8000726:	2303      	movs	r3, #3
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	e00b      	b.n	8000744 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b55      	cmp	r3, #85	@ 0x55
 8000736:	d102      	bne.n	800073e <is_req_complete+0x3a>
			return (int) (i + 1);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	e007      	b.n	800074e <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3ef      	bcc.n	800072c <is_req_complete+0x28>
	}
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	if (len < 4)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b03      	cmp	r3, #3
 800076c:	f240 80a4 	bls.w	80008b8 <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3301      	adds	r3, #1
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	3b01      	subs	r3, #1
 800077c:	2b1f      	cmp	r3, #31
 800077e:	f200 809d 	bhi.w	80008bc <dispatch+0x160>
 8000782:	a201      	add	r2, pc, #4	@ (adr r2, 8000788 <dispatch+0x2c>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000809 	.word	0x08000809
 800078c:	0800081f 	.word	0x0800081f
 8000790:	08000835 	.word	0x08000835
 8000794:	0800084b 	.word	0x0800084b
 8000798:	08000861 	.word	0x08000861
 800079c:	08000877 	.word	0x08000877
 80007a0:	0800088d 	.word	0x0800088d
 80007a4:	080008bd 	.word	0x080008bd
 80007a8:	080008bd 	.word	0x080008bd
 80007ac:	080008bd 	.word	0x080008bd
 80007b0:	080008bd 	.word	0x080008bd
 80007b4:	080008bd 	.word	0x080008bd
 80007b8:	080008bd 	.word	0x080008bd
 80007bc:	080008bd 	.word	0x080008bd
 80007c0:	080008bd 	.word	0x080008bd
 80007c4:	080008bd 	.word	0x080008bd
 80007c8:	080008bd 	.word	0x080008bd
 80007cc:	080008bd 	.word	0x080008bd
 80007d0:	080008bd 	.word	0x080008bd
 80007d4:	080008bd 	.word	0x080008bd
 80007d8:	080008bd 	.word	0x080008bd
 80007dc:	080008bd 	.word	0x080008bd
 80007e0:	080008bd 	.word	0x080008bd
 80007e4:	080008bd 	.word	0x080008bd
 80007e8:	080008bd 	.word	0x080008bd
 80007ec:	080008bd 	.word	0x080008bd
 80007f0:	080008bd 	.word	0x080008bd
 80007f4:	080008bd 	.word	0x080008bd
 80007f8:	080008bd 	.word	0x080008bd
 80007fc:	080008bd 	.word	0x080008bd
 8000800:	080008bd 	.word	0x080008bd
 8000804:	080008a3 	.word	0x080008a3
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 8000808:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <dispatch+0x188>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d057      	beq.n	80008c0 <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 8000810:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <dispatch+0x188>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	4798      	blx	r3
		break;
 800081c:	e050      	b.n	80008c0 <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <dispatch+0x188>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d04e      	beq.n	80008c4 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 8000826:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <dispatch+0x188>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	4798      	blx	r3
		break;
 8000832:	e047      	b.n	80008c4 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <dispatch+0x188>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d045      	beq.n	80008c8 <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <dispatch+0x188>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	4798      	blx	r3
		break;
 8000848:	e03e      	b.n	80008c8 <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <dispatch+0x188>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d03c      	beq.n	80008cc <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 8000852:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <dispatch+0x188>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	4798      	blx	r3
		break;
 800085e:	e035      	b.n	80008cc <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <dispatch+0x188>)
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d033      	beq.n	80008d0 <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <dispatch+0x188>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	68b9      	ldr	r1, [r7, #8]
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	4798      	blx	r3
		break;
 8000874:	e02c      	b.n	80008d0 <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <dispatch+0x188>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d02a      	beq.n	80008d4 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <dispatch+0x188>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	4798      	blx	r3
		break;
 800088a:	e023      	b.n	80008d4 <dispatch+0x178>
	case REQ_LED_CTRL:
		if (handlers.on_led_ctrl)
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <dispatch+0x188>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d021      	beq.n	80008d8 <dispatch+0x17c>
			handlers.on_led_ctrl(r, f, len);
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <dispatch+0x188>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	4798      	blx	r3
		break;
 80008a0:	e01a      	b.n	80008d8 <dispatch+0x17c>
	case REQ_FPGA_STATUS:
		if (handlers.on_fpga_status)
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <dispatch+0x188>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d018      	beq.n	80008dc <dispatch+0x180>
			handlers.on_fpga_status(r, f, len);
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <dispatch+0x188>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	4798      	blx	r3
		break;
 80008b6:	e011      	b.n	80008dc <dispatch+0x180>
		return;
 80008b8:	bf00      	nop
 80008ba:	e010      	b.n	80008de <dispatch+0x182>
	default:
		break; // desconhecido
 80008bc:	bf00      	nop
 80008be:	e00e      	b.n	80008de <dispatch+0x182>
		break;
 80008c0:	bf00      	nop
 80008c2:	e00c      	b.n	80008de <dispatch+0x182>
		break;
 80008c4:	bf00      	nop
 80008c6:	e00a      	b.n	80008de <dispatch+0x182>
		break;
 80008c8:	bf00      	nop
 80008ca:	e008      	b.n	80008de <dispatch+0x182>
		break;
 80008cc:	bf00      	nop
 80008ce:	e006      	b.n	80008de <dispatch+0x182>
		break;
 80008d0:	bf00      	nop
 80008d2:	e004      	b.n	80008de <dispatch+0x182>
		break;
 80008d4:	bf00      	nop
 80008d6:	e002      	b.n	80008de <dispatch+0x182>
		break;
 80008d8:	bf00      	nop
 80008da:	e000      	b.n	80008de <dispatch+0x182>
		break;
 80008dc:	bf00      	nop
	}
}
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000007c 	.word	0x2000007c

080008e8 <router_feed_bytes>:

void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < len; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e038      	b.n	800096c <router_feed_bytes+0x84>
		if (r->idx >= sizeof(r->acc))
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000900:	2b3f      	cmp	r3, #63	@ 0x3f
 8000902:	d903      	bls.n	800090c <router_feed_bytes+0x24>
			r->idx = 0; // evita overflow simples
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	441a      	add	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000918:	1c59      	adds	r1, r3, #1
 800091a:	b2c8      	uxtb	r0, r1
 800091c:	68f9      	ldr	r1, [r7, #12]
 800091e:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000922:	4619      	mov	r1, r3
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	545a      	strb	r2, [r3, r1]
		int comp = is_req_complete(r->acc, r->idx);
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000932:	4619      	mov	r1, r3
 8000934:	4610      	mov	r0, r2
 8000936:	f7ff fee5 	bl	8000704 <is_req_complete>
 800093a:	6138      	str	r0, [r7, #16]
		if (comp < 0) {
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da04      	bge.n	800094c <router_feed_bytes+0x64>
			r->idx = 0;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			continue;
 800094a:	e00c      	b.n	8000966 <router_feed_bytes+0x7e>
		} // descarta até header
		if (comp > 0) {
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	2b00      	cmp	r3, #0
 8000950:	dd09      	ble.n	8000966 <router_feed_bytes+0x7e>
			dispatch(r, r->acc, (uint32_t) comp);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4619      	mov	r1, r3
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff feff 	bl	800075c <dispatch>
			r->idx = 0;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	for (uint32_t i = 0; i < len; i++) {
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3c2      	bcc.n	80008fa <router_feed_bytes+0x12>
		}
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <resp_fifo_create>:

response_fifo_t* resp_fifo_create(void) {
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
	response_fifo_t *q = (response_fifo_t*) calloc(1, sizeof(*q));
 8000984:	210c      	movs	r1, #12
 8000986:	2001      	movs	r0, #1
 8000988:	f007 f9ec 	bl	8007d64 <calloc>
 800098c:	4603      	mov	r3, r0
 800098e:	607b      	str	r3, [r7, #4]
	return q;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <resp_fifo_pop>:
		q->head = n;
	q->tail = n;
	q->count++;
	return PROTO_OK;
}
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
	if (!q || !q->head || !out)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <resp_fifo_pop+0x20>
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <resp_fifo_pop+0x20>
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <resp_fifo_pop+0x24>
		return 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e02e      	b.n	8000a1c <resp_fifo_pop+0x82>
	node_t *n = q->head;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	617b      	str	r3, [r7, #20]
	if (n->len > max_len)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d202      	bcs.n	80009d4 <resp_fifo_pop+0x3a>
		return PROTO_ERR_RANGE;
 80009ce:	f06f 0303 	mvn.w	r3, #3
 80009d2:	e023      	b.n	8000a1c <resp_fifo_pop+0x82>
	memcpy(out, n->buf, n->len);
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	461a      	mov	r2, r3
 80009de:	68b8      	ldr	r0, [r7, #8]
 80009e0:	f007 fb0c 	bl	8007ffc <memcpy>
	int l = (int) n->len;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
	q->head = n->next;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	601a      	str	r2, [r3, #0]
	if (!q->head)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <resp_fifo_pop+0x66>
		q->tail = NULL;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
	q->count--;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	609a      	str	r2, [r3, #8]
	free(n->buf);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f007 f9c4 	bl	8007d9c <free>
	free(n);
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f007 f9c1 	bl	8007d9c <free>
	return l;
 8000a1a:	693b      	ldr	r3, [r7, #16]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <led_service_init>:
#include "gpio.h"
#include "Protocol/Requests/led_control_request.h"
#include "Services/Log/log_service.h"
#include <stdio.h>

void led_service_init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gi = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    // Configure RGB pins
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
    gi.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
    gi.Pin = LED_R_GPIO_PIN; HAL_GPIO_Init(LED_R_GPIO_PORT, &gi);
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <led_service_init+0x74>)
 8000a66:	f001 ff47 	bl	80028f8 <HAL_GPIO_Init>
    gi.Pin = LED_G_GPIO_PIN; HAL_GPIO_Init(LED_G_GPIO_PORT, &gi);
 8000a6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <led_service_init+0x74>)
 8000a76:	f001 ff3f 	bl	80028f8 <HAL_GPIO_Init>
    gi.Pin = LED_B_GPIO_PIN; HAL_GPIO_Init(LED_B_GPIO_PORT, &gi);
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <led_service_init+0x74>)
 8000a84:	f001 ff38 	bl	80028f8 <HAL_GPIO_Init>
    // Default OFF
#if LED_ACTIVE_HIGH
    HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <led_service_init+0x74>)
 8000a8e:	f002 f9bf 	bl	8002e10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <led_service_init+0x74>)
 8000a9a:	f002 f9b9 	bl	8002e10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <led_service_init+0x74>)
 8000aa4:	f002 f9b4 	bl	8002e10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
#else
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
#endif
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <led_apply_rgb>:
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, on ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}

#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
static inline void led_apply_rgb(uint8_t r, uint8_t g, uint8_t b, uint8_t mask) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71bb      	strb	r3, [r7, #6]
 8000aca:	460b      	mov	r3, r1
 8000acc:	717b      	strb	r3, [r7, #5]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	713b      	strb	r3, [r7, #4]
    // Treat non-zero as ON (binary per channel). For PWM, integrate TIM later.
    if (mask & LED_MASK_R) {
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00a      	beq.n	8000af2 <led_apply_rgb+0x3e>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2102      	movs	r1, #2
 8000aec:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <led_apply_rgb+0x88>)
 8000aee:	f002 f98f 	bl	8002e10 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_G) {
 8000af2:	793b      	ldrb	r3, [r7, #4]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <led_apply_rgb+0x60>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0e:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <led_apply_rgb+0x88>)
 8000b10:	f002 f97e 	bl	8002e10 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_B) {
 8000b14:	793b      	ldrb	r3, [r7, #4]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00a      	beq.n	8000b34 <led_apply_rgb+0x80>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b1e:	797b      	ldrb	r3, [r7, #5]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bf14      	ite	ne
 8000b24:	2301      	movne	r3, #1
 8000b26:	2300      	moveq	r3, #0
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2180      	movs	r1, #128	@ 0x80
 8000b2e:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <led_apply_rgb+0x88>)
 8000b30:	f002 f96e 	bl	8002e10 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	48000400 	.word	0x48000400

08000b40 <led_on_led_ctrl>:
#endif

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b099      	sub	sp, #100	@ 0x64
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
    led_ctrl_req_t req;
    if (!frame)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d033      	beq.n	8000bb8 <led_on_led_ctrl+0x78>
        return;
    if (led_ctrl_req_decoder(frame, len, &req) != PROTO_OK)
 8000b50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b54:	461a      	mov	r2, r3
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fd77 	bl	800064c <led_ctrl_req_decoder>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d12b      	bne.n	8000bbc <led_on_led_ctrl+0x7c>
        return;
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    led_apply_rgb(req.r, req.g, req.b, req.ledMask);
 8000b64:	f897 004a 	ldrb.w	r0, [r7, #74]	@ 0x4a
 8000b68:	f897 104b 	ldrb.w	r1, [r7, #75]	@ 0x4b
 8000b6c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000b70:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000b74:	f7ff ff9e 	bl	8000ab4 <led_apply_rgb>
#if LOG_ENABLE
    // Log concise and verbose (only active mode will emit)
    log_event_ids(1 /*svc:led*/, 1 /*state:applied*/, PROTO_OK);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 f8d5 	bl	8000d2c <log_event_ids>
    char status[64];
    snprintf(status, sizeof status, "mask=0x%02X rgb=%u,%u,%u", (unsigned)req.ledMask, req.r, req.g, req.b);
 8000b82:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000b86:	461c      	mov	r4, r3
 8000b88:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000b8c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8000b90:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 8000b94:	f107 0008 	add.w	r0, r7, #8
 8000b98:	9102      	str	r1, [sp, #8]
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <led_on_led_ctrl+0x84>)
 8000ba2:	2140      	movs	r1, #64	@ 0x40
 8000ba4:	f007 f9b0 	bl	8007f08 <sniprintf>
    log_event_names("led", "applied", status);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	461a      	mov	r2, r3
 8000bae:	4906      	ldr	r1, [pc, #24]	@ (8000bc8 <led_on_led_ctrl+0x88>)
 8000bb0:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <led_on_led_ctrl+0x8c>)
 8000bb2:	f000 f8ef 	bl	8000d94 <log_event_names>
 8000bb6:	e002      	b.n	8000bbe <led_on_led_ctrl+0x7e>
        return;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <led_on_led_ctrl+0x7e>
        return;
 8000bbc:	bf00      	nop
#if LOG_ENABLE
    log_event_ids(1, 1, PROTO_OK);
    log_event_names("led", "applied", ((req.r | req.g | req.b) ? "on" : "off"));
#endif
#endif
}
 8000bbe:	3754      	adds	r7, #84	@ 0x54
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	0800872c 	.word	0x0800872c
 8000bc8:	08008748 	.word	0x08008748
 8000bcc:	08008750 	.word	0x08008750

08000bd0 <rb_count>:
static volatile uint16_t s_tail = 0; // read index
static volatile uint8_t s_tx_busy = 0;
static uint8_t s_tx_buf[LOG_CHUNK_MAX];
static uint16_t s_tx_len = 0;

static inline uint16_t rb_count(void){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
    uint16_t h = s_head, t = s_tail;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <rb_count+0x3c>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	80fb      	strh	r3, [r7, #6]
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <rb_count+0x40>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	80bb      	strh	r3, [r7, #4]
    return (uint16_t)((h >= t) ? (h - t) : (LOG_BUF_SZ - t + h));
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d304      	bcc.n	8000bf4 <rb_count+0x24>
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	e005      	b.n	8000c00 <rb_count+0x30>
 8000bf4:	88fa      	ldrh	r2, [r7, #6]
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000bfe:	b29b      	uxth	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	200004a0 	.word	0x200004a0
 8000c10:	200004a2 	.word	0x200004a2

08000c14 <rb_space>:
static inline uint16_t rb_space(void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    return (uint16_t)(LOG_BUF_SZ - 1 - rb_count());
 8000c18:	f7ff ffda 	bl	8000bd0 <rb_count>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 8000c22:	3303      	adds	r3, #3
 8000c24:	b29b      	uxth	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <rb_push_bytes>:
static void rb_push_bytes(const uint8_t* data, uint16_t len){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
    if(!data || !len || !s_enabled) return;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d02e      	beq.n	8000c9c <rb_push_bytes+0x70>
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d02b      	beq.n	8000c9c <rb_push_bytes+0x70>
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <rb_push_bytes+0x78>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d027      	beq.n	8000c9c <rb_push_bytes+0x70>
    uint16_t space = rb_space();
 8000c4c:	f7ff ffe2 	bl	8000c14 <rb_space>
 8000c50:	4603      	mov	r3, r0
 8000c52:	81bb      	strh	r3, [r7, #12]
    if(len > space) len = space; // drop excess (lowest priority)
 8000c54:	887a      	ldrh	r2, [r7, #2]
 8000c56:	89bb      	ldrh	r3, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d901      	bls.n	8000c60 <rb_push_bytes+0x34>
 8000c5c:	89bb      	ldrh	r3, [r7, #12]
 8000c5e:	807b      	strh	r3, [r7, #2]
    for(uint16_t i=0;i<len;i++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	81fb      	strh	r3, [r7, #14]
 8000c64:	e015      	b.n	8000c92 <rb_push_bytes+0x66>
        s_buf[s_head] = data[i];
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c6e:	8812      	ldrh	r2, [r2, #0]
 8000c70:	b292      	uxth	r2, r2
 8000c72:	7819      	ldrb	r1, [r3, #0]
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <rb_push_bytes+0x80>)
 8000c76:	5499      	strb	r1, [r3, r2]
        s_head = (uint16_t)((s_head + 1) % LOG_BUF_SZ);
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
    for(uint16_t i=0;i<len;i++){
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	81fb      	strh	r3, [r7, #14]
 8000c92:	89fa      	ldrh	r2, [r7, #14]
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3e5      	bcc.n	8000c66 <rb_push_bytes+0x3a>
 8000c9a:	e000      	b.n	8000c9e <rb_push_bytes+0x72>
    if(!data || !len || !s_enabled) return;
 8000c9c:	bf00      	nop
    }
}
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200004a0 	.word	0x200004a0
 8000cac:	200000a0 	.word	0x200000a0

08000cb0 <push_line>:

static void push_line(const char* line){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    if(!line) return;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <push_line+0x2e>
    size_t n = strlen(line);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fa86 	bl	80001d0 <strlen>
 8000cc4:	60f8      	str	r0, [r7, #12]
    if(n > 240) n = 240; // trim
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cca:	d901      	bls.n	8000cd0 <push_line+0x20>
 8000ccc:	23f0      	movs	r3, #240	@ 0xf0
 8000cce:	60fb      	str	r3, [r7, #12]
    rb_push_bytes((const uint8_t*)line, (uint16_t)n);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffa8 	bl	8000c2c <rb_push_bytes>
 8000cdc:	e000      	b.n	8000ce0 <push_line+0x30>
    if(!line) return;
 8000cde:	bf00      	nop
}
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <log_service_init>:

void log_service_init(void){
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
    s_enabled = LOG_DEFAULT_ENABLED;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <log_service_init+0x30>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
    s_mode = LOG_DEFAULT_MODE;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <log_service_init+0x34>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
    s_head = s_tail = 0;
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <log_service_init+0x38>)
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	801a      	strh	r2, [r3, #0]
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <log_service_init+0x3c>)
 8000d02:	460a      	mov	r2, r1
 8000d04:	801a      	strh	r2, [r3, #0]
    s_tx_busy = 0;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <log_service_init+0x40>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	2000009c 	.word	0x2000009c
 8000d20:	200004a2 	.word	0x200004a2
 8000d24:	200004a0 	.word	0x200004a0
 8000d28:	200004a4 	.word	0x200004a4

08000d2c <log_event_ids>:

void log_set_enabled(int enabled){ s_enabled = (enabled != 0); }
void log_set_mode(log_mode_t mode){ s_mode = mode; }

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b096      	sub	sp, #88	@ 0x58
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	4603      	mov	r3, r0
 8000d34:	603a      	str	r2, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	71bb      	strb	r3, [r7, #6]
    if(!s_enabled) return;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <log_event_ids+0x5c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d01a      	beq.n	8000d7a <log_event_ids+0x4e>
    if(s_mode != LOG_MODE_CONCISE) return;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <log_event_ids+0x60>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d117      	bne.n	8000d7e <log_event_ids+0x52>
    char line[64];
    // Format: L,svc=<id>,state=<id>,status=<num>\r\n
    int nn = snprintf(line, sizeof line, "L,svc=%u,state=%u,status=%ld\r\n",
 8000d4e:	79f9      	ldrb	r1, [r7, #7]
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	f107 000c 	add.w	r0, r7, #12
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <log_event_ids+0x64>)
 8000d60:	2140      	movs	r1, #64	@ 0x40
 8000d62:	f007 f8d1 	bl	8007f08 <sniprintf>
 8000d66:	64f8      	str	r0, [r7, #76]	@ 0x4c
                      (unsigned)service_id, (unsigned)state_id, (long)status);
    if(nn > 0) push_line(line);
 8000d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd08      	ble.n	8000d80 <log_event_ids+0x54>
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff9c 	bl	8000cb0 <push_line>
 8000d78:	e002      	b.n	8000d80 <log_event_ids+0x54>
    if(!s_enabled) return;
 8000d7a:	bf00      	nop
 8000d7c:	e000      	b.n	8000d80 <log_event_ids+0x54>
    if(s_mode != LOG_MODE_CONCISE) return;
 8000d7e:	bf00      	nop
}
 8000d80:	3750      	adds	r7, #80	@ 0x50
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	08008754 	.word	0x08008754

08000d94 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b0      	sub	sp, #192	@ 0xc0
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
    if(!s_enabled) return;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <log_event_names+0x78>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d02a      	beq.n	8000dfe <log_event_names+0x6a>
    if(s_mode != LOG_MODE_VERBOSE) return;
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <log_event_names+0x7c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d127      	bne.n	8000e02 <log_event_names+0x6e>
    if(!service_name) service_name = "?";
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <log_event_names+0x28>
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <log_event_names+0x80>)
 8000dba:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <log_event_names+0x32>
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <log_event_names+0x80>)
 8000dc4:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <log_event_names+0x3c>
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <log_event_names+0x80>)
 8000dce:	607b      	str	r3, [r7, #4]
    char line[160];
    // Format: LOG,service=<name>,state=<name>,status=<text>\r\n
    int nn = snprintf(line, sizeof line, "LOG,service=%s,state=%s,status=%s\r\n",
 8000dd0:	f107 0014 	add.w	r0, r7, #20
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <log_event_names+0x84>)
 8000de0:	21a0      	movs	r1, #160	@ 0xa0
 8000de2:	f007 f891 	bl	8007f08 <sniprintf>
 8000de6:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
                      service_name, state_name, status_text);
    if(nn > 0) push_line(line);
 8000dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dd08      	ble.n	8000e04 <log_event_names+0x70>
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff5a 	bl	8000cb0 <push_line>
 8000dfc:	e002      	b.n	8000e04 <log_event_names+0x70>
    if(!s_enabled) return;
 8000dfe:	bf00      	nop
 8000e00:	e000      	b.n	8000e04 <log_event_names+0x70>
    if(s_mode != LOG_MODE_VERBOSE) return;
 8000e02:	bf00      	nop
}
 8000e04:	37b8      	adds	r7, #184	@ 0xb8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	2000009c 	.word	0x2000009c
 8000e14:	08008774 	.word	0x08008774
 8000e18:	08008778 	.word	0x08008778

08000e1c <log_poll>:

void log_poll(void){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
    if(!s_enabled) return;
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <log_poll+0xd8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d05b      	beq.n	8000ee2 <log_poll+0xc6>
    if(s_tx_busy) return; // wait for current IT transfer to complete
 8000e2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ef8 <log_poll+0xdc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d158      	bne.n	8000ee6 <log_poll+0xca>
    uint16_t cnt = rb_count();
 8000e34:	f7ff fecc 	bl	8000bd0 <rb_count>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	80bb      	strh	r3, [r7, #4]
    if(!cnt) return;
 8000e3c:	88bb      	ldrh	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d053      	beq.n	8000eea <log_poll+0xce>
    uint16_t n = (cnt > LOG_CHUNK_MAX) ? LOG_CHUNK_MAX : cnt;
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	2b60      	cmp	r3, #96	@ 0x60
 8000e46:	bf28      	it	cs
 8000e48:	2360      	movcs	r3, #96	@ 0x60
 8000e4a:	807b      	strh	r3, [r7, #2]
    uint16_t first = (uint16_t)((s_head >= s_tail) ? (n) : (uint16_t)(LOG_BUF_SZ - s_tail));
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <log_poll+0xe0>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <log_poll+0xe4>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d206      	bcs.n	8000e6a <log_poll+0x4e>
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <log_poll+0xe4>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	e000      	b.n	8000e6c <log_poll+0x50>
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	80fb      	strh	r3, [r7, #6]
    if(first > n) first = n;
 8000e6e:	88fa      	ldrh	r2, [r7, #6]
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d901      	bls.n	8000e7a <log_poll+0x5e>
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	80fb      	strh	r3, [r7, #6]
    memcpy(s_tx_buf, &s_buf[s_tail], first);
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <log_poll+0xe4>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b20      	ldr	r3, [pc, #128]	@ (8000f04 <log_poll+0xe8>)
 8000e84:	4413      	add	r3, r2
 8000e86:	88fa      	ldrh	r2, [r7, #6]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <log_poll+0xec>)
 8000e8c:	f007 f8b6 	bl	8007ffc <memcpy>
    if(first < n){
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d209      	bcs.n	8000eac <log_poll+0x90>
        memcpy(s_tx_buf + first, &s_buf[0], n - first);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <log_poll+0xec>)
 8000e9c:	1898      	adds	r0, r3, r2
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4917      	ldr	r1, [pc, #92]	@ (8000f04 <log_poll+0xe8>)
 8000ea8:	f007 f8a8 	bl	8007ffc <memcpy>
    }
    if(HAL_UART_Transmit_IT(&huart1, s_tx_buf, (uint16_t)n) == HAL_OK){
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4915      	ldr	r1, [pc, #84]	@ (8000f08 <log_poll+0xec>)
 8000eb2:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <log_poll+0xf0>)
 8000eb4:	f006 f806 	bl	8006ec4 <HAL_UART_Transmit_IT>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d116      	bne.n	8000eec <log_poll+0xd0>
        s_tail = (uint16_t)((s_tail + n) % LOG_BUF_SZ);
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <log_poll+0xe4>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <log_poll+0xe4>)
 8000ed2:	801a      	strh	r2, [r3, #0]
        s_tx_len = n;
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f10 <log_poll+0xf4>)
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	8013      	strh	r3, [r2, #0]
        s_tx_busy = 1;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <log_poll+0xdc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e004      	b.n	8000eec <log_poll+0xd0>
    if(!s_enabled) return;
 8000ee2:	bf00      	nop
 8000ee4:	e002      	b.n	8000eec <log_poll+0xd0>
    if(s_tx_busy) return; // wait for current IT transfer to complete
 8000ee6:	bf00      	nop
 8000ee8:	e000      	b.n	8000eec <log_poll+0xd0>
    if(!cnt) return;
 8000eea:	bf00      	nop
    }
}
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	200004a4 	.word	0x200004a4
 8000efc:	200004a0 	.word	0x200004a0
 8000f00:	200004a2 	.word	0x200004a2
 8000f04:	200000a0 	.word	0x200000a0
 8000f08:	200004a8 	.word	0x200004a8
 8000f0c:	200008f8 	.word	0x200008f8
 8000f10:	20000508 	.word	0x20000508

08000f14 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <motion_on_move_queue_add+0x34>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <motion_on_move_queue_add+0x34>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <motion_on_move_queue_add+0x34>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <motion_on_move_queue_add+0x34>)
 8000f3a:	705a      	strb	r2, [r3, #1]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	2000050c 	.word	0x2000050c

08000f4c <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 8000f6e:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <motion_on_start_move+0x28>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <motion_on_start_move+0x28>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	701a      	strb	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000050c 	.word	0x2000050c

08000f90 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <motion_on_move_end+0x1c>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	2000050c 	.word	0x2000050c

08000fb0 <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"

// Static adapter functions matching router callbacks
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	68b8      	ldr	r0, [r7, #8]
 8000fd6:	f7ff ff9d 	bl	8000f14 <motion_on_move_queue_add>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	68b8      	ldr	r0, [r7, #8]
 8000ff2:	f7ff ffab 	bl	8000f4c <motion_on_move_queue_status>
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	68b8      	ldr	r0, [r7, #8]
 800100e:	f7ff ffa9 	bl	8000f64 <motion_on_start_move>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	f7ff fcfb 	bl	8000a24 <home_on_move_home>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f7ff ffb3 	bl	8000fb0 <probe_on_move_probe_level>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	68b8      	ldr	r0, [r7, #8]
 8001062:	f7ff ff95 	bl	8000f90 <motion_on_move_end>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f7ff fd5f 	bl	8000b40 <led_on_led_ctrl>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 800108a:	b480      	push	{r7}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if (!h)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d018      	beq.n	80010e4 <services_register_handlers+0x40>
		return;
	h->on_move_queue_add = h_move_queue_add;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a0e      	ldr	r2, [pc, #56]	@ (80010f0 <services_register_handlers+0x4c>)
 80010b6:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <services_register_handlers+0x50>)
 80010bc:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <services_register_handlers+0x54>)
 80010c2:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <services_register_handlers+0x58>)
 80010c8:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <services_register_handlers+0x5c>)
 80010ce:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <services_register_handlers+0x60>)
 80010d4:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <services_register_handlers+0x64>)
 80010da:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <services_register_handlers+0x68>)
 80010e0:	61da      	str	r2, [r3, #28]
 80010e2:	e000      	b.n	80010e6 <services_register_handlers+0x42>
		return;
 80010e4:	bf00      	nop
}
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	08000fc7 	.word	0x08000fc7
 80010f4:	08000fe3 	.word	0x08000fe3
 80010f8:	08000fff 	.word	0x08000fff
 80010fc:	0800101b 	.word	0x0800101b
 8001100:	08001037 	.word	0x08001037
 8001104:	08001053 	.word	0x08001053
 8001108:	0800106f 	.word	0x0800106f
 800110c:	0800108b 	.word	0x0800108b

08001110 <app_init>:
#define APP_SPI_RX_BUF_SZ 256u
#endif
static uint8_t g_spi_rx_buf[APP_SPI_RX_BUF_SZ];
static volatile int g_spi_tx_busy = 0;

void app_init(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    // Init services (GPIO for LED etc.)
    led_service_init();
 8001114:	f7ff fc92 	bl	8000a3c <led_service_init>
    log_service_init();
 8001118:	f7ff fde6 	bl	8000ce8 <log_service_init>

    // Prepare router and response FIFO
    g_resp_fifo = resp_fifo_create();
 800111c:	f7ff fc2f 	bl	800097e <resp_fifo_create>
 8001120:	4603      	mov	r3, r0
 8001122:	4a0c      	ldr	r2, [pc, #48]	@ (8001154 <app_init+0x44>)
 8001124:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 8001126:	2220      	movs	r2, #32
 8001128:	2100      	movs	r1, #0
 800112a:	480b      	ldr	r0, [pc, #44]	@ (8001158 <app_init+0x48>)
 800112c:	f006 ff22 	bl	8007f74 <memset>
    services_register_handlers(&g_handlers);
 8001130:	4809      	ldr	r0, [pc, #36]	@ (8001158 <app_init+0x48>)
 8001132:	f7ff ffb7 	bl	80010a4 <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <app_init+0x44>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <app_init+0x48>)
 800113c:	4619      	mov	r1, r3
 800113e:	4807      	ldr	r0, [pc, #28]	@ (800115c <app_init+0x4c>)
 8001140:	f7ff fabe 	bl	80006c0 <router_init>

    // Start SPI RX DMA in circular mode to feed router from callbacks
    (void)HAL_SPI_Receive_DMA(&hspi1, g_spi_rx_buf, (uint16_t)APP_SPI_RX_BUF_SZ);
 8001144:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001148:	4905      	ldr	r1, [pc, #20]	@ (8001160 <app_init+0x50>)
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <app_init+0x54>)
 800114c:	f004 f8ce 	bl	80052ec <HAL_SPI_Receive_DMA>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000057c 	.word	0x2000057c
 8001158:	2000055c 	.word	0x2000055c
 800115c:	20000514 	.word	0x20000514
 8001160:	20000580 	.word	0x20000580
 8001164:	20000684 	.word	0x20000684

08001168 <app_poll>:

void app_poll(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b092      	sub	sp, #72	@ 0x48
 800116c:	af00      	add	r7, sp, #0
    // If TX is idle, try to pop one response frame from FIFO and transmit
    if (!g_spi_tx_busy && g_resp_fifo) {
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <app_poll+0x54>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d11b      	bne.n	80011ae <app_poll+0x46>
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <app_poll+0x58>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d017      	beq.n	80011ae <app_poll+0x46>
        uint8_t out[64];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <app_poll+0x58>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	1d39      	adds	r1, r7, #4
 8001184:	2240      	movs	r2, #64	@ 0x40
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fc07 	bl	800099a <resp_fifo_pop>
 800118c:	6478      	str	r0, [r7, #68]	@ 0x44
        if (n > 0) {
 800118e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd0c      	ble.n	80011ae <app_poll+0x46>
            // Use interrupt-driven TX to avoid DMA mode constraints
            if (HAL_SPI_Transmit_IT(&hspi1, out, (uint16_t)n) == HAL_OK) {
 8001194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001196:	b29a      	uxth	r2, r3
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4619      	mov	r1, r3
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <app_poll+0x5c>)
 800119e:	f004 f80f 	bl	80051c0 <HAL_SPI_Transmit_IT>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <app_poll+0x46>
                g_spi_tx_busy = 1;
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <app_poll+0x54>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Lowest priority: drain log output (non-blocking, only if USART idle)
    log_poll();
 80011ae:	f7ff fe35 	bl	8000e1c <log_poll>
}
 80011b2:	bf00      	nop
 80011b4:	3748      	adds	r7, #72	@ 0x48
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000680 	.word	0x20000680
 80011c0:	2000057c 	.word	0x2000057c
 80011c4:	20000684 	.word	0x20000684

080011c8 <HAL_SPI_RxHalfCpltCallback>:

// HAL callbacks (override weak definitions) to feed the router
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *h) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <HAL_SPI_RxHalfCpltCallback+0x22>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_SPI_RxHalfCpltCallback+0x2c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d104      	bne.n	80011ea <HAL_SPI_RxHalfCpltCallback+0x22>
        router_feed_bytes(&g_router, g_spi_rx_buf, APP_SPI_RX_BUF_SZ / 2);
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	4905      	ldr	r1, [pc, #20]	@ (80011f8 <HAL_SPI_RxHalfCpltCallback+0x30>)
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <HAL_SPI_RxHalfCpltCallback+0x34>)
 80011e6:	f7ff fb7f 	bl	80008e8 <router_feed_bytes>
    }
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40013000 	.word	0x40013000
 80011f8:	20000580 	.word	0x20000580
 80011fc:	20000514 	.word	0x20000514

08001200 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *h) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <HAL_SPI_RxCpltCallback+0x24>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a06      	ldr	r2, [pc, #24]	@ (800122c <HAL_SPI_RxCpltCallback+0x2c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d105      	bne.n	8001224 <HAL_SPI_RxCpltCallback+0x24>
        router_feed_bytes(&g_router, g_spi_rx_buf + (APP_SPI_RX_BUF_SZ / 2), APP_SPI_RX_BUF_SZ / 2);
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_SPI_RxCpltCallback+0x30>)
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_SPI_RxCpltCallback+0x34>)
 8001220:	f7ff fb62 	bl	80008e8 <router_feed_bytes>
    }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40013000 	.word	0x40013000
 8001230:	20000600 	.word	0x20000600
 8001234:	20000514 	.word	0x20000514

08001238 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *h) {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d007      	beq.n	8001256 <HAL_SPI_TxCpltCallback+0x1e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a06      	ldr	r2, [pc, #24]	@ (8001264 <HAL_SPI_TxCpltCallback+0x2c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d102      	bne.n	8001256 <HAL_SPI_TxCpltCallback+0x1e>
        g_spi_tx_busy = 0;
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_SPI_TxCpltCallback+0x30>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
    }
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40013000 	.word	0x40013000
 8001268:	20000680 	.word	0x20000680

0800126c <MX_DMA_Init>:
/* USER CODE END 1 */

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <MX_DMA_Init+0x48>)
 8001274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001276:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <MX_DMA_Init+0x48>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6493      	str	r3, [r2, #72]	@ 0x48
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <MX_DMA_Init+0x48>)
 8001280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	200c      	movs	r0, #12
 8001290:	f000 ff9c 	bl	80021cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001294:	200c      	movs	r0, #12
 8001296:	f000 ffc5 	bl	8002224 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	200d      	movs	r0, #13
 80012a0:	f000 ff94 	bl	80021cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012a4:	200d      	movs	r0, #13
 80012a6:	f000 ffbd 	bl	8002224 <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <MX_GPIO_Init>:
 * EVENT_OUT
 * EXTI
 * Free pins are configured automatically as Analog (this feature is enabled through
 * the Code Generation settings)
 */
void MX_GPIO_Init(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	@ 0x30
 80012bc:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80012ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <MX_GPIO_Init+0x14c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001404 <MX_GPIO_Init+0x14c>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012da:	4b4a      	ldr	r3, [pc, #296]	@ (8001404 <MX_GPIO_Init+0x14c>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	4b47      	ldr	r3, [pc, #284]	@ (8001404 <MX_GPIO_Init+0x14c>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	4a46      	ldr	r2, [pc, #280]	@ (8001404 <MX_GPIO_Init+0x14c>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f2:	4b44      	ldr	r3, [pc, #272]	@ (8001404 <MX_GPIO_Init+0x14c>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	4a40      	ldr	r2, [pc, #256]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800130a:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <MX_GPIO_Init+0x14c>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a3a      	ldr	r2, [pc, #232]	@ (8001404 <MX_GPIO_Init+0x14c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001322:	4b38      	ldr	r3, [pc, #224]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	4a34      	ldr	r2, [pc, #208]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133a:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <MX_GPIO_Init+0x14c>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001346:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a2e      	ldr	r2, [pc, #184]	@ (8001404 <MX_GPIO_Init+0x14c>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b2c      	ldr	r3, [pc, #176]	@ (8001404 <MX_GPIO_Init+0x14c>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PE2 PE5 PE6 PE7
	 PE8 PE9 PE10 PE11
	 PE12 PE14 PE15 PE0
	 PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 800135e:	f64d 73e7 	movw	r3, #57319	@ 0xdfe7
 8001362:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
			| GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001364:	2303      	movs	r3, #3
 8001366:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4825      	ldr	r0, [pc, #148]	@ (8001408 <MX_GPIO_Init+0x150>)
 8001374:	f001 fac0 	bl	80028f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC13 PC14 PC15 PC0
	 PC1 PC2 PC3 PC4
	 PC5 PC6 PC7 PC8
	 PC9 PC10 PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
 8001378:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800137c:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
			| GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	481f      	ldr	r0, [pc, #124]	@ (800140c <MX_GPIO_Init+0x154>)
 800138e:	f001 fab3 	bl	80028f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PH0 PH1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001392:	2303      	movs	r3, #3
 8001394:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	481a      	ldr	r0, [pc, #104]	@ (8001410 <MX_GPIO_Init+0x158>)
 80013a6:	f001 faa7 	bl	80028f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 PA8 PA11
	 PA12 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_11
 80013aa:	f649 130c 	movw	r3, #39180	@ 0x990c
 80013ae:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b0:	2303      	movs	r3, #3
 80013b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c2:	f001 fa99 	bl	80028f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB11 PB12 PB13 PB14
	 PB15 PB4 PB5 PB6
	 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 80013c6:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80013ca:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
			| GPIO_PIN_15 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
			| GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013cc:	2303      	movs	r3, #3
 80013ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	480e      	ldr	r0, [pc, #56]	@ (8001414 <MX_GPIO_Init+0x15c>)
 80013dc:	f001 fa8c 	bl	80028f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD15
	 PD0 PD1 PD2 PD3
	 PD4 PD5 PD6 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 80013e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013e4:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
			| GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4808      	ldr	r0, [pc, #32]	@ (8001418 <MX_GPIO_Init+0x160>)
 80013f6:	f001 fa7f 	bl	80028f8 <HAL_GPIO_Init>

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	@ 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	48001000 	.word	0x48001000
 800140c:	48000800 	.word	0x48000800
 8001410:	48001c00 	.word	0x48001c00
 8001414:	48000400 	.word	0x48000400
 8001418:	48000c00 	.word	0x48000c00

0800141c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001420:	f000 fd6f 	bl	8001f02 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001424:	f000 f817 	bl	8001456 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001428:	f7ff ff46 	bl	80012b8 <MX_GPIO_Init>
	MX_DMA_Init();
 800142c:	f7ff ff1e 	bl	800126c <MX_DMA_Init>
	MX_SPI1_Init();
 8001430:	f000 f876 	bl	8001520 <MX_SPI1_Init>
	MX_TIM6_Init();
 8001434:	f000 fb3e 	bl	8001ab4 <MX_TIM6_Init>
	MX_TIM2_Init();
 8001438:	f000 fa3c 	bl	80018b4 <MX_TIM2_Init>
	MX_TIM5_Init();
 800143c:	f000 fae4 	bl	8001a08 <MX_TIM5_Init>
	MX_TIM7_Init();
 8001440:	f000 fb6e 	bl	8001b20 <MX_TIM7_Init>
	MX_TIM3_Init();
 8001444:	f000 fa8a 	bl	800195c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001448:	f000 fca4 	bl	8001d94 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    app_init();
 800144c:	f7ff fe60 	bl	8001110 <app_init>
	/* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        app_poll();
 8001450:	f7ff fe8a 	bl	8001168 <app_poll>
 8001454:	e7fc      	b.n	8001450 <main+0x34>

08001456 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b096      	sub	sp, #88	@ 0x58
 800145a:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2244      	movs	r2, #68	@ 0x44
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f006 fd85 	bl	8007f74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001478:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800147c:	f001 fd02 	bl	8002e84 <HAL_PWREx_ControlVoltageScaling>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001486:	f000 f839 	bl	80014fc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800148a:	2310      	movs	r3, #16
 800148c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800148e:	2301      	movs	r3, #1
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	2302      	movs	r3, #2
 800149c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800149e:	2301      	movs	r3, #1
 80014a0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80014a6:	2328      	movs	r3, #40	@ 0x28
 80014a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014aa:	2307      	movs	r3, #7
 80014ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 fd44 	bl	8002f48 <HAL_RCC_OscConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x74>
		Error_Handler();
 80014c6:	f000 f819 	bl	80014fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014ca:	230f      	movs	r3, #15
 80014cc:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ce:	2303      	movs	r3, #3
 80014d0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80014e0:	463b      	mov	r3, r7
 80014e2:	2104      	movs	r1, #4
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fa31 	bl	800394c <HAL_RCC_ClockConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x9e>
		Error_Handler();
 80014f0:	f000 f804 	bl	80014fc <Error_Handler>
	}
}
 80014f4:	bf00      	nop
 80014f6:	3758      	adds	r7, #88	@ 0x58
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	/* USER CODE END SPI1_Init 0 */

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	hspi1.Instance = SPI1;
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001526:	4a19      	ldr	r2, [pc, #100]	@ (800158c <MX_SPI1_Init+0x6c>)
 8001528:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_SPI1_Init+0x68>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001538:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800153c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001540:	2202      	movs	r2, #2
 8001542:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001546:	2201      	movs	r2, #1
 8001548:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_SPI1_Init+0x68>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <MX_SPI1_Init+0x68>)
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001564:	2207      	movs	r2, #7
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <MX_SPI1_Init+0x68>)
 800156a:	2200      	movs	r2, #0
 800156c:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001570:	2200      	movs	r2, #0
 8001572:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_SPI1_Init+0x68>)
 8001576:	f003 fc35 	bl	8004de4 <HAL_SPI_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_SPI1_Init+0x64>
		Error_Handler();
 8001580:	f7ff ffbc 	bl	80014fc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000684 	.word	0x20000684
 800158c:	40013000 	.word	0x40013000

08001590 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
	if (spiHandle->Instance == SPI1) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a53      	ldr	r2, [pc, #332]	@ (80016fc <HAL_SPI_MspInit+0x16c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	f040 80a0 	bne.w	80016f4 <HAL_SPI_MspInit+0x164>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* SPI1 clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 80015b4:	4b52      	ldr	r3, [pc, #328]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b8:	4a51      	ldr	r2, [pc, #324]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015be:	6613      	str	r3, [r2, #96]	@ 0x60
 80015c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d8:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80015e4:	4b46      	ldr	r3, [pc, #280]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	4a45      	ldr	r2, [pc, #276]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f0:	4b43      	ldr	r3, [pc, #268]	@ (8001700 <HAL_SPI_MspInit+0x170>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
		 PA4     ------> SPI1_NSS
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 PE13     ------> SPI1_SCK
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_7;
 80015fc:	23d0      	movs	r3, #208	@ 0xd0
 80015fe:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800160c:	2305      	movs	r3, #5
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161a:	f001 f96d 	bl	80028f8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 800161e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001622:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001630:	2305      	movs	r3, #5
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4832      	ldr	r0, [pc, #200]	@ (8001704 <HAL_SPI_MspInit+0x174>)
 800163c:	f001 f95c 	bl	80028f8 <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_RX Init */
		hdma_spi1_rx.Instance = DMA1_Channel2;
 8001640:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 8001642:	4a32      	ldr	r2, [pc, #200]	@ (800170c <HAL_SPI_MspInit+0x17c>)
 8001644:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001646:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 8001648:	2201      	movs	r2, #1
 800164a:	605a      	str	r2, [r3, #4]
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164c:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	611a      	str	r2, [r3, #16]
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165e:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800166a:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 800166c:	2220      	movs	r2, #32
 800166e:	61da      	str	r2, [r3, #28]
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b25      	ldr	r3, [pc, #148]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK) {
 8001676:	4824      	ldr	r0, [pc, #144]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 8001678:	f000 fdf8 	bl	800226c <HAL_DMA_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_SPI_MspInit+0xf6>
			Error_Handler();
 8001682:	f7ff ff3b 	bl	80014fc <Error_Handler>
		}

		__HAL_LINKDMA(spiHandle, hdmarx, hdma_spi1_rx);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1f      	ldr	r2, [pc, #124]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 800168a:	659a      	str	r2, [r3, #88]	@ 0x58
 800168c:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <HAL_SPI_MspInit+0x178>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6293      	str	r3, [r2, #40]	@ 0x28

		/* SPI1_TX Init */
		hdma_spi1_tx.Instance = DMA1_Channel3;
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 8001694:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <HAL_SPI_MspInit+0x184>)
 8001696:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001698:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 800169a:	2201      	movs	r2, #1
 800169c:	605a      	str	r2, [r3, #4]
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	609a      	str	r2, [r3, #8]
		hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	611a      	str	r2, [r3, #16]
		hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b0:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
		hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016be:	2220      	movs	r2, #32
 80016c0:	61da      	str	r2, [r3, #28]
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK) {
 80016c8:	4811      	ldr	r0, [pc, #68]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016ca:	f000 fdcf 	bl	800226c <HAL_DMA_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_SPI_MspInit+0x148>
			Error_Handler();
 80016d4:	f7ff ff12 	bl	80014fc <Error_Handler>
		}

		__HAL_LINKDMA(spiHandle, hdmatx, hdma_spi1_tx);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80016de:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <HAL_SPI_MspInit+0x180>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6293      	str	r3, [r2, #40]	@ 0x28

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2023      	movs	r0, #35	@ 0x23
 80016ea:	f000 fd6f 	bl	80021cc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016ee:	2023      	movs	r0, #35	@ 0x23
 80016f0:	f000 fd98 	bl	8002224 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}
}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40013000 	.word	0x40013000
 8001700:	40021000 	.word	0x40021000
 8001704:	48001000 	.word	0x48001000
 8001708:	200006e8 	.word	0x200006e8
 800170c:	4002001c 	.word	0x4002001c
 8001710:	20000730 	.word	0x20000730
 8001714:	40020030 	.word	0x40020030

08001718 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_MspInit+0x44>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6613      	str	r3, [r2, #96]	@ 0x60
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_MspInit+0x44>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	6593      	str	r3, [r2, #88]	@ 0x58
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80017b6:	f000 fbf9 	bl	8001fac <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <DMA1_Channel2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel2 global interrupt.
 */
void DMA1_Channel2_IRQHandler(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

	/* USER CODE END DMA1_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <DMA1_Channel2_IRQHandler+0x10>)
 80017c6:	f000 ffb8 	bl	800273a <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

	/* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200006e8 	.word	0x200006e8

080017d4 <DMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <DMA1_Channel3_IRQHandler+0x10>)
 80017da:	f000 ffae 	bl	800273a <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000730 	.word	0x20000730

080017e8 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <SPI1_IRQHandler+0x10>)
 80017ee:	f004 f855 	bl	800589c <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000684 	.word	0x20000684

080017fc <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM6_DAC_IRQHandler+0x10>)
 8001802:	f004 ff63 	bl	80066cc <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000860 	.word	0x20000860

08001810 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <TIM7_IRQHandler+0x10>)
 8001816:	f004 ff59 	bl	80066cc <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200008ac 	.word	0x200008ac

08001824 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800182c:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
		errno = ENOMEM;
 8001854:	f006 fba6 	bl	8007fa4 <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20018000 	.word	0x20018000
 8001884:	00000400 	.word	0x00000400
 8001888:	20000778 	.word	0x20000778
 800188c:	20000ad0 	.word	0x20000ad0

08001890 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <SystemInit+0x20>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <SystemInit+0x20>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	@ 0x30
 80018b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2224      	movs	r2, #36	@ 0x24
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f006 fb56 	bl	8007f74 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80018d2:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <MX_TIM2_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001902:	2301      	movs	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001912:	2301      	movs	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4619      	mov	r1, r3
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <MX_TIM2_Init+0xa4>)
 8001926:	f004 fd0f 	bl	8006348 <HAL_TIM_Encoder_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x80>
		Error_Handler();
 8001930:	f7ff fde4 	bl	80014fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	@ (8001958 <MX_TIM2_Init+0xa4>)
 8001942:	f005 f8a3 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800194c:	f7ff fdd6 	bl	80014fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	3730      	adds	r7, #48	@ 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000077c 	.word	0x2000077c

0800195c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	@ 0x30
 8001960:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	2224      	movs	r2, #36	@ 0x24
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f006 fb02 	bl	8007f74 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800197a:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 800197c:	4a21      	ldr	r2, [pc, #132]	@ (8001a04 <MX_TIM3_Init+0xa8>)
 800197e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800198c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 800198e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001992:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019a8:	2301      	movs	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 80019cc:	f004 fcbc 	bl	8006348 <HAL_TIM_Encoder_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x7e>
		Error_Handler();
 80019d6:	f7ff fd91 	bl	80014fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	@ (8001a00 <MX_TIM3_Init+0xa4>)
 80019e8:	f005 f850 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80019f2:	f7ff fd83 	bl	80014fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	@ 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200007c8 	.word	0x200007c8
 8001a04:	40000400 	.word	0x40000400

08001a08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	@ 0x30
 8001a0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2224      	movs	r2, #36	@ 0x24
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 faac 	bl	8007f74 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a28:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <MX_TIM5_Init+0xa8>)
 8001a2a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a78:	f004 fc66 	bl	8006348 <HAL_TIM_Encoder_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM5_Init+0x7e>
		Error_Handler();
 8001a82:	f7ff fd3b 	bl	80014fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <MX_TIM5_Init+0xa4>)
 8001a94:	f004 fffa 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM5_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001a9e:	f7ff fd2d 	bl	80014fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	@ 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000814 	.word	0x20000814
 8001ab0:	40000c00 	.word	0x40000c00

08001ab4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ac6:	4a15      	ldr	r2, [pc, #84]	@ (8001b1c <MX_TIM6_Init+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 79;
 8001aca:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001acc:	224f      	movs	r2, #79	@ 0x4f
 8001ace:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 19;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ad8:	2213      	movs	r2, #19
 8001ada:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001ae2:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001ae4:	f004 fb26 	bl	8006134 <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM6_Init+0x3e>
		Error_Handler();
 8001aee:	f7ff fd05 	bl	80014fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001af2:	2320      	movs	r3, #32
 8001af4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <MX_TIM6_Init+0x64>)
 8001b00:	f004 ffc4 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001b0a:	f7ff fcf7 	bl	80014fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000860 	.word	0x20000860
 8001b1c:	40001000 	.word	0x40001000

08001b20 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b32:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <MX_TIM7_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 7999;
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b38:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001b3c:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 9;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b46:	2209      	movs	r2, #9
 8001b48:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b4c:	2280      	movs	r2, #128	@ 0x80
 8001b4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b52:	f004 faef 	bl	8006134 <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM7_Init+0x40>
		Error_Handler();
 8001b5c:	f7ff fcce 	bl	80014fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_TIM7_Init+0x64>)
 8001b6e:	f004 ff8d 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001b78:	f7ff fcc0 	bl	80014fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200008ac 	.word	0x200008ac
 8001b88:	40001400 	.word	0x40001400

08001b8c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *tim_encoderHandle) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	@ 0x38
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
	if (tim_encoderHandle->Instance == TIM2) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bac:	d145      	bne.n	8001c3a <HAL_TIM_Encoder_MspInit+0xae>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	4a52      	ldr	r2, [pc, #328]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bba:	4b50      	ldr	r3, [pc, #320]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	4a4c      	ldr	r2, [pc, #304]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	4a46      	ldr	r2, [pc, #280]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bea:	4b44      	ldr	r3, [pc, #272]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
		/**TIM2 GPIO Configuration
		 PA5     ------> TIM2_CH1
		 PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c06:	2301      	movs	r3, #1
 8001c08:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c14:	f000 fe70 	bl	80028f8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4833      	ldr	r0, [pc, #204]	@ (8001d00 <HAL_TIM_Encoder_MspInit+0x174>)
 8001c34:	f000 fe60 	bl	80028f8 <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM5_MspInit 1 */

		/* USER CODE END TIM5_MspInit 1 */
	}
}
 8001c38:	e05b      	b.n	8001cf2 <HAL_TIM_Encoder_MspInit+0x166>
	} else if (tim_encoderHandle->Instance == TIM3) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a31      	ldr	r2, [pc, #196]	@ (8001d04 <HAL_TIM_Encoder_MspInit+0x178>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d128      	bne.n	8001c96 <HAL_TIM_Encoder_MspInit+0x10a>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001c44:	4b2d      	ldr	r3, [pc, #180]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	4a2c      	ldr	r2, [pc, #176]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 8001c74:	2318      	movs	r3, #24
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c84:	2302      	movs	r3, #2
 8001c86:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	481e      	ldr	r0, [pc, #120]	@ (8001d08 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001c90:	f000 fe32 	bl	80028f8 <HAL_GPIO_Init>
}
 8001c94:	e02d      	b.n	8001cf2 <HAL_TIM_Encoder_MspInit+0x166>
	} else if (tim_encoderHandle->Instance == TIM5) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_TIM_Encoder_MspInit+0x180>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d128      	bne.n	8001cf2 <HAL_TIM_Encoder_MspInit+0x166>
		__HAL_RCC_TIM5_CLK_ENABLE();
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca4:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_TIM_Encoder_MspInit+0x170>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cee:	f000 fe03 	bl	80028f8 <HAL_GPIO_Init>
}
 8001cf2:	bf00      	nop
 8001cf4:	3738      	adds	r7, #56	@ 0x38
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	48000400 	.word	0x48000400
 8001d04:	40000400 	.word	0x40000400
 8001d08:	48001000 	.word	0x48001000
 8001d0c:	40000c00 	.word	0x40000c00

08001d10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM6) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d88 <HAL_TIM_Base_MspInit+0x78>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d114      	bne.n	8001d4c <HAL_TIM_Base_MspInit+0x3c>
		/* USER CODE BEGIN TIM6_MspInit 0 */

		/* USER CODE END TIM6_MspInit 0 */
		/* TIM6 clock enable */
		__HAL_RCC_TIM6_CLK_ENABLE();
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <HAL_TIM_Base_MspInit+0x7c>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <HAL_TIM_Base_MspInit+0x7c>)
 8001d28:	f043 0310 	orr.w	r3, r3, #16
 8001d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2e:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <HAL_TIM_Base_MspInit+0x7c>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

		/* TIM6 interrupt Init */
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2036      	movs	r0, #54	@ 0x36
 8001d40:	f000 fa44 	bl	80021cc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d44:	2036      	movs	r0, #54	@ 0x36
 8001d46:	f000 fa6d 	bl	8002224 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
		/* USER CODE BEGIN TIM7_MspInit 1 */

		/* USER CODE END TIM7_MspInit 1 */
	}
}
 8001d4a:	e018      	b.n	8001d7e <HAL_TIM_Base_MspInit+0x6e>
	} else if (tim_baseHandle->Instance == TIM7) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0f      	ldr	r2, [pc, #60]	@ (8001d90 <HAL_TIM_Base_MspInit+0x80>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d113      	bne.n	8001d7e <HAL_TIM_Base_MspInit+0x6e>
		__HAL_RCC_TIM7_CLK_ENABLE();
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_TIM_Base_MspInit+0x7c>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <HAL_TIM_Base_MspInit+0x7c>)
 8001d5c:	f043 0320 	orr.w	r3, r3, #32
 8001d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_TIM_Base_MspInit+0x7c>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2037      	movs	r0, #55	@ 0x37
 8001d74:	f000 fa2a 	bl	80021cc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d78:	2037      	movs	r0, #55	@ 0x37
 8001d7a:	f000 fa53 	bl	8002224 <HAL_NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40001000 	.word	0x40001000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40001400 	.word	0x40001400

08001d94 <MX_USART1_UART_Init>:

UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001d98:	4b14      	ldr	r3, [pc, #80]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001d9a:	4a15      	ldr	r2, [pc, #84]	@ (8001df0 <MX_USART1_UART_Init+0x5c>)
 8001d9c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001d9e:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dca:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <MX_USART1_UART_Init+0x58>)
 8001dd8:	f004 ffcc 	bl	8006d74 <HAL_UART_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001de2:	f7ff fb8b 	bl	80014fc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200008f8 	.word	0x200008f8
 8001df0:	40013800 	.word	0x40013800

08001df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b0ac      	sub	sp, #176	@ 0xb0
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2288      	movs	r2, #136	@ 0x88
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f006 f8ad 	bl	8007f74 <memset>
	if (uartHandle->Instance == USART1) {
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <HAL_UART_MspInit+0xb4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d13c      	bne.n	8001e9e <HAL_UART_MspInit+0xaa>

		/* USER CODE END USART1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
		PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 f84f 	bl	8003ed4 <HAL_RCCEx_PeriphCLKConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_UART_MspInit+0x4c>
			Error_Handler();
 8001e3c:	f7ff fb5e 	bl	80014fc <Error_Handler>
		}

		/* USART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8001e40:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <HAL_UART_MspInit+0xb8>)
 8001e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e44:	4a19      	ldr	r2, [pc, #100]	@ (8001eac <HAL_UART_MspInit+0xb8>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <HAL_UART_MspInit+0xb8>)
 8001e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <HAL_UART_MspInit+0xb8>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5c:	4a13      	ldr	r2, [pc, #76]	@ (8001eac <HAL_UART_MspInit+0xb8>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_UART_MspInit+0xb8>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001e70:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9a:	f000 fd2d 	bl	80028f8 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}
}
 8001e9e:	bf00      	nop
 8001ea0:	37b0      	adds	r7, #176	@ 0xb0
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40021000 	.word	0x40021000

08001eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb4:	f7ff fcec 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb8:	480c      	ldr	r0, [pc, #48]	@ (8001eec <LoopForever+0x6>)
  ldr r1, =_edata
 8001eba:	490d      	ldr	r1, [pc, #52]	@ (8001ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <LoopForever+0xe>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8001efc <LoopForever+0x16>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ede:	f006 f867 	bl	8007fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee2:	f7ff fa9b 	bl	800141c <main>

08001ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee6:	e7fe      	b.n	8001ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ef4:	08008a70 	.word	0x08008a70
  ldr r2, =_sbss
 8001ef8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001efc:	20000acc 	.word	0x20000acc

08001f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_2_IRQHandler>

08001f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f93d 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f12:	200f      	movs	r0, #15
 8001f14:	f000 f80e 	bl	8001f34 <HAL_InitTick>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	e001      	b.n	8001f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f24:	f7ff fbf8 	bl	8001718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f40:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <HAL_InitTick+0x6c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f48:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <HAL_InitTick+0x70>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_InitTick+0x6c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f978 	bl	8002254 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d809      	bhi.n	8001f84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 f928 	bl	80021cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_InitTick+0x74>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e007      	b.n	8001f94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e004      	b.n	8001f94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e001      	b.n	8001f94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000000c 	.word	0x2000000c
 8001fa4:	20000004 	.word	0x20000004
 8001fa8:	20000008 	.word	0x20000008

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	20000980 	.word	0x20000980

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	@ (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000980 	.word	0x20000980

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	@ (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	@ (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	@ 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b07      	cmp	r3, #7
 8002198:	d00f      	beq.n	80021ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b06      	cmp	r3, #6
 800219e:	d00c      	beq.n	80021ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d009      	beq.n	80021ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d006      	beq.n	80021ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d003      	beq.n	80021ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80021b2:	21a6      	movs	r1, #166	@ 0xa6
 80021b4:	4804      	ldr	r0, [pc, #16]	@ (80021c8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80021b6:	f7ff f9a7 	bl	8001508 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff16 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	0800879c 	.word	0x0800879c

080021cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d903      	bls.n	80021ec <HAL_NVIC_SetPriority+0x20>
 80021e4:	21be      	movs	r1, #190	@ 0xbe
 80021e6:	480e      	ldr	r0, [pc, #56]	@ (8002220 <HAL_NVIC_SetPriority+0x54>)
 80021e8:	f7ff f98e 	bl	8001508 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b0f      	cmp	r3, #15
 80021f0:	d903      	bls.n	80021fa <HAL_NVIC_SetPriority+0x2e>
 80021f2:	21bf      	movs	r1, #191	@ 0xbf
 80021f4:	480a      	ldr	r0, [pc, #40]	@ (8002220 <HAL_NVIC_SetPriority+0x54>)
 80021f6:	f7ff f987 	bl	8001508 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80021fa:	f7ff ff1b 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	6978      	ldr	r0, [r7, #20]
 8002206:	f7ff ff6b 	bl	80020e0 <NVIC_EncodePriority>
 800220a:	4602      	mov	r2, r0
 800220c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff3a 	bl	800208c <__NVIC_SetPriority>
}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	0800879c 	.word	0x0800879c

08002224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	da03      	bge.n	800223e <HAL_NVIC_EnableIRQ+0x1a>
 8002236:	21d2      	movs	r1, #210	@ 0xd2
 8002238:	4805      	ldr	r0, [pc, #20]	@ (8002250 <HAL_NVIC_EnableIRQ+0x2c>)
 800223a:	f7ff f965 	bl	8001508 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff04 	bl	8002050 <__NVIC_EnableIRQ>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	0800879c 	.word	0x0800879c

08002254 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff73 	bl	8002148 <SysTick_Config>
 8002262:	4603      	mov	r3, r0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e19d      	b.n	80025ba <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a79      	ldr	r2, [pc, #484]	@ (8002468 <HAL_DMA_Init+0x1fc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d044      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a77      	ldr	r2, [pc, #476]	@ (800246c <HAL_DMA_Init+0x200>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d03f      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a76      	ldr	r2, [pc, #472]	@ (8002470 <HAL_DMA_Init+0x204>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d03a      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a74      	ldr	r2, [pc, #464]	@ (8002474 <HAL_DMA_Init+0x208>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d035      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a73      	ldr	r2, [pc, #460]	@ (8002478 <HAL_DMA_Init+0x20c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d030      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a71      	ldr	r2, [pc, #452]	@ (800247c <HAL_DMA_Init+0x210>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02b      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a70      	ldr	r2, [pc, #448]	@ (8002480 <HAL_DMA_Init+0x214>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d026      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002484 <HAL_DMA_Init+0x218>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d021      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002488 <HAL_DMA_Init+0x21c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01c      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6b      	ldr	r2, [pc, #428]	@ (800248c <HAL_DMA_Init+0x220>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d017      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002490 <HAL_DMA_Init+0x224>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d012      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a68      	ldr	r2, [pc, #416]	@ (8002494 <HAL_DMA_Init+0x228>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00d      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a67      	ldr	r2, [pc, #412]	@ (8002498 <HAL_DMA_Init+0x22c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d008      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a65      	ldr	r2, [pc, #404]	@ (800249c <HAL_DMA_Init+0x230>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <HAL_DMA_Init+0xa6>
 800230a:	21a5      	movs	r1, #165	@ 0xa5
 800230c:	4864      	ldr	r0, [pc, #400]	@ (80024a0 <HAL_DMA_Init+0x234>)
 800230e:	f7ff f8fb 	bl	8001508 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <HAL_DMA_Init+0xc8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b10      	cmp	r3, #16
 8002320:	d008      	beq.n	8002334 <HAL_DMA_Init+0xc8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800232a:	d003      	beq.n	8002334 <HAL_DMA_Init+0xc8>
 800232c:	21a6      	movs	r1, #166	@ 0xa6
 800232e:	485c      	ldr	r0, [pc, #368]	@ (80024a0 <HAL_DMA_Init+0x234>)
 8002330:	f7ff f8ea 	bl	8001508 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b40      	cmp	r3, #64	@ 0x40
 800233a:	d007      	beq.n	800234c <HAL_DMA_Init+0xe0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_DMA_Init+0xe0>
 8002344:	21a7      	movs	r1, #167	@ 0xa7
 8002346:	4856      	ldr	r0, [pc, #344]	@ (80024a0 <HAL_DMA_Init+0x234>)
 8002348:	f7ff f8de 	bl	8001508 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b80      	cmp	r3, #128	@ 0x80
 8002352:	d007      	beq.n	8002364 <HAL_DMA_Init+0xf8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_DMA_Init+0xf8>
 800235c:	21a8      	movs	r1, #168	@ 0xa8
 800235e:	4850      	ldr	r0, [pc, #320]	@ (80024a0 <HAL_DMA_Init+0x234>)
 8002360:	f7ff f8d2 	bl	8001508 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <HAL_DMA_Init+0x11c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002374:	d008      	beq.n	8002388 <HAL_DMA_Init+0x11c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800237e:	d003      	beq.n	8002388 <HAL_DMA_Init+0x11c>
 8002380:	21a9      	movs	r1, #169	@ 0xa9
 8002382:	4847      	ldr	r0, [pc, #284]	@ (80024a0 <HAL_DMA_Init+0x234>)
 8002384:	f7ff f8c0 	bl	8001508 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00d      	beq.n	80023ac <HAL_DMA_Init+0x140>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002398:	d008      	beq.n	80023ac <HAL_DMA_Init+0x140>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023a2:	d003      	beq.n	80023ac <HAL_DMA_Init+0x140>
 80023a4:	21aa      	movs	r1, #170	@ 0xaa
 80023a6:	483e      	ldr	r0, [pc, #248]	@ (80024a0 <HAL_DMA_Init+0x234>)
 80023a8:	f7ff f8ae 	bl	8001508 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_DMA_Init+0x158>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d003      	beq.n	80023c4 <HAL_DMA_Init+0x158>
 80023bc:	21ab      	movs	r1, #171	@ 0xab
 80023be:	4838      	ldr	r0, [pc, #224]	@ (80024a0 <HAL_DMA_Init+0x234>)
 80023c0:	f7ff f8a2 	bl	8001508 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d012      	beq.n	80023f2 <HAL_DMA_Init+0x186>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d4:	d00d      	beq.n	80023f2 <HAL_DMA_Init+0x186>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Init+0x186>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80023e8:	d003      	beq.n	80023f2 <HAL_DMA_Init+0x186>
 80023ea:	21ac      	movs	r1, #172	@ 0xac
 80023ec:	482c      	ldr	r0, [pc, #176]	@ (80024a0 <HAL_DMA_Init+0x234>)
 80023ee:	f7ff f88b 	bl	8001508 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01f      	beq.n	800243a <HAL_DMA_Init+0x1ce>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d01b      	beq.n	800243a <HAL_DMA_Init+0x1ce>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d017      	beq.n	800243a <HAL_DMA_Init+0x1ce>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d013      	beq.n	800243a <HAL_DMA_Init+0x1ce>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b04      	cmp	r3, #4
 8002418:	d00f      	beq.n	800243a <HAL_DMA_Init+0x1ce>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b05      	cmp	r3, #5
 8002420:	d00b      	beq.n	800243a <HAL_DMA_Init+0x1ce>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b06      	cmp	r3, #6
 8002428:	d007      	beq.n	800243a <HAL_DMA_Init+0x1ce>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b07      	cmp	r3, #7
 8002430:	d003      	beq.n	800243a <HAL_DMA_Init+0x1ce>
 8002432:	21ae      	movs	r1, #174	@ 0xae
 8002434:	481a      	ldr	r0, [pc, #104]	@ (80024a0 <HAL_DMA_Init+0x234>)
 8002436:	f7ff f867 	bl	8001508 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <HAL_DMA_Init+0x238>)
 8002442:	429a      	cmp	r2, r3
 8002444:	d836      	bhi.n	80024b4 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <HAL_DMA_Init+0x23c>)
 800244e:	4413      	add	r3, r2
 8002450:	4a16      	ldr	r2, [pc, #88]	@ (80024ac <HAL_DMA_Init+0x240>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	009a      	lsls	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <HAL_DMA_Init+0x244>)
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
 8002464:	e035      	b.n	80024d2 <HAL_DMA_Init+0x266>
 8002466:	bf00      	nop
 8002468:	40020008 	.word	0x40020008
 800246c:	4002001c 	.word	0x4002001c
 8002470:	40020030 	.word	0x40020030
 8002474:	40020044 	.word	0x40020044
 8002478:	40020058 	.word	0x40020058
 800247c:	4002006c 	.word	0x4002006c
 8002480:	40020080 	.word	0x40020080
 8002484:	40020408 	.word	0x40020408
 8002488:	4002041c 	.word	0x4002041c
 800248c:	40020430 	.word	0x40020430
 8002490:	40020444 	.word	0x40020444
 8002494:	40020458 	.word	0x40020458
 8002498:	4002046c 	.word	0x4002046c
 800249c:	40020480 	.word	0x40020480
 80024a0:	080087d8 	.word	0x080087d8
 80024a4:	40020407 	.word	0x40020407
 80024a8:	bffdfff8 	.word	0xbffdfff8
 80024ac:	cccccccd 	.word	0xcccccccd
 80024b0:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b42      	ldr	r3, [pc, #264]	@ (80025c4 <HAL_DMA_Init+0x358>)
 80024bc:	4413      	add	r3, r2
 80024be:	4a42      	ldr	r2, [pc, #264]	@ (80025c8 <HAL_DMA_Init+0x35c>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	009a      	lsls	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3f      	ldr	r2, [pc, #252]	@ (80025cc <HAL_DMA_Init+0x360>)
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80024e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800252c:	d039      	beq.n	80025a2 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	4a27      	ldr	r2, [pc, #156]	@ (80025d0 <HAL_DMA_Init+0x364>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d11a      	bne.n	800256e <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002538:	4b26      	ldr	r3, [pc, #152]	@ (80025d4 <HAL_DMA_Init+0x368>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002540:	f003 031c 	and.w	r3, r3, #28
 8002544:	210f      	movs	r1, #15
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	4921      	ldr	r1, [pc, #132]	@ (80025d4 <HAL_DMA_Init+0x368>)
 800254e:	4013      	ands	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002552:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <HAL_DMA_Init+0x368>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f003 031c 	and.w	r3, r3, #28
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	491b      	ldr	r1, [pc, #108]	@ (80025d4 <HAL_DMA_Init+0x368>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
 800256c:	e019      	b.n	80025a2 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800256e:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_DMA_Init+0x36c>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f003 031c 	and.w	r3, r3, #28
 800257a:	210f      	movs	r1, #15
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4915      	ldr	r1, [pc, #84]	@ (80025d8 <HAL_DMA_Init+0x36c>)
 8002584:	4013      	ands	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002588:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <HAL_DMA_Init+0x36c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	f003 031c 	and.w	r3, r3, #28
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	490e      	ldr	r1, [pc, #56]	@ (80025d8 <HAL_DMA_Init+0x36c>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	bffdfbf8 	.word	0xbffdfbf8
 80025c8:	cccccccd 	.word	0xcccccccd
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40020000 	.word	0x40020000
 80025d4:	400200a8 	.word	0x400200a8
 80025d8:	400204a8 	.word	0x400204a8

080025dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_DMA_Start_IT+0x20>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025fa:	d304      	bcc.n	8002606 <HAL_DMA_Start_IT+0x2a>
 80025fc:	f240 11df 	movw	r1, #479	@ 0x1df
 8002600:	482c      	ldr	r0, [pc, #176]	@ (80026b4 <HAL_DMA_Start_IT+0xd8>)
 8002602:	f7fe ff81 	bl	8001508 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_DMA_Start_IT+0x38>
 8002610:	2302      	movs	r3, #2
 8002612:	e04b      	b.n	80026ac <HAL_DMA_Start_IT+0xd0>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d13a      	bne.n	800269e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f923 	bl	8002898 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 020e 	orr.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00f      	b.n	800268c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0204 	bic.w	r2, r2, #4
 800267a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 020a 	orr.w	r2, r2, #10
 800268a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e005      	b.n	80026aa <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	080087d8 	.word	0x080087d8

080026b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d005      	beq.n	80026dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2204      	movs	r2, #4
 80026d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e029      	b.n	8002730 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	f003 021c 	and.w	r2, r3, #28
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
    }
  }
  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f003 031c 	and.w	r3, r3, #28
 800275a:	2204      	movs	r2, #4
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d026      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x7a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d021      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0204 	bic.w	r2, r2, #4
 800278c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f003 021c 	and.w	r2, r3, #28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	2104      	movs	r1, #4
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d071      	beq.n	800288e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027b2:	e06c      	b.n	800288e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	f003 031c 	and.w	r3, r3, #28
 80027bc:	2202      	movs	r2, #2
 80027be:	409a      	lsls	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02e      	beq.n	8002826 <HAL_DMA_IRQHandler+0xec>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d029      	beq.n	8002826 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10b      	bne.n	80027f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020a 	bic.w	r2, r2, #10
 80027ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	f003 021c 	and.w	r2, r3, #28
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2102      	movs	r1, #2
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d038      	beq.n	800288e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002824:	e033      	b.n	800288e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f003 031c 	and.w	r3, r3, #28
 800282e:	2208      	movs	r2, #8
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d02a      	beq.n	8002890 <HAL_DMA_IRQHandler+0x156>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d025      	beq.n	8002890 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 020e 	bic.w	r2, r2, #14
 8002852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	f003 021c 	and.w	r2, r3, #28
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800288e:	bf00      	nop
 8002890:	bf00      	nop
}
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f003 021c 	and.w	r2, r3, #28
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d108      	bne.n	80028dc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028da:	e007      	b.n	80028ec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x56>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a3c      	ldr	r2, [pc, #240]	@ (8002a04 <HAL_GPIO_Init+0x10c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01b      	beq.n	800294e <HAL_GPIO_Init+0x56>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a3b      	ldr	r2, [pc, #236]	@ (8002a08 <HAL_GPIO_Init+0x110>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d017      	beq.n	800294e <HAL_GPIO_Init+0x56>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a3a      	ldr	r2, [pc, #232]	@ (8002a0c <HAL_GPIO_Init+0x114>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x56>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a39      	ldr	r2, [pc, #228]	@ (8002a10 <HAL_GPIO_Init+0x118>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00f      	beq.n	800294e <HAL_GPIO_Init+0x56>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <HAL_GPIO_Init+0x11c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00b      	beq.n	800294e <HAL_GPIO_Init+0x56>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a37      	ldr	r2, [pc, #220]	@ (8002a18 <HAL_GPIO_Init+0x120>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x56>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a36      	ldr	r2, [pc, #216]	@ (8002a1c <HAL_GPIO_Init+0x124>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x56>
 8002946:	21aa      	movs	r1, #170	@ 0xaa
 8002948:	4835      	ldr	r0, [pc, #212]	@ (8002a20 <HAL_GPIO_Init+0x128>)
 800294a:	f7fe fddd 	bl	8001508 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d004      	beq.n	8002962 <HAL_GPIO_Init+0x6a>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002960:	d303      	bcc.n	800296a <HAL_GPIO_Init+0x72>
 8002962:	21ab      	movs	r1, #171	@ 0xab
 8002964:	482e      	ldr	r0, [pc, #184]	@ (8002a20 <HAL_GPIO_Init+0x128>)
 8002966:	f7fe fdcf 	bl	8001508 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 823d 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b01      	cmp	r3, #1
 800297a:	f000 8238 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b11      	cmp	r3, #17
 8002984:	f000 8233 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	f000 822e 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b12      	cmp	r3, #18
 8002998:	f000 8229 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80029a4:	f000 8223 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80029b0:	f000 821d 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80029bc:	f000 8217 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80029c8:	f000 8211 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80029d4:	f000 820b 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80029e0:	f000 8205 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	f000 8200 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b0b      	cmp	r3, #11
 80029f4:	f000 81fb 	beq.w	8002dee <HAL_GPIO_Init+0x4f6>
 80029f8:	21ac      	movs	r1, #172	@ 0xac
 80029fa:	4809      	ldr	r0, [pc, #36]	@ (8002a20 <HAL_GPIO_Init+0x128>)
 80029fc:	f7fe fd84 	bl	8001508 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a00:	e1f5      	b.n	8002dee <HAL_GPIO_Init+0x4f6>
 8002a02:	bf00      	nop
 8002a04:	48000400 	.word	0x48000400
 8002a08:	48000800 	.word	0x48000800
 8002a0c:	48000c00 	.word	0x48000c00
 8002a10:	48001000 	.word	0x48001000
 8002a14:	48001400 	.word	0x48001400
 8002a18:	48001800 	.word	0x48001800
 8002a1c:	48001c00 	.word	0x48001c00
 8002a20:	08008810 	.word	0x08008810
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 81d6 	beq.w	8002de8 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d005      	beq.n	8002a54 <HAL_GPIO_Init+0x15c>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d144      	bne.n	8002ade <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00f      	beq.n	8002a7c <HAL_GPIO_Init+0x184>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d00b      	beq.n	8002a7c <HAL_GPIO_Init+0x184>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d007      	beq.n	8002a7c <HAL_GPIO_Init+0x184>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x184>
 8002a74:	21bb      	movs	r1, #187	@ 0xbb
 8002a76:	489c      	ldr	r0, [pc, #624]	@ (8002ce8 <HAL_GPIO_Init+0x3f0>)
 8002a78:	f7fe fd46 	bl	8001508 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 0201 	and.w	r2, r3, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d118      	bne.n	8002b1c <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002af0:	2201      	movs	r2, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f003 0201 	and.w	r2, r3, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d027      	beq.n	8002b78 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00b      	beq.n	8002b48 <HAL_GPIO_Init+0x250>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x250>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x250>
 8002b40:	21dc      	movs	r1, #220	@ 0xdc
 8002b42:	4869      	ldr	r0, [pc, #420]	@ (8002ce8 <HAL_GPIO_Init+0x3f0>)
 8002b44:	f7fe fce0 	bl	8001508 <assert_failed>

        temp = GPIOx->PUPDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d14f      	bne.n	8002c24 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b8a:	d01f      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a57      	ldr	r2, [pc, #348]	@ (8002cec <HAL_GPIO_Init+0x3f4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d01b      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a56      	ldr	r2, [pc, #344]	@ (8002cf0 <HAL_GPIO_Init+0x3f8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a55      	ldr	r2, [pc, #340]	@ (8002cf4 <HAL_GPIO_Init+0x3fc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a54      	ldr	r2, [pc, #336]	@ (8002cf8 <HAL_GPIO_Init+0x400>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00f      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a53      	ldr	r2, [pc, #332]	@ (8002cfc <HAL_GPIO_Init+0x404>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a52      	ldr	r2, [pc, #328]	@ (8002d00 <HAL_GPIO_Init+0x408>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a51      	ldr	r2, [pc, #324]	@ (8002d04 <HAL_GPIO_Init+0x40c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x2d4>
 8002bc4:	21e8      	movs	r1, #232	@ 0xe8
 8002bc6:	4848      	ldr	r0, [pc, #288]	@ (8002ce8 <HAL_GPIO_Init+0x3f0>)
 8002bc8:	f7fe fc9e 	bl	8001508 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b0f      	cmp	r3, #15
 8002bd2:	d903      	bls.n	8002bdc <HAL_GPIO_Init+0x2e4>
 8002bd4:	21e9      	movs	r1, #233	@ 0xe9
 8002bd6:	4844      	ldr	r0, [pc, #272]	@ (8002ce8 <HAL_GPIO_Init+0x3f0>)
 8002bd8:	f7fe fc96 	bl	8001508 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	6939      	ldr	r1, [r7, #16]
 8002c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80c1 	beq.w	8002de8 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	4b28      	ldr	r3, [pc, #160]	@ (8002d08 <HAL_GPIO_Init+0x410>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6a:	4a27      	ldr	r2, [pc, #156]	@ (8002d08 <HAL_GPIO_Init+0x410>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c72:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <HAL_GPIO_Init+0x410>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c7e:	4a23      	ldr	r2, [pc, #140]	@ (8002d0c <HAL_GPIO_Init+0x414>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ca8:	d03a      	beq.n	8002d20 <HAL_GPIO_Init+0x428>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a0f      	ldr	r2, [pc, #60]	@ (8002cec <HAL_GPIO_Init+0x3f4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d034      	beq.n	8002d1c <HAL_GPIO_Init+0x424>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf0 <HAL_GPIO_Init+0x3f8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02e      	beq.n	8002d18 <HAL_GPIO_Init+0x420>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <HAL_GPIO_Init+0x3fc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d028      	beq.n	8002d14 <HAL_GPIO_Init+0x41c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <HAL_GPIO_Init+0x400>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d022      	beq.n	8002d10 <HAL_GPIO_Init+0x418>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8002cfc <HAL_GPIO_Init+0x404>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x3ea>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <HAL_GPIO_Init+0x408>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x3e6>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e021      	b.n	8002d22 <HAL_GPIO_Init+0x42a>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e01f      	b.n	8002d22 <HAL_GPIO_Init+0x42a>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e01d      	b.n	8002d22 <HAL_GPIO_Init+0x42a>
 8002ce6:	bf00      	nop
 8002ce8:	08008810 	.word	0x08008810
 8002cec:	48000400 	.word	0x48000400
 8002cf0:	48000800 	.word	0x48000800
 8002cf4:	48000c00 	.word	0x48000c00
 8002cf8:	48001000 	.word	0x48001000
 8002cfc:	48001400 	.word	0x48001400
 8002d00:	48001800 	.word	0x48001800
 8002d04:	48001c00 	.word	0x48001c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	2304      	movs	r3, #4
 8002d12:	e006      	b.n	8002d22 <HAL_GPIO_Init+0x42a>
 8002d14:	2303      	movs	r3, #3
 8002d16:	e004      	b.n	8002d22 <HAL_GPIO_Init+0x42a>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e002      	b.n	8002d22 <HAL_GPIO_Init+0x42a>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_GPIO_Init+0x42a>
 8002d20:	2300      	movs	r3, #0
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	f002 0203 	and.w	r2, r2, #3
 8002d28:	0092      	lsls	r2, r2, #2
 8002d2a:	4093      	lsls	r3, r2
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d32:	4935      	ldr	r1, [pc, #212]	@ (8002e08 <HAL_GPIO_Init+0x510>)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d40:	4b32      	ldr	r3, [pc, #200]	@ (8002e0c <HAL_GPIO_Init+0x514>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d64:	4a29      	ldr	r2, [pc, #164]	@ (8002e0c <HAL_GPIO_Init+0x514>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d6a:	4b28      	ldr	r3, [pc, #160]	@ (8002e0c <HAL_GPIO_Init+0x514>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e0c <HAL_GPIO_Init+0x514>)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <HAL_GPIO_Init+0x514>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002db8:	4a14      	ldr	r2, [pc, #80]	@ (8002e0c <HAL_GPIO_Init+0x514>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dbe:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <HAL_GPIO_Init+0x514>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002de2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_GPIO_Init+0x514>)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f47f ae13 	bne.w	8002a24 <HAL_GPIO_Init+0x12c>
  }
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40010400 	.word	0x40010400

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_GPIO_WritePin+0x20>
 8002e26:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8002e2a:	480e      	ldr	r0, [pc, #56]	@ (8002e64 <HAL_GPIO_WritePin+0x54>)
 8002e2c:	f7fe fb6c 	bl	8001508 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002e30:	787b      	ldrb	r3, [r7, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_GPIO_WritePin+0x36>
 8002e36:	787b      	ldrb	r3, [r7, #1]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d004      	beq.n	8002e46 <HAL_GPIO_WritePin+0x36>
 8002e3c:	f240 11af 	movw	r1, #431	@ 0x1af
 8002e40:	4808      	ldr	r0, [pc, #32]	@ (8002e64 <HAL_GPIO_WritePin+0x54>)
 8002e42:	f7fe fb61 	bl	8001508 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002e46:	787b      	ldrb	r3, [r7, #1]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e52:	e002      	b.n	8002e5a <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e54:	887a      	ldrh	r2, [r7, #2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08008810 	.word	0x08008810

08002e68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e6c:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40007000 	.word	0x40007000

08002e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e92:	d007      	beq.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9a:	d003      	beq.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002e9c:	21a7      	movs	r1, #167	@ 0xa7
 8002e9e:	4826      	ldr	r0, [pc, #152]	@ (8002f38 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002ea0:	f7fe fb32 	bl	8001508 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eaa:	d130      	bne.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eac:	4b23      	ldr	r3, [pc, #140]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb8:	d038      	beq.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eba:	4b20      	ldr	r3, [pc, #128]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002ec4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eca:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2232      	movs	r2, #50	@ 0x32
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f44 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0c9b      	lsrs	r3, r3, #18
 8002edc:	3301      	adds	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee0:	e002      	b.n	8002ee8 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef4:	d102      	bne.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x78>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f2      	bne.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002efc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f08:	d110      	bne.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e00f      	b.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1a:	d007      	beq.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f1c:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f24:	4a05      	ldr	r2, [pc, #20]	@ (8002f3c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	0800884c 	.word	0x0800884c
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	20000004 	.word	0x20000004
 8002f44:	431bde83 	.word	0x431bde83

08002f48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f000 bcef 	b.w	800393a <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b1f      	cmp	r3, #31
 8002f6a:	d904      	bls.n	8002f76 <HAL_RCC_OscConfig+0x2e>
 8002f6c:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8002f70:	489a      	ldr	r0, [pc, #616]	@ (80031dc <HAL_RCC_OscConfig+0x294>)
 8002f72:	f7fe fac9 	bl	8001508 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f76:	4b9a      	ldr	r3, [pc, #616]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f80:	4b97      	ldr	r3, [pc, #604]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 813d 	beq.w	8003212 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x6a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d004      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x6a>
 8002fa8:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002fac:	488b      	ldr	r0, [pc, #556]	@ (80031dc <HAL_RCC_OscConfig+0x294>)
 8002fae:	f7fe faab 	bl	8001508 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2bff      	cmp	r3, #255	@ 0xff
 8002fb8:	d904      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x7c>
 8002fba:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8002fbe:	4887      	ldr	r0, [pc, #540]	@ (80031dc <HAL_RCC_OscConfig+0x294>)
 8002fc0:	f7fe faa2 	bl	8001508 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d030      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d02c      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d028      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	2b30      	cmp	r3, #48	@ 0x30
 8002fe2:	d024      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	2b50      	cmp	r3, #80	@ 0x50
 8002ff2:	d01c      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	2b60      	cmp	r3, #96	@ 0x60
 8002ffa:	d018      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	2b70      	cmp	r3, #112	@ 0x70
 8003002:	d014      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	2b80      	cmp	r3, #128	@ 0x80
 800300a:	d010      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	2b90      	cmp	r3, #144	@ 0x90
 8003012:	d00c      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	2ba0      	cmp	r3, #160	@ 0xa0
 800301a:	d008      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	2bb0      	cmp	r3, #176	@ 0xb0
 8003022:	d004      	beq.n	800302e <HAL_RCC_OscConfig+0xe6>
 8003024:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8003028:	486c      	ldr	r0, [pc, #432]	@ (80031dc <HAL_RCC_OscConfig+0x294>)
 800302a:	f7fe fa6d 	bl	8001508 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_RCC_OscConfig+0xfc>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	f040 808e 	bne.w	8003158 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 808a 	bne.w	8003158 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003044:	4b66      	ldr	r3, [pc, #408]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_RCC_OscConfig+0x116>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f000 bc6e 	b.w	800393a <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	4b5f      	ldr	r3, [pc, #380]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_RCC_OscConfig+0x130>
 800306e:	4b5c      	ldr	r3, [pc, #368]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003076:	e005      	b.n	8003084 <HAL_RCC_OscConfig+0x13c>
 8003078:	4b59      	ldr	r3, [pc, #356]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003084:	4293      	cmp	r3, r2
 8003086:	d224      	bcs.n	80030d2 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fec1 	bl	8003e14 <RCC_SetFlashLatencyFromMSIRange>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	f000 bc4e 	b.w	800393a <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309e:	4b50      	ldr	r3, [pc, #320]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a4f      	ldr	r2, [pc, #316]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b4d      	ldr	r3, [pc, #308]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	494a      	ldr	r1, [pc, #296]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030bc:	4b48      	ldr	r3, [pc, #288]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	4945      	ldr	r1, [pc, #276]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
 80030d0:	e026      	b.n	8003120 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	4b43      	ldr	r3, [pc, #268]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a42      	ldr	r2, [pc, #264]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b40      	ldr	r3, [pc, #256]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	493d      	ldr	r1, [pc, #244]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f0:	4b3b      	ldr	r3, [pc, #236]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	4938      	ldr	r1, [pc, #224]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fe80 	bl	8003e14 <RCC_SetFlashLatencyFromMSIRange>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f000 bc0d 	b.w	800393a <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003120:	f000 fdb4 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b2e      	ldr	r3, [pc, #184]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	492c      	ldr	r1, [pc, #176]	@ (80031e4 <HAL_RCC_OscConfig+0x29c>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	4a2a      	ldr	r2, [pc, #168]	@ (80031e8 <HAL_RCC_OscConfig+0x2a0>)
 800313e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003140:	4b2a      	ldr	r3, [pc, #168]	@ (80031ec <HAL_RCC_OscConfig+0x2a4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe fef5 	bl	8001f34 <HAL_InitTick>
 800314a:	4603      	mov	r3, r0
 800314c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05d      	beq.n	8003210 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	e3f0      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d032      	beq.n	80031c6 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003160:	4b1f      	ldr	r3, [pc, #124]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1e      	ldr	r2, [pc, #120]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800316c:	f7fe ff32 	bl	8001fd4 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003174:	f7fe ff2e 	bl	8001fd4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e3d9      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003186:	4b16      	ldr	r3, [pc, #88]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003192:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	490d      	ldr	r1, [pc, #52]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	4908      	ldr	r1, [pc, #32]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
 80031c4:	e025      	b.n	8003212 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a05      	ldr	r2, [pc, #20]	@ (80031e0 <HAL_RCC_OscConfig+0x298>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031d2:	f7fe feff 	bl	8001fd4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d8:	e013      	b.n	8003202 <HAL_RCC_OscConfig+0x2ba>
 80031da:	bf00      	nop
 80031dc:	08008888 	.word	0x08008888
 80031e0:	40021000 	.word	0x40021000
 80031e4:	080089e4 	.word	0x080089e4
 80031e8:	20000004 	.word	0x20000004
 80031ec:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f0:	f7fe fef0 	bl	8001fd4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e39b      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003202:	4b97      	ldr	r3, [pc, #604]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x2a8>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d07e      	beq.n	800331c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00e      	beq.n	8003244 <HAL_RCC_OscConfig+0x2fc>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322e:	d009      	beq.n	8003244 <HAL_RCC_OscConfig+0x2fc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003238:	d004      	beq.n	8003244 <HAL_RCC_OscConfig+0x2fc>
 800323a:	f240 2119 	movw	r1, #537	@ 0x219
 800323e:	4889      	ldr	r0, [pc, #548]	@ (8003464 <HAL_RCC_OscConfig+0x51c>)
 8003240:	f7fe f962 	bl	8001508 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b08      	cmp	r3, #8
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x30e>
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d10e      	bne.n	800326e <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b82      	ldr	r3, [pc, #520]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d05b      	beq.n	800331a <HAL_RCC_OscConfig+0x3d2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d157      	bne.n	800331a <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e365      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x33e>
 8003278:	4b79      	ldr	r3, [pc, #484]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a78      	ldr	r2, [pc, #480]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e01d      	b.n	80032c2 <HAL_RCC_OscConfig+0x37a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_OscConfig+0x362>
 8003290:	4b73      	ldr	r3, [pc, #460]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a72      	ldr	r2, [pc, #456]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 8003296:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b70      	ldr	r3, [pc, #448]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6f      	ldr	r2, [pc, #444]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e00b      	b.n	80032c2 <HAL_RCC_OscConfig+0x37a>
 80032aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a69      	ldr	r2, [pc, #420]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80032bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d013      	beq.n	80032f2 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fe83 	bl	8001fd4 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d2:	f7fe fe7f 	bl	8001fd4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	@ 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e32a      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x38a>
 80032f0:	e014      	b.n	800331c <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fe6f 	bl	8001fd4 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fa:	f7fe fe6b 	bl	8001fd4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	@ 0x64
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e316      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330c:	4b54      	ldr	r3, [pc, #336]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x3b2>
 8003318:	e000      	b.n	800331c <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d077      	beq.n	8003418 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d009      	beq.n	8003344 <HAL_RCC_OscConfig+0x3fc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003338:	d004      	beq.n	8003344 <HAL_RCC_OscConfig+0x3fc>
 800333a:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800333e:	4849      	ldr	r0, [pc, #292]	@ (8003464 <HAL_RCC_OscConfig+0x51c>)
 8003340:	f7fe f8e2 	bl	8001508 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b1f      	cmp	r3, #31
 800334a:	d904      	bls.n	8003356 <HAL_RCC_OscConfig+0x40e>
 800334c:	f240 214d 	movw	r1, #589	@ 0x24d
 8003350:	4844      	ldr	r0, [pc, #272]	@ (8003464 <HAL_RCC_OscConfig+0x51c>)
 8003352:	f7fe f8d9 	bl	8001508 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d005      	beq.n	8003368 <HAL_RCC_OscConfig+0x420>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d119      	bne.n	8003396 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d116      	bne.n	8003396 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003368:	4b3d      	ldr	r3, [pc, #244]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_OscConfig+0x438>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e2dc      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b37      	ldr	r3, [pc, #220]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	4934      	ldr	r1, [pc, #208]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003394:	e040      	b.n	8003418 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d023      	beq.n	80033e6 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339e:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fe fe13 	bl	8001fd4 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fe fe0f 	bl	8001fd4 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e2ba      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c4:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	4920      	ldr	r1, [pc, #128]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
 80033e4:	e018      	b.n	8003418 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 80033ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe fdef 	bl	8001fd4 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fa:	f7fe fdeb 	bl	8001fd4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e296      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d04e      	beq.n	80034c2 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_OscConfig+0x4f6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d004      	beq.n	800343e <HAL_RCC_OscConfig+0x4f6>
 8003434:	f240 218d 	movw	r1, #653	@ 0x28d
 8003438:	480a      	ldr	r0, [pc, #40]	@ (8003464 <HAL_RCC_OscConfig+0x51c>)
 800343a:	f7fe f865 	bl	8001508 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d021      	beq.n	800348a <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344c:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <HAL_RCC_OscConfig+0x518>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fe fdbd 	bl	8001fd4 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800345c:	e00d      	b.n	800347a <HAL_RCC_OscConfig+0x532>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	08008888 	.word	0x08008888
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7fe fdb4 	bl	8001fd4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e25f      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800347a:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 800347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ef      	beq.n	8003468 <HAL_RCC_OscConfig+0x520>
 8003488:	e01b      	b.n	80034c2 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348a:	4b62      	ldr	r3, [pc, #392]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 800348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003490:	4a60      	ldr	r2, [pc, #384]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fd9b 	bl	8001fd4 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe fd97 	bl	8001fd4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e242      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b4:	4b57      	ldr	r3, [pc, #348]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 80034b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ef      	bne.n	80034a2 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80b8 	beq.w	8003640 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d0:	2300      	movs	r3, #0
 80034d2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x5ae>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_OscConfig+0x5ae>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d004      	beq.n	80034f6 <HAL_RCC_OscConfig+0x5ae>
 80034ec:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80034f0:	4849      	ldr	r0, [pc, #292]	@ (8003618 <HAL_RCC_OscConfig+0x6d0>)
 80034f2:	f7fe f809 	bl	8001508 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034f6:	4b47      	ldr	r3, [pc, #284]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	4b44      	ldr	r3, [pc, #272]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	4a43      	ldr	r2, [pc, #268]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800350c:	6593      	str	r3, [r2, #88]	@ 0x58
 800350e:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351a:	2301      	movs	r3, #1
 800351c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351e:	4b3f      	ldr	r3, [pc, #252]	@ (800361c <HAL_RCC_OscConfig+0x6d4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d118      	bne.n	800355c <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800352a:	4b3c      	ldr	r3, [pc, #240]	@ (800361c <HAL_RCC_OscConfig+0x6d4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3b      	ldr	r2, [pc, #236]	@ (800361c <HAL_RCC_OscConfig+0x6d4>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003536:	f7fe fd4d 	bl	8001fd4 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353e:	f7fe fd49 	bl	8001fd4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e1f4      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <HAL_RCC_OscConfig+0x6d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d108      	bne.n	8003576 <HAL_RCC_OscConfig+0x62e>
 8003564:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356a:	4a2a      	ldr	r2, [pc, #168]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003574:	e024      	b.n	80035c0 <HAL_RCC_OscConfig+0x678>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d110      	bne.n	80035a0 <HAL_RCC_OscConfig+0x658>
 800357e:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003584:	4a23      	ldr	r2, [pc, #140]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800358e:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003594:	4a1f      	ldr	r2, [pc, #124]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800359e:	e00f      	b.n	80035c0 <HAL_RCC_OscConfig+0x678>
 80035a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b0:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d016      	beq.n	80035f6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe fd04 	bl	8001fd4 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fe fd00 	bl	8001fd4 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1a9      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCC_OscConfig+0x6cc>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ed      	beq.n	80035d0 <HAL_RCC_OscConfig+0x688>
 80035f4:	e01b      	b.n	800362e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fe fced 	bl	8001fd4 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035fc:	e010      	b.n	8003620 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fe fce9 	bl	8001fd4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d907      	bls.n	8003620 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e192      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
 8003614:	40021000 	.word	0x40021000
 8003618:	08008888 	.word	0x08008888
 800361c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003620:	4b98      	ldr	r3, [pc, #608]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e7      	bne.n	80035fe <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b93      	ldr	r3, [pc, #588]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003638:	4a92      	ldr	r2, [pc, #584]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800363e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00c      	beq.n	8003662 <HAL_RCC_OscConfig+0x71a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	2b01      	cmp	r3, #1
 800364e:	d008      	beq.n	8003662 <HAL_RCC_OscConfig+0x71a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	2b02      	cmp	r3, #2
 8003656:	d004      	beq.n	8003662 <HAL_RCC_OscConfig+0x71a>
 8003658:	f240 316e 	movw	r1, #878	@ 0x36e
 800365c:	488a      	ldr	r0, [pc, #552]	@ (8003888 <HAL_RCC_OscConfig+0x940>)
 800365e:	f7fd ff53 	bl	8001508 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8166 	beq.w	8003938 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	2b02      	cmp	r3, #2
 8003672:	f040 813c 	bne.w	80038ee <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d010      	beq.n	80036a0 <HAL_RCC_OscConfig+0x758>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d00c      	beq.n	80036a0 <HAL_RCC_OscConfig+0x758>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	2b02      	cmp	r3, #2
 800368c:	d008      	beq.n	80036a0 <HAL_RCC_OscConfig+0x758>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	2b03      	cmp	r3, #3
 8003694:	d004      	beq.n	80036a0 <HAL_RCC_OscConfig+0x758>
 8003696:	f240 3176 	movw	r1, #886	@ 0x376
 800369a:	487b      	ldr	r0, [pc, #492]	@ (8003888 <HAL_RCC_OscConfig+0x940>)
 800369c:	f7fd ff34 	bl	8001508 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_RCC_OscConfig+0x768>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d904      	bls.n	80036ba <HAL_RCC_OscConfig+0x772>
 80036b0:	f240 3177 	movw	r1, #887	@ 0x377
 80036b4:	4874      	ldr	r0, [pc, #464]	@ (8003888 <HAL_RCC_OscConfig+0x940>)
 80036b6:	f7fd ff27 	bl	8001508 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036be:	2b07      	cmp	r3, #7
 80036c0:	d903      	bls.n	80036ca <HAL_RCC_OscConfig+0x782>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c6:	2b56      	cmp	r3, #86	@ 0x56
 80036c8:	d904      	bls.n	80036d4 <HAL_RCC_OscConfig+0x78c>
 80036ca:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80036ce:	486e      	ldr	r0, [pc, #440]	@ (8003888 <HAL_RCC_OscConfig+0x940>)
 80036d0:	f7fd ff1a 	bl	8001508 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	2b07      	cmp	r3, #7
 80036da:	d008      	beq.n	80036ee <HAL_RCC_OscConfig+0x7a6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	2b11      	cmp	r3, #17
 80036e2:	d004      	beq.n	80036ee <HAL_RCC_OscConfig+0x7a6>
 80036e4:	f240 317a 	movw	r1, #890	@ 0x37a
 80036e8:	4867      	ldr	r0, [pc, #412]	@ (8003888 <HAL_RCC_OscConfig+0x940>)
 80036ea:	f7fd ff0d 	bl	8001508 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d010      	beq.n	8003718 <HAL_RCC_OscConfig+0x7d0>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d00c      	beq.n	8003718 <HAL_RCC_OscConfig+0x7d0>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003702:	2b06      	cmp	r3, #6
 8003704:	d008      	beq.n	8003718 <HAL_RCC_OscConfig+0x7d0>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370a:	2b08      	cmp	r3, #8
 800370c:	d004      	beq.n	8003718 <HAL_RCC_OscConfig+0x7d0>
 800370e:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8003712:	485d      	ldr	r0, [pc, #372]	@ (8003888 <HAL_RCC_OscConfig+0x940>)
 8003714:	f7fd fef8 	bl	8001508 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	2b02      	cmp	r3, #2
 800371e:	d010      	beq.n	8003742 <HAL_RCC_OscConfig+0x7fa>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	2b04      	cmp	r3, #4
 8003726:	d00c      	beq.n	8003742 <HAL_RCC_OscConfig+0x7fa>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	2b06      	cmp	r3, #6
 800372e:	d008      	beq.n	8003742 <HAL_RCC_OscConfig+0x7fa>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	2b08      	cmp	r3, #8
 8003736:	d004      	beq.n	8003742 <HAL_RCC_OscConfig+0x7fa>
 8003738:	f240 317d 	movw	r1, #893	@ 0x37d
 800373c:	4852      	ldr	r0, [pc, #328]	@ (8003888 <HAL_RCC_OscConfig+0x940>)
 800373e:	f7fd fee3 	bl	8001508 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003742:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0203 	and.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	429a      	cmp	r2, r3
 8003754:	d130      	bne.n	80037b8 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	3b01      	subs	r3, #1
 8003762:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d127      	bne.n	80037b8 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003772:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d11f      	bne.n	80037b8 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003782:	2a07      	cmp	r2, #7
 8003784:	bf14      	ite	ne
 8003786:	2201      	movne	r2, #1
 8003788:	2200      	moveq	r2, #0
 800378a:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800378c:	4293      	cmp	r3, r2
 800378e:	d113      	bne.n	80037b8 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3b01      	subs	r3, #1
 800379e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	3b01      	subs	r3, #1
 80037b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d074      	beq.n	80038a2 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d06f      	beq.n	800389e <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037be:	4b31      	ldr	r3, [pc, #196]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0af      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037da:	4b2a      	ldr	r3, [pc, #168]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a29      	ldr	r2, [pc, #164]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 80037e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e6:	f7fe fbf5 	bl	8001fd4 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe fbf1 	bl	8001fd4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e09c      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380c:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <HAL_RCC_OscConfig+0x944>)
 8003812:	4013      	ands	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800381c:	3a01      	subs	r2, #1
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003826:	0212      	lsls	r2, r2, #8
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800382e:	0852      	lsrs	r2, r2, #1
 8003830:	3a01      	subs	r2, #1
 8003832:	0552      	lsls	r2, r2, #21
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	3a01      	subs	r2, #1
 800383e:	0652      	lsls	r2, r2, #25
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003846:	0912      	lsrs	r2, r2, #4
 8003848:	0452      	lsls	r2, r2, #17
 800384a:	430a      	orrs	r2, r1
 800384c:	490d      	ldr	r1, [pc, #52]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003852:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a0b      	ldr	r2, [pc, #44]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003858:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800385c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800385e:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4a08      	ldr	r2, [pc, #32]	@ (8003884 <HAL_RCC_OscConfig+0x93c>)
 8003864:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003868:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800386a:	f7fe fbb3 	bl	8001fd4 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003870:	e00e      	b.n	8003890 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003872:	f7fe fbaf 	bl	8001fd4 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d907      	bls.n	8003890 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e05a      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
 8003884:	40021000 	.word	0x40021000
 8003888:	08008888 	.word	0x08008888
 800388c:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003890:	4b2c      	ldr	r3, [pc, #176]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ea      	beq.n	8003872 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800389c:	e04c      	b.n	8003938 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e04b      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	4b28      	ldr	r3, [pc, #160]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d144      	bne.n	8003938 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038ae:	4b25      	ldr	r3, [pc, #148]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a24      	ldr	r2, [pc, #144]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 80038b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038ba:	4b22      	ldr	r3, [pc, #136]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4a21      	ldr	r2, [pc, #132]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 80038c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038c4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038c6:	f7fe fb85 	bl	8001fd4 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe fb81 	bl	8001fd4 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e02c      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e0:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x986>
 80038ec:	e024      	b.n	8003938 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	d01f      	beq.n	8003934 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a12      	ldr	r2, [pc, #72]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 80038fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fe fb68 	bl	8001fd4 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003908:	f7fe fb64 	bl	8001fd4 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e00f      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003926:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	4906      	ldr	r1, [pc, #24]	@ (8003944 <HAL_RCC_OscConfig+0x9fc>)
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_RCC_OscConfig+0xa00>)
 800392e:	4013      	ands	r3, r2
 8003930:	60cb      	str	r3, [r1, #12]
 8003932:	e001      	b.n	8003938 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	feeefffc 	.word	0xfeeefffc

0800394c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e186      	b.n	8003c6e <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_RCC_ClockConfig+0x24>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d904      	bls.n	800397a <HAL_RCC_ClockConfig+0x2e>
 8003970:	f240 4159 	movw	r1, #1113	@ 0x459
 8003974:	4882      	ldr	r0, [pc, #520]	@ (8003b80 <HAL_RCC_ClockConfig+0x234>)
 8003976:	f7fd fdc7 	bl	8001508 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d010      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x56>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d00d      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x56>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d00a      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x56>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d007      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x56>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d004      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x56>
 8003998:	f240 415a 	movw	r1, #1114	@ 0x45a
 800399c:	4878      	ldr	r0, [pc, #480]	@ (8003b80 <HAL_RCC_ClockConfig+0x234>)
 800399e:	f7fd fdb3 	bl	8001508 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a2:	4b78      	ldr	r3, [pc, #480]	@ (8003b84 <HAL_RCC_ClockConfig+0x238>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d910      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b0:	4b74      	ldr	r3, [pc, #464]	@ (8003b84 <HAL_RCC_ClockConfig+0x238>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f023 0207 	bic.w	r2, r3, #7
 80039b8:	4972      	ldr	r1, [pc, #456]	@ (8003b84 <HAL_RCC_ClockConfig+0x238>)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c0:	4b70      	ldr	r3, [pc, #448]	@ (8003b84 <HAL_RCC_ClockConfig+0x238>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d001      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e14d      	b.n	8003c6e <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d039      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d024      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b80      	cmp	r3, #128	@ 0x80
 80039ec:	d020      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b90      	cmp	r3, #144	@ 0x90
 80039f4:	d01c      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80039fc:	d018      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2bb0      	cmp	r3, #176	@ 0xb0
 8003a04:	d014      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a0c:	d010      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2bd0      	cmp	r3, #208	@ 0xd0
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2be0      	cmp	r3, #224	@ 0xe0
 8003a1c:	d008      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2bf0      	cmp	r3, #240	@ 0xf0
 8003a24:	d004      	beq.n	8003a30 <HAL_RCC_ClockConfig+0xe4>
 8003a26:	f240 4172 	movw	r1, #1138	@ 0x472
 8003a2a:	4855      	ldr	r0, [pc, #340]	@ (8003b80 <HAL_RCC_ClockConfig+0x234>)
 8003a2c:	f7fd fd6c 	bl	8001508 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	4b54      	ldr	r3, [pc, #336]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d908      	bls.n	8003a52 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b51      	ldr	r3, [pc, #324]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	494e      	ldr	r1, [pc, #312]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d061      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x13c>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d00c      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x13c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d008      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x13c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d004      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x13c>
 8003a7e:	f240 417d 	movw	r1, #1149	@ 0x47d
 8003a82:	483f      	ldr	r0, [pc, #252]	@ (8003b80 <HAL_RCC_ClockConfig+0x234>)
 8003a84:	f7fd fd40 	bl	8001508 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a90:	4b3d      	ldr	r3, [pc, #244]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d121      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0e6      	b.n	8003c6e <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d107      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa8:	4b37      	ldr	r3, [pc, #220]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d115      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0da      	b.n	8003c6e <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ac0:	4b31      	ldr	r3, [pc, #196]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0ce      	b.n	8003c6e <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0c6      	b.n	8003c6e <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ae0:	4b29      	ldr	r3, [pc, #164]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 0203 	bic.w	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4926      	ldr	r1, [pc, #152]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af2:	f7fe fa6f 	bl	8001fd4 <HAL_GetTick>
 8003af6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003afa:	f7fe fa6b 	bl	8001fd4 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0ae      	b.n	8003c6e <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 020c 	and.w	r2, r3, #12
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d1eb      	bne.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4b15      	ldr	r3, [pc, #84]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d208      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3e:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	490f      	ldr	r1, [pc, #60]	@ (8003b88 <HAL_RCC_ClockConfig+0x23c>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b50:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <HAL_RCC_ClockConfig+0x238>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d216      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_ClockConfig+0x238>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 0207 	bic.w	r2, r3, #7
 8003b66:	4907      	ldr	r1, [pc, #28]	@ (8003b84 <HAL_RCC_ClockConfig+0x238>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_RCC_ClockConfig+0x238>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d007      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e076      	b.n	8003c6e <HAL_RCC_ClockConfig+0x322>
 8003b80:	08008888 	.word	0x08008888
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d025      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d018      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x286>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba8:	d013      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x286>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x286>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x286>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bc6:	d004      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x286>
 8003bc8:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8003bcc:	482a      	ldr	r0, [pc, #168]	@ (8003c78 <HAL_RCC_ClockConfig+0x32c>)
 8003bce:	f7fd fc9b 	bl	8001508 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c7c <HAL_RCC_ClockConfig+0x330>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4927      	ldr	r1, [pc, #156]	@ (8003c7c <HAL_RCC_ClockConfig+0x330>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d026      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d018      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x2de>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c00:	d013      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x2de>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003c0a:	d00e      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x2de>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c14:	d009      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x2de>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c1e:	d004      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x2de>
 8003c20:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8003c24:	4814      	ldr	r0, [pc, #80]	@ (8003c78 <HAL_RCC_ClockConfig+0x32c>)
 8003c26:	f7fd fc6f 	bl	8001508 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2a:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <HAL_RCC_ClockConfig+0x330>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4910      	ldr	r1, [pc, #64]	@ (8003c7c <HAL_RCC_ClockConfig+0x330>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c3e:	f000 f825 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c42:	4602      	mov	r2, r0
 8003c44:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <HAL_RCC_ClockConfig+0x330>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	490c      	ldr	r1, [pc, #48]	@ (8003c80 <HAL_RCC_ClockConfig+0x334>)
 8003c50:	5ccb      	ldrb	r3, [r1, r3]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c84 <HAL_RCC_ClockConfig+0x338>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c88 <HAL_RCC_ClockConfig+0x33c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe f966 	bl	8001f34 <HAL_InitTick>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c6c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	08008888 	.word	0x08008888
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	080089e4 	.word	0x080089e4
 8003c84:	20000004 	.word	0x20000004
 8003c88:	20000008 	.word	0x20000008

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	@ 0x24
 8003c90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d121      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d11e      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cc0:	4b34      	ldr	r3, [pc, #208]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ccc:	4b31      	ldr	r3, [pc, #196]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e005      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d102      	bne.n	8003d0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d04:	4b25      	ldr	r3, [pc, #148]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	e004      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d10:	4b23      	ldr	r3, [pc, #140]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d134      	bne.n	8003d84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d003      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d003      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0xac>
 8003d30:	e005      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d32:	4b1a      	ldr	r3, [pc, #104]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003d34:	617b      	str	r3, [r7, #20]
      break;
 8003d36:	e005      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d38:	4b19      	ldr	r3, [pc, #100]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d3a:	617b      	str	r3, [r7, #20]
      break;
 8003d3c:	e002      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	617b      	str	r3, [r7, #20]
      break;
 8003d42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d44:	4b13      	ldr	r3, [pc, #76]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	3301      	adds	r3, #1
 8003d50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d52:	4b10      	ldr	r3, [pc, #64]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	fb03 f202 	mul.w	r2, r3, r2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	0e5b      	lsrs	r3, r3, #25
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	3301      	adds	r3, #1
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d84:	69bb      	ldr	r3, [r7, #24]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	@ 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	080089fc 	.word	0x080089fc
 8003d9c:	00f42400 	.word	0x00f42400
 8003da0:	007a1200 	.word	0x007a1200

08003da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da8:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000004 	.word	0x20000004

08003dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dc0:	f7ff fff0 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b06      	ldr	r3, [pc, #24]	@ (8003de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4904      	ldr	r1, [pc, #16]	@ (8003de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021000 	.word	0x40021000
 8003de4:	080089f4 	.word	0x080089f4

08003de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dec:	f7ff ffda 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0adb      	lsrs	r3, r3, #11
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4904      	ldr	r1, [pc, #16]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	080089f4 	.word	0x080089f4

08003e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e20:	4b2a      	ldr	r3, [pc, #168]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e2c:	f7ff f81c 	bl	8002e68 <HAL_PWREx_GetVoltageRange>
 8003e30:	6178      	str	r0, [r7, #20]
 8003e32:	e014      	b.n	8003e5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e34:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e38:	4a24      	ldr	r2, [pc, #144]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e40:	4b22      	ldr	r3, [pc, #136]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e4c:	f7ff f80c 	bl	8002e68 <HAL_PWREx_GetVoltageRange>
 8003e50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e64:	d10b      	bne.n	8003e7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b80      	cmp	r3, #128	@ 0x80
 8003e6a:	d919      	bls.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e70:	d902      	bls.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e72:	2302      	movs	r3, #2
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	e013      	b.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e78:	2301      	movs	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	e010      	b.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b80      	cmp	r3, #128	@ 0x80
 8003e82:	d902      	bls.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e84:	2303      	movs	r3, #3
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	e00a      	b.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b80      	cmp	r3, #128	@ 0x80
 8003e8e:	d102      	bne.n	8003e96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e90:	2302      	movs	r3, #2
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	e004      	b.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b70      	cmp	r3, #112	@ 0x70
 8003e9a:	d101      	bne.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 0207 	bic.w	r2, r3, #7
 8003ea8:	4909      	ldr	r1, [pc, #36]	@ (8003ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003eb0:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d001      	beq.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40022000 	.word	0x40022000

08003ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003edc:	2300      	movs	r3, #0
 8003ede:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef8:	d303      	bcc.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003efa:	21c9      	movs	r1, #201	@ 0xc9
 8003efc:	4889      	ldr	r0, [pc, #548]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003efe:	f7fd fb03 	bl	8001508 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d058      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d012      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f28:	d008      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f32:	d003      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003f34:	21d1      	movs	r1, #209	@ 0xd1
 8003f36:	487b      	ldr	r0, [pc, #492]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003f38:	f7fd fae6 	bl	8001508 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f44:	d02a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003f46:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f4a:	d824      	bhi.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003f4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f50:	d008      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f56:	d81e      	bhi.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f60:	d010      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8003f62:	e018      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f64:	4b70      	ldr	r3, [pc, #448]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a6f      	ldr	r2, [pc, #444]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f70:	e015      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fc69 	bl	8004850 <RCCEx_PLLSAI1_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f82:	e00c      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3320      	adds	r3, #32
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fde0 	bl	8004b50 <RCCEx_PLLSAI2_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	74fb      	strb	r3, [r7, #19]
      break;
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8003f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fa4:	4b60      	ldr	r3, [pc, #384]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fb2:	495d      	ldr	r1, [pc, #372]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fba:	e001      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d059      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fdc:	d00e      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fe6:	d009      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ff0:	d004      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003ff2:	f240 110f 	movw	r1, #271	@ 0x10f
 8003ff6:	484b      	ldr	r0, [pc, #300]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003ff8:	f7fd fa86 	bl	8001508 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004000:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004004:	d02a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004006:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800400a:	d824      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800400c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004010:	d008      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004016:	d81e      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004020:	d010      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004022:	e018      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004024:	4b40      	ldr	r3, [pc, #256]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a3f      	ldr	r2, [pc, #252]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800402a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800402e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004030:	e015      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fc09 	bl	8004850 <RCCEx_PLLSAI1_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004042:	e00c      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3320      	adds	r3, #32
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fd80 	bl	8004b50 <RCCEx_PLLSAI2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004054:	e003      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	74fb      	strb	r3, [r7, #19]
      break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 800405c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004064:	4b30      	ldr	r3, [pc, #192]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004072:	492d      	ldr	r1, [pc, #180]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800407a:	e001      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
 800407e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80c2 	beq.w	8004212 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004098:	2b00      	cmp	r3, #0
 800409a:	d016      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a6:	d010      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040be:	d004      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80040c0:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80040c4:	4817      	ldr	r0, [pc, #92]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80040c6:	f7fd fa1f 	bl	8001508 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040ca:	4b17      	ldr	r3, [pc, #92]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x206>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	4a10      	ldr	r2, [pc, #64]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f8:	2301      	movs	r3, #1
 80040fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0a      	ldr	r2, [pc, #40]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004108:	f7fd ff64 	bl	8001fd4 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800410e:	e00f      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004110:	f7fd ff60 	bl	8001fd4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d908      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	74fb      	strb	r3, [r7, #19]
        break;
 8004122:	e00b      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8004124:	080088c0 	.word	0x080088c0
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004130:	4b30      	ldr	r3, [pc, #192]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0e9      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d15c      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004142:	4b2d      	ldr	r3, [pc, #180]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01f      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	429a      	cmp	r2, r3
 800415e:	d019      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004160:	4b25      	ldr	r3, [pc, #148]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800416c:	4b22      	ldr	r3, [pc, #136]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a21      	ldr	r2, [pc, #132]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800417c:	4b1e      	ldr	r3, [pc, #120]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800418c:	4a1a      	ldr	r2, [pc, #104]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fd ff19 	bl	8001fd4 <HAL_GetTick>
 80041a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a4:	e00b      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7fd ff15 	bl	8001fd4 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d902      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	74fb      	strb	r3, [r7, #19]
            break;
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041be:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ec      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10c      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d2:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e2:	4905      	ldr	r1, [pc, #20]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041ea:	e009      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	74bb      	strb	r3, [r7, #18]
 80041f0:	e006      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80041f2:	bf00      	nop
 80041f4:	40007000 	.word	0x40007000
 80041f8:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004200:	7c7b      	ldrb	r3, [r7, #17]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004206:	4b8d      	ldr	r3, [pc, #564]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	4a8c      	ldr	r2, [pc, #560]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800420c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004210:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01f      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	2b00      	cmp	r3, #0
 8004224:	d010      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422a:	2b01      	cmp	r3, #1
 800422c:	d00c      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	2b03      	cmp	r3, #3
 8004234:	d008      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423a:	2b02      	cmp	r3, #2
 800423c:	d004      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800423e:	f240 1199 	movw	r1, #409	@ 0x199
 8004242:	487f      	ldr	r0, [pc, #508]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004244:	f7fd f960 	bl	8001508 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004248:	4b7c      	ldr	r3, [pc, #496]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	4979      	ldr	r1, [pc, #484]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01f      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00c      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004286:	2b08      	cmp	r3, #8
 8004288:	d004      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800428a:	f240 11a3 	movw	r1, #419	@ 0x1a3
 800428e:	486c      	ldr	r0, [pc, #432]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004290:	f7fd f93a 	bl	8001508 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004294:	4b69      	ldr	r3, [pc, #420]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429a:	f023 020c 	bic.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a2:	4966      	ldr	r1, [pc, #408]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01f      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d010      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d00c      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	2b30      	cmp	r3, #48	@ 0x30
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d004      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80042d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80042da:	4859      	ldr	r0, [pc, #356]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80042dc:	f7fd f914 	bl	8001508 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042e0:	4b56      	ldr	r3, [pc, #344]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	4953      	ldr	r1, [pc, #332]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01f      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	2b00      	cmp	r3, #0
 8004308:	d010      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	2b40      	cmp	r3, #64	@ 0x40
 8004310:	d00c      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	2bc0      	cmp	r3, #192	@ 0xc0
 8004318:	d008      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x458>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	2b80      	cmp	r3, #128	@ 0x80
 8004320:	d004      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004322:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8004326:	4846      	ldr	r0, [pc, #280]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004328:	f7fd f8ee 	bl	8001508 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800432c:	4b43      	ldr	r3, [pc, #268]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004332:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433a:	4940      	ldr	r1, [pc, #256]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b00      	cmp	r3, #0
 800434c:	d022      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004352:	2b00      	cmp	r3, #0
 8004354:	d013      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800435e:	d00e      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004368:	d009      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004372:	d004      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004374:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004378:	4831      	ldr	r0, [pc, #196]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800437a:	f7fd f8c5 	bl	8001508 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800437e:	4b2f      	ldr	r3, [pc, #188]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004384:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438c:	492b      	ldr	r1, [pc, #172]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d022      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b0:	d00e      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043ba:	d009      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c4:	d004      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80043c6:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80043ca:	481d      	ldr	r0, [pc, #116]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80043cc:	f7fd f89c 	bl	8001508 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d0:	4b1a      	ldr	r3, [pc, #104]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043de:	4917      	ldr	r1, [pc, #92]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d028      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d013      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004402:	d00e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004408:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800440c:	d009      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004412:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004416:	d004      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004418:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800441c:	4808      	ldr	r0, [pc, #32]	@ (8004440 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800441e:	f7fd f873 	bl	8001508 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004422:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004428:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004430:	4902      	ldr	r1, [pc, #8]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004438:	e004      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	080088c0 	.word	0x080088c0
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d022      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004460:	d00e      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800446a:	d009      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004470:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004474:	d004      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004476:	f240 11e7 	movw	r1, #487	@ 0x1e7
 800447a:	489e      	ldr	r0, [pc, #632]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800447c:	f7fd f844 	bl	8001508 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004480:	4b9d      	ldr	r3, [pc, #628]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448e:	499a      	ldr	r1, [pc, #616]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01d      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00e      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044b2:	d009      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044bc:	d004      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80044be:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80044c2:	488c      	ldr	r0, [pc, #560]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80044c4:	f7fd f820 	bl	8001508 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c8:	4b8b      	ldr	r3, [pc, #556]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d6:	4988      	ldr	r1, [pc, #544]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01d      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00e      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044fa:	d009      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004504:	d004      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004506:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800450a:	487a      	ldr	r0, [pc, #488]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800450c:	f7fc fffc 	bl	8001508 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004510:	4b79      	ldr	r3, [pc, #484]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004516:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	4976      	ldr	r1, [pc, #472]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01d      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00e      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800454c:	d004      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800454e:	f240 2107 	movw	r1, #519	@ 0x207
 8004552:	4868      	ldr	r0, [pc, #416]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004554:	f7fc ffd8 	bl	8001508 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004558:	4b67      	ldr	r3, [pc, #412]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004566:	4964      	ldr	r1, [pc, #400]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d040      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004586:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800458a:	d00e      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004594:	d009      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800459e:	d004      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80045a0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80045a4:	4853      	ldr	r0, [pc, #332]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80045a6:	f7fc ffaf 	bl	8001508 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045aa:	4b53      	ldr	r3, [pc, #332]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b8:	494f      	ldr	r1, [pc, #316]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ca:	4b4b      	ldr	r3, [pc, #300]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	4a4a      	ldr	r2, [pc, #296]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045d4:	60d3      	str	r3, [r2, #12]
 80045d6:	e011      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	2101      	movs	r1, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f931 	bl	8004850 <RCCEx_PLLSAI1_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d040      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004614:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004618:	d00e      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004622:	d009      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004628:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800462c:	d004      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800462e:	f240 2141 	movw	r1, #577	@ 0x241
 8004632:	4830      	ldr	r0, [pc, #192]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004634:	f7fc ff68 	bl	8001508 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004638:	4b2f      	ldr	r3, [pc, #188]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	492c      	ldr	r1, [pc, #176]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004656:	d106      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004658:	4b27      	ldr	r3, [pc, #156]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4a26      	ldr	r2, [pc, #152]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800465e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004662:	60d3      	str	r3, [r2, #12]
 8004664:	e011      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800466e:	d10c      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f8ea 	bl	8004850 <RCCEx_PLLSAI1_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8004686:	7cfb      	ldrb	r3, [r7, #19]
 8004688:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d044      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469a:	2b00      	cmp	r3, #0
 800469c:	d013      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046a6:	d00e      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b0:	d009      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046ba:	d004      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80046bc:	f240 2166 	movw	r1, #614	@ 0x266
 80046c0:	480c      	ldr	r0, [pc, #48]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80046c2:	f7fc ff21 	bl	8001508 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046c6:	4b0c      	ldr	r3, [pc, #48]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d4:	4908      	ldr	r1, [pc, #32]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e4:	d10a      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e6:	4b04      	ldr	r3, [pc, #16]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4a03      	ldr	r2, [pc, #12]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046f0:	60d3      	str	r3, [r2, #12]
 80046f2:	e015      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80046f4:	080088c0 	.word	0x080088c0
 80046f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004700:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004704:	d10c      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	2101      	movs	r1, #1
 800470c:	4618      	mov	r0, r3
 800470e:	f000 f89f 	bl	8004850 <RCCEx_PLLSAI1_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 800471c:	7cfb      	ldrb	r3, [r7, #19]
 800471e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d047      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004730:	2b00      	cmp	r3, #0
 8004732:	d013      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800473c:	d00e      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004746:	d009      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800474c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004750:	d004      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004752:	f240 2186 	movw	r1, #646	@ 0x286
 8004756:	483c      	ldr	r0, [pc, #240]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004758:	f7fc fed6 	bl	8001508 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800475c:	4b3b      	ldr	r3, [pc, #236]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800476a:	4938      	ldr	r1, [pc, #224]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800477a:	d10d      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	2102      	movs	r1, #2
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f864 	bl	8004850 <RCCEx_PLLSAI1_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d014      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	74bb      	strb	r3, [r7, #18]
 8004796:	e011      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800479c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047a0:	d10c      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3320      	adds	r3, #32
 80047a6:	2102      	movs	r1, #2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f9d1 	bl	8004b50 <RCCEx_PLLSAI2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d018      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d8:	d004      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80047da:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80047de:	481a      	ldr	r0, [pc, #104]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80047e0:	f7fc fe92 	bl	8001508 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047e4:	4b19      	ldr	r3, [pc, #100]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f2:	4916      	ldr	r1, [pc, #88]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01b      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800481a:	d004      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800481c:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8004820:	4809      	ldr	r0, [pc, #36]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004822:	f7fc fe71 	bl	8001508 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004826:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004836:	4905      	ldr	r1, [pc, #20]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800483e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	080088c0 	.word	0x080088c0
 800484c:	40021000 	.word	0x40021000

08004850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <RCCEx_PLLSAI1_Config+0x38>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d00c      	beq.n	8004888 <RCCEx_PLLSAI1_Config+0x38>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d008      	beq.n	8004888 <RCCEx_PLLSAI1_Config+0x38>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b03      	cmp	r3, #3
 800487c:	d004      	beq.n	8004888 <RCCEx_PLLSAI1_Config+0x38>
 800487e:	f640 3162 	movw	r1, #2914	@ 0xb62
 8004882:	4887      	ldr	r0, [pc, #540]	@ (8004aa0 <RCCEx_PLLSAI1_Config+0x250>)
 8004884:	f7fc fe40 	bl	8001508 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <RCCEx_PLLSAI1_Config+0x48>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d904      	bls.n	80048a2 <RCCEx_PLLSAI1_Config+0x52>
 8004898:	f640 3163 	movw	r1, #2915	@ 0xb63
 800489c:	4880      	ldr	r0, [pc, #512]	@ (8004aa0 <RCCEx_PLLSAI1_Config+0x250>)
 800489e:	f7fc fe33 	bl	8001508 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	d903      	bls.n	80048b2 <RCCEx_PLLSAI1_Config+0x62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b56      	cmp	r3, #86	@ 0x56
 80048b0:	d904      	bls.n	80048bc <RCCEx_PLLSAI1_Config+0x6c>
 80048b2:	f640 3164 	movw	r1, #2916	@ 0xb64
 80048b6:	487a      	ldr	r0, [pc, #488]	@ (8004aa0 <RCCEx_PLLSAI1_Config+0x250>)
 80048b8:	f7fc fe26 	bl	8001508 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <RCCEx_PLLSAI1_Config+0x90>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <RCCEx_PLLSAI1_Config+0x90>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <RCCEx_PLLSAI1_Config+0xa0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <RCCEx_PLLSAI1_Config+0xaa>
 80048f0:	f640 3165 	movw	r1, #2917	@ 0xb65
 80048f4:	486a      	ldr	r0, [pc, #424]	@ (8004aa0 <RCCEx_PLLSAI1_Config+0x250>)
 80048f6:	f7fc fe07 	bl	8001508 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048fa:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d018      	beq.n	8004938 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004906:	4b67      	ldr	r3, [pc, #412]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0203 	and.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d10d      	bne.n	8004932 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
       ||
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800491e:	4b61      	ldr	r3, [pc, #388]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
       ||
 800492e:	429a      	cmp	r2, r3
 8004930:	d047      	beq.n	80049c2 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e044      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d018      	beq.n	8004972 <RCCEx_PLLSAI1_Config+0x122>
 8004940:	2b03      	cmp	r3, #3
 8004942:	d825      	bhi.n	8004990 <RCCEx_PLLSAI1_Config+0x140>
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <RCCEx_PLLSAI1_Config+0xfe>
 8004948:	2b02      	cmp	r3, #2
 800494a:	d009      	beq.n	8004960 <RCCEx_PLLSAI1_Config+0x110>
 800494c:	e020      	b.n	8004990 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800494e:	4b55      	ldr	r3, [pc, #340]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495e:	e01a      	b.n	8004996 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004960:	4b50      	ldr	r3, [pc, #320]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d116      	bne.n	800499a <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004970:	e013      	b.n	800499a <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004972:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800497e:	4b49      	ldr	r3, [pc, #292]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800498e:	e006      	b.n	800499e <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	e004      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800499e:	bf00      	nop
    }

    if(status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10d      	bne.n	80049c2 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049a6:	4b3f      	ldr	r3, [pc, #252]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6819      	ldr	r1, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	430b      	orrs	r3, r1
 80049bc:	4939      	ldr	r1, [pc, #228]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 80ba 	bne.w	8004b3e <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049ca:	4b36      	ldr	r3, [pc, #216]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a35      	ldr	r2, [pc, #212]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 80049d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d6:	f7fd fafd 	bl	8001fd4 <HAL_GetTick>
 80049da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049dc:	e009      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049de:	f7fd faf9 	bl	8001fd4 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d902      	bls.n	80049f2 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	73fb      	strb	r3, [r7, #15]
        break;
 80049f0:	e005      	b.n	80049fe <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f2:	4b2c      	ldr	r3, [pc, #176]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1ef      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 809c 	bne.w	8004b3e <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11e      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b07      	cmp	r3, #7
 8004a12:	d008      	beq.n	8004a26 <RCCEx_PLLSAI1_Config+0x1d6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b11      	cmp	r3, #17
 8004a1a:	d004      	beq.n	8004a26 <RCCEx_PLLSAI1_Config+0x1d6>
 8004a1c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8004a20:	481f      	ldr	r0, [pc, #124]	@ (8004aa0 <RCCEx_PLLSAI1_Config+0x250>)
 8004a22:	f7fc fd71 	bl	8001508 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a26:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6892      	ldr	r2, [r2, #8]
 8004a36:	0211      	lsls	r1, r2, #8
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68d2      	ldr	r2, [r2, #12]
 8004a3c:	0912      	lsrs	r2, r2, #4
 8004a3e:	0452      	lsls	r2, r2, #17
 8004a40:	430a      	orrs	r2, r1
 8004a42:	4918      	ldr	r1, [pc, #96]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	610b      	str	r3, [r1, #16]
 8004a48:	e055      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d12b      	bne.n	8004aa8 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d010      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x22a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d00c      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x22a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b06      	cmp	r3, #6
 8004a66:	d008      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x22a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d004      	beq.n	8004a7a <RCCEx_PLLSAI1_Config+0x22a>
 8004a70:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8004a74:	480a      	ldr	r0, [pc, #40]	@ (8004aa0 <RCCEx_PLLSAI1_Config+0x250>)
 8004a76:	f7fc fd47 	bl	8001508 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a82:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6892      	ldr	r2, [r2, #8]
 8004a8a:	0211      	lsls	r1, r2, #8
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6912      	ldr	r2, [r2, #16]
 8004a90:	0852      	lsrs	r2, r2, #1
 8004a92:	3a01      	subs	r2, #1
 8004a94:	0552      	lsls	r2, r2, #21
 8004a96:	430a      	orrs	r2, r1
 8004a98:	4902      	ldr	r1, [pc, #8]	@ (8004aa4 <RCCEx_PLLSAI1_Config+0x254>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	610b      	str	r3, [r1, #16]
 8004a9e:	e02a      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0x2a6>
 8004aa0:	080088c0 	.word	0x080088c0
 8004aa4:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d010      	beq.n	8004ad2 <RCCEx_PLLSAI1_Config+0x282>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d00c      	beq.n	8004ad2 <RCCEx_PLLSAI1_Config+0x282>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d008      	beq.n	8004ad2 <RCCEx_PLLSAI1_Config+0x282>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d004      	beq.n	8004ad2 <RCCEx_PLLSAI1_Config+0x282>
 8004ac8:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8004acc:	481e      	ldr	r0, [pc, #120]	@ (8004b48 <RCCEx_PLLSAI1_Config+0x2f8>)
 8004ace:	f7fc fd1b 	bl	8001508 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x2fc>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ada:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6892      	ldr	r2, [r2, #8]
 8004ae2:	0211      	lsls	r1, r2, #8
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6952      	ldr	r2, [r2, #20]
 8004ae8:	0852      	lsrs	r2, r2, #1
 8004aea:	3a01      	subs	r2, #1
 8004aec:	0652      	lsls	r2, r2, #25
 8004aee:	430a      	orrs	r2, r1
 8004af0:	4916      	ldr	r1, [pc, #88]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x2fc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004af6:	4b15      	ldr	r3, [pc, #84]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x2fc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x2fc>)
 8004afc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fd fa67 	bl	8001fd4 <HAL_GetTick>
 8004b06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b08:	e009      	b.n	8004b1e <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b0a:	f7fd fa63 	bl	8001fd4 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d902      	bls.n	8004b1e <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b1c:	e005      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ef      	beq.n	8004b0a <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4904      	ldr	r1, [pc, #16]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	080088c0 	.word	0x080088c0
 8004b4c:	40021000 	.word	0x40021000

08004b50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <RCCEx_PLLSAI2_Config+0x38>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d00c      	beq.n	8004b88 <RCCEx_PLLSAI2_Config+0x38>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d008      	beq.n	8004b88 <RCCEx_PLLSAI2_Config+0x38>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d004      	beq.n	8004b88 <RCCEx_PLLSAI2_Config+0x38>
 8004b7e:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8004b82:	4896      	ldr	r0, [pc, #600]	@ (8004ddc <RCCEx_PLLSAI2_Config+0x28c>)
 8004b84:	f7fc fcc0 	bl	8001508 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <RCCEx_PLLSAI2_Config+0x48>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d904      	bls.n	8004ba2 <RCCEx_PLLSAI2_Config+0x52>
 8004b98:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8004b9c:	488f      	ldr	r0, [pc, #572]	@ (8004ddc <RCCEx_PLLSAI2_Config+0x28c>)
 8004b9e:	f7fc fcb3 	bl	8001508 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b07      	cmp	r3, #7
 8004ba8:	d903      	bls.n	8004bb2 <RCCEx_PLLSAI2_Config+0x62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b56      	cmp	r3, #86	@ 0x56
 8004bb0:	d904      	bls.n	8004bbc <RCCEx_PLLSAI2_Config+0x6c>
 8004bb2:	f640 4131 	movw	r1, #3121	@ 0xc31
 8004bb6:	4889      	ldr	r0, [pc, #548]	@ (8004ddc <RCCEx_PLLSAI2_Config+0x28c>)
 8004bb8:	f7fc fca6 	bl	8001508 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <RCCEx_PLLSAI2_Config+0x84>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <RCCEx_PLLSAI2_Config+0x94>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <RCCEx_PLLSAI2_Config+0x9e>
 8004be4:	f640 4132 	movw	r1, #3122	@ 0xc32
 8004be8:	487c      	ldr	r0, [pc, #496]	@ (8004ddc <RCCEx_PLLSAI2_Config+0x28c>)
 8004bea:	f7fc fc8d 	bl	8001508 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bee:	4b7c      	ldr	r3, [pc, #496]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bfa:	4b79      	ldr	r3, [pc, #484]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0203 	and.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10d      	bne.n	8004c26 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c12:	4b73      	ldr	r3, [pc, #460]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
       ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d047      	beq.n	8004cb6 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e044      	b.n	8004cb6 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d018      	beq.n	8004c66 <RCCEx_PLLSAI2_Config+0x116>
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d825      	bhi.n	8004c84 <RCCEx_PLLSAI2_Config+0x134>
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d002      	beq.n	8004c42 <RCCEx_PLLSAI2_Config+0xf2>
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d009      	beq.n	8004c54 <RCCEx_PLLSAI2_Config+0x104>
 8004c40:	e020      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c42:	4b67      	ldr	r3, [pc, #412]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11d      	bne.n	8004c8a <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c52:	e01a      	b.n	8004c8a <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c54:	4b62      	ldr	r3, [pc, #392]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d116      	bne.n	8004c8e <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c64:	e013      	b.n	8004c8e <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c66:	4b5e      	ldr	r3, [pc, #376]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c72:	4b5b      	ldr	r3, [pc, #364]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c82:	e006      	b.n	8004c92 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      break;
 8004c88:	e004      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004c92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c9a:	4b51      	ldr	r3, [pc, #324]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	494b      	ldr	r1, [pc, #300]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 808a 	bne.w	8004dd2 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cbe:	4b48      	ldr	r3, [pc, #288]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a47      	ldr	r2, [pc, #284]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cca:	f7fd f983 	bl	8001fd4 <HAL_GetTick>
 8004cce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cd0:	e009      	b.n	8004ce6 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cd2:	f7fd f97f 	bl	8001fd4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d902      	bls.n	8004ce6 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce4:	e005      	b.n	8004cf2 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ef      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d16c      	bne.n	8004dd2 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d11e      	bne.n	8004d3c <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b07      	cmp	r3, #7
 8004d04:	d008      	beq.n	8004d18 <RCCEx_PLLSAI2_Config+0x1c8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b11      	cmp	r3, #17
 8004d0c:	d004      	beq.n	8004d18 <RCCEx_PLLSAI2_Config+0x1c8>
 8004d0e:	f640 4185 	movw	r1, #3205	@ 0xc85
 8004d12:	4832      	ldr	r0, [pc, #200]	@ (8004ddc <RCCEx_PLLSAI2_Config+0x28c>)
 8004d14:	f7fc fbf8 	bl	8001508 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d18:	4b31      	ldr	r3, [pc, #196]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6892      	ldr	r2, [r2, #8]
 8004d28:	0211      	lsls	r1, r2, #8
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68d2      	ldr	r2, [r2, #12]
 8004d2e:	0912      	lsrs	r2, r2, #4
 8004d30:	0452      	lsls	r2, r2, #17
 8004d32:	430a      	orrs	r2, r1
 8004d34:	492a      	ldr	r1, [pc, #168]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	614b      	str	r3, [r1, #20]
 8004d3a:	e026      	b.n	8004d8a <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d010      	beq.n	8004d66 <RCCEx_PLLSAI2_Config+0x216>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d00c      	beq.n	8004d66 <RCCEx_PLLSAI2_Config+0x216>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b06      	cmp	r3, #6
 8004d52:	d008      	beq.n	8004d66 <RCCEx_PLLSAI2_Config+0x216>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d004      	beq.n	8004d66 <RCCEx_PLLSAI2_Config+0x216>
 8004d5c:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8004d60:	481e      	ldr	r0, [pc, #120]	@ (8004ddc <RCCEx_PLLSAI2_Config+0x28c>)
 8004d62:	f7fc fbd1 	bl	8001508 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d66:	4b1e      	ldr	r3, [pc, #120]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	0211      	lsls	r1, r2, #8
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6912      	ldr	r2, [r2, #16]
 8004d7c:	0852      	lsrs	r2, r2, #1
 8004d7e:	3a01      	subs	r2, #1
 8004d80:	0652      	lsls	r2, r2, #25
 8004d82:	430a      	orrs	r2, r1
 8004d84:	4916      	ldr	r1, [pc, #88]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d8a:	4b15      	ldr	r3, [pc, #84]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a14      	ldr	r2, [pc, #80]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fd f91d 	bl	8001fd4 <HAL_GetTick>
 8004d9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d9c:	e009      	b.n	8004db2 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d9e:	f7fd f919 	bl	8001fd4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d902      	bls.n	8004db2 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	73fb      	strb	r3, [r7, #15]
          break;
 8004db0:	e005      	b.n	8004dbe <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004db2:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ef      	beq.n	8004d9e <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dc4:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	4904      	ldr	r1, [pc, #16]	@ (8004de0 <RCCEx_PLLSAI2_Config+0x290>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	080088c0 	.word	0x080088c0
 8004de0:	40021000 	.word	0x40021000

08004de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e1dd      	b.n	80051b2 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a7b      	ldr	r2, [pc, #492]	@ (8004fe8 <HAL_SPI_Init+0x204>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_SPI_Init+0x3a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a79      	ldr	r2, [pc, #484]	@ (8004fec <HAL_SPI_Init+0x208>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_SPI_Init+0x3a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a78      	ldr	r2, [pc, #480]	@ (8004ff0 <HAL_SPI_Init+0x20c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_SPI_Init+0x3a>
 8004e14:	f240 1147 	movw	r1, #327	@ 0x147
 8004e18:	4876      	ldr	r0, [pc, #472]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004e1a:	f7fc fb75 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_SPI_Init+0x56>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e2e:	d004      	beq.n	8004e3a <HAL_SPI_Init+0x56>
 8004e30:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004e34:	486f      	ldr	r0, [pc, #444]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004e36:	f7fc fb67 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00e      	beq.n	8004e60 <HAL_SPI_Init+0x7c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4a:	d009      	beq.n	8004e60 <HAL_SPI_Init+0x7c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e54:	d004      	beq.n	8004e60 <HAL_SPI_Init+0x7c>
 8004e56:	f240 1149 	movw	r1, #329	@ 0x149
 8004e5a:	4866      	ldr	r0, [pc, #408]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004e5c:	f7fc fb54 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e68:	d040      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004e72:	d03b      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8004e7c:	d036      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e86:	d031      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004e90:	d02c      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004e9a:	d027      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004ea4:	d022      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eae:	d01d      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004eb8:	d018      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ec2:	d013      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004ecc:	d00e      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ed6:	d009      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ee0:	d004      	beq.n	8004eec <HAL_SPI_Init+0x108>
 8004ee2:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004ee6:	4843      	ldr	r0, [pc, #268]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004ee8:	f7fc fb0e 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef4:	d00d      	beq.n	8004f12 <HAL_SPI_Init+0x12e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_SPI_Init+0x12e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f06:	d004      	beq.n	8004f12 <HAL_SPI_Init+0x12e>
 8004f08:	f240 114b 	movw	r1, #331	@ 0x14b
 8004f0c:	4839      	ldr	r0, [pc, #228]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004f0e:	f7fc fafb 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d008      	beq.n	8004f2c <HAL_SPI_Init+0x148>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d004      	beq.n	8004f2c <HAL_SPI_Init+0x148>
 8004f22:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004f26:	4833      	ldr	r0, [pc, #204]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004f28:	f7fc faee 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d020      	beq.n	8004f76 <HAL_SPI_Init+0x192>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d01c      	beq.n	8004f76 <HAL_SPI_Init+0x192>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d018      	beq.n	8004f76 <HAL_SPI_Init+0x192>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	2b18      	cmp	r3, #24
 8004f4a:	d014      	beq.n	8004f76 <HAL_SPI_Init+0x192>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d010      	beq.n	8004f76 <HAL_SPI_Init+0x192>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	2b28      	cmp	r3, #40	@ 0x28
 8004f5a:	d00c      	beq.n	8004f76 <HAL_SPI_Init+0x192>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	2b30      	cmp	r3, #48	@ 0x30
 8004f62:	d008      	beq.n	8004f76 <HAL_SPI_Init+0x192>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b38      	cmp	r3, #56	@ 0x38
 8004f6a:	d004      	beq.n	8004f76 <HAL_SPI_Init+0x192>
 8004f6c:	f240 114d 	movw	r1, #333	@ 0x14d
 8004f70:	4820      	ldr	r0, [pc, #128]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004f72:	f7fc fac9 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <HAL_SPI_Init+0x1ac>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	2b80      	cmp	r3, #128	@ 0x80
 8004f84:	d004      	beq.n	8004f90 <HAL_SPI_Init+0x1ac>
 8004f86:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8004f8a:	481a      	ldr	r0, [pc, #104]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004f8c:	f7fc fabc 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_SPI_Init+0x1c6>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d004      	beq.n	8004faa <HAL_SPI_Init+0x1c6>
 8004fa0:	f240 114f 	movw	r1, #335	@ 0x14f
 8004fa4:	4813      	ldr	r0, [pc, #76]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004fa6:	f7fc faaf 	bl	8001508 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d151      	bne.n	8005056 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <HAL_SPI_Init+0x1e8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d004      	beq.n	8004fcc <HAL_SPI_Init+0x1e8>
 8004fc2:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8004fc6:	480b      	ldr	r0, [pc, #44]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004fc8:	f7fc fa9e 	bl	8001508 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d011      	beq.n	8004ff8 <HAL_SPI_Init+0x214>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d00d      	beq.n	8004ff8 <HAL_SPI_Init+0x214>
 8004fdc:	f240 1153 	movw	r1, #339	@ 0x153
 8004fe0:	4804      	ldr	r0, [pc, #16]	@ (8004ff4 <HAL_SPI_Init+0x210>)
 8004fe2:	f7fc fa91 	bl	8001508 <assert_failed>
 8004fe6:	e007      	b.n	8004ff8 <HAL_SPI_Init+0x214>
 8004fe8:	40013000 	.word	0x40013000
 8004fec:	40003800 	.word	0x40003800
 8004ff0:	40003c00 	.word	0x40003c00
 8004ff4:	080088fc 	.word	0x080088fc

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005000:	d125      	bne.n	800504e <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d050      	beq.n	80050ac <HAL_SPI_Init+0x2c8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	2b08      	cmp	r3, #8
 8005010:	d04c      	beq.n	80050ac <HAL_SPI_Init+0x2c8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b10      	cmp	r3, #16
 8005018:	d048      	beq.n	80050ac <HAL_SPI_Init+0x2c8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b18      	cmp	r3, #24
 8005020:	d044      	beq.n	80050ac <HAL_SPI_Init+0x2c8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	2b20      	cmp	r3, #32
 8005028:	d040      	beq.n	80050ac <HAL_SPI_Init+0x2c8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	2b28      	cmp	r3, #40	@ 0x28
 8005030:	d03c      	beq.n	80050ac <HAL_SPI_Init+0x2c8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	2b30      	cmp	r3, #48	@ 0x30
 8005038:	d038      	beq.n	80050ac <HAL_SPI_Init+0x2c8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	2b38      	cmp	r3, #56	@ 0x38
 8005040:	d034      	beq.n	80050ac <HAL_SPI_Init+0x2c8>
 8005042:	f240 1157 	movw	r1, #343	@ 0x157
 8005046:	485d      	ldr	r0, [pc, #372]	@ (80051bc <HAL_SPI_Init+0x3d8>)
 8005048:	f7fc fa5e 	bl	8001508 <assert_failed>
 800504c:	e02e      	b.n	80050ac <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	61da      	str	r2, [r3, #28]
 8005054:	e02a      	b.n	80050ac <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d020      	beq.n	80050a0 <HAL_SPI_Init+0x2bc>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	2b08      	cmp	r3, #8
 8005064:	d01c      	beq.n	80050a0 <HAL_SPI_Init+0x2bc>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	2b10      	cmp	r3, #16
 800506c:	d018      	beq.n	80050a0 <HAL_SPI_Init+0x2bc>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	2b18      	cmp	r3, #24
 8005074:	d014      	beq.n	80050a0 <HAL_SPI_Init+0x2bc>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	2b20      	cmp	r3, #32
 800507c:	d010      	beq.n	80050a0 <HAL_SPI_Init+0x2bc>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b28      	cmp	r3, #40	@ 0x28
 8005084:	d00c      	beq.n	80050a0 <HAL_SPI_Init+0x2bc>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	2b30      	cmp	r3, #48	@ 0x30
 800508c:	d008      	beq.n	80050a0 <HAL_SPI_Init+0x2bc>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	2b38      	cmp	r3, #56	@ 0x38
 8005094:	d004      	beq.n	80050a0 <HAL_SPI_Init+0x2bc>
 8005096:	f240 1161 	movw	r1, #353	@ 0x161
 800509a:	4848      	ldr	r0, [pc, #288]	@ (80051bc <HAL_SPI_Init+0x3d8>)
 800509c:	f7fc fa34 	bl	8001508 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc fa62 	bl	8001590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050ec:	d902      	bls.n	80050f4 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e002      	b.n	80050fa <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005102:	d007      	beq.n	8005114 <HAL_SPI_Init+0x330>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005156:	ea42 0103 	orr.w	r1, r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	0c1b      	lsrs	r3, r3, #16
 8005170:	f003 0204 	and.w	r2, r3, #4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005190:	ea42 0103 	orr.w	r1, r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	080088fc 	.word	0x080088fc

080051c0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	4613      	mov	r3, r2
 80051cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_SPI_Transmit_IT+0x2a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051de:	d004      	beq.n	80051ea <HAL_SPI_Transmit_IT+0x2a>
 80051e0:	f240 6144 	movw	r1, #1604	@ 0x644
 80051e4:	483e      	ldr	r0, [pc, #248]	@ (80052e0 <HAL_SPI_Transmit_IT+0x120>)
 80051e6:	f7fc f98f 	bl	8001508 <assert_failed>


  if ((pData == NULL) || (Size == 0U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_SPI_Transmit_IT+0x36>
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_SPI_Transmit_IT+0x3a>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06d      	b.n	80052d6 <HAL_SPI_Transmit_IT+0x116>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	d001      	beq.n	800520a <HAL_SPI_Transmit_IT+0x4a>
  {
    return HAL_BUSY;
 8005206:	2302      	movs	r3, #2
 8005208:	e065      	b.n	80052d6 <HAL_SPI_Transmit_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_SPI_Transmit_IT+0x58>
 8005214:	2302      	movs	r3, #2
 8005216:	e05e      	b.n	80052d6 <HAL_SPI_Transmit_IT+0x116>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2203      	movs	r2, #3
 8005224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	88fa      	ldrh	r2, [r7, #6]
 800523e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005264:	d903      	bls.n	800526e <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <HAL_SPI_Transmit_IT+0x124>)
 800526a:	651a      	str	r2, [r3, #80]	@ 0x50
 800526c:	e002      	b.n	8005274 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a1d      	ldr	r2, [pc, #116]	@ (80052e8 <HAL_SPI_Transmit_IT+0x128>)
 8005272:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527c:	d10f      	bne.n	800529e <HAL_SPI_Transmit_IT+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800528c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800529c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d007      	beq.n	80052bc <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80052d2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	080088fc 	.word	0x080088fc
 80052e4:	08005cf9 	.word	0x08005cf9
 80052e8:	08005cb3 	.word	0x08005cb3

080052ec <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <HAL_SPI_Receive_DMA+0x20>
 8005302:	f240 71e2 	movw	r1, #2018	@ 0x7e2
 8005306:	488f      	ldr	r0, [pc, #572]	@ (8005544 <HAL_SPI_Receive_DMA+0x258>)
 8005308:	f7fc f8fe 	bl	8001508 <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d001      	beq.n	800531c <HAL_SPI_Receive_DMA+0x30>
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
 800531a:	e10e      	b.n	800553a <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d119      	bne.n	8005358 <HAL_SPI_Receive_DMA+0x6c>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800532c:	d114      	bne.n	8005358 <HAL_SPI_Receive_DMA+0x6c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2204      	movs	r2, #4
 8005332:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <HAL_SPI_Receive_DMA+0x5c>
 800533e:	f240 71ee 	movw	r1, #2030	@ 0x7ee
 8005342:	4880      	ldr	r0, [pc, #512]	@ (8005544 <HAL_SPI_Receive_DMA+0x258>)
 8005344:	f7fc f8e0 	bl	8001508 <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f900 	bl	8005554 <HAL_SPI_TransmitReceive_DMA>
 8005354:	4603      	mov	r3, r0
 8005356:	e0f0      	b.n	800553a <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_SPI_Receive_DMA+0x78>
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_SPI_Receive_DMA+0x7c>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0e8      	b.n	800553a <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_SPI_Receive_DMA+0x8a>
 8005372:	2302      	movs	r3, #2
 8005374:	e0e1      	b.n	800553a <HAL_SPI_Receive_DMA+0x24e>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2204      	movs	r2, #4
 8005382:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	88fa      	ldrh	r2, [r7, #6]
 800539e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c2:	d10f      	bne.n	80053e4 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053f2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053fc:	d908      	bls.n	8005410 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	e042      	b.n	8005496 <HAL_SPI_Receive_DMA+0x1aa>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800541e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542a:	d134      	bne.n	8005496 <HAL_SPI_Receive_DMA+0x1aa>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800543a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005442:	b29b      	uxth	r3, r3
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d111      	bne.n	8005470 <HAL_SPI_Receive_DMA+0x184>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800545a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005462:	b29b      	uxth	r3, r3
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800546e:	e012      	b.n	8005496 <HAL_SPI_Receive_DMA+0x1aa>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800547e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005486:	b29b      	uxth	r3, r3
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	3301      	adds	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549a:	4a2b      	ldr	r2, [pc, #172]	@ (8005548 <HAL_SPI_Receive_DMA+0x25c>)
 800549c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a2:	4a2a      	ldr	r2, [pc, #168]	@ (800554c <HAL_SPI_Receive_DMA+0x260>)
 80054a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054aa:	4a29      	ldr	r2, [pc, #164]	@ (8005550 <HAL_SPI_Receive_DMA+0x264>)
 80054ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b2:	2200      	movs	r2, #0
 80054b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	4619      	mov	r1, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80054d0:	f7fd f884 	bl	80025dc <HAL_DMA_Start_IT>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_SPI_Receive_DMA+0x206>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054de:	f043 0210 	orr.w	r2, r3, #16
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e023      	b.n	800553a <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fc:	2b40      	cmp	r3, #64	@ 0x40
 80054fe:	d007      	beq.n	8005510 <HAL_SPI_Receive_DMA+0x224>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800550e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0220 	orr.w	r2, r2, #32
 8005526:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	080088fc 	.word	0x080088fc
 8005548:	08005c11 	.word	0x08005c11
 800554c:	08005ad9 	.word	0x08005ad9
 8005550:	08005c49 	.word	0x08005c49

08005554 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <HAL_SPI_TransmitReceive_DMA+0x20>
 800556a:	f640 0172 	movw	r1, #2162	@ 0x872
 800556e:	487f      	ldr	r0, [pc, #508]	@ (800576c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8005570:	f7fb ffca 	bl	8001508 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005578:	2b00      	cmp	r3, #0
 800557a:	d104      	bne.n	8005586 <HAL_SPI_TransmitReceive_DMA+0x32>
 800557c:	f640 0173 	movw	r1, #2163	@ 0x873
 8005580:	487a      	ldr	r0, [pc, #488]	@ (800576c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8005582:	f7fb ffc1 	bl	8001508 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <HAL_SPI_TransmitReceive_DMA+0x44>
 800558e:	f640 0176 	movw	r1, #2166	@ 0x876
 8005592:	4876      	ldr	r0, [pc, #472]	@ (800576c <HAL_SPI_TransmitReceive_DMA+0x218>)
 8005594:	f7fb ffb8 	bl	8001508 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800559e:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d00c      	beq.n	80055c6 <HAL_SPI_TransmitReceive_DMA+0x72>
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055b2:	d106      	bne.n	80055c2 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <HAL_SPI_TransmitReceive_DMA+0x6e>
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d001      	beq.n	80055c6 <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
 80055c4:	e15f      	b.n	8005886 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e154      	b.n	8005886 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_SPI_TransmitReceive_DMA+0x96>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e14d      	b.n	8005886 <HAL_SPI_TransmitReceive_DMA+0x332>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d003      	beq.n	8005606 <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2205      	movs	r2, #5
 8005602:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	887a      	ldrh	r2, [r7, #2]
 8005616:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	887a      	ldrh	r2, [r7, #2]
 800561c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800564e:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005658:	d908      	bls.n	800566c <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	e06f      	b.n	800574c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800567a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005686:	d126      	bne.n	80056d6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10f      	bne.n	80056b4 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056a2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056b2:	e010      	b.n	80056d6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056c2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3301      	adds	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e0:	d134      	bne.n	800574c <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056f0:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d111      	bne.n	8005726 <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005710:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005718:	b29b      	uxth	r3, r3
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005724:	e012      	b.n	800574c <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005734:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800573c:	b29b      	uxth	r3, r3
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	b29b      	uxth	r3, r3
 8005742:	3301      	adds	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b04      	cmp	r3, #4
 8005756:	d10f      	bne.n	8005778 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575c:	4a04      	ldr	r2, [pc, #16]	@ (8005770 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800575e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005764:	4a03      	ldr	r2, [pc, #12]	@ (8005774 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8005766:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005768:	e00e      	b.n	8005788 <HAL_SPI_TransmitReceive_DMA+0x234>
 800576a:	bf00      	nop
 800576c:	080088fc 	.word	0x080088fc
 8005770:	08005c11 	.word	0x08005c11
 8005774:	08005ad9 	.word	0x08005ad9
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577c:	4a44      	ldr	r2, [pc, #272]	@ (8005890 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005784:	4a43      	ldr	r2, [pc, #268]	@ (8005894 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8005786:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578c:	4a42      	ldr	r2, [pc, #264]	@ (8005898 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800578e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005794:	2200      	movs	r2, #0
 8005796:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	4619      	mov	r1, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80057b2:	f7fc ff13 	bl	80025dc <HAL_DMA_Start_IT>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c0:	f043 0210 	orr.w	r2, r3, #16
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e058      	b.n	8005886 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f0:	2200      	movs	r2, #0
 80057f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f8:	2200      	movs	r2, #0
 80057fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005800:	2200      	movs	r2, #0
 8005802:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	4619      	mov	r1, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800581a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800581c:	f7fc fede 	bl	80025dc <HAL_DMA_Start_IT>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800582a:	f043 0210 	orr.w	r2, r3, #16
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e023      	b.n	8005886 <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d007      	beq.n	800585c <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800585a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0220 	orr.w	r2, r2, #32
 8005872:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0202 	orr.w	r2, r2, #2
 8005882:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	08005c2d 	.word	0x08005c2d
 8005894:	08005b81 	.word	0x08005b81
 8005898:	08005c49 	.word	0x08005c49

0800589c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10f      	bne.n	80058e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	099b      	lsrs	r3, r3, #6
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
    return;
 80058de:	e0d7      	b.n	8005a90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_SPI_IRQHandler+0x66>
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	09db      	lsrs	r3, r3, #7
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d004      	beq.n	8005902 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    return;
 8005900:	e0c6      	b.n	8005a90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10c      	bne.n	8005928 <HAL_SPI_IRQHandler+0x8c>
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	099b      	lsrs	r3, r3, #6
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80b4 	beq.w	8005a90 <HAL_SPI_IRQHandler+0x1f4>
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80ad 	beq.w	8005a90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	099b      	lsrs	r3, r3, #6
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d023      	beq.n	800598a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b03      	cmp	r3, #3
 800594c:	d011      	beq.n	8005972 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005952:	f043 0204 	orr.w	r2, r3, #4
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	e00b      	b.n	800598a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	693b      	ldr	r3, [r7, #16]
        return;
 8005988:	e082      	b.n	8005a90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d014      	beq.n	80059c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599a:	f043 0201 	orr.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00c      	beq.n	80059e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d0:	f043 0208 	orr.w	r2, r3, #8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80059d8:	2300      	movs	r3, #0
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d04f      	beq.n	8005a8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <HAL_SPI_IRQHandler+0x17e>
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d034      	beq.n	8005a84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0203 	bic.w	r2, r2, #3
 8005a28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d011      	beq.n	8005a56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a36:	4a18      	ldr	r2, [pc, #96]	@ (8005a98 <HAL_SPI_IRQHandler+0x1fc>)
 8005a38:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fc fe3a 	bl	80026b8 <HAL_DMA_Abort_IT>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a62:	4a0d      	ldr	r2, [pc, #52]	@ (8005a98 <HAL_SPI_IRQHandler+0x1fc>)
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fc fe24 	bl	80026b8 <HAL_DMA_Abort_IT>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005a82:	e003      	b.n	8005a8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f81d 	bl	8005ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a8a:	e000      	b.n	8005a8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005a8c:	bf00      	nop
    return;
 8005a8e:	bf00      	nop
  }
}
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	08005c89 	.word	0x08005c89

08005a9c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae6:	f7fc fa75 	bl	8001fd4 <HAL_GetTick>
 8005aea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d03c      	beq.n	8005b74 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0220 	bic.w	r2, r2, #32
 8005b08:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10d      	bne.n	8005b2e <SPI_DMAReceiveCplt+0x56>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b1a:	d108      	bne.n	8005b2e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0203 	bic.w	r2, r2, #3
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	e007      	b.n	8005b3e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	2164      	movs	r1, #100	@ 0x64
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fa18 	bl	8005f78 <SPI_EndRxTransaction>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff ffa9 	bl	8005ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005b72:	e002      	b.n	8005b7a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7fb fb43 	bl	8001200 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b8e:	f7fc fa21 	bl	8001fd4 <HAL_GetTick>
 8005b92:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d030      	beq.n	8005c04 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0220 	bic.w	r2, r2, #32
 8005bb0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	2164      	movs	r1, #100	@ 0x64
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fa36 	bl	8006028 <SPI_EndRxTxTransaction>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0203 	bic.w	r2, r2, #3
 8005bdc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff ff61 	bl	8005ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c02:	e002      	b.n	8005c0a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff ff49 	bl	8005a9c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7fb fad2 	bl	80011c8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f7ff ff38 	bl	8005ab0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0203 	bic.w	r2, r2, #3
 8005c64:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c6a:	f043 0210 	orr.w	r2, r3, #16
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff ff22 	bl	8005ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff ff0d 	bl	8005ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005caa:	bf00      	nop
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	7812      	ldrb	r2, [r2, #0]
 8005cc6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f9e2 	bl	80060b4 <SPI_CloseTx_ISR>
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d10:	1c9a      	adds	r2, r3, #2
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f9c0 	bl	80060b4 <SPI_CloseTx_ISR>
  }
}
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d4c:	f7fc f942 	bl	8001fd4 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	4413      	add	r3, r2
 8005d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d5c:	f7fc f93a 	bl	8001fd4 <HAL_GetTick>
 8005d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d62:	4b39      	ldr	r3, [pc, #228]	@ (8005e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	015b      	lsls	r3, r3, #5
 8005d68:	0d1b      	lsrs	r3, r3, #20
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	fb02 f303 	mul.w	r3, r2, r3
 8005d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d72:	e054      	b.n	8005e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7a:	d050      	beq.n	8005e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d7c:	f7fc f92a 	bl	8001fd4 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d902      	bls.n	8005d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d13d      	bne.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005daa:	d111      	bne.n	8005dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db4:	d004      	beq.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dbe:	d107      	bne.n	8005dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd8:	d10f      	bne.n	8005dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e017      	b.n	8005e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4013      	ands	r3, r2
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2301      	moveq	r3, #1
 8005e30:	2300      	movne	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d19b      	bne.n	8005d74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3720      	adds	r7, #32
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000004 	.word	0x20000004

08005e4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	@ 0x28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e5e:	f7fc f8b9 	bl	8001fd4 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005e6e:	f7fc f8b1 	bl	8001fd4 <HAL_GetTick>
 8005e72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	00da      	lsls	r2, r3, #3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	0d1b      	lsrs	r3, r3, #20
 8005e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e94:	e060      	b.n	8005f58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e9c:	d107      	bne.n	8005eae <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d050      	beq.n	8005f58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eb6:	f7fc f88d 	bl	8001fd4 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d902      	bls.n	8005ecc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d13d      	bne.n	8005f48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005eda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ee4:	d111      	bne.n	8005f0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eee:	d004      	beq.n	8005efa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef8:	d107      	bne.n	8005f0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f12:	d10f      	bne.n	8005f34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e010      	b.n	8005f6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d196      	bne.n	8005e96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3728      	adds	r7, #40	@ 0x28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000004 	.word	0x20000004

08005f78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f8c:	d111      	bne.n	8005fb2 <SPI_EndRxTransaction+0x3a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f96:	d004      	beq.n	8005fa2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fa0:	d107      	bne.n	8005fb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fb0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2180      	movs	r1, #128	@ 0x80
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff febd 	bl	8005d3c <SPI_WaitFlagStateUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e023      	b.n	8006020 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fe0:	d11d      	bne.n	800601e <SPI_EndRxTransaction+0xa6>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fea:	d004      	beq.n	8005ff6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff4:	d113      	bne.n	800601e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f7ff ff22 	bl	8005e4c <SPI_WaitFifoStateUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e000      	b.n	8006020 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff ff03 	bl	8005e4c <SPI_WaitFifoStateUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e027      	b.n	80060ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	2180      	movs	r1, #128	@ 0x80
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff fe68 	bl	8005d3c <SPI_WaitFlagStateUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006076:	f043 0220 	orr.w	r2, r3, #32
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e014      	b.n	80060ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2200      	movs	r2, #0
 800608a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff fedc 	bl	8005e4c <SPI_WaitFifoStateUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e000      	b.n	80060ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060bc:	f7fb ff8a 	bl	8001fd4 <HAL_GetTick>
 80060c0:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060d0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	2164      	movs	r1, #100	@ 0x64
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ffa6 	bl	8006028 <SPI_EndRxTxTransaction>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff fcd1 	bl	8005ac4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006122:	e002      	b.n	800612a <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fb f887 	bl	8001238 <HAL_SPI_TxCpltCallback>
}
 800612a:	bf00      	nop
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e0e6      	b.n	8006314 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a74      	ldr	r2, [pc, #464]	@ (800631c <HAL_TIM_Base_Init+0x1e8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d036      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006158:	d031      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a70      	ldr	r2, [pc, #448]	@ (8006320 <HAL_TIM_Base_Init+0x1ec>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d02c      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a6e      	ldr	r2, [pc, #440]	@ (8006324 <HAL_TIM_Base_Init+0x1f0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d027      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6d      	ldr	r2, [pc, #436]	@ (8006328 <HAL_TIM_Base_Init+0x1f4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d022      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a6b      	ldr	r2, [pc, #428]	@ (800632c <HAL_TIM_Base_Init+0x1f8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01d      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6a      	ldr	r2, [pc, #424]	@ (8006330 <HAL_TIM_Base_Init+0x1fc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a68      	ldr	r2, [pc, #416]	@ (8006334 <HAL_TIM_Base_Init+0x200>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a67      	ldr	r2, [pc, #412]	@ (8006338 <HAL_TIM_Base_Init+0x204>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a65      	ldr	r2, [pc, #404]	@ (800633c <HAL_TIM_Base_Init+0x208>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a64      	ldr	r2, [pc, #400]	@ (8006340 <HAL_TIM_Base_Init+0x20c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIM_Base_Init+0x8a>
 80061b4:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80061b8:	4862      	ldr	r0, [pc, #392]	@ (8006344 <HAL_TIM_Base_Init+0x210>)
 80061ba:	f7fb f9a5 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d014      	beq.n	80061f0 <HAL_TIM_Base_Init+0xbc>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b10      	cmp	r3, #16
 80061cc:	d010      	beq.n	80061f0 <HAL_TIM_Base_Init+0xbc>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d00c      	beq.n	80061f0 <HAL_TIM_Base_Init+0xbc>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b40      	cmp	r3, #64	@ 0x40
 80061dc:	d008      	beq.n	80061f0 <HAL_TIM_Base_Init+0xbc>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b60      	cmp	r3, #96	@ 0x60
 80061e4:	d004      	beq.n	80061f0 <HAL_TIM_Base_Init+0xbc>
 80061e6:	f240 1117 	movw	r1, #279	@ 0x117
 80061ea:	4856      	ldr	r0, [pc, #344]	@ (8006344 <HAL_TIM_Base_Init+0x210>)
 80061ec:	f7fb f98c 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00e      	beq.n	8006216 <HAL_TIM_Base_Init+0xe2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006200:	d009      	beq.n	8006216 <HAL_TIM_Base_Init+0xe2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800620a:	d004      	beq.n	8006216 <HAL_TIM_Base_Init+0xe2>
 800620c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006210:	484c      	ldr	r0, [pc, #304]	@ (8006344 <HAL_TIM_Base_Init+0x210>)
 8006212:	f7fb f979 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800621e:	d004      	beq.n	800622a <HAL_TIM_Base_Init+0xf6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a40      	ldr	r2, [pc, #256]	@ (8006328 <HAL_TIM_Base_Init+0x1f4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d107      	bne.n	800623a <HAL_TIM_Base_Init+0x106>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	bf14      	ite	ne
 8006232:	2301      	movne	r3, #1
 8006234:	2300      	moveq	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	e00e      	b.n	8006258 <HAL_TIM_Base_Init+0x124>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d006      	beq.n	8006250 <HAL_TIM_Base_Init+0x11c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624a:	d201      	bcs.n	8006250 <HAL_TIM_Base_Init+0x11c>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_TIM_Base_Init+0x11e>
 8006250:	2300      	movs	r3, #0
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <HAL_TIM_Base_Init+0x132>
 800625c:	f240 1119 	movw	r1, #281	@ 0x119
 8006260:	4838      	ldr	r0, [pc, #224]	@ (8006344 <HAL_TIM_Base_Init+0x210>)
 8006262:	f7fb f951 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <HAL_TIM_Base_Init+0x14c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	2b80      	cmp	r3, #128	@ 0x80
 8006274:	d004      	beq.n	8006280 <HAL_TIM_Base_Init+0x14c>
 8006276:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800627a:	4832      	ldr	r0, [pc, #200]	@ (8006344 <HAL_TIM_Base_Init+0x210>)
 800627c:	f7fb f944 	bl	8001508 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fb fd3b 	bl	8001d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f000 fb47 	bl	8006940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40000c00 	.word	0x40000c00
 800632c:	40001000 	.word	0x40001000
 8006330:	40001400 	.word	0x40001400
 8006334:	40013400 	.word	0x40013400
 8006338:	40014000 	.word	0x40014000
 800633c:	40014400 	.word	0x40014400
 8006340:	40014800 	.word	0x40014800
 8006344:	08008934 	.word	0x08008934

08006348 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e1b0      	b.n	80066be <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a7f      	ldr	r2, [pc, #508]	@ (8006560 <HAL_TIM_Encoder_Init+0x218>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01d      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0x5a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800636e:	d018      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0x5a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a7b      	ldr	r2, [pc, #492]	@ (8006564 <HAL_TIM_Encoder_Init+0x21c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0x5a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a7a      	ldr	r2, [pc, #488]	@ (8006568 <HAL_TIM_Encoder_Init+0x220>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0x5a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a78      	ldr	r2, [pc, #480]	@ (800656c <HAL_TIM_Encoder_Init+0x224>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0x5a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a77      	ldr	r2, [pc, #476]	@ (8006570 <HAL_TIM_Encoder_Init+0x228>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_TIM_Encoder_Init+0x5a>
 8006398:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800639c:	4875      	ldr	r0, [pc, #468]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 800639e:	f7fb f8b3 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d014      	beq.n	80063d4 <HAL_TIM_Encoder_Init+0x8c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d010      	beq.n	80063d4 <HAL_TIM_Encoder_Init+0x8c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d00c      	beq.n	80063d4 <HAL_TIM_Encoder_Init+0x8c>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b40      	cmp	r3, #64	@ 0x40
 80063c0:	d008      	beq.n	80063d4 <HAL_TIM_Encoder_Init+0x8c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b60      	cmp	r3, #96	@ 0x60
 80063c8:	d004      	beq.n	80063d4 <HAL_TIM_Encoder_Init+0x8c>
 80063ca:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80063ce:	4869      	ldr	r0, [pc, #420]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 80063d0:	f7fb f89a 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00e      	beq.n	80063fa <HAL_TIM_Encoder_Init+0xb2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e4:	d009      	beq.n	80063fa <HAL_TIM_Encoder_Init+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ee:	d004      	beq.n	80063fa <HAL_TIM_Encoder_Init+0xb2>
 80063f0:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80063f4:	485f      	ldr	r0, [pc, #380]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 80063f6:	f7fb f887 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <HAL_TIM_Encoder_Init+0xcc>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d004      	beq.n	8006414 <HAL_TIM_Encoder_Init+0xcc>
 800640a:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800640e:	4859      	ldr	r0, [pc, #356]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 8006410:	f7fb f87a 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d00c      	beq.n	8006436 <HAL_TIM_Encoder_Init+0xee>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d008      	beq.n	8006436 <HAL_TIM_Encoder_Init+0xee>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b03      	cmp	r3, #3
 800642a:	d004      	beq.n	8006436 <HAL_TIM_Encoder_Init+0xee>
 800642c:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8006430:	4850      	ldr	r0, [pc, #320]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 8006432:	f7fb f869 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d00c      	beq.n	8006458 <HAL_TIM_Encoder_Init+0x110>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d008      	beq.n	8006458 <HAL_TIM_Encoder_Init+0x110>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b03      	cmp	r3, #3
 800644c:	d004      	beq.n	8006458 <HAL_TIM_Encoder_Init+0x110>
 800644e:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8006452:	4848      	ldr	r0, [pc, #288]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 8006454:	f7fb f858 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d00c      	beq.n	800647a <HAL_TIM_Encoder_Init+0x132>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d008      	beq.n	800647a <HAL_TIM_Encoder_Init+0x132>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d004      	beq.n	800647a <HAL_TIM_Encoder_Init+0x132>
 8006470:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8006474:	483f      	ldr	r0, [pc, #252]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 8006476:	f7fb f847 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d008      	beq.n	8006494 <HAL_TIM_Encoder_Init+0x14c>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d004      	beq.n	8006494 <HAL_TIM_Encoder_Init+0x14c>
 800648a:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800648e:	4839      	ldr	r0, [pc, #228]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 8006490:	f7fb f83a 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_TIM_Encoder_Init+0x166>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d004      	beq.n	80064ae <HAL_TIM_Encoder_Init+0x166>
 80064a4:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 80064a8:	4832      	ldr	r0, [pc, #200]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 80064aa:	f7fb f82d 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d010      	beq.n	80064d8 <HAL_TIM_Encoder_Init+0x190>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d00c      	beq.n	80064d8 <HAL_TIM_Encoder_Init+0x190>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d008      	beq.n	80064d8 <HAL_TIM_Encoder_Init+0x190>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b0c      	cmp	r3, #12
 80064cc:	d004      	beq.n	80064d8 <HAL_TIM_Encoder_Init+0x190>
 80064ce:	f640 31ec 	movw	r1, #3052	@ 0xbec
 80064d2:	4828      	ldr	r0, [pc, #160]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 80064d4:	f7fb f818 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d010      	beq.n	8006502 <HAL_TIM_Encoder_Init+0x1ba>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d00c      	beq.n	8006502 <HAL_TIM_Encoder_Init+0x1ba>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d008      	beq.n	8006502 <HAL_TIM_Encoder_Init+0x1ba>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	2b0c      	cmp	r3, #12
 80064f6:	d004      	beq.n	8006502 <HAL_TIM_Encoder_Init+0x1ba>
 80064f8:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80064fc:	481d      	ldr	r0, [pc, #116]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 80064fe:	f7fb f803 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b0f      	cmp	r3, #15
 8006508:	d904      	bls.n	8006514 <HAL_TIM_Encoder_Init+0x1cc>
 800650a:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800650e:	4819      	ldr	r0, [pc, #100]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 8006510:	f7fa fffa 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	2b0f      	cmp	r3, #15
 800651a:	d904      	bls.n	8006526 <HAL_TIM_Encoder_Init+0x1de>
 800651c:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8006520:	4814      	ldr	r0, [pc, #80]	@ (8006574 <HAL_TIM_Encoder_Init+0x22c>)
 8006522:	f7fa fff1 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652e:	d004      	beq.n	800653a <HAL_TIM_Encoder_Init+0x1f2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a0d      	ldr	r2, [pc, #52]	@ (800656c <HAL_TIM_Encoder_Init+0x224>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d107      	bne.n	800654a <HAL_TIM_Encoder_Init+0x202>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf14      	ite	ne
 8006542:	2301      	movne	r3, #1
 8006544:	2300      	moveq	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	e01a      	b.n	8006580 <HAL_TIM_Encoder_Init+0x238>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d012      	beq.n	8006578 <HAL_TIM_Encoder_Init+0x230>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655a:	d20d      	bcs.n	8006578 <HAL_TIM_Encoder_Init+0x230>
 800655c:	2301      	movs	r3, #1
 800655e:	e00c      	b.n	800657a <HAL_TIM_Encoder_Init+0x232>
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40000400 	.word	0x40000400
 8006568:	40000800 	.word	0x40000800
 800656c:	40000c00 	.word	0x40000c00
 8006570:	40013400 	.word	0x40013400
 8006574:	08008934 	.word	0x08008934
 8006578:	2300      	movs	r3, #0
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_TIM_Encoder_Init+0x246>
 8006584:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8006588:	484f      	ldr	r0, [pc, #316]	@ (80066c8 <HAL_TIM_Encoder_Init+0x380>)
 800658a:	f7fa ffbd 	bl	8001508 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fb faf2 	bl	8001b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f000 f9b6 	bl	8006940 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065fc:	f023 0303 	bic.w	r3, r3, #3
 8006600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	4313      	orrs	r3, r2
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800661a:	f023 030c 	bic.w	r3, r3, #12
 800661e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800662a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	4313      	orrs	r3, r2
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	011a      	lsls	r2, r3, #4
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	031b      	lsls	r3, r3, #12
 800664a:	4313      	orrs	r3, r2
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006658:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006660:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	4313      	orrs	r3, r2
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	08008934 	.word	0x08008934

080066cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d020      	beq.n	8006730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01b      	beq.n	8006730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0202 	mvn.w	r2, #2
 8006700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8f3 	bl	8006902 <HAL_TIM_IC_CaptureCallback>
 800671c:	e005      	b.n	800672a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8e5 	bl	80068ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f8f6 	bl	8006916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d020      	beq.n	800677c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01b      	beq.n	800677c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f06f 0204 	mvn.w	r2, #4
 800674c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f8cd 	bl	8006902 <HAL_TIM_IC_CaptureCallback>
 8006768:	e005      	b.n	8006776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f8bf 	bl	80068ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f8d0 	bl	8006916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d020      	beq.n	80067c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01b      	beq.n	80067c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0208 	mvn.w	r2, #8
 8006798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2204      	movs	r2, #4
 800679e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f8a7 	bl	8006902 <HAL_TIM_IC_CaptureCallback>
 80067b4:	e005      	b.n	80067c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f899 	bl	80068ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8aa 	bl	8006916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0310 	and.w	r3, r3, #16
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d020      	beq.n	8006814 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01b      	beq.n	8006814 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0210 	mvn.w	r2, #16
 80067e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2208      	movs	r2, #8
 80067ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f881 	bl	8006902 <HAL_TIM_IC_CaptureCallback>
 8006800:	e005      	b.n	800680e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f873 	bl	80068ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f884 	bl	8006916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00c      	beq.n	8006838 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0201 	mvn.w	r2, #1
 8006830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f851 	bl	80068da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00c      	beq.n	8006866 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800685e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fa73 	bl	8006d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00c      	beq.n	800688a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fa6b 	bl	8006d60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00c      	beq.n	80068ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f83e 	bl	800692a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00c      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f06f 0220 	mvn.w	r2, #32
 80068ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fa33 	bl	8006d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
	...

08006940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a46      	ldr	r2, [pc, #280]	@ (8006a6c <TIM_Base_SetConfig+0x12c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d013      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800695e:	d00f      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a43      	ldr	r2, [pc, #268]	@ (8006a70 <TIM_Base_SetConfig+0x130>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00b      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a42      	ldr	r2, [pc, #264]	@ (8006a74 <TIM_Base_SetConfig+0x134>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a41      	ldr	r2, [pc, #260]	@ (8006a78 <TIM_Base_SetConfig+0x138>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a40      	ldr	r2, [pc, #256]	@ (8006a7c <TIM_Base_SetConfig+0x13c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d108      	bne.n	8006992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a35      	ldr	r2, [pc, #212]	@ (8006a6c <TIM_Base_SetConfig+0x12c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d01f      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a0:	d01b      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a32      	ldr	r2, [pc, #200]	@ (8006a70 <TIM_Base_SetConfig+0x130>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d017      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a31      	ldr	r2, [pc, #196]	@ (8006a74 <TIM_Base_SetConfig+0x134>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a30      	ldr	r2, [pc, #192]	@ (8006a78 <TIM_Base_SetConfig+0x138>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00f      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2f      	ldr	r2, [pc, #188]	@ (8006a7c <TIM_Base_SetConfig+0x13c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00b      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006a80 <TIM_Base_SetConfig+0x140>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d007      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006a84 <TIM_Base_SetConfig+0x144>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_Base_SetConfig+0x9a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006a88 <TIM_Base_SetConfig+0x148>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d108      	bne.n	80069ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a16      	ldr	r2, [pc, #88]	@ (8006a6c <TIM_Base_SetConfig+0x12c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00f      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a18      	ldr	r2, [pc, #96]	@ (8006a7c <TIM_Base_SetConfig+0x13c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00b      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a17      	ldr	r2, [pc, #92]	@ (8006a80 <TIM_Base_SetConfig+0x140>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d007      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a16      	ldr	r2, [pc, #88]	@ (8006a84 <TIM_Base_SetConfig+0x144>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_Base_SetConfig+0xf8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a15      	ldr	r2, [pc, #84]	@ (8006a88 <TIM_Base_SetConfig+0x148>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d103      	bne.n	8006a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d105      	bne.n	8006a5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f023 0201 	bic.w	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	611a      	str	r2, [r3, #16]
  }
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40000400 	.word	0x40000400
 8006a74:	40000800 	.word	0x40000800
 8006a78:	40000c00 	.word	0x40000c00
 8006a7c:	40013400 	.word	0x40013400
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40014400 	.word	0x40014400
 8006a88:	40014800 	.word	0x40014800

08006a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a34      	ldr	r2, [pc, #208]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d02c      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa8:	d027      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a30      	ldr	r2, [pc, #192]	@ (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d022      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d01d      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d018      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a2b      	ldr	r2, [pc, #172]	@ (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00e      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a28      	ldr	r2, [pc, #160]	@ (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d009      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a27      	ldr	r2, [pc, #156]	@ (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d004      	beq.n	8006afa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006af0:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8006af4:	4825      	ldr	r0, [pc, #148]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006af6:	f7fa fd07 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d020      	beq.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b10      	cmp	r3, #16
 8006b08:	d01c      	beq.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d018      	beq.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b30      	cmp	r3, #48	@ 0x30
 8006b18:	d014      	beq.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b40      	cmp	r3, #64	@ 0x40
 8006b20:	d010      	beq.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b50      	cmp	r3, #80	@ 0x50
 8006b28:	d00c      	beq.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b60      	cmp	r3, #96	@ 0x60
 8006b30:	d008      	beq.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b70      	cmp	r3, #112	@ 0x70
 8006b38:	d004      	beq.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b3a:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8006b3e:	4813      	ldr	r0, [pc, #76]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b40:	f7fa fce2 	bl	8001508 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2b80      	cmp	r3, #128	@ 0x80
 8006b4a:	d008      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006b54:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8006b58:	480c      	ldr	r0, [pc, #48]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b5a:	f7fa fcd5 	bl	8001508 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d113      	bne.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e0d3      	b.n	8006d14 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00
 8006b7c:	40001000 	.word	0x40001000
 8006b80:	40001400 	.word	0x40001400
 8006b84:	40013400 	.word	0x40013400
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	0800896c 	.word	0x0800896c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a59      	ldr	r2, [pc, #356]	@ (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a58      	ldr	r2, [pc, #352]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d161      	bne.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d054      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bd4:	d04f      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bde:	d04a      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006be8:	d045      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bf2:	d040      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006bfc:	d03b      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c06:	d036      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c10:	d031      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8006c1a:	d02c      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c24:	d027      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8006c2e:	d022      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006c38:	d01d      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8006c42:	d018      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006c4c:	d013      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8006c56:	d00e      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8006c60:	d009      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8006c6a:	d004      	beq.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006c6c:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8006c70:	482c      	ldr	r0, [pc, #176]	@ (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8006c72:	f7fa fc49 	bl	8001508 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01d      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb4:	d018      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1b      	ldr	r2, [pc, #108]	@ (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a19      	ldr	r2, [pc, #100]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a18      	ldr	r2, [pc, #96]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a11      	ldr	r2, [pc, #68]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a14      	ldr	r2, [pc, #80]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d10c      	bne.n	8006d02 <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40012c00 	.word	0x40012c00
 8006d20:	40013400 	.word	0x40013400
 8006d24:	0800896c 	.word	0x0800896c
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800
 8006d30:	40000c00 	.word	0x40000c00
 8006d34:	40014000 	.word	0x40014000

08006d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e08b      	b.n	8006e9e <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d023      	beq.n	8006dd6 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a45      	ldr	r2, [pc, #276]	@ (8006ea8 <HAL_UART_Init+0x134>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d041      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a43      	ldr	r2, [pc, #268]	@ (8006eac <HAL_UART_Init+0x138>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d03c      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a42      	ldr	r2, [pc, #264]	@ (8006eb0 <HAL_UART_Init+0x13c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d037      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a40      	ldr	r2, [pc, #256]	@ (8006eb4 <HAL_UART_Init+0x140>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d032      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3f      	ldr	r2, [pc, #252]	@ (8006eb8 <HAL_UART_Init+0x144>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d02d      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8006ebc <HAL_UART_Init+0x148>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d028      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006dca:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8006dce:	483c      	ldr	r0, [pc, #240]	@ (8006ec0 <HAL_UART_Init+0x14c>)
 8006dd0:	f7fa fb9a 	bl	8001508 <assert_failed>
 8006dd4:	e022      	b.n	8006e1c <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a33      	ldr	r2, [pc, #204]	@ (8006ea8 <HAL_UART_Init+0x134>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d01d      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a31      	ldr	r2, [pc, #196]	@ (8006eac <HAL_UART_Init+0x138>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d018      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a30      	ldr	r2, [pc, #192]	@ (8006eb0 <HAL_UART_Init+0x13c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2e      	ldr	r2, [pc, #184]	@ (8006eb4 <HAL_UART_Init+0x140>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00e      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb8 <HAL_UART_Init+0x144>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8006ebc <HAL_UART_Init+0x148>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_UART_Init+0xa8>
 8006e12:	f240 1157 	movw	r1, #343	@ 0x157
 8006e16:	482a      	ldr	r0, [pc, #168]	@ (8006ec0 <HAL_UART_Init+0x14c>)
 8006e18:	f7fa fb76 	bl	8001508 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d106      	bne.n	8006e32 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7fa ffe1 	bl	8001df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2224      	movs	r2, #36	@ 0x24
 8006e36:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fbf3 	bl	800763c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f892 	bl	8006f80 <UART_SetConfig>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e01b      	b.n	8006e9e <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0201 	orr.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fd30 	bl	80078fc <UART_CheckIdleState>
 8006e9c:	4603      	mov	r3, r0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40013800 	.word	0x40013800
 8006eac:	40004400 	.word	0x40004400
 8006eb0:	40004800 	.word	0x40004800
 8006eb4:	40004c00 	.word	0x40004c00
 8006eb8:	40005000 	.word	0x40005000
 8006ebc:	40008000 	.word	0x40008000
 8006ec0:	080089a8 	.word	0x080089a8

08006ec4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b08b      	sub	sp, #44	@ 0x2c
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d147      	bne.n	8006f6a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <HAL_UART_Transmit_IT+0x22>
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e040      	b.n	8006f6c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2221      	movs	r2, #33	@ 0x21
 8006f12:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f1c:	d107      	bne.n	8006f2e <HAL_UART_Transmit_IT+0x6a>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d103      	bne.n	8006f2e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4a13      	ldr	r2, [pc, #76]	@ (8006f78 <HAL_UART_Transmit_IT+0xb4>)
 8006f2a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006f2c:	e002      	b.n	8006f34 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a12      	ldr	r2, [pc, #72]	@ (8006f7c <HAL_UART_Transmit_IT+0xb8>)
 8006f32:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	613b      	str	r3, [r7, #16]
   return(result);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	623b      	str	r3, [r7, #32]
 8006f54:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	69f9      	ldr	r1, [r7, #28]
 8006f58:	6a3a      	ldr	r2, [r7, #32]
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e6      	bne.n	8006f34 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e000      	b.n	8006f6c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	372c      	adds	r7, #44	@ 0x2c
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	08007ca5 	.word	0x08007ca5
 8006f7c:	08007bef 	.word	0x08007bef

08006f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f84:	b08a      	sub	sp, #40	@ 0x28
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	4a9e      	ldr	r2, [pc, #632]	@ (8007210 <UART_SetConfig+0x290>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d904      	bls.n	8006fa4 <UART_SetConfig+0x24>
 8006f9a:	f640 4158 	movw	r1, #3160	@ 0xc58
 8006f9e:	489d      	ldr	r0, [pc, #628]	@ (8007214 <UART_SetConfig+0x294>)
 8006fa0:	f7fa fab2 	bl	8001508 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fac:	d00d      	beq.n	8006fca <UART_SetConfig+0x4a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <UART_SetConfig+0x4a>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbe:	d004      	beq.n	8006fca <UART_SetConfig+0x4a>
 8006fc0:	f640 4159 	movw	r1, #3161	@ 0xc59
 8006fc4:	4893      	ldr	r0, [pc, #588]	@ (8007214 <UART_SetConfig+0x294>)
 8006fc6:	f7fa fa9f 	bl	8001508 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a92      	ldr	r2, [pc, #584]	@ (8007218 <UART_SetConfig+0x298>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10e      	bne.n	8006ff2 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d030      	beq.n	800703e <UART_SetConfig+0xbe>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe4:	d02b      	beq.n	800703e <UART_SetConfig+0xbe>
 8006fe6:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8006fea:	488a      	ldr	r0, [pc, #552]	@ (8007214 <UART_SetConfig+0x294>)
 8006fec:	f7fa fa8c 	bl	8001508 <assert_failed>
 8006ff0:	e025      	b.n	800703e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ffa:	d012      	beq.n	8007022 <UART_SetConfig+0xa2>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00e      	beq.n	8007022 <UART_SetConfig+0xa2>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800700c:	d009      	beq.n	8007022 <UART_SetConfig+0xa2>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007016:	d004      	beq.n	8007022 <UART_SetConfig+0xa2>
 8007018:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800701c:	487d      	ldr	r0, [pc, #500]	@ (8007214 <UART_SetConfig+0x294>)
 800701e:	f7fa fa73 	bl	8001508 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <UART_SetConfig+0xbe>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007032:	d004      	beq.n	800703e <UART_SetConfig+0xbe>
 8007034:	f640 4161 	movw	r1, #3169	@ 0xc61
 8007038:	4876      	ldr	r0, [pc, #472]	@ (8007214 <UART_SetConfig+0x294>)
 800703a:	f7fa fa65 	bl	8001508 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00e      	beq.n	8007064 <UART_SetConfig+0xe4>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704e:	d009      	beq.n	8007064 <UART_SetConfig+0xe4>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007058:	d004      	beq.n	8007064 <UART_SetConfig+0xe4>
 800705a:	f640 4164 	movw	r1, #3172	@ 0xc64
 800705e:	486d      	ldr	r0, [pc, #436]	@ (8007214 <UART_SetConfig+0x294>)
 8007060:	f7fa fa52 	bl	8001508 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f023 030c 	bic.w	r3, r3, #12
 800706c:	2b00      	cmp	r3, #0
 800706e:	d103      	bne.n	8007078 <UART_SetConfig+0xf8>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <UART_SetConfig+0x102>
 8007078:	f640 4165 	movw	r1, #3173	@ 0xc65
 800707c:	4865      	ldr	r0, [pc, #404]	@ (8007214 <UART_SetConfig+0x294>)
 800707e:	f7fa fa43 	bl	8001508 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d013      	beq.n	80070b2 <UART_SetConfig+0x132>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007092:	d00e      	beq.n	80070b2 <UART_SetConfig+0x132>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800709c:	d009      	beq.n	80070b2 <UART_SetConfig+0x132>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070a6:	d004      	beq.n	80070b2 <UART_SetConfig+0x132>
 80070a8:	f640 4166 	movw	r1, #3174	@ 0xc66
 80070ac:	4859      	ldr	r0, [pc, #356]	@ (8007214 <UART_SetConfig+0x294>)
 80070ae:	f7fa fa2b 	bl	8001508 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d009      	beq.n	80070ce <UART_SetConfig+0x14e>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c2:	d004      	beq.n	80070ce <UART_SetConfig+0x14e>
 80070c4:	f640 4167 	movw	r1, #3175	@ 0xc67
 80070c8:	4852      	ldr	r0, [pc, #328]	@ (8007214 <UART_SetConfig+0x294>)
 80070ca:	f7fa fa1d 	bl	8001508 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	431a      	orrs	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	4b4b      	ldr	r3, [pc, #300]	@ (800721c <UART_SetConfig+0x29c>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070f6:	430b      	orrs	r3, r1
 80070f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3f      	ldr	r2, [pc, #252]	@ (8007218 <UART_SetConfig+0x298>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007126:	4313      	orrs	r3, r2
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800713a:	430a      	orrs	r2, r1
 800713c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a37      	ldr	r2, [pc, #220]	@ (8007220 <UART_SetConfig+0x2a0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d125      	bne.n	8007194 <UART_SetConfig+0x214>
 8007148:	4b36      	ldr	r3, [pc, #216]	@ (8007224 <UART_SetConfig+0x2a4>)
 800714a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	2b03      	cmp	r3, #3
 8007154:	d81a      	bhi.n	800718c <UART_SetConfig+0x20c>
 8007156:	a201      	add	r2, pc, #4	@ (adr r2, 800715c <UART_SetConfig+0x1dc>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	0800716d 	.word	0x0800716d
 8007160:	0800717d 	.word	0x0800717d
 8007164:	08007175 	.word	0x08007175
 8007168:	08007185 	.word	0x08007185
 800716c:	2301      	movs	r3, #1
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007172:	e114      	b.n	800739e <UART_SetConfig+0x41e>
 8007174:	2302      	movs	r3, #2
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800717a:	e110      	b.n	800739e <UART_SetConfig+0x41e>
 800717c:	2304      	movs	r3, #4
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007182:	e10c      	b.n	800739e <UART_SetConfig+0x41e>
 8007184:	2308      	movs	r3, #8
 8007186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800718a:	e108      	b.n	800739e <UART_SetConfig+0x41e>
 800718c:	2310      	movs	r3, #16
 800718e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007192:	e104      	b.n	800739e <UART_SetConfig+0x41e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a23      	ldr	r2, [pc, #140]	@ (8007228 <UART_SetConfig+0x2a8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d146      	bne.n	800722c <UART_SetConfig+0x2ac>
 800719e:	4b21      	ldr	r3, [pc, #132]	@ (8007224 <UART_SetConfig+0x2a4>)
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a4:	f003 030c 	and.w	r3, r3, #12
 80071a8:	2b0c      	cmp	r3, #12
 80071aa:	d82d      	bhi.n	8007208 <UART_SetConfig+0x288>
 80071ac:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <UART_SetConfig+0x234>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071e9 	.word	0x080071e9
 80071b8:	08007209 	.word	0x08007209
 80071bc:	08007209 	.word	0x08007209
 80071c0:	08007209 	.word	0x08007209
 80071c4:	080071f9 	.word	0x080071f9
 80071c8:	08007209 	.word	0x08007209
 80071cc:	08007209 	.word	0x08007209
 80071d0:	08007209 	.word	0x08007209
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	08007209 	.word	0x08007209
 80071dc:	08007209 	.word	0x08007209
 80071e0:	08007209 	.word	0x08007209
 80071e4:	08007201 	.word	0x08007201
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ee:	e0d6      	b.n	800739e <UART_SetConfig+0x41e>
 80071f0:	2302      	movs	r3, #2
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f6:	e0d2      	b.n	800739e <UART_SetConfig+0x41e>
 80071f8:	2304      	movs	r3, #4
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fe:	e0ce      	b.n	800739e <UART_SetConfig+0x41e>
 8007200:	2308      	movs	r3, #8
 8007202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007206:	e0ca      	b.n	800739e <UART_SetConfig+0x41e>
 8007208:	2310      	movs	r3, #16
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720e:	e0c6      	b.n	800739e <UART_SetConfig+0x41e>
 8007210:	00989680 	.word	0x00989680
 8007214:	080089a8 	.word	0x080089a8
 8007218:	40008000 	.word	0x40008000
 800721c:	efff69f3 	.word	0xefff69f3
 8007220:	40013800 	.word	0x40013800
 8007224:	40021000 	.word	0x40021000
 8007228:	40004400 	.word	0x40004400
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4aae      	ldr	r2, [pc, #696]	@ (80074ec <UART_SetConfig+0x56c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d125      	bne.n	8007282 <UART_SetConfig+0x302>
 8007236:	4bae      	ldr	r3, [pc, #696]	@ (80074f0 <UART_SetConfig+0x570>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007240:	2b30      	cmp	r3, #48	@ 0x30
 8007242:	d016      	beq.n	8007272 <UART_SetConfig+0x2f2>
 8007244:	2b30      	cmp	r3, #48	@ 0x30
 8007246:	d818      	bhi.n	800727a <UART_SetConfig+0x2fa>
 8007248:	2b20      	cmp	r3, #32
 800724a:	d00a      	beq.n	8007262 <UART_SetConfig+0x2e2>
 800724c:	2b20      	cmp	r3, #32
 800724e:	d814      	bhi.n	800727a <UART_SetConfig+0x2fa>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <UART_SetConfig+0x2da>
 8007254:	2b10      	cmp	r3, #16
 8007256:	d008      	beq.n	800726a <UART_SetConfig+0x2ea>
 8007258:	e00f      	b.n	800727a <UART_SetConfig+0x2fa>
 800725a:	2300      	movs	r3, #0
 800725c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007260:	e09d      	b.n	800739e <UART_SetConfig+0x41e>
 8007262:	2302      	movs	r3, #2
 8007264:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007268:	e099      	b.n	800739e <UART_SetConfig+0x41e>
 800726a:	2304      	movs	r3, #4
 800726c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007270:	e095      	b.n	800739e <UART_SetConfig+0x41e>
 8007272:	2308      	movs	r3, #8
 8007274:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007278:	e091      	b.n	800739e <UART_SetConfig+0x41e>
 800727a:	2310      	movs	r3, #16
 800727c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007280:	e08d      	b.n	800739e <UART_SetConfig+0x41e>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a9b      	ldr	r2, [pc, #620]	@ (80074f4 <UART_SetConfig+0x574>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d125      	bne.n	80072d8 <UART_SetConfig+0x358>
 800728c:	4b98      	ldr	r3, [pc, #608]	@ (80074f0 <UART_SetConfig+0x570>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007292:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007296:	2bc0      	cmp	r3, #192	@ 0xc0
 8007298:	d016      	beq.n	80072c8 <UART_SetConfig+0x348>
 800729a:	2bc0      	cmp	r3, #192	@ 0xc0
 800729c:	d818      	bhi.n	80072d0 <UART_SetConfig+0x350>
 800729e:	2b80      	cmp	r3, #128	@ 0x80
 80072a0:	d00a      	beq.n	80072b8 <UART_SetConfig+0x338>
 80072a2:	2b80      	cmp	r3, #128	@ 0x80
 80072a4:	d814      	bhi.n	80072d0 <UART_SetConfig+0x350>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <UART_SetConfig+0x330>
 80072aa:	2b40      	cmp	r3, #64	@ 0x40
 80072ac:	d008      	beq.n	80072c0 <UART_SetConfig+0x340>
 80072ae:	e00f      	b.n	80072d0 <UART_SetConfig+0x350>
 80072b0:	2300      	movs	r3, #0
 80072b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072b6:	e072      	b.n	800739e <UART_SetConfig+0x41e>
 80072b8:	2302      	movs	r3, #2
 80072ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072be:	e06e      	b.n	800739e <UART_SetConfig+0x41e>
 80072c0:	2304      	movs	r3, #4
 80072c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072c6:	e06a      	b.n	800739e <UART_SetConfig+0x41e>
 80072c8:	2308      	movs	r3, #8
 80072ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ce:	e066      	b.n	800739e <UART_SetConfig+0x41e>
 80072d0:	2310      	movs	r3, #16
 80072d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072d6:	e062      	b.n	800739e <UART_SetConfig+0x41e>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a86      	ldr	r2, [pc, #536]	@ (80074f8 <UART_SetConfig+0x578>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d12a      	bne.n	8007338 <UART_SetConfig+0x3b8>
 80072e2:	4b83      	ldr	r3, [pc, #524]	@ (80074f0 <UART_SetConfig+0x570>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f0:	d01a      	beq.n	8007328 <UART_SetConfig+0x3a8>
 80072f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f6:	d81b      	bhi.n	8007330 <UART_SetConfig+0x3b0>
 80072f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072fc:	d00c      	beq.n	8007318 <UART_SetConfig+0x398>
 80072fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007302:	d815      	bhi.n	8007330 <UART_SetConfig+0x3b0>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <UART_SetConfig+0x390>
 8007308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800730c:	d008      	beq.n	8007320 <UART_SetConfig+0x3a0>
 800730e:	e00f      	b.n	8007330 <UART_SetConfig+0x3b0>
 8007310:	2300      	movs	r3, #0
 8007312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007316:	e042      	b.n	800739e <UART_SetConfig+0x41e>
 8007318:	2302      	movs	r3, #2
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800731e:	e03e      	b.n	800739e <UART_SetConfig+0x41e>
 8007320:	2304      	movs	r3, #4
 8007322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007326:	e03a      	b.n	800739e <UART_SetConfig+0x41e>
 8007328:	2308      	movs	r3, #8
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800732e:	e036      	b.n	800739e <UART_SetConfig+0x41e>
 8007330:	2310      	movs	r3, #16
 8007332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007336:	e032      	b.n	800739e <UART_SetConfig+0x41e>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a6f      	ldr	r2, [pc, #444]	@ (80074fc <UART_SetConfig+0x57c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d12a      	bne.n	8007398 <UART_SetConfig+0x418>
 8007342:	4b6b      	ldr	r3, [pc, #428]	@ (80074f0 <UART_SetConfig+0x570>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007348:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800734c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007350:	d01a      	beq.n	8007388 <UART_SetConfig+0x408>
 8007352:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007356:	d81b      	bhi.n	8007390 <UART_SetConfig+0x410>
 8007358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800735c:	d00c      	beq.n	8007378 <UART_SetConfig+0x3f8>
 800735e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007362:	d815      	bhi.n	8007390 <UART_SetConfig+0x410>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <UART_SetConfig+0x3f0>
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800736c:	d008      	beq.n	8007380 <UART_SetConfig+0x400>
 800736e:	e00f      	b.n	8007390 <UART_SetConfig+0x410>
 8007370:	2300      	movs	r3, #0
 8007372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007376:	e012      	b.n	800739e <UART_SetConfig+0x41e>
 8007378:	2302      	movs	r3, #2
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800737e:	e00e      	b.n	800739e <UART_SetConfig+0x41e>
 8007380:	2304      	movs	r3, #4
 8007382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007386:	e00a      	b.n	800739e <UART_SetConfig+0x41e>
 8007388:	2308      	movs	r3, #8
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800738e:	e006      	b.n	800739e <UART_SetConfig+0x41e>
 8007390:	2310      	movs	r3, #16
 8007392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007396:	e002      	b.n	800739e <UART_SetConfig+0x41e>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a56      	ldr	r2, [pc, #344]	@ (80074fc <UART_SetConfig+0x57c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d17a      	bne.n	800749e <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d824      	bhi.n	80073fa <UART_SetConfig+0x47a>
 80073b0:	a201      	add	r2, pc, #4	@ (adr r2, 80073b8 <UART_SetConfig+0x438>)
 80073b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b6:	bf00      	nop
 80073b8:	080073dd 	.word	0x080073dd
 80073bc:	080073fb 	.word	0x080073fb
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073fb 	.word	0x080073fb
 80073c8:	080073eb 	.word	0x080073eb
 80073cc:	080073fb 	.word	0x080073fb
 80073d0:	080073fb 	.word	0x080073fb
 80073d4:	080073fb 	.word	0x080073fb
 80073d8:	080073f3 	.word	0x080073f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073dc:	f7fc fcee 	bl	8003dbc <HAL_RCC_GetPCLK1Freq>
 80073e0:	61f8      	str	r0, [r7, #28]
        break;
 80073e2:	e010      	b.n	8007406 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e4:	4b46      	ldr	r3, [pc, #280]	@ (8007500 <UART_SetConfig+0x580>)
 80073e6:	61fb      	str	r3, [r7, #28]
        break;
 80073e8:	e00d      	b.n	8007406 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ea:	f7fc fc4f 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 80073ee:	61f8      	str	r0, [r7, #28]
        break;
 80073f0:	e009      	b.n	8007406 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f6:	61fb      	str	r3, [r7, #28]
        break;
 80073f8:	e005      	b.n	8007406 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8107 	beq.w	800761c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	4613      	mov	r3, r2
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	4413      	add	r3, r2
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	429a      	cmp	r2, r3
 800741c:	d305      	bcc.n	800742a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007424:	69fa      	ldr	r2, [r7, #28]
 8007426:	429a      	cmp	r2, r3
 8007428:	d903      	bls.n	8007432 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007430:	e0f4      	b.n	800761c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	2200      	movs	r2, #0
 8007436:	461c      	mov	r4, r3
 8007438:	4615      	mov	r5, r2
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	022b      	lsls	r3, r5, #8
 8007444:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007448:	0222      	lsls	r2, r4, #8
 800744a:	68f9      	ldr	r1, [r7, #12]
 800744c:	6849      	ldr	r1, [r1, #4]
 800744e:	0849      	lsrs	r1, r1, #1
 8007450:	2000      	movs	r0, #0
 8007452:	4688      	mov	r8, r1
 8007454:	4681      	mov	r9, r0
 8007456:	eb12 0a08 	adds.w	sl, r2, r8
 800745a:	eb43 0b09 	adc.w	fp, r3, r9
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	603b      	str	r3, [r7, #0]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746c:	4650      	mov	r0, sl
 800746e:	4659      	mov	r1, fp
 8007470:	f7f8 ff06 	bl	8000280 <__aeabi_uldivmod>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4613      	mov	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007482:	d308      	bcc.n	8007496 <UART_SetConfig+0x516>
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800748a:	d204      	bcs.n	8007496 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	60da      	str	r2, [r3, #12]
 8007494:	e0c2      	b.n	800761c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800749c:	e0be      	b.n	800761c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074a6:	d16a      	bne.n	800757e <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 80074a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d834      	bhi.n	800751a <UART_SetConfig+0x59a>
 80074b0:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <UART_SetConfig+0x538>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074e5 	.word	0x080074e5
 80074c0:	08007505 	.word	0x08007505
 80074c4:	0800751b 	.word	0x0800751b
 80074c8:	0800750b 	.word	0x0800750b
 80074cc:	0800751b 	.word	0x0800751b
 80074d0:	0800751b 	.word	0x0800751b
 80074d4:	0800751b 	.word	0x0800751b
 80074d8:	08007513 	.word	0x08007513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074dc:	f7fc fc6e 	bl	8003dbc <HAL_RCC_GetPCLK1Freq>
 80074e0:	61f8      	str	r0, [r7, #28]
        break;
 80074e2:	e020      	b.n	8007526 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074e4:	f7fc fc80 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 80074e8:	61f8      	str	r0, [r7, #28]
        break;
 80074ea:	e01c      	b.n	8007526 <UART_SetConfig+0x5a6>
 80074ec:	40004800 	.word	0x40004800
 80074f0:	40021000 	.word	0x40021000
 80074f4:	40004c00 	.word	0x40004c00
 80074f8:	40005000 	.word	0x40005000
 80074fc:	40008000 	.word	0x40008000
 8007500:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007504:	4b4c      	ldr	r3, [pc, #304]	@ (8007638 <UART_SetConfig+0x6b8>)
 8007506:	61fb      	str	r3, [r7, #28]
        break;
 8007508:	e00d      	b.n	8007526 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800750a:	f7fc fbbf 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 800750e:	61f8      	str	r0, [r7, #28]
        break;
 8007510:	e009      	b.n	8007526 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007516:	61fb      	str	r3, [r7, #28]
        break;
 8007518:	e005      	b.n	8007526 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d077      	beq.n	800761c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	005a      	lsls	r2, r3, #1
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	441a      	add	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007540:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b0f      	cmp	r3, #15
 8007546:	d916      	bls.n	8007576 <UART_SetConfig+0x5f6>
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800754e:	d212      	bcs.n	8007576 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f023 030f 	bic.w	r3, r3, #15
 8007558:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	b29b      	uxth	r3, r3
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	b29a      	uxth	r2, r3
 8007566:	8afb      	ldrh	r3, [r7, #22]
 8007568:	4313      	orrs	r3, r2
 800756a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	8afa      	ldrh	r2, [r7, #22]
 8007572:	60da      	str	r2, [r3, #12]
 8007574:	e052      	b.n	800761c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800757c:	e04e      	b.n	800761c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800757e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007582:	2b08      	cmp	r3, #8
 8007584:	d827      	bhi.n	80075d6 <UART_SetConfig+0x656>
 8007586:	a201      	add	r2, pc, #4	@ (adr r2, 800758c <UART_SetConfig+0x60c>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075b9 	.word	0x080075b9
 8007594:	080075c1 	.word	0x080075c1
 8007598:	080075d7 	.word	0x080075d7
 800759c:	080075c7 	.word	0x080075c7
 80075a0:	080075d7 	.word	0x080075d7
 80075a4:	080075d7 	.word	0x080075d7
 80075a8:	080075d7 	.word	0x080075d7
 80075ac:	080075cf 	.word	0x080075cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b0:	f7fc fc04 	bl	8003dbc <HAL_RCC_GetPCLK1Freq>
 80075b4:	61f8      	str	r0, [r7, #28]
        break;
 80075b6:	e014      	b.n	80075e2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075b8:	f7fc fc16 	bl	8003de8 <HAL_RCC_GetPCLK2Freq>
 80075bc:	61f8      	str	r0, [r7, #28]
        break;
 80075be:	e010      	b.n	80075e2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007638 <UART_SetConfig+0x6b8>)
 80075c2:	61fb      	str	r3, [r7, #28]
        break;
 80075c4:	e00d      	b.n	80075e2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c6:	f7fc fb61 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 80075ca:	61f8      	str	r0, [r7, #28]
        break;
 80075cc:	e009      	b.n	80075e2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075d2:	61fb      	str	r3, [r7, #28]
        break;
 80075d4:	e005      	b.n	80075e2 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80075e0:	bf00      	nop
    }

    if (pclk != 0U)
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d019      	beq.n	800761c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	085a      	lsrs	r2, r3, #1
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	441a      	add	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b0f      	cmp	r3, #15
 8007600:	d909      	bls.n	8007616 <UART_SetConfig+0x696>
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007608:	d205      	bcs.n	8007616 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60da      	str	r2, [r3, #12]
 8007614:	e002      	b.n	800761c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007628:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800762c:	4618      	mov	r0, r3
 800762e:	3728      	adds	r7, #40	@ 0x28
 8007630:	46bd      	mov	sp, r7
 8007632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007636:	bf00      	nop
 8007638:	00f42400 	.word	0x00f42400

0800763c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007648:	2bff      	cmp	r3, #255	@ 0xff
 800764a:	d904      	bls.n	8007656 <UART_AdvFeatureConfig+0x1a>
 800764c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 8007650:	4891      	ldr	r0, [pc, #580]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 8007652:	f7f9 ff59 	bl	8001508 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d018      	beq.n	8007694 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007666:	2b00      	cmp	r3, #0
 8007668:	d009      	beq.n	800767e <UART_AdvFeatureConfig+0x42>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007672:	d004      	beq.n	800767e <UART_AdvFeatureConfig+0x42>
 8007674:	f640 5152 	movw	r1, #3410	@ 0xd52
 8007678:	4887      	ldr	r0, [pc, #540]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 800767a:	f7f9 ff45 	bl	8001508 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d018      	beq.n	80076d2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d009      	beq.n	80076bc <UART_AdvFeatureConfig+0x80>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076b0:	d004      	beq.n	80076bc <UART_AdvFeatureConfig+0x80>
 80076b2:	f640 5159 	movw	r1, #3417	@ 0xd59
 80076b6:	4878      	ldr	r0, [pc, #480]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 80076b8:	f7f9 ff26 	bl	8001508 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d018      	beq.n	8007710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <UART_AdvFeatureConfig+0xbe>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ee:	d004      	beq.n	80076fa <UART_AdvFeatureConfig+0xbe>
 80076f0:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 80076f4:	4868      	ldr	r0, [pc, #416]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 80076f6:	f7f9 ff07 	bl	8001508 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d018      	beq.n	800774e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <UART_AdvFeatureConfig+0xfc>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007728:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800772c:	d004      	beq.n	8007738 <UART_AdvFeatureConfig+0xfc>
 800772e:	f640 5167 	movw	r1, #3431	@ 0xd67
 8007732:	4859      	ldr	r0, [pc, #356]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 8007734:	f7f9 fee8 	bl	8001508 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <UART_AdvFeatureConfig+0x13a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800776a:	d004      	beq.n	8007776 <UART_AdvFeatureConfig+0x13a>
 800776c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 8007770:	4849      	ldr	r0, [pc, #292]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 8007772:	f7f9 fec9 	bl	8001508 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b00      	cmp	r3, #0
 8007796:	d018      	beq.n	80077ca <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d009      	beq.n	80077b4 <UART_AdvFeatureConfig+0x178>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077a8:	d004      	beq.n	80077b4 <UART_AdvFeatureConfig+0x178>
 80077aa:	f640 5175 	movw	r1, #3445	@ 0xd75
 80077ae:	483a      	ldr	r0, [pc, #232]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 80077b0:	f7f9 feaa 	bl	8001508 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d06c      	beq.n	80078b0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a30      	ldr	r2, [pc, #192]	@ (800789c <UART_AdvFeatureConfig+0x260>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d018      	beq.n	8007812 <UART_AdvFeatureConfig+0x1d6>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a2e      	ldr	r2, [pc, #184]	@ (80078a0 <UART_AdvFeatureConfig+0x264>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <UART_AdvFeatureConfig+0x1d6>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a2d      	ldr	r2, [pc, #180]	@ (80078a4 <UART_AdvFeatureConfig+0x268>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00e      	beq.n	8007812 <UART_AdvFeatureConfig+0x1d6>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a2b      	ldr	r2, [pc, #172]	@ (80078a8 <UART_AdvFeatureConfig+0x26c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d009      	beq.n	8007812 <UART_AdvFeatureConfig+0x1d6>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a2a      	ldr	r2, [pc, #168]	@ (80078ac <UART_AdvFeatureConfig+0x270>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d004      	beq.n	8007812 <UART_AdvFeatureConfig+0x1d6>
 8007808:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800780c:	4822      	ldr	r0, [pc, #136]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 800780e:	f7f9 fe7b 	bl	8001508 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <UART_AdvFeatureConfig+0x1f2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007822:	d004      	beq.n	800782e <UART_AdvFeatureConfig+0x1f2>
 8007824:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8007828:	481b      	ldr	r0, [pc, #108]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 800782a:	f7f9 fe6d 	bl	8001508 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784c:	d130      	bne.n	80078b0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007852:	2b00      	cmp	r3, #0
 8007854:	d013      	beq.n	800787e <UART_AdvFeatureConfig+0x242>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800785a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800785e:	d00e      	beq.n	800787e <UART_AdvFeatureConfig+0x242>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007868:	d009      	beq.n	800787e <UART_AdvFeatureConfig+0x242>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007872:	d004      	beq.n	800787e <UART_AdvFeatureConfig+0x242>
 8007874:	f640 5182 	movw	r1, #3458	@ 0xd82
 8007878:	4807      	ldr	r0, [pc, #28]	@ (8007898 <UART_AdvFeatureConfig+0x25c>)
 800787a:	f7f9 fe45 	bl	8001508 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	605a      	str	r2, [r3, #4]
 8007894:	e00c      	b.n	80078b0 <UART_AdvFeatureConfig+0x274>
 8007896:	bf00      	nop
 8007898:	080089a8 	.word	0x080089a8
 800789c:	40013800 	.word	0x40013800
 80078a0:	40004400 	.word	0x40004400
 80078a4:	40004800 	.word	0x40004800
 80078a8:	40004c00 	.word	0x40004c00
 80078ac:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d018      	beq.n	80078ee <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <UART_AdvFeatureConfig+0x29c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078cc:	d004      	beq.n	80078d8 <UART_AdvFeatureConfig+0x29c>
 80078ce:	f640 518a 	movw	r1, #3466	@ 0xd8a
 80078d2:	4809      	ldr	r0, [pc, #36]	@ (80078f8 <UART_AdvFeatureConfig+0x2bc>)
 80078d4:	f7f9 fe18 	bl	8001508 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
  }
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	080089a8 	.word	0x080089a8

080078fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b098      	sub	sp, #96	@ 0x60
 8007900:	af02      	add	r7, sp, #8
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800790c:	f7fa fb62 	bl	8001fd4 <HAL_GetTick>
 8007910:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d12e      	bne.n	800797e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007920:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007928:	2200      	movs	r2, #0
 800792a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f88c 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d021      	beq.n	800797e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800794e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007958:	647b      	str	r3, [r7, #68]	@ 0x44
 800795a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800795e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e6      	bne.n	800793a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e062      	b.n	8007a44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b04      	cmp	r3, #4
 800798a:	d149      	bne.n	8007a20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800798c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007994:	2200      	movs	r2, #0
 8007996:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f856 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d03c      	beq.n	8007a20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	623b      	str	r3, [r7, #32]
   return(result);
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0301 	bic.w	r3, r3, #1
 80079ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079f8:	61fa      	str	r2, [r7, #28]
 80079fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	69b9      	ldr	r1, [r7, #24]
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	617b      	str	r3, [r7, #20]
   return(result);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e011      	b.n	8007a44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3758      	adds	r7, #88	@ 0x58
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a5c:	e04f      	b.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d04b      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a66:	f7fa fab5 	bl	8001fd4 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e04e      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d037      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b80      	cmp	r3, #128	@ 0x80
 8007a92:	d034      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d031      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d110      	bne.n	8007aca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2208      	movs	r2, #8
 8007aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f838 	bl	8007b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2208      	movs	r2, #8
 8007aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e029      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ad8:	d111      	bne.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f81e 	bl	8007b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e00f      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4013      	ands	r3, r2
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	bf0c      	ite	eq
 8007b0e:	2301      	moveq	r3, #1
 8007b10:	2300      	movne	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d0a0      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b095      	sub	sp, #84	@ 0x54
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e6      	bne.n	8007b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f023 0301 	bic.w	r3, r3, #1
 8007b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e5      	bne.n	8007b60 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d118      	bne.n	8007bce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f023 0310 	bic.w	r3, r3, #16
 8007bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bba:	61bb      	str	r3, [r7, #24]
 8007bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6979      	ldr	r1, [r7, #20]
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e6      	bne.n	8007b9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007be2:	bf00      	nop
 8007be4:	3754      	adds	r7, #84	@ 0x54
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b08f      	sub	sp, #60	@ 0x3c
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bfa:	2b21      	cmp	r3, #33	@ 0x21
 8007bfc:	d14c      	bne.n	8007c98 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d132      	bne.n	8007c70 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e6      	bne.n	8007c0a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	6979      	ldr	r1, [r7, #20]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	613b      	str	r3, [r7, #16]
   return(result);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e6      	bne.n	8007c3c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c6e:	e013      	b.n	8007c98 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007c98:	bf00      	nop
 8007c9a:	373c      	adds	r7, #60	@ 0x3c
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b091      	sub	sp, #68	@ 0x44
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cb0:	2b21      	cmp	r3, #33	@ 0x21
 8007cb2:	d151      	bne.n	8007d58 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d132      	bne.n	8007d26 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cde:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ce0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e6      	bne.n	8007cc0 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d10:	61fb      	str	r3, [r7, #28]
 8007d12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	69b9      	ldr	r1, [r7, #24]
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e6      	bne.n	8007cf2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007d24:	e018      	b.n	8007d58 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2e:	881a      	ldrh	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d38:	b292      	uxth	r2, r2
 8007d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d40:	1c9a      	adds	r2, r3, #2
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007d58:	bf00      	nop
 8007d5a:	3744      	adds	r7, #68	@ 0x44
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <calloc>:
 8007d64:	4b02      	ldr	r3, [pc, #8]	@ (8007d70 <calloc+0xc>)
 8007d66:	460a      	mov	r2, r1
 8007d68:	4601      	mov	r1, r0
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	f000 b802 	b.w	8007d74 <_calloc_r>
 8007d70:	20000010 	.word	0x20000010

08007d74 <_calloc_r>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	fba1 5402 	umull	r5, r4, r1, r2
 8007d7a:	b934      	cbnz	r4, 8007d8a <_calloc_r+0x16>
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f000 f837 	bl	8007df0 <_malloc_r>
 8007d82:	4606      	mov	r6, r0
 8007d84:	b928      	cbnz	r0, 8007d92 <_calloc_r+0x1e>
 8007d86:	4630      	mov	r0, r6
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	220c      	movs	r2, #12
 8007d8c:	6002      	str	r2, [r0, #0]
 8007d8e:	2600      	movs	r6, #0
 8007d90:	e7f9      	b.n	8007d86 <_calloc_r+0x12>
 8007d92:	462a      	mov	r2, r5
 8007d94:	4621      	mov	r1, r4
 8007d96:	f000 f8ed 	bl	8007f74 <memset>
 8007d9a:	e7f4      	b.n	8007d86 <_calloc_r+0x12>

08007d9c <free>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	@ (8007da8 <free+0xc>)
 8007d9e:	4601      	mov	r1, r0
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f000 b939 	b.w	8008018 <_free_r>
 8007da6:	bf00      	nop
 8007da8:	20000010 	.word	0x20000010

08007dac <sbrk_aligned>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4e0f      	ldr	r6, [pc, #60]	@ (8007dec <sbrk_aligned+0x40>)
 8007db0:	460c      	mov	r4, r1
 8007db2:	6831      	ldr	r1, [r6, #0]
 8007db4:	4605      	mov	r5, r0
 8007db6:	b911      	cbnz	r1, 8007dbe <sbrk_aligned+0x12>
 8007db8:	f000 f8e4 	bl	8007f84 <_sbrk_r>
 8007dbc:	6030      	str	r0, [r6, #0]
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 f8df 	bl	8007f84 <_sbrk_r>
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	d103      	bne.n	8007dd2 <sbrk_aligned+0x26>
 8007dca:	f04f 34ff 	mov.w	r4, #4294967295
 8007dce:	4620      	mov	r0, r4
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	1cc4      	adds	r4, r0, #3
 8007dd4:	f024 0403 	bic.w	r4, r4, #3
 8007dd8:	42a0      	cmp	r0, r4
 8007dda:	d0f8      	beq.n	8007dce <sbrk_aligned+0x22>
 8007ddc:	1a21      	subs	r1, r4, r0
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 f8d0 	bl	8007f84 <_sbrk_r>
 8007de4:	3001      	adds	r0, #1
 8007de6:	d1f2      	bne.n	8007dce <sbrk_aligned+0x22>
 8007de8:	e7ef      	b.n	8007dca <sbrk_aligned+0x1e>
 8007dea:	bf00      	nop
 8007dec:	20000984 	.word	0x20000984

08007df0 <_malloc_r>:
 8007df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df4:	1ccd      	adds	r5, r1, #3
 8007df6:	f025 0503 	bic.w	r5, r5, #3
 8007dfa:	3508      	adds	r5, #8
 8007dfc:	2d0c      	cmp	r5, #12
 8007dfe:	bf38      	it	cc
 8007e00:	250c      	movcc	r5, #12
 8007e02:	2d00      	cmp	r5, #0
 8007e04:	4606      	mov	r6, r0
 8007e06:	db01      	blt.n	8007e0c <_malloc_r+0x1c>
 8007e08:	42a9      	cmp	r1, r5
 8007e0a:	d904      	bls.n	8007e16 <_malloc_r+0x26>
 8007e0c:	230c      	movs	r3, #12
 8007e0e:	6033      	str	r3, [r6, #0]
 8007e10:	2000      	movs	r0, #0
 8007e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007eec <_malloc_r+0xfc>
 8007e1a:	f000 f869 	bl	8007ef0 <__malloc_lock>
 8007e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e22:	461c      	mov	r4, r3
 8007e24:	bb44      	cbnz	r4, 8007e78 <_malloc_r+0x88>
 8007e26:	4629      	mov	r1, r5
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff ffbf 	bl	8007dac <sbrk_aligned>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	4604      	mov	r4, r0
 8007e32:	d158      	bne.n	8007ee6 <_malloc_r+0xf6>
 8007e34:	f8d8 4000 	ldr.w	r4, [r8]
 8007e38:	4627      	mov	r7, r4
 8007e3a:	2f00      	cmp	r7, #0
 8007e3c:	d143      	bne.n	8007ec6 <_malloc_r+0xd6>
 8007e3e:	2c00      	cmp	r4, #0
 8007e40:	d04b      	beq.n	8007eda <_malloc_r+0xea>
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	4639      	mov	r1, r7
 8007e46:	4630      	mov	r0, r6
 8007e48:	eb04 0903 	add.w	r9, r4, r3
 8007e4c:	f000 f89a 	bl	8007f84 <_sbrk_r>
 8007e50:	4581      	cmp	r9, r0
 8007e52:	d142      	bne.n	8007eda <_malloc_r+0xea>
 8007e54:	6821      	ldr	r1, [r4, #0]
 8007e56:	1a6d      	subs	r5, r5, r1
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f7ff ffa6 	bl	8007dac <sbrk_aligned>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d03a      	beq.n	8007eda <_malloc_r+0xea>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	442b      	add	r3, r5
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	bb62      	cbnz	r2, 8007ecc <_malloc_r+0xdc>
 8007e72:	f8c8 7000 	str.w	r7, [r8]
 8007e76:	e00f      	b.n	8007e98 <_malloc_r+0xa8>
 8007e78:	6822      	ldr	r2, [r4, #0]
 8007e7a:	1b52      	subs	r2, r2, r5
 8007e7c:	d420      	bmi.n	8007ec0 <_malloc_r+0xd0>
 8007e7e:	2a0b      	cmp	r2, #11
 8007e80:	d917      	bls.n	8007eb2 <_malloc_r+0xc2>
 8007e82:	1961      	adds	r1, r4, r5
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	6025      	str	r5, [r4, #0]
 8007e88:	bf18      	it	ne
 8007e8a:	6059      	strne	r1, [r3, #4]
 8007e8c:	6863      	ldr	r3, [r4, #4]
 8007e8e:	bf08      	it	eq
 8007e90:	f8c8 1000 	streq.w	r1, [r8]
 8007e94:	5162      	str	r2, [r4, r5]
 8007e96:	604b      	str	r3, [r1, #4]
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f82f 	bl	8007efc <__malloc_unlock>
 8007e9e:	f104 000b 	add.w	r0, r4, #11
 8007ea2:	1d23      	adds	r3, r4, #4
 8007ea4:	f020 0007 	bic.w	r0, r0, #7
 8007ea8:	1ac2      	subs	r2, r0, r3
 8007eaa:	bf1c      	itt	ne
 8007eac:	1a1b      	subne	r3, r3, r0
 8007eae:	50a3      	strne	r3, [r4, r2]
 8007eb0:	e7af      	b.n	8007e12 <_malloc_r+0x22>
 8007eb2:	6862      	ldr	r2, [r4, #4]
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	bf0c      	ite	eq
 8007eb8:	f8c8 2000 	streq.w	r2, [r8]
 8007ebc:	605a      	strne	r2, [r3, #4]
 8007ebe:	e7eb      	b.n	8007e98 <_malloc_r+0xa8>
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	6864      	ldr	r4, [r4, #4]
 8007ec4:	e7ae      	b.n	8007e24 <_malloc_r+0x34>
 8007ec6:	463c      	mov	r4, r7
 8007ec8:	687f      	ldr	r7, [r7, #4]
 8007eca:	e7b6      	b.n	8007e3a <_malloc_r+0x4a>
 8007ecc:	461a      	mov	r2, r3
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	d1fb      	bne.n	8007ecc <_malloc_r+0xdc>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	6053      	str	r3, [r2, #4]
 8007ed8:	e7de      	b.n	8007e98 <_malloc_r+0xa8>
 8007eda:	230c      	movs	r3, #12
 8007edc:	6033      	str	r3, [r6, #0]
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f000 f80c 	bl	8007efc <__malloc_unlock>
 8007ee4:	e794      	b.n	8007e10 <_malloc_r+0x20>
 8007ee6:	6005      	str	r5, [r0, #0]
 8007ee8:	e7d6      	b.n	8007e98 <_malloc_r+0xa8>
 8007eea:	bf00      	nop
 8007eec:	20000988 	.word	0x20000988

08007ef0 <__malloc_lock>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	@ (8007ef8 <__malloc_lock+0x8>)
 8007ef2:	f000 b881 	b.w	8007ff8 <__retarget_lock_acquire_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	20000ac8 	.word	0x20000ac8

08007efc <__malloc_unlock>:
 8007efc:	4801      	ldr	r0, [pc, #4]	@ (8007f04 <__malloc_unlock+0x8>)
 8007efe:	f000 b87c 	b.w	8007ffa <__retarget_lock_release_recursive>
 8007f02:	bf00      	nop
 8007f04:	20000ac8 	.word	0x20000ac8

08007f08 <sniprintf>:
 8007f08:	b40c      	push	{r2, r3}
 8007f0a:	b530      	push	{r4, r5, lr}
 8007f0c:	4b18      	ldr	r3, [pc, #96]	@ (8007f70 <sniprintf+0x68>)
 8007f0e:	1e0c      	subs	r4, r1, #0
 8007f10:	681d      	ldr	r5, [r3, #0]
 8007f12:	b09d      	sub	sp, #116	@ 0x74
 8007f14:	da08      	bge.n	8007f28 <sniprintf+0x20>
 8007f16:	238b      	movs	r3, #139	@ 0x8b
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1e:	b01d      	add	sp, #116	@ 0x74
 8007f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f24:	b002      	add	sp, #8
 8007f26:	4770      	bx	lr
 8007f28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007f36:	bf14      	ite	ne
 8007f38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f3c:	4623      	moveq	r3, r4
 8007f3e:	9304      	str	r3, [sp, #16]
 8007f40:	9307      	str	r3, [sp, #28]
 8007f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f46:	9002      	str	r0, [sp, #8]
 8007f48:	9006      	str	r0, [sp, #24]
 8007f4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f50:	ab21      	add	r3, sp, #132	@ 0x84
 8007f52:	a902      	add	r1, sp, #8
 8007f54:	4628      	mov	r0, r5
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	f000 f904 	bl	8008164 <_svfiprintf_r>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	bfbc      	itt	lt
 8007f60:	238b      	movlt	r3, #139	@ 0x8b
 8007f62:	602b      	strlt	r3, [r5, #0]
 8007f64:	2c00      	cmp	r4, #0
 8007f66:	d0da      	beq.n	8007f1e <sniprintf+0x16>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	e7d6      	b.n	8007f1e <sniprintf+0x16>
 8007f70:	20000010 	.word	0x20000010

08007f74 <memset>:
 8007f74:	4402      	add	r2, r0
 8007f76:	4603      	mov	r3, r0
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d100      	bne.n	8007f7e <memset+0xa>
 8007f7c:	4770      	bx	lr
 8007f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f82:	e7f9      	b.n	8007f78 <memset+0x4>

08007f84 <_sbrk_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d06      	ldr	r5, [pc, #24]	@ (8007fa0 <_sbrk_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f9 fc48 	bl	8001824 <_sbrk>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_sbrk_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_sbrk_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20000ac4 	.word	0x20000ac4

08007fa4 <__errno>:
 8007fa4:	4b01      	ldr	r3, [pc, #4]	@ (8007fac <__errno+0x8>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000010 	.word	0x20000010

08007fb0 <__libc_init_array>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8007fe8 <__libc_init_array+0x38>)
 8007fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8007fec <__libc_init_array+0x3c>)
 8007fb6:	1b64      	subs	r4, r4, r5
 8007fb8:	10a4      	asrs	r4, r4, #2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	d109      	bne.n	8007fd4 <__libc_init_array+0x24>
 8007fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ff0 <__libc_init_array+0x40>)
 8007fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ff4 <__libc_init_array+0x44>)
 8007fc4:	f000 fba6 	bl	8008714 <_init>
 8007fc8:	1b64      	subs	r4, r4, r5
 8007fca:	10a4      	asrs	r4, r4, #2
 8007fcc:	2600      	movs	r6, #0
 8007fce:	42a6      	cmp	r6, r4
 8007fd0:	d105      	bne.n	8007fde <__libc_init_array+0x2e>
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd8:	4798      	blx	r3
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7ee      	b.n	8007fbc <__libc_init_array+0xc>
 8007fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe2:	4798      	blx	r3
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	e7f2      	b.n	8007fce <__libc_init_array+0x1e>
 8007fe8:	08008a68 	.word	0x08008a68
 8007fec:	08008a68 	.word	0x08008a68
 8007ff0:	08008a68 	.word	0x08008a68
 8007ff4:	08008a6c 	.word	0x08008a6c

08007ff8 <__retarget_lock_acquire_recursive>:
 8007ff8:	4770      	bx	lr

08007ffa <__retarget_lock_release_recursive>:
 8007ffa:	4770      	bx	lr

08007ffc <memcpy>:
 8007ffc:	440a      	add	r2, r1
 8007ffe:	4291      	cmp	r1, r2
 8008000:	f100 33ff 	add.w	r3, r0, #4294967295
 8008004:	d100      	bne.n	8008008 <memcpy+0xc>
 8008006:	4770      	bx	lr
 8008008:	b510      	push	{r4, lr}
 800800a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800800e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008012:	4291      	cmp	r1, r2
 8008014:	d1f9      	bne.n	800800a <memcpy+0xe>
 8008016:	bd10      	pop	{r4, pc}

08008018 <_free_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4605      	mov	r5, r0
 800801c:	2900      	cmp	r1, #0
 800801e:	d041      	beq.n	80080a4 <_free_r+0x8c>
 8008020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008024:	1f0c      	subs	r4, r1, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	bfb8      	it	lt
 800802a:	18e4      	addlt	r4, r4, r3
 800802c:	f7ff ff60 	bl	8007ef0 <__malloc_lock>
 8008030:	4a1d      	ldr	r2, [pc, #116]	@ (80080a8 <_free_r+0x90>)
 8008032:	6813      	ldr	r3, [r2, #0]
 8008034:	b933      	cbnz	r3, 8008044 <_free_r+0x2c>
 8008036:	6063      	str	r3, [r4, #4]
 8008038:	6014      	str	r4, [r2, #0]
 800803a:	4628      	mov	r0, r5
 800803c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008040:	f7ff bf5c 	b.w	8007efc <__malloc_unlock>
 8008044:	42a3      	cmp	r3, r4
 8008046:	d908      	bls.n	800805a <_free_r+0x42>
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	1821      	adds	r1, r4, r0
 800804c:	428b      	cmp	r3, r1
 800804e:	bf01      	itttt	eq
 8008050:	6819      	ldreq	r1, [r3, #0]
 8008052:	685b      	ldreq	r3, [r3, #4]
 8008054:	1809      	addeq	r1, r1, r0
 8008056:	6021      	streq	r1, [r4, #0]
 8008058:	e7ed      	b.n	8008036 <_free_r+0x1e>
 800805a:	461a      	mov	r2, r3
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	b10b      	cbz	r3, 8008064 <_free_r+0x4c>
 8008060:	42a3      	cmp	r3, r4
 8008062:	d9fa      	bls.n	800805a <_free_r+0x42>
 8008064:	6811      	ldr	r1, [r2, #0]
 8008066:	1850      	adds	r0, r2, r1
 8008068:	42a0      	cmp	r0, r4
 800806a:	d10b      	bne.n	8008084 <_free_r+0x6c>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	4401      	add	r1, r0
 8008070:	1850      	adds	r0, r2, r1
 8008072:	4283      	cmp	r3, r0
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	d1e0      	bne.n	800803a <_free_r+0x22>
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	6053      	str	r3, [r2, #4]
 800807e:	4408      	add	r0, r1
 8008080:	6010      	str	r0, [r2, #0]
 8008082:	e7da      	b.n	800803a <_free_r+0x22>
 8008084:	d902      	bls.n	800808c <_free_r+0x74>
 8008086:	230c      	movs	r3, #12
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	e7d6      	b.n	800803a <_free_r+0x22>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	1821      	adds	r1, r4, r0
 8008090:	428b      	cmp	r3, r1
 8008092:	bf04      	itt	eq
 8008094:	6819      	ldreq	r1, [r3, #0]
 8008096:	685b      	ldreq	r3, [r3, #4]
 8008098:	6063      	str	r3, [r4, #4]
 800809a:	bf04      	itt	eq
 800809c:	1809      	addeq	r1, r1, r0
 800809e:	6021      	streq	r1, [r4, #0]
 80080a0:	6054      	str	r4, [r2, #4]
 80080a2:	e7ca      	b.n	800803a <_free_r+0x22>
 80080a4:	bd38      	pop	{r3, r4, r5, pc}
 80080a6:	bf00      	nop
 80080a8:	20000988 	.word	0x20000988

080080ac <__ssputs_r>:
 80080ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	688e      	ldr	r6, [r1, #8]
 80080b2:	461f      	mov	r7, r3
 80080b4:	42be      	cmp	r6, r7
 80080b6:	680b      	ldr	r3, [r1, #0]
 80080b8:	4682      	mov	sl, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	4690      	mov	r8, r2
 80080be:	d82d      	bhi.n	800811c <__ssputs_r+0x70>
 80080c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080c8:	d026      	beq.n	8008118 <__ssputs_r+0x6c>
 80080ca:	6965      	ldr	r5, [r4, #20]
 80080cc:	6909      	ldr	r1, [r1, #16]
 80080ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080d2:	eba3 0901 	sub.w	r9, r3, r1
 80080d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080da:	1c7b      	adds	r3, r7, #1
 80080dc:	444b      	add	r3, r9
 80080de:	106d      	asrs	r5, r5, #1
 80080e0:	429d      	cmp	r5, r3
 80080e2:	bf38      	it	cc
 80080e4:	461d      	movcc	r5, r3
 80080e6:	0553      	lsls	r3, r2, #21
 80080e8:	d527      	bpl.n	800813a <__ssputs_r+0x8e>
 80080ea:	4629      	mov	r1, r5
 80080ec:	f7ff fe80 	bl	8007df0 <_malloc_r>
 80080f0:	4606      	mov	r6, r0
 80080f2:	b360      	cbz	r0, 800814e <__ssputs_r+0xa2>
 80080f4:	6921      	ldr	r1, [r4, #16]
 80080f6:	464a      	mov	r2, r9
 80080f8:	f7ff ff80 	bl	8007ffc <memcpy>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	6126      	str	r6, [r4, #16]
 800810a:	6165      	str	r5, [r4, #20]
 800810c:	444e      	add	r6, r9
 800810e:	eba5 0509 	sub.w	r5, r5, r9
 8008112:	6026      	str	r6, [r4, #0]
 8008114:	60a5      	str	r5, [r4, #8]
 8008116:	463e      	mov	r6, r7
 8008118:	42be      	cmp	r6, r7
 800811a:	d900      	bls.n	800811e <__ssputs_r+0x72>
 800811c:	463e      	mov	r6, r7
 800811e:	6820      	ldr	r0, [r4, #0]
 8008120:	4632      	mov	r2, r6
 8008122:	4641      	mov	r1, r8
 8008124:	f000 faa6 	bl	8008674 <memmove>
 8008128:	68a3      	ldr	r3, [r4, #8]
 800812a:	1b9b      	subs	r3, r3, r6
 800812c:	60a3      	str	r3, [r4, #8]
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	4433      	add	r3, r6
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	2000      	movs	r0, #0
 8008136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813a:	462a      	mov	r2, r5
 800813c:	f000 fab4 	bl	80086a8 <_realloc_r>
 8008140:	4606      	mov	r6, r0
 8008142:	2800      	cmp	r0, #0
 8008144:	d1e0      	bne.n	8008108 <__ssputs_r+0x5c>
 8008146:	6921      	ldr	r1, [r4, #16]
 8008148:	4650      	mov	r0, sl
 800814a:	f7ff ff65 	bl	8008018 <_free_r>
 800814e:	230c      	movs	r3, #12
 8008150:	f8ca 3000 	str.w	r3, [sl]
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800815a:	81a3      	strh	r3, [r4, #12]
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	e7e9      	b.n	8008136 <__ssputs_r+0x8a>
	...

08008164 <_svfiprintf_r>:
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	4698      	mov	r8, r3
 800816a:	898b      	ldrh	r3, [r1, #12]
 800816c:	061b      	lsls	r3, r3, #24
 800816e:	b09d      	sub	sp, #116	@ 0x74
 8008170:	4607      	mov	r7, r0
 8008172:	460d      	mov	r5, r1
 8008174:	4614      	mov	r4, r2
 8008176:	d510      	bpl.n	800819a <_svfiprintf_r+0x36>
 8008178:	690b      	ldr	r3, [r1, #16]
 800817a:	b973      	cbnz	r3, 800819a <_svfiprintf_r+0x36>
 800817c:	2140      	movs	r1, #64	@ 0x40
 800817e:	f7ff fe37 	bl	8007df0 <_malloc_r>
 8008182:	6028      	str	r0, [r5, #0]
 8008184:	6128      	str	r0, [r5, #16]
 8008186:	b930      	cbnz	r0, 8008196 <_svfiprintf_r+0x32>
 8008188:	230c      	movs	r3, #12
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	b01d      	add	sp, #116	@ 0x74
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	2340      	movs	r3, #64	@ 0x40
 8008198:	616b      	str	r3, [r5, #20]
 800819a:	2300      	movs	r3, #0
 800819c:	9309      	str	r3, [sp, #36]	@ 0x24
 800819e:	2320      	movs	r3, #32
 80081a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081a8:	2330      	movs	r3, #48	@ 0x30
 80081aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008348 <_svfiprintf_r+0x1e4>
 80081ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081b2:	f04f 0901 	mov.w	r9, #1
 80081b6:	4623      	mov	r3, r4
 80081b8:	469a      	mov	sl, r3
 80081ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081be:	b10a      	cbz	r2, 80081c4 <_svfiprintf_r+0x60>
 80081c0:	2a25      	cmp	r2, #37	@ 0x25
 80081c2:	d1f9      	bne.n	80081b8 <_svfiprintf_r+0x54>
 80081c4:	ebba 0b04 	subs.w	fp, sl, r4
 80081c8:	d00b      	beq.n	80081e2 <_svfiprintf_r+0x7e>
 80081ca:	465b      	mov	r3, fp
 80081cc:	4622      	mov	r2, r4
 80081ce:	4629      	mov	r1, r5
 80081d0:	4638      	mov	r0, r7
 80081d2:	f7ff ff6b 	bl	80080ac <__ssputs_r>
 80081d6:	3001      	adds	r0, #1
 80081d8:	f000 80a7 	beq.w	800832a <_svfiprintf_r+0x1c6>
 80081dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081de:	445a      	add	r2, fp
 80081e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80081e2:	f89a 3000 	ldrb.w	r3, [sl]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 809f 	beq.w	800832a <_svfiprintf_r+0x1c6>
 80081ec:	2300      	movs	r3, #0
 80081ee:	f04f 32ff 	mov.w	r2, #4294967295
 80081f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081f6:	f10a 0a01 	add.w	sl, sl, #1
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	9307      	str	r3, [sp, #28]
 80081fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008202:	931a      	str	r3, [sp, #104]	@ 0x68
 8008204:	4654      	mov	r4, sl
 8008206:	2205      	movs	r2, #5
 8008208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820c:	484e      	ldr	r0, [pc, #312]	@ (8008348 <_svfiprintf_r+0x1e4>)
 800820e:	f7f7 ffe7 	bl	80001e0 <memchr>
 8008212:	9a04      	ldr	r2, [sp, #16]
 8008214:	b9d8      	cbnz	r0, 800824e <_svfiprintf_r+0xea>
 8008216:	06d0      	lsls	r0, r2, #27
 8008218:	bf44      	itt	mi
 800821a:	2320      	movmi	r3, #32
 800821c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008220:	0711      	lsls	r1, r2, #28
 8008222:	bf44      	itt	mi
 8008224:	232b      	movmi	r3, #43	@ 0x2b
 8008226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800822a:	f89a 3000 	ldrb.w	r3, [sl]
 800822e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008230:	d015      	beq.n	800825e <_svfiprintf_r+0xfa>
 8008232:	9a07      	ldr	r2, [sp, #28]
 8008234:	4654      	mov	r4, sl
 8008236:	2000      	movs	r0, #0
 8008238:	f04f 0c0a 	mov.w	ip, #10
 800823c:	4621      	mov	r1, r4
 800823e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008242:	3b30      	subs	r3, #48	@ 0x30
 8008244:	2b09      	cmp	r3, #9
 8008246:	d94b      	bls.n	80082e0 <_svfiprintf_r+0x17c>
 8008248:	b1b0      	cbz	r0, 8008278 <_svfiprintf_r+0x114>
 800824a:	9207      	str	r2, [sp, #28]
 800824c:	e014      	b.n	8008278 <_svfiprintf_r+0x114>
 800824e:	eba0 0308 	sub.w	r3, r0, r8
 8008252:	fa09 f303 	lsl.w	r3, r9, r3
 8008256:	4313      	orrs	r3, r2
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	46a2      	mov	sl, r4
 800825c:	e7d2      	b.n	8008204 <_svfiprintf_r+0xa0>
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	1d19      	adds	r1, r3, #4
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	9103      	str	r1, [sp, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	bfbb      	ittet	lt
 800826a:	425b      	neglt	r3, r3
 800826c:	f042 0202 	orrlt.w	r2, r2, #2
 8008270:	9307      	strge	r3, [sp, #28]
 8008272:	9307      	strlt	r3, [sp, #28]
 8008274:	bfb8      	it	lt
 8008276:	9204      	strlt	r2, [sp, #16]
 8008278:	7823      	ldrb	r3, [r4, #0]
 800827a:	2b2e      	cmp	r3, #46	@ 0x2e
 800827c:	d10a      	bne.n	8008294 <_svfiprintf_r+0x130>
 800827e:	7863      	ldrb	r3, [r4, #1]
 8008280:	2b2a      	cmp	r3, #42	@ 0x2a
 8008282:	d132      	bne.n	80082ea <_svfiprintf_r+0x186>
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	1d1a      	adds	r2, r3, #4
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	9203      	str	r2, [sp, #12]
 800828c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008290:	3402      	adds	r4, #2
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008358 <_svfiprintf_r+0x1f4>
 8008298:	7821      	ldrb	r1, [r4, #0]
 800829a:	2203      	movs	r2, #3
 800829c:	4650      	mov	r0, sl
 800829e:	f7f7 ff9f 	bl	80001e0 <memchr>
 80082a2:	b138      	cbz	r0, 80082b4 <_svfiprintf_r+0x150>
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	eba0 000a 	sub.w	r0, r0, sl
 80082aa:	2240      	movs	r2, #64	@ 0x40
 80082ac:	4082      	lsls	r2, r0
 80082ae:	4313      	orrs	r3, r2
 80082b0:	3401      	adds	r4, #1
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b8:	4824      	ldr	r0, [pc, #144]	@ (800834c <_svfiprintf_r+0x1e8>)
 80082ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082be:	2206      	movs	r2, #6
 80082c0:	f7f7 ff8e 	bl	80001e0 <memchr>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d036      	beq.n	8008336 <_svfiprintf_r+0x1d2>
 80082c8:	4b21      	ldr	r3, [pc, #132]	@ (8008350 <_svfiprintf_r+0x1ec>)
 80082ca:	bb1b      	cbnz	r3, 8008314 <_svfiprintf_r+0x1b0>
 80082cc:	9b03      	ldr	r3, [sp, #12]
 80082ce:	3307      	adds	r3, #7
 80082d0:	f023 0307 	bic.w	r3, r3, #7
 80082d4:	3308      	adds	r3, #8
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082da:	4433      	add	r3, r6
 80082dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082de:	e76a      	b.n	80081b6 <_svfiprintf_r+0x52>
 80082e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e4:	460c      	mov	r4, r1
 80082e6:	2001      	movs	r0, #1
 80082e8:	e7a8      	b.n	800823c <_svfiprintf_r+0xd8>
 80082ea:	2300      	movs	r3, #0
 80082ec:	3401      	adds	r4, #1
 80082ee:	9305      	str	r3, [sp, #20]
 80082f0:	4619      	mov	r1, r3
 80082f2:	f04f 0c0a 	mov.w	ip, #10
 80082f6:	4620      	mov	r0, r4
 80082f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082fc:	3a30      	subs	r2, #48	@ 0x30
 80082fe:	2a09      	cmp	r2, #9
 8008300:	d903      	bls.n	800830a <_svfiprintf_r+0x1a6>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0c6      	beq.n	8008294 <_svfiprintf_r+0x130>
 8008306:	9105      	str	r1, [sp, #20]
 8008308:	e7c4      	b.n	8008294 <_svfiprintf_r+0x130>
 800830a:	fb0c 2101 	mla	r1, ip, r1, r2
 800830e:	4604      	mov	r4, r0
 8008310:	2301      	movs	r3, #1
 8008312:	e7f0      	b.n	80082f6 <_svfiprintf_r+0x192>
 8008314:	ab03      	add	r3, sp, #12
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	462a      	mov	r2, r5
 800831a:	4b0e      	ldr	r3, [pc, #56]	@ (8008354 <_svfiprintf_r+0x1f0>)
 800831c:	a904      	add	r1, sp, #16
 800831e:	4638      	mov	r0, r7
 8008320:	f3af 8000 	nop.w
 8008324:	1c42      	adds	r2, r0, #1
 8008326:	4606      	mov	r6, r0
 8008328:	d1d6      	bne.n	80082d8 <_svfiprintf_r+0x174>
 800832a:	89ab      	ldrh	r3, [r5, #12]
 800832c:	065b      	lsls	r3, r3, #25
 800832e:	f53f af2d 	bmi.w	800818c <_svfiprintf_r+0x28>
 8008332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008334:	e72c      	b.n	8008190 <_svfiprintf_r+0x2c>
 8008336:	ab03      	add	r3, sp, #12
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	462a      	mov	r2, r5
 800833c:	4b05      	ldr	r3, [pc, #20]	@ (8008354 <_svfiprintf_r+0x1f0>)
 800833e:	a904      	add	r1, sp, #16
 8008340:	4638      	mov	r0, r7
 8008342:	f000 f879 	bl	8008438 <_printf_i>
 8008346:	e7ed      	b.n	8008324 <_svfiprintf_r+0x1c0>
 8008348:	08008a2c 	.word	0x08008a2c
 800834c:	08008a36 	.word	0x08008a36
 8008350:	00000000 	.word	0x00000000
 8008354:	080080ad 	.word	0x080080ad
 8008358:	08008a32 	.word	0x08008a32

0800835c <_printf_common>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	4616      	mov	r6, r2
 8008362:	4698      	mov	r8, r3
 8008364:	688a      	ldr	r2, [r1, #8]
 8008366:	690b      	ldr	r3, [r1, #16]
 8008368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800836c:	4293      	cmp	r3, r2
 800836e:	bfb8      	it	lt
 8008370:	4613      	movlt	r3, r2
 8008372:	6033      	str	r3, [r6, #0]
 8008374:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008378:	4607      	mov	r7, r0
 800837a:	460c      	mov	r4, r1
 800837c:	b10a      	cbz	r2, 8008382 <_printf_common+0x26>
 800837e:	3301      	adds	r3, #1
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	0699      	lsls	r1, r3, #26
 8008386:	bf42      	ittt	mi
 8008388:	6833      	ldrmi	r3, [r6, #0]
 800838a:	3302      	addmi	r3, #2
 800838c:	6033      	strmi	r3, [r6, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	f015 0506 	ands.w	r5, r5, #6
 8008394:	d106      	bne.n	80083a4 <_printf_common+0x48>
 8008396:	f104 0a19 	add.w	sl, r4, #25
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	6832      	ldr	r2, [r6, #0]
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dc26      	bgt.n	80083f2 <_printf_common+0x96>
 80083a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083a8:	6822      	ldr	r2, [r4, #0]
 80083aa:	3b00      	subs	r3, #0
 80083ac:	bf18      	it	ne
 80083ae:	2301      	movne	r3, #1
 80083b0:	0692      	lsls	r2, r2, #26
 80083b2:	d42b      	bmi.n	800840c <_printf_common+0xb0>
 80083b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083b8:	4641      	mov	r1, r8
 80083ba:	4638      	mov	r0, r7
 80083bc:	47c8      	blx	r9
 80083be:	3001      	adds	r0, #1
 80083c0:	d01e      	beq.n	8008400 <_printf_common+0xa4>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	6922      	ldr	r2, [r4, #16]
 80083c6:	f003 0306 	and.w	r3, r3, #6
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	bf02      	ittt	eq
 80083ce:	68e5      	ldreq	r5, [r4, #12]
 80083d0:	6833      	ldreq	r3, [r6, #0]
 80083d2:	1aed      	subeq	r5, r5, r3
 80083d4:	68a3      	ldr	r3, [r4, #8]
 80083d6:	bf0c      	ite	eq
 80083d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083dc:	2500      	movne	r5, #0
 80083de:	4293      	cmp	r3, r2
 80083e0:	bfc4      	itt	gt
 80083e2:	1a9b      	subgt	r3, r3, r2
 80083e4:	18ed      	addgt	r5, r5, r3
 80083e6:	2600      	movs	r6, #0
 80083e8:	341a      	adds	r4, #26
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	d11a      	bne.n	8008424 <_printf_common+0xc8>
 80083ee:	2000      	movs	r0, #0
 80083f0:	e008      	b.n	8008404 <_printf_common+0xa8>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4652      	mov	r2, sl
 80083f6:	4641      	mov	r1, r8
 80083f8:	4638      	mov	r0, r7
 80083fa:	47c8      	blx	r9
 80083fc:	3001      	adds	r0, #1
 80083fe:	d103      	bne.n	8008408 <_printf_common+0xac>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	3501      	adds	r5, #1
 800840a:	e7c6      	b.n	800839a <_printf_common+0x3e>
 800840c:	18e1      	adds	r1, r4, r3
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	2030      	movs	r0, #48	@ 0x30
 8008412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008416:	4422      	add	r2, r4
 8008418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800841c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008420:	3302      	adds	r3, #2
 8008422:	e7c7      	b.n	80083b4 <_printf_common+0x58>
 8008424:	2301      	movs	r3, #1
 8008426:	4622      	mov	r2, r4
 8008428:	4641      	mov	r1, r8
 800842a:	4638      	mov	r0, r7
 800842c:	47c8      	blx	r9
 800842e:	3001      	adds	r0, #1
 8008430:	d0e6      	beq.n	8008400 <_printf_common+0xa4>
 8008432:	3601      	adds	r6, #1
 8008434:	e7d9      	b.n	80083ea <_printf_common+0x8e>
	...

08008438 <_printf_i>:
 8008438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	7e0f      	ldrb	r7, [r1, #24]
 800843e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008440:	2f78      	cmp	r7, #120	@ 0x78
 8008442:	4691      	mov	r9, r2
 8008444:	4680      	mov	r8, r0
 8008446:	460c      	mov	r4, r1
 8008448:	469a      	mov	sl, r3
 800844a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800844e:	d807      	bhi.n	8008460 <_printf_i+0x28>
 8008450:	2f62      	cmp	r7, #98	@ 0x62
 8008452:	d80a      	bhi.n	800846a <_printf_i+0x32>
 8008454:	2f00      	cmp	r7, #0
 8008456:	f000 80d1 	beq.w	80085fc <_printf_i+0x1c4>
 800845a:	2f58      	cmp	r7, #88	@ 0x58
 800845c:	f000 80b8 	beq.w	80085d0 <_printf_i+0x198>
 8008460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008468:	e03a      	b.n	80084e0 <_printf_i+0xa8>
 800846a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800846e:	2b15      	cmp	r3, #21
 8008470:	d8f6      	bhi.n	8008460 <_printf_i+0x28>
 8008472:	a101      	add	r1, pc, #4	@ (adr r1, 8008478 <_printf_i+0x40>)
 8008474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008478:	080084d1 	.word	0x080084d1
 800847c:	080084e5 	.word	0x080084e5
 8008480:	08008461 	.word	0x08008461
 8008484:	08008461 	.word	0x08008461
 8008488:	08008461 	.word	0x08008461
 800848c:	08008461 	.word	0x08008461
 8008490:	080084e5 	.word	0x080084e5
 8008494:	08008461 	.word	0x08008461
 8008498:	08008461 	.word	0x08008461
 800849c:	08008461 	.word	0x08008461
 80084a0:	08008461 	.word	0x08008461
 80084a4:	080085e3 	.word	0x080085e3
 80084a8:	0800850f 	.word	0x0800850f
 80084ac:	0800859d 	.word	0x0800859d
 80084b0:	08008461 	.word	0x08008461
 80084b4:	08008461 	.word	0x08008461
 80084b8:	08008605 	.word	0x08008605
 80084bc:	08008461 	.word	0x08008461
 80084c0:	0800850f 	.word	0x0800850f
 80084c4:	08008461 	.word	0x08008461
 80084c8:	08008461 	.word	0x08008461
 80084cc:	080085a5 	.word	0x080085a5
 80084d0:	6833      	ldr	r3, [r6, #0]
 80084d2:	1d1a      	adds	r2, r3, #4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6032      	str	r2, [r6, #0]
 80084d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084e0:	2301      	movs	r3, #1
 80084e2:	e09c      	b.n	800861e <_printf_i+0x1e6>
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	6820      	ldr	r0, [r4, #0]
 80084e8:	1d19      	adds	r1, r3, #4
 80084ea:	6031      	str	r1, [r6, #0]
 80084ec:	0606      	lsls	r6, r0, #24
 80084ee:	d501      	bpl.n	80084f4 <_printf_i+0xbc>
 80084f0:	681d      	ldr	r5, [r3, #0]
 80084f2:	e003      	b.n	80084fc <_printf_i+0xc4>
 80084f4:	0645      	lsls	r5, r0, #25
 80084f6:	d5fb      	bpl.n	80084f0 <_printf_i+0xb8>
 80084f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084fc:	2d00      	cmp	r5, #0
 80084fe:	da03      	bge.n	8008508 <_printf_i+0xd0>
 8008500:	232d      	movs	r3, #45	@ 0x2d
 8008502:	426d      	negs	r5, r5
 8008504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008508:	4858      	ldr	r0, [pc, #352]	@ (800866c <_printf_i+0x234>)
 800850a:	230a      	movs	r3, #10
 800850c:	e011      	b.n	8008532 <_printf_i+0xfa>
 800850e:	6821      	ldr	r1, [r4, #0]
 8008510:	6833      	ldr	r3, [r6, #0]
 8008512:	0608      	lsls	r0, r1, #24
 8008514:	f853 5b04 	ldr.w	r5, [r3], #4
 8008518:	d402      	bmi.n	8008520 <_printf_i+0xe8>
 800851a:	0649      	lsls	r1, r1, #25
 800851c:	bf48      	it	mi
 800851e:	b2ad      	uxthmi	r5, r5
 8008520:	2f6f      	cmp	r7, #111	@ 0x6f
 8008522:	4852      	ldr	r0, [pc, #328]	@ (800866c <_printf_i+0x234>)
 8008524:	6033      	str	r3, [r6, #0]
 8008526:	bf14      	ite	ne
 8008528:	230a      	movne	r3, #10
 800852a:	2308      	moveq	r3, #8
 800852c:	2100      	movs	r1, #0
 800852e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008532:	6866      	ldr	r6, [r4, #4]
 8008534:	60a6      	str	r6, [r4, #8]
 8008536:	2e00      	cmp	r6, #0
 8008538:	db05      	blt.n	8008546 <_printf_i+0x10e>
 800853a:	6821      	ldr	r1, [r4, #0]
 800853c:	432e      	orrs	r6, r5
 800853e:	f021 0104 	bic.w	r1, r1, #4
 8008542:	6021      	str	r1, [r4, #0]
 8008544:	d04b      	beq.n	80085de <_printf_i+0x1a6>
 8008546:	4616      	mov	r6, r2
 8008548:	fbb5 f1f3 	udiv	r1, r5, r3
 800854c:	fb03 5711 	mls	r7, r3, r1, r5
 8008550:	5dc7      	ldrb	r7, [r0, r7]
 8008552:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008556:	462f      	mov	r7, r5
 8008558:	42bb      	cmp	r3, r7
 800855a:	460d      	mov	r5, r1
 800855c:	d9f4      	bls.n	8008548 <_printf_i+0x110>
 800855e:	2b08      	cmp	r3, #8
 8008560:	d10b      	bne.n	800857a <_printf_i+0x142>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	07df      	lsls	r7, r3, #31
 8008566:	d508      	bpl.n	800857a <_printf_i+0x142>
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	6861      	ldr	r1, [r4, #4]
 800856c:	4299      	cmp	r1, r3
 800856e:	bfde      	ittt	le
 8008570:	2330      	movle	r3, #48	@ 0x30
 8008572:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008576:	f106 36ff 	addle.w	r6, r6, #4294967295
 800857a:	1b92      	subs	r2, r2, r6
 800857c:	6122      	str	r2, [r4, #16]
 800857e:	f8cd a000 	str.w	sl, [sp]
 8008582:	464b      	mov	r3, r9
 8008584:	aa03      	add	r2, sp, #12
 8008586:	4621      	mov	r1, r4
 8008588:	4640      	mov	r0, r8
 800858a:	f7ff fee7 	bl	800835c <_printf_common>
 800858e:	3001      	adds	r0, #1
 8008590:	d14a      	bne.n	8008628 <_printf_i+0x1f0>
 8008592:	f04f 30ff 	mov.w	r0, #4294967295
 8008596:	b004      	add	sp, #16
 8008598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	f043 0320 	orr.w	r3, r3, #32
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	4832      	ldr	r0, [pc, #200]	@ (8008670 <_printf_i+0x238>)
 80085a6:	2778      	movs	r7, #120	@ 0x78
 80085a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	6831      	ldr	r1, [r6, #0]
 80085b0:	061f      	lsls	r7, r3, #24
 80085b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80085b6:	d402      	bmi.n	80085be <_printf_i+0x186>
 80085b8:	065f      	lsls	r7, r3, #25
 80085ba:	bf48      	it	mi
 80085bc:	b2ad      	uxthmi	r5, r5
 80085be:	6031      	str	r1, [r6, #0]
 80085c0:	07d9      	lsls	r1, r3, #31
 80085c2:	bf44      	itt	mi
 80085c4:	f043 0320 	orrmi.w	r3, r3, #32
 80085c8:	6023      	strmi	r3, [r4, #0]
 80085ca:	b11d      	cbz	r5, 80085d4 <_printf_i+0x19c>
 80085cc:	2310      	movs	r3, #16
 80085ce:	e7ad      	b.n	800852c <_printf_i+0xf4>
 80085d0:	4826      	ldr	r0, [pc, #152]	@ (800866c <_printf_i+0x234>)
 80085d2:	e7e9      	b.n	80085a8 <_printf_i+0x170>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	f023 0320 	bic.w	r3, r3, #32
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	e7f6      	b.n	80085cc <_printf_i+0x194>
 80085de:	4616      	mov	r6, r2
 80085e0:	e7bd      	b.n	800855e <_printf_i+0x126>
 80085e2:	6833      	ldr	r3, [r6, #0]
 80085e4:	6825      	ldr	r5, [r4, #0]
 80085e6:	6961      	ldr	r1, [r4, #20]
 80085e8:	1d18      	adds	r0, r3, #4
 80085ea:	6030      	str	r0, [r6, #0]
 80085ec:	062e      	lsls	r6, r5, #24
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	d501      	bpl.n	80085f6 <_printf_i+0x1be>
 80085f2:	6019      	str	r1, [r3, #0]
 80085f4:	e002      	b.n	80085fc <_printf_i+0x1c4>
 80085f6:	0668      	lsls	r0, r5, #25
 80085f8:	d5fb      	bpl.n	80085f2 <_printf_i+0x1ba>
 80085fa:	8019      	strh	r1, [r3, #0]
 80085fc:	2300      	movs	r3, #0
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	4616      	mov	r6, r2
 8008602:	e7bc      	b.n	800857e <_printf_i+0x146>
 8008604:	6833      	ldr	r3, [r6, #0]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	6032      	str	r2, [r6, #0]
 800860a:	681e      	ldr	r6, [r3, #0]
 800860c:	6862      	ldr	r2, [r4, #4]
 800860e:	2100      	movs	r1, #0
 8008610:	4630      	mov	r0, r6
 8008612:	f7f7 fde5 	bl	80001e0 <memchr>
 8008616:	b108      	cbz	r0, 800861c <_printf_i+0x1e4>
 8008618:	1b80      	subs	r0, r0, r6
 800861a:	6060      	str	r0, [r4, #4]
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	2300      	movs	r3, #0
 8008622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008626:	e7aa      	b.n	800857e <_printf_i+0x146>
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	4632      	mov	r2, r6
 800862c:	4649      	mov	r1, r9
 800862e:	4640      	mov	r0, r8
 8008630:	47d0      	blx	sl
 8008632:	3001      	adds	r0, #1
 8008634:	d0ad      	beq.n	8008592 <_printf_i+0x15a>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	079b      	lsls	r3, r3, #30
 800863a:	d413      	bmi.n	8008664 <_printf_i+0x22c>
 800863c:	68e0      	ldr	r0, [r4, #12]
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	4298      	cmp	r0, r3
 8008642:	bfb8      	it	lt
 8008644:	4618      	movlt	r0, r3
 8008646:	e7a6      	b.n	8008596 <_printf_i+0x15e>
 8008648:	2301      	movs	r3, #1
 800864a:	4632      	mov	r2, r6
 800864c:	4649      	mov	r1, r9
 800864e:	4640      	mov	r0, r8
 8008650:	47d0      	blx	sl
 8008652:	3001      	adds	r0, #1
 8008654:	d09d      	beq.n	8008592 <_printf_i+0x15a>
 8008656:	3501      	adds	r5, #1
 8008658:	68e3      	ldr	r3, [r4, #12]
 800865a:	9903      	ldr	r1, [sp, #12]
 800865c:	1a5b      	subs	r3, r3, r1
 800865e:	42ab      	cmp	r3, r5
 8008660:	dcf2      	bgt.n	8008648 <_printf_i+0x210>
 8008662:	e7eb      	b.n	800863c <_printf_i+0x204>
 8008664:	2500      	movs	r5, #0
 8008666:	f104 0619 	add.w	r6, r4, #25
 800866a:	e7f5      	b.n	8008658 <_printf_i+0x220>
 800866c:	08008a3d 	.word	0x08008a3d
 8008670:	08008a4e 	.word	0x08008a4e

08008674 <memmove>:
 8008674:	4288      	cmp	r0, r1
 8008676:	b510      	push	{r4, lr}
 8008678:	eb01 0402 	add.w	r4, r1, r2
 800867c:	d902      	bls.n	8008684 <memmove+0x10>
 800867e:	4284      	cmp	r4, r0
 8008680:	4623      	mov	r3, r4
 8008682:	d807      	bhi.n	8008694 <memmove+0x20>
 8008684:	1e43      	subs	r3, r0, #1
 8008686:	42a1      	cmp	r1, r4
 8008688:	d008      	beq.n	800869c <memmove+0x28>
 800868a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800868e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008692:	e7f8      	b.n	8008686 <memmove+0x12>
 8008694:	4402      	add	r2, r0
 8008696:	4601      	mov	r1, r0
 8008698:	428a      	cmp	r2, r1
 800869a:	d100      	bne.n	800869e <memmove+0x2a>
 800869c:	bd10      	pop	{r4, pc}
 800869e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086a6:	e7f7      	b.n	8008698 <memmove+0x24>

080086a8 <_realloc_r>:
 80086a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ac:	4607      	mov	r7, r0
 80086ae:	4614      	mov	r4, r2
 80086b0:	460d      	mov	r5, r1
 80086b2:	b921      	cbnz	r1, 80086be <_realloc_r+0x16>
 80086b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086b8:	4611      	mov	r1, r2
 80086ba:	f7ff bb99 	b.w	8007df0 <_malloc_r>
 80086be:	b92a      	cbnz	r2, 80086cc <_realloc_r+0x24>
 80086c0:	f7ff fcaa 	bl	8008018 <_free_r>
 80086c4:	4625      	mov	r5, r4
 80086c6:	4628      	mov	r0, r5
 80086c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086cc:	f000 f81a 	bl	8008704 <_malloc_usable_size_r>
 80086d0:	4284      	cmp	r4, r0
 80086d2:	4606      	mov	r6, r0
 80086d4:	d802      	bhi.n	80086dc <_realloc_r+0x34>
 80086d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086da:	d8f4      	bhi.n	80086c6 <_realloc_r+0x1e>
 80086dc:	4621      	mov	r1, r4
 80086de:	4638      	mov	r0, r7
 80086e0:	f7ff fb86 	bl	8007df0 <_malloc_r>
 80086e4:	4680      	mov	r8, r0
 80086e6:	b908      	cbnz	r0, 80086ec <_realloc_r+0x44>
 80086e8:	4645      	mov	r5, r8
 80086ea:	e7ec      	b.n	80086c6 <_realloc_r+0x1e>
 80086ec:	42b4      	cmp	r4, r6
 80086ee:	4622      	mov	r2, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	bf28      	it	cs
 80086f4:	4632      	movcs	r2, r6
 80086f6:	f7ff fc81 	bl	8007ffc <memcpy>
 80086fa:	4629      	mov	r1, r5
 80086fc:	4638      	mov	r0, r7
 80086fe:	f7ff fc8b 	bl	8008018 <_free_r>
 8008702:	e7f1      	b.n	80086e8 <_realloc_r+0x40>

08008704 <_malloc_usable_size_r>:
 8008704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008708:	1f18      	subs	r0, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	bfbc      	itt	lt
 800870e:	580b      	ldrlt	r3, [r1, r0]
 8008710:	18c0      	addlt	r0, r0, r3
 8008712:	4770      	bx	lr

08008714 <_init>:
 8008714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008716:	bf00      	nop
 8008718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871a:	bc08      	pop	{r3}
 800871c:	469e      	mov	lr, r3
 800871e:	4770      	bx	lr

08008720 <_fini>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr
