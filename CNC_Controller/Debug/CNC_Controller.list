
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800dd18  0800dd18  0000ed18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3c0  0800e3c0  00010078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e3c0  0800e3c0  0000f3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3c8  0800e3c8  00010078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3c8  0800e3c8  0000f3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3cc  0800e3cc  0000f3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800e3d0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000115c  20000078  0800e448  00010078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011d4  0800e448  000101d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dabd  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000501d  00000000  00000000  0002db65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  00032b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ec  00000000  00000000  00034708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002923d  00000000  00000000  00035bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025495  00000000  00000000  0005ee31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e40  00000000  00000000  000842c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078e0  00000000  00000000  0017c14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00183a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd00 	.word	0x0800dd00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800dd00 	.word	0x0800dd00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d011      	beq.n	8000724 <has_header_tail+0x40>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d90e      	bls.n	8000724 <has_header_tail+0x40>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	429a      	cmp	r2, r3
 800070e:	d109      	bne.n	8000724 <has_header_tail+0x40>
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3b01      	subs	r3, #1
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	429a      	cmp	r2, r3
 800071e:	d101      	bne.n	8000724 <has_header_tail+0x40>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <has_header_tail+0x42>
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <frame_expect_req+0x1e>
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d202      	bcs.n	8000756 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	e012      	b.n	800077c <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000756:	2355      	movs	r3, #85	@ 0x55
 8000758:	22aa      	movs	r2, #170	@ 0xaa
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff ffc1 	bl	80006e4 <has_header_tail>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	429a      	cmp	r2, r3
 8000772:	d002      	beq.n	800077a <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000774:	f06f 0301 	mvn.w	r3, #1
 8000778:	e000      	b.n	800077c <frame_expect_req+0x4a>
	return PROTO_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <move_end_req_decoder>:
#include "Protocol/Requests/move_end_request.h"

int move_end_req_decoder(const uint8_t *raw, uint32_t len, move_end_req_t *out) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <move_end_req_decoder+0x18>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <move_end_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	e011      	b.n	80007c6 <move_end_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_END, 4);
 80007a2:	2304      	movs	r3, #4
 80007a4:	2206      	movs	r2, #6
 80007a6:	68b9      	ldr	r1, [r7, #8]
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff ffc2 	bl	8000732 <frame_expect_req>
 80007ae:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <move_end_req_decoder+0x36>
		return st;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	e005      	b.n	80007c6 <move_end_req_decoder+0x42>
	out->frameId = raw[2];
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3302      	adds	r3, #2
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80007ce:	b480      	push	{r7}
 80007d0:	b085      	sub	sp, #20
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	4611      	mov	r1, r2
 80007da:	461a      	mov	r2, r3
 80007dc:	460b      	mov	r3, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <has_header_tail+0x40>
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d90e      	bls.n	800080e <has_header_tail+0x40>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d109      	bne.n	800080e <has_header_tail+0x40>
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	429a      	cmp	r2, r3
 8000808:	d101      	bne.n	800080e <has_header_tail+0x40>
 800080a:	2301      	movs	r3, #1
 800080c:	e000      	b.n	8000810 <has_header_tail+0x42>
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b21b      	sxth	r3, r3
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	b21a      	sxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	b29b      	uxth	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <be32_read>:
static inline uint32_t be32_read(const uint8_t *p) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	return (((uint32_t) p[0] << 24) | ((uint32_t) p[1] << 16)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	061a      	lsls	r2, r3, #24
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	431a      	orrs	r2, r3
			| ((uint32_t) p[2] << 8) | (uint32_t) p[3]);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3302      	adds	r3, #2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	4313      	orrs	r3, r2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	3203      	adds	r2, #3
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	4313      	orrs	r3, r2
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4613      	mov	r3, r2
 800088c:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <frame_expect_req+0x1e>
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d202      	bcs.n	80008a2 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	e012      	b.n	80008c8 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80008a2:	2355      	movs	r3, #85	@ 0x55
 80008a4:	22aa      	movs	r2, #170	@ 0xaa
 80008a6:	68b9      	ldr	r1, [r7, #8]
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff ff90 	bl	80007ce <has_header_tail>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d002      	beq.n	80008c6 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80008c0:	f06f 0301 	mvn.w	r3, #1
 80008c4:	e000      	b.n	80008c8 <frame_expect_req+0x4a>
	return PROTO_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <move_queue_add_req_decoder>:
#include "Protocol/Requests/move_queue_add_request.h"

int move_queue_add_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_add_req_t *out) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <move_queue_add_req_decoder+0x18>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <move_queue_add_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	e09a      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_ADD, 42);
 80008ee:	232a      	movs	r3, #42	@ 0x2a
 80008f0:	2201      	movs	r2, #1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff ffc2 	bl	800087e <frame_expect_req>
 80008fa:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <move_queue_add_req_decoder+0x36>
		return st;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	e08e      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	out->frameId = raw[2];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3302      	adds	r3, #2
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	701a      	strb	r2, [r3, #0]
	out->dirMask = raw[3];
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3303      	adds	r3, #3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	705a      	strb	r2, [r3, #1]
	out->vx = be16_read(&raw[4]);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff7c 	bl	800081c <be16_read>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	805a      	strh	r2, [r3, #2]
	out->sx = be32_read(&raw[6]);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3306      	adds	r3, #6
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff89 	bl	8000848 <be32_read>
 8000936:	4602      	mov	r2, r0
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	out->vy = be16_read(&raw[10]);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	330a      	adds	r3, #10
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff6b 	bl	800081c <be16_read>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	811a      	strh	r2, [r3, #8]
	out->sy = be32_read(&raw[12]);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff78 	bl	8000848 <be32_read>
 8000958:	4602      	mov	r2, r0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60da      	str	r2, [r3, #12]
	out->vz = be16_read(&raw[16]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3310      	adds	r3, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff5a 	bl	800081c <be16_read>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	821a      	strh	r2, [r3, #16]
	out->sz = be32_read(&raw[18]);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3312      	adds	r3, #18
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff67 	bl	8000848 <be32_read>
 800097a:	4602      	mov	r2, r0
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	615a      	str	r2, [r3, #20]
	out->kp_x = be16_read(&raw[22]);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3316      	adds	r3, #22
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff49 	bl	800081c <be16_read>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	831a      	strh	r2, [r3, #24]
	out->ki_x = be16_read(&raw[24]);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3318      	adds	r3, #24
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff40 	bl	800081c <be16_read>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	835a      	strh	r2, [r3, #26]
	out->kd_x = be16_read(&raw[26]);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	331a      	adds	r3, #26
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff37 	bl	800081c <be16_read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	839a      	strh	r2, [r3, #28]
	out->kp_y = be16_read(&raw[28]);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	331c      	adds	r3, #28
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff2e 	bl	800081c <be16_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	83da      	strh	r2, [r3, #30]
	out->ki_y = be16_read(&raw[30]);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	331e      	adds	r3, #30
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff25 	bl	800081c <be16_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	841a      	strh	r2, [r3, #32]
	out->kd_y = be16_read(&raw[32]);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3320      	adds	r3, #32
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff1c 	bl	800081c <be16_read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	845a      	strh	r2, [r3, #34]	@ 0x22
	out->kp_z = be16_read(&raw[34]);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3322      	adds	r3, #34	@ 0x22
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff13 	bl	800081c <be16_read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	849a      	strh	r2, [r3, #36]	@ 0x24
	out->ki_z = be16_read(&raw[36]);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3324      	adds	r3, #36	@ 0x24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff0a 	bl	800081c <be16_read>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
	out->kd_z = be16_read(&raw[38]);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3326      	adds	r3, #38	@ 0x26
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff01 	bl	800081c <be16_read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	851a      	strh	r2, [r3, #40]	@ 0x28
	return PROTO_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d011      	beq.n	8000a6c <has_header_tail+0x40>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d90e      	bls.n	8000a6c <has_header_tail+0x40>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d109      	bne.n	8000a6c <has_header_tail+0x40>
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d101      	bne.n	8000a6c <has_header_tail+0x40>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <has_header_tail+0x42>
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <frame_expect_req+0x1e>
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d202      	bcs.n	8000a9e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e012      	b.n	8000ac4 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000a9e:	2355      	movs	r3, #85	@ 0x55
 8000aa0:	22aa      	movs	r2, #170	@ 0xaa
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff ffc1 	bl	8000a2c <has_header_tail>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d002      	beq.n	8000ac2 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000abc:	f06f 0301 	mvn.w	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <move_queue_status_req_decoder>:
#include "Protocol/Requests/move_queue_status_request.h"

int move_queue_status_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_status_req_t *out) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <move_queue_status_req_decoder+0x18>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <move_queue_status_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	e011      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_STATUS, 4);
 8000aea:	2304      	movs	r3, #4
 8000aec:	2202      	movs	r2, #2
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ffc2 	bl	8000a7a <frame_expect_req>
 8000af6:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <move_queue_status_req_decoder+0x36>
		return st;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	e005      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	out->frameId = raw[2];
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3302      	adds	r3, #2
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4611      	mov	r1, r2
 8000b22:	461a      	mov	r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d011      	beq.n	8000b56 <has_header_tail+0x40>
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d90e      	bls.n	8000b56 <has_header_tail+0x40>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d109      	bne.n	8000b56 <has_header_tail+0x40>
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d101      	bne.n	8000b56 <has_header_tail+0x40>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <has_header_tail+0x42>
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <frame_expect_req+0x1e>
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d202      	bcs.n	8000b88 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e012      	b.n	8000bae <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000b88:	2355      	movs	r3, #85	@ 0x55
 8000b8a:	22aa      	movs	r2, #170	@ 0xaa
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ffc1 	bl	8000b16 <has_header_tail>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d002      	beq.n	8000bac <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000ba6:	f06f 0301 	mvn.w	r3, #1
 8000baa:	e000      	b.n	8000bae <frame_expect_req+0x4a>
	return PROTO_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <start_move_req_decoder>:
#include "Protocol/Requests/start_move_request.h"

int start_move_req_decoder(const uint8_t *raw, uint32_t len,
		start_move_req_t *out) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <start_move_req_decoder+0x18>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <start_move_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e011      	b.n	8000bf8 <start_move_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_START_MOVE, 4);
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff ffc2 	bl	8000b64 <frame_expect_req>
 8000be0:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <start_move_req_decoder+0x36>
		return st;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	e005      	b.n	8000bf8 <start_move_req_decoder+0x42>
	out->frameId = raw[2];
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <xor_reduce_bytes>:
// =====================
// Conjunto genérico de auxiliares
// =====================

// XOR sobre bytes (paridade byte a byte)
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	e009      	b.n	8000c28 <xor_reduce_bytes+0x28>
		x ^= p[i];
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3f1      	bcc.n	8000c14 <xor_reduce_bytes+0x14>
	return x;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <set_parity_byte>:
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
		uint32_t parity_index) {
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <set_parity_byte+0x1a>
		return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e00b      	b.n	8000c70 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	18d0      	adds	r0, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	18d4      	adds	r4, r2, r3
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	f7ff ffcb 	bl	8000c00 <xor_reduce_bytes>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	7023      	strb	r3, [r4, #0]
	return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}

08000c78 <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	22ab      	movs	r2, #171	@ 0xab
 8000c88:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	2254      	movs	r2, #84	@ 0x54
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	2101      	movs	r1, #1
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f7ff ffb4 	bl	8000c3e <set_parity_byte>
 8000cd6:	4603      	mov	r3, r0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d802      	bhi.n	8000d04 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e01c      	b.n	8000d3e <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 8000d04:	2107      	movs	r1, #7
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff ffb6 	bl	8000c78 <resp_init>
	raw[2] = in->frameId;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3302      	adds	r3, #2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3303      	adds	r3, #3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	7852      	ldrb	r2, [r2, #1]
 8000d1e:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3304      	adds	r3, #4
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	7892      	ldrb	r2, [r2, #2]
 8000d28:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f7ff ffc5 	bl	8000cbe <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000d34:	2106      	movs	r1, #6
 8000d36:	68b8      	ldr	r0, [r7, #8]
 8000d38:	f7ff ffb1 	bl	8000c9e <resp_set_tail>
	return PROTO_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	22ab      	movs	r2, #171	@ 0xab
 8000d56:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2254      	movs	r2, #84	@ 0x54
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <move_end_resp_encoder>:
	if (st != PROTO_OK)
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int move_end_resp_encoder(const move_end_resp_t *in, uint8_t *raw, uint32_t len) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d802      	bhi.n	8000db0 <move_end_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e00d      	b.n	8000dcc <move_end_resp_encoder+0x40>
	resp_init(raw, RESP_MOVE_END);
 8000db0:	2106      	movs	r1, #6
 8000db2:	68b8      	ldr	r0, [r7, #8]
 8000db4:	f7ff ffc7 	bl	8000d46 <resp_init>
	raw[2] = in->frameId;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	7812      	ldrb	r2, [r2, #0]
 8000dc0:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f7ff ffd1 	bl	8000d6c <resp_set_tail>
	return PROTO_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e009      	b.n	8000dfc <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4053      	eors	r3, r2
 8000df4:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3f1      	bcc.n	8000de8 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4053      	eors	r3, r2
 8000e0e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	4053      	eors	r3, r2
 8000e1a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4053      	eors	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <set_parity_bit>:
		uint32_t parity_index) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <set_parity_bit+0x1a>
		return -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	e010      	b.n	8000e78 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffb8 	bl	8000dd4 <xor_bit_reduce_bytes>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f001 0201 	and.w	r2, r1, #1
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]
	return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	22ab      	movs	r2, #171	@ 0xab
 8000e90:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2254      	movs	r2, #84	@ 0x54
 8000eb8:	701a      	strb	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <parity_set_bit_1N>:
static inline int parity_check_byte_1N(const uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
	return check_parity_byte(raw, 1, last_index, parity_index);
}
static inline int parity_set_bit_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ffaf 	bl	8000e3c <set_parity_bit>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <move_queue_add_ack_resp_encoder>:
	uint8_t b[3] = { RESP_MOVE_QUEUE_ADD_ACK, in ? in->frameId : 0,
			in ? in->status : 0 };
	return xor_bit_reduce_bytes(b, 3);
}
int move_queue_add_ack_resp_encoder(const move_queue_add_ack_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d802      	bhi.n	8000f0c <move_queue_add_ack_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e017      	b.n	8000f3c <move_queue_add_ack_resp_encoder+0x54>
	resp_init(raw, RESP_MOVE_QUEUE_ADD_ACK);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	68b8      	ldr	r0, [r7, #8]
 8000f10:	f7ff ffb6 	bl	8000e80 <resp_init>
	raw[2] = in->frameId;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3302      	adds	r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3303      	adds	r3, #3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	7852      	ldrb	r2, [r2, #1]
 8000f26:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 3, 4);
 8000f28:	2204      	movs	r2, #4
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	68b8      	ldr	r0, [r7, #8]
 8000f2e:	f7ff ffca 	bl	8000ec6 <parity_set_bit_1N>
	resp_set_tail(raw, 5);
 8000f32:	2105      	movs	r1, #5
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff ffb6 	bl	8000ea6 <resp_set_tail>
	return PROTO_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e009      	b.n	8000f6c <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4053      	eors	r3, r2
 8000f64:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f1      	bcc.n	8000f58 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4053      	eors	r3, r2
 8000f8a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4053      	eors	r3, r2
 8000f96:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <set_parity_bit>:
		uint32_t parity_index) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <set_parity_bit+0x1a>
		return -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	e010      	b.n	8000fe8 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffb8 	bl	8000f44 <xor_bit_reduce_bytes>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f001 0201 	and.w	r2, r1, #1
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	22ab      	movs	r2, #171	@ 0xab
 8001000:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	78fa      	ldrb	r2, [r7, #3]
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4413      	add	r3, r2
 8001026:	2254      	movs	r2, #84	@ 0x54
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <parity_set_bit_1N>:
		uint32_t parity_index) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	2101      	movs	r1, #1
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ffaf 	bl	8000fac <set_parity_bit>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <move_queue_status_resp_encoder>:
			in ? in->pidErrZ : 0, in ? in->pctX : 0, in ? in->pctY : 0,
			in ? in->pctZ : 0 };
	return xor_bit_reduce_bytes(b, 9);
}
int move_queue_status_resp_encoder(const move_queue_status_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 12)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b0b      	cmp	r3, #11
 8001074:	d802      	bhi.n	800107c <move_queue_status_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e035      	b.n	80010e8 <move_queue_status_resp_encoder+0x90>
	resp_init(raw, RESP_MOVE_QUEUE_STATUS);
 800107c:	2102      	movs	r1, #2
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff ffb6 	bl	8000ff0 <resp_init>
	raw[2] = in->frameId;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3302      	adds	r3, #2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3303      	adds	r3, #3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	7852      	ldrb	r2, [r2, #1]
 8001096:	701a      	strb	r2, [r3, #0]
	raw[4] = in->pidErrX;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3304      	adds	r3, #4
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	7892      	ldrb	r2, [r2, #2]
 80010a0:	701a      	strb	r2, [r3, #0]
	raw[5] = in->pidErrY;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3305      	adds	r3, #5
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	78d2      	ldrb	r2, [r2, #3]
 80010aa:	701a      	strb	r2, [r3, #0]
	raw[6] = in->pidErrZ;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3306      	adds	r3, #6
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	7912      	ldrb	r2, [r2, #4]
 80010b4:	701a      	strb	r2, [r3, #0]
	raw[7] = in->pctX;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3307      	adds	r3, #7
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	7952      	ldrb	r2, [r2, #5]
 80010be:	701a      	strb	r2, [r3, #0]
	raw[8] = in->pctY;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3308      	adds	r3, #8
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	7992      	ldrb	r2, [r2, #6]
 80010c8:	701a      	strb	r2, [r3, #0]
	raw[9] = in->pctZ;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3309      	adds	r3, #9
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	79d2      	ldrb	r2, [r2, #7]
 80010d2:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 9, 10);
 80010d4:	220a      	movs	r2, #10
 80010d6:	2109      	movs	r1, #9
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f7ff ffac 	bl	8001036 <parity_set_bit_1N>
	resp_set_tail(raw, 11);
 80010de:	210b      	movs	r1, #11
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f7ff ff98 	bl	8001016 <resp_set_tail>
	return PROTO_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	22ab      	movs	r2, #171	@ 0xab
 8001100:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	2254      	movs	r2, #84	@ 0x54
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <start_move_resp_encoder>:
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int start_move_resp_encoder(const start_move_resp_t *in, uint8_t *raw,
		uint32_t len) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d802      	bhi.n	800115a <start_move_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	e00d      	b.n	8001176 <start_move_resp_encoder+0x40>
	resp_init(raw, RESP_START_MOVE);
 800115a:	2103      	movs	r1, #3
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff ffc7 	bl	80010f0 <resp_init>
	raw[2] = in->frameId;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3302      	adds	r3, #2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 800116c:	2103      	movs	r1, #3
 800116e:	68b8      	ldr	r0, [r7, #8]
 8001170:	f7ff ffd1 	bl	8001116 <resp_set_tail>
	return PROTO_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 8001182:	210c      	movs	r1, #12
 8001184:	2001      	movs	r0, #1
 8001186:	f00b fbbb 	bl	800c900 <calloc>
 800118a:	4603      	mov	r3, r0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <resp_fifo_push+0x24>
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e03d      	b.n	8001230 <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 80011b4:	200c      	movs	r0, #12
 80011b6:	f00b fbbf 	bl	800c938 <malloc>
 80011ba:	4603      	mov	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <resp_fifo_push+0x3a>
 80011c4:	f06f 0302 	mvn.w	r3, #2
 80011c8:	e032      	b.n	8001230 <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f00b fbb4 	bl	800c938 <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <resp_fifo_push+0x5c>
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f00b fbb1 	bl	800c948 <free>
 80011e6:	f06f 0302 	mvn.w	r3, #2
 80011ea:	e021      	b.n	8001230 <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00b fef0 	bl	800cfda <memcpy>
    n->len = len;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <resp_fifo_push+0x88>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	e002      	b.n	800121e <resp_fifo_push+0x8e>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]
    q->tail = n;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	605a      	str	r2, [r3, #4]
    q->count++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <resp_fifo_pop+0x20>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <resp_fifo_pop+0x20>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <resp_fifo_pop+0x24>
 8001258:	2300      	movs	r3, #0
 800125a:	e02e      	b.n	80012ba <resp_fifo_pop+0x82>
    node_t *n = q->head;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d202      	bcs.n	8001272 <resp_fifo_pop+0x3a>
 800126c:	f06f 0303 	mvn.w	r3, #3
 8001270:	e023      	b.n	80012ba <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f00b feac 	bl	800cfda <memcpy>
    int ret = (int)n->len;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <resp_fifo_pop+0x66>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
    q->count--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
    free(n->buf);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00b fb4b 	bl	800c948 <free>
    free(n);
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f00b fb48 	bl	800c948 <free>
    return ret;
 80012b8:	693b      	ldr	r3, [r7, #16]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    if (!r) return;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01a      	beq.n	800130c <router_init+0x48>
    memset(r, 0, sizeof(*r));
 80012d6:	2248      	movs	r2, #72	@ 0x48
 80012d8:	2100      	movs	r1, #0
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f00b fdf2 	bl	800cec4 <memset>
    r->resp = resp_fifo;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 80012e6:	2224      	movs	r2, #36	@ 0x24
 80012e8:	2100      	movs	r1, #0
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <router_init+0x50>)
 80012ec:	f00b fdea 	bl	800cec4 <memset>
    if (h) g_handlers = *h;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <router_init+0x4a>
 80012f6:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <router_init+0x50>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4614      	mov	r4, r2
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	e000      	b.n	800130e <router_init+0x4a>
    if (!r) return;
 800130c:	bf00      	nop
}
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	20000094 	.word	0x20000094

08001318 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80c0 	beq.w	80014ac <dispatch+0x194>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80bc 	beq.w	80014ac <dispatch+0x194>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b03      	cmp	r3, #3
 8001338:	f240 80b8 	bls.w	80014ac <dispatch+0x194>
    uint8_t type = f[1];
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b20      	cmp	r3, #32
 8001348:	dc4a      	bgt.n	80013e0 <dispatch+0xc8>
 800134a:	2b00      	cmp	r3, #0
 800134c:	f340 80b0 	ble.w	80014b0 <dispatch+0x198>
 8001350:	3b01      	subs	r3, #1
 8001352:	2b1f      	cmp	r3, #31
 8001354:	f200 80ac 	bhi.w	80014b0 <dispatch+0x198>
 8001358:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <dispatch+0x48>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013fd 	.word	0x080013fd
 8001368:	08001413 	.word	0x08001413
 800136c:	08001429 	.word	0x08001429
 8001370:	0800143f 	.word	0x0800143f
 8001374:	08001455 	.word	0x08001455
 8001378:	0800146b 	.word	0x0800146b
 800137c:	080014b1 	.word	0x080014b1
 8001380:	080014b1 	.word	0x080014b1
 8001384:	080014b1 	.word	0x080014b1
 8001388:	080014b1 	.word	0x080014b1
 800138c:	080014b1 	.word	0x080014b1
 8001390:	080014b1 	.word	0x080014b1
 8001394:	080014b1 	.word	0x080014b1
 8001398:	080014b1 	.word	0x080014b1
 800139c:	080014b1 	.word	0x080014b1
 80013a0:	080014b1 	.word	0x080014b1
 80013a4:	080014b1 	.word	0x080014b1
 80013a8:	080014b1 	.word	0x080014b1
 80013ac:	080014b1 	.word	0x080014b1
 80013b0:	080014b1 	.word	0x080014b1
 80013b4:	080014b1 	.word	0x080014b1
 80013b8:	080014b1 	.word	0x080014b1
 80013bc:	080014b1 	.word	0x080014b1
 80013c0:	080014b1 	.word	0x080014b1
 80013c4:	080014b1 	.word	0x080014b1
 80013c8:	080014b1 	.word	0x080014b1
 80013cc:	080014b1 	.word	0x080014b1
 80013d0:	080014b1 	.word	0x080014b1
 80013d4:	080014b1 	.word	0x080014b1
 80013d8:	080014b1 	.word	0x080014b1
 80013dc:	08001481 	.word	0x08001481
 80013e0:	2b68      	cmp	r3, #104	@ 0x68
 80013e2:	d058      	beq.n	8001496 <dispatch+0x17e>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
        case REQ_MOVE_END:           CALL(on_move_end);           break;
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 80013e4:	e064      	b.n	80014b0 <dispatch+0x198>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <dispatch+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d062      	beq.n	80014b4 <dispatch+0x19c>
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <dispatch+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	4798      	blx	r3
 80013fa:	e05b      	b.n	80014b4 <dispatch+0x19c>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80013fc:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <dispatch+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d059      	beq.n	80014b8 <dispatch+0x1a0>
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <dispatch+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	4798      	blx	r3
 8001410:	e052      	b.n	80014b8 <dispatch+0x1a0>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <dispatch+0x1c4>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d050      	beq.n	80014bc <dispatch+0x1a4>
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <dispatch+0x1c4>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	4798      	blx	r3
 8001426:	e049      	b.n	80014bc <dispatch+0x1a4>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <dispatch+0x1c4>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d047      	beq.n	80014c0 <dispatch+0x1a8>
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <dispatch+0x1c4>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	4798      	blx	r3
 800143c:	e040      	b.n	80014c0 <dispatch+0x1a8>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <dispatch+0x1c4>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d03e      	beq.n	80014c4 <dispatch+0x1ac>
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <dispatch+0x1c4>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	4798      	blx	r3
 8001452:	e037      	b.n	80014c4 <dispatch+0x1ac>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <dispatch+0x1c4>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d035      	beq.n	80014c8 <dispatch+0x1b0>
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <dispatch+0x1c4>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	4798      	blx	r3
 8001468:	e02e      	b.n	80014c8 <dispatch+0x1b0>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <dispatch+0x1c4>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d02c      	beq.n	80014cc <dispatch+0x1b4>
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <dispatch+0x1c4>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	4798      	blx	r3
 800147e:	e025      	b.n	80014cc <dispatch+0x1b4>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <dispatch+0x1c4>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <dispatch+0x1b8>
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <dispatch+0x1c4>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	4798      	blx	r3
 8001494:	e01c      	b.n	80014d0 <dispatch+0x1b8>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <dispatch+0x1c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <dispatch+0x1bc>
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <dispatch+0x1c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	4798      	blx	r3
 80014aa:	e013      	b.n	80014d4 <dispatch+0x1bc>
    if (!r || !f || len < 4) return;
 80014ac:	bf00      	nop
 80014ae:	e012      	b.n	80014d6 <dispatch+0x1be>
        default: /* desconhecido */  break;
 80014b0:	bf00      	nop
 80014b2:	e010      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80014b4:	bf00      	nop
 80014b6:	e00e      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80014b8:	bf00      	nop
 80014ba:	e00c      	b.n	80014d6 <dispatch+0x1be>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 80014bc:	bf00      	nop
 80014be:	e00a      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 80014c0:	bf00      	nop
 80014c2:	e008      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 80014c4:	bf00      	nop
 80014c6:	e006      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 80014c8:	bf00      	nop
 80014ca:	e004      	b.n	80014d6 <dispatch+0x1be>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <dispatch+0x1be>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <dispatch+0x1be>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 80014d4:	bf00      	nop
    }
    #undef CALL
}
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000094 	.word	0x20000094

080014e0 <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d016      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d910      	bls.n	8001520 <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2baa      	cmp	r3, #170	@ 0xaa
 8001504:	d10e      	bne.n	8001524 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3b01      	subs	r3, #1
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b55      	cmp	r3, #85	@ 0x55
 8001512:	d109      	bne.n	8001528 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fefd 	bl	8001318 <dispatch>
 800151e:	e004      	b.n	800152a <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8001520:	bf00      	nop
 8001522:	e002      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8001524:	bf00      	nop
 8001526:	e000      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8001528:	bf00      	nop
}
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <home_service_init>:

LOG_SVC_DEFINE(LOG_SVC_HOME, "home");

static home_status_t g_home;

void home_service_init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af04      	add	r7, sp, #16
	g_home.axis_done_mask = 0;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <home_service_init+0x34>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	g_home.error_flags = 0;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <home_service_init+0x34>)
 800153e:	2200      	movs	r2, #0
 8001540:	705a      	strb	r2, [r3, #1]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8001542:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <home_service_init+0x38>)
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <home_service_init+0x3c>)
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <home_service_init+0x40>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <home_service_init+0x44>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2003      	movs	r0, #3
 8001558:	f000 fcd2 	bl	8001f00 <log_event_auto>
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000b8 	.word	0x200000b8
 8001568:	0800dd18 	.word	0x0800dd18
 800156c:	0800dd20 	.word	0x0800dd20
 8001570:	0800dd24 	.word	0x0800dd24
 8001574:	0800dd28 	.word	0x0800dd28

08001578 <home_on_move_home>:
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <home_on_move_home+0x2c>)
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <home_on_move_home+0x30>)
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <home_on_move_home+0x34>)
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <home_on_move_home+0x38>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	2200      	movs	r2, #0
 8001594:	2101      	movs	r1, #1
 8001596:	2003      	movs	r0, #3
 8001598:	f000 fcb2 	bl	8001f00 <log_event_auto>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0800dd18 	.word	0x0800dd18
 80015a8:	0800dd30 	.word	0x0800dd30
 80015ac:	0800dd24 	.word	0x0800dd24
 80015b0:	0800dd40 	.word	0x0800dd40

080015b4 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    if (!led)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f107 020c 	add.w	r2, r7, #12
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 ffa0 	bl	8005534 <HAL_GPIO_Init>
 80015f4:	e000      	b.n	80015f8 <led_gpio_config_output+0x44>
        return;
 80015f6:	bf00      	nop
}
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	b088      	sub	sp, #32
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
    if (!led)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	889b      	ldrh	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f003 ff78 	bl	8005534 <HAL_GPIO_Init>
 8001644:	e000      	b.n	8001648 <led_gpio_config_pwm+0x4a>
        return;
 8001646:	bf00      	nop
}
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	460b      	mov	r3, r1
 800165c:	71bb      	strb	r3, [r7, #6]
 800165e:	4613      	mov	r3, r2
 8001660:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	733b      	strb	r3, [r7, #12]
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	737b      	strb	r3, [r7, #13]
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 800166e:	f107 0110 	add.w	r1, r7, #16
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2207      	movs	r2, #7
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb31 	bl	8000ce0 <led_ctrl_resp_encoder>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8001684:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <led_push_response+0x80>)
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <led_push_response+0x84>)
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <led_push_response+0x88>)
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	2164      	movs	r1, #100	@ 0x64
 8001696:	2001      	movs	r0, #1
 8001698:	f000 fc32 	bl	8001f00 <log_event_auto>
 800169c:	e014      	b.n	80016c8 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2107      	movs	r1, #7
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 f8e9 	bl	800387c <app_resp_push>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <led_push_response+0x80>)
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <led_push_response+0x8c>)
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <led_push_response+0x88>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	f06f 0203 	mvn.w	r2, #3
 80016c0:	2164      	movs	r1, #100	@ 0x64
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 fc1c 	bl	8001f00 <log_event_auto>
    }
}
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0800dd4c 	.word	0x0800dd4c
 80016d4:	0800dd50 	.word	0x0800dd50
 80016d8:	0800dd6c 	.word	0x0800dd6c
 80016dc:	0800dd74 	.word	0x0800dd74

080016e0 <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 80016e6:	f005 faeb 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 80016ea:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <led_timer_get_clock+0x34>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80016f4:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <led_timer_get_clock+0x28>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <led_timer_get_clock+0x28>
        clk *= 2u;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000

08001718 <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b094      	sub	sp, #80	@ 0x50
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8001724:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <led_compute_period_ticks+0x16>
        return 0u;
 800172a:	2300      	movs	r3, #0
 800172c:	e066      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 800172e:	f7ff ffd7 	bl	80016e0 <led_timer_get_clock>
 8001732:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <led_compute_period_ticks+0xf0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 800173c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <led_compute_period_ticks+0x2e>
        return 0u;
 8001742:	2300      	movs	r3, #0
 8001744:	e05a      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8001746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8001750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <led_compute_period_ticks+0x42>
        return 0u;
 8001756:	2300      	movs	r3, #0
 8001758:	e050      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 800175a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175c:	2200      	movs	r2, #0
 800175e:	4698      	mov	r8, r3
 8001760:	4691      	mov	r9, r2
 8001762:	4642      	mov	r2, r8
 8001764:	464b      	mov	r3, r9
 8001766:	1891      	adds	r1, r2, r2
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	415b      	adcs	r3, r3
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001772:	eb12 0408 	adds.w	r4, r2, r8
 8001776:	eb43 0509 	adc.w	r5, r3, r9
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	016b      	lsls	r3, r5, #5
 8001784:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001788:	0162      	lsls	r2, r4, #5
 800178a:	eb14 0a02 	adds.w	sl, r4, r2
 800178e:	eb45 0b03 	adc.w	fp, r5, r3
 8001792:	eb1a 0308 	adds.w	r3, sl, r8
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	eb4b 0309 	adc.w	r3, fp, r9
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 80017a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017b8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017bc:	4621      	mov	r1, r4
 80017be:	1889      	adds	r1, r1, r2
 80017c0:	61b9      	str	r1, [r7, #24]
 80017c2:	4629      	mov	r1, r5
 80017c4:	eb43 0101 	adc.w	r1, r3, r1
 80017c8:	61f9      	str	r1, [r7, #28]
 80017ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017cc:	2200      	movs	r2, #0
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	617a      	str	r2, [r7, #20]
 80017d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017da:	f7fe fd49 	bl	8000270 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 80017e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d305      	bcc.n	80017fa <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 80017fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3750      	adds	r7, #80	@ 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001806:	bf00      	nop
 8001808:	20000fb0 	.word	0x20000fb0

0800180c <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <led_apply_pwm+0x14>
        period_ticks = 1u;
 800181c:	2301      	movs	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d901      	bls.n	800182c <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <led_apply_pwm+0x2c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3b01      	subs	r3, #1
 8001836:	e000      	b.n	800183a <led_apply_pwm+0x2e>
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <led_apply_pwm+0x5c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001844:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <led_apply_pwm+0x5c>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <led_apply_pwm+0x5c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8001852:	2101      	movs	r1, #1
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <led_apply_pwm+0x5c>)
 8001856:	f008 fd2f 	bl	800a2b8 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 800185a:	4a03      	ldr	r2, [pc, #12]	@ (8001868 <led_apply_pwm+0x5c>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000fb0 	.word	0x20000fb0

0800186c <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
    if (!led)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d029      	beq.n	80018ce <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 800187a:	f000 f913 	bl	8001aa4 <led_pwm_stop>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00d      	beq.n	80018a4 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001888:	4a13      	ldr	r2, [pc, #76]	@ (80018d8 <led_force_off+0x6c>)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <led_force_off+0x70>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <led_force_off+0x74>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	f06f 0203 	mvn.w	r2, #3
 800189c:	2164      	movs	r1, #100	@ 0x64
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fb2e 	bl	8001f00 <log_event_auto>
    }
    led_gpio_config_output(led);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe85 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	f004 f9f3 	bl	8005ca0 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	735a      	strb	r2, [r3, #13]
 80018cc:	e000      	b.n	80018d0 <led_force_off+0x64>
        return;
 80018ce:	bf00      	nop
}
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800dd4c 	.word	0x0800dd4c
 80018dc:	0800dd8c 	.word	0x0800dd8c
 80018e0:	0800ddb0 	.word	0x0800ddb0

080018e4 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af04      	add	r7, sp, #16
 80018ea:	6078      	str	r0, [r7, #4]
    if (!led)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d029      	beq.n	8001946 <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 80018f2:	f000 f8d7 	bl	8001aa4 <led_pwm_stop>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00d      	beq.n	800191c <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001900:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <led_force_on+0x6c>)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <led_force_on+0x70>)
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <led_force_on+0x74>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	f06f 0203 	mvn.w	r2, #3
 8001914:	2164      	movs	r1, #100	@ 0x64
 8001916:	2001      	movs	r0, #1
 8001918:	f000 faf2 	bl	8001f00 <log_event_auto>
    }
    led_gpio_config_output(led);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fe49 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f004 f9b7 	bl	8005ca0 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	735a      	strb	r2, [r3, #13]
 8001944:	e000      	b.n	8001948 <led_force_on+0x64>
        return;
 8001946:	bf00      	nop
}
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800dd4c 	.word	0x0800dd4c
 8001954:	0800dd8c 	.word	0x0800dd8c
 8001958:	0800ddb0 	.word	0x0800ddb0

0800195c <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <led_force_blink+0x8c>
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d039      	beq.n	80019e8 <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fece 	bl	8001718 <led_compute_period_ticks>
 800197c:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d801      	bhi.n	8001988 <led_force_blink+0x2c>
        period_ticks = 2u;
 8001984:	2302      	movs	r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198e:	d902      	bls.n	8001996 <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8001990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001994:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fe2e 	bl	80015fe <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff ff31 	bl	800180c <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 80019aa:	f000 f85d 	bl	8001a68 <led_pwm_start>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00f      	beq.n	80019d4 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 80019b4:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <led_force_blink+0x94>)
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <led_force_blink+0x98>)
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <led_force_blink+0x9c>)
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	f06f 0203 	mvn.w	r2, #3
 80019c4:	2164      	movs	r1, #100	@ 0x64
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fa9a 	bl	8001f00 <log_event_auto>
        led_force_off(led);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff4d 	bl	800186c <led_force_off>
        return;
 80019d2:	e00a      	b.n	80019ea <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	735a      	strb	r2, [r3, #13]
 80019e6:	e000      	b.n	80019ea <led_force_blink+0x8e>
        return;
 80019e8:	bf00      	nop
}
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	0800dd4c 	.word	0x0800dd4c
 80019f4:	0800ddb8 	.word	0x0800ddb8
 80019f8:	0800ddb0 	.word	0x0800ddb0

080019fc <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	803b      	strh	r3, [r7, #0]
    if (!led)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d026      	beq.n	8001a60 <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a22:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8001a24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d103      	bne.n	8001a38 <led_apply_config+0x3c>
        led_force_on(led);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff57 	bl	80018e4 <led_force_on>
 8001a36:	e00e      	b.n	8001a56 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d108      	bne.n	8001a50 <led_apply_config+0x54>
 8001a3e:	883b      	ldrh	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 8001a44:	883b      	ldrh	r3, [r7, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff87 	bl	800195c <led_force_blink>
 8001a4e:	e002      	b.n	8001a56 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff0b 	bl	800186c <led_force_off>
    }

    if (primask == 0u) {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5c:	b662      	cpsie	i
}
 8001a5e:	e000      	b.n	8001a62 <led_apply_config+0x66>
        return;
 8001a60:	bf00      	nop
        __enable_irq();
    }
}
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <led_pwm_start+0x34>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <led_pwm_start+0x12>
        return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e00c      	b.n	8001a94 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <led_pwm_start+0x38>)
 8001a7e:	f007 fb61 	bl	8009144 <HAL_TIM_PWM_Start>
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <led_pwm_start+0x34>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000ba 	.word	0x200000ba
 8001aa0:	20000fb0 	.word	0x20000fb0

08001aa4 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <led_pwm_stop+0x64>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <led_pwm_stop+0x12>
        return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e024      	b.n	8001b00 <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aba:	f007 fcf3 	bl	80094a4 <HAL_TIM_PWM_Stop>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11a      	bne.n	8001afe <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10f      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <led_pwm_stop+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <led_pwm_stop+0x68>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <led_pwm_stop+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000ba 	.word	0x200000ba
 8001b0c:	20000fb0 	.word	0x20000fb0

08001b10 <led_service_init>:

void led_service_init(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af02      	add	r7, sp, #8
    g_pwm_running = 0u;
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <led_service_init+0x110>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e02d      	b.n	8001b7e <led_service_init+0x6e>
        led_gpio_config_output(&g_leds[i]);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	4a3f      	ldr	r2, [pc, #252]	@ (8001c24 <led_service_init+0x114>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fd42 	bl	80015b4 <led_gpio_config_output>
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 8001b30:	4a3c      	ldr	r2, [pc, #240]	@ (8001c24 <led_service_init+0x114>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <led_service_init+0x114>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f004 f8a9 	bl	8005ca0 <HAL_GPIO_WritePin>
        g_leds[i].mode = LED_MODE_OFF;
 8001b4e:	4a35      	ldr	r2, [pc, #212]	@ (8001c24 <led_service_init+0x114>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	330c      	adds	r3, #12
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_centi_hz = 0u;
 8001b5c:	4a31      	ldr	r2, [pc, #196]	@ (8001c24 <led_service_init+0x114>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	330e      	adds	r3, #14
 8001b66:	2200      	movs	r2, #0
 8001b68:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 8001b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c24 <led_service_init+0x114>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	330d      	adds	r3, #13
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ce      	beq.n	8001b22 <led_service_init+0x12>
    }

    if (htim15.Instance != TIM15) {
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <led_service_init+0x118>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <led_service_init+0x11c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d001      	beq.n	8001b92 <led_service_init+0x82>
        MX_TIM15_Init();
 8001b8e:	f002 fd0f 	bl	80045b0 <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8001b92:	4825      	ldr	r0, [pc, #148]	@ (8001c28 <led_service_init+0x118>)
 8001b94:	f007 f9c2 	bl	8008f1c <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <led_service_init+0xa8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 8001b9e:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <led_service_init+0x120>)
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <led_service_init+0x124>)
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <led_service_init+0x128>)
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	f06f 0203 	mvn.w	r2, #3
 8001bae:	2164      	movs	r1, #100	@ 0x64
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 f9a5 	bl	8001f00 <log_event_auto>
        return;
 8001bb6:	e02f      	b.n	8001c18 <led_service_init+0x108>
    }

    TIM_OC_InitTypeDef oc = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	@ 0x60
 8001bcc:	603b      	str	r3, [r7, #0]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    oc.Pulse = 0u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	480e      	ldr	r0, [pc, #56]	@ (8001c28 <led_service_init+0x118>)
 8001bee:	f008 f915 	bl	8009e1c <HAL_TIM_PWM_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <led_service_init+0x102>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <led_service_init+0x120>)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <led_service_init+0x12c>)
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <led_service_init+0x128>)
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	f06f 0203 	mvn.w	r2, #3
 8001c08:	2164      	movs	r1, #100	@ 0x64
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 f978 	bl	8001f00 <log_event_auto>
        return;
 8001c10:	e002      	b.n	8001c18 <led_service_init+0x108>
    }

    led_force_off(&g_leds[0]);
 8001c12:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <led_service_init+0x114>)
 8001c14:	f7ff fe2a 	bl	800186c <led_force_off>
}
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000ba 	.word	0x200000ba
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000fb0 	.word	0x20000fb0
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	0800dd4c 	.word	0x0800dd4c
 8001c34:	0800ddd8 	.word	0x0800ddd8
 8001c38:	0800ddb0 	.word	0x0800ddb0
 8001c3c:	0800ddfc 	.word	0x0800ddfc

08001c40 <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b097      	sub	sp, #92	@ 0x5c
 8001c44:	af0a      	add	r7, sp, #40	@ 0x28
 8001c46:	6178      	str	r0, [r7, #20]
 8001c48:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80d2 	beq.w	8001df6 <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d902      	bls.n	8001c5e <led_on_led_ctrl+0x1e>
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c5c:	d90e      	bls.n	8001c7c <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 8001c5e:	4a68      	ldr	r2, [pc, #416]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <led_on_led_ctrl+0x1c4>)
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	4b67      	ldr	r3, [pc, #412]	@ (8001e08 <led_on_led_ctrl+0x1c8>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	f06f 0203 	mvn.w	r2, #3
 8001c72:	2164      	movs	r1, #100	@ 0x64
 8001c74:	2001      	movs	r0, #1
 8001c76:	f000 f943 	bl	8001f00 <log_event_auto>
        return;
 8001c7a:	e0bd      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	461a      	mov	r2, r3
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7fe fcef 	bl	8000668 <led_ctrl_req_decoder>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 8001c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00f      	beq.n	8001cb8 <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 8001c98:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8001c9c:	4958      	ldr	r1, [pc, #352]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	4b59      	ldr	r3, [pc, #356]	@ (8001e0c <led_on_led_ctrl+0x1cc>)
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <led_on_led_ctrl+0x1d0>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	2164      	movs	r1, #100	@ 0x64
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 f925 	bl	8001f00 <log_event_auto>
        return;
 8001cb6:	e09f      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 8001cb8:	7f7b      	ldrb	r3, [r7, #29]
 8001cba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd4:	e02d      	b.n	8001d32 <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 8001cdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01e      	beq.n	8001d2a <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8001cec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4a45      	ldr	r2, [pc, #276]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d00:	1898      	adds	r0, r3, r2
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3320      	adds	r3, #32
 8001d08:	f107 0210 	add.w	r2, r7, #16
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	3320      	adds	r3, #32
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f7ff fe6a 	bl	80019fc <led_apply_config>
 8001d28:	e000      	b.n	8001d2c <led_on_led_ctrl+0xec>
            continue;
 8001d2a:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2e:	3301      	adds	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ce      	beq.n	8001cd6 <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8001d38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d44:	4013      	ands	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001d52:	e00a      	b.n	8001d6a <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8001d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <led_on_led_ctrl+0x12a>
 8001d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 8001d6a:	7f3b      	ldrb	r3, [r7, #28]
 8001d6c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001d70:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc6b 	bl	8001650 <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 8001d7a:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001d7e:	4e20      	ldr	r6, [pc, #128]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001d80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001d84:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d88:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d90:	89db      	ldrh	r3, [r3, #14]
 8001d92:	4821      	ldr	r0, [pc, #132]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001d94:	fba0 0303 	umull	r0, r3, r0, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001da0:	89db      	ldrh	r3, [r3, #14]
 8001da2:	481d      	ldr	r0, [pc, #116]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001da4:	fba0 5003 	umull	r5, r0, r0, r3
 8001da8:	0940      	lsrs	r0, r0, #5
 8001daa:	2564      	movs	r5, #100	@ 0x64
 8001dac:	fb05 f000 	mul.w	r0, r5, r0
 8001db0:	1a1b      	subs	r3, r3, r0
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461d      	mov	r5, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001db8:	7b5b      	ldrb	r3, [r3, #13]
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dc6:	6800      	ldr	r0, [r0, #0]
 8001dc8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001dca:	9009      	str	r0, [sp, #36]	@ 0x24
 8001dcc:	9308      	str	r3, [sp, #32]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	9007      	str	r0, [sp, #28]
 8001dd2:	9506      	str	r5, [sp, #24]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	9005      	str	r0, [sp, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	9103      	str	r1, [sp, #12]
 8001dde:	9202      	str	r2, [sp, #8]
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <led_on_led_ctrl+0x1e0>)
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <led_on_led_ctrl+0x1e4>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4633      	mov	r3, r6
 8001dea:	4622      	mov	r2, r4
 8001dec:	2102      	movs	r1, #2
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 f886 	bl	8001f00 <log_event_auto>
 8001df4:	e000      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
        return;
 8001df6:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
}
 8001df8:	3734      	adds	r7, #52	@ 0x34
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800dd4c 	.word	0x0800dd4c
 8001e04:	0800de24 	.word	0x0800de24
 8001e08:	0800de40 	.word	0x0800de40
 8001e0c:	0800de44 	.word	0x0800de44
 8001e10:	0800de68 	.word	0x0800de68
 8001e14:	20000000 	.word	0x20000000
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	20000fb0 	.word	0x20000fb0
 8001e20:	0800de70 	.word	0x0800de70
 8001e24:	0800dec0 	.word	0x0800dec0

08001e28 <log_service_init>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "usart.h"

void log_service_init(void){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <log_service_init+0x18>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6898      	ldr	r0, [r3, #8]
 8001e32:	2300      	movs	r3, #0
 8001e34:	2202      	movs	r2, #2
 8001e36:	2100      	movs	r1, #0
 8001e38:	f00a ff10 	bl	800cc5c <setvbuf>
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000028 	.word	0x20000028

08001e44 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	603a      	str	r2, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	460b      	mov	r3, r1
 8001e52:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 8001e54:	79f9      	ldrb	r1, [r7, #7]
 8001e56:	79ba      	ldrb	r2, [r7, #6]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <log_event_ids+0x24>)
 8001e5c:	f00a feec 	bl	800cc38 <iprintf>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	0800dec8 	.word	0x0800dec8

08001e6c <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <log_event_names+0x16>
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <log_event_names+0x40>)
 8001e80:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <log_event_names+0x20>
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <log_event_names+0x40>)
 8001e8a:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <log_event_names+0x2a>
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <log_event_names+0x40>)
 8001e94:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <log_event_names+0x44>)
 8001e9e:	f00a fecb 	bl	800cc38 <iprintf>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	0800dee8 	.word	0x0800dee8
 8001eb0:	0800deec 	.word	0x0800deec

08001eb4 <_write>:

// Mantém _write exatamente igual: utilizado pelo printf para enviar à USART1.
int _write(int fd, char *ptr, int len) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d002      	beq.n	8001ecc <_write+0x18>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d111      	bne.n	8001ef0 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	4809      	ldr	r0, [pc, #36]	@ (8001efc <_write+0x48>)
 8001ed8:	f009 fe50 	bl	800bb7c <HAL_UART_Transmit>
 8001edc:	4603      	mov	r3, r0
 8001ede:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <_write+0x36>
        return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e004      	b.n	8001ef4 <_write+0x40>
      else
        return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e001      	b.n	8001ef4 <_write+0x40>
    }
    return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000ffc 	.word	0x20000ffc

08001f00 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0a8      	sub	sp, #160	@ 0xa0
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60ba      	str	r2, [r7, #8]
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 8001f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <log_event_auto+0x3c>
 8001f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8001f24:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001f28:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001f2a:	f107 0018 	add.w	r0, r7, #24
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	f00a ffb7 	bl	800cea8 <vsniprintf>
    if(fmt && fmt[0]){
 8001f3a:	e003      	b.n	8001f44 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001f3c:	233f      	movs	r3, #63	@ 0x3f
 8001f3e:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8001f40:	2300      	movs	r3, #0
 8001f42:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <log_event_auto+0x4e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e000      	b.n	8001f50 <log_event_auto+0x50>
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <log_event_auto+0x84>)
 8001f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8001f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <log_event_auto+0x62>
 8001f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f60:	e000      	b.n	8001f64 <log_event_auto+0x64>
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <log_event_auto+0x84>)
 8001f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001f70:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <log_event_auto+0x88>)
 8001f76:	f00a fe5f 	bl	800cc38 <iprintf>
}
 8001f7a:	bf00      	nop
 8001f7c:	37a0      	adds	r7, #160	@ 0xa0
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	0800dee8 	.word	0x0800dee8
 8001f88:	0800deec 	.word	0x0800deec

08001f8c <gpio_set_high>:
static int64_t g_encoder_position[MOTION_AXIS_COUNT];
static uint32_t g_encoder_last_raw[MOTION_AXIS_COUNT];
static int64_t g_encoder_origin[MOTION_AXIS_COUNT];
// Flags de teste/demonstração
static volatile uint8_t g_demo_continuous = 0u; // quando 1, gera passos continuamente
static inline void gpio_set_high(GPIO_TypeDef *port, uint16_t pin) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
	if (!port)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <gpio_set_high+0x1a>
		return;
	port->BSRR = pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	e000      	b.n	8001fa8 <gpio_set_high+0x1c>
		return;
 8001fa6:	bf00      	nop
}
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <gpio_set_low>:
static inline void gpio_set_low(GPIO_TypeDef *port, uint16_t pin) {
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	807b      	strh	r3, [r7, #2]
	if (!port)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <gpio_set_low+0x1c>
		return;
	port->BSRR = ((uint32_t) pin) << 16u;
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
 8001fcc:	e000      	b.n	8001fd0 <gpio_set_low+0x1e>
		return;
 8001fce:	bf00      	nop
}
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <motion_lock>:
static inline uint32_t motion_lock(void) {
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe4:	603b      	str	r3, [r7, #0]
  return(result);
 8001fe6:	683b      	ldr	r3, [r7, #0]
	uint32_t primask = __get_PRIMASK();
 8001fe8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fea:	b672      	cpsid	i
}
 8001fec:	bf00      	nop
	__disable_irq();
	return primask;
 8001fee:	687b      	ldr	r3, [r7, #4]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <motion_unlock>:
static inline void motion_unlock(uint32_t primask) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f383 8810 	msr	PRIMASK, r3
}
 800200e:	bf00      	nop
	__set_PRIMASK(primask);
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <motion_total_for_axis>:
static inline uint32_t motion_total_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <motion_total_for_axis+0x18>
 800202e:	2b01      	cmp	r3, #1
 8002030:	d003      	beq.n	800203a <motion_total_for_axis+0x1e>
 8002032:	e005      	b.n	8002040 <motion_total_for_axis+0x24>
	case AXIS_X:
		return req->sx;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	e004      	b.n	8002044 <motion_total_for_axis+0x28>
	case AXIS_Y:
		return req->sy;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	e001      	b.n	8002044 <motion_total_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->sz;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
	}
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <motion_velocity_for_axis>:
static inline uint16_t motion_velocity_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <motion_velocity_for_axis+0x18>
 8002062:	2b01      	cmp	r3, #1
 8002064:	d003      	beq.n	800206e <motion_velocity_for_axis+0x1e>
 8002066:	e005      	b.n	8002074 <motion_velocity_for_axis+0x24>
	case AXIS_X:
		return req->vx;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	885b      	ldrh	r3, [r3, #2]
 800206c:	e004      	b.n	8002078 <motion_velocity_for_axis+0x28>
	case AXIS_Y:
		return req->vy;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	891b      	ldrh	r3, [r3, #8]
 8002072:	e001      	b.n	8002078 <motion_velocity_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->vz;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8a1b      	ldrh	r3, [r3, #16]
	}
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <motion_kp_for_axis>:
static inline uint16_t motion_kp_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <motion_kp_for_axis+0x18>
 8002096:	2b01      	cmp	r3, #1
 8002098:	d003      	beq.n	80020a2 <motion_kp_for_axis+0x1e>
 800209a:	e005      	b.n	80020a8 <motion_kp_for_axis+0x24>
	case AXIS_X:
		return req->kp_x;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8b1b      	ldrh	r3, [r3, #24]
 80020a0:	e004      	b.n	80020ac <motion_kp_for_axis+0x28>
	case AXIS_Y:
		return req->kp_y;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8bdb      	ldrh	r3, [r3, #30]
 80020a6:	e001      	b.n	80020ac <motion_kp_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->kp_z;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
	}
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <motion_ki_for_axis>:
static inline uint16_t motion_ki_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <motion_ki_for_axis+0x18>
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d003      	beq.n	80020d6 <motion_ki_for_axis+0x1e>
 80020ce:	e005      	b.n	80020dc <motion_ki_for_axis+0x24>
	case AXIS_X:
		return req->ki_x;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8b5b      	ldrh	r3, [r3, #26]
 80020d4:	e004      	b.n	80020e0 <motion_ki_for_axis+0x28>
	case AXIS_Y:
		return req->ki_y;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8c1b      	ldrh	r3, [r3, #32]
 80020da:	e001      	b.n	80020e0 <motion_ki_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->ki_z;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
	}
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <motion_kd_for_axis>:
static inline uint16_t motion_kd_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <motion_kd_for_axis+0x18>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d003      	beq.n	800210a <motion_kd_for_axis+0x1e>
 8002102:	e005      	b.n	8002110 <motion_kd_for_axis+0x24>
	case AXIS_X:
		return req->kd_x;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8b9b      	ldrh	r3, [r3, #28]
 8002108:	e004      	b.n	8002114 <motion_kd_for_axis+0x28>
	case AXIS_Y:
		return req->kd_y;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800210e:	e001      	b.n	8002114 <motion_kd_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->kd_z;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
	}
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <motion_clamp_error>:
static inline int8_t motion_clamp_error(int32_t value) {
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if (value > 127)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b7f      	cmp	r3, #127	@ 0x7f
 800212c:	dd01      	ble.n	8002132 <motion_clamp_error+0x12>
		return 127;
 800212e:	237f      	movs	r3, #127	@ 0x7f
 8002130:	e008      	b.n	8002144 <motion_clamp_error+0x24>
	if (value < -128)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002138:	da02      	bge.n	8002140 <motion_clamp_error+0x20>
		return -128;
 800213a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800213e:	e001      	b.n	8002144 <motion_clamp_error+0x24>
	return (int8_t) value;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	b25b      	sxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <motion_refresh_status_locked>:
static void motion_refresh_status_locked(void) {
 8002150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002154:	b0a3      	sub	sp, #140	@ 0x8c
 8002156:	af00      	add	r7, sp, #0
	g_status.queue_depth = (uint8_t) (g_queue_count
			+ (g_has_active_segment ? 1u : 0u));
 8002158:	4b9a      	ldr	r3, [pc, #616]	@ (80023c4 <motion_refresh_status_locked+0x274>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
	g_status.queue_depth = (uint8_t) (g_queue_count
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <motion_refresh_status_locked+0x16>
 8002162:	2201      	movs	r2, #1
 8002164:	e000      	b.n	8002168 <motion_refresh_status_locked+0x18>
 8002166:	2200      	movs	r2, #0
 8002168:	4b97      	ldr	r3, [pc, #604]	@ (80023c8 <motion_refresh_status_locked+0x278>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4413      	add	r3, r2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4a96      	ldr	r2, [pc, #600]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002172:	7053      	strb	r3, [r2, #1]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800217a:	e118      	b.n	80023ae <motion_refresh_status_locked+0x25e>
		const motion_axis_state_t *ax = &g_axis_state[axis];
 800217c:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4a91      	ldr	r2, [pc, #580]	@ (80023d0 <motion_refresh_status_locked+0x280>)
 800218a:	4413      	add	r3, r2
 800218c:	677b      	str	r3, [r7, #116]	@ 0x74
		uint32_t total = ax->total_steps;
 800218e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	673b      	str	r3, [r7, #112]	@ 0x70
		uint32_t emitted = ax->emitted_steps;
 8002194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	66fb      	str	r3, [r7, #108]	@ 0x6c
		uint8_t pct = 0u;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		if (g_has_active_segment && total > 0u) {
 80021a0:	4b88      	ldr	r3, [pc, #544]	@ (80023c4 <motion_refresh_status_locked+0x274>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d049      	beq.n	800223e <motion_refresh_status_locked+0xee>
 80021aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d046      	beq.n	800223e <motion_refresh_status_locked+0xee>
			uint64_t scaled = (uint64_t) emitted * 100u;
 80021b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b2:	2200      	movs	r2, #0
 80021b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80021b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021bc:	1891      	adds	r1, r2, r2
 80021be:	6239      	str	r1, [r7, #32]
 80021c0:	415b      	adcs	r3, r3
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021c8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80021ca:	eb12 0801 	adds.w	r8, r2, r1
 80021ce:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80021d0:	eb43 0901 	adc.w	r9, r3, r1
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80021e0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80021e4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80021e8:	eb18 0102 	adds.w	r1, r8, r2
 80021ec:	6439      	str	r1, [r7, #64]	@ 0x40
 80021ee:	eb49 0303 	adc.w	r3, r9, r3
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80021fa:	4602      	mov	r2, r0
 80021fc:	189b      	adds	r3, r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002202:	460a      	mov	r2, r1
 8002204:	4153      	adcs	r3, r2
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			pct = (uint8_t) (scaled / total);
 8002210:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002212:	2200      	movs	r2, #0
 8002214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002216:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800221c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002220:	f7fe f826 	bl	8000270 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			if (pct > 100u)
 800222e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002232:	2b64      	cmp	r3, #100	@ 0x64
 8002234:	d954      	bls.n	80022e0 <motion_refresh_status_locked+0x190>
				pct = 100u;
 8002236:	2364      	movs	r3, #100	@ 0x64
 8002238:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		if (g_has_active_segment && total > 0u) {
 800223c:	e050      	b.n	80022e0 <motion_refresh_status_locked+0x190>
		} else if (total == 0u && g_has_active_segment) {
 800223e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002240:	2b00      	cmp	r3, #0
 8002242:	d108      	bne.n	8002256 <motion_refresh_status_locked+0x106>
 8002244:	4b5f      	ldr	r3, [pc, #380]	@ (80023c4 <motion_refresh_status_locked+0x274>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <motion_refresh_status_locked+0x106>
			pct = 100u;
 800224e:	2364      	movs	r3, #100	@ 0x64
 8002250:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002254:	e045      	b.n	80022e2 <motion_refresh_status_locked+0x192>
		} else if (!g_has_active_segment && total > 0u) {
 8002256:	4b5b      	ldr	r3, [pc, #364]	@ (80023c4 <motion_refresh_status_locked+0x274>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d140      	bne.n	80022e2 <motion_refresh_status_locked+0x192>
 8002260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002262:	2b00      	cmp	r3, #0
 8002264:	d03d      	beq.n	80022e2 <motion_refresh_status_locked+0x192>
			pct = (emitted >= total) ?
 8002266:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002268:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800226a:	429a      	cmp	r2, r3
 800226c:	d234      	bcs.n	80022d8 <motion_refresh_status_locked+0x188>
					100u : (uint8_t) (((uint64_t) emitted * 100u) / total);
 800226e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002270:	2200      	movs	r2, #0
 8002272:	469a      	mov	sl, r3
 8002274:	4693      	mov	fp, r2
 8002276:	4652      	mov	r2, sl
 8002278:	465b      	mov	r3, fp
 800227a:	1891      	adds	r1, r2, r2
 800227c:	6139      	str	r1, [r7, #16]
 800227e:	415b      	adcs	r3, r3
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002286:	eb12 040a 	adds.w	r4, r2, sl
 800228a:	eb43 050b 	adc.w	r5, r3, fp
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	016b      	lsls	r3, r5, #5
 8002298:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800229c:	0162      	lsls	r2, r4, #5
 800229e:	18a1      	adds	r1, r4, r2
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	eb45 0303 	adc.w	r3, r5, r3
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80022ac:	460b      	mov	r3, r1
 80022ae:	eb13 030a 	adds.w	r3, r3, sl
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b4:	4613      	mov	r3, r2
 80022b6:	eb43 030b 	adc.w	r3, r3, fp
 80022ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80022bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022be:	2200      	movs	r2, #0
 80022c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022cc:	f7fd ffd0 	bl	8000270 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
			pct = (emitted >= total) ?
 80022d4:	b2d3      	uxtb	r3, r2
 80022d6:	e000      	b.n	80022da <motion_refresh_status_locked+0x18a>
 80022d8:	2364      	movs	r3, #100	@ 0x64
 80022da:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80022de:	e000      	b.n	80022e2 <motion_refresh_status_locked+0x192>
		if (g_has_active_segment && total > 0u) {
 80022e0:	bf00      	nop
		}
		int64_t actual_counts = g_encoder_position[axis]
 80022e2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80022e6:	4a3b      	ldr	r2, [pc, #236]	@ (80023d4 <motion_refresh_status_locked+0x284>)
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	e9d3 0100 	ldrd	r0, r1, [r3]
				- g_encoder_origin[axis];
 80022f0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80022f4:	4a38      	ldr	r2, [pc, #224]	@ (80023d8 <motion_refresh_status_locked+0x288>)
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
		int64_t actual_counts = g_encoder_position[axis]
 80022fe:	1a86      	subs	r6, r0, r2
 8002300:	603e      	str	r6, [r7, #0]
 8002302:	eb61 0303 	sbc.w	r3, r1, r3
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800230c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		if (actual_counts > (int64_t) INT32_MAX)
 8002310:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002314:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002318:	f173 0300 	sbcs.w	r3, r3, #0
 800231c:	db06      	blt.n	800232c <motion_refresh_status_locked+0x1dc>
			actual_counts = INT32_MAX;
 800231e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 800232a:	e00c      	b.n	8002346 <motion_refresh_status_locked+0x1f6>
		else if (actual_counts < (int64_t) INT32_MIN)
 800232c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002330:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002334:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002338:	da05      	bge.n	8002346 <motion_refresh_status_locked+0x1f6>
			actual_counts = INT32_MIN;
 800233a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
 8002342:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		int32_t desired_counts = (int32_t) ax->target_steps;
 8002346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		int32_t err = desired_counts - (int32_t) actual_counts;
 800234c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800234e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	65bb      	str	r3, [r7, #88]	@ 0x58
		int8_t err8 = motion_clamp_error(err);
 8002354:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002356:	f7ff fee3 	bl	8002120 <motion_clamp_error>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		switch (axis) {
 8002360:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <motion_refresh_status_locked+0x21e>
 8002368:	2b01      	cmp	r3, #1
 800236a:	d009      	beq.n	8002380 <motion_refresh_status_locked+0x230>
 800236c:	e011      	b.n	8002392 <motion_refresh_status_locked+0x242>
		case AXIS_X:
			g_status.pctX = pct;
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002370:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002374:	7093      	strb	r3, [r2, #2]
			g_status.pidErrX = err8;
 8002376:	4a15      	ldr	r2, [pc, #84]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002378:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800237c:	7153      	strb	r3, [r2, #5]
			break;
 800237e:	e011      	b.n	80023a4 <motion_refresh_status_locked+0x254>
		case AXIS_Y:
			g_status.pctY = pct;
 8002380:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002382:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002386:	70d3      	strb	r3, [r2, #3]
			g_status.pidErrY = err8;
 8002388:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 800238a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800238e:	7193      	strb	r3, [r2, #6]
			break;
 8002390:	e008      	b.n	80023a4 <motion_refresh_status_locked+0x254>
		case AXIS_Z:
		default:
			g_status.pctZ = pct;
 8002392:	4a0e      	ldr	r2, [pc, #56]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002394:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002398:	7113      	strb	r3, [r2, #4]
			g_status.pidErrZ = err8;
 800239a:	4a0c      	ldr	r2, [pc, #48]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 800239c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023a0:	71d3      	strb	r3, [r2, #7]
			break;
 80023a2:	bf00      	nop
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80023a4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80023a8:	3301      	adds	r3, #1
 80023aa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80023ae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	f67f aee2 	bls.w	800217c <motion_refresh_status_locked+0x2c>
		}
	}
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	378c      	adds	r7, #140	@ 0x8c
 80023be:	46bd      	mov	sp, r7
 80023c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c4:	2000010c 	.word	0x2000010c
 80023c8:	20000c12 	.word	0x20000c12
 80023cc:	200000bc 	.word	0x200000bc
 80023d0:	200000c4 	.word	0x200000c4
 80023d4:	20000c18 	.word	0x20000c18
 80023d8:	20000c40 	.word	0x20000c40

080023dc <motion_hw_set_direction>:
static void motion_hw_set_direction(uint8_t axis, uint8_t dir) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	460a      	mov	r2, r1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71bb      	strb	r3, [r7, #6]
	const motion_axis_hw_t *hw = &g_axis_hw[axis];
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	015b      	lsls	r3, r3, #5
 80023f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002428 <motion_hw_set_direction+0x4c>)
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
	if (dir)
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <motion_hw_set_direction+0x32>
		gpio_set_high(hw->dir_port, hw->dir_pin);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	899b      	ldrh	r3, [r3, #12]
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f7ff fdc0 	bl	8001f8c <gpio_set_high>
	else
		gpio_set_low(hw->dir_port, hw->dir_pin);
}
 800240c:	e007      	b.n	800241e <motion_hw_set_direction+0x42>
		gpio_set_low(hw->dir_port, hw->dir_pin);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	899b      	ldrh	r3, [r3, #12]
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7ff fdca 	bl	8001fb2 <gpio_set_low>
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	0800e2e4 	.word	0x0800e2e4

0800242c <motion_hw_enable_axis>:
static void motion_hw_enable_axis(uint8_t axis, uint8_t enable) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	460a      	mov	r2, r1
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	4613      	mov	r3, r2
 800243a:	71bb      	strb	r3, [r7, #6]
	const motion_axis_hw_t *hw = &g_axis_hw[axis];
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	015b      	lsls	r3, r3, #5
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <motion_hw_enable_axis+0x4c>)
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
	if (enable)
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <motion_hw_enable_axis+0x32>
		gpio_set_low(hw->ena_port, hw->ena_pin);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8a9b      	ldrh	r3, [r3, #20]
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f7ff fdab 	bl	8001fb2 <gpio_set_low>
	else
		gpio_set_high(hw->ena_port, hw->ena_pin);
}
 800245c:	e007      	b.n	800246e <motion_hw_enable_axis+0x42>
		gpio_set_high(hw->ena_port, hw->ena_pin);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8a9b      	ldrh	r3, [r3, #20]
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f7ff fd8f 	bl	8001f8c <gpio_set_high>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	0800e2e4 	.word	0x0800e2e4

0800247c <motion_hw_reset_step>:
static void motion_hw_reset_step(uint8_t axis) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	const motion_axis_hw_t *hw = &g_axis_hw[axis];
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	015b      	lsls	r3, r3, #5
 800248a:	4a07      	ldr	r2, [pc, #28]	@ (80024a8 <motion_hw_reset_step+0x2c>)
 800248c:	4413      	add	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
	gpio_set_low(hw->step_port, hw->step_pin);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7ff fd89 	bl	8001fb2 <gpio_set_low>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	0800e2e4 	.word	0x0800e2e4

080024ac <motion_stop_all_axes_locked>:
static void motion_stop_all_axes_locked(void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	71fb      	strb	r3, [r7, #7]
 80024b6:	e05a      	b.n	800256e <motion_stop_all_axes_locked+0xc2>
		motion_hw_reset_step(axis);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ffde 	bl	800247c <motion_hw_reset_step>
		motion_hw_enable_axis(axis, 0u);
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ffb1 	bl	800242c <motion_hw_enable_axis>
		g_axis_state[axis].total_steps = 0u;
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	492c      	ldr	r1, [pc, #176]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
		g_axis_state[axis].target_steps = 0u;
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	4928      	ldr	r1, [pc, #160]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	3304      	adds	r3, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
		g_axis_state[axis].emitted_steps = 0u;
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	4923      	ldr	r1, [pc, #140]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3308      	adds	r3, #8
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
		g_axis_state[axis].velocity_per_tick = 0u;
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	491e      	ldr	r1, [pc, #120]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	330c      	adds	r3, #12
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].kp = 0u;
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	4919      	ldr	r1, [pc, #100]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	330e      	adds	r3, #14
 8002528:	2200      	movs	r2, #0
 800252a:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].ki = 0u;
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	4914      	ldr	r1, [pc, #80]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	3310      	adds	r3, #16
 800253c:	2200      	movs	r2, #0
 800253e:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].kd = 0u;
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	490f      	ldr	r1, [pc, #60]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3312      	adds	r3, #18
 8002550:	2200      	movs	r2, #0
 8002552:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].step_high = 0u;
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	490a      	ldr	r1, [pc, #40]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	3314      	adds	r3, #20
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	3301      	adds	r3, #1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d9a1      	bls.n	80024b8 <motion_stop_all_axes_locked+0xc>
	}
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200000c4 	.word	0x200000c4

08002584 <motion_queue_clear_locked>:
static void motion_queue_clear_locked(void) {
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
	g_queue_head = 0u;
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <motion_queue_clear_locked+0x20>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
	g_queue_tail = 0u;
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <motion_queue_clear_locked+0x24>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
	g_queue_count = 0u;
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <motion_queue_clear_locked+0x28>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000c10 	.word	0x20000c10
 80025a8:	20000c11 	.word	0x20000c11
 80025ac:	20000c12 	.word	0x20000c12

080025b0 <motion_queue_push_locked>:
static proto_result_t motion_queue_push_locked(const move_queue_add_req_t *req) {
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	if (g_queue_count >= MOTION_QUEUE_CAPACITY)
 80025b8:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <motion_queue_push_locked+0x68>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80025be:	d902      	bls.n	80025c6 <motion_queue_push_locked+0x16>
		return PROTO_ERR_RANGE;
 80025c0:	f06f 0303 	mvn.w	r3, #3
 80025c4:	e024      	b.n	8002610 <motion_queue_push_locked+0x60>
	g_queue[g_queue_tail].req = *req;
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <motion_queue_push_locked+0x6c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <motion_queue_push_locked+0x70>)
 80025ce:	232c      	movs	r3, #44	@ 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	441a      	add	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	g_queue_tail = (uint8_t) ((g_queue_tail + 1u) % MOTION_QUEUE_CAPACITY);
 80025ec:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <motion_queue_push_locked+0x6c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <motion_queue_push_locked+0x6c>)
 80025fc:	701a      	strb	r2, [r3, #0]
	++g_queue_count;
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <motion_queue_push_locked+0x68>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <motion_queue_push_locked+0x68>)
 8002608:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 800260a:	f7ff fda1 	bl	8002150 <motion_refresh_status_locked>
	return PROTO_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bdb0      	pop	{r4, r5, r7, pc}
 8002618:	20000c12 	.word	0x20000c12
 800261c:	20000c11 	.word	0x20000c11
 8002620:	20000110 	.word	0x20000110

08002624 <motion_queue_pop_locked>:
static int motion_queue_pop_locked(move_queue_add_req_t *out) {
 8002624:	b4b0      	push	{r4, r5, r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	if (g_queue_count == 0u)
 800262c:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <motion_queue_pop_locked+0x6c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <motion_queue_pop_locked+0x14>
		return 0;
 8002634:	2300      	movs	r3, #0
 8002636:	e025      	b.n	8002684 <motion_queue_pop_locked+0x60>
	if (out)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <motion_queue_pop_locked+0x40>
		*out = g_queue[g_queue_head].req;
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <motion_queue_pop_locked+0x70>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4a14      	ldr	r2, [pc, #80]	@ (8002698 <motion_queue_pop_locked+0x74>)
 8002648:	232c      	movs	r3, #44	@ 0x2c
 800264a:	fb00 f303 	mul.w	r3, r0, r3
 800264e:	4413      	add	r3, r2
 8002650:	460c      	mov	r4, r1
 8002652:	461d      	mov	r5, r3
 8002654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	g_queue_head = (uint8_t) ((g_queue_head + 1u) % MOTION_QUEUE_CAPACITY);
 8002664:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <motion_queue_pop_locked+0x70>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <motion_queue_pop_locked+0x70>)
 8002674:	701a      	strb	r2, [r3, #0]
	--g_queue_count;
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <motion_queue_pop_locked+0x6c>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <motion_queue_pop_locked+0x6c>)
 8002680:	701a      	strb	r2, [r3, #0]
	return 1;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bcb0      	pop	{r4, r5, r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000c12 	.word	0x20000c12
 8002694:	20000c10 	.word	0x20000c10
 8002698:	20000110 	.word	0x20000110

0800269c <motion_begin_segment_locked>:
static void motion_begin_segment_locked(const move_queue_add_req_t *seg) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	if (!seg)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d078      	beq.n	800279c <motion_begin_segment_locked+0x100>
		return;
	g_has_active_segment = 1u;
 80026aa:	4b3e      	ldr	r3, [pc, #248]	@ (80027a4 <motion_begin_segment_locked+0x108>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
 80026b4:	e06e      	b.n	8002794 <motion_begin_segment_locked+0xf8>
		motion_axis_state_t *ax = &g_axis_state[axis];
 80026b6:	7dfa      	ldrb	r2, [r7, #23]
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4a39      	ldr	r2, [pc, #228]	@ (80027a8 <motion_begin_segment_locked+0x10c>)
 80026c2:	4413      	add	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
		uint32_t total = motion_total_for_axis(seg, axis);
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fca6 	bl	800201c <motion_total_for_axis>
 80026d0:	60f8      	str	r0, [r7, #12]
		uint16_t velocity = motion_velocity_for_axis(seg, axis);
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fcba 	bl	8002050 <motion_velocity_for_axis>
 80026dc:	4603      	mov	r3, r0
 80026de:	817b      	strh	r3, [r7, #10]
		ax->total_steps = total;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]
		ax->target_steps = 0u;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
		ax->emitted_steps = 0u;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
		ax->velocity_per_tick = velocity;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	897a      	ldrh	r2, [r7, #10]
 80026f6:	819a      	strh	r2, [r3, #12]
		ax->kp = motion_kp_for_axis(seg, axis);
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fcc1 	bl	8002084 <motion_kp_for_axis>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	81da      	strh	r2, [r3, #14]
		ax->ki = motion_ki_for_axis(seg, axis);
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fcd2 	bl	80020b8 <motion_ki_for_axis>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	821a      	strh	r2, [r3, #16]
		ax->kd = motion_kd_for_axis(seg, axis);
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fce3 	bl	80020ec <motion_kd_for_axis>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	825a      	strh	r2, [r3, #18]
		ax->step_high = 0u;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2200      	movs	r2, #0
 8002732:	751a      	strb	r2, [r3, #20]
		motion_hw_reset_step(axis);
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fea0 	bl	800247c <motion_hw_reset_step>
		motion_hw_set_direction(axis,
				(uint8_t) ((seg->dirMask >> axis) & 0x1u));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	785b      	ldrb	r3, [r3, #1]
 8002740:	461a      	mov	r2, r3
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	fa42 f303 	asr.w	r3, r2, r3
		motion_hw_set_direction(axis,
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fe41 	bl	80023dc <motion_hw_set_direction>
		if (total > 0u)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <motion_begin_segment_locked+0xd0>
			motion_hw_enable_axis(axis, 1u);
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fe61 	bl	800242c <motion_hw_enable_axis>
 800276a:	e004      	b.n	8002776 <motion_begin_segment_locked+0xda>
		else
			motion_hw_enable_axis(axis, 0u);
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fe5b 	bl	800242c <motion_hw_enable_axis>
		g_encoder_origin[axis] = g_encoder_position[axis];
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	7df9      	ldrb	r1, [r7, #23]
 800277a:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <motion_begin_segment_locked+0x110>)
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	480a      	ldr	r0, [pc, #40]	@ (80027b0 <motion_begin_segment_locked+0x114>)
 8002786:	00c9      	lsls	r1, r1, #3
 8002788:	4401      	add	r1, r0
 800278a:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	3301      	adds	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d98d      	bls.n	80026b6 <motion_begin_segment_locked+0x1a>
 800279a:	e000      	b.n	800279e <motion_begin_segment_locked+0x102>
		return;
 800279c:	bf00      	nop
	}
}
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	2000010c 	.word	0x2000010c
 80027a8:	200000c4 	.word	0x200000c4
 80027ac:	20000c18 	.word	0x20000c18
 80027b0:	20000c40 	.word	0x20000c40

080027b4 <motion_try_start_next_locked>:
static uint8_t motion_try_start_next_locked(void) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	@ 0x30
 80027b8:	af00      	add	r7, sp, #0
	move_queue_add_req_t next;
	if (!motion_queue_pop_locked(&next))
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff31 	bl	8002624 <motion_queue_pop_locked>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <motion_try_start_next_locked+0x18>
		return 0u;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e004      	b.n	80027d6 <motion_try_start_next_locked+0x22>
	motion_begin_segment_locked(&next);
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff64 	bl	800269c <motion_begin_segment_locked>
	return 1u;
 80027d4:	2301      	movs	r3, #1
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3730      	adds	r7, #48	@ 0x30
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <motion_update_encoders>:
static void motion_update_encoders(void) {
 80027e0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027e4:	b08d      	sub	sp, #52	@ 0x34
 80027e6:	af00      	add	r7, sp, #0
	uint32_t now_x = __HAL_TIM_GET_COUNTER(g_axis_hw[AXIS_X].encoder);
 80027e8:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <motion_update_encoders+0xd0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t delta_x = (int32_t) (now_x - g_encoder_last_raw[AXIS_X]);
 80027f0:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <motion_update_encoders+0xd4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	g_encoder_last_raw[AXIS_X] = now_x;
 80027fa:	4a2e      	ldr	r2, [pc, #184]	@ (80028b4 <motion_update_encoders+0xd4>)
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	6013      	str	r3, [r2, #0]
	g_encoder_position[AXIS_X] += delta_x;
 8002800:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <motion_update_encoders+0xd8>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002808:	17c8      	asrs	r0, r1, #31
 800280a:	468a      	mov	sl, r1
 800280c:	4683      	mov	fp, r0
 800280e:	eb12 010a 	adds.w	r1, r2, sl
 8002812:	6139      	str	r1, [r7, #16]
 8002814:	eb43 030b 	adc.w	r3, r3, fp
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <motion_update_encoders+0xd8>)
 800281c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002820:	e9c3 1200 	strd	r1, r2, [r3]
	uint32_t now_y = __HAL_TIM_GET_COUNTER(g_axis_hw[AXIS_Y].encoder);
 8002824:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <motion_update_encoders+0xdc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t delta_y = (int32_t) (now_y - g_encoder_last_raw[AXIS_Y]);
 800282c:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <motion_update_encoders+0xd4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	623b      	str	r3, [r7, #32]
	g_encoder_last_raw[AXIS_Y] = now_y;
 8002836:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <motion_update_encoders+0xd4>)
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	6053      	str	r3, [r2, #4]
	g_encoder_position[AXIS_Y] += delta_y;
 800283c:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <motion_update_encoders+0xd8>)
 800283e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002842:	6a39      	ldr	r1, [r7, #32]
 8002844:	17c8      	asrs	r0, r1, #31
 8002846:	4688      	mov	r8, r1
 8002848:	4681      	mov	r9, r0
 800284a:	eb12 0108 	adds.w	r1, r2, r8
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	eb43 0309 	adc.w	r3, r3, r9
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <motion_update_encoders+0xd8>)
 8002858:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800285c:	e9c3 1202 	strd	r1, r2, [r3, #8]
	uint32_t now_z = __HAL_TIM_GET_COUNTER(g_axis_hw[AXIS_Z].encoder) & 0xFFFFu;
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <motion_update_encoders+0xe0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	b29b      	uxth	r3, r3
 8002868:	61fb      	str	r3, [r7, #28]
	int16_t delta_z = (int16_t) ((uint16_t) now_z
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	b29a      	uxth	r2, r3
			- (uint16_t) g_encoder_last_raw[AXIS_Z]);
 800286e:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <motion_update_encoders+0xd4>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	b29b      	uxth	r3, r3
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	b29b      	uxth	r3, r3
	int16_t delta_z = (int16_t) ((uint16_t) now_z
 8002878:	837b      	strh	r3, [r7, #26]
	g_encoder_last_raw[AXIS_Z] = now_z & 0xFFFFu;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	b29b      	uxth	r3, r3
 800287e:	4a0d      	ldr	r2, [pc, #52]	@ (80028b4 <motion_update_encoders+0xd4>)
 8002880:	6093      	str	r3, [r2, #8]
	g_encoder_position[AXIS_Z] += delta_z;
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <motion_update_encoders+0xd8>)
 8002884:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002888:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800288c:	17c8      	asrs	r0, r1, #31
 800288e:	460c      	mov	r4, r1
 8002890:	4605      	mov	r5, r0
 8002892:	1911      	adds	r1, r2, r4
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	416b      	adcs	r3, r5
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <motion_update_encoders+0xd8>)
 800289c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028a0:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 80028a4:	bf00      	nop
 80028a6:	3734      	adds	r7, #52	@ 0x34
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80028ae:	4770      	bx	lr
 80028b0:	20000e34 	.word	0x20000e34
 80028b4:	20000c30 	.word	0x20000c30
 80028b8:	20000c18 	.word	0x20000c18
 80028bc:	20000ecc 	.word	0x20000ecc
 80028c0:	20000e80 	.word	0x20000e80

080028c4 <motion_send_queue_add_ack>:
static void motion_send_queue_add_ack(uint8_t frame_id, uint8_t status) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	4603      	mov	r3, r0
 80028cc:	460a      	mov	r2, r1
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71bb      	strb	r3, [r7, #6]
	uint8_t raw[6];
	move_queue_add_ack_resp_t resp = { frame_id, status };
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	733b      	strb	r3, [r7, #12]
 80028d8:	79bb      	ldrb	r3, [r7, #6]
 80028da:	737b      	strb	r3, [r7, #13]
	if (move_queue_add_ack_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 80028dc:	f107 0110 	add.w	r1, r7, #16
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	2206      	movs	r2, #6
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fafe 	bl	8000ee8 <move_queue_add_ack_resp_encoder>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <motion_send_queue_add_ack+0x48>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "ack", "encode_fail");
 80028f2:	4a12      	ldr	r2, [pc, #72]	@ (800293c <motion_send_queue_add_ack+0x78>)
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <motion_send_queue_add_ack+0x7c>)
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <motion_send_queue_add_ack+0x80>)
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	f06f 0201 	mvn.w	r2, #1
 8002902:	2164      	movs	r1, #100	@ 0x64
 8002904:	2002      	movs	r0, #2
 8002906:	f7ff fafb 	bl	8001f00 <log_event_auto>
 800290a:	e014      	b.n	8002936 <motion_send_queue_add_ack+0x72>
		return;
	}
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	2106      	movs	r1, #6
 8002912:	4618      	mov	r0, r3
 8002914:	f000 ffb2 	bl	800387c <app_resp_push>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <motion_send_queue_add_ack+0x72>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "ack", "queue_full");
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <motion_send_queue_add_ack+0x78>)
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <motion_send_queue_add_ack+0x84>)
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <motion_send_queue_add_ack+0x80>)
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	f06f 0203 	mvn.w	r2, #3
 800292e:	2164      	movs	r1, #100	@ 0x64
 8002930:	2002      	movs	r0, #2
 8002932:	f7ff fae5 	bl	8001f00 <log_event_auto>
	}
}
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	0800df10 	.word	0x0800df10
 8002940:	0800df18 	.word	0x0800df18
 8002944:	0800df24 	.word	0x0800df24
 8002948:	0800df28 	.word	0x0800df28

0800294c <motion_send_queue_status_response>:
static void motion_send_queue_status_response(uint8_t frame_id) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[12];
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	733b      	strb	r3, [r7, #12]
			(uint8_t) g_status.state, .pidErrX = (uint8_t) g_status.pidErrX,
 800295a:	4b27      	ldr	r3, [pc, #156]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002960:	737b      	strb	r3, [r7, #13]
			(uint8_t) g_status.state, .pidErrX = (uint8_t) g_status.pidErrX,
 8002962:	4b25      	ldr	r3, [pc, #148]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 8002964:	795b      	ldrb	r3, [r3, #5]
 8002966:	b25b      	sxtb	r3, r3
 8002968:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 800296a:	73bb      	strb	r3, [r7, #14]
			.pidErrY = (uint8_t) g_status.pidErrY, .pidErrZ =
 800296c:	4b22      	ldr	r3, [pc, #136]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 800296e:	799b      	ldrb	r3, [r3, #6]
 8002970:	b25b      	sxtb	r3, r3
 8002972:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002974:	73fb      	strb	r3, [r7, #15]
					(uint8_t) g_status.pidErrZ, .pctX = g_status.pctX, .pctY =
 8002976:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 8002978:	79db      	ldrb	r3, [r3, #7]
 800297a:	b25b      	sxtb	r3, r3
 800297c:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 800297e:	743b      	strb	r3, [r7, #16]
					(uint8_t) g_status.pidErrZ, .pctX = g_status.pctX, .pctY =
 8002980:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 8002982:	789b      	ldrb	r3, [r3, #2]
 8002984:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002986:	747b      	strb	r3, [r7, #17]
					g_status.pctY, .pctZ = g_status.pctZ, };
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 800298a:	78db      	ldrb	r3, [r3, #3]
 800298c:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 800298e:	74bb      	strb	r3, [r7, #18]
					g_status.pctY, .pctZ = g_status.pctZ, };
 8002990:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 8002992:	791b      	ldrb	r3, [r3, #4]
 8002994:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002996:	74fb      	strb	r3, [r7, #19]
	if (move_queue_status_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8002998:	f107 0114 	add.w	r1, r7, #20
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	220c      	movs	r2, #12
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fb58 	bl	8001058 <move_queue_status_resp_encoder>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <motion_send_queue_status_response+0x7c>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "status", "encode_fail");
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <motion_send_queue_status_response+0xb0>)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <motion_send_queue_status_response+0xb4>)
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <motion_send_queue_status_response+0xb8>)
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	f06f 0201 	mvn.w	r2, #1
 80029be:	2164      	movs	r1, #100	@ 0x64
 80029c0:	2002      	movs	r0, #2
 80029c2:	f7ff fa9d 	bl	8001f00 <log_event_auto>
 80029c6:	e014      	b.n	80029f2 <motion_send_queue_status_response+0xa6>
		return;
	}
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	210c      	movs	r1, #12
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 ff54 	bl	800387c <app_resp_push>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <motion_send_queue_status_response+0xa6>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "status", "queue_full");
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <motion_send_queue_status_response+0xb0>)
 80029dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <motion_send_queue_status_response+0xbc>)
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <motion_send_queue_status_response+0xb8>)
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	f06f 0203 	mvn.w	r2, #3
 80029ea:	2164      	movs	r1, #100	@ 0x64
 80029ec:	2002      	movs	r0, #2
 80029ee:	f7ff fa87 	bl	8001f00 <log_event_auto>
	}
}
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200000bc 	.word	0x200000bc
 80029fc:	0800df10 	.word	0x0800df10
 8002a00:	0800df18 	.word	0x0800df18
 8002a04:	0800df34 	.word	0x0800df34
 8002a08:	0800df28 	.word	0x0800df28

08002a0c <motion_send_start_response>:
static void motion_send_start_response(uint8_t frame_id) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[4];
	start_move_resp_t resp = { frame_id };
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	723b      	strb	r3, [r7, #8]
	if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK)
 8002a1a:	f107 010c 	add.w	r1, r7, #12
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	2204      	movs	r2, #4
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fb86 	bl	8001136 <start_move_resp_encoder>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d115      	bne.n	8002a5c <motion_send_start_response+0x50>
		return;
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	2104      	movs	r1, #4
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 ff20 	bl	800387c <app_resp_push>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <motion_send_start_response+0x52>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "start", "resp_queue_full");
 8002a42:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <motion_send_start_response+0x58>)
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <motion_send_start_response+0x5c>)
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <motion_send_start_response+0x60>)
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	f06f 0203 	mvn.w	r2, #3
 8002a52:	2164      	movs	r1, #100	@ 0x64
 8002a54:	2002      	movs	r0, #2
 8002a56:	f7ff fa53 	bl	8001f00 <log_event_auto>
 8002a5a:	e000      	b.n	8002a5e <motion_send_start_response+0x52>
		return;
 8002a5c:	bf00      	nop
	}
}
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0800df10 	.word	0x0800df10
 8002a68:	0800df3c 	.word	0x0800df3c
 8002a6c:	0800df4c 	.word	0x0800df4c

08002a70 <motion_send_move_end_response>:
static void motion_send_move_end_response(uint8_t frame_id) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[4];
	move_end_resp_t resp = { frame_id };
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	723b      	strb	r3, [r7, #8]
	if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK)
 8002a7e:	f107 010c 	add.w	r1, r7, #12
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	2204      	movs	r2, #4
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe f97f 	bl	8000d8c <move_end_resp_encoder>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d115      	bne.n	8002ac0 <motion_send_move_end_response+0x50>
		return;
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	2104      	movs	r1, #4
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 feee 	bl	800387c <app_resp_push>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <motion_send_move_end_response+0x52>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "move_end",
 8002aa6:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <motion_send_move_end_response+0x58>)
 8002aa8:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <motion_send_move_end_response+0x5c>)
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <motion_send_move_end_response+0x60>)
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	f06f 0203 	mvn.w	r2, #3
 8002ab6:	2164      	movs	r1, #100	@ 0x64
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f7ff fa21 	bl	8001f00 <log_event_auto>
 8002abe:	e000      	b.n	8002ac2 <motion_send_move_end_response+0x52>
		return;
 8002ac0:	bf00      	nop
				"resp_queue_full");
	}
}
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	0800df10 	.word	0x0800df10
 8002acc:	0800df3c 	.word	0x0800df3c
 8002ad0:	0800df54 	.word	0x0800df54

08002ad4 <motion_service_init>:
void motion_service_init(void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af04      	add	r7, sp, #16
	uint32_t primask = motion_lock();
 8002ada:	f7ff fa7e 	bl	8001fda <motion_lock>
 8002ade:	6078      	str	r0, [r7, #4]
	memset(&g_status, 0, sizeof g_status);
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4846      	ldr	r0, [pc, #280]	@ (8002c00 <motion_service_init+0x12c>)
 8002ae6:	f00a f9ed 	bl	800cec4 <memset>
	memset(g_axis_state, 0, sizeof g_axis_state);
 8002aea:	2248      	movs	r2, #72	@ 0x48
 8002aec:	2100      	movs	r1, #0
 8002aee:	4845      	ldr	r0, [pc, #276]	@ (8002c04 <motion_service_init+0x130>)
 8002af0:	f00a f9e8 	bl	800cec4 <memset>
	memset(g_queue, 0, sizeof g_queue);
 8002af4:	f44f 6230 	mov.w	r2, #2816	@ 0xb00
 8002af8:	2100      	movs	r1, #0
 8002afa:	4843      	ldr	r0, [pc, #268]	@ (8002c08 <motion_service_init+0x134>)
 8002afc:	f00a f9e2 	bl	800cec4 <memset>
	memset(g_encoder_position, 0, sizeof g_encoder_position);
 8002b00:	2218      	movs	r2, #24
 8002b02:	2100      	movs	r1, #0
 8002b04:	4841      	ldr	r0, [pc, #260]	@ (8002c0c <motion_service_init+0x138>)
 8002b06:	f00a f9dd 	bl	800cec4 <memset>
	memset(g_encoder_last_raw, 0, sizeof g_encoder_last_raw);
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4840      	ldr	r0, [pc, #256]	@ (8002c10 <motion_service_init+0x13c>)
 8002b10:	f00a f9d8 	bl	800cec4 <memset>
	memset(g_encoder_origin, 0, sizeof g_encoder_origin);
 8002b14:	2218      	movs	r2, #24
 8002b16:	2100      	movs	r1, #0
 8002b18:	483e      	ldr	r0, [pc, #248]	@ (8002c14 <motion_service_init+0x140>)
 8002b1a:	f00a f9d3 	bl	800cec4 <memset>
	g_status.state = MOTION_IDLE;
 8002b1e:	4b38      	ldr	r3, [pc, #224]	@ (8002c00 <motion_service_init+0x12c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
	g_queue_head = g_queue_tail = g_queue_count = 0u;
 8002b24:	4b3c      	ldr	r3, [pc, #240]	@ (8002c18 <motion_service_init+0x144>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c18 <motion_service_init+0x144>)
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <motion_service_init+0x148>)
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <motion_service_init+0x148>)
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	4b3a      	ldr	r3, [pc, #232]	@ (8002c20 <motion_service_init+0x14c>)
 8002b38:	701a      	strb	r2, [r3, #0]
	g_has_active_segment = 0u;
 8002b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c24 <motion_service_init+0x150>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
	motion_stop_all_axes_locked();
 8002b40:	f7ff fcb4 	bl	80024ac <motion_stop_all_axes_locked>
	motion_refresh_status_locked();
 8002b44:	f7ff fb04 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fa57 	bl	8001ffc <motion_unlock>
	__HAL_TIM_SET_COUNTER(&htim2, 0u);
 8002b4e:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <motion_service_init+0x154>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim5, 0u);
 8002b56:	4b35      	ldr	r3, [pc, #212]	@ (8002c2c <motion_service_init+0x158>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0u);
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <motion_service_init+0x15c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL) != HAL_OK)
 8002b66:	213c      	movs	r1, #60	@ 0x3c
 8002b68:	482f      	ldr	r0, [pc, #188]	@ (8002c28 <motion_service_init+0x154>)
 8002b6a:	f006 ff91 	bl	8009a90 <HAL_TIM_Encoder_Start>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <motion_service_init+0xa4>
		Error_Handler();
 8002b74:	f001 f972 	bl	8003e5c <Error_Handler>
	if (HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL) != HAL_OK)
 8002b78:	213c      	movs	r1, #60	@ 0x3c
 8002b7a:	482c      	ldr	r0, [pc, #176]	@ (8002c2c <motion_service_init+0x158>)
 8002b7c:	f006 ff88 	bl	8009a90 <HAL_TIM_Encoder_Start>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <motion_service_init+0xb6>
		Error_Handler();
 8002b86:	f001 f969 	bl	8003e5c <Error_Handler>
	if (HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
 8002b8a:	213c      	movs	r1, #60	@ 0x3c
 8002b8c:	4828      	ldr	r0, [pc, #160]	@ (8002c30 <motion_service_init+0x15c>)
 8002b8e:	f006 ff7f 	bl	8009a90 <HAL_TIM_Encoder_Start>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <motion_service_init+0xc8>
		Error_Handler();
 8002b98:	f001 f960 	bl	8003e5c <Error_Handler>
	g_encoder_last_raw[AXIS_X] = __HAL_TIM_GET_COUNTER(&htim2);
 8002b9c:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <motion_service_init+0x154>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <motion_service_init+0x13c>)
 8002ba4:	6013      	str	r3, [r2, #0]
	g_encoder_last_raw[AXIS_Y] = __HAL_TIM_GET_COUNTER(&htim5);
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <motion_service_init+0x158>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <motion_service_init+0x13c>)
 8002bae:	6053      	str	r3, [r2, #4]
	g_encoder_last_raw[AXIS_Z] = __HAL_TIM_GET_COUNTER(&htim3) & 0xFFFFu;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <motion_service_init+0x15c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <motion_service_init+0x13c>)
 8002bba:	6093      	str	r3, [r2, #8]
	if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8002bbc:	481d      	ldr	r0, [pc, #116]	@ (8002c34 <motion_service_init+0x160>)
 8002bbe:	f006 f8f9 	bl	8008db4 <HAL_TIM_Base_Start_IT>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <motion_service_init+0xf8>
		Error_Handler();
 8002bc8:	f001 f948 	bl	8003e5c <Error_Handler>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8002bcc:	481a      	ldr	r0, [pc, #104]	@ (8002c38 <motion_service_init+0x164>)
 8002bce:	f006 f8f1 	bl	8008db4 <HAL_TIM_Base_Start_IT>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <motion_service_init+0x108>
		Error_Handler();
 8002bd8:	f001 f940 	bl	8003e5c <Error_Handler>
	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "timers_ready");
 8002bdc:	4a17      	ldr	r2, [pc, #92]	@ (8002c3c <motion_service_init+0x168>)
 8002bde:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <motion_service_init+0x16c>)
 8002be0:	9302      	str	r3, [sp, #8]
 8002be2:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <motion_service_init+0x170>)
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <motion_service_init+0x174>)
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f7ff f985 	bl	8001f00 <log_event_auto>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200000bc 	.word	0x200000bc
 8002c04:	200000c4 	.word	0x200000c4
 8002c08:	20000110 	.word	0x20000110
 8002c0c:	20000c18 	.word	0x20000c18
 8002c10:	20000c30 	.word	0x20000c30
 8002c14:	20000c40 	.word	0x20000c40
 8002c18:	20000c12 	.word	0x20000c12
 8002c1c:	20000c11 	.word	0x20000c11
 8002c20:	20000c10 	.word	0x20000c10
 8002c24:	2000010c 	.word	0x2000010c
 8002c28:	20000e34 	.word	0x20000e34
 8002c2c:	20000ecc 	.word	0x20000ecc
 8002c30:	20000e80 	.word	0x20000e80
 8002c34:	20000f18 	.word	0x20000f18
 8002c38:	20000f64 	.word	0x20000f64
 8002c3c:	0800df10 	.word	0x0800df10
 8002c40:	0800df60 	.word	0x0800df60
 8002c44:	0800df70 	.word	0x0800df70
 8002c48:	0800df74 	.word	0x0800df74

08002c4c <motion_on_tim6_tick>:
const motion_status_t* motion_status_get(void) {
	return &g_status;
}
void motion_on_tim6_tick(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
	if (g_status.state != MOTION_RUNNING || !g_has_active_segment)
 8002c52:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc8 <motion_on_tim6_tick+0x17c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f040 80af 	bne.w	8002dbc <motion_on_tim6_tick+0x170>
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dcc <motion_on_tim6_tick+0x180>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a9 	beq.w	8002dbc <motion_on_tim6_tick+0x170>
		return;
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	77fb      	strb	r3, [r7, #31]
 8002c6e:	e03d      	b.n	8002cec <motion_on_tim6_tick+0xa0>
		motion_axis_state_t *ax = &g_axis_state[axis];
 8002c70:	7ffa      	ldrb	r2, [r7, #31]
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4a55      	ldr	r2, [pc, #340]	@ (8002dd0 <motion_on_tim6_tick+0x184>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
		const motion_axis_hw_t *hw = &g_axis_hw[axis];
 8002c80:	7ffb      	ldrb	r3, [r7, #31]
 8002c82:	015b      	lsls	r3, r3, #5
 8002c84:	4a53      	ldr	r2, [pc, #332]	@ (8002dd4 <motion_on_tim6_tick+0x188>)
 8002c86:	4413      	add	r3, r2
 8002c88:	607b      	str	r3, [r7, #4]
		if (ax->step_high) {
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	7d1b      	ldrb	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <motion_on_tim6_tick+0x5e>
			gpio_set_low(hw->step_port, hw->step_pin);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	889b      	ldrh	r3, [r3, #4]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff f988 	bl	8001fb2 <gpio_set_low>
			ax->step_high = 0u;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	751a      	strb	r2, [r3, #20]
			continue;
 8002ca8:	e01d      	b.n	8002ce6 <motion_on_tim6_tick+0x9a>
		}
		if (ax->emitted_steps >= ax->total_steps)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d216      	bcs.n	8002ce4 <motion_on_tim6_tick+0x98>
			continue;
		if (ax->emitted_steps < ax->target_steps) {
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d211      	bcs.n	8002ce6 <motion_on_tim6_tick+0x9a>
			gpio_set_high(hw->step_port, hw->step_pin);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	889b      	ldrh	r3, [r3, #4]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7ff f95d 	bl	8001f8c <gpio_set_high>
			ax->step_high = 1u;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	751a      	strb	r2, [r3, #20]
			++ax->emitted_steps;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	e000      	b.n	8002ce6 <motion_on_tim6_tick+0x9a>
			continue;
 8002ce4:	bf00      	nop
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002ce6:	7ffb      	ldrb	r3, [r7, #31]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d9be      	bls.n	8002c70 <motion_on_tim6_tick+0x24>
		}
	}
	uint8_t finished = 1u;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	77bb      	strb	r3, [r7, #30]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	777b      	strb	r3, [r7, #29]
 8002cfa:	e017      	b.n	8002d2c <motion_on_tim6_tick+0xe0>
		const motion_axis_state_t *ax = &g_axis_state[axis];
 8002cfc:	7f7a      	ldrb	r2, [r7, #29]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4a32      	ldr	r2, [pc, #200]	@ (8002dd0 <motion_on_tim6_tick+0x184>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
		if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d303      	bcc.n	8002d20 <motion_on_tim6_tick+0xd4>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	7d1b      	ldrb	r3, [r3, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <motion_on_tim6_tick+0xda>
			finished = 0u;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77bb      	strb	r3, [r7, #30]
			break;
 8002d24:	e005      	b.n	8002d32 <motion_on_tim6_tick+0xe6>
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002d26:	7f7b      	ldrb	r3, [r7, #29]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	777b      	strb	r3, [r7, #29]
 8002d2c:	7f7b      	ldrb	r3, [r7, #29]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d9e4      	bls.n	8002cfc <motion_on_tim6_tick+0xb0>
		}
	}
	if (!finished)
 8002d32:	7fbb      	ldrb	r3, [r7, #30]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d043      	beq.n	8002dc0 <motion_on_tim6_tick+0x174>
		return;
	uint32_t primask = motion_lock();
 8002d38:	f7ff f94f 	bl	8001fda <motion_lock>
 8002d3c:	6138      	str	r0, [r7, #16]
	if (g_has_active_segment) {
 8002d3e:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <motion_on_tim6_tick+0x180>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d035      	beq.n	8002db4 <motion_on_tim6_tick+0x168>
		uint8_t confirm = 1u;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	773b      	strb	r3, [r7, #28]
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	76fb      	strb	r3, [r7, #27]
 8002d50:	e017      	b.n	8002d82 <motion_on_tim6_tick+0x136>
			const motion_axis_state_t *ax = &g_axis_state[axis];
 8002d52:	7efa      	ldrb	r2, [r7, #27]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd0 <motion_on_tim6_tick+0x184>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
			if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d303      	bcc.n	8002d76 <motion_on_tim6_tick+0x12a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	7d1b      	ldrb	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <motion_on_tim6_tick+0x130>
				confirm = 0u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	773b      	strb	r3, [r7, #28]
				break;
 8002d7a:	e005      	b.n	8002d88 <motion_on_tim6_tick+0x13c>
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002d7c:	7efb      	ldrb	r3, [r7, #27]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	76fb      	strb	r3, [r7, #27]
 8002d82:	7efb      	ldrb	r3, [r7, #27]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d9e4      	bls.n	8002d52 <motion_on_tim6_tick+0x106>
			}
		}
		if (confirm) {
 8002d88:	7f3b      	ldrb	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d012      	beq.n	8002db4 <motion_on_tim6_tick+0x168>
			if (motion_try_start_next_locked()) {
 8002d8e:	f7ff fd11 	bl	80027b4 <motion_try_start_next_locked>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <motion_on_tim6_tick+0x154>
				g_status.state = MOTION_RUNNING;
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <motion_on_tim6_tick+0x17c>)
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e007      	b.n	8002db0 <motion_on_tim6_tick+0x164>
			} else {
				g_has_active_segment = 0u;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <motion_on_tim6_tick+0x180>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
				motion_stop_all_axes_locked();
 8002da6:	f7ff fb81 	bl	80024ac <motion_stop_all_axes_locked>
				g_status.state = MOTION_DONE;
 8002daa:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <motion_on_tim6_tick+0x17c>)
 8002dac:	2205      	movs	r2, #5
 8002dae:	701a      	strb	r2, [r3, #0]
			}
			motion_refresh_status_locked();
 8002db0:	f7ff f9ce 	bl	8002150 <motion_refresh_status_locked>
		}
	}
	motion_unlock(primask);
 8002db4:	6938      	ldr	r0, [r7, #16]
 8002db6:	f7ff f921 	bl	8001ffc <motion_unlock>
 8002dba:	e002      	b.n	8002dc2 <motion_on_tim6_tick+0x176>
		return;
 8002dbc:	bf00      	nop
 8002dbe:	e000      	b.n	8002dc2 <motion_on_tim6_tick+0x176>
		return;
 8002dc0:	bf00      	nop
}
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200000bc 	.word	0x200000bc
 8002dcc:	2000010c 	.word	0x2000010c
 8002dd0:	200000c4 	.word	0x200000c4
 8002dd4:	0800e2e4 	.word	0x0800e2e4

08002dd8 <motion_on_tim7_tick>:
void motion_on_tim7_tick(void) {
 8002dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ddc:	b08c      	sub	sp, #48	@ 0x30
 8002dde:	af00      	add	r7, sp, #0
	motion_update_encoders();
 8002de0:	f7ff fcfe 	bl	80027e0 <motion_update_encoders>
	if (g_status.state == MOTION_RUNNING && g_has_active_segment) {
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <motion_on_tim7_tick+0xe8>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d15a      	bne.n	8002ea4 <motion_on_tim7_tick+0xcc>
 8002dee:	4b35      	ldr	r3, [pc, #212]	@ (8002ec4 <motion_on_tim7_tick+0xec>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d055      	beq.n	8002ea4 <motion_on_tim7_tick+0xcc>
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002dfe:	e04d      	b.n	8002e9c <motion_on_tim7_tick+0xc4>
			motion_axis_state_t *ax = &g_axis_state[axis];
 8002e00:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec8 <motion_on_tim7_tick+0xf0>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	61fb      	str	r3, [r7, #28]
			if (ax->emitted_steps >= ax->total_steps)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d238      	bcs.n	8002e90 <motion_on_tim7_tick+0xb8>
				continue;
			uint32_t total = ax->total_steps;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61bb      	str	r3, [r7, #24]
			uint32_t target = ax->target_steps;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
			uint32_t velocity = ax->velocity_per_tick;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	899b      	ldrh	r3, [r3, #12]
 8002e2e:	617b      	str	r3, [r7, #20]
			if (velocity == 0u) {
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <motion_on_tim7_tick+0x64>
				target = total;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3a:	e025      	b.n	8002e88 <motion_on_tim7_tick+0xb0>
			} else {
				uint64_t next = (uint64_t) target + (uint64_t) velocity;
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	2200      	movs	r2, #0
 8002e40:	461c      	mov	r4, r3
 8002e42:	4615      	mov	r5, r2
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2200      	movs	r2, #0
 8002e48:	4698      	mov	r8, r3
 8002e4a:	4691      	mov	r9, r2
 8002e4c:	eb14 0308 	adds.w	r3, r4, r8
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	eb45 0309 	adc.w	r3, r5, r9
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
				if (next > total)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2200      	movs	r2, #0
 8002e64:	469a      	mov	sl, r3
 8002e66:	4693      	mov	fp, r2
 8002e68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e6c:	4592      	cmp	sl, r2
 8002e6e:	eb7b 0303 	sbcs.w	r3, fp, r3
 8002e72:	d207      	bcs.n	8002e84 <motion_on_tim7_tick+0xac>
					next = total;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2200      	movs	r2, #0
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e80:	e9c7 2308 	strd	r2, r3, [r7, #32]
				target = (uint32_t) next;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	62bb      	str	r3, [r7, #40]	@ 0x28
			}
			ax->target_steps = target;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e000      	b.n	8002e92 <motion_on_tim7_tick+0xba>
				continue;
 8002e90:	bf00      	nop
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002e92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e96:	3301      	adds	r3, #1
 8002e98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d9ad      	bls.n	8002e00 <motion_on_tim7_tick+0x28>
		}
	}
	uint32_t primask = motion_lock();
 8002ea4:	f7ff f899 	bl	8001fda <motion_lock>
 8002ea8:	6138      	str	r0, [r7, #16]
	motion_refresh_status_locked();
 8002eaa:	f7ff f951 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 8002eae:	6938      	ldr	r0, [r7, #16]
 8002eb0:	f7ff f8a4 	bl	8001ffc <motion_unlock>
}
 8002eb4:	bf00      	nop
 8002eb6:	3730      	adds	r7, #48	@ 0x30
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200000bc 	.word	0x200000bc
 8002ec4:	2000010c 	.word	0x2000010c
 8002ec8:	200000c4 	.word	0x200000c4

08002ecc <motion_on_move_queue_add>:
void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b097      	sub	sp, #92	@ 0x5c
 8002ed0:	af06      	add	r7, sp, #24
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
	move_queue_add_req_t req;
	uint8_t ack_status = MOTION_ACK_INVALID;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t frame_id = 0u;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (!frame)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d06c      	beq.n	8002fc2 <motion_on_move_queue_add+0xf6>
		return;
	proto_result_t decode_status = move_queue_add_req_decoder(frame, len, &req);
 8002ee8:	f107 0308 	add.w	r3, r7, #8
 8002eec:	461a      	mov	r2, r3
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7fd fced 	bl	80008d0 <move_queue_add_req_decoder>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	if (decode_status != PROTO_OK) {
 8002efc:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d014      	beq.n	8002f2e <motion_on_move_queue_add+0x62>
		motion_send_queue_add_ack(frame_id, ack_status);
 8002f04:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002f08:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fcd8 	bl	80028c4 <motion_send_queue_add_ack>
		LOGA_THIS(LOG_STATE_ERROR, decode_status, "queue_add", "decode_fail");
 8002f14:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8002f18:	492c      	ldr	r1, [pc, #176]	@ (8002fcc <motion_on_move_queue_add+0x100>)
 8002f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd0 <motion_on_move_queue_add+0x104>)
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd4 <motion_on_move_queue_add+0x108>)
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	460b      	mov	r3, r1
 8002f24:	2164      	movs	r1, #100	@ 0x64
 8002f26:	2002      	movs	r0, #2
 8002f28:	f7fe ffea 	bl	8001f00 <log_event_auto>
		return;
 8002f2c:	e04a      	b.n	8002fc4 <motion_on_move_queue_add+0xf8>
	}
	frame_id = req.frameId;
 8002f2e:	7a3b      	ldrb	r3, [r7, #8]
 8002f30:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint32_t primask = motion_lock();
 8002f34:	f7ff f851 	bl	8001fda <motion_lock>
 8002f38:	63b8      	str	r0, [r7, #56]	@ 0x38
	proto_result_t push_status = motion_queue_push_locked(&req);
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fb36 	bl	80025b0 <motion_queue_push_locked>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (push_status == PROTO_OK) {
 8002f4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d112      	bne.n	8002f78 <motion_on_move_queue_add+0xac>
		ack_status = MOTION_ACK_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (g_status.state == MOTION_IDLE || g_status.state == MOTION_DONE)
 8002f58:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <motion_on_move_queue_add+0x10c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <motion_on_move_queue_add+0xa0>
 8002f62:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <motion_on_move_queue_add+0x10c>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d102      	bne.n	8002f72 <motion_on_move_queue_add+0xa6>
			g_status.state = MOTION_QUEUED;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <motion_on_move_queue_add+0x10c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
		motion_refresh_status_locked();
 8002f72:	f7ff f8ed 	bl	8002150 <motion_refresh_status_locked>
 8002f76:	e002      	b.n	8002f7e <motion_on_move_queue_add+0xb2>
	} else {
		ack_status = MOTION_ACK_QUEUE_FULL;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
	motion_unlock(primask);
 8002f7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f80:	f7ff f83c 	bl	8001ffc <motion_unlock>
	motion_send_queue_add_ack(frame_id, ack_status);
 8002f84:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002f88:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fc98 	bl	80028c4 <motion_send_queue_add_ack>
	LOGA_THIS(LOG_STATE_RECEIVED, ack_status, "queue_add",
 8002f94:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002f98:	480c      	ldr	r0, [pc, #48]	@ (8002fcc <motion_on_move_queue_add+0x100>)
 8002f9a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002f9e:	7a79      	ldrb	r1, [r7, #9]
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	490d      	ldr	r1, [pc, #52]	@ (8002fd8 <motion_on_move_queue_add+0x10c>)
 8002fa4:	7849      	ldrb	r1, [r1, #1]
 8002fa6:	b2c9      	uxtb	r1, r1
 8002fa8:	9104      	str	r1, [sp, #16]
 8002faa:	9403      	str	r4, [sp, #12]
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <motion_on_move_queue_add+0x110>)
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <motion_on_move_queue_add+0x108>)
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f7fe ffa0 	bl	8001f00 <log_event_auto>
 8002fc0:	e000      	b.n	8002fc4 <motion_on_move_queue_add+0xf8>
		return;
 8002fc2:	bf00      	nop
			"frame=%u dirMask=0x%02X queue=%u", (unsigned )frame_id,
			(unsigned )req.dirMask, (unsigned )g_status.queue_depth);
}
 8002fc4:	3744      	adds	r7, #68	@ 0x44
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	0800df10 	.word	0x0800df10
 8002fd0:	0800df7c 	.word	0x0800df7c
 8002fd4:	0800df88 	.word	0x0800df88
 8002fd8:	200000bc 	.word	0x200000bc
 8002fdc:	0800df94 	.word	0x0800df94

08002fe0 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b08c      	sub	sp, #48	@ 0x30
 8002fe4:	af08      	add	r7, sp, #32
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
	move_queue_status_req_t req;
	if (move_queue_status_req_decoder(frame, len, &req) != PROTO_OK) {
 8002fea:	f107 0308 	add.w	r3, r7, #8
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fd6a 	bl	8000acc <move_queue_status_req_decoder>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <motion_on_move_queue_status+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "queue_status",
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <motion_on_move_queue_status+0x9c>)
 8003000:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <motion_on_move_queue_status+0xa0>)
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <motion_on_move_queue_status+0xa4>)
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	f06f 0201 	mvn.w	r2, #1
 800300e:	2164      	movs	r1, #100	@ 0x64
 8003010:	2002      	movs	r0, #2
 8003012:	f7fe ff75 	bl	8001f00 <log_event_auto>
 8003016:	e02e      	b.n	8003076 <motion_on_move_queue_status+0x96>
				"decode_fail");
		return;
	}
	uint32_t primask = motion_lock();
 8003018:	f7fe ffdf 	bl	8001fda <motion_lock>
 800301c:	60f8      	str	r0, [r7, #12]
	motion_refresh_status_locked();
 800301e:	f7ff f897 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7fe ffea 	bl	8001ffc <motion_unlock>
	motion_send_queue_status_response(req.frameId);
 8003028:	7a3b      	ldrb	r3, [r7, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fc8e 	bl	800294c <motion_send_queue_status_response>
	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status",
 8003030:	4a12      	ldr	r2, [pc, #72]	@ (800307c <motion_on_move_queue_status+0x9c>)
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	4b13      	ldr	r3, [pc, #76]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 8003044:	789b      	ldrb	r3, [r3, #2]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461c      	mov	r4, r3
 800304a:	4b0f      	ldr	r3, [pc, #60]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 800304c:	78db      	ldrb	r3, [r3, #3]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461d      	mov	r5, r3
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 8003054:	791b      	ldrb	r3, [r3, #4]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	9306      	str	r3, [sp, #24]
 800305a:	9505      	str	r5, [sp, #20]
 800305c:	9404      	str	r4, [sp, #16]
 800305e:	9003      	str	r0, [sp, #12]
 8003060:	9102      	str	r1, [sp, #8]
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <motion_on_move_queue_status+0xac>)
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <motion_on_move_queue_status+0xa4>)
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	2200      	movs	r2, #0
 800306e:	2101      	movs	r1, #1
 8003070:	2002      	movs	r0, #2
 8003072:	f7fe ff45 	bl	8001f00 <log_event_auto>
			"state=%u depth=%u pct=(%u,%u,%u)", (unsigned )g_status.state,
			(unsigned )g_status.queue_depth, (unsigned )g_status.pctX,
			(unsigned )g_status.pctY, (unsigned )g_status.pctZ);
}
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bdb0      	pop	{r4, r5, r7, pc}
 800307c:	0800df10 	.word	0x0800df10
 8003080:	0800df7c 	.word	0x0800df7c
 8003084:	0800dfb8 	.word	0x0800dfb8
 8003088:	200000bc 	.word	0x200000bc
 800308c:	0800dfc8 	.word	0x0800dfc8

08003090 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af02      	add	r7, sp, #8
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	start_move_req_t req;
	if (start_move_req_decoder(frame, len, &req) != PROTO_OK) {
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	461a      	mov	r2, r3
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fd87 	bl	8000bb6 <start_move_req_decoder>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <motion_on_start_move+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "start_move",
 80030ae:	4a21      	ldr	r2, [pc, #132]	@ (8003134 <motion_on_start_move+0xa4>)
 80030b0:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <motion_on_start_move+0xa8>)
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <motion_on_start_move+0xac>)
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	f06f 0201 	mvn.w	r2, #1
 80030be:	2164      	movs	r1, #100	@ 0x64
 80030c0:	2002      	movs	r0, #2
 80030c2:	f7fe ff1d 	bl	8001f00 <log_event_auto>
 80030c6:	e032      	b.n	800312e <motion_on_start_move+0x9e>
				"decode_fail");
		return;
	}
	uint8_t started = 0u;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75fb      	strb	r3, [r7, #23]
	uint32_t primask = motion_lock();
 80030cc:	f7fe ff85 	bl	8001fda <motion_lock>
 80030d0:	6138      	str	r0, [r7, #16]
	if (!g_has_active_segment) {
 80030d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <motion_on_start_move+0xb0>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <motion_on_start_move+0x62>
		if (motion_try_start_next_locked()) {
 80030dc:	f7ff fb6a 	bl	80027b4 <motion_try_start_next_locked>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <motion_on_start_move+0x6c>
			g_status.state = MOTION_RUNNING;
 80030e6:	4b17      	ldr	r3, [pc, #92]	@ (8003144 <motion_on_start_move+0xb4>)
 80030e8:	2202      	movs	r2, #2
 80030ea:	701a      	strb	r2, [r3, #0]
			started = 1u;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75fb      	strb	r3, [r7, #23]
 80030f0:	e004      	b.n	80030fc <motion_on_start_move+0x6c>
		}
	} else {
		g_status.state = MOTION_RUNNING;
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <motion_on_start_move+0xb4>)
 80030f4:	2202      	movs	r2, #2
 80030f6:	701a      	strb	r2, [r3, #0]
		started = 1u;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
	}
	motion_refresh_status_locked();
 80030fc:	f7ff f828 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 8003100:	6938      	ldr	r0, [r7, #16]
 8003102:	f7fe ff7b 	bl	8001ffc <motion_unlock>
	motion_send_start_response(req.frameId);
 8003106:	7b3b      	ldrb	r3, [r7, #12]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fc7f 	bl	8002a0c <motion_send_start_response>
	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move",
 800310e:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <motion_on_start_move+0xa4>)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <motion_on_start_move+0x8a>
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <motion_on_start_move+0xb8>)
 8003118:	e000      	b.n	800311c <motion_on_start_move+0x8c>
 800311a:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <motion_on_start_move+0xbc>)
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	4b07      	ldr	r3, [pc, #28]	@ (800313c <motion_on_start_move+0xac>)
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	2200      	movs	r2, #0
 8003126:	2102      	movs	r1, #2
 8003128:	2002      	movs	r0, #2
 800312a:	f7fe fee9 	bl	8001f00 <log_event_auto>
			started ? "running" : "ignored");
}
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	0800df10 	.word	0x0800df10
 8003138:	0800df7c 	.word	0x0800df7c
 800313c:	0800dfec 	.word	0x0800dfec
 8003140:	2000010c 	.word	0x2000010c
 8003144:	200000bc 	.word	0x200000bc
 8003148:	0800dff8 	.word	0x0800dff8
 800314c:	0800e000 	.word	0x0800e000

08003150 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af04      	add	r7, sp, #16
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	move_end_req_t req;
	if (move_end_req_decoder(frame, len, &req) != PROTO_OK) {
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	461a      	mov	r2, r3
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fb0e 	bl	8000784 <move_end_req_decoder>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <motion_on_move_end+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "move_end", "decode_fail");
 800316e:	4a1f      	ldr	r2, [pc, #124]	@ (80031ec <motion_on_move_end+0x9c>)
 8003170:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <motion_on_move_end+0xa0>)
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <motion_on_move_end+0xa4>)
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	f06f 0201 	mvn.w	r2, #1
 800317e:	2164      	movs	r1, #100	@ 0x64
 8003180:	2002      	movs	r0, #2
 8003182:	f7fe febd 	bl	8001f00 <log_event_auto>
 8003186:	e02d      	b.n	80031e4 <motion_on_move_end+0x94>
		return;
	}
	uint32_t primask = motion_lock();
 8003188:	f7fe ff27 	bl	8001fda <motion_lock>
 800318c:	60f8      	str	r0, [r7, #12]
	motion_stop_all_axes_locked();
 800318e:	f7ff f98d 	bl	80024ac <motion_stop_all_axes_locked>
	motion_queue_clear_locked();
 8003192:	f7ff f9f7 	bl	8002584 <motion_queue_clear_locked>
	g_has_active_segment = 0u;
 8003196:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <motion_on_move_end+0xa8>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
	g_status.state = MOTION_STOPPING;
 800319c:	4b17      	ldr	r3, [pc, #92]	@ (80031fc <motion_on_move_end+0xac>)
 800319e:	2204      	movs	r2, #4
 80031a0:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 80031a2:	f7fe ffd5 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7fe ff28 	bl	8001ffc <motion_unlock>
	motion_send_move_end_response(req.frameId);
 80031ac:	7a3b      	ldrb	r3, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fc5e 	bl	8002a70 <motion_send_move_end_response>
	primask = motion_lock();
 80031b4:	f7fe ff11 	bl	8001fda <motion_lock>
 80031b8:	60f8      	str	r0, [r7, #12]
	g_status.state = MOTION_IDLE;
 80031ba:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <motion_on_move_end+0xac>)
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 80031c0:	f7fe ffc6 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7fe ff19 	bl	8001ffc <motion_unlock>
	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopped");
 80031ca:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <motion_on_move_end+0x9c>)
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <motion_on_move_end+0xb0>)
 80031ce:	9302      	str	r3, [sp, #8]
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <motion_on_move_end+0xb4>)
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <motion_on_move_end+0xa4>)
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	2102      	movs	r1, #2
 80031de:	2002      	movs	r0, #2
 80031e0:	f7fe fe8e 	bl	8001f00 <log_event_auto>
}
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	0800df10 	.word	0x0800df10
 80031f0:	0800df7c 	.word	0x0800df7c
 80031f4:	0800df54 	.word	0x0800df54
 80031f8:	2000010c 	.word	0x2000010c
 80031fc:	200000bc 	.word	0x200000bc
 8003200:	0800e008 	.word	0x0800e008
 8003204:	0800df70 	.word	0x0800df70

08003208 <motion_demo_set_continuous>:
    motion_unlock(primask);
}

// Liga/desliga gerador contínuo de passos (ignora a fila)
void motion_demo_set_continuous(uint8_t enable)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
    uint32_t primask = motion_lock();
 8003212:	f7fe fee2 	bl	8001fda <motion_lock>
 8003216:	6138      	str	r0, [r7, #16]
    g_demo_continuous = (enable ? 1u : 0u);
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <motion_demo_set_continuous+0x1a>
 800321e:	2201      	movs	r2, #1
 8003220:	e000      	b.n	8003224 <motion_demo_set_continuous+0x1c>
 8003222:	2200      	movs	r2, #0
 8003224:	4b34      	ldr	r3, [pc, #208]	@ (80032f8 <motion_demo_set_continuous+0xf0>)
 8003226:	701a      	strb	r2, [r3, #0]

    if (g_demo_continuous) {
 8003228:	4b33      	ldr	r3, [pc, #204]	@ (80032f8 <motion_demo_set_continuous+0xf0>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d04e      	beq.n	80032d0 <motion_demo_set_continuous+0xc8>
        // Programa um "segmento" muito longo e velocidade fixa por eixo
        g_has_active_segment = 1u;
 8003232:	4b32      	ldr	r3, [pc, #200]	@ (80032fc <motion_demo_set_continuous+0xf4>)
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003238:	2300      	movs	r3, #0
 800323a:	75fb      	strb	r3, [r7, #23]
 800323c:	e03f      	b.n	80032be <motion_demo_set_continuous+0xb6>
            motion_axis_state_t *ax = &g_axis_state[axis];
 800323e:	7dfa      	ldrb	r2, [r7, #23]
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4a2d      	ldr	r2, [pc, #180]	@ (8003300 <motion_demo_set_continuous+0xf8>)
 800324a:	4413      	add	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
            ax->total_steps = 0xFFFFFFFFu; // efetivamente contínuo
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	601a      	str	r2, [r3, #0]
            ax->target_steps = 0u;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
            ax->emitted_steps = 0u;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
            ax->velocity_per_tick = 10;    // ≈ 10k steps/s
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	220a      	movs	r2, #10
 8003266:	819a      	strh	r2, [r3, #12]
            ax->kp = ax->ki = ax->kd = 0u;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	825a      	strh	r2, [r3, #18]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8a5a      	ldrh	r2, [r3, #18]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	821a      	strh	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8a1a      	ldrh	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	81da      	strh	r2, [r3, #14]
            ax->step_high = 0u;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	751a      	strb	r2, [r3, #20]
            motion_hw_reset_step(axis);
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f8f8 	bl	800247c <motion_hw_reset_step>
            motion_hw_set_direction(axis, 1u);   // forward
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f8a3 	bl	80023dc <motion_hw_set_direction>
            motion_hw_enable_axis(axis, 1u);     // liga driver (ativo em baixo)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff f8c6 	bl	800242c <motion_hw_enable_axis>
            g_encoder_origin[axis] = g_encoder_position[axis];
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	7df9      	ldrb	r1, [r7, #23]
 80032a4:	4a17      	ldr	r2, [pc, #92]	@ (8003304 <motion_demo_set_continuous+0xfc>)
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	4816      	ldr	r0, [pc, #88]	@ (8003308 <motion_demo_set_continuous+0x100>)
 80032b0:	00c9      	lsls	r1, r1, #3
 80032b2:	4401      	add	r1, r0
 80032b4:	e9c1 2300 	strd	r2, r3, [r1]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	3301      	adds	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d9bc      	bls.n	800323e <motion_demo_set_continuous+0x36>
        }
        g_status.state = MOTION_RUNNING;
 80032c4:	4b11      	ldr	r3, [pc, #68]	@ (800330c <motion_demo_set_continuous+0x104>)
 80032c6:	2202      	movs	r2, #2
 80032c8:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 80032ca:	f7fe ff41 	bl	8002150 <motion_refresh_status_locked>
 80032ce:	e00b      	b.n	80032e8 <motion_demo_set_continuous+0xe0>
    } else {
        // Para tudo e retorna a IDLE
        motion_stop_all_axes_locked();
 80032d0:	f7ff f8ec 	bl	80024ac <motion_stop_all_axes_locked>
        motion_queue_clear_locked();
 80032d4:	f7ff f956 	bl	8002584 <motion_queue_clear_locked>
        g_has_active_segment = 0u;
 80032d8:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <motion_demo_set_continuous+0xf4>)
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
        g_status.state = MOTION_IDLE;
 80032de:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <motion_demo_set_continuous+0x104>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 80032e4:	f7fe ff34 	bl	8002150 <motion_refresh_status_locked>
    }
    motion_unlock(primask);
 80032e8:	6938      	ldr	r0, [r7, #16]
 80032ea:	f7fe fe87 	bl	8001ffc <motion_unlock>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000c58 	.word	0x20000c58
 80032fc:	2000010c 	.word	0x2000010c
 8003300:	200000c4 	.word	0x200000c4
 8003304:	20000c18 	.word	0x20000c18
 8003308:	20000c40 	.word	0x20000c40
 800330c:	200000bc 	.word	0x200000bc

08003310 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	if (!htim)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00f      	beq.n	800333e <HAL_TIM_PeriodElapsedCallback+0x2e>
		return;
	if (htim->Instance == TIM6) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a09      	ldr	r2, [pc, #36]	@ (8003348 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d102      	bne.n	800332e <HAL_TIM_PeriodElapsedCallback+0x1e>
		motion_on_tim6_tick();
 8003328:	f7ff fc90 	bl	8002c4c <motion_on_tim6_tick>
 800332c:	e008      	b.n	8003340 <HAL_TIM_PeriodElapsedCallback+0x30>
	} else if (htim->Instance == TIM7) {
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a06      	ldr	r2, [pc, #24]	@ (800334c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <HAL_TIM_PeriodElapsedCallback+0x30>
		motion_on_tim7_tick();
 8003338:	f7ff fd4e 	bl	8002dd8 <motion_on_tim7_tick>
 800333c:	e000      	b.n	8003340 <HAL_TIM_PeriodElapsedCallback+0x30>
		return;
 800333e:	bf00      	nop
	} else {
		(void) htim;
	}
}
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40001000 	.word	0x40001000
 800334c:	40001400 	.word	0x40001400

08003350 <probe_service_init>:

LOG_SVC_DEFINE(LOG_SVC_PROBE, "probe");

static probe_status_t g_probe;

void probe_service_init(void) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af04      	add	r7, sp, #16
	g_probe.axis_done_mask = 0;
 8003356:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <probe_service_init+0x40>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
	g_probe.error_flags = 0;
 800335c:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <probe_service_init+0x40>)
 800335e:	2200      	movs	r2, #0
 8003360:	705a      	strb	r2, [r3, #1]
	g_probe.latched_pos_x = g_probe.latched_pos_y = g_probe.latched_pos_z = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <probe_service_init+0x40>)
 8003366:	60d3      	str	r3, [r2, #12]
 8003368:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <probe_service_init+0x40>)
 800336a:	6093      	str	r3, [r2, #8]
 800336c:	4a08      	ldr	r2, [pc, #32]	@ (8003390 <probe_service_init+0x40>)
 800336e:	6053      	str	r3, [r2, #4]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8003370:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <probe_service_init+0x44>)
 8003372:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <probe_service_init+0x48>)
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <probe_service_init+0x4c>)
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <probe_service_init+0x50>)
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	2004      	movs	r0, #4
 8003386:	f7fe fdbb 	bl	8001f00 <log_event_auto>
}
 800338a:	bf00      	nop
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000c5c 	.word	0x20000c5c
 8003394:	0800e010 	.word	0x0800e010
 8003398:	0800e018 	.word	0x0800e018
 800339c:	0800e01c 	.word	0x0800e01c
 80033a0:	0800e020 	.word	0x0800e020

080033a4 <probe_on_move_probe_level>:
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 80033ae:	4a08      	ldr	r2, [pc, #32]	@ (80033d0 <probe_on_move_probe_level+0x2c>)
 80033b0:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <probe_on_move_probe_level+0x30>)
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <probe_on_move_probe_level+0x34>)
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <probe_on_move_probe_level+0x38>)
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	2200      	movs	r2, #0
 80033c0:	2101      	movs	r1, #1
 80033c2:	2004      	movs	r0, #4
 80033c4:	f7fe fd9c 	bl	8001f00 <log_event_auto>
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	0800e010 	.word	0x0800e010
 80033d4:	0800e028 	.word	0x0800e028
 80033d8:	0800e01c 	.word	0x0800e01c
 80033dc:	0800e038 	.word	0x0800e038

080033e0 <safety_service_init>:

LOG_SVC_DEFINE(LOG_SVC_SAFETY, "safety");

static volatile safety_state_t g_state = SAFETY_NORMAL;

void safety_service_init(void) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af04      	add	r7, sp, #16
	g_state = SAFETY_NORMAL;
 80033e6:	4b09      	ldr	r3, [pc, #36]	@ (800340c <safety_service_init+0x2c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "normal");
 80033ec:	4a08      	ldr	r2, [pc, #32]	@ (8003410 <safety_service_init+0x30>)
 80033ee:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <safety_service_init+0x34>)
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <safety_service_init+0x38>)
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	4b09      	ldr	r3, [pc, #36]	@ (800341c <safety_service_init+0x3c>)
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	2005      	movs	r0, #5
 8003402:	f7fe fd7d 	bl	8001f00 <log_event_auto>
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000c6c 	.word	0x20000c6c
 8003410:	0800e04c 	.word	0x0800e04c
 8003414:	0800e054 	.word	0x0800e054
 8003418:	0800e05c 	.word	0x0800e05c
 800341c:	0800e060 	.word	0x0800e060

08003420 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	68b8      	ldr	r0, [r7, #8]
 8003430:	f7ff fd4c 	bl	8002ecc <motion_on_move_queue_add>
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	68b8      	ldr	r0, [r7, #8]
 800344c:	f7ff fdc8 	bl	8002fe0 <motion_on_move_queue_status>
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	68b8      	ldr	r0, [r7, #8]
 8003468:	f7ff fe12 	bl	8003090 <motion_on_start_move>
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	68b8      	ldr	r0, [r7, #8]
 8003484:	f7fe f878 	bl	8001578 <home_on_move_home>
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	68b8      	ldr	r0, [r7, #8]
 80034a0:	f7ff ff80 	bl	80033a4 <probe_on_move_probe_level>
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	68b8      	ldr	r0, [r7, #8]
 80034bc:	f7ff fe48 	bl	8003150 <motion_on_move_end>
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	68b8      	ldr	r0, [r7, #8]
 80034d8:	f7fe fbb2 	bl	8001c40 <led_on_led_ctrl>
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	if (!h)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01b      	beq.n	800355a <services_register_handlers+0x46>
		return;
	h->on_move_queue_add = h_move_queue_add;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a10      	ldr	r2, [pc, #64]	@ (8003568 <services_register_handlers+0x54>)
 8003526:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a10      	ldr	r2, [pc, #64]	@ (800356c <services_register_handlers+0x58>)
 800352c:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a0f      	ldr	r2, [pc, #60]	@ (8003570 <services_register_handlers+0x5c>)
 8003532:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0f      	ldr	r2, [pc, #60]	@ (8003574 <services_register_handlers+0x60>)
 8003538:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a0e      	ldr	r2, [pc, #56]	@ (8003578 <services_register_handlers+0x64>)
 800353e:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0e      	ldr	r2, [pc, #56]	@ (800357c <services_register_handlers+0x68>)
 8003544:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a0d      	ldr	r2, [pc, #52]	@ (8003580 <services_register_handlers+0x6c>)
 800354a:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a0d      	ldr	r2, [pc, #52]	@ (8003584 <services_register_handlers+0x70>)
 8003550:	61da      	str	r2, [r3, #28]
	h->on_test_hello = h_test_hello;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a0c      	ldr	r2, [pc, #48]	@ (8003588 <services_register_handlers+0x74>)
 8003556:	621a      	str	r2, [r3, #32]
 8003558:	e000      	b.n	800355c <services_register_handlers+0x48>
		return;
 800355a:	bf00      	nop
}
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	08003421 	.word	0x08003421
 800356c:	0800343d 	.word	0x0800343d
 8003570:	08003459 	.word	0x08003459
 8003574:	08003475 	.word	0x08003475
 8003578:	08003491 	.word	0x08003491
 800357c:	080034ad 	.word	0x080034ad
 8003580:	080034c9 	.word	0x080034c9
 8003584:	080034e5 	.word	0x080034e5
 8003588:	080034fd 	.word	0x080034fd

0800358c <tx_fill_left_zero_right_filler>:
/**
 * @brief Preenche o buffer de TX com 22×0x00 à esquerda e 20×SPI_FILL_BYTE à direita.
 * @param dst Ponteiro para o buffer de TX (tamanho = 42).
 */
static inline void tx_fill_left_zero_right_filler(uint8_t *dst)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
    memset(&dst[0],                 0x00,           RESP_LEFT_PAD_LEN); /* 22×0x00  */
 8003594:	2216      	movs	r2, #22
 8003596:	2100      	movs	r1, #0
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f009 fc93 	bl	800cec4 <memset>
    memset(&dst[RESP_LEFT_PAD_LEN], SPI_FILL_BYTE,  RESP_RIGHT_LEN);    /* 20×filler */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3316      	adds	r3, #22
 80035a2:	2214      	movs	r2, #20
 80035a4:	21a5      	movs	r1, #165	@ 0xa5
 80035a6:	4618      	mov	r0, r3
 80035a8:	f009 fc8c 	bl	800cec4 <memset>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <is_fill42>:
 * @param buf Buffer de entrada (tamanho = 42).
 * @param val Valor esperado em todos os bytes.
 * @return 1 se todos os bytes são 'val', 0 caso contrário.
 */
static int is_fill42(const uint8_t *buf, uint8_t val)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e00b      	b.n	80035de <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <is_fill42+0x24>
 80035d4:	2300      	movs	r3, #0
 80035d6:	e006      	b.n	80035e6 <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b29      	cmp	r3, #41	@ 0x29
 80035e2:	d9f0      	bls.n	80035c6 <is_fill42+0x12>
    return 1;
 80035e4:	2301      	movs	r3, #1
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <find_frame>:
 * @param off  (out) Offset de início do quadro (REQ_HEADER).
 * @param len  (out) Comprimento do quadro (inclui REQ_TAIL).
 * @return 1 se encontrou, 0 caso contrário.
 */
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b087      	sub	sp, #28
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 8003602:	e002      	b.n	800360a <find_frame+0x18>
 8003604:	8afb      	ldrh	r3, [r7, #22]
 8003606:	3301      	adds	r3, #1
 8003608:	82fb      	strh	r3, [r7, #22]
 800360a:	8afb      	ldrh	r3, [r7, #22]
 800360c:	2b29      	cmp	r3, #41	@ 0x29
 800360e:	d805      	bhi.n	800361c <find_frame+0x2a>
 8003610:	8afb      	ldrh	r3, [r7, #22]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2baa      	cmp	r3, #170	@ 0xaa
 800361a:	d1f3      	bne.n	8003604 <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 800361c:	8afb      	ldrh	r3, [r7, #22]
 800361e:	2b29      	cmp	r3, #41	@ 0x29
 8003620:	d901      	bls.n	8003626 <find_frame+0x34>
 8003622:	2300      	movs	r3, #0
 8003624:	e01d      	b.n	8003662 <find_frame+0x70>

    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8003626:	8afb      	ldrh	r3, [r7, #22]
 8003628:	3301      	adds	r3, #1
 800362a:	82bb      	strh	r3, [r7, #20]
 800362c:	e015      	b.n	800365a <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 800362e:	8abb      	ldrh	r3, [r7, #20]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b55      	cmp	r3, #85	@ 0x55
 8003638:	d10c      	bne.n	8003654 <find_frame+0x62>
            *off = i;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	8afa      	ldrh	r2, [r7, #22]
 800363e:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8003640:	8aba      	ldrh	r2, [r7, #20]
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	b29b      	uxth	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	801a      	strh	r2, [r3, #0]
            return 1;
 8003650:	2301      	movs	r3, #1
 8003652:	e006      	b.n	8003662 <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8003654:	8abb      	ldrh	r3, [r7, #20]
 8003656:	3301      	adds	r3, #1
 8003658:	82bb      	strh	r3, [r7, #20]
 800365a:	8abb      	ldrh	r3, [r7, #20]
 800365c:	2b29      	cmp	r3, #41	@ 0x29
 800365e:	d9e6      	bls.n	800362e <find_frame+0x3c>
        }
    }
    return 0;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <prepare_next_tx>:
 *      * Se n > 20, trunca para os 20 últimos bytes.
 *  - SEM resposta:
 *      * 22×0x00 + 20×SPI_FILL_BYTE (poll).
 */
static void prepare_next_tx(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08e      	sub	sp, #56	@ 0x38
 8003674:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34

    if (!g_resp_fifo) {
 800367a:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <prepare_next_tx+0x90>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <prepare_next_tx+0x20>
        /* Sem fila -> 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8003682:	4820      	ldr	r0, [pc, #128]	@ (8003704 <prepare_next_tx+0x94>)
 8003684:	f7ff ff82 	bl	800358c <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8003688:	4b1f      	ldr	r3, [pc, #124]	@ (8003708 <prepare_next_tx+0x98>)
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e034      	b.n	80036fa <prepare_next_tx+0x8a>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 8003690:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <prepare_next_tx+0x90>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	1d39      	adds	r1, r7, #4
 8003696:	222a      	movs	r2, #42	@ 0x2a
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd fdcd 	bl	8001238 <resp_fifo_pop>
 800369e:	6378      	str	r0, [r7, #52]	@ 0x34
    if (n > 0) {
 80036a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	dd23      	ble.n	80036ee <prepare_next_tx+0x7e>
        /* Zera TODO o frame para evitar A5 antes do payload */
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 80036a6:	222a      	movs	r2, #42	@ 0x2a
 80036a8:	2100      	movs	r1, #0
 80036aa:	4816      	ldr	r0, [pc, #88]	@ (8003704 <prepare_next_tx+0x94>)
 80036ac:	f009 fc0a 	bl	800cec4 <memset>

        /* Copia o payload alinhado à direita (trunca se necessário) */
        uint16_t to_copy = (uint16_t)((n > (int)RESP_RIGHT_LEN) ? RESP_RIGHT_LEN : n);
 80036b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b2:	2b14      	cmp	r3, #20
 80036b4:	dc02      	bgt.n	80036bc <prepare_next_tx+0x4c>
 80036b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	e000      	b.n	80036be <prepare_next_tx+0x4e>
 80036bc:	2314      	movs	r3, #20
 80036be:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint16_t dst_off = (uint16_t)(APP_SPI_DMA_BUF_LEN - to_copy); /* 42 - to_copy */
 80036c0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80036c2:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80036c6:	863b      	strh	r3, [r7, #48]	@ 0x30
        uint16_t src_off = (uint16_t)(n - to_copy);                   /* últimos 'to_copy' bytes */
 80036c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        memcpy(&g_spi_tx_dma_buf[dst_off], &tmp[src_off], to_copy);
 80036d2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80036d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003704 <prepare_next_tx+0x94>)
 80036d6:	1898      	adds	r0, r3, r2
 80036d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80036da:	1d3a      	adds	r2, r7, #4
 80036dc:	4413      	add	r3, r2
 80036de:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80036e0:	4619      	mov	r1, r3
 80036e2:	f009 fc7a 	bl	800cfda <memcpy>
        g_state = APP_SPI_PENDING;
 80036e6:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <prepare_next_tx+0x98>)
 80036e8:	2202      	movs	r2, #2
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e005      	b.n	80036fa <prepare_next_tx+0x8a>
    } else {
        /* Sem resposta -> mantém contrato visual: 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80036ee:	4805      	ldr	r0, [pc, #20]	@ (8003704 <prepare_next_tx+0x94>)
 80036f0:	f7ff ff4c 	bl	800358c <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 80036f4:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <prepare_next_tx+0x98>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
    }
}
 80036fa:	3738      	adds	r7, #56	@ 0x38
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000cdc 	.word	0x20000cdc
 8003704:	20000d0c 	.word	0x20000d0c
 8003708:	20000d38 	.word	0x20000d38

0800370c <restart_spi_dma>:
/**
 * @brief Reinicia uma transação SPI por DMA (não bloqueante).
 * Seta g_state=BUSY em caso de sucesso; seta g_spi_error_flag em erro.
 */
static void restart_spi_dma(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8003710:	480d      	ldr	r0, [pc, #52]	@ (8003748 <restart_spi_dma+0x3c>)
 8003712:	f004 ff8d 	bl	8008630 <HAL_SPI_GetState>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d003      	beq.n	8003724 <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <restart_spi_dma+0x40>)
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
        return;
 8003722:	e00f      	b.n	8003744 <restart_spi_dma+0x38>
    }

    if (HAL_SPI_TransmitReceive_DMA(&hspi1,
 8003724:	232a      	movs	r3, #42	@ 0x2a
 8003726:	4a0a      	ldr	r2, [pc, #40]	@ (8003750 <restart_spi_dma+0x44>)
 8003728:	490a      	ldr	r1, [pc, #40]	@ (8003754 <restart_spi_dma+0x48>)
 800372a:	4807      	ldr	r0, [pc, #28]	@ (8003748 <restart_spi_dma+0x3c>)
 800372c:	f004 fcb4 	bl	8008098 <HAL_SPI_TransmitReceive_DMA>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 8003736:	4b05      	ldr	r3, [pc, #20]	@ (800374c <restart_spi_dma+0x40>)
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
        return;
 800373c:	e002      	b.n	8003744 <restart_spi_dma+0x38>
    }

    g_state = APP_SPI_BUSY;
 800373e:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <restart_spi_dma+0x4c>)
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
}
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000d3c 	.word	0x20000d3c
 800374c:	20000d37 	.word	0x20000d37
 8003750:	20000ce0 	.word	0x20000ce0
 8003754:	20000d0c 	.word	0x20000d0c
 8003758:	20000d38 	.word	0x20000d38

0800375c <app_init>:
/**
 * @brief Inicializa roteador, fila de respostas e a primeira rodada DMA.
 * Preenche o primeiro TX como 22×0x00 + 20×filler.
 */
void app_init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
    /* Registra serviços no router (o projeto deve prover os handlers) */
    memset(&g_handlers, 0, sizeof g_handlers);
 8003760:	2224      	movs	r2, #36	@ 0x24
 8003762:	2100      	movs	r1, #0
 8003764:	4813      	ldr	r0, [pc, #76]	@ (80037b4 <app_init+0x58>)
 8003766:	f009 fbad 	bl	800cec4 <memset>
    services_register_handlers(&g_handlers);
 800376a:	4812      	ldr	r0, [pc, #72]	@ (80037b4 <app_init+0x58>)
 800376c:	f7ff fed2 	bl	8003514 <services_register_handlers>

    /* Inicializa serviços (ordem: log/diag, safety, periféricos simples, motion) */
#if LOG_ENABLE
    log_service_init();
 8003770:	f7fe fb5a 	bl	8001e28 <log_service_init>
#endif
    safety_service_init();
 8003774:	f7ff fe34 	bl	80033e0 <safety_service_init>
    led_service_init();
 8003778:	f7fe f9ca 	bl	8001b10 <led_service_init>
    home_service_init();
 800377c:	f7fd fed8 	bl	8001530 <home_service_init>
    probe_service_init();
 8003780:	f7ff fde6 	bl	8003350 <probe_service_init>
    motion_service_init();
 8003784:	f7ff f9a6 	bl	8002ad4 <motion_service_init>

    g_resp_fifo = resp_fifo_create();
 8003788:	f7fd fcf9 	bl	800117e <resp_fifo_create>
 800378c:	4603      	mov	r3, r0
 800378e:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <app_init+0x5c>)
 8003790:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <app_init+0x5c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a07      	ldr	r2, [pc, #28]	@ (80037b4 <app_init+0x58>)
 8003798:	4619      	mov	r1, r3
 800379a:	4808      	ldr	r0, [pc, #32]	@ (80037bc <app_init+0x60>)
 800379c:	f7fd fd92 	bl	80012c4 <router_init>

    /* Primeiro frame: 22×0x00 + 20×filler (evita A5 no início quando não há resposta) */
    tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80037a0:	4807      	ldr	r0, [pc, #28]	@ (80037c0 <app_init+0x64>)
 80037a2:	f7ff fef3 	bl	800358c <tx_fill_left_zero_right_filler>

    restart_spi_dma();
 80037a6:	f7ff ffb1 	bl	800370c <restart_spi_dma>
    g_state = APP_SPI_READY;
 80037aa:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <app_init+0x68>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000cb8 	.word	0x20000cb8
 80037b8:	20000cdc 	.word	0x20000cdc
 80037bc:	20000c70 	.word	0x20000c70
 80037c0:	20000d0c 	.word	0x20000d0c
 80037c4:	20000d38 	.word	0x20000d38

080037c8 <app_poll>:
/**
 * @brief Loop de serviço: processa RX (quando há rodada concluída),
 *        prepara o próximo TX e rearma o DMA.
 */
void app_poll(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
    /* Só processa quando um round DMA foi concluído pelo HAL */
    if (!g_spi_round_done) return;
 80037ce:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <app_poll+0x6c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d028      	beq.n	800382a <app_poll+0x62>
    g_spi_round_done = 0u;
 80037d8:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <app_poll+0x6c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]

    /* 1) Interpretar o RX atual */
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 80037de:	213c      	movs	r1, #60	@ 0x3c
 80037e0:	4815      	ldr	r0, [pc, #84]	@ (8003838 <app_poll+0x70>)
 80037e2:	f7ff fee7 	bl	80035b4 <is_fill42>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d119      	bne.n	8003820 <app_poll+0x58>
        /* 42×0x3C => cliente apenas leu respostas; não alimenta router */
    } else {
        /* Tenta extrair [REQ_HEADER ... REQ_TAIL] e empurra para o router */
        uint16_t off = 0, len = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	80fb      	strh	r3, [r7, #6]
 80037f0:	2300      	movs	r3, #0
 80037f2:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 80037f4:	1d3a      	adds	r2, r7, #4
 80037f6:	1dbb      	adds	r3, r7, #6
 80037f8:	4619      	mov	r1, r3
 80037fa:	480f      	ldr	r0, [pc, #60]	@ (8003838 <app_poll+0x70>)
 80037fc:	f7ff fef9 	bl	80035f2 <find_frame>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	461a      	mov	r2, r3
 800380a:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <app_poll+0x70>)
 800380c:	4413      	add	r3, r2
 800380e:	88ba      	ldrh	r2, [r7, #4]
 8003810:	4619      	mov	r1, r3
 8003812:	480a      	ldr	r0, [pc, #40]	@ (800383c <app_poll+0x74>)
 8003814:	f7fd fe64 	bl	80014e0 <router_feed_bytes>
 8003818:	e002      	b.n	8003820 <app_poll+0x58>
        } else {
            /* Quadro inválido/parcial ou outro padrão -> marca erro leve */
            g_spi_error_flag = 1u;
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <app_poll+0x78>)
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
        }
    }

    /* 2) Preparar TX (resposta à direita ou 22×0x00 + 20×filler) */
    prepare_next_tx();
 8003820:	f7ff ff26 	bl	8003670 <prepare_next_tx>

    /* 3) Reiniciar DMA para o próximo round */
    restart_spi_dma();
 8003824:	f7ff ff72 	bl	800370c <restart_spi_dma>
 8003828:	e000      	b.n	800382c <app_poll+0x64>
    if (!g_spi_round_done) return;
 800382a:	bf00      	nop
}
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000d36 	.word	0x20000d36
 8003838:	20000ce0 	.word	0x20000ce0
 800383c:	20000c70 	.word	0x20000c70
 8003840:	20000d37 	.word	0x20000d37

08003844 <app_spi_isr_txrx_done>:
/**
 * @brief Callback para “transfer complete” do SPI+DMA.
 * Apenas sinaliza o loop principal (app_poll) via g_spi_round_done.
 */
void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a07      	ldr	r2, [pc, #28]	@ (8003874 <app_spi_isr_txrx_done+0x30>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d105      	bne.n	8003868 <app_spi_isr_txrx_done+0x24>
    g_spi_round_done = 1u;
 800385c:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <app_spi_isr_txrx_done+0x34>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e002      	b.n	800386a <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8003868:	bf00      	nop
}
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40013000 	.word	0x40013000
 8003878:	20000d36 	.word	0x20000d36

0800387c <app_resp_push>:
 * @param frame Buffer com a resposta (número de bytes = len).
 * @param len   Tamanho da resposta (até 20 bytes). >20 retorna erro.
 * @return 0 em sucesso; PROTO_ERR_ARG ou PROTO_ERR_RANGE em erro.
 */
int app_resp_push(const uint8_t *frame, uint32_t len)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 8003886:	4b0f      	ldr	r3, [pc, #60]	@ (80038c4 <app_resp_push+0x48>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <app_resp_push+0x1e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <app_resp_push+0x1e>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	e00d      	b.n	80038bc <app_resp_push+0x40>
    }
    if (len > RESP_RIGHT_LEN) {
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b14      	cmp	r3, #20
 80038a4:	d902      	bls.n	80038ac <app_resp_push+0x30>
        return PROTO_ERR_RANGE; /* impede >20 bytes */
 80038a6:	f06f 0303 	mvn.w	r3, #3
 80038aa:	e007      	b.n	80038bc <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <app_resp_push+0x48>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd fc6b 	bl	8001190 <resp_fifo_push>
 80038ba:	4603      	mov	r3, r0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000cdc 	.word	0x20000cdc

080038c8 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08e      	sub	sp, #56	@ 0x38
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	2224      	movs	r2, #36	@ 0x24
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f009 faf3 	bl	800cec4 <memset>
    TIM_MasterConfigTypeDef master = {0};
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 80038ea:	2303      	movs	r3, #3
 80038ec:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038fe:	2300      	movs	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003902:	2301      	movs	r3, #1
 8003904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 8003906:	2300      	movs	r3, #0
 8003908:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f005 fef9 	bl	800970c <HAL_TIM_Encoder_Init>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 8003920:	f000 fa9c 	bl	8003e5c <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 800392c:	f107 0308 	add.w	r3, r7, #8
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f007 fdce 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 800393e:	f000 fa8d 	bl	8003e5c <Error_Handler>
    }
}
 8003942:	bf00      	nop
 8003944:	3738      	adds	r7, #56	@ 0x38
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b08a      	sub	sp, #40	@ 0x28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	609a      	str	r2, [r3, #8]
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 800396a:	2301      	movs	r3, #1
 800396c:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 8003976:	f107 0314 	add.w	r3, r7, #20
 800397a:	4619      	mov	r1, r3
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f001 fdd9 	bl	8005534 <HAL_GPIO_Init>
}
 8003982:	bf00      	nop
 8003984:	3728      	adds	r7, #40	@ 0x28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 80039a0:	2203      	movs	r2, #3
 80039a2:	2113      	movs	r1, #19
 80039a4:	4824      	ldr	r0, [pc, #144]	@ (8003a38 <board_config_apply_motion_gpio+0xac>)
 80039a6:	f7ff ffd0 	bl	800394a <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80039aa:	2203      	movs	r2, #3
 80039ac:	2104      	movs	r1, #4
 80039ae:	4822      	ldr	r0, [pc, #136]	@ (8003a38 <board_config_apply_motion_gpio+0xac>)
 80039b0:	f7ff ffcb 	bl	800394a <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80039b4:	2203      	movs	r2, #3
 80039b6:	210c      	movs	r1, #12
 80039b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039bc:	f7ff ffc5 	bl	800394a <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2130      	movs	r1, #48	@ 0x30
 80039c4:	481d      	ldr	r0, [pc, #116]	@ (8003a3c <board_config_apply_motion_gpio+0xb0>)
 80039c6:	f7ff ffc0 	bl	800394a <configure_output>
    configure_output(GPIOA, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 80039ca:	2200      	movs	r2, #0
 80039cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039d4:	f7ff ffb9 	bl	800394a <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80039d8:	2200      	movs	r2, #0
 80039da:	2117      	movs	r1, #23
 80039dc:	4816      	ldr	r0, [pc, #88]	@ (8003a38 <board_config_apply_motion_gpio+0xac>)
 80039de:	f002 f95f 	bl	8005ca0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 80039e2:	2200      	movs	r2, #0
 80039e4:	210c      	movs	r1, #12
 80039e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ea:	f002 f959 	bl	8005ca0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 80039ee:	2201      	movs	r2, #1
 80039f0:	2130      	movs	r1, #48	@ 0x30
 80039f2:	4812      	ldr	r0, [pc, #72]	@ (8003a3c <board_config_apply_motion_gpio+0xb0>)
 80039f4:	f002 f954 	bl	8005ca0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80039f8:	2201      	movs	r2, #1
 80039fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a02:	f002 f94d 	bl	8005ca0 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a06:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003a0a:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8003a10:	2307      	movs	r3, #7
 8003a12:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4808      	ldr	r0, [pc, #32]	@ (8003a3c <board_config_apply_motion_gpio+0xb0>)
 8003a1a:	f001 fd8b 	bl	8005534 <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 8003a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a22:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4804      	ldr	r0, [pc, #16]	@ (8003a3c <board_config_apply_motion_gpio+0xb0>)
 8003a2a:	f001 fd83 	bl	8005534 <HAL_GPIO_Init>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	48000400 	.word	0x48000400
 8003a3c:	48000800 	.word	0x48000800

08003a40 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim2);
 8003a44:	4805      	ldr	r0, [pc, #20]	@ (8003a5c <board_config_force_encoder_quadrature+0x1c>)
 8003a46:	f7ff ff3f 	bl	80038c8 <configure_encoder_timer>
    configure_encoder_timer(&htim3);
 8003a4a:	4805      	ldr	r0, [pc, #20]	@ (8003a60 <board_config_force_encoder_quadrature+0x20>)
 8003a4c:	f7ff ff3c 	bl	80038c8 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 8003a50:	4804      	ldr	r0, [pc, #16]	@ (8003a64 <board_config_force_encoder_quadrature+0x24>)
 8003a52:	f7ff ff39 	bl	80038c8 <configure_encoder_timer>
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000e34 	.word	0x20000e34
 8003a60:	20000e80 	.word	0x20000e80
 8003a64:	20000ecc 	.word	0x20000ecc

08003a68 <board_config_remap_tim3_encoder_pins>:

void board_config_remap_tim3_encoder_pins(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]

    /* Libera a configuração padrão do CubeMX e migra o encoder para PC6/PC7 */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3 | GPIO_PIN_4);
 8003a7c:	2118      	movs	r1, #24
 8003a7e:	4811      	ldr	r0, [pc, #68]	@ (8003ac4 <board_config_remap_tim3_encoder_pins+0x5c>)
 8003a80:	f001 ffe4 	bl	8005a4c <HAL_GPIO_DeInit>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a84:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <board_config_remap_tim3_encoder_pins+0x60>)
 8003a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a88:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac8 <board_config_remap_tim3_encoder_pins+0x60>)
 8003a8a:	f043 0304 	orr.w	r3, r3, #4
 8003a8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <board_config_remap_tim3_encoder_pins+0x60>)
 8003a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]

    init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003a9c:	23c0      	movs	r3, #192	@ 0xc0
 8003a9e:	607b      	str	r3, [r7, #4]
    init.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
    init.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
    init.Alternate = GPIO_AF2_TIM3;
 8003aac:	2302      	movs	r3, #2
 8003aae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &init);
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4805      	ldr	r0, [pc, #20]	@ (8003acc <board_config_remap_tim3_encoder_pins+0x64>)
 8003ab6:	f001 fd3d 	bl	8005534 <HAL_GPIO_Init>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	48001000 	.word	0x48001000
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	48000800 	.word	0x48000800

08003ad0 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2006      	movs	r0, #6
 8003ada:	f001 f995 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ade:	2006      	movs	r0, #6
 8003ae0:	f001 f9be 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2007      	movs	r0, #7
 8003aea:	f001 f98d 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003aee:	2007      	movs	r0, #7
 8003af0:	f001 f9b6 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003af4:	2200      	movs	r2, #0
 8003af6:	2100      	movs	r1, #0
 8003af8:	2008      	movs	r0, #8
 8003afa:	f001 f985 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003afe:	2008      	movs	r0, #8
 8003b00:	f001 f9ae 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003b04:	2200      	movs	r2, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	2028      	movs	r0, #40	@ 0x28
 8003b0a:	f001 f97d 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b0e:	2028      	movs	r0, #40	@ 0x28
 8003b10:	f001 f9a6 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003b14:	2200      	movs	r2, #0
 8003b16:	2101      	movs	r1, #1
 8003b18:	2036      	movs	r0, #54	@ 0x36
 8003b1a:	f001 f975 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b1e:	2036      	movs	r0, #54	@ 0x36
 8003b20:	f001 f99e 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8003b24:	2200      	movs	r2, #0
 8003b26:	2102      	movs	r1, #2
 8003b28:	200c      	movs	r0, #12
 8003b2a:	f001 f96d 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003b2e:	200c      	movs	r0, #12
 8003b30:	f001 f996 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8003b34:	2200      	movs	r2, #0
 8003b36:	2102      	movs	r1, #2
 8003b38:	200d      	movs	r0, #13
 8003b3a:	f001 f965 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003b3e:	200d      	movs	r0, #13
 8003b40:	f001 f98e 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2103      	movs	r1, #3
 8003b48:	2037      	movs	r0, #55	@ 0x37
 8003b4a:	f001 f95d 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b4e:	2037      	movs	r0, #55	@ 0x37
 8003b50:	f001 f986 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	2104      	movs	r1, #4
 8003b58:	2025      	movs	r0, #37	@ 0x25
 8003b5a:	f001 f955 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b5e:	2025      	movs	r0, #37	@ 0x25
 8003b60:	f001 f97e 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2105      	movs	r1, #5
 8003b68:	2023      	movs	r0, #35	@ 0x23
 8003b6a:	f001 f94d 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003b6e:	2023      	movs	r0, #35	@ 0x23
 8003b70:	f001 f976 	bl	8004e60 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2106      	movs	r1, #6
 8003b78:	2018      	movs	r0, #24
 8003b7a:	f001 f945 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003b7e:	2018      	movs	r0, #24
 8003b80:	f001 f96e 	bl	8004e60 <HAL_NVIC_EnableIRQ>
}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <MX_DMA_Init+0x48>)
 8003b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b92:	4a0f      	ldr	r2, [pc, #60]	@ (8003bd0 <MX_DMA_Init+0x48>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <MX_DMA_Init+0x48>)
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2100      	movs	r1, #0
 8003baa:	200c      	movs	r0, #12
 8003bac:	f001 f92c 	bl	8004e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003bb0:	200c      	movs	r0, #12
 8003bb2:	f001 f955 	bl	8004e60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	200d      	movs	r0, #13
 8003bbc:	f001 f924 	bl	8004e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003bc0:	200d      	movs	r0, #13
 8003bc2:	f001 f94d 	bl	8004e60 <HAL_NVIC_EnableIRQ>

}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	@ 0x30
 8003bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bda:	f107 031c 	add.w	r3, r7, #28
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	605a      	str	r2, [r3, #4]
 8003be4:	609a      	str	r2, [r3, #8]
 8003be6:	60da      	str	r2, [r3, #12]
 8003be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bea:	4b4d      	ldr	r3, [pc, #308]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bee:	4a4c      	ldr	r2, [pc, #304]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003bf0:	f043 0310 	orr.w	r3, r3, #16
 8003bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c02:	4b47      	ldr	r3, [pc, #284]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c06:	4a46      	ldr	r2, [pc, #280]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c0e:	4b44      	ldr	r3, [pc, #272]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c1a:	4b41      	ldr	r3, [pc, #260]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1e:	4a40      	ldr	r2, [pc, #256]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c26:	4b3e      	ldr	r3, [pc, #248]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c32:	4b3b      	ldr	r3, [pc, #236]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c36:	4a3a      	ldr	r2, [pc, #232]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c3e:	4b38      	ldr	r3, [pc, #224]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4a:	4b35      	ldr	r3, [pc, #212]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4e:	4a34      	ldr	r2, [pc, #208]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c56:	4b32      	ldr	r3, [pc, #200]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	4a2e      	ldr	r2, [pc, #184]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c68:	f043 0308 	orr.w	r3, r3, #8
 8003c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d20 <MX_GPIO_Init+0x14c>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8003c7a:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 8003c7e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c80:	2303      	movs	r3, #3
 8003c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c88:	f107 031c 	add.w	r3, r7, #28
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4825      	ldr	r0, [pc, #148]	@ (8003d24 <MX_GPIO_Init+0x150>)
 8003c90:	f001 fc50 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c98:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca2:	f107 031c 	add.w	r3, r7, #28
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	481f      	ldr	r0, [pc, #124]	@ (8003d28 <MX_GPIO_Init+0x154>)
 8003caa:	f001 fc43 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003cba:	f107 031c 	add.w	r3, r7, #28
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	481a      	ldr	r0, [pc, #104]	@ (8003d2c <MX_GPIO_Init+0x158>)
 8003cc2:	f001 fc37 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003cc6:	f641 7308 	movw	r3, #7944	@ 0x1f08
 8003cca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd4:	f107 031c 	add.w	r3, r7, #28
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cde:	f001 fc29 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003ce2:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 8003ce6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	480e      	ldr	r0, [pc, #56]	@ (8003d30 <MX_GPIO_Init+0x15c>)
 8003cf8:	f001 fc1c 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003cfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d00:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d02:	2303      	movs	r3, #3
 8003d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d0a:	f107 031c 	add.w	r3, r7, #28
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4808      	ldr	r0, [pc, #32]	@ (8003d34 <MX_GPIO_Init+0x160>)
 8003d12:	f001 fc0f 	bl	8005534 <HAL_GPIO_Init>

}
 8003d16:	bf00      	nop
 8003d18:	3730      	adds	r7, #48	@ 0x30
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	48001000 	.word	0x48001000
 8003d28:	48000800 	.word	0x48000800
 8003d2c:	48001c00 	.word	0x48001c00
 8003d30:	48000400 	.word	0x48000400
 8003d34:	48000c00 	.word	0x48000c00

08003d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d3c:	f000 feff 	bl	8004b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d40:	f000 f82e 	bl	8003da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d44:	f7ff ff46 	bl	8003bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d48:	f7ff ff1e 	bl	8003b88 <MX_DMA_Init>
  MX_SPI1_Init();
 8003d4c:	f000 f8aa 	bl	8003ea4 <MX_SPI1_Init>
  MX_TIM6_Init();
 8003d50:	f000 fbc2 	bl	80044d8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8003d54:	f000 fac0 	bl	80042d8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003d58:	f000 fb68 	bl	800442c <MX_TIM5_Init>
  MX_TIM7_Init();
 8003d5c:	f000 fbf2 	bl	8004544 <MX_TIM7_Init>
  MX_TIM3_Init();
 8003d60:	f000 fb0e 	bl	8004380 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003d64:	f000 fe34 	bl	80049d0 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8003d68:	f000 fc22 	bl	80045b0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8003d6c:	f7ff fe0e 	bl	800398c <board_config_apply_motion_gpio>
    board_config_remap_tim3_encoder_pins();
 8003d70:	f7ff fe7a 	bl	8003a68 <board_config_remap_tim3_encoder_pins>
    board_config_force_encoder_quadrature();
 8003d74:	f7ff fe64 	bl	8003a40 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 8003d78:	f7ff feaa 	bl	8003ad0 <board_config_apply_interrupt_priorities>
    //board_config_apply_spi_dma_profile();
    app_init();
 8003d7c:	f7ff fcee 	bl	800375c <app_init>
    // Inicia timers do laço de passos (TIM6) e controle/status (TIM7)
    HAL_TIM_Base_Start_IT(&htim6);
 8003d80:	4805      	ldr	r0, [pc, #20]	@ (8003d98 <main+0x60>)
 8003d82:	f005 f817 	bl	8008db4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8003d86:	4805      	ldr	r0, [pc, #20]	@ (8003d9c <main+0x64>)
 8003d88:	f005 f814 	bl	8008db4 <HAL_TIM_Base_Start_IT>
    motion_demo_set_continuous(1);
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f7ff fa3b 	bl	8003208 <motion_demo_set_continuous>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8003d92:	f7ff fd19 	bl	80037c8 <app_poll>
 8003d96:	e7fc      	b.n	8003d92 <main+0x5a>
 8003d98:	20000f18 	.word	0x20000f18
 8003d9c:	20000f64 	.word	0x20000f64

08003da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b096      	sub	sp, #88	@ 0x58
 8003da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003da6:	f107 0314 	add.w	r3, r7, #20
 8003daa:	2244      	movs	r2, #68	@ 0x44
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f009 f888 	bl	800cec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003db4:	463b      	mov	r3, r7
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003dc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003dc6:	f001 ffc9 	bl	8005d5c <HAL_PWREx_ControlVoltageScaling>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003dd0:	f000 f844 	bl	8003e5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003de0:	2360      	movs	r3, #96	@ 0x60
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003de4:	2302      	movs	r3, #2
 8003de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003de8:	2301      	movs	r3, #1
 8003dea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003dec:	2301      	movs	r3, #1
 8003dee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003df0:	2328      	movs	r3, #40	@ 0x28
 8003df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003df4:	2307      	movs	r3, #7
 8003df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 f80b 	bl	8005e20 <HAL_RCC_OscConfig>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003e10:	f000 f824 	bl	8003e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e14:	230f      	movs	r3, #15
 8003e16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f002 fcf8 	bl	8006824 <HAL_RCC_ClockConfig>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003e3a:	f000 f80f 	bl	8003e5c <Error_Handler>
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3758      	adds	r7, #88	@ 0x58
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fcf8 	bl	8003844 <app_spi_isr_txrx_done>
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8003e60:	f04f 32ff 	mov.w	r2, #4294967295
 8003e64:	2164      	movs	r1, #100	@ 0x64
 8003e66:	2000      	movs	r0, #0
 8003e68:	f7fd ffec 	bl	8001e44 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8003e6c:	4a04      	ldr	r2, [pc, #16]	@ (8003e80 <Error_Handler+0x24>)
 8003e6e:	4905      	ldr	r1, [pc, #20]	@ (8003e84 <Error_Handler+0x28>)
 8003e70:	4805      	ldr	r0, [pc, #20]	@ (8003e88 <Error_Handler+0x2c>)
 8003e72:	f7fd fffb 	bl	8001e6c <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8003e76:	b672      	cpsid	i
}
 8003e78:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <Error_Handler+0x1e>
 8003e7e:	bf00      	nop
 8003e80:	0800e080 	.word	0x0800e080
 8003e84:	0800e090 	.word	0x0800e090
 8003e88:	0800e098 	.word	0x0800e098

08003e8c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ea8:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003eaa:	4a19      	ldr	r2, [pc, #100]	@ (8003f10 <MX_SPI1_Init+0x6c>)
 8003eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8003eae:	4b17      	ldr	r3, [pc, #92]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eb4:	4b15      	ldr	r3, [pc, #84]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eba:	4b14      	ldr	r3, [pc, #80]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003ebc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003ec2:	4b12      	ldr	r3, [pc, #72]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ec8:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003ece:	4b0f      	ldr	r3, [pc, #60]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eda:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003ee6:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003ee8:	2207      	movs	r2, #7
 8003eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003eec:	4b07      	ldr	r3, [pc, #28]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ef8:	4804      	ldr	r0, [pc, #16]	@ (8003f0c <MX_SPI1_Init+0x68>)
 8003efa:	f003 fedf 	bl	8007cbc <HAL_SPI_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003f04:	f7ff ffaa 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f08:	bf00      	nop
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000d3c 	.word	0x20000d3c
 8003f10:	40013000 	.word	0x40013000

08003f14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	@ 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 0314 	add.w	r3, r7, #20
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a45      	ldr	r2, [pc, #276]	@ (8004048 <HAL_SPI_MspInit+0x134>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	f040 8083 	bne.w	800403e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f38:	4b44      	ldr	r3, [pc, #272]	@ (800404c <HAL_SPI_MspInit+0x138>)
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3c:	4a43      	ldr	r2, [pc, #268]	@ (800404c <HAL_SPI_MspInit+0x138>)
 8003f3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f42:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f44:	4b41      	ldr	r3, [pc, #260]	@ (800404c <HAL_SPI_MspInit+0x138>)
 8003f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f50:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <HAL_SPI_MspInit+0x138>)
 8003f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f54:	4a3d      	ldr	r2, [pc, #244]	@ (800404c <HAL_SPI_MspInit+0x138>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_SPI_MspInit+0x138>)
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f68:	23f0      	movs	r3, #240	@ 0xf0
 8003f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f78:	2305      	movs	r3, #5
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	4619      	mov	r1, r3
 8003f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f86:	f001 fad5 	bl	8005534 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8003f8a:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003f8c:	4a31      	ldr	r2, [pc, #196]	@ (8004054 <HAL_SPI_MspInit+0x140>)
 8003f8e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8003f90:	4b2f      	ldr	r3, [pc, #188]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f96:	4b2e      	ldr	r3, [pc, #184]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003fa4:	2280      	movs	r2, #128	@ 0x80
 8003fa6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fa8:	4b29      	ldr	r3, [pc, #164]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fae:	4b28      	ldr	r3, [pc, #160]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8003fb4:	4b26      	ldr	r3, [pc, #152]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fba:	4b25      	ldr	r3, [pc, #148]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003fc0:	4823      	ldr	r0, [pc, #140]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003fc2:	f000 ff71 	bl	8004ea8 <HAL_DMA_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8003fcc:	f7ff ff46 	bl	8003e5c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003fd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_SPI_MspInit+0x13c>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8003fde:	4a1f      	ldr	r2, [pc, #124]	@ (800405c <HAL_SPI_MspInit+0x148>)
 8003fe0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8003fea:	2210      	movs	r2, #16
 8003fec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fee:	4b1a      	ldr	r3, [pc, #104]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ff4:	4b18      	ldr	r3, [pc, #96]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8003ff6:	2280      	movs	r2, #128	@ 0x80
 8003ff8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ffa:	4b17      	ldr	r3, [pc, #92]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004000:	4b15      	ldr	r3, [pc, #84]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8004002:	2200      	movs	r2, #0
 8004004:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8004006:	4b14      	ldr	r3, [pc, #80]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8004008:	2220      	movs	r2, #32
 800400a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800400c:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 800400e:	2200      	movs	r2, #0
 8004010:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004012:	4811      	ldr	r0, [pc, #68]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8004014:	f000 ff48 	bl	8004ea8 <HAL_DMA_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 800401e:	f7ff ff1d 	bl	8003e5c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a0c      	ldr	r2, [pc, #48]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 8004026:	655a      	str	r2, [r3, #84]	@ 0x54
 8004028:	4a0b      	ldr	r2, [pc, #44]	@ (8004058 <HAL_SPI_MspInit+0x144>)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	2023      	movs	r0, #35	@ 0x23
 8004034:	f000 fee8 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004038:	2023      	movs	r0, #35	@ 0x23
 800403a:	f000 ff11 	bl	8004e60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800403e:	bf00      	nop
 8004040:	3728      	adds	r7, #40	@ 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40013000 	.word	0x40013000
 800404c:	40021000 	.word	0x40021000
 8004050:	20000da0 	.word	0x20000da0
 8004054:	4002001c 	.word	0x4002001c
 8004058:	20000de8 	.word	0x20000de8
 800405c:	40020030 	.word	0x40020030

08004060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004066:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <HAL_MspInit+0x44>)
 8004068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406a:	4a0e      	ldr	r2, [pc, #56]	@ (80040a4 <HAL_MspInit+0x44>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6613      	str	r3, [r2, #96]	@ 0x60
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_MspInit+0x44>)
 8004074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <HAL_MspInit+0x44>)
 8004080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004082:	4a08      	ldr	r2, [pc, #32]	@ (80040a4 <HAL_MspInit+0x44>)
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004088:	6593      	str	r3, [r2, #88]	@ 0x58
 800408a:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <HAL_MspInit+0x44>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000

080040a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <NMI_Handler+0x4>

080040b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <HardFault_Handler+0x4>

080040b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <MemManage_Handler+0x4>

080040c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <BusFault_Handler+0x4>

080040c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040cc:	bf00      	nop
 80040ce:	e7fd      	b.n	80040cc <UsageFault_Handler+0x4>

080040d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040fe:	f000 fd73 	bl	8004be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800410c:	4802      	ldr	r0, [pc, #8]	@ (8004118 <DMA1_Channel2_IRQHandler+0x10>)
 800410e:	f001 f932 	bl	8005376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000da0 	.word	0x20000da0

0800411c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004120:	4802      	ldr	r0, [pc, #8]	@ (800412c <DMA1_Channel3_IRQHandler+0x10>)
 8004122:	f001 f928 	bl	8005376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000de8 	.word	0x20000de8

08004130 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004134:	4802      	ldr	r0, [pc, #8]	@ (8004140 <SPI1_IRQHandler+0x10>)
 8004136:	f004 f953 	bl	80083e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000d3c 	.word	0x20000d3c

08004144 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004148:	4802      	ldr	r0, [pc, #8]	@ (8004154 <TIM6_DAC_IRQHandler+0x10>)
 800414a:	f005 fd5f 	bl	8009c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000f18 	.word	0x20000f18

08004158 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800415c:	4802      	ldr	r0, [pc, #8]	@ (8004168 <TIM7_IRQHandler+0x10>)
 800415e:	f005 fd55 	bl	8009c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000f64 	.word	0x20000f64

0800416c <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004170:	2001      	movs	r0, #1
 8004172:	f001 fdc1 	bl	8005cf8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}

0800417a <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800417e:	2002      	movs	r0, #2
 8004180:	f001 fdba 	bl	8005cf8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}

08004188 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800418c:	2004      	movs	r0, #4
 800418e:	f001 fdb3 	bl	8005cf8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}

08004196 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800419a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800419e:	f001 fdab 	bl	8005cf8 <HAL_GPIO_EXTI_IRQHandler>
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b086      	sub	sp, #24
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e00a      	b.n	80041ce <_read+0x28>
		*ptr++ = __io_getchar();
 80041b8:	f3af 8000 	nop.w
 80041bc:	4601      	mov	r1, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	60ba      	str	r2, [r7, #8]
 80041c4:	b2ca      	uxtb	r2, r1
 80041c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3301      	adds	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	dbf0      	blt.n	80041b8 <_read+0x12>
	}

	return len;
 80041d6:	687b      	ldr	r3, [r7, #4]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <_fstat>:

int _fstat(int file, struct stat *st) {
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004208:	605a      	str	r2, [r3, #4]
	return 0;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <_isatty>:

int _isatty(int file) {
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004220:	2301      	movs	r3, #1
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004250:	4a14      	ldr	r2, [pc, #80]	@ (80042a4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <_sbrk+0x64>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <_sbrk+0x64>)
 8004266:	4a12      	ldr	r2, [pc, #72]	@ (80042b0 <_sbrk+0x68>)
 8004268:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800426a:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <_sbrk+0x64>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d207      	bcs.n	8004288 <_sbrk+0x40>
		errno = ENOMEM;
 8004278:	f008 fe82 	bl	800cf80 <__errno>
 800427c:	4603      	mov	r3, r0
 800427e:	220c      	movs	r2, #12
 8004280:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	e009      	b.n	800429c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004288:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <_sbrk+0x64>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800428e:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <_sbrk+0x64>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	4a05      	ldr	r2, [pc, #20]	@ (80042ac <_sbrk+0x64>)
 8004298:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20018000 	.word	0x20018000
 80042a8:	00000400 	.word	0x00000400
 80042ac:	20000e30 	.word	0x20000e30
 80042b0:	200011d8 	.word	0x200011d8

080042b4 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80042b8:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <SystemInit+0x20>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042be:	4a05      	ldr	r2, [pc, #20]	@ (80042d4 <SystemInit+0x20>)
 80042c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	@ 0x30
 80042dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80042de:	f107 030c 	add.w	r3, r7, #12
 80042e2:	2224      	movs	r2, #36	@ 0x24
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f008 fdec 	bl	800cec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ec:	463b      	mov	r3, r7
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042f6:	4b21      	ldr	r3, [pc, #132]	@ (800437c <MX_TIM2_Init+0xa4>)
 80042f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80042fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80042fe:	4b1f      	ldr	r3, [pc, #124]	@ (800437c <MX_TIM2_Init+0xa4>)
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004304:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <MX_TIM2_Init+0xa4>)
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800430a:	4b1c      	ldr	r3, [pc, #112]	@ (800437c <MX_TIM2_Init+0xa4>)
 800430c:	f04f 32ff 	mov.w	r2, #4294967295
 8004310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004312:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <MX_TIM2_Init+0xa4>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004318:	4b18      	ldr	r3, [pc, #96]	@ (800437c <MX_TIM2_Init+0xa4>)
 800431a:	2200      	movs	r2, #0
 800431c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800431e:	2301      	movs	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004322:	2300      	movs	r3, #0
 8004324:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004326:	2301      	movs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004336:	2301      	movs	r3, #1
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800433a:	2300      	movs	r3, #0
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004342:	f107 030c 	add.w	r3, r7, #12
 8004346:	4619      	mov	r1, r3
 8004348:	480c      	ldr	r0, [pc, #48]	@ (800437c <MX_TIM2_Init+0xa4>)
 800434a:	f005 f9df 	bl	800970c <HAL_TIM_Encoder_Init>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004354:	f7ff fd82 	bl	8003e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004358:	2300      	movs	r3, #0
 800435a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004360:	463b      	mov	r3, r7
 8004362:	4619      	mov	r1, r3
 8004364:	4805      	ldr	r0, [pc, #20]	@ (800437c <MX_TIM2_Init+0xa4>)
 8004366:	f007 f8b5 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004370:	f7ff fd74 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004374:	bf00      	nop
 8004376:	3730      	adds	r7, #48	@ 0x30
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000e34 	.word	0x20000e34

08004380 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08c      	sub	sp, #48	@ 0x30
 8004384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004386:	f107 030c 	add.w	r3, r7, #12
 800438a:	2224      	movs	r2, #36	@ 0x24
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f008 fd98 	bl	800cec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004394:	463b      	mov	r3, r7
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800439e:	4b21      	ldr	r3, [pc, #132]	@ (8004424 <MX_TIM3_Init+0xa4>)
 80043a0:	4a21      	ldr	r2, [pc, #132]	@ (8004428 <MX_TIM3_Init+0xa8>)
 80043a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80043a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <MX_TIM3_Init+0xa4>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <MX_TIM3_Init+0xa4>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80043b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <MX_TIM3_Init+0xa4>)
 80043b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <MX_TIM3_Init+0xa4>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043be:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <MX_TIM3_Init+0xa4>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80043c4:	2301      	movs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043cc:	2301      	movs	r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043d8:	2300      	movs	r3, #0
 80043da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043dc:	2301      	movs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043e0:	2300      	movs	r3, #0
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80043e8:	f107 030c 	add.w	r3, r7, #12
 80043ec:	4619      	mov	r1, r3
 80043ee:	480d      	ldr	r0, [pc, #52]	@ (8004424 <MX_TIM3_Init+0xa4>)
 80043f0:	f005 f98c 	bl	800970c <HAL_TIM_Encoder_Init>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80043fa:	f7ff fd2f 	bl	8003e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004406:	463b      	mov	r3, r7
 8004408:	4619      	mov	r1, r3
 800440a:	4806      	ldr	r0, [pc, #24]	@ (8004424 <MX_TIM3_Init+0xa4>)
 800440c:	f007 f862 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004416:	f7ff fd21 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800441a:	bf00      	nop
 800441c:	3730      	adds	r7, #48	@ 0x30
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000e80 	.word	0x20000e80
 8004428:	40000400 	.word	0x40000400

0800442c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	@ 0x30
 8004430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004432:	f107 030c 	add.w	r3, r7, #12
 8004436:	2224      	movs	r2, #36	@ 0x24
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f008 fd42 	bl	800cec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004440:	463b      	mov	r3, r7
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800444a:	4b21      	ldr	r3, [pc, #132]	@ (80044d0 <MX_TIM5_Init+0xa4>)
 800444c:	4a21      	ldr	r2, [pc, #132]	@ (80044d4 <MX_TIM5_Init+0xa8>)
 800444e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004450:	4b1f      	ldr	r3, [pc, #124]	@ (80044d0 <MX_TIM5_Init+0xa4>)
 8004452:	2200      	movs	r2, #0
 8004454:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004456:	4b1e      	ldr	r3, [pc, #120]	@ (80044d0 <MX_TIM5_Init+0xa4>)
 8004458:	2200      	movs	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800445c:	4b1c      	ldr	r3, [pc, #112]	@ (80044d0 <MX_TIM5_Init+0xa4>)
 800445e:	f04f 32ff 	mov.w	r2, #4294967295
 8004462:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004464:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <MX_TIM5_Init+0xa4>)
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800446a:	4b19      	ldr	r3, [pc, #100]	@ (80044d0 <MX_TIM5_Init+0xa4>)
 800446c:	2200      	movs	r2, #0
 800446e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004470:	2301      	movs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004478:	2301      	movs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004488:	2301      	movs	r3, #1
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800448c:	2300      	movs	r3, #0
 800448e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	4619      	mov	r1, r3
 800449a:	480d      	ldr	r0, [pc, #52]	@ (80044d0 <MX_TIM5_Init+0xa4>)
 800449c:	f005 f936 	bl	800970c <HAL_TIM_Encoder_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80044a6:	f7ff fcd9 	bl	8003e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80044b2:	463b      	mov	r3, r7
 80044b4:	4619      	mov	r1, r3
 80044b6:	4806      	ldr	r0, [pc, #24]	@ (80044d0 <MX_TIM5_Init+0xa4>)
 80044b8:	f007 f80c 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80044c2:	f7ff fccb 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80044c6:	bf00      	nop
 80044c8:	3730      	adds	r7, #48	@ 0x30
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000ecc 	.word	0x20000ecc
 80044d4:	40000c00 	.word	0x40000c00

080044d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80044e8:	4b14      	ldr	r3, [pc, #80]	@ (800453c <MX_TIM6_Init+0x64>)
 80044ea:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <MX_TIM6_Init+0x68>)
 80044ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80044ee:	4b13      	ldr	r3, [pc, #76]	@ (800453c <MX_TIM6_Init+0x64>)
 80044f0:	224f      	movs	r2, #79	@ 0x4f
 80044f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <MX_TIM6_Init+0x64>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 80044fa:	4b10      	ldr	r3, [pc, #64]	@ (800453c <MX_TIM6_Init+0x64>)
 80044fc:	2213      	movs	r2, #19
 80044fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004500:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <MX_TIM6_Init+0x64>)
 8004502:	2280      	movs	r2, #128	@ 0x80
 8004504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004506:	480d      	ldr	r0, [pc, #52]	@ (800453c <MX_TIM6_Init+0x64>)
 8004508:	f004 fb4a 	bl	8008ba0 <HAL_TIM_Base_Init>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004512:	f7ff fca3 	bl	8003e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004516:	2320      	movs	r3, #32
 8004518:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4806      	ldr	r0, [pc, #24]	@ (800453c <MX_TIM6_Init+0x64>)
 8004524:	f006 ffd6 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800452e:	f7ff fc95 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000f18 	.word	0x20000f18
 8004540:	40001000 	.word	0x40001000

08004544 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004554:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <MX_TIM7_Init+0x64>)
 8004556:	4a15      	ldr	r2, [pc, #84]	@ (80045ac <MX_TIM7_Init+0x68>)
 8004558:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800455a:	4b13      	ldr	r3, [pc, #76]	@ (80045a8 <MX_TIM7_Init+0x64>)
 800455c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8004560:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004562:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <MX_TIM7_Init+0x64>)
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004568:	4b0f      	ldr	r3, [pc, #60]	@ (80045a8 <MX_TIM7_Init+0x64>)
 800456a:	2209      	movs	r2, #9
 800456c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800456e:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <MX_TIM7_Init+0x64>)
 8004570:	2280      	movs	r2, #128	@ 0x80
 8004572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004574:	480c      	ldr	r0, [pc, #48]	@ (80045a8 <MX_TIM7_Init+0x64>)
 8004576:	f004 fb13 	bl	8008ba0 <HAL_TIM_Base_Init>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004580:	f7ff fc6c 	bl	8003e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4805      	ldr	r0, [pc, #20]	@ (80045a8 <MX_TIM7_Init+0x64>)
 8004592:	f006 ff9f 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800459c:	f7ff fc5e 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000f64 	.word	0x20000f64
 80045ac:	40001400 	.word	0x40001400

080045b0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b09a      	sub	sp, #104	@ 0x68
 80045b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	605a      	str	r2, [r3, #4]
 80045c0:	609a      	str	r2, [r3, #8]
 80045c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
 80045e0:	615a      	str	r2, [r3, #20]
 80045e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	222c      	movs	r2, #44	@ 0x2c
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f008 fc6a 	bl	800cec4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80045f0:	4b3e      	ldr	r3, [pc, #248]	@ (80046ec <MX_TIM15_Init+0x13c>)
 80045f2:	4a3f      	ldr	r2, [pc, #252]	@ (80046f0 <MX_TIM15_Init+0x140>)
 80045f4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 80045f6:	4b3d      	ldr	r3, [pc, #244]	@ (80046ec <MX_TIM15_Init+0x13c>)
 80045f8:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80045fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045fe:	4b3b      	ldr	r3, [pc, #236]	@ (80046ec <MX_TIM15_Init+0x13c>)
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8004604:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <MX_TIM15_Init+0x13c>)
 8004606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800460a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800460c:	4b37      	ldr	r3, [pc, #220]	@ (80046ec <MX_TIM15_Init+0x13c>)
 800460e:	2200      	movs	r2, #0
 8004610:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004612:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <MX_TIM15_Init+0x13c>)
 8004614:	2200      	movs	r2, #0
 8004616:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004618:	4b34      	ldr	r3, [pc, #208]	@ (80046ec <MX_TIM15_Init+0x13c>)
 800461a:	2200      	movs	r2, #0
 800461c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800461e:	4833      	ldr	r0, [pc, #204]	@ (80046ec <MX_TIM15_Init+0x13c>)
 8004620:	f004 fabe 	bl	8008ba0 <HAL_TIM_Base_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800462a:	f7ff fc17 	bl	8003e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800462e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004632:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004634:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004638:	4619      	mov	r1, r3
 800463a:	482c      	ldr	r0, [pc, #176]	@ (80046ec <MX_TIM15_Init+0x13c>)
 800463c:	f005 fec0 	bl	800a3c0 <HAL_TIM_ConfigClockSource>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8004646:	f7ff fc09 	bl	8003e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800464a:	4828      	ldr	r0, [pc, #160]	@ (80046ec <MX_TIM15_Init+0x13c>)
 800464c:	f004 fc66 	bl	8008f1c <HAL_TIM_PWM_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8004656:	f7ff fc01 	bl	8003e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800465e:	2300      	movs	r3, #0
 8004660:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004662:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004666:	4619      	mov	r1, r3
 8004668:	4820      	ldr	r0, [pc, #128]	@ (80046ec <MX_TIM15_Init+0x13c>)
 800466a:	f006 ff33 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8004674:	f7ff fbf2 	bl	8003e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004678:	2360      	movs	r3, #96	@ 0x60
 800467a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004680:	2300      	movs	r3, #0
 8004682:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004684:	2300      	movs	r3, #0
 8004686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004688:	2300      	movs	r3, #0
 800468a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800468c:	2300      	movs	r3, #0
 800468e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004690:	2300      	movs	r3, #0
 8004692:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004694:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004698:	2200      	movs	r2, #0
 800469a:	4619      	mov	r1, r3
 800469c:	4813      	ldr	r0, [pc, #76]	@ (80046ec <MX_TIM15_Init+0x13c>)
 800469e:	f005 fbbd 	bl	8009e1c <HAL_TIM_PWM_ConfigChannel>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80046a8:	f7ff fbd8 	bl	8003e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4807      	ldr	r0, [pc, #28]	@ (80046ec <MX_TIM15_Init+0x13c>)
 80046d0:	f007 f856 	bl	800b780 <HAL_TIMEx_ConfigBreakDeadTime>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80046da:	f7ff fbbf 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80046de:	4803      	ldr	r0, [pc, #12]	@ (80046ec <MX_TIM15_Init+0x13c>)
 80046e0:	f000 f920 	bl	8004924 <HAL_TIM_MspPostInit>

}
 80046e4:	bf00      	nop
 80046e6:	3768      	adds	r7, #104	@ 0x68
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000fb0 	.word	0x20000fb0
 80046f0:	40014000 	.word	0x40014000

080046f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	@ 0x38
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d146      	bne.n	80047a4 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004716:	4b53      	ldr	r3, [pc, #332]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471a:	4a52      	ldr	r2, [pc, #328]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6593      	str	r3, [r2, #88]	@ 0x58
 8004722:	4b50      	ldr	r3, [pc, #320]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	623b      	str	r3, [r7, #32]
 800472c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800472e:	4b4d      	ldr	r3, [pc, #308]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004732:	4a4c      	ldr	r2, [pc, #304]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800473a:	4b4a      	ldr	r3, [pc, #296]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 800473c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004746:	4b47      	ldr	r3, [pc, #284]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474a:	4a46      	ldr	r2, [pc, #280]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 800474c:	f043 0302 	orr.w	r3, r3, #2
 8004750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004752:	4b44      	ldr	r3, [pc, #272]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800475e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004764:	2302      	movs	r3, #2
 8004766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476c:	2300      	movs	r3, #0
 800476e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004770:	2301      	movs	r3, #1
 8004772:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004778:	4619      	mov	r1, r3
 800477a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800477e:	f000 fed9 	bl	8005534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004782:	2308      	movs	r3, #8
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004786:	2302      	movs	r3, #2
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478e:	2300      	movs	r3, #0
 8004790:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004792:	2301      	movs	r3, #1
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800479a:	4619      	mov	r1, r3
 800479c:	4832      	ldr	r0, [pc, #200]	@ (8004868 <HAL_TIM_Encoder_MspInit+0x174>)
 800479e:	f000 fec9 	bl	8005534 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80047a2:	e05b      	b.n	800485c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a30      	ldr	r2, [pc, #192]	@ (800486c <HAL_TIM_Encoder_MspInit+0x178>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d128      	bne.n	8004800 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047c6:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	4a26      	ldr	r2, [pc, #152]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 80047cc:	f043 0310 	orr.w	r3, r3, #16
 80047d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047d2:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 80047d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80047de:	2318      	movs	r3, #24
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e2:	2302      	movs	r3, #2
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ea:	2300      	movs	r3, #0
 80047ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047ee:	2302      	movs	r3, #2
 80047f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047f6:	4619      	mov	r1, r3
 80047f8:	481d      	ldr	r0, [pc, #116]	@ (8004870 <HAL_TIM_Encoder_MspInit+0x17c>)
 80047fa:	f000 fe9b 	bl	8005534 <HAL_GPIO_Init>
}
 80047fe:	e02d      	b.n	800485c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1b      	ldr	r2, [pc, #108]	@ (8004874 <HAL_TIM_Encoder_MspInit+0x180>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d128      	bne.n	800485c <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800480a:	4b16      	ldr	r3, [pc, #88]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480e:	4a15      	ldr	r2, [pc, #84]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004810:	f043 0308 	orr.w	r3, r3, #8
 8004814:	6593      	str	r3, [r2, #88]	@ 0x58
 8004816:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004822:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004826:	4a0f      	ldr	r2, [pc, #60]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <HAL_TIM_Encoder_MspInit+0x170>)
 8004830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800483a:	2303      	movs	r3, #3
 800483c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483e:	2302      	movs	r3, #2
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	2300      	movs	r3, #0
 8004844:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004846:	2300      	movs	r3, #0
 8004848:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800484a:	2302      	movs	r3, #2
 800484c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004858:	f000 fe6c 	bl	8005534 <HAL_GPIO_Init>
}
 800485c:	bf00      	nop
 800485e:	3738      	adds	r7, #56	@ 0x38
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	48000400 	.word	0x48000400
 800486c:	40000400 	.word	0x40000400
 8004870:	48001000 	.word	0x48001000
 8004874:	40000c00 	.word	0x40000c00

08004878 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a23      	ldr	r2, [pc, #140]	@ (8004914 <HAL_TIM_Base_MspInit+0x9c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d114      	bne.n	80048b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800488a:	4b23      	ldr	r3, [pc, #140]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	4a22      	ldr	r2, [pc, #136]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 8004890:	f043 0310 	orr.w	r3, r3, #16
 8004894:	6593      	str	r3, [r2, #88]	@ 0x58
 8004896:	4b20      	ldr	r3, [pc, #128]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2100      	movs	r1, #0
 80048a6:	2036      	movs	r0, #54	@ 0x36
 80048a8:	f000 faae 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048ac:	2036      	movs	r0, #54	@ 0x36
 80048ae:	f000 fad7 	bl	8004e60 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80048b2:	e02a      	b.n	800490a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_TIM_Base_MspInit+0xa4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d114      	bne.n	80048e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80048be:	4b16      	ldr	r3, [pc, #88]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 80048c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c2:	4a15      	ldr	r2, [pc, #84]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 80048c4:	f043 0320 	orr.w	r3, r3, #32
 80048c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ca:	4b13      	ldr	r3, [pc, #76]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	2100      	movs	r1, #0
 80048da:	2037      	movs	r0, #55	@ 0x37
 80048dc:	f000 fa94 	bl	8004e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80048e0:	2037      	movs	r0, #55	@ 0x37
 80048e2:	f000 fabd 	bl	8004e60 <HAL_NVIC_EnableIRQ>
}
 80048e6:	e010      	b.n	800490a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004920 <HAL_TIM_Base_MspInit+0xa8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10b      	bne.n	800490a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80048f2:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 80048f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f6:	4a08      	ldr	r2, [pc, #32]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_TIM_Base_MspInit+0xa0>)
 8004900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	bf00      	nop
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40001000 	.word	0x40001000
 8004918:	40021000 	.word	0x40021000
 800491c:	40001400 	.word	0x40001400
 8004920:	40014000 	.word	0x40014000

08004924 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	@ 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a20      	ldr	r2, [pc, #128]	@ (80049c4 <HAL_TIM_MspPostInit+0xa0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d139      	bne.n	80049ba <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004946:	4b20      	ldr	r3, [pc, #128]	@ (80049c8 <HAL_TIM_MspPostInit+0xa4>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	4a1f      	ldr	r2, [pc, #124]	@ (80049c8 <HAL_TIM_MspPostInit+0xa4>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004952:	4b1d      	ldr	r3, [pc, #116]	@ (80049c8 <HAL_TIM_MspPostInit+0xa4>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800495e:	4b1a      	ldr	r3, [pc, #104]	@ (80049c8 <HAL_TIM_MspPostInit+0xa4>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004962:	4a19      	ldr	r2, [pc, #100]	@ (80049c8 <HAL_TIM_MspPostInit+0xa4>)
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800496a:	4b17      	ldr	r3, [pc, #92]	@ (80049c8 <HAL_TIM_MspPostInit+0xa4>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004976:	2304      	movs	r3, #4
 8004978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497a:	2302      	movs	r3, #2
 800497c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8004986:	230e      	movs	r3, #14
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498a:	f107 0314 	add.w	r3, r7, #20
 800498e:	4619      	mov	r1, r3
 8004990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004994:	f000 fdce 	bl	8005534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004998:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800499c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499e:	2302      	movs	r3, #2
 80049a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a6:	2300      	movs	r3, #0
 80049a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80049aa:	230e      	movs	r3, #14
 80049ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ae:	f107 0314 	add.w	r3, r7, #20
 80049b2:	4619      	mov	r1, r3
 80049b4:	4805      	ldr	r0, [pc, #20]	@ (80049cc <HAL_TIM_MspPostInit+0xa8>)
 80049b6:	f000 fdbd 	bl	8005534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80049ba:	bf00      	nop
 80049bc:	3728      	adds	r7, #40	@ 0x28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40021000 	.word	0x40021000
 80049cc:	48000400 	.word	0x48000400

080049d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049d4:	4b14      	ldr	r3, [pc, #80]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 80049d6:	4a15      	ldr	r2, [pc, #84]	@ (8004a2c <MX_USART1_UART_Init+0x5c>)
 80049d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80049da:	4b13      	ldr	r3, [pc, #76]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 80049dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80049e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049e2:	4b11      	ldr	r3, [pc, #68]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 80049f6:	220c      	movs	r2, #12
 80049f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a06:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a12:	4805      	ldr	r0, [pc, #20]	@ (8004a28 <MX_USART1_UART_Init+0x58>)
 8004a14:	f007 f80a 	bl	800ba2c <HAL_UART_Init>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004a1e:	f7ff fa1d 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000ffc 	.word	0x20000ffc
 8004a2c:	40013800 	.word	0x40013800

08004a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b0ac      	sub	sp, #176	@ 0xb0
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a48:	f107 0314 	add.w	r3, r7, #20
 8004a4c:	2288      	movs	r2, #136	@ 0x88
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f008 fa37 	bl	800cec4 <memset>
  if(uartHandle->Instance==USART1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ae0 <HAL_UART_MspInit+0xb0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d13a      	bne.n	8004ad6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004a60:	2301      	movs	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004a64:	2300      	movs	r3, #0
 8004a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a68:	f107 0314 	add.w	r3, r7, #20
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f002 f99d 	bl	8006dac <HAL_RCCEx_PeriphCLKConfig>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004a78:	f7ff f9f0 	bl	8003e5c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ae4 <HAL_UART_MspInit+0xb4>)
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a80:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <HAL_UART_MspInit+0xb4>)
 8004a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a86:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a88:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <HAL_UART_MspInit+0xb4>)
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a94:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <HAL_UART_MspInit+0xb4>)
 8004a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a98:	4a12      	ldr	r2, [pc, #72]	@ (8004ae4 <HAL_UART_MspInit+0xb4>)
 8004a9a:	f043 0302 	orr.w	r3, r3, #2
 8004a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aa0:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <HAL_UART_MspInit+0xb4>)
 8004aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004aac:	23c0      	movs	r3, #192	@ 0xc0
 8004aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ac4:	2307      	movs	r3, #7
 8004ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4805      	ldr	r0, [pc, #20]	@ (8004ae8 <HAL_UART_MspInit+0xb8>)
 8004ad2:	f000 fd2f 	bl	8005534 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	37b0      	adds	r7, #176	@ 0xb0
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	48000400 	.word	0x48000400

08004aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004af0:	f7ff fbe0 	bl	80042b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004af4:	480c      	ldr	r0, [pc, #48]	@ (8004b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8004af6:	490d      	ldr	r1, [pc, #52]	@ (8004b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004af8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b30 <LoopForever+0xe>)
  movs r3, #0
 8004afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004afc:	e002      	b.n	8004b04 <LoopCopyDataInit>

08004afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b02:	3304      	adds	r3, #4

08004b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b08:	d3f9      	bcc.n	8004afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b38 <LoopForever+0x16>)
  movs r3, #0
 8004b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b10:	e001      	b.n	8004b16 <LoopFillZerobss>

08004b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b14:	3204      	adds	r2, #4

08004b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b18:	d3fb      	bcc.n	8004b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b1a:	f008 fa37 	bl	800cf8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b1e:	f7ff f90b 	bl	8003d38 <main>

08004b22 <LoopForever>:

LoopForever:
    b LoopForever
 8004b22:	e7fe      	b.n	8004b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004b24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b2c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004b30:	0800e3d0 	.word	0x0800e3d0
  ldr r2, =_sbss
 8004b34:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004b38:	200011d4 	.word	0x200011d4

08004b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b3c:	e7fe      	b.n	8004b3c <ADC1_2_IRQHandler>

08004b3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b48:	2003      	movs	r0, #3
 8004b4a:	f000 f93d 	bl	8004dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b4e:	200f      	movs	r0, #15
 8004b50:	f000 f80e 	bl	8004b70 <HAL_InitTick>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	71fb      	strb	r3, [r7, #7]
 8004b5e:	e001      	b.n	8004b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b60:	f7ff fa7e 	bl	8004060 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b64:	79fb      	ldrb	r3, [r7, #7]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004b7c:	4b17      	ldr	r3, [pc, #92]	@ (8004bdc <HAL_InitTick+0x6c>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d023      	beq.n	8004bcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004b84:	4b16      	ldr	r3, [pc, #88]	@ (8004be0 <HAL_InitTick+0x70>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b14      	ldr	r3, [pc, #80]	@ (8004bdc <HAL_InitTick+0x6c>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f978 	bl	8004e90 <HAL_SYSTICK_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d809      	bhi.n	8004bc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bac:	2200      	movs	r2, #0
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	f000 f928 	bl	8004e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004be4 <HAL_InitTick+0x74>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e007      	b.n	8004bd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	e004      	b.n	8004bd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
 8004bca:	e001      	b.n	8004bd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000018 	.word	0x20000018
 8004be0:	20000010 	.word	0x20000010
 8004be4:	20000014 	.word	0x20000014

08004be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <HAL_IncTick+0x20>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_IncTick+0x24>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <HAL_IncTick+0x24>)
 8004bfa:	6013      	str	r3, [r2, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000018 	.word	0x20000018
 8004c0c:	20001084 	.word	0x20001084

08004c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return uwTick;
 8004c14:	4b03      	ldr	r3, [pc, #12]	@ (8004c24 <HAL_GetTick+0x14>)
 8004c16:	681b      	ldr	r3, [r3, #0]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20001084 	.word	0x20001084

08004c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c38:	4b0c      	ldr	r3, [pc, #48]	@ (8004c6c <__NVIC_SetPriorityGrouping+0x44>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c44:	4013      	ands	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c5a:	4a04      	ldr	r2, [pc, #16]	@ (8004c6c <__NVIC_SetPriorityGrouping+0x44>)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	60d3      	str	r3, [r2, #12]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c74:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <__NVIC_GetPriorityGrouping+0x18>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	0a1b      	lsrs	r3, r3, #8
 8004c7a:	f003 0307 	and.w	r3, r3, #7
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	db0b      	blt.n	8004cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	f003 021f 	and.w	r2, r3, #31
 8004ca4:	4907      	ldr	r1, [pc, #28]	@ (8004cc4 <__NVIC_EnableIRQ+0x38>)
 8004ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	2001      	movs	r0, #1
 8004cae:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	e000e100 	.word	0xe000e100

08004cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	6039      	str	r1, [r7, #0]
 8004cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db0a      	blt.n	8004cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	490c      	ldr	r1, [pc, #48]	@ (8004d14 <__NVIC_SetPriority+0x4c>)
 8004ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce6:	0112      	lsls	r2, r2, #4
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	440b      	add	r3, r1
 8004cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cf0:	e00a      	b.n	8004d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4908      	ldr	r1, [pc, #32]	@ (8004d18 <__NVIC_SetPriority+0x50>)
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	0112      	lsls	r2, r2, #4
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	440b      	add	r3, r1
 8004d06:	761a      	strb	r2, [r3, #24]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	e000e100 	.word	0xe000e100
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b089      	sub	sp, #36	@ 0x24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f1c3 0307 	rsb	r3, r3, #7
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	bf28      	it	cs
 8004d3a:	2304      	movcs	r3, #4
 8004d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d902      	bls.n	8004d4c <NVIC_EncodePriority+0x30>
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3b03      	subs	r3, #3
 8004d4a:	e000      	b.n	8004d4e <NVIC_EncodePriority+0x32>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d50:	f04f 32ff 	mov.w	r2, #4294967295
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	401a      	ands	r2, r3
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d64:	f04f 31ff 	mov.w	r1, #4294967295
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	43d9      	mvns	r1, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d74:	4313      	orrs	r3, r2
         );
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3724      	adds	r7, #36	@ 0x24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d94:	d301      	bcc.n	8004d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00f      	b.n	8004dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc4 <SysTick_Config+0x40>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004da2:	210f      	movs	r1, #15
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	f7ff ff8e 	bl	8004cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <SysTick_Config+0x40>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004db2:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <SysTick_Config+0x40>)
 8004db4:	2207      	movs	r2, #7
 8004db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	e000e010 	.word	0xe000e010

08004dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b07      	cmp	r3, #7
 8004dd4:	d00f      	beq.n	8004df6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d00c      	beq.n	8004df6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d009      	beq.n	8004df6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d006      	beq.n	8004df6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d003      	beq.n	8004df6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dee:	21a6      	movs	r1, #166	@ 0xa6
 8004df0:	4804      	ldr	r0, [pc, #16]	@ (8004e04 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004df2:	f7ff f84b 	bl	8003e8c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ff16 	bl	8004c28 <__NVIC_SetPriorityGrouping>
}
 8004dfc:	bf00      	nop
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	0800e09c 	.word	0x0800e09c

08004e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b0f      	cmp	r3, #15
 8004e1e:	d903      	bls.n	8004e28 <HAL_NVIC_SetPriority+0x20>
 8004e20:	21be      	movs	r1, #190	@ 0xbe
 8004e22:	480e      	ldr	r0, [pc, #56]	@ (8004e5c <HAL_NVIC_SetPriority+0x54>)
 8004e24:	f7ff f832 	bl	8003e8c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b0f      	cmp	r3, #15
 8004e2c:	d903      	bls.n	8004e36 <HAL_NVIC_SetPriority+0x2e>
 8004e2e:	21bf      	movs	r1, #191	@ 0xbf
 8004e30:	480a      	ldr	r0, [pc, #40]	@ (8004e5c <HAL_NVIC_SetPriority+0x54>)
 8004e32:	f7ff f82b 	bl	8003e8c <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e36:	f7ff ff1b 	bl	8004c70 <__NVIC_GetPriorityGrouping>
 8004e3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	6978      	ldr	r0, [r7, #20]
 8004e42:	f7ff ff6b 	bl	8004d1c <NVIC_EncodePriority>
 8004e46:	4602      	mov	r2, r0
 8004e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff ff3a 	bl	8004cc8 <__NVIC_SetPriority>
}
 8004e54:	bf00      	nop
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	0800e09c 	.word	0x0800e09c

08004e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da03      	bge.n	8004e7a <HAL_NVIC_EnableIRQ+0x1a>
 8004e72:	21d2      	movs	r1, #210	@ 0xd2
 8004e74:	4805      	ldr	r0, [pc, #20]	@ (8004e8c <HAL_NVIC_EnableIRQ+0x2c>)
 8004e76:	f7ff f809 	bl	8003e8c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff ff04 	bl	8004c8c <__NVIC_EnableIRQ>
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	0800e09c 	.word	0x0800e09c

08004e90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff73 	bl	8004d84 <SysTick_Config>
 8004e9e:	4603      	mov	r3, r0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e19d      	b.n	80051f6 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a79      	ldr	r2, [pc, #484]	@ (80050a4 <HAL_DMA_Init+0x1fc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d044      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a77      	ldr	r2, [pc, #476]	@ (80050a8 <HAL_DMA_Init+0x200>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d03f      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a76      	ldr	r2, [pc, #472]	@ (80050ac <HAL_DMA_Init+0x204>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d03a      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a74      	ldr	r2, [pc, #464]	@ (80050b0 <HAL_DMA_Init+0x208>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d035      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a73      	ldr	r2, [pc, #460]	@ (80050b4 <HAL_DMA_Init+0x20c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d030      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a71      	ldr	r2, [pc, #452]	@ (80050b8 <HAL_DMA_Init+0x210>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d02b      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a70      	ldr	r2, [pc, #448]	@ (80050bc <HAL_DMA_Init+0x214>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d026      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a6e      	ldr	r2, [pc, #440]	@ (80050c0 <HAL_DMA_Init+0x218>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d021      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a6d      	ldr	r2, [pc, #436]	@ (80050c4 <HAL_DMA_Init+0x21c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d01c      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6b      	ldr	r2, [pc, #428]	@ (80050c8 <HAL_DMA_Init+0x220>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d017      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a6a      	ldr	r2, [pc, #424]	@ (80050cc <HAL_DMA_Init+0x224>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d012      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a68      	ldr	r2, [pc, #416]	@ (80050d0 <HAL_DMA_Init+0x228>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00d      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a67      	ldr	r2, [pc, #412]	@ (80050d4 <HAL_DMA_Init+0x22c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d008      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a65      	ldr	r2, [pc, #404]	@ (80050d8 <HAL_DMA_Init+0x230>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <HAL_DMA_Init+0xa6>
 8004f46:	21a5      	movs	r1, #165	@ 0xa5
 8004f48:	4864      	ldr	r0, [pc, #400]	@ (80050dc <HAL_DMA_Init+0x234>)
 8004f4a:	f7fe ff9f 	bl	8003e8c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_DMA_Init+0xc8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d008      	beq.n	8004f70 <HAL_DMA_Init+0xc8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f66:	d003      	beq.n	8004f70 <HAL_DMA_Init+0xc8>
 8004f68:	21a6      	movs	r1, #166	@ 0xa6
 8004f6a:	485c      	ldr	r0, [pc, #368]	@ (80050dc <HAL_DMA_Init+0x234>)
 8004f6c:	f7fe ff8e 	bl	8003e8c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b40      	cmp	r3, #64	@ 0x40
 8004f76:	d007      	beq.n	8004f88 <HAL_DMA_Init+0xe0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_DMA_Init+0xe0>
 8004f80:	21a7      	movs	r1, #167	@ 0xa7
 8004f82:	4856      	ldr	r0, [pc, #344]	@ (80050dc <HAL_DMA_Init+0x234>)
 8004f84:	f7fe ff82 	bl	8003e8c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b80      	cmp	r3, #128	@ 0x80
 8004f8e:	d007      	beq.n	8004fa0 <HAL_DMA_Init+0xf8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_DMA_Init+0xf8>
 8004f98:	21a8      	movs	r1, #168	@ 0xa8
 8004f9a:	4850      	ldr	r0, [pc, #320]	@ (80050dc <HAL_DMA_Init+0x234>)
 8004f9c:	f7fe ff76 	bl	8003e8c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_DMA_Init+0x11c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb0:	d008      	beq.n	8004fc4 <HAL_DMA_Init+0x11c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fba:	d003      	beq.n	8004fc4 <HAL_DMA_Init+0x11c>
 8004fbc:	21a9      	movs	r1, #169	@ 0xa9
 8004fbe:	4847      	ldr	r0, [pc, #284]	@ (80050dc <HAL_DMA_Init+0x234>)
 8004fc0:	f7fe ff64 	bl	8003e8c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00d      	beq.n	8004fe8 <HAL_DMA_Init+0x140>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd4:	d008      	beq.n	8004fe8 <HAL_DMA_Init+0x140>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fde:	d003      	beq.n	8004fe8 <HAL_DMA_Init+0x140>
 8004fe0:	21aa      	movs	r1, #170	@ 0xaa
 8004fe2:	483e      	ldr	r0, [pc, #248]	@ (80050dc <HAL_DMA_Init+0x234>)
 8004fe4:	f7fe ff52 	bl	8003e8c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <HAL_DMA_Init+0x158>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d003      	beq.n	8005000 <HAL_DMA_Init+0x158>
 8004ff8:	21ab      	movs	r1, #171	@ 0xab
 8004ffa:	4838      	ldr	r0, [pc, #224]	@ (80050dc <HAL_DMA_Init+0x234>)
 8004ffc:	f7fe ff46 	bl	8003e8c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d012      	beq.n	800502e <HAL_DMA_Init+0x186>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005010:	d00d      	beq.n	800502e <HAL_DMA_Init+0x186>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800501a:	d008      	beq.n	800502e <HAL_DMA_Init+0x186>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005024:	d003      	beq.n	800502e <HAL_DMA_Init+0x186>
 8005026:	21ac      	movs	r1, #172	@ 0xac
 8005028:	482c      	ldr	r0, [pc, #176]	@ (80050dc <HAL_DMA_Init+0x234>)
 800502a:	f7fe ff2f 	bl	8003e8c <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01f      	beq.n	8005076 <HAL_DMA_Init+0x1ce>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d01b      	beq.n	8005076 <HAL_DMA_Init+0x1ce>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d017      	beq.n	8005076 <HAL_DMA_Init+0x1ce>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d013      	beq.n	8005076 <HAL_DMA_Init+0x1ce>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b04      	cmp	r3, #4
 8005054:	d00f      	beq.n	8005076 <HAL_DMA_Init+0x1ce>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b05      	cmp	r3, #5
 800505c:	d00b      	beq.n	8005076 <HAL_DMA_Init+0x1ce>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b06      	cmp	r3, #6
 8005064:	d007      	beq.n	8005076 <HAL_DMA_Init+0x1ce>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b07      	cmp	r3, #7
 800506c:	d003      	beq.n	8005076 <HAL_DMA_Init+0x1ce>
 800506e:	21ae      	movs	r1, #174	@ 0xae
 8005070:	481a      	ldr	r0, [pc, #104]	@ (80050dc <HAL_DMA_Init+0x234>)
 8005072:	f7fe ff0b 	bl	8003e8c <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	4b18      	ldr	r3, [pc, #96]	@ (80050e0 <HAL_DMA_Init+0x238>)
 800507e:	429a      	cmp	r2, r3
 8005080:	d836      	bhi.n	80050f0 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	4b16      	ldr	r3, [pc, #88]	@ (80050e4 <HAL_DMA_Init+0x23c>)
 800508a:	4413      	add	r3, r2
 800508c:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <HAL_DMA_Init+0x240>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	009a      	lsls	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <HAL_DMA_Init+0x244>)
 800509e:	641a      	str	r2, [r3, #64]	@ 0x40
 80050a0:	e035      	b.n	800510e <HAL_DMA_Init+0x266>
 80050a2:	bf00      	nop
 80050a4:	40020008 	.word	0x40020008
 80050a8:	4002001c 	.word	0x4002001c
 80050ac:	40020030 	.word	0x40020030
 80050b0:	40020044 	.word	0x40020044
 80050b4:	40020058 	.word	0x40020058
 80050b8:	4002006c 	.word	0x4002006c
 80050bc:	40020080 	.word	0x40020080
 80050c0:	40020408 	.word	0x40020408
 80050c4:	4002041c 	.word	0x4002041c
 80050c8:	40020430 	.word	0x40020430
 80050cc:	40020444 	.word	0x40020444
 80050d0:	40020458 	.word	0x40020458
 80050d4:	4002046c 	.word	0x4002046c
 80050d8:	40020480 	.word	0x40020480
 80050dc:	0800e0d8 	.word	0x0800e0d8
 80050e0:	40020407 	.word	0x40020407
 80050e4:	bffdfff8 	.word	0xbffdfff8
 80050e8:	cccccccd 	.word	0xcccccccd
 80050ec:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b42      	ldr	r3, [pc, #264]	@ (8005200 <HAL_DMA_Init+0x358>)
 80050f8:	4413      	add	r3, r2
 80050fa:	4a42      	ldr	r2, [pc, #264]	@ (8005204 <HAL_DMA_Init+0x35c>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	009a      	lsls	r2, r3, #2
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a3f      	ldr	r2, [pc, #252]	@ (8005208 <HAL_DMA_Init+0x360>)
 800510c:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005128:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800514a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005168:	d039      	beq.n	80051de <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	4a27      	ldr	r2, [pc, #156]	@ (800520c <HAL_DMA_Init+0x364>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d11a      	bne.n	80051aa <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005174:	4b26      	ldr	r3, [pc, #152]	@ (8005210 <HAL_DMA_Init+0x368>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517c:	f003 031c 	and.w	r3, r3, #28
 8005180:	210f      	movs	r1, #15
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	4921      	ldr	r1, [pc, #132]	@ (8005210 <HAL_DMA_Init+0x368>)
 800518a:	4013      	ands	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800518e:	4b20      	ldr	r3, [pc, #128]	@ (8005210 <HAL_DMA_Init+0x368>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f003 031c 	and.w	r3, r3, #28
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	491b      	ldr	r1, [pc, #108]	@ (8005210 <HAL_DMA_Init+0x368>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	600b      	str	r3, [r1, #0]
 80051a8:	e019      	b.n	80051de <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80051aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005214 <HAL_DMA_Init+0x36c>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b2:	f003 031c 	and.w	r3, r3, #28
 80051b6:	210f      	movs	r1, #15
 80051b8:	fa01 f303 	lsl.w	r3, r1, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	4915      	ldr	r1, [pc, #84]	@ (8005214 <HAL_DMA_Init+0x36c>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80051c4:	4b13      	ldr	r3, [pc, #76]	@ (8005214 <HAL_DMA_Init+0x36c>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d0:	f003 031c 	and.w	r3, r3, #28
 80051d4:	fa01 f303 	lsl.w	r3, r1, r3
 80051d8:	490e      	ldr	r1, [pc, #56]	@ (8005214 <HAL_DMA_Init+0x36c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	bffdfbf8 	.word	0xbffdfbf8
 8005204:	cccccccd 	.word	0xcccccccd
 8005208:	40020400 	.word	0x40020400
 800520c:	40020000 	.word	0x40020000
 8005210:	400200a8 	.word	0x400200a8
 8005214:	400204a8 	.word	0x400204a8

08005218 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_DMA_Start_IT+0x20>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005236:	d304      	bcc.n	8005242 <HAL_DMA_Start_IT+0x2a>
 8005238:	f240 11df 	movw	r1, #479	@ 0x1df
 800523c:	482c      	ldr	r0, [pc, #176]	@ (80052f0 <HAL_DMA_Start_IT+0xd8>)
 800523e:	f7fe fe25 	bl	8003e8c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_DMA_Start_IT+0x38>
 800524c:	2302      	movs	r3, #2
 800524e:	e04b      	b.n	80052e8 <HAL_DMA_Start_IT+0xd0>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d13a      	bne.n	80052da <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f923 	bl	80054d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 020e 	orr.w	r2, r2, #14
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e00f      	b.n	80052c8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0204 	bic.w	r2, r2, #4
 80052b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 020a 	orr.w	r2, r2, #10
 80052c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e005      	b.n	80052e6 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052e2:	2302      	movs	r3, #2
 80052e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	0800e0d8 	.word	0x0800e0d8

080052f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d005      	beq.n	8005318 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2204      	movs	r2, #4
 8005310:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	e029      	b.n	800536c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 020e 	bic.w	r2, r2, #14
 8005326:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533c:	f003 021c 	and.w	r2, r3, #28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	2101      	movs	r1, #1
 8005346:	fa01 f202 	lsl.w	r2, r1, r2
 800534a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
    }
  }
  return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	f003 031c 	and.w	r3, r3, #28
 8005396:	2204      	movs	r2, #4
 8005398:	409a      	lsls	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d026      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x7a>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d021      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d107      	bne.n	80053ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0204 	bic.w	r2, r2, #4
 80053c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ce:	f003 021c 	and.w	r2, r3, #28
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	2104      	movs	r1, #4
 80053d8:	fa01 f202 	lsl.w	r2, r1, r2
 80053dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d071      	beq.n	80054ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053ee:	e06c      	b.n	80054ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f4:	f003 031c 	and.w	r3, r3, #28
 80053f8:	2202      	movs	r2, #2
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d02e      	beq.n	8005462 <HAL_DMA_IRQHandler+0xec>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d029      	beq.n	8005462 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 020a 	bic.w	r2, r2, #10
 800542a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005438:	f003 021c 	and.w	r2, r3, #28
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	2102      	movs	r1, #2
 8005442:	fa01 f202 	lsl.w	r2, r1, r2
 8005446:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d038      	beq.n	80054ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005460:	e033      	b.n	80054ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005466:	f003 031c 	and.w	r3, r3, #28
 800546a:	2208      	movs	r2, #8
 800546c:	409a      	lsls	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d02a      	beq.n	80054cc <HAL_DMA_IRQHandler+0x156>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d025      	beq.n	80054cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 020e 	bic.w	r2, r2, #14
 800548e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005494:	f003 021c 	and.w	r2, r3, #28
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	2101      	movs	r1, #1
 800549e:	fa01 f202 	lsl.w	r2, r1, r2
 80054a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
}
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f003 021c 	and.w	r2, r3, #28
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b10      	cmp	r3, #16
 8005504:	d108      	bne.n	8005518 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005516:	e007      	b.n	8005528 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005548:	d01f      	beq.n	800558a <HAL_GPIO_Init+0x56>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a3c      	ldr	r2, [pc, #240]	@ (8005640 <HAL_GPIO_Init+0x10c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01b      	beq.n	800558a <HAL_GPIO_Init+0x56>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a3b      	ldr	r2, [pc, #236]	@ (8005644 <HAL_GPIO_Init+0x110>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d017      	beq.n	800558a <HAL_GPIO_Init+0x56>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a3a      	ldr	r2, [pc, #232]	@ (8005648 <HAL_GPIO_Init+0x114>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <HAL_GPIO_Init+0x56>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a39      	ldr	r2, [pc, #228]	@ (800564c <HAL_GPIO_Init+0x118>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00f      	beq.n	800558a <HAL_GPIO_Init+0x56>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a38      	ldr	r2, [pc, #224]	@ (8005650 <HAL_GPIO_Init+0x11c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <HAL_GPIO_Init+0x56>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a37      	ldr	r2, [pc, #220]	@ (8005654 <HAL_GPIO_Init+0x120>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <HAL_GPIO_Init+0x56>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a36      	ldr	r2, [pc, #216]	@ (8005658 <HAL_GPIO_Init+0x124>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <HAL_GPIO_Init+0x56>
 8005582:	21aa      	movs	r1, #170	@ 0xaa
 8005584:	4835      	ldr	r0, [pc, #212]	@ (800565c <HAL_GPIO_Init+0x128>)
 8005586:	f7fe fc81 	bl	8003e8c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_GPIO_Init+0x6a>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800559c:	d303      	bcc.n	80055a6 <HAL_GPIO_Init+0x72>
 800559e:	21ab      	movs	r1, #171	@ 0xab
 80055a0:	482e      	ldr	r0, [pc, #184]	@ (800565c <HAL_GPIO_Init+0x128>)
 80055a2:	f7fe fc73 	bl	8003e8c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 823d 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f000 8238 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b11      	cmp	r3, #17
 80055c0:	f000 8233 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	f000 822e 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b12      	cmp	r3, #18
 80055d4:	f000 8229 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80055e0:	f000 8223 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80055ec:	f000 821d 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80055f8:	f000 8217 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8005604:	f000 8211 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8005610:	f000 820b 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800561c:	f000 8205 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b03      	cmp	r3, #3
 8005626:	f000 8200 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b0b      	cmp	r3, #11
 8005630:	f000 81fb 	beq.w	8005a2a <HAL_GPIO_Init+0x4f6>
 8005634:	21ac      	movs	r1, #172	@ 0xac
 8005636:	4809      	ldr	r0, [pc, #36]	@ (800565c <HAL_GPIO_Init+0x128>)
 8005638:	f7fe fc28 	bl	8003e8c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800563c:	e1f5      	b.n	8005a2a <HAL_GPIO_Init+0x4f6>
 800563e:	bf00      	nop
 8005640:	48000400 	.word	0x48000400
 8005644:	48000800 	.word	0x48000800
 8005648:	48000c00 	.word	0x48000c00
 800564c:	48001000 	.word	0x48001000
 8005650:	48001400 	.word	0x48001400
 8005654:	48001800 	.word	0x48001800
 8005658:	48001c00 	.word	0x48001c00
 800565c:	0800e110 	.word	0x0800e110
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2101      	movs	r1, #1
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	4013      	ands	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 81d6 	beq.w	8005a24 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d005      	beq.n	8005690 <HAL_GPIO_Init+0x15c>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d144      	bne.n	800571a <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00f      	beq.n	80056b8 <HAL_GPIO_Init+0x184>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d00b      	beq.n	80056b8 <HAL_GPIO_Init+0x184>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d007      	beq.n	80056b8 <HAL_GPIO_Init+0x184>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_Init+0x184>
 80056b0:	21bb      	movs	r1, #187	@ 0xbb
 80056b2:	489c      	ldr	r0, [pc, #624]	@ (8005924 <HAL_GPIO_Init+0x3f0>)
 80056b4:	f7fe fbea 	bl	8003e8c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	2203      	movs	r2, #3
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4013      	ands	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ee:	2201      	movs	r2, #1
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43db      	mvns	r3, r3
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4013      	ands	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	f003 0201 	and.w	r2, r3, #1
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d118      	bne.n	8005758 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800572c:	2201      	movs	r2, #1
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4013      	ands	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	08db      	lsrs	r3, r3, #3
 8005742:	f003 0201 	and.w	r2, r3, #1
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b03      	cmp	r3, #3
 8005762:	d027      	beq.n	80057b4 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <HAL_GPIO_Init+0x250>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d007      	beq.n	8005784 <HAL_GPIO_Init+0x250>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d003      	beq.n	8005784 <HAL_GPIO_Init+0x250>
 800577c:	21dc      	movs	r1, #220	@ 0xdc
 800577e:	4869      	ldr	r0, [pc, #420]	@ (8005924 <HAL_GPIO_Init+0x3f0>)
 8005780:	f7fe fb84 	bl	8003e8c <assert_failed>

        temp = GPIOx->PUPDR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	2203      	movs	r2, #3
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4013      	ands	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d14f      	bne.n	8005860 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057c6:	d01f      	beq.n	8005808 <HAL_GPIO_Init+0x2d4>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a57      	ldr	r2, [pc, #348]	@ (8005928 <HAL_GPIO_Init+0x3f4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d01b      	beq.n	8005808 <HAL_GPIO_Init+0x2d4>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a56      	ldr	r2, [pc, #344]	@ (800592c <HAL_GPIO_Init+0x3f8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d017      	beq.n	8005808 <HAL_GPIO_Init+0x2d4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a55      	ldr	r2, [pc, #340]	@ (8005930 <HAL_GPIO_Init+0x3fc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d013      	beq.n	8005808 <HAL_GPIO_Init+0x2d4>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a54      	ldr	r2, [pc, #336]	@ (8005934 <HAL_GPIO_Init+0x400>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00f      	beq.n	8005808 <HAL_GPIO_Init+0x2d4>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a53      	ldr	r2, [pc, #332]	@ (8005938 <HAL_GPIO_Init+0x404>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <HAL_GPIO_Init+0x2d4>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a52      	ldr	r2, [pc, #328]	@ (800593c <HAL_GPIO_Init+0x408>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <HAL_GPIO_Init+0x2d4>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a51      	ldr	r2, [pc, #324]	@ (8005940 <HAL_GPIO_Init+0x40c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <HAL_GPIO_Init+0x2d4>
 8005800:	21e8      	movs	r1, #232	@ 0xe8
 8005802:	4848      	ldr	r0, [pc, #288]	@ (8005924 <HAL_GPIO_Init+0x3f0>)
 8005804:	f7fe fb42 	bl	8003e8c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b0f      	cmp	r3, #15
 800580e:	d903      	bls.n	8005818 <HAL_GPIO_Init+0x2e4>
 8005810:	21e9      	movs	r1, #233	@ 0xe9
 8005812:	4844      	ldr	r0, [pc, #272]	@ (8005924 <HAL_GPIO_Init+0x3f0>)
 8005814:	f7fe fb3a 	bl	8003e8c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	08da      	lsrs	r2, r3, #3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3208      	adds	r2, #8
 8005820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005824:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	220f      	movs	r2, #15
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	08da      	lsrs	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3208      	adds	r2, #8
 800585a:	6939      	ldr	r1, [r7, #16]
 800585c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	2203      	movs	r2, #3
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4013      	ands	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 0203 	and.w	r2, r3, #3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80c1 	beq.w	8005a24 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a2:	4b28      	ldr	r3, [pc, #160]	@ (8005944 <HAL_GPIO_Init+0x410>)
 80058a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a6:	4a27      	ldr	r2, [pc, #156]	@ (8005944 <HAL_GPIO_Init+0x410>)
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80058ae:	4b25      	ldr	r3, [pc, #148]	@ (8005944 <HAL_GPIO_Init+0x410>)
 80058b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058ba:	4a23      	ldr	r2, [pc, #140]	@ (8005948 <HAL_GPIO_Init+0x414>)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	3302      	adds	r3, #2
 80058c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	220f      	movs	r2, #15
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4013      	ands	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80058e4:	d03a      	beq.n	800595c <HAL_GPIO_Init+0x428>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005928 <HAL_GPIO_Init+0x3f4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d034      	beq.n	8005958 <HAL_GPIO_Init+0x424>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a0e      	ldr	r2, [pc, #56]	@ (800592c <HAL_GPIO_Init+0x3f8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02e      	beq.n	8005954 <HAL_GPIO_Init+0x420>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005930 <HAL_GPIO_Init+0x3fc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d028      	beq.n	8005950 <HAL_GPIO_Init+0x41c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a0c      	ldr	r2, [pc, #48]	@ (8005934 <HAL_GPIO_Init+0x400>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <HAL_GPIO_Init+0x418>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a0b      	ldr	r2, [pc, #44]	@ (8005938 <HAL_GPIO_Init+0x404>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <HAL_GPIO_Init+0x3ea>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a0a      	ldr	r2, [pc, #40]	@ (800593c <HAL_GPIO_Init+0x408>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d101      	bne.n	800591a <HAL_GPIO_Init+0x3e6>
 8005916:	2306      	movs	r3, #6
 8005918:	e021      	b.n	800595e <HAL_GPIO_Init+0x42a>
 800591a:	2307      	movs	r3, #7
 800591c:	e01f      	b.n	800595e <HAL_GPIO_Init+0x42a>
 800591e:	2305      	movs	r3, #5
 8005920:	e01d      	b.n	800595e <HAL_GPIO_Init+0x42a>
 8005922:	bf00      	nop
 8005924:	0800e110 	.word	0x0800e110
 8005928:	48000400 	.word	0x48000400
 800592c:	48000800 	.word	0x48000800
 8005930:	48000c00 	.word	0x48000c00
 8005934:	48001000 	.word	0x48001000
 8005938:	48001400 	.word	0x48001400
 800593c:	48001800 	.word	0x48001800
 8005940:	48001c00 	.word	0x48001c00
 8005944:	40021000 	.word	0x40021000
 8005948:	40010000 	.word	0x40010000
 800594c:	2304      	movs	r3, #4
 800594e:	e006      	b.n	800595e <HAL_GPIO_Init+0x42a>
 8005950:	2303      	movs	r3, #3
 8005952:	e004      	b.n	800595e <HAL_GPIO_Init+0x42a>
 8005954:	2302      	movs	r3, #2
 8005956:	e002      	b.n	800595e <HAL_GPIO_Init+0x42a>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_GPIO_Init+0x42a>
 800595c:	2300      	movs	r3, #0
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	f002 0203 	and.w	r2, r2, #3
 8005964:	0092      	lsls	r2, r2, #2
 8005966:	4093      	lsls	r3, r2
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800596e:	4935      	ldr	r1, [pc, #212]	@ (8005a44 <HAL_GPIO_Init+0x510>)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	3302      	adds	r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800597c:	4b32      	ldr	r3, [pc, #200]	@ (8005a48 <HAL_GPIO_Init+0x514>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	43db      	mvns	r3, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4013      	ands	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059a0:	4a29      	ldr	r2, [pc, #164]	@ (8005a48 <HAL_GPIO_Init+0x514>)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059a6:	4b28      	ldr	r3, [pc, #160]	@ (8005a48 <HAL_GPIO_Init+0x514>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4013      	ands	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005a48 <HAL_GPIO_Init+0x514>)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80059d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a48 <HAL_GPIO_Init+0x514>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	43db      	mvns	r3, r3
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4013      	ands	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059f4:	4a14      	ldr	r2, [pc, #80]	@ (8005a48 <HAL_GPIO_Init+0x514>)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80059fa:	4b13      	ldr	r3, [pc, #76]	@ (8005a48 <HAL_GPIO_Init+0x514>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4013      	ands	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a48 <HAL_GPIO_Init+0x514>)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3301      	adds	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f47f ae13 	bne.w	8005660 <HAL_GPIO_Init+0x12c>
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40010400 	.word	0x40010400

08005a4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a60:	d020      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x58>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a84      	ldr	r2, [pc, #528]	@ (8005c78 <HAL_GPIO_DeInit+0x22c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01c      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x58>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a83      	ldr	r2, [pc, #524]	@ (8005c7c <HAL_GPIO_DeInit+0x230>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x58>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a82      	ldr	r2, [pc, #520]	@ (8005c80 <HAL_GPIO_DeInit+0x234>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d014      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x58>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a81      	ldr	r2, [pc, #516]	@ (8005c84 <HAL_GPIO_DeInit+0x238>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d010      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x58>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a80      	ldr	r2, [pc, #512]	@ (8005c88 <HAL_GPIO_DeInit+0x23c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00c      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x58>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a7f      	ldr	r2, [pc, #508]	@ (8005c8c <HAL_GPIO_DeInit+0x240>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d008      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x58>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a7e      	ldr	r2, [pc, #504]	@ (8005c90 <HAL_GPIO_DeInit+0x244>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_GPIO_DeInit+0x58>
 8005a9a:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8005a9e:	487d      	ldr	r0, [pc, #500]	@ (8005c94 <HAL_GPIO_DeInit+0x248>)
 8005aa0:	f7fe f9f4 	bl	8003e8c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <HAL_GPIO_DeInit+0x6a>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab2:	f0c0 80d4 	bcc.w	8005c5e <HAL_GPIO_DeInit+0x212>
 8005ab6:	f240 113b 	movw	r1, #315	@ 0x13b
 8005aba:	4876      	ldr	r0, [pc, #472]	@ (8005c94 <HAL_GPIO_DeInit+0x248>)
 8005abc:	f7fe f9e6 	bl	8003e8c <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005ac0:	e0cd      	b.n	8005c5e <HAL_GPIO_DeInit+0x212>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	4013      	ands	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80c0 	beq.w	8005c58 <HAL_GPIO_DeInit+0x20c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005ad8:	4a6f      	ldr	r2, [pc, #444]	@ (8005c98 <HAL_GPIO_DeInit+0x24c>)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	3302      	adds	r3, #2
 8005ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	220f      	movs	r2, #15
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4013      	ands	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005b00:	d025      	beq.n	8005b4e <HAL_GPIO_DeInit+0x102>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a5c      	ldr	r2, [pc, #368]	@ (8005c78 <HAL_GPIO_DeInit+0x22c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01f      	beq.n	8005b4a <HAL_GPIO_DeInit+0xfe>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a5b      	ldr	r2, [pc, #364]	@ (8005c7c <HAL_GPIO_DeInit+0x230>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d019      	beq.n	8005b46 <HAL_GPIO_DeInit+0xfa>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a5a      	ldr	r2, [pc, #360]	@ (8005c80 <HAL_GPIO_DeInit+0x234>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_GPIO_DeInit+0xf6>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a59      	ldr	r2, [pc, #356]	@ (8005c84 <HAL_GPIO_DeInit+0x238>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00d      	beq.n	8005b3e <HAL_GPIO_DeInit+0xf2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a58      	ldr	r2, [pc, #352]	@ (8005c88 <HAL_GPIO_DeInit+0x23c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <HAL_GPIO_DeInit+0xee>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a57      	ldr	r2, [pc, #348]	@ (8005c8c <HAL_GPIO_DeInit+0x240>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d101      	bne.n	8005b36 <HAL_GPIO_DeInit+0xea>
 8005b32:	2306      	movs	r3, #6
 8005b34:	e00c      	b.n	8005b50 <HAL_GPIO_DeInit+0x104>
 8005b36:	2307      	movs	r3, #7
 8005b38:	e00a      	b.n	8005b50 <HAL_GPIO_DeInit+0x104>
 8005b3a:	2305      	movs	r3, #5
 8005b3c:	e008      	b.n	8005b50 <HAL_GPIO_DeInit+0x104>
 8005b3e:	2304      	movs	r3, #4
 8005b40:	e006      	b.n	8005b50 <HAL_GPIO_DeInit+0x104>
 8005b42:	2303      	movs	r3, #3
 8005b44:	e004      	b.n	8005b50 <HAL_GPIO_DeInit+0x104>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e002      	b.n	8005b50 <HAL_GPIO_DeInit+0x104>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <HAL_GPIO_DeInit+0x104>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	f002 0203 	and.w	r2, r2, #3
 8005b56:	0092      	lsls	r2, r2, #2
 8005b58:	4093      	lsls	r3, r2
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d132      	bne.n	8005bc6 <HAL_GPIO_DeInit+0x17a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005b60:	4b4e      	ldr	r3, [pc, #312]	@ (8005c9c <HAL_GPIO_DeInit+0x250>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	43db      	mvns	r3, r3
 8005b68:	494c      	ldr	r1, [pc, #304]	@ (8005c9c <HAL_GPIO_DeInit+0x250>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8005c9c <HAL_GPIO_DeInit+0x250>)
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	43db      	mvns	r3, r3
 8005b76:	4949      	ldr	r1, [pc, #292]	@ (8005c9c <HAL_GPIO_DeInit+0x250>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005b7c:	4b47      	ldr	r3, [pc, #284]	@ (8005c9c <HAL_GPIO_DeInit+0x250>)
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	43db      	mvns	r3, r3
 8005b84:	4945      	ldr	r1, [pc, #276]	@ (8005c9c <HAL_GPIO_DeInit+0x250>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005b8a:	4b44      	ldr	r3, [pc, #272]	@ (8005c9c <HAL_GPIO_DeInit+0x250>)
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	43db      	mvns	r3, r3
 8005b92:	4942      	ldr	r1, [pc, #264]	@ (8005c9c <HAL_GPIO_DeInit+0x250>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	220f      	movs	r2, #15
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8005c98 <HAL_GPIO_DeInit+0x24c>)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	089b      	lsrs	r3, r3, #2
 8005bae:	3302      	adds	r3, #2
 8005bb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	4837      	ldr	r0, [pc, #220]	@ (8005c98 <HAL_GPIO_DeInit+0x24c>)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	089b      	lsrs	r3, r3, #2
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	2103      	movs	r1, #3
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	08da      	lsrs	r2, r3, #3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3208      	adds	r2, #8
 8005be2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	220f      	movs	r2, #15
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	08d2      	lsrs	r2, r2, #3
 8005bfa:	4019      	ands	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3208      	adds	r2, #8
 8005c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	2103      	movs	r1, #3
 8005c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c12:	43db      	mvns	r3, r3
 8005c14:	401a      	ands	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	2101      	movs	r1, #1
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	401a      	ands	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	2103      	movs	r1, #3
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	401a      	ands	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c48:	2101      	movs	r1, #1
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	401a      	ands	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	fa22 f303 	lsr.w	r3, r2, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f47f af2b 	bne.w	8005ac2 <HAL_GPIO_DeInit+0x76>
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	48000400 	.word	0x48000400
 8005c7c:	48000800 	.word	0x48000800
 8005c80:	48000c00 	.word	0x48000c00
 8005c84:	48001000 	.word	0x48001000
 8005c88:	48001400 	.word	0x48001400
 8005c8c:	48001800 	.word	0x48001800
 8005c90:	48001c00 	.word	0x48001c00
 8005c94:	0800e110 	.word	0x0800e110
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40010400 	.word	0x40010400

08005ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
 8005cac:	4613      	mov	r3, r2
 8005cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <HAL_GPIO_WritePin+0x20>
 8005cb6:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8005cba:	480e      	ldr	r0, [pc, #56]	@ (8005cf4 <HAL_GPIO_WritePin+0x54>)
 8005cbc:	f7fe f8e6 	bl	8003e8c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005cc0:	787b      	ldrb	r3, [r7, #1]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_GPIO_WritePin+0x36>
 8005cc6:	787b      	ldrb	r3, [r7, #1]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d004      	beq.n	8005cd6 <HAL_GPIO_WritePin+0x36>
 8005ccc:	f240 11af 	movw	r1, #431	@ 0x1af
 8005cd0:	4808      	ldr	r0, [pc, #32]	@ (8005cf4 <HAL_GPIO_WritePin+0x54>)
 8005cd2:	f7fe f8db 	bl	8003e8c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005cd6:	787b      	ldrb	r3, [r7, #1]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cdc:	887a      	ldrh	r2, [r7, #2]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ce2:	e002      	b.n	8005cea <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ce4:	887a      	ldrh	r2, [r7, #2]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cea:	bf00      	nop
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	0800e110 	.word	0x0800e110

08005cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d02:	4b08      	ldr	r3, [pc, #32]	@ (8005d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d0e:	4a05      	ldr	r2, [pc, #20]	@ (8005d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f806 	bl	8005d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40010400 	.word	0x40010400

08005d28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d44:	4b04      	ldr	r3, [pc, #16]	@ (8005d58 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40007000 	.word	0x40007000

08005d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d6a:	d007      	beq.n	8005d7c <HAL_PWREx_ControlVoltageScaling+0x20>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d72:	d003      	beq.n	8005d7c <HAL_PWREx_ControlVoltageScaling+0x20>
 8005d74:	21a7      	movs	r1, #167	@ 0xa7
 8005d76:	4826      	ldr	r0, [pc, #152]	@ (8005e10 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005d78:	f7fe f888 	bl	8003e8c <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d82:	d130      	bne.n	8005de6 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d84:	4b23      	ldr	r3, [pc, #140]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d90:	d038      	beq.n	8005e04 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d92:	4b20      	ldr	r3, [pc, #128]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005da0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005da2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e18 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2232      	movs	r2, #50	@ 0x32
 8005da8:	fb02 f303 	mul.w	r3, r2, r3
 8005dac:	4a1b      	ldr	r2, [pc, #108]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	0c9b      	lsrs	r3, r3, #18
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005db8:	e002      	b.n	8005dc0 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dc0:	4b14      	ldr	r3, [pc, #80]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dcc:	d102      	bne.n	8005dd4 <HAL_PWREx_ControlVoltageScaling+0x78>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f2      	bne.n	8005dba <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de0:	d110      	bne.n	8005e04 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e00f      	b.n	8005e06 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005de6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005df2:	d007      	beq.n	8005e04 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005df4:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dfc:	4a05      	ldr	r2, [pc, #20]	@ (8005e14 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	0800e14c 	.word	0x0800e14c
 8005e14:	40007000 	.word	0x40007000
 8005e18:	20000010 	.word	0x20000010
 8005e1c:	431bde83 	.word	0x431bde83

08005e20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f000 bcef 	b.w	8006812 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_RCC_OscConfig+0x2e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b1f      	cmp	r3, #31
 8005e42:	d904      	bls.n	8005e4e <HAL_RCC_OscConfig+0x2e>
 8005e44:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8005e48:	489a      	ldr	r0, [pc, #616]	@ (80060b4 <HAL_RCC_OscConfig+0x294>)
 8005e4a:	f7fe f81f 	bl	8003e8c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4e:	4b9a      	ldr	r3, [pc, #616]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e58:	4b97      	ldr	r3, [pc, #604]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 813d 	beq.w	80060ea <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <HAL_RCC_OscConfig+0x6a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d004      	beq.n	8005e8a <HAL_RCC_OscConfig+0x6a>
 8005e80:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8005e84:	488b      	ldr	r0, [pc, #556]	@ (80060b4 <HAL_RCC_OscConfig+0x294>)
 8005e86:	f7fe f801 	bl	8003e8c <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	2bff      	cmp	r3, #255	@ 0xff
 8005e90:	d904      	bls.n	8005e9c <HAL_RCC_OscConfig+0x7c>
 8005e92:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8005e96:	4887      	ldr	r0, [pc, #540]	@ (80060b4 <HAL_RCC_OscConfig+0x294>)
 8005e98:	f7fd fff8 	bl	8003e8c <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d030      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d02c      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d028      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	2b30      	cmp	r3, #48	@ 0x30
 8005eba:	d024      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	2b40      	cmp	r3, #64	@ 0x40
 8005ec2:	d020      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	2b50      	cmp	r3, #80	@ 0x50
 8005eca:	d01c      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	2b60      	cmp	r3, #96	@ 0x60
 8005ed2:	d018      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	2b70      	cmp	r3, #112	@ 0x70
 8005eda:	d014      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	2b80      	cmp	r3, #128	@ 0x80
 8005ee2:	d010      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	2b90      	cmp	r3, #144	@ 0x90
 8005eea:	d00c      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	2bb0      	cmp	r3, #176	@ 0xb0
 8005efa:	d004      	beq.n	8005f06 <HAL_RCC_OscConfig+0xe6>
 8005efc:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8005f00:	486c      	ldr	r0, [pc, #432]	@ (80060b4 <HAL_RCC_OscConfig+0x294>)
 8005f02:	f7fd ffc3 	bl	8003e8c <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <HAL_RCC_OscConfig+0xfc>
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b0c      	cmp	r3, #12
 8005f10:	f040 808e 	bne.w	8006030 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	f040 808a 	bne.w	8006030 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f1c:	4b66      	ldr	r3, [pc, #408]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d006      	beq.n	8005f36 <HAL_RCC_OscConfig+0x116>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f000 bc6e 	b.w	8006812 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <HAL_RCC_OscConfig+0x130>
 8005f46:	4b5c      	ldr	r3, [pc, #368]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f4e:	e005      	b.n	8005f5c <HAL_RCC_OscConfig+0x13c>
 8005f50:	4b59      	ldr	r3, [pc, #356]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f56:	091b      	lsrs	r3, r3, #4
 8005f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d224      	bcs.n	8005faa <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fec1 	bl	8006cec <RCC_SetFlashLatencyFromMSIRange>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f000 bc4e 	b.w	8006812 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f76:	4b50      	ldr	r3, [pc, #320]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a4f      	ldr	r2, [pc, #316]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f7c:	f043 0308 	orr.w	r3, r3, #8
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	4b4d      	ldr	r3, [pc, #308]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	494a      	ldr	r1, [pc, #296]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f94:	4b48      	ldr	r3, [pc, #288]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	4945      	ldr	r1, [pc, #276]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]
 8005fa8:	e026      	b.n	8005ff8 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005faa:	4b43      	ldr	r3, [pc, #268]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a42      	ldr	r2, [pc, #264]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005fb0:	f043 0308 	orr.w	r3, r3, #8
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	4b40      	ldr	r3, [pc, #256]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	493d      	ldr	r1, [pc, #244]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	4938      	ldr	r1, [pc, #224]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fe80 	bl	8006cec <RCC_SetFlashLatencyFromMSIRange>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f000 bc0d 	b.w	8006812 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ff8:	f000 fdb4 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	492c      	ldr	r1, [pc, #176]	@ (80060bc <HAL_RCC_OscConfig+0x29c>)
 800600a:	5ccb      	ldrb	r3, [r1, r3]
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	4a2a      	ldr	r2, [pc, #168]	@ (80060c0 <HAL_RCC_OscConfig+0x2a0>)
 8006016:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006018:	4b2a      	ldr	r3, [pc, #168]	@ (80060c4 <HAL_RCC_OscConfig+0x2a4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe fda7 	bl	8004b70 <HAL_InitTick>
 8006022:	4603      	mov	r3, r0
 8006024:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d05d      	beq.n	80060e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	e3f0      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d032      	beq.n	800609e <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006038:	4b1f      	ldr	r3, [pc, #124]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1e      	ldr	r2, [pc, #120]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006044:	f7fe fde4 	bl	8004c10 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800604c:	f7fe fde0 	bl	8004c10 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e3d9      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800605e:	4b16      	ldr	r3, [pc, #88]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800606a:	4b13      	ldr	r3, [pc, #76]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a12      	ldr	r2, [pc, #72]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8006070:	f043 0308 	orr.w	r3, r3, #8
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	4b10      	ldr	r3, [pc, #64]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	490d      	ldr	r1, [pc, #52]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8006084:	4313      	orrs	r3, r2
 8006086:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006088:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	4908      	ldr	r1, [pc, #32]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 8006098:	4313      	orrs	r3, r2
 800609a:	604b      	str	r3, [r1, #4]
 800609c:	e025      	b.n	80060ea <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800609e:	4b06      	ldr	r3, [pc, #24]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a05      	ldr	r2, [pc, #20]	@ (80060b8 <HAL_RCC_OscConfig+0x298>)
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060aa:	f7fe fdb1 	bl	8004c10 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060b0:	e013      	b.n	80060da <HAL_RCC_OscConfig+0x2ba>
 80060b2:	bf00      	nop
 80060b4:	0800e188 	.word	0x0800e188
 80060b8:	40021000 	.word	0x40021000
 80060bc:	0800e344 	.word	0x0800e344
 80060c0:	20000010 	.word	0x20000010
 80060c4:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060c8:	f7fe fda2 	bl	8004c10 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e39b      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060da:	4b97      	ldr	r3, [pc, #604]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x2a8>
 80060e6:	e000      	b.n	80060ea <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d07e      	beq.n	80061f4 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00e      	beq.n	800611c <HAL_RCC_OscConfig+0x2fc>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006106:	d009      	beq.n	800611c <HAL_RCC_OscConfig+0x2fc>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006110:	d004      	beq.n	800611c <HAL_RCC_OscConfig+0x2fc>
 8006112:	f240 2119 	movw	r1, #537	@ 0x219
 8006116:	4889      	ldr	r0, [pc, #548]	@ (800633c <HAL_RCC_OscConfig+0x51c>)
 8006118:	f7fd feb8 	bl	8003e8c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2b08      	cmp	r3, #8
 8006120:	d005      	beq.n	800612e <HAL_RCC_OscConfig+0x30e>
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b0c      	cmp	r3, #12
 8006126:	d10e      	bne.n	8006146 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b03      	cmp	r3, #3
 800612c:	d10b      	bne.n	8006146 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800612e:	4b82      	ldr	r3, [pc, #520]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d05b      	beq.n	80061f2 <HAL_RCC_OscConfig+0x3d2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d157      	bne.n	80061f2 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e365      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614e:	d106      	bne.n	800615e <HAL_RCC_OscConfig+0x33e>
 8006150:	4b79      	ldr	r3, [pc, #484]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a78      	ldr	r2, [pc, #480]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e01d      	b.n	800619a <HAL_RCC_OscConfig+0x37a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006166:	d10c      	bne.n	8006182 <HAL_RCC_OscConfig+0x362>
 8006168:	4b73      	ldr	r3, [pc, #460]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a72      	ldr	r2, [pc, #456]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 800616e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4b70      	ldr	r3, [pc, #448]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a6f      	ldr	r2, [pc, #444]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 800617a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	e00b      	b.n	800619a <HAL_RCC_OscConfig+0x37a>
 8006182:	4b6d      	ldr	r3, [pc, #436]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6c      	ldr	r2, [pc, #432]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	4b6a      	ldr	r3, [pc, #424]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a69      	ldr	r2, [pc, #420]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006194:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006198:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d013      	beq.n	80061ca <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a2:	f7fe fd35 	bl	8004c10 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061aa:	f7fe fd31 	bl	8004c10 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b64      	cmp	r3, #100	@ 0x64
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e32a      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f0      	beq.n	80061aa <HAL_RCC_OscConfig+0x38a>
 80061c8:	e014      	b.n	80061f4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ca:	f7fe fd21 	bl	8004c10 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061d2:	f7fe fd1d 	bl	8004c10 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b64      	cmp	r3, #100	@ 0x64
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e316      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061e4:	4b54      	ldr	r3, [pc, #336]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1f0      	bne.n	80061d2 <HAL_RCC_OscConfig+0x3b2>
 80061f0:	e000      	b.n	80061f4 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d077      	beq.n	80062f0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d009      	beq.n	800621c <HAL_RCC_OscConfig+0x3fc>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006210:	d004      	beq.n	800621c <HAL_RCC_OscConfig+0x3fc>
 8006212:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006216:	4849      	ldr	r0, [pc, #292]	@ (800633c <HAL_RCC_OscConfig+0x51c>)
 8006218:	f7fd fe38 	bl	8003e8c <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	2b1f      	cmp	r3, #31
 8006222:	d904      	bls.n	800622e <HAL_RCC_OscConfig+0x40e>
 8006224:	f240 214d 	movw	r1, #589	@ 0x24d
 8006228:	4844      	ldr	r0, [pc, #272]	@ (800633c <HAL_RCC_OscConfig+0x51c>)
 800622a:	f7fd fe2f 	bl	8003e8c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2b04      	cmp	r3, #4
 8006232:	d005      	beq.n	8006240 <HAL_RCC_OscConfig+0x420>
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2b0c      	cmp	r3, #12
 8006238:	d119      	bne.n	800626e <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d116      	bne.n	800626e <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006240:	4b3d      	ldr	r3, [pc, #244]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_OscConfig+0x438>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e2dc      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006258:	4b37      	ldr	r3, [pc, #220]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	061b      	lsls	r3, r3, #24
 8006266:	4934      	ldr	r1, [pc, #208]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006268:	4313      	orrs	r3, r2
 800626a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800626c:	e040      	b.n	80062f0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d023      	beq.n	80062be <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006276:	4b30      	ldr	r3, [pc, #192]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2f      	ldr	r2, [pc, #188]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 800627c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006282:	f7fe fcc5 	bl	8004c10 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800628a:	f7fe fcc1 	bl	8004c10 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e2ba      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800629c:	4b26      	ldr	r3, [pc, #152]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a8:	4b23      	ldr	r3, [pc, #140]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	061b      	lsls	r3, r3, #24
 80062b6:	4920      	ldr	r1, [pc, #128]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	604b      	str	r3, [r1, #4]
 80062bc:	e018      	b.n	80062f0 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062be:	4b1e      	ldr	r3, [pc, #120]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 80062c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ca:	f7fe fca1 	bl	8004c10 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062d0:	e008      	b.n	80062e4 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062d2:	f7fe fc9d 	bl	8004c10 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e296      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062e4:	4b14      	ldr	r3, [pc, #80]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f0      	bne.n	80062d2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d04e      	beq.n	800639a <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_RCC_OscConfig+0x4f6>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d004      	beq.n	8006316 <HAL_RCC_OscConfig+0x4f6>
 800630c:	f240 218d 	movw	r1, #653	@ 0x28d
 8006310:	480a      	ldr	r0, [pc, #40]	@ (800633c <HAL_RCC_OscConfig+0x51c>)
 8006312:	f7fd fdbb 	bl	8003e8c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d021      	beq.n	8006362 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800631e:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006324:	4a04      	ldr	r2, [pc, #16]	@ (8006338 <HAL_RCC_OscConfig+0x518>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632e:	f7fe fc6f 	bl	8004c10 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006334:	e00d      	b.n	8006352 <HAL_RCC_OscConfig+0x532>
 8006336:	bf00      	nop
 8006338:	40021000 	.word	0x40021000
 800633c:	0800e188 	.word	0x0800e188
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006340:	f7fe fc66 	bl	8004c10 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e25f      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006352:	4b66      	ldr	r3, [pc, #408]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 8006354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0ef      	beq.n	8006340 <HAL_RCC_OscConfig+0x520>
 8006360:	e01b      	b.n	800639a <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006362:	4b62      	ldr	r3, [pc, #392]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 8006364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006368:	4a60      	ldr	r2, [pc, #384]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 800636a:	f023 0301 	bic.w	r3, r3, #1
 800636e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006372:	f7fe fc4d 	bl	8004c10 <HAL_GetTick>
 8006376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006378:	e008      	b.n	800638c <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800637a:	f7fe fc49 	bl	8004c10 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e242      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800638c:	4b57      	ldr	r3, [pc, #348]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 800638e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1ef      	bne.n	800637a <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 80b8 	beq.w	8006518 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a8:	2300      	movs	r3, #0
 80063aa:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <HAL_RCC_OscConfig+0x5ae>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d008      	beq.n	80063ce <HAL_RCC_OscConfig+0x5ae>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2b05      	cmp	r3, #5
 80063c2:	d004      	beq.n	80063ce <HAL_RCC_OscConfig+0x5ae>
 80063c4:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80063c8:	4849      	ldr	r0, [pc, #292]	@ (80064f0 <HAL_RCC_OscConfig+0x6d0>)
 80063ca:	f7fd fd5f 	bl	8003e8c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80063ce:	4b47      	ldr	r3, [pc, #284]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 80063d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10d      	bne.n	80063f6 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063da:	4b44      	ldr	r3, [pc, #272]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 80063dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063de:	4a43      	ldr	r2, [pc, #268]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 80063e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80063e6:	4b41      	ldr	r3, [pc, #260]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ee:	60bb      	str	r3, [r7, #8]
 80063f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063f2:	2301      	movs	r3, #1
 80063f4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063f6:	4b3f      	ldr	r3, [pc, #252]	@ (80064f4 <HAL_RCC_OscConfig+0x6d4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d118      	bne.n	8006434 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006402:	4b3c      	ldr	r3, [pc, #240]	@ (80064f4 <HAL_RCC_OscConfig+0x6d4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3b      	ldr	r2, [pc, #236]	@ (80064f4 <HAL_RCC_OscConfig+0x6d4>)
 8006408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800640c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800640e:	f7fe fbff 	bl	8004c10 <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006416:	f7fe fbfb 	bl	8004c10 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e1f4      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006428:	4b32      	ldr	r3, [pc, #200]	@ (80064f4 <HAL_RCC_OscConfig+0x6d4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0f0      	beq.n	8006416 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d108      	bne.n	800644e <HAL_RCC_OscConfig+0x62e>
 800643c:	4b2b      	ldr	r3, [pc, #172]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006442:	4a2a      	ldr	r2, [pc, #168]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800644c:	e024      	b.n	8006498 <HAL_RCC_OscConfig+0x678>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d110      	bne.n	8006478 <HAL_RCC_OscConfig+0x658>
 8006456:	4b25      	ldr	r3, [pc, #148]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	4a23      	ldr	r2, [pc, #140]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 800645e:	f043 0304 	orr.w	r3, r3, #4
 8006462:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006466:	4b21      	ldr	r3, [pc, #132]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 8006468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646c:	4a1f      	ldr	r2, [pc, #124]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006476:	e00f      	b.n	8006498 <HAL_RCC_OscConfig+0x678>
 8006478:	4b1c      	ldr	r3, [pc, #112]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647e:	4a1b      	ldr	r2, [pc, #108]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006488:	4b18      	ldr	r3, [pc, #96]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648e:	4a17      	ldr	r2, [pc, #92]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 8006490:	f023 0304 	bic.w	r3, r3, #4
 8006494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d016      	beq.n	80064ce <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a0:	f7fe fbb6 	bl	8004c10 <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064a6:	e00a      	b.n	80064be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a8:	f7fe fbb2 	bl	8004c10 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e1a9      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064be:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0ed      	beq.n	80064a8 <HAL_RCC_OscConfig+0x688>
 80064cc:	e01b      	b.n	8006506 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ce:	f7fe fb9f 	bl	8004c10 <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064d4:	e010      	b.n	80064f8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d6:	f7fe fb9b 	bl	8004c10 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d907      	bls.n	80064f8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e192      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
 80064ec:	40021000 	.word	0x40021000
 80064f0:	0800e188 	.word	0x0800e188
 80064f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064f8:	4b98      	ldr	r3, [pc, #608]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e7      	bne.n	80064d6 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006506:	7ffb      	ldrb	r3, [r7, #31]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d105      	bne.n	8006518 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800650c:	4b93      	ldr	r3, [pc, #588]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 800650e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006510:	4a92      	ldr	r2, [pc, #584]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 8006512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006516:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00c      	beq.n	800653a <HAL_RCC_OscConfig+0x71a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	2b01      	cmp	r3, #1
 8006526:	d008      	beq.n	800653a <HAL_RCC_OscConfig+0x71a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652c:	2b02      	cmp	r3, #2
 800652e:	d004      	beq.n	800653a <HAL_RCC_OscConfig+0x71a>
 8006530:	f240 316e 	movw	r1, #878	@ 0x36e
 8006534:	488a      	ldr	r0, [pc, #552]	@ (8006760 <HAL_RCC_OscConfig+0x940>)
 8006536:	f7fd fca9 	bl	8003e8c <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 8166 	beq.w	8006810 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	2b02      	cmp	r3, #2
 800654a:	f040 813c 	bne.w	80067c6 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <HAL_RCC_OscConfig+0x758>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d00c      	beq.n	8006578 <HAL_RCC_OscConfig+0x758>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	2b02      	cmp	r3, #2
 8006564:	d008      	beq.n	8006578 <HAL_RCC_OscConfig+0x758>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656a:	2b03      	cmp	r3, #3
 800656c:	d004      	beq.n	8006578 <HAL_RCC_OscConfig+0x758>
 800656e:	f240 3176 	movw	r1, #886	@ 0x376
 8006572:	487b      	ldr	r0, [pc, #492]	@ (8006760 <HAL_RCC_OscConfig+0x940>)
 8006574:	f7fd fc8a 	bl	8003e8c <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <HAL_RCC_OscConfig+0x768>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	2b08      	cmp	r3, #8
 8006586:	d904      	bls.n	8006592 <HAL_RCC_OscConfig+0x772>
 8006588:	f240 3177 	movw	r1, #887	@ 0x377
 800658c:	4874      	ldr	r0, [pc, #464]	@ (8006760 <HAL_RCC_OscConfig+0x940>)
 800658e:	f7fd fc7d 	bl	8003e8c <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006596:	2b07      	cmp	r3, #7
 8006598:	d903      	bls.n	80065a2 <HAL_RCC_OscConfig+0x782>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659e:	2b56      	cmp	r3, #86	@ 0x56
 80065a0:	d904      	bls.n	80065ac <HAL_RCC_OscConfig+0x78c>
 80065a2:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80065a6:	486e      	ldr	r0, [pc, #440]	@ (8006760 <HAL_RCC_OscConfig+0x940>)
 80065a8:	f7fd fc70 	bl	8003e8c <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	2b07      	cmp	r3, #7
 80065b2:	d008      	beq.n	80065c6 <HAL_RCC_OscConfig+0x7a6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	2b11      	cmp	r3, #17
 80065ba:	d004      	beq.n	80065c6 <HAL_RCC_OscConfig+0x7a6>
 80065bc:	f240 317a 	movw	r1, #890	@ 0x37a
 80065c0:	4867      	ldr	r0, [pc, #412]	@ (8006760 <HAL_RCC_OscConfig+0x940>)
 80065c2:	f7fd fc63 	bl	8003e8c <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d010      	beq.n	80065f0 <HAL_RCC_OscConfig+0x7d0>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d00c      	beq.n	80065f0 <HAL_RCC_OscConfig+0x7d0>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065da:	2b06      	cmp	r3, #6
 80065dc:	d008      	beq.n	80065f0 <HAL_RCC_OscConfig+0x7d0>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d004      	beq.n	80065f0 <HAL_RCC_OscConfig+0x7d0>
 80065e6:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 80065ea:	485d      	ldr	r0, [pc, #372]	@ (8006760 <HAL_RCC_OscConfig+0x940>)
 80065ec:	f7fd fc4e 	bl	8003e8c <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d010      	beq.n	800661a <HAL_RCC_OscConfig+0x7fa>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d00c      	beq.n	800661a <HAL_RCC_OscConfig+0x7fa>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006604:	2b06      	cmp	r3, #6
 8006606:	d008      	beq.n	800661a <HAL_RCC_OscConfig+0x7fa>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660c:	2b08      	cmp	r3, #8
 800660e:	d004      	beq.n	800661a <HAL_RCC_OscConfig+0x7fa>
 8006610:	f240 317d 	movw	r1, #893	@ 0x37d
 8006614:	4852      	ldr	r0, [pc, #328]	@ (8006760 <HAL_RCC_OscConfig+0x940>)
 8006616:	f7fd fc39 	bl	8003e8c <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800661a:	4b50      	ldr	r3, [pc, #320]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f003 0203 	and.w	r2, r3, #3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662a:	429a      	cmp	r2, r3
 800662c:	d130      	bne.n	8006690 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006638:	3b01      	subs	r3, #1
 800663a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d127      	bne.n	8006690 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800664c:	429a      	cmp	r2, r3
 800664e:	d11f      	bne.n	8006690 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800665a:	2a07      	cmp	r2, #7
 800665c:	bf14      	ite	ne
 800665e:	2201      	movne	r2, #1
 8006660:	2200      	moveq	r2, #0
 8006662:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006664:	4293      	cmp	r3, r2
 8006666:	d113      	bne.n	8006690 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	3b01      	subs	r3, #1
 8006676:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d109      	bne.n	8006690 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	3b01      	subs	r3, #1
 800668a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d074      	beq.n	800677a <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b0c      	cmp	r3, #12
 8006694:	d06f      	beq.n	8006776 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006696:	4b31      	ldr	r3, [pc, #196]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d105      	bne.n	80066ae <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80066a2:	4b2e      	ldr	r3, [pc, #184]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e0af      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80066b2:	4b2a      	ldr	r3, [pc, #168]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a29      	ldr	r2, [pc, #164]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 80066b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066be:	f7fe faa7 	bl	8004c10 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c6:	f7fe faa3 	bl	8004c10 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e09c      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066d8:	4b20      	ldr	r3, [pc, #128]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f0      	bne.n	80066c6 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066e4:	4b1d      	ldr	r3, [pc, #116]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006764 <HAL_RCC_OscConfig+0x944>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066f4:	3a01      	subs	r2, #1
 80066f6:	0112      	lsls	r2, r2, #4
 80066f8:	4311      	orrs	r1, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066fe:	0212      	lsls	r2, r2, #8
 8006700:	4311      	orrs	r1, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006706:	0852      	lsrs	r2, r2, #1
 8006708:	3a01      	subs	r2, #1
 800670a:	0552      	lsls	r2, r2, #21
 800670c:	4311      	orrs	r1, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006712:	0852      	lsrs	r2, r2, #1
 8006714:	3a01      	subs	r2, #1
 8006716:	0652      	lsls	r2, r2, #25
 8006718:	4311      	orrs	r1, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800671e:	0912      	lsrs	r2, r2, #4
 8006720:	0452      	lsls	r2, r2, #17
 8006722:	430a      	orrs	r2, r1
 8006724:	490d      	ldr	r1, [pc, #52]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 8006726:	4313      	orrs	r3, r2
 8006728:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800672a:	4b0c      	ldr	r3, [pc, #48]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a0b      	ldr	r2, [pc, #44]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 8006730:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006734:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006736:	4b09      	ldr	r3, [pc, #36]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	4a08      	ldr	r2, [pc, #32]	@ (800675c <HAL_RCC_OscConfig+0x93c>)
 800673c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006740:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006742:	f7fe fa65 	bl	8004c10 <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006748:	e00e      	b.n	8006768 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800674a:	f7fe fa61 	bl	8004c10 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d907      	bls.n	8006768 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e05a      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
 800675c:	40021000 	.word	0x40021000
 8006760:	0800e188 	.word	0x0800e188
 8006764:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006768:	4b2c      	ldr	r3, [pc, #176]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0ea      	beq.n	800674a <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006774:	e04c      	b.n	8006810 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e04b      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800677a:	4b28      	ldr	r3, [pc, #160]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d144      	bne.n	8006810 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006786:	4b25      	ldr	r3, [pc, #148]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a24      	ldr	r2, [pc, #144]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 800678c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006790:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006792:	4b22      	ldr	r3, [pc, #136]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	4a21      	ldr	r2, [pc, #132]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 8006798:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800679c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800679e:	f7fe fa37 	bl	8004c10 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a6:	f7fe fa33 	bl	8004c10 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e02c      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b8:	4b18      	ldr	r3, [pc, #96]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x986>
 80067c4:	e024      	b.n	8006810 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2b0c      	cmp	r3, #12
 80067ca:	d01f      	beq.n	800680c <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067cc:	4b13      	ldr	r3, [pc, #76]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a12      	ldr	r2, [pc, #72]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 80067d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d8:	f7fe fa1a 	bl	8004c10 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fe fa16 	bl	8004c10 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e00f      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067f2:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80067fe:	4b07      	ldr	r3, [pc, #28]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	4906      	ldr	r1, [pc, #24]	@ (800681c <HAL_RCC_OscConfig+0x9fc>)
 8006804:	4b06      	ldr	r3, [pc, #24]	@ (8006820 <HAL_RCC_OscConfig+0xa00>)
 8006806:	4013      	ands	r3, r2
 8006808:	60cb      	str	r3, [r1, #12]
 800680a:	e001      	b.n	8006810 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40021000 	.word	0x40021000
 8006820:	feeefffc 	.word	0xfeeefffc

08006824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e186      	b.n	8006b46 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_RCC_ClockConfig+0x24>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b0f      	cmp	r3, #15
 8006846:	d904      	bls.n	8006852 <HAL_RCC_ClockConfig+0x2e>
 8006848:	f240 4159 	movw	r1, #1113	@ 0x459
 800684c:	4882      	ldr	r0, [pc, #520]	@ (8006a58 <HAL_RCC_ClockConfig+0x234>)
 800684e:	f7fd fb1d 	bl	8003e8c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <HAL_RCC_ClockConfig+0x56>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d00d      	beq.n	800687a <HAL_RCC_ClockConfig+0x56>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d00a      	beq.n	800687a <HAL_RCC_ClockConfig+0x56>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b03      	cmp	r3, #3
 8006868:	d007      	beq.n	800687a <HAL_RCC_ClockConfig+0x56>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b04      	cmp	r3, #4
 800686e:	d004      	beq.n	800687a <HAL_RCC_ClockConfig+0x56>
 8006870:	f240 415a 	movw	r1, #1114	@ 0x45a
 8006874:	4878      	ldr	r0, [pc, #480]	@ (8006a58 <HAL_RCC_ClockConfig+0x234>)
 8006876:	f7fd fb09 	bl	8003e8c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800687a:	4b78      	ldr	r3, [pc, #480]	@ (8006a5c <HAL_RCC_ClockConfig+0x238>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d910      	bls.n	80068aa <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006888:	4b74      	ldr	r3, [pc, #464]	@ (8006a5c <HAL_RCC_ClockConfig+0x238>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f023 0207 	bic.w	r2, r3, #7
 8006890:	4972      	ldr	r1, [pc, #456]	@ (8006a5c <HAL_RCC_ClockConfig+0x238>)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	4313      	orrs	r3, r2
 8006896:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006898:	4b70      	ldr	r3, [pc, #448]	@ (8006a5c <HAL_RCC_ClockConfig+0x238>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d001      	beq.n	80068aa <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e14d      	b.n	8006b46 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d039      	beq.n	800692a <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d024      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b80      	cmp	r3, #128	@ 0x80
 80068c4:	d020      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b90      	cmp	r3, #144	@ 0x90
 80068cc:	d01c      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80068d4:	d018      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2bb0      	cmp	r3, #176	@ 0xb0
 80068dc:	d014      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80068e4:	d010      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2bd0      	cmp	r3, #208	@ 0xd0
 80068ec:	d00c      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2be0      	cmp	r3, #224	@ 0xe0
 80068f4:	d008      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80068fc:	d004      	beq.n	8006908 <HAL_RCC_ClockConfig+0xe4>
 80068fe:	f240 4172 	movw	r1, #1138	@ 0x472
 8006902:	4855      	ldr	r0, [pc, #340]	@ (8006a58 <HAL_RCC_ClockConfig+0x234>)
 8006904:	f7fd fac2 	bl	8003e8c <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	4b54      	ldr	r3, [pc, #336]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006914:	429a      	cmp	r2, r3
 8006916:	d908      	bls.n	800692a <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006918:	4b51      	ldr	r3, [pc, #324]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	494e      	ldr	r1, [pc, #312]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 8006926:	4313      	orrs	r3, r2
 8006928:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d061      	beq.n	80069fa <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d010      	beq.n	8006960 <HAL_RCC_ClockConfig+0x13c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d00c      	beq.n	8006960 <HAL_RCC_ClockConfig+0x13c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d008      	beq.n	8006960 <HAL_RCC_ClockConfig+0x13c>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b03      	cmp	r3, #3
 8006954:	d004      	beq.n	8006960 <HAL_RCC_ClockConfig+0x13c>
 8006956:	f240 417d 	movw	r1, #1149	@ 0x47d
 800695a:	483f      	ldr	r0, [pc, #252]	@ (8006a58 <HAL_RCC_ClockConfig+0x234>)
 800695c:	f7fd fa96 	bl	8003e8c <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b03      	cmp	r3, #3
 8006966:	d107      	bne.n	8006978 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006968:	4b3d      	ldr	r3, [pc, #244]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d121      	bne.n	80069b8 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e0e6      	b.n	8006b46 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d107      	bne.n	8006990 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006980:	4b37      	ldr	r3, [pc, #220]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d115      	bne.n	80069b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0da      	b.n	8006b46 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d107      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006998:	4b31      	ldr	r3, [pc, #196]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0ce      	b.n	8006b46 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0c6      	b.n	8006b46 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069b8:	4b29      	ldr	r3, [pc, #164]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f023 0203 	bic.w	r2, r3, #3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	4926      	ldr	r1, [pc, #152]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ca:	f7fe f921 	bl	8004c10 <HAL_GetTick>
 80069ce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d0:	e00a      	b.n	80069e8 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069d2:	f7fe f91d 	bl	8004c10 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e0ae      	b.n	8006b46 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 020c 	and.w	r2, r3, #12
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d1eb      	bne.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d010      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	4b15      	ldr	r3, [pc, #84]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d208      	bcs.n	8006a28 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a16:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	490f      	ldr	r1, [pc, #60]	@ (8006a60 <HAL_RCC_ClockConfig+0x23c>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a28:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <HAL_RCC_ClockConfig+0x238>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d216      	bcs.n	8006a64 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a36:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <HAL_RCC_ClockConfig+0x238>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f023 0207 	bic.w	r2, r3, #7
 8006a3e:	4907      	ldr	r1, [pc, #28]	@ (8006a5c <HAL_RCC_ClockConfig+0x238>)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a46:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <HAL_RCC_ClockConfig+0x238>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d007      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e076      	b.n	8006b46 <HAL_RCC_ClockConfig+0x322>
 8006a58:	0800e188 	.word	0x0800e188
 8006a5c:	40022000 	.word	0x40022000
 8006a60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d025      	beq.n	8006abc <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d018      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x286>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a80:	d013      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x286>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006a8a:	d00e      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x286>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006a94:	d009      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x286>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a9e:	d004      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x286>
 8006aa0:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8006aa4:	482a      	ldr	r0, [pc, #168]	@ (8006b50 <HAL_RCC_ClockConfig+0x32c>)
 8006aa6:	f7fd f9f1 	bl	8003e8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8006b54 <HAL_RCC_ClockConfig+0x330>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	4927      	ldr	r1, [pc, #156]	@ (8006b54 <HAL_RCC_ClockConfig+0x330>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d026      	beq.n	8006b16 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d018      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x2de>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad8:	d013      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x2de>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ae2:	d00e      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x2de>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006aec:	d009      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x2de>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006af6:	d004      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x2de>
 8006af8:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8006afc:	4814      	ldr	r0, [pc, #80]	@ (8006b50 <HAL_RCC_ClockConfig+0x32c>)
 8006afe:	f7fd f9c5 	bl	8003e8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b02:	4b14      	ldr	r3, [pc, #80]	@ (8006b54 <HAL_RCC_ClockConfig+0x330>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4910      	ldr	r1, [pc, #64]	@ (8006b54 <HAL_RCC_ClockConfig+0x330>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b16:	f000 f825 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <HAL_RCC_ClockConfig+0x330>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	490c      	ldr	r1, [pc, #48]	@ (8006b58 <HAL_RCC_ClockConfig+0x334>)
 8006b28:	5ccb      	ldrb	r3, [r1, r3]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b32:	4a0a      	ldr	r2, [pc, #40]	@ (8006b5c <HAL_RCC_ClockConfig+0x338>)
 8006b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b36:	4b0a      	ldr	r3, [pc, #40]	@ (8006b60 <HAL_RCC_ClockConfig+0x33c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe f818 	bl	8004b70 <HAL_InitTick>
 8006b40:	4603      	mov	r3, r0
 8006b42:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b44:	7afb      	ldrb	r3, [r7, #11]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	0800e188 	.word	0x0800e188
 8006b54:	40021000 	.word	0x40021000
 8006b58:	0800e344 	.word	0x0800e344
 8006b5c:	20000010 	.word	0x20000010
 8006b60:	20000014 	.word	0x20000014

08006b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b089      	sub	sp, #36	@ 0x24
 8006b68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b72:	4b3e      	ldr	r3, [pc, #248]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_RCC_GetSysClockFreq+0x34>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b0c      	cmp	r3, #12
 8006b90:	d121      	bne.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d11e      	bne.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b98:	4b34      	ldr	r3, [pc, #208]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ba4:	4b31      	ldr	r3, [pc, #196]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e005      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10d      	bne.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d102      	bne.n	8006be2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bdc:	4b25      	ldr	r3, [pc, #148]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x110>)
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	e004      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d101      	bne.n	8006bec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006be8:	4b23      	ldr	r3, [pc, #140]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0x114>)
 8006bea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b0c      	cmp	r3, #12
 8006bf0:	d134      	bne.n	8006c5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d003      	beq.n	8006c0a <HAL_RCC_GetSysClockFreq+0xa6>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d003      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0xac>
 8006c08:	e005      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c0c:	617b      	str	r3, [r7, #20]
      break;
 8006c0e:	e005      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c10:	4b19      	ldr	r3, [pc, #100]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0x114>)
 8006c12:	617b      	str	r3, [r7, #20]
      break;
 8006c14:	e002      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	617b      	str	r3, [r7, #20]
      break;
 8006c1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c1c:	4b13      	ldr	r3, [pc, #76]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	091b      	lsrs	r3, r3, #4
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	3301      	adds	r3, #1
 8006c28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c2a:	4b10      	ldr	r3, [pc, #64]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	0a1b      	lsrs	r3, r3, #8
 8006c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	fb03 f202 	mul.w	r2, r3, r2
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c42:	4b0a      	ldr	r3, [pc, #40]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x108>)
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	0e5b      	lsrs	r3, r3, #25
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3724      	adds	r7, #36	@ 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	0800e35c 	.word	0x0800e35c
 8006c74:	00f42400 	.word	0x00f42400
 8006c78:	007a1200 	.word	0x007a1200

08006c7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c80:	4b03      	ldr	r3, [pc, #12]	@ (8006c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c82:	681b      	ldr	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000010 	.word	0x20000010

08006c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c98:	f7ff fff0 	bl	8006c7c <HAL_RCC_GetHCLKFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4904      	ldr	r1, [pc, #16]	@ (8006cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	0800e354 	.word	0x0800e354

08006cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006cc4:	f7ff ffda 	bl	8006c7c <HAL_RCC_GetHCLKFreq>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	0adb      	lsrs	r3, r3, #11
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	4904      	ldr	r1, [pc, #16]	@ (8006ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cd6:	5ccb      	ldrb	r3, [r1, r3]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	0800e354 	.word	0x0800e354

08006cec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d04:	f7ff f81c 	bl	8005d40 <HAL_PWREx_GetVoltageRange>
 8006d08:	6178      	str	r0, [r7, #20]
 8006d0a:	e014      	b.n	8006d36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d0c:	4b25      	ldr	r3, [pc, #148]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d10:	4a24      	ldr	r2, [pc, #144]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d18:	4b22      	ldr	r3, [pc, #136]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d24:	f7ff f80c 	bl	8005d40 <HAL_PWREx_GetVoltageRange>
 8006d28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006da4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d3c:	d10b      	bne.n	8006d56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b80      	cmp	r3, #128	@ 0x80
 8006d42:	d919      	bls.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2ba0      	cmp	r3, #160	@ 0xa0
 8006d48:	d902      	bls.n	8006d50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	e013      	b.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d50:	2301      	movs	r3, #1
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	e010      	b.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b80      	cmp	r3, #128	@ 0x80
 8006d5a:	d902      	bls.n	8006d62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	613b      	str	r3, [r7, #16]
 8006d60:	e00a      	b.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b80      	cmp	r3, #128	@ 0x80
 8006d66:	d102      	bne.n	8006d6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006d68:	2302      	movs	r3, #2
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	e004      	b.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b70      	cmp	r3, #112	@ 0x70
 8006d72:	d101      	bne.n	8006d78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006d74:	2301      	movs	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006d78:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f023 0207 	bic.w	r2, r3, #7
 8006d80:	4909      	ldr	r1, [pc, #36]	@ (8006da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d88:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d001      	beq.n	8006d9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40021000 	.word	0x40021000
 8006da8:	40022000 	.word	0x40022000

08006dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006db4:	2300      	movs	r3, #0
 8006db6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006db8:	2300      	movs	r3, #0
 8006dba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd0:	d303      	bcc.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8006dd2:	21c9      	movs	r1, #201	@ 0xc9
 8006dd4:	4889      	ldr	r0, [pc, #548]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006dd6:	f7fd f859 	bl	8003e8c <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d058      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d012      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006df2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006df6:	d00d      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e00:	d008      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e0a:	d003      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006e0c:	21d1      	movs	r1, #209	@ 0xd1
 8006e0e:	487b      	ldr	r0, [pc, #492]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006e10:	f7fd f83c 	bl	8003e8c <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e18:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e1c:	d02a      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8006e1e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e22:	d824      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8006e24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e28:	d008      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e2e:	d81e      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006e34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e38:	d010      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8006e3a:	e018      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e3c:	4b70      	ldr	r3, [pc, #448]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	4a6f      	ldr	r2, [pc, #444]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e48:	e015      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fc69 	bl	8007728 <RCCEx_PLLSAI1_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e5a:	e00c      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3320      	adds	r3, #32
 8006e60:	2100      	movs	r1, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fde0 	bl	8007a28 <RCCEx_PLLSAI2_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e6c:	e003      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	74fb      	strb	r3, [r7, #19]
      break;
 8006e72:	e000      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8006e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e76:	7cfb      	ldrb	r3, [r7, #19]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e7c:	4b60      	ldr	r3, [pc, #384]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e8a:	495d      	ldr	r1, [pc, #372]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006e92:	e001      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	7cfb      	ldrb	r3, [r7, #19]
 8006e96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d059      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d013      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006eb4:	d00e      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ebe:	d009      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ec4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ec8:	d004      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006eca:	f240 110f 	movw	r1, #271	@ 0x10f
 8006ece:	484b      	ldr	r0, [pc, #300]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006ed0:	f7fc ffdc 	bl	8003e8c <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ed8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006edc:	d02a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006ede:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ee2:	d824      	bhi.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006ee4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ee8:	d008      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x150>
 8006eea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006eee:	d81e      	bhi.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ef8:	d010      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x170>
 8006efa:	e018      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006efc:	4b40      	ldr	r3, [pc, #256]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4a3f      	ldr	r2, [pc, #252]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f08:	e015      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fc09 	bl	8007728 <RCCEx_PLLSAI1_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f1a:	e00c      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3320      	adds	r3, #32
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fd80 	bl	8007a28 <RCCEx_PLLSAI2_Config>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f2c:	e003      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	74fb      	strb	r3, [r7, #19]
      break;
 8006f32:	e000      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8006f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f36:	7cfb      	ldrb	r3, [r7, #19]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10b      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f3c:	4b30      	ldr	r3, [pc, #192]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f4a:	492d      	ldr	r1, [pc, #180]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006f52:	e001      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f54:	7cfb      	ldrb	r3, [r7, #19]
 8006f56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80c2 	beq.w	80070ea <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f66:	2300      	movs	r3, #0
 8006f68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d016      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f7e:	d010      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f8a:	d00a      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f96:	d004      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006f98:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8006f9c:	4817      	ldr	r0, [pc, #92]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006f9e:	f7fc ff75 	bl	8003e8c <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fa2:	4b17      	ldr	r3, [pc, #92]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00d      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fb8:	4b11      	ldr	r3, [pc, #68]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbc:	4a10      	ldr	r2, [pc, #64]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fe0:	f7fd fe16 	bl	8004c10 <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fe6:	e00f      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fe8:	f7fd fe12 	bl	8004c10 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d908      	bls.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8006ffa:	e00b      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8006ffc:	0800e1c0 	.word	0x0800e1c0
 8007000:	40021000 	.word	0x40021000
 8007004:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007008:	4b30      	ldr	r3, [pc, #192]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0e9      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d15c      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800701a:	4b2d      	ldr	r3, [pc, #180]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007020:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007024:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01f      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	429a      	cmp	r2, r3
 8007036:	d019      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007038:	4b25      	ldr	r3, [pc, #148]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007042:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007044:	4b22      	ldr	r3, [pc, #136]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704a:	4a21      	ldr	r2, [pc, #132]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800704c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007054:	4b1e      	ldr	r3, [pc, #120]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800705a:	4a1d      	ldr	r2, [pc, #116]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800705c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007064:	4a1a      	ldr	r2, [pc, #104]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d016      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007076:	f7fd fdcb 	bl	8004c10 <HAL_GetTick>
 800707a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800707c:	e00b      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7fd fdc7 	bl	8004c10 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d902      	bls.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	74fb      	strb	r3, [r7, #19]
            break;
 8007094:	e006      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007096:	4b0e      	ldr	r3, [pc, #56]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0ec      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 80070a4:	7cfb      	ldrb	r3, [r7, #19]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070aa:	4b09      	ldr	r3, [pc, #36]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80070ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ba:	4905      	ldr	r1, [pc, #20]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80070c2:	e009      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070c4:	7cfb      	ldrb	r3, [r7, #19]
 80070c6:	74bb      	strb	r3, [r7, #18]
 80070c8:	e006      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80070ca:	bf00      	nop
 80070cc:	40007000 	.word	0x40007000
 80070d0:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d4:	7cfb      	ldrb	r3, [r7, #19]
 80070d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070d8:	7c7b      	ldrb	r3, [r7, #17]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d105      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070de:	4b8d      	ldr	r3, [pc, #564]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80070e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e2:	4a8c      	ldr	r2, [pc, #560]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80070e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01f      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d010      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007102:	2b01      	cmp	r3, #1
 8007104:	d00c      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	2b03      	cmp	r3, #3
 800710c:	d008      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007112:	2b02      	cmp	r3, #2
 8007114:	d004      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007116:	f240 1199 	movw	r1, #409	@ 0x199
 800711a:	487f      	ldr	r0, [pc, #508]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800711c:	f7fc feb6 	bl	8003e8c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007120:	4b7c      	ldr	r3, [pc, #496]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007126:	f023 0203 	bic.w	r2, r3, #3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	4979      	ldr	r1, [pc, #484]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d01f      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d010      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714e:	2b04      	cmp	r3, #4
 8007150:	d00c      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007156:	2b0c      	cmp	r3, #12
 8007158:	d008      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715e:	2b08      	cmp	r3, #8
 8007160:	d004      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007162:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8007166:	486c      	ldr	r0, [pc, #432]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007168:	f7fc fe90 	bl	8003e8c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800716c:	4b69      	ldr	r3, [pc, #420]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007172:	f023 020c 	bic.w	r2, r3, #12
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717a:	4966      	ldr	r1, [pc, #408]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01f      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007192:	2b00      	cmp	r3, #0
 8007194:	d010      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719a:	2b10      	cmp	r3, #16
 800719c:	d00c      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a2:	2b30      	cmp	r3, #48	@ 0x30
 80071a4:	d008      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d004      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80071ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80071b2:	4859      	ldr	r0, [pc, #356]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80071b4:	f7fc fe6a 	bl	8003e8c <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071b8:	4b56      	ldr	r3, [pc, #344]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	4953      	ldr	r1, [pc, #332]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d01f      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d010      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e6:	2b40      	cmp	r3, #64	@ 0x40
 80071e8:	d00c      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80071f0:	d008      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f6:	2b80      	cmp	r3, #128	@ 0x80
 80071f8:	d004      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80071fa:	f240 11bd 	movw	r1, #445	@ 0x1bd
 80071fe:	4846      	ldr	r0, [pc, #280]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007200:	f7fc fe44 	bl	8003e8c <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007204:	4b43      	ldr	r3, [pc, #268]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007212:	4940      	ldr	r1, [pc, #256]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b00      	cmp	r3, #0
 8007224:	d022      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800722a:	2b00      	cmp	r3, #0
 800722c:	d013      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007236:	d00e      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800723c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007240:	d009      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800724a:	d004      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800724c:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8007250:	4831      	ldr	r0, [pc, #196]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007252:	f7fc fe1b 	bl	8003e8c <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007256:	4b2f      	ldr	r3, [pc, #188]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007264:	492b      	ldr	r1, [pc, #172]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	d022      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d013      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007288:	d00e      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007292:	d009      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800729c:	d004      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800729e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80072a2:	481d      	ldr	r0, [pc, #116]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80072a4:	f7fc fdf2 	bl	8003e8c <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072b6:	4917      	ldr	r1, [pc, #92]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d028      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d013      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072da:	d00e      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80072e4:	d009      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80072ee:	d004      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80072f0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80072f4:	4808      	ldr	r0, [pc, #32]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80072f6:	f7fc fdc9 	bl	8003e8c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072fa:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80072fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007300:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007308:	4902      	ldr	r1, [pc, #8]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007310:	e004      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007312:	bf00      	nop
 8007314:	40021000 	.word	0x40021000
 8007318:	0800e1c0 	.word	0x0800e1c0
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007324:	2b00      	cmp	r3, #0
 8007326:	d022      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800732c:	2b00      	cmp	r3, #0
 800732e:	d013      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007338:	d00e      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800733e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007342:	d009      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007348:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800734c:	d004      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800734e:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8007352:	489e      	ldr	r0, [pc, #632]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007354:	f7fc fd9a 	bl	8003e8c <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007358:	4b9d      	ldr	r3, [pc, #628]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800735a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800735e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007366:	499a      	ldr	r1, [pc, #616]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007368:	4313      	orrs	r3, r2
 800736a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01d      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00e      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800738a:	d009      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007394:	d004      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8007396:	f240 11ef 	movw	r1, #495	@ 0x1ef
 800739a:	488c      	ldr	r0, [pc, #560]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800739c:	f7fc fd76 	bl	8003e8c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073a0:	4b8b      	ldr	r3, [pc, #556]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ae:	4988      	ldr	r1, [pc, #544]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01d      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00e      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073d2:	d009      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073dc:	d004      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80073de:	f240 11fb 	movw	r1, #507	@ 0x1fb
 80073e2:	487a      	ldr	r0, [pc, #488]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80073e4:	f7fc fd52 	bl	8003e8c <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073e8:	4b79      	ldr	r3, [pc, #484]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80073ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	4976      	ldr	r1, [pc, #472]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01d      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800741a:	d009      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007424:	d004      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007426:	f240 2107 	movw	r1, #519	@ 0x207
 800742a:	4868      	ldr	r0, [pc, #416]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800742c:	f7fc fd2e 	bl	8003e8c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007430:	4b67      	ldr	r3, [pc, #412]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007436:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743e:	4964      	ldr	r1, [pc, #400]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d040      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d013      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800745e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007462:	d00e      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800746c:	d009      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007472:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007476:	d004      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007478:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800747c:	4853      	ldr	r0, [pc, #332]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800747e:	f7fc fd05 	bl	8003e8c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007482:	4b53      	ldr	r3, [pc, #332]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007488:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007490:	494f      	ldr	r1, [pc, #316]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074a0:	d106      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074a2:	4b4b      	ldr	r3, [pc, #300]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	4a4a      	ldr	r2, [pc, #296]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80074a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ac:	60d3      	str	r3, [r2, #12]
 80074ae:	e011      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074b8:	d10c      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3304      	adds	r3, #4
 80074be:	2101      	movs	r1, #1
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 f931 	bl	8007728 <RCCEx_PLLSAI1_Config>
 80074c6:	4603      	mov	r3, r0
 80074c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80074ca:	7cfb      	ldrb	r3, [r7, #19]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 80074d0:	7cfb      	ldrb	r3, [r7, #19]
 80074d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d040      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d013      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074f0:	d00e      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074fa:	d009      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007500:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007504:	d004      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8007506:	f240 2141 	movw	r1, #577	@ 0x241
 800750a:	4830      	ldr	r0, [pc, #192]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800750c:	f7fc fcbe 	bl	8003e8c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007510:	4b2f      	ldr	r3, [pc, #188]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007516:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751e:	492c      	ldr	r1, [pc, #176]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800752e:	d106      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007530:	4b27      	ldr	r3, [pc, #156]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	4a26      	ldr	r2, [pc, #152]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800753a:	60d3      	str	r3, [r2, #12]
 800753c:	e011      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007542:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007546:	d10c      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	2101      	movs	r1, #1
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f8ea 	bl	8007728 <RCCEx_PLLSAI1_Config>
 8007554:	4603      	mov	r3, r0
 8007556:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007558:	7cfb      	ldrb	r3, [r7, #19]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 800755e:	7cfb      	ldrb	r3, [r7, #19]
 8007560:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d044      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007572:	2b00      	cmp	r3, #0
 8007574:	d013      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800757a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800757e:	d00e      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007588:	d009      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800758e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007592:	d004      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8007594:	f240 2166 	movw	r1, #614	@ 0x266
 8007598:	480c      	ldr	r0, [pc, #48]	@ (80075cc <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800759a:	f7fc fc77 	bl	8003e8c <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800759e:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80075a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ac:	4908      	ldr	r1, [pc, #32]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075bc:	d10a      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075be:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	4a03      	ldr	r2, [pc, #12]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80075c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075c8:	60d3      	str	r3, [r2, #12]
 80075ca:	e015      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80075cc:	0800e1c0 	.word	0x0800e1c0
 80075d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075dc:	d10c      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	2101      	movs	r1, #1
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f89f 	bl	8007728 <RCCEx_PLLSAI1_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075ee:	7cfb      	ldrb	r3, [r7, #19]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 80075f4:	7cfb      	ldrb	r3, [r7, #19]
 80075f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d047      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007614:	d00e      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800761a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761e:	d009      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007628:	d004      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800762a:	f240 2186 	movw	r1, #646	@ 0x286
 800762e:	483c      	ldr	r0, [pc, #240]	@ (8007720 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8007630:	f7fc fc2c 	bl	8003e8c <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007634:	4b3b      	ldr	r3, [pc, #236]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800763a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007642:	4938      	ldr	r1, [pc, #224]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800764e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007652:	d10d      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
 8007658:	2102      	movs	r1, #2
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f864 	bl	8007728 <RCCEx_PLLSAI1_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007664:	7cfb      	ldrb	r3, [r7, #19]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d014      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 800766a:	7cfb      	ldrb	r3, [r7, #19]
 800766c:	74bb      	strb	r3, [r7, #18]
 800766e:	e011      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007678:	d10c      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3320      	adds	r3, #32
 800767e:	2102      	movs	r1, #2
 8007680:	4618      	mov	r0, r3
 8007682:	f000 f9d1 	bl	8007a28 <RCCEx_PLLSAI2_Config>
 8007686:	4603      	mov	r3, r0
 8007688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800768a:	7cfb      	ldrb	r3, [r7, #19]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8007690:	7cfb      	ldrb	r3, [r7, #19]
 8007692:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d018      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d009      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x910>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b0:	d004      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x910>
 80076b2:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80076b6:	481a      	ldr	r0, [pc, #104]	@ (8007720 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80076b8:	f7fc fbe8 	bl	8003e8c <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076bc:	4b19      	ldr	r3, [pc, #100]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076ca:	4916      	ldr	r1, [pc, #88]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01b      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x952>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076f2:	d004      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x952>
 80076f4:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 80076f8:	4809      	ldr	r0, [pc, #36]	@ (8007720 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80076fa:	f7fc fbc7 	bl	8003e8c <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076fe:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007704:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800770e:	4905      	ldr	r1, [pc, #20]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007716:	7cbb      	ldrb	r3, [r7, #18]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	0800e1c0 	.word	0x0800e1c0
 8007724:	40021000 	.word	0x40021000

08007728 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d010      	beq.n	8007760 <RCCEx_PLLSAI1_Config+0x38>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d00c      	beq.n	8007760 <RCCEx_PLLSAI1_Config+0x38>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b02      	cmp	r3, #2
 800774c:	d008      	beq.n	8007760 <RCCEx_PLLSAI1_Config+0x38>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b03      	cmp	r3, #3
 8007754:	d004      	beq.n	8007760 <RCCEx_PLLSAI1_Config+0x38>
 8007756:	f640 3162 	movw	r1, #2914	@ 0xb62
 800775a:	4887      	ldr	r0, [pc, #540]	@ (8007978 <RCCEx_PLLSAI1_Config+0x250>)
 800775c:	f7fc fb96 	bl	8003e8c <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <RCCEx_PLLSAI1_Config+0x48>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2b08      	cmp	r3, #8
 800776e:	d904      	bls.n	800777a <RCCEx_PLLSAI1_Config+0x52>
 8007770:	f640 3163 	movw	r1, #2915	@ 0xb63
 8007774:	4880      	ldr	r0, [pc, #512]	@ (8007978 <RCCEx_PLLSAI1_Config+0x250>)
 8007776:	f7fc fb89 	bl	8003e8c <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b07      	cmp	r3, #7
 8007780:	d903      	bls.n	800778a <RCCEx_PLLSAI1_Config+0x62>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b56      	cmp	r3, #86	@ 0x56
 8007788:	d904      	bls.n	8007794 <RCCEx_PLLSAI1_Config+0x6c>
 800778a:	f640 3164 	movw	r1, #2916	@ 0xb64
 800778e:	487a      	ldr	r0, [pc, #488]	@ (8007978 <RCCEx_PLLSAI1_Config+0x250>)
 8007790:	f7fc fb7c 	bl	8003e8c <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <RCCEx_PLLSAI1_Config+0x90>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <RCCEx_PLLSAI1_Config+0x90>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <RCCEx_PLLSAI1_Config+0xa0>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80077c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <RCCEx_PLLSAI1_Config+0xaa>
 80077c8:	f640 3165 	movw	r1, #2917	@ 0xb65
 80077cc:	486a      	ldr	r0, [pc, #424]	@ (8007978 <RCCEx_PLLSAI1_Config+0x250>)
 80077ce:	f7fc fb5d 	bl	8003e8c <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80077d2:	4b6a      	ldr	r3, [pc, #424]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d018      	beq.n	8007810 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80077de:	4b67      	ldr	r3, [pc, #412]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0203 	and.w	r2, r3, #3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d10d      	bne.n	800780a <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
       ||
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80077f6:	4b61      	ldr	r3, [pc, #388]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	091b      	lsrs	r3, r3, #4
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
       ||
 8007806:	429a      	cmp	r2, r3
 8007808:	d047      	beq.n	800789a <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	73fb      	strb	r3, [r7, #15]
 800780e:	e044      	b.n	800789a <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d018      	beq.n	800784a <RCCEx_PLLSAI1_Config+0x122>
 8007818:	2b03      	cmp	r3, #3
 800781a:	d825      	bhi.n	8007868 <RCCEx_PLLSAI1_Config+0x140>
 800781c:	2b01      	cmp	r3, #1
 800781e:	d002      	beq.n	8007826 <RCCEx_PLLSAI1_Config+0xfe>
 8007820:	2b02      	cmp	r3, #2
 8007822:	d009      	beq.n	8007838 <RCCEx_PLLSAI1_Config+0x110>
 8007824:	e020      	b.n	8007868 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007826:	4b55      	ldr	r3, [pc, #340]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11d      	bne.n	800786e <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007836:	e01a      	b.n	800786e <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007838:	4b50      	ldr	r3, [pc, #320]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007840:	2b00      	cmp	r3, #0
 8007842:	d116      	bne.n	8007872 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007848:	e013      	b.n	8007872 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800784a:	4b4c      	ldr	r3, [pc, #304]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10f      	bne.n	8007876 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007856:	4b49      	ldr	r3, [pc, #292]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007866:	e006      	b.n	8007876 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]
      break;
 800786c:	e004      	b.n	8007878 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800786e:	bf00      	nop
 8007870:	e002      	b.n	8007878 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8007872:	bf00      	nop
 8007874:	e000      	b.n	8007878 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8007876:	bf00      	nop
    }

    if(status == HAL_OK)
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10d      	bne.n	800789a <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800787e:	4b3f      	ldr	r3, [pc, #252]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6819      	ldr	r1, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	3b01      	subs	r3, #1
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	430b      	orrs	r3, r1
 8007894:	4939      	ldr	r1, [pc, #228]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 8007896:	4313      	orrs	r3, r2
 8007898:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 80ba 	bne.w	8007a16 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80078a2:	4b36      	ldr	r3, [pc, #216]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a35      	ldr	r2, [pc, #212]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 80078a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ae:	f7fd f9af 	bl	8004c10 <HAL_GetTick>
 80078b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078b4:	e009      	b.n	80078ca <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078b6:	f7fd f9ab 	bl	8004c10 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d902      	bls.n	80078ca <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	73fb      	strb	r3, [r7, #15]
        break;
 80078c8:	e005      	b.n	80078d6 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078ca:	4b2c      	ldr	r3, [pc, #176]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1ef      	bne.n	80078b6 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f040 809c 	bne.w	8007a16 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d11e      	bne.n	8007922 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	2b07      	cmp	r3, #7
 80078ea:	d008      	beq.n	80078fe <RCCEx_PLLSAI1_Config+0x1d6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b11      	cmp	r3, #17
 80078f2:	d004      	beq.n	80078fe <RCCEx_PLLSAI1_Config+0x1d6>
 80078f4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80078f8:	481f      	ldr	r0, [pc, #124]	@ (8007978 <RCCEx_PLLSAI1_Config+0x250>)
 80078fa:	f7fc fac7 	bl	8003e8c <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078fe:	4b1f      	ldr	r3, [pc, #124]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6892      	ldr	r2, [r2, #8]
 800790e:	0211      	lsls	r1, r2, #8
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	68d2      	ldr	r2, [r2, #12]
 8007914:	0912      	lsrs	r2, r2, #4
 8007916:	0452      	lsls	r2, r2, #17
 8007918:	430a      	orrs	r2, r1
 800791a:	4918      	ldr	r1, [pc, #96]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 800791c:	4313      	orrs	r3, r2
 800791e:	610b      	str	r3, [r1, #16]
 8007920:	e055      	b.n	80079ce <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d12b      	bne.n	8007980 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d010      	beq.n	8007952 <RCCEx_PLLSAI1_Config+0x22a>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d00c      	beq.n	8007952 <RCCEx_PLLSAI1_Config+0x22a>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b06      	cmp	r3, #6
 800793e:	d008      	beq.n	8007952 <RCCEx_PLLSAI1_Config+0x22a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	2b08      	cmp	r3, #8
 8007946:	d004      	beq.n	8007952 <RCCEx_PLLSAI1_Config+0x22a>
 8007948:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 800794c:	480a      	ldr	r0, [pc, #40]	@ (8007978 <RCCEx_PLLSAI1_Config+0x250>)
 800794e:	f7fc fa9d 	bl	8003e8c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007952:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800795a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6892      	ldr	r2, [r2, #8]
 8007962:	0211      	lsls	r1, r2, #8
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6912      	ldr	r2, [r2, #16]
 8007968:	0852      	lsrs	r2, r2, #1
 800796a:	3a01      	subs	r2, #1
 800796c:	0552      	lsls	r2, r2, #21
 800796e:	430a      	orrs	r2, r1
 8007970:	4902      	ldr	r1, [pc, #8]	@ (800797c <RCCEx_PLLSAI1_Config+0x254>)
 8007972:	4313      	orrs	r3, r2
 8007974:	610b      	str	r3, [r1, #16]
 8007976:	e02a      	b.n	80079ce <RCCEx_PLLSAI1_Config+0x2a6>
 8007978:	0800e1c0 	.word	0x0800e1c0
 800797c:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d010      	beq.n	80079aa <RCCEx_PLLSAI1_Config+0x282>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d00c      	beq.n	80079aa <RCCEx_PLLSAI1_Config+0x282>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	2b06      	cmp	r3, #6
 8007996:	d008      	beq.n	80079aa <RCCEx_PLLSAI1_Config+0x282>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	2b08      	cmp	r3, #8
 800799e:	d004      	beq.n	80079aa <RCCEx_PLLSAI1_Config+0x282>
 80079a0:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80079a4:	481e      	ldr	r0, [pc, #120]	@ (8007a20 <RCCEx_PLLSAI1_Config+0x2f8>)
 80079a6:	f7fc fa71 	bl	8003e8c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80079aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007a24 <RCCEx_PLLSAI1_Config+0x2fc>)
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80079b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6892      	ldr	r2, [r2, #8]
 80079ba:	0211      	lsls	r1, r2, #8
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6952      	ldr	r2, [r2, #20]
 80079c0:	0852      	lsrs	r2, r2, #1
 80079c2:	3a01      	subs	r2, #1
 80079c4:	0652      	lsls	r2, r2, #25
 80079c6:	430a      	orrs	r2, r1
 80079c8:	4916      	ldr	r1, [pc, #88]	@ (8007a24 <RCCEx_PLLSAI1_Config+0x2fc>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80079ce:	4b15      	ldr	r3, [pc, #84]	@ (8007a24 <RCCEx_PLLSAI1_Config+0x2fc>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a14      	ldr	r2, [pc, #80]	@ (8007a24 <RCCEx_PLLSAI1_Config+0x2fc>)
 80079d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079da:	f7fd f919 	bl	8004c10 <HAL_GetTick>
 80079de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079e0:	e009      	b.n	80079f6 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079e2:	f7fd f915 	bl	8004c10 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d902      	bls.n	80079f6 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	73fb      	strb	r3, [r7, #15]
          break;
 80079f4:	e005      	b.n	8007a02 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <RCCEx_PLLSAI1_Config+0x2fc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0ef      	beq.n	80079e2 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d106      	bne.n	8007a16 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <RCCEx_PLLSAI1_Config+0x2fc>)
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	4904      	ldr	r1, [pc, #16]	@ (8007a24 <RCCEx_PLLSAI1_Config+0x2fc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	0800e1c0 	.word	0x0800e1c0
 8007a24:	40021000 	.word	0x40021000

08007a28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d010      	beq.n	8007a60 <RCCEx_PLLSAI2_Config+0x38>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d00c      	beq.n	8007a60 <RCCEx_PLLSAI2_Config+0x38>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d008      	beq.n	8007a60 <RCCEx_PLLSAI2_Config+0x38>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d004      	beq.n	8007a60 <RCCEx_PLLSAI2_Config+0x38>
 8007a56:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8007a5a:	4896      	ldr	r0, [pc, #600]	@ (8007cb4 <RCCEx_PLLSAI2_Config+0x28c>)
 8007a5c:	f7fc fa16 	bl	8003e8c <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <RCCEx_PLLSAI2_Config+0x48>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d904      	bls.n	8007a7a <RCCEx_PLLSAI2_Config+0x52>
 8007a70:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8007a74:	488f      	ldr	r0, [pc, #572]	@ (8007cb4 <RCCEx_PLLSAI2_Config+0x28c>)
 8007a76:	f7fc fa09 	bl	8003e8c <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b07      	cmp	r3, #7
 8007a80:	d903      	bls.n	8007a8a <RCCEx_PLLSAI2_Config+0x62>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b56      	cmp	r3, #86	@ 0x56
 8007a88:	d904      	bls.n	8007a94 <RCCEx_PLLSAI2_Config+0x6c>
 8007a8a:	f640 4131 	movw	r1, #3121	@ 0xc31
 8007a8e:	4889      	ldr	r0, [pc, #548]	@ (8007cb4 <RCCEx_PLLSAI2_Config+0x28c>)
 8007a90:	f7fc f9fc 	bl	8003e8c <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <RCCEx_PLLSAI2_Config+0x84>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <RCCEx_PLLSAI2_Config+0x94>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <RCCEx_PLLSAI2_Config+0x9e>
 8007abc:	f640 4132 	movw	r1, #3122	@ 0xc32
 8007ac0:	487c      	ldr	r0, [pc, #496]	@ (8007cb4 <RCCEx_PLLSAI2_Config+0x28c>)
 8007ac2:	f7fc f9e3 	bl	8003e8c <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007ac6:	4b7c      	ldr	r3, [pc, #496]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d018      	beq.n	8007b04 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007ad2:	4b79      	ldr	r3, [pc, #484]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f003 0203 	and.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d10d      	bne.n	8007afe <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
       ||
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d009      	beq.n	8007afe <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007aea:	4b73      	ldr	r3, [pc, #460]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	091b      	lsrs	r3, r3, #4
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
       ||
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d047      	beq.n	8007b8e <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	73fb      	strb	r3, [r7, #15]
 8007b02:	e044      	b.n	8007b8e <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d018      	beq.n	8007b3e <RCCEx_PLLSAI2_Config+0x116>
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d825      	bhi.n	8007b5c <RCCEx_PLLSAI2_Config+0x134>
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d002      	beq.n	8007b1a <RCCEx_PLLSAI2_Config+0xf2>
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d009      	beq.n	8007b2c <RCCEx_PLLSAI2_Config+0x104>
 8007b18:	e020      	b.n	8007b5c <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007b1a:	4b67      	ldr	r3, [pc, #412]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d11d      	bne.n	8007b62 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b2a:	e01a      	b.n	8007b62 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007b2c:	4b62      	ldr	r3, [pc, #392]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d116      	bne.n	8007b66 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b3c:	e013      	b.n	8007b66 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10f      	bne.n	8007b6a <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b5a:	e006      	b.n	8007b6a <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b60:	e004      	b.n	8007b6c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8007b62:	bf00      	nop
 8007b64:	e002      	b.n	8007b6c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8007b66:	bf00      	nop
 8007b68:	e000      	b.n	8007b6c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8007b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10d      	bne.n	8007b8e <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007b72:	4b51      	ldr	r3, [pc, #324]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6819      	ldr	r1, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	430b      	orrs	r3, r1
 8007b88:	494b      	ldr	r1, [pc, #300]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 808a 	bne.w	8007caa <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007b96:	4b48      	ldr	r3, [pc, #288]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a47      	ldr	r2, [pc, #284]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba2:	f7fd f835 	bl	8004c10 <HAL_GetTick>
 8007ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ba8:	e009      	b.n	8007bbe <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007baa:	f7fd f831 	bl	8004c10 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d902      	bls.n	8007bbe <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	73fb      	strb	r3, [r7, #15]
        break;
 8007bbc:	e005      	b.n	8007bca <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1ef      	bne.n	8007baa <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d16c      	bne.n	8007caa <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d11e      	bne.n	8007c14 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	d008      	beq.n	8007bf0 <RCCEx_PLLSAI2_Config+0x1c8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b11      	cmp	r3, #17
 8007be4:	d004      	beq.n	8007bf0 <RCCEx_PLLSAI2_Config+0x1c8>
 8007be6:	f640 4185 	movw	r1, #3205	@ 0xc85
 8007bea:	4832      	ldr	r0, [pc, #200]	@ (8007cb4 <RCCEx_PLLSAI2_Config+0x28c>)
 8007bec:	f7fc f94e 	bl	8003e8c <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007bf0:	4b31      	ldr	r3, [pc, #196]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6892      	ldr	r2, [r2, #8]
 8007c00:	0211      	lsls	r1, r2, #8
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	68d2      	ldr	r2, [r2, #12]
 8007c06:	0912      	lsrs	r2, r2, #4
 8007c08:	0452      	lsls	r2, r2, #17
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	492a      	ldr	r1, [pc, #168]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	614b      	str	r3, [r1, #20]
 8007c12:	e026      	b.n	8007c62 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d010      	beq.n	8007c3e <RCCEx_PLLSAI2_Config+0x216>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d00c      	beq.n	8007c3e <RCCEx_PLLSAI2_Config+0x216>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b06      	cmp	r3, #6
 8007c2a:	d008      	beq.n	8007c3e <RCCEx_PLLSAI2_Config+0x216>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d004      	beq.n	8007c3e <RCCEx_PLLSAI2_Config+0x216>
 8007c34:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8007c38:	481e      	ldr	r0, [pc, #120]	@ (8007cb4 <RCCEx_PLLSAI2_Config+0x28c>)
 8007c3a:	f7fc f927 	bl	8003e8c <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007c46:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6892      	ldr	r2, [r2, #8]
 8007c4e:	0211      	lsls	r1, r2, #8
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6912      	ldr	r2, [r2, #16]
 8007c54:	0852      	lsrs	r2, r2, #1
 8007c56:	3a01      	subs	r2, #1
 8007c58:	0652      	lsls	r2, r2, #25
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	4916      	ldr	r1, [pc, #88]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007c62:	4b15      	ldr	r3, [pc, #84]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a14      	ldr	r2, [pc, #80]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6e:	f7fc ffcf 	bl	8004c10 <HAL_GetTick>
 8007c72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007c74:	e009      	b.n	8007c8a <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007c76:	f7fc ffcb 	bl	8004c10 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d902      	bls.n	8007c8a <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	73fb      	strb	r3, [r7, #15]
          break;
 8007c88:	e005      	b.n	8007c96 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0ef      	beq.n	8007c76 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007c9c:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007c9e:	695a      	ldr	r2, [r3, #20]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	4904      	ldr	r1, [pc, #16]	@ (8007cb8 <RCCEx_PLLSAI2_Config+0x290>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	0800e1c0 	.word	0x0800e1c0
 8007cb8:	40021000 	.word	0x40021000

08007cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e1dd      	b.n	800808a <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a7b      	ldr	r2, [pc, #492]	@ (8007ec0 <HAL_SPI_Init+0x204>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_SPI_Init+0x3a>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a79      	ldr	r2, [pc, #484]	@ (8007ec4 <HAL_SPI_Init+0x208>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d009      	beq.n	8007cf6 <HAL_SPI_Init+0x3a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a78      	ldr	r2, [pc, #480]	@ (8007ec8 <HAL_SPI_Init+0x20c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d004      	beq.n	8007cf6 <HAL_SPI_Init+0x3a>
 8007cec:	f240 1147 	movw	r1, #327	@ 0x147
 8007cf0:	4876      	ldr	r0, [pc, #472]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007cf2:	f7fc f8cb 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <HAL_SPI_Init+0x56>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d06:	d004      	beq.n	8007d12 <HAL_SPI_Init+0x56>
 8007d08:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8007d0c:	486f      	ldr	r0, [pc, #444]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007d0e:	f7fc f8bd 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00e      	beq.n	8007d38 <HAL_SPI_Init+0x7c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d22:	d009      	beq.n	8007d38 <HAL_SPI_Init+0x7c>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d2c:	d004      	beq.n	8007d38 <HAL_SPI_Init+0x7c>
 8007d2e:	f240 1149 	movw	r1, #329	@ 0x149
 8007d32:	4866      	ldr	r0, [pc, #408]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007d34:	f7fc f8aa 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007d40:	d040      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8007d4a:	d03b      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8007d54:	d036      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d5e:	d031      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8007d68:	d02c      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007d72:	d027      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8007d7c:	d022      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d86:	d01d      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d90:	d018      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007d9a:	d013      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007da4:	d00e      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dae:	d009      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007db8:	d004      	beq.n	8007dc4 <HAL_SPI_Init+0x108>
 8007dba:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8007dbe:	4843      	ldr	r0, [pc, #268]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007dc0:	f7fc f864 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dcc:	d00d      	beq.n	8007dea <HAL_SPI_Init+0x12e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d009      	beq.n	8007dea <HAL_SPI_Init+0x12e>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dde:	d004      	beq.n	8007dea <HAL_SPI_Init+0x12e>
 8007de0:	f240 114b 	movw	r1, #331	@ 0x14b
 8007de4:	4839      	ldr	r0, [pc, #228]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007de6:	f7fc f851 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d008      	beq.n	8007e04 <HAL_SPI_Init+0x148>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <HAL_SPI_Init+0x148>
 8007dfa:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8007dfe:	4833      	ldr	r0, [pc, #204]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007e00:	f7fc f844 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d020      	beq.n	8007e4e <HAL_SPI_Init+0x192>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d01c      	beq.n	8007e4e <HAL_SPI_Init+0x192>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	2b10      	cmp	r3, #16
 8007e1a:	d018      	beq.n	8007e4e <HAL_SPI_Init+0x192>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	2b18      	cmp	r3, #24
 8007e22:	d014      	beq.n	8007e4e <HAL_SPI_Init+0x192>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d010      	beq.n	8007e4e <HAL_SPI_Init+0x192>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2b28      	cmp	r3, #40	@ 0x28
 8007e32:	d00c      	beq.n	8007e4e <HAL_SPI_Init+0x192>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	2b30      	cmp	r3, #48	@ 0x30
 8007e3a:	d008      	beq.n	8007e4e <HAL_SPI_Init+0x192>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	2b38      	cmp	r3, #56	@ 0x38
 8007e42:	d004      	beq.n	8007e4e <HAL_SPI_Init+0x192>
 8007e44:	f240 114d 	movw	r1, #333	@ 0x14d
 8007e48:	4820      	ldr	r0, [pc, #128]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007e4a:	f7fc f81f 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d008      	beq.n	8007e68 <HAL_SPI_Init+0x1ac>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	2b80      	cmp	r3, #128	@ 0x80
 8007e5c:	d004      	beq.n	8007e68 <HAL_SPI_Init+0x1ac>
 8007e5e:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8007e62:	481a      	ldr	r0, [pc, #104]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007e64:	f7fc f812 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d008      	beq.n	8007e82 <HAL_SPI_Init+0x1c6>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	d004      	beq.n	8007e82 <HAL_SPI_Init+0x1c6>
 8007e78:	f240 114f 	movw	r1, #335	@ 0x14f
 8007e7c:	4813      	ldr	r0, [pc, #76]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007e7e:	f7fc f805 	bl	8003e8c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d151      	bne.n	8007f2e <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d008      	beq.n	8007ea4 <HAL_SPI_Init+0x1e8>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d004      	beq.n	8007ea4 <HAL_SPI_Init+0x1e8>
 8007e9a:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8007e9e:	480b      	ldr	r0, [pc, #44]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007ea0:	f7fb fff4 	bl	8003e8c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d011      	beq.n	8007ed0 <HAL_SPI_Init+0x214>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d00d      	beq.n	8007ed0 <HAL_SPI_Init+0x214>
 8007eb4:	f240 1153 	movw	r1, #339	@ 0x153
 8007eb8:	4804      	ldr	r0, [pc, #16]	@ (8007ecc <HAL_SPI_Init+0x210>)
 8007eba:	f7fb ffe7 	bl	8003e8c <assert_failed>
 8007ebe:	e007      	b.n	8007ed0 <HAL_SPI_Init+0x214>
 8007ec0:	40013000 	.word	0x40013000
 8007ec4:	40003800 	.word	0x40003800
 8007ec8:	40003c00 	.word	0x40003c00
 8007ecc:	0800e1fc 	.word	0x0800e1fc

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ed8:	d125      	bne.n	8007f26 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d050      	beq.n	8007f84 <HAL_SPI_Init+0x2c8>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	d04c      	beq.n	8007f84 <HAL_SPI_Init+0x2c8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d048      	beq.n	8007f84 <HAL_SPI_Init+0x2c8>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	2b18      	cmp	r3, #24
 8007ef8:	d044      	beq.n	8007f84 <HAL_SPI_Init+0x2c8>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d040      	beq.n	8007f84 <HAL_SPI_Init+0x2c8>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	2b28      	cmp	r3, #40	@ 0x28
 8007f08:	d03c      	beq.n	8007f84 <HAL_SPI_Init+0x2c8>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	2b30      	cmp	r3, #48	@ 0x30
 8007f10:	d038      	beq.n	8007f84 <HAL_SPI_Init+0x2c8>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	2b38      	cmp	r3, #56	@ 0x38
 8007f18:	d034      	beq.n	8007f84 <HAL_SPI_Init+0x2c8>
 8007f1a:	f240 1157 	movw	r1, #343	@ 0x157
 8007f1e:	485d      	ldr	r0, [pc, #372]	@ (8008094 <HAL_SPI_Init+0x3d8>)
 8007f20:	f7fb ffb4 	bl	8003e8c <assert_failed>
 8007f24:	e02e      	b.n	8007f84 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	61da      	str	r2, [r3, #28]
 8007f2c:	e02a      	b.n	8007f84 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d020      	beq.n	8007f78 <HAL_SPI_Init+0x2bc>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d01c      	beq.n	8007f78 <HAL_SPI_Init+0x2bc>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	2b10      	cmp	r3, #16
 8007f44:	d018      	beq.n	8007f78 <HAL_SPI_Init+0x2bc>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	2b18      	cmp	r3, #24
 8007f4c:	d014      	beq.n	8007f78 <HAL_SPI_Init+0x2bc>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d010      	beq.n	8007f78 <HAL_SPI_Init+0x2bc>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	2b28      	cmp	r3, #40	@ 0x28
 8007f5c:	d00c      	beq.n	8007f78 <HAL_SPI_Init+0x2bc>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	2b30      	cmp	r3, #48	@ 0x30
 8007f64:	d008      	beq.n	8007f78 <HAL_SPI_Init+0x2bc>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	2b38      	cmp	r3, #56	@ 0x38
 8007f6c:	d004      	beq.n	8007f78 <HAL_SPI_Init+0x2bc>
 8007f6e:	f240 1161 	movw	r1, #353	@ 0x161
 8007f72:	4848      	ldr	r0, [pc, #288]	@ (8008094 <HAL_SPI_Init+0x3d8>)
 8007f74:	f7fb ff8a 	bl	8003e8c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7fb ffb8 	bl	8003f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fc4:	d902      	bls.n	8007fcc <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	e002      	b.n	8007fd2 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007fd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007fda:	d007      	beq.n	8007fec <HAL_SPI_Init+0x330>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fe4:	d002      	beq.n	8007fec <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	431a      	orrs	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008024:	431a      	orrs	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802e:	ea42 0103 	orr.w	r1, r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008036:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	0c1b      	lsrs	r3, r3, #16
 8008048:	f003 0204 	and.w	r2, r3, #4
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008068:	ea42 0103 	orr.w	r1, r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	0800e1fc 	.word	0x0800e1fc

08008098 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d104      	bne.n	80080b8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80080ae:	f640 0172 	movw	r1, #2162	@ 0x872
 80080b2:	487f      	ldr	r0, [pc, #508]	@ (80082b0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80080b4:	f7fb feea 	bl	8003e8c <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <HAL_SPI_TransmitReceive_DMA+0x32>
 80080c0:	f640 0173 	movw	r1, #2163	@ 0x873
 80080c4:	487a      	ldr	r0, [pc, #488]	@ (80082b0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80080c6:	f7fb fee1 	bl	8003e8c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d004      	beq.n	80080dc <HAL_SPI_TransmitReceive_DMA+0x44>
 80080d2:	f640 0176 	movw	r1, #2166	@ 0x876
 80080d6:	4876      	ldr	r0, [pc, #472]	@ (80082b0 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80080d8:	f7fb fed8 	bl	8003e8c <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080e2:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d00c      	beq.n	800810a <HAL_SPI_TransmitReceive_DMA+0x72>
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080f6:	d106      	bne.n	8008106 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <HAL_SPI_TransmitReceive_DMA+0x6e>
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	2b04      	cmp	r3, #4
 8008104:	d001      	beq.n	800810a <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
 8008108:	e15f      	b.n	80083ca <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <HAL_SPI_TransmitReceive_DMA+0x84>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_SPI_TransmitReceive_DMA+0x84>
 8008116:	887b      	ldrh	r3, [r7, #2]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e154      	b.n	80083ca <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008126:	2b01      	cmp	r3, #1
 8008128:	d101      	bne.n	800812e <HAL_SPI_TransmitReceive_DMA+0x96>
 800812a:	2302      	movs	r3, #2
 800812c:	e14d      	b.n	80083ca <HAL_SPI_TransmitReceive_DMA+0x332>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b04      	cmp	r3, #4
 8008140:	d003      	beq.n	800814a <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2205      	movs	r2, #5
 8008146:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	887a      	ldrh	r2, [r7, #2]
 800815a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	887a      	ldrh	r2, [r7, #2]
 8008160:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	887a      	ldrh	r2, [r7, #2]
 800816c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	887a      	ldrh	r2, [r7, #2]
 8008174:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008192:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800819c:	d908      	bls.n	80081b0 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80081ac:	605a      	str	r2, [r3, #4]
 80081ae:	e06f      	b.n	8008290 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80081be:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ca:	d126      	bne.n	800821a <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10f      	bne.n	80081f8 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80081e6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	085b      	lsrs	r3, r3, #1
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081f6:	e010      	b.n	800821a <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008206:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800820c:	b29b      	uxth	r3, r3
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	3301      	adds	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008224:	d134      	bne.n	8008290 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008234:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800823c:	b29b      	uxth	r3, r3
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d111      	bne.n	800826a <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008254:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800825c:	b29b      	uxth	r3, r3
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008268:	e012      	b.n	8008290 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008278:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008280:	b29b      	uxth	r3, r3
 8008282:	085b      	lsrs	r3, r3, #1
 8008284:	b29b      	uxth	r3, r3
 8008286:	3301      	adds	r3, #1
 8008288:	b29a      	uxth	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b04      	cmp	r3, #4
 800829a:	d10f      	bne.n	80082bc <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a0:	4a04      	ldr	r2, [pc, #16]	@ (80082b4 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 80082a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a8:	4a03      	ldr	r2, [pc, #12]	@ (80082b8 <HAL_SPI_TransmitReceive_DMA+0x220>)
 80082aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80082ac:	e00e      	b.n	80082cc <HAL_SPI_TransmitReceive_DMA+0x234>
 80082ae:	bf00      	nop
 80082b0:	0800e1fc 	.word	0x0800e1fc
 80082b4:	08008785 	.word	0x08008785
 80082b8:	0800864d 	.word	0x0800864d
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082c0:	4a44      	ldr	r2, [pc, #272]	@ (80083d4 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 80082c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082c8:	4a43      	ldr	r2, [pc, #268]	@ (80083d8 <HAL_SPI_TransmitReceive_DMA+0x340>)
 80082ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d0:	4a42      	ldr	r2, [pc, #264]	@ (80083dc <HAL_SPI_TransmitReceive_DMA+0x344>)
 80082d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d8:	2200      	movs	r2, #0
 80082da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	4619      	mov	r1, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80082f6:	f7fc ff8f 	bl	8005218 <HAL_DMA_Start_IT>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008304:	f043 0210 	orr.w	r2, r3, #16
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e058      	b.n	80083ca <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0201 	orr.w	r2, r2, #1
 8008326:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800832c:	2200      	movs	r2, #0
 800832e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008334:	2200      	movs	r2, #0
 8008336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800833c:	2200      	movs	r2, #0
 800833e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008344:	2200      	movs	r2, #0
 8008346:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	4619      	mov	r1, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	330c      	adds	r3, #12
 8008358:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800835e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008360:	f7fc ff5a 	bl	8005218 <HAL_DMA_Start_IT>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00b      	beq.n	8008382 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836e:	f043 0210 	orr.w	r2, r3, #16
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e023      	b.n	80083ca <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838c:	2b40      	cmp	r3, #64	@ 0x40
 800838e:	d007      	beq.n	80083a0 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800839e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0220 	orr.w	r2, r2, #32
 80083b6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0202 	orr.w	r2, r2, #2
 80083c6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	080087a1 	.word	0x080087a1
 80083d8:	080086f5 	.word	0x080086f5
 80083dc:	080087bd 	.word	0x080087bd

080083e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	099b      	lsrs	r3, r3, #6
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10f      	bne.n	8008424 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	099b      	lsrs	r3, r3, #6
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d004      	beq.n	8008424 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
    return;
 8008422:	e0d7      	b.n	80085d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	085b      	lsrs	r3, r3, #1
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <HAL_SPI_IRQHandler+0x66>
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	09db      	lsrs	r3, r3, #7
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
    return;
 8008444:	e0c6      	b.n	80085d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10c      	bne.n	800846c <HAL_SPI_IRQHandler+0x8c>
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	099b      	lsrs	r3, r3, #6
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 80b4 	beq.w	80085d4 <HAL_SPI_IRQHandler+0x1f4>
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80ad 	beq.w	80085d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	099b      	lsrs	r3, r3, #6
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d023      	beq.n	80084ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b03      	cmp	r3, #3
 8008490:	d011      	beq.n	80084b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008496:	f043 0204 	orr.w	r2, r3, #4
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	617b      	str	r3, [r7, #20]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	617b      	str	r3, [r7, #20]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	e00b      	b.n	80084ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084b6:	2300      	movs	r3, #0
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	693b      	ldr	r3, [r7, #16]
        return;
 80084cc:	e082      	b.n	80085d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084de:	f043 0201 	orr.w	r2, r3, #1
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	0a1b      	lsrs	r3, r3, #8
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00c      	beq.n	800852a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008514:	f043 0208 	orr.w	r2, r3, #8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800851c:	2300      	movs	r3, #0
 800851e:	60bb      	str	r3, [r7, #8]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	60bb      	str	r3, [r7, #8]
 8008528:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800852e:	2b00      	cmp	r3, #0
 8008530:	d04f      	beq.n	80085d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008540:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <HAL_SPI_IRQHandler+0x17e>
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d034      	beq.n	80085c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0203 	bic.w	r2, r2, #3
 800856c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008572:	2b00      	cmp	r3, #0
 8008574:	d011      	beq.n	800859a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800857a:	4a18      	ldr	r2, [pc, #96]	@ (80085dc <HAL_SPI_IRQHandler+0x1fc>)
 800857c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008582:	4618      	mov	r0, r3
 8008584:	f7fc feb6 	bl	80052f4 <HAL_DMA_Abort_IT>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008592:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a6:	4a0d      	ldr	r2, [pc, #52]	@ (80085dc <HAL_SPI_IRQHandler+0x1fc>)
 80085a8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fc fea0 	bl	80052f4 <HAL_DMA_Abort_IT>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80085c6:	e003      	b.n	80085d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f827 	bl	800861c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80085ce:	e000      	b.n	80085d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80085d0:	bf00      	nop
    return;
 80085d2:	bf00      	nop
  }
}
 80085d4:	3720      	adds	r7, #32
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	080087fd 	.word	0x080087fd

080085e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800863e:	b2db      	uxtb	r3, r3
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008658:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800865a:	f7fc fad9 	bl	8004c10 <HAL_GetTick>
 800865e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b20      	cmp	r3, #32
 800866c:	d03c      	beq.n	80086e8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0220 	bic.w	r2, r2, #32
 800867c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10d      	bne.n	80086a2 <SPI_DMAReceiveCplt+0x56>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800868e:	d108      	bne.n	80086a2 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0203 	bic.w	r2, r2, #3
 800869e:	605a      	str	r2, [r3, #4]
 80086a0:	e007      	b.n	80086b2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0201 	bic.w	r2, r2, #1
 80086b0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	2164      	movs	r1, #100	@ 0x64
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 f9d4 	bl	8008a64 <SPI_EndRxTransaction>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff ff9b 	bl	800861c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80086e6:	e002      	b.n	80086ee <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f7ff ff79 	bl	80085e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008700:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008702:	f7fc fa85 	bl	8004c10 <HAL_GetTick>
 8008706:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b20      	cmp	r3, #32
 8008714:	d030      	beq.n	8008778 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0220 	bic.w	r2, r2, #32
 8008724:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	2164      	movs	r1, #100	@ 0x64
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 f9f2 	bl	8008b14 <SPI_EndRxTxTransaction>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800873a:	f043 0220 	orr.w	r2, r3, #32
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 0203 	bic.w	r2, r2, #3
 8008750:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f7ff ff53 	bl	800861c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008776:	e002      	b.n	800877e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7fb fb64 	bl	8003e46 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008790:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff ff2e 	bl	80085f4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008798:	bf00      	nop
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7ff ff2a 	bl	8008608 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087b4:	bf00      	nop
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0203 	bic.w	r2, r2, #3
 80087d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087de:	f043 0210 	orr.w	r2, r3, #16
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff ff14 	bl	800861c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087f4:	bf00      	nop
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008808:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f7ff feff 	bl	800861c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	4613      	mov	r3, r2
 8008836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008838:	f7fc f9ea 	bl	8004c10 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4413      	add	r3, r2
 8008846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008848:	f7fc f9e2 	bl	8004c10 <HAL_GetTick>
 800884c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800884e:	4b39      	ldr	r3, [pc, #228]	@ (8008934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	015b      	lsls	r3, r3, #5
 8008854:	0d1b      	lsrs	r3, r3, #20
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	fb02 f303 	mul.w	r3, r2, r3
 800885c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800885e:	e054      	b.n	800890a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	d050      	beq.n	800890a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008868:	f7fc f9d2 	bl	8004c10 <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	69fa      	ldr	r2, [r7, #28]
 8008874:	429a      	cmp	r2, r3
 8008876:	d902      	bls.n	800887e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d13d      	bne.n	80088fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800888c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008896:	d111      	bne.n	80088bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088a0:	d004      	beq.n	80088ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088aa:	d107      	bne.n	80088bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088c4:	d10f      	bne.n	80088e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e017      	b.n	800892a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	3b01      	subs	r3, #1
 8008908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689a      	ldr	r2, [r3, #8]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4013      	ands	r3, r2
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	bf0c      	ite	eq
 800891a:	2301      	moveq	r3, #1
 800891c:	2300      	movne	r3, #0
 800891e:	b2db      	uxtb	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	429a      	cmp	r2, r3
 8008926:	d19b      	bne.n	8008860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3720      	adds	r7, #32
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20000010 	.word	0x20000010

08008938 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	@ 0x28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800894a:	f7fc f961 	bl	8004c10 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	4413      	add	r3, r2
 8008958:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800895a:	f7fc f959 	bl	8004c10 <HAL_GetTick>
 800895e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	330c      	adds	r3, #12
 8008966:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008968:	4b3d      	ldr	r3, [pc, #244]	@ (8008a60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	00da      	lsls	r2, r3, #3
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	0d1b      	lsrs	r3, r3, #20
 8008978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008980:	e060      	b.n	8008a44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008988:	d107      	bne.n	800899a <SPI_WaitFifoStateUntilTimeout+0x62>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d104      	bne.n	800899a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008998:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d050      	beq.n	8008a44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089a2:	f7fc f935 	bl	8004c10 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d902      	bls.n	80089b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d13d      	bne.n	8008a34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089d0:	d111      	bne.n	80089f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089da:	d004      	beq.n	80089e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089e4:	d107      	bne.n	80089f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089fe:	d10f      	bne.n	8008a20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e010      	b.n	8008a56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689a      	ldr	r2, [r3, #8]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d196      	bne.n	8008982 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3728      	adds	r7, #40	@ 0x28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000010 	.word	0x20000010

08008a64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a78:	d111      	bne.n	8008a9e <SPI_EndRxTransaction+0x3a>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a82:	d004      	beq.n	8008a8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a8c:	d107      	bne.n	8008a9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a9c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2180      	movs	r1, #128	@ 0x80
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7ff febd 	bl	8008828 <SPI_WaitFlagStateUntilTimeout>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ab8:	f043 0220 	orr.w	r2, r3, #32
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e023      	b.n	8008b0c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008acc:	d11d      	bne.n	8008b0a <SPI_EndRxTransaction+0xa6>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ad6:	d004      	beq.n	8008ae2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ae0:	d113      	bne.n	8008b0a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff ff22 	bl	8008938 <SPI_WaitFifoStateUntilTimeout>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d007      	beq.n	8008b0a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008afe:	f043 0220 	orr.w	r2, r3, #32
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e000      	b.n	8008b0c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7ff ff03 	bl	8008938 <SPI_WaitFifoStateUntilTimeout>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d007      	beq.n	8008b48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b3c:	f043 0220 	orr.w	r2, r3, #32
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e027      	b.n	8008b98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2180      	movs	r1, #128	@ 0x80
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fe68 	bl	8008828 <SPI_WaitFlagStateUntilTimeout>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b62:	f043 0220 	orr.w	r2, r3, #32
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e014      	b.n	8008b98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff fedc 	bl	8008938 <SPI_WaitFifoStateUntilTimeout>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b8a:	f043 0220 	orr.w	r2, r3, #32
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e000      	b.n	8008b98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e0e6      	b.n	8008d80 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a74      	ldr	r2, [pc, #464]	@ (8008d88 <HAL_TIM_Base_Init+0x1e8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d036      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc4:	d031      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a70      	ldr	r2, [pc, #448]	@ (8008d8c <HAL_TIM_Base_Init+0x1ec>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d02c      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a6e      	ldr	r2, [pc, #440]	@ (8008d90 <HAL_TIM_Base_Init+0x1f0>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d027      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a6d      	ldr	r2, [pc, #436]	@ (8008d94 <HAL_TIM_Base_Init+0x1f4>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d022      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a6b      	ldr	r2, [pc, #428]	@ (8008d98 <HAL_TIM_Base_Init+0x1f8>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d01d      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a6a      	ldr	r2, [pc, #424]	@ (8008d9c <HAL_TIM_Base_Init+0x1fc>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d018      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a68      	ldr	r2, [pc, #416]	@ (8008da0 <HAL_TIM_Base_Init+0x200>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a67      	ldr	r2, [pc, #412]	@ (8008da4 <HAL_TIM_Base_Init+0x204>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00e      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a65      	ldr	r2, [pc, #404]	@ (8008da8 <HAL_TIM_Base_Init+0x208>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d009      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a64      	ldr	r2, [pc, #400]	@ (8008dac <HAL_TIM_Base_Init+0x20c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d004      	beq.n	8008c2a <HAL_TIM_Base_Init+0x8a>
 8008c20:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8008c24:	4862      	ldr	r0, [pc, #392]	@ (8008db0 <HAL_TIM_Base_Init+0x210>)
 8008c26:	f7fb f931 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d014      	beq.n	8008c5c <HAL_TIM_Base_Init+0xbc>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	2b10      	cmp	r3, #16
 8008c38:	d010      	beq.n	8008c5c <HAL_TIM_Base_Init+0xbc>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d00c      	beq.n	8008c5c <HAL_TIM_Base_Init+0xbc>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	2b40      	cmp	r3, #64	@ 0x40
 8008c48:	d008      	beq.n	8008c5c <HAL_TIM_Base_Init+0xbc>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	2b60      	cmp	r3, #96	@ 0x60
 8008c50:	d004      	beq.n	8008c5c <HAL_TIM_Base_Init+0xbc>
 8008c52:	f240 1117 	movw	r1, #279	@ 0x117
 8008c56:	4856      	ldr	r0, [pc, #344]	@ (8008db0 <HAL_TIM_Base_Init+0x210>)
 8008c58:	f7fb f918 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00e      	beq.n	8008c82 <HAL_TIM_Base_Init+0xe2>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c6c:	d009      	beq.n	8008c82 <HAL_TIM_Base_Init+0xe2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c76:	d004      	beq.n	8008c82 <HAL_TIM_Base_Init+0xe2>
 8008c78:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8008c7c:	484c      	ldr	r0, [pc, #304]	@ (8008db0 <HAL_TIM_Base_Init+0x210>)
 8008c7e:	f7fb f905 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8a:	d004      	beq.n	8008c96 <HAL_TIM_Base_Init+0xf6>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a40      	ldr	r2, [pc, #256]	@ (8008d94 <HAL_TIM_Base_Init+0x1f4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d107      	bne.n	8008ca6 <HAL_TIM_Base_Init+0x106>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bf14      	ite	ne
 8008c9e:	2301      	movne	r3, #1
 8008ca0:	2300      	moveq	r3, #0
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	e00e      	b.n	8008cc4 <HAL_TIM_Base_Init+0x124>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d006      	beq.n	8008cbc <HAL_TIM_Base_Init+0x11c>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb6:	d201      	bcs.n	8008cbc <HAL_TIM_Base_Init+0x11c>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e000      	b.n	8008cbe <HAL_TIM_Base_Init+0x11e>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d104      	bne.n	8008cd2 <HAL_TIM_Base_Init+0x132>
 8008cc8:	f240 1119 	movw	r1, #281	@ 0x119
 8008ccc:	4838      	ldr	r0, [pc, #224]	@ (8008db0 <HAL_TIM_Base_Init+0x210>)
 8008cce:	f7fb f8dd 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d008      	beq.n	8008cec <HAL_TIM_Base_Init+0x14c>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	2b80      	cmp	r3, #128	@ 0x80
 8008ce0:	d004      	beq.n	8008cec <HAL_TIM_Base_Init+0x14c>
 8008ce2:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8008ce6:	4832      	ldr	r0, [pc, #200]	@ (8008db0 <HAL_TIM_Base_Init+0x210>)
 8008ce8:	f7fb f8d0 	bl	8003e8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fb fdb9 	bl	8004878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f001 fec3 	bl	800aaa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40012c00 	.word	0x40012c00
 8008d8c:	40000400 	.word	0x40000400
 8008d90:	40000800 	.word	0x40000800
 8008d94:	40000c00 	.word	0x40000c00
 8008d98:	40001000 	.word	0x40001000
 8008d9c:	40001400 	.word	0x40001400
 8008da0:	40013400 	.word	0x40013400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40014400 	.word	0x40014400
 8008dac:	40014800 	.word	0x40014800
 8008db0:	0800e234 	.word	0x0800e234

08008db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8008eec <HAL_TIM_Base_Start_IT+0x138>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d036      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dce:	d031      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a46      	ldr	r2, [pc, #280]	@ (8008ef0 <HAL_TIM_Base_Start_IT+0x13c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d02c      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a45      	ldr	r2, [pc, #276]	@ (8008ef4 <HAL_TIM_Base_Start_IT+0x140>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d027      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a43      	ldr	r2, [pc, #268]	@ (8008ef8 <HAL_TIM_Base_Start_IT+0x144>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d022      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a42      	ldr	r2, [pc, #264]	@ (8008efc <HAL_TIM_Base_Start_IT+0x148>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d01d      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a40      	ldr	r2, [pc, #256]	@ (8008f00 <HAL_TIM_Base_Start_IT+0x14c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d018      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a3f      	ldr	r2, [pc, #252]	@ (8008f04 <HAL_TIM_Base_Start_IT+0x150>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a3d      	ldr	r2, [pc, #244]	@ (8008f08 <HAL_TIM_Base_Start_IT+0x154>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d00e      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a3c      	ldr	r2, [pc, #240]	@ (8008f0c <HAL_TIM_Base_Start_IT+0x158>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d009      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a3a      	ldr	r2, [pc, #232]	@ (8008f10 <HAL_TIM_Base_Start_IT+0x15c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d004      	beq.n	8008e34 <HAL_TIM_Base_Start_IT+0x80>
 8008e2a:	f240 11d3 	movw	r1, #467	@ 0x1d3
 8008e2e:	4839      	ldr	r0, [pc, #228]	@ (8008f14 <HAL_TIM_Base_Start_IT+0x160>)
 8008e30:	f7fb f82c 	bl	8003e8c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d001      	beq.n	8008e44 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e04f      	b.n	8008ee4 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f042 0201 	orr.w	r2, r2, #1
 8008e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a22      	ldr	r2, [pc, #136]	@ (8008eec <HAL_TIM_Base_Start_IT+0x138>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01d      	beq.n	8008ea2 <HAL_TIM_Base_Start_IT+0xee>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e6e:	d018      	beq.n	8008ea2 <HAL_TIM_Base_Start_IT+0xee>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef0 <HAL_TIM_Base_Start_IT+0x13c>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d013      	beq.n	8008ea2 <HAL_TIM_Base_Start_IT+0xee>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef4 <HAL_TIM_Base_Start_IT+0x140>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00e      	beq.n	8008ea2 <HAL_TIM_Base_Start_IT+0xee>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef8 <HAL_TIM_Base_Start_IT+0x144>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d009      	beq.n	8008ea2 <HAL_TIM_Base_Start_IT+0xee>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1c      	ldr	r2, [pc, #112]	@ (8008f04 <HAL_TIM_Base_Start_IT+0x150>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d004      	beq.n	8008ea2 <HAL_TIM_Base_Start_IT+0xee>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f08 <HAL_TIM_Base_Start_IT+0x154>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d115      	bne.n	8008ece <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f18 <HAL_TIM_Base_Start_IT+0x164>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b06      	cmp	r3, #6
 8008eb2:	d015      	beq.n	8008ee0 <HAL_TIM_Base_Start_IT+0x12c>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eba:	d011      	beq.n	8008ee0 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ecc:	e008      	b.n	8008ee0 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0201 	orr.w	r2, r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e000      	b.n	8008ee2 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40012c00 	.word	0x40012c00
 8008ef0:	40000400 	.word	0x40000400
 8008ef4:	40000800 	.word	0x40000800
 8008ef8:	40000c00 	.word	0x40000c00
 8008efc:	40001000 	.word	0x40001000
 8008f00:	40001400 	.word	0x40001400
 8008f04:	40013400 	.word	0x40013400
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	40014400 	.word	0x40014400
 8008f10:	40014800 	.word	0x40014800
 8008f14:	0800e234 	.word	0x0800e234
 8008f18:	00010007 	.word	0x00010007

08008f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e0e6      	b.n	80090fc <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a74      	ldr	r2, [pc, #464]	@ (8009104 <HAL_TIM_PWM_Init+0x1e8>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d036      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f40:	d031      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a70      	ldr	r2, [pc, #448]	@ (8009108 <HAL_TIM_PWM_Init+0x1ec>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d02c      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a6e      	ldr	r2, [pc, #440]	@ (800910c <HAL_TIM_PWM_Init+0x1f0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d027      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8009110 <HAL_TIM_PWM_Init+0x1f4>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d022      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a6b      	ldr	r2, [pc, #428]	@ (8009114 <HAL_TIM_PWM_Init+0x1f8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d01d      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a6a      	ldr	r2, [pc, #424]	@ (8009118 <HAL_TIM_PWM_Init+0x1fc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d018      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a68      	ldr	r2, [pc, #416]	@ (800911c <HAL_TIM_PWM_Init+0x200>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d013      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a67      	ldr	r2, [pc, #412]	@ (8009120 <HAL_TIM_PWM_Init+0x204>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00e      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a65      	ldr	r2, [pc, #404]	@ (8009124 <HAL_TIM_PWM_Init+0x208>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d009      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a64      	ldr	r2, [pc, #400]	@ (8009128 <HAL_TIM_PWM_Init+0x20c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d004      	beq.n	8008fa6 <HAL_TIM_PWM_Init+0x8a>
 8008f9c:	f240 5133 	movw	r1, #1331	@ 0x533
 8008fa0:	4862      	ldr	r0, [pc, #392]	@ (800912c <HAL_TIM_PWM_Init+0x210>)
 8008fa2:	f7fa ff73 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d014      	beq.n	8008fd8 <HAL_TIM_PWM_Init+0xbc>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b10      	cmp	r3, #16
 8008fb4:	d010      	beq.n	8008fd8 <HAL_TIM_PWM_Init+0xbc>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d00c      	beq.n	8008fd8 <HAL_TIM_PWM_Init+0xbc>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	2b40      	cmp	r3, #64	@ 0x40
 8008fc4:	d008      	beq.n	8008fd8 <HAL_TIM_PWM_Init+0xbc>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	2b60      	cmp	r3, #96	@ 0x60
 8008fcc:	d004      	beq.n	8008fd8 <HAL_TIM_PWM_Init+0xbc>
 8008fce:	f240 5134 	movw	r1, #1332	@ 0x534
 8008fd2:	4856      	ldr	r0, [pc, #344]	@ (800912c <HAL_TIM_PWM_Init+0x210>)
 8008fd4:	f7fa ff5a 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00e      	beq.n	8008ffe <HAL_TIM_PWM_Init+0xe2>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fe8:	d009      	beq.n	8008ffe <HAL_TIM_PWM_Init+0xe2>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ff2:	d004      	beq.n	8008ffe <HAL_TIM_PWM_Init+0xe2>
 8008ff4:	f240 5135 	movw	r1, #1333	@ 0x535
 8008ff8:	484c      	ldr	r0, [pc, #304]	@ (800912c <HAL_TIM_PWM_Init+0x210>)
 8008ffa:	f7fa ff47 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009006:	d004      	beq.n	8009012 <HAL_TIM_PWM_Init+0xf6>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a40      	ldr	r2, [pc, #256]	@ (8009110 <HAL_TIM_PWM_Init+0x1f4>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d107      	bne.n	8009022 <HAL_TIM_PWM_Init+0x106>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	bf14      	ite	ne
 800901a:	2301      	movne	r3, #1
 800901c:	2300      	moveq	r3, #0
 800901e:	b2db      	uxtb	r3, r3
 8009020:	e00e      	b.n	8009040 <HAL_TIM_PWM_Init+0x124>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d006      	beq.n	8009038 <HAL_TIM_PWM_Init+0x11c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009032:	d201      	bcs.n	8009038 <HAL_TIM_PWM_Init+0x11c>
 8009034:	2301      	movs	r3, #1
 8009036:	e000      	b.n	800903a <HAL_TIM_PWM_Init+0x11e>
 8009038:	2300      	movs	r3, #0
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <HAL_TIM_PWM_Init+0x132>
 8009044:	f240 5136 	movw	r1, #1334	@ 0x536
 8009048:	4838      	ldr	r0, [pc, #224]	@ (800912c <HAL_TIM_PWM_Init+0x210>)
 800904a:	f7fa ff1f 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d008      	beq.n	8009068 <HAL_TIM_PWM_Init+0x14c>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	2b80      	cmp	r3, #128	@ 0x80
 800905c:	d004      	beq.n	8009068 <HAL_TIM_PWM_Init+0x14c>
 800905e:	f240 5137 	movw	r1, #1335	@ 0x537
 8009062:	4832      	ldr	r0, [pc, #200]	@ (800912c <HAL_TIM_PWM_Init+0x210>)
 8009064:	f7fa ff12 	bl	8003e8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f857 	bl	8009130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2202      	movs	r2, #2
 8009086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f001 fd05 	bl	800aaa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	40012c00 	.word	0x40012c00
 8009108:	40000400 	.word	0x40000400
 800910c:	40000800 	.word	0x40000800
 8009110:	40000c00 	.word	0x40000c00
 8009114:	40001000 	.word	0x40001000
 8009118:	40001400 	.word	0x40001400
 800911c:	40013400 	.word	0x40013400
 8009120:	40014000 	.word	0x40014000
 8009124:	40014400 	.word	0x40014400
 8009128:	40014800 	.word	0x40014800
 800912c:	0800e234 	.word	0x0800e234

08009130 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a85      	ldr	r2, [pc, #532]	@ (8009368 <HAL_TIM_PWM_Start+0x224>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d115      	bne.n	8009184 <HAL_TIM_PWM_Start+0x40>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 808d 	beq.w	800927a <HAL_TIM_PWM_Start+0x136>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b04      	cmp	r3, #4
 8009164:	f000 8089 	beq.w	800927a <HAL_TIM_PWM_Start+0x136>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b08      	cmp	r3, #8
 800916c:	f000 8085 	beq.w	800927a <HAL_TIM_PWM_Start+0x136>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2b0c      	cmp	r3, #12
 8009174:	f000 8081 	beq.w	800927a <HAL_TIM_PWM_Start+0x136>
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b10      	cmp	r3, #16
 800917c:	d07d      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b14      	cmp	r3, #20
 8009182:	d07a      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800918c:	d10b      	bne.n	80091a6 <HAL_TIM_PWM_Start+0x62>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d072      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	2b04      	cmp	r3, #4
 8009198:	d06f      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b08      	cmp	r3, #8
 800919e:	d06c      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2b0c      	cmp	r3, #12
 80091a4:	d069      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a70      	ldr	r2, [pc, #448]	@ (800936c <HAL_TIM_PWM_Start+0x228>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d10b      	bne.n	80091c8 <HAL_TIM_PWM_Start+0x84>
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d061      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d05e      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2b08      	cmp	r3, #8
 80091c0:	d05b      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b0c      	cmp	r3, #12
 80091c6:	d058      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a68      	ldr	r2, [pc, #416]	@ (8009370 <HAL_TIM_PWM_Start+0x22c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d10b      	bne.n	80091ea <HAL_TIM_PWM_Start+0xa6>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d050      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d04d      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d04a      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b0c      	cmp	r3, #12
 80091e8:	d047      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a61      	ldr	r2, [pc, #388]	@ (8009374 <HAL_TIM_PWM_Start+0x230>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d10b      	bne.n	800920c <HAL_TIM_PWM_Start+0xc8>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d03f      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d03c      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b08      	cmp	r3, #8
 8009204:	d039      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b0c      	cmp	r3, #12
 800920a:	d036      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a59      	ldr	r2, [pc, #356]	@ (8009378 <HAL_TIM_PWM_Start+0x234>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d111      	bne.n	800923a <HAL_TIM_PWM_Start+0xf6>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d02e      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b04      	cmp	r3, #4
 8009220:	d02b      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b08      	cmp	r3, #8
 8009226:	d028      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b0c      	cmp	r3, #12
 800922c:	d025      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b10      	cmp	r3, #16
 8009232:	d022      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b14      	cmp	r3, #20
 8009238:	d01f      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a4f      	ldr	r2, [pc, #316]	@ (800937c <HAL_TIM_PWM_Start+0x238>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d105      	bne.n	8009250 <HAL_TIM_PWM_Start+0x10c>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d017      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b04      	cmp	r3, #4
 800924e:	d014      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a4a      	ldr	r2, [pc, #296]	@ (8009380 <HAL_TIM_PWM_Start+0x23c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d102      	bne.n	8009260 <HAL_TIM_PWM_Start+0x11c>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00c      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a47      	ldr	r2, [pc, #284]	@ (8009384 <HAL_TIM_PWM_Start+0x240>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d102      	bne.n	8009270 <HAL_TIM_PWM_Start+0x12c>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <HAL_TIM_PWM_Start+0x136>
 8009270:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 8009274:	4844      	ldr	r0, [pc, #272]	@ (8009388 <HAL_TIM_PWM_Start+0x244>)
 8009276:	f7fa fe09 	bl	8003e8c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d109      	bne.n	8009294 <HAL_TIM_PWM_Start+0x150>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	bf14      	ite	ne
 800928c:	2301      	movne	r3, #1
 800928e:	2300      	moveq	r3, #0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	e03c      	b.n	800930e <HAL_TIM_PWM_Start+0x1ca>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b04      	cmp	r3, #4
 8009298:	d109      	bne.n	80092ae <HAL_TIM_PWM_Start+0x16a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	bf14      	ite	ne
 80092a6:	2301      	movne	r3, #1
 80092a8:	2300      	moveq	r3, #0
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	e02f      	b.n	800930e <HAL_TIM_PWM_Start+0x1ca>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d109      	bne.n	80092c8 <HAL_TIM_PWM_Start+0x184>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b01      	cmp	r3, #1
 80092be:	bf14      	ite	ne
 80092c0:	2301      	movne	r3, #1
 80092c2:	2300      	moveq	r3, #0
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	e022      	b.n	800930e <HAL_TIM_PWM_Start+0x1ca>
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2b0c      	cmp	r3, #12
 80092cc:	d109      	bne.n	80092e2 <HAL_TIM_PWM_Start+0x19e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	bf14      	ite	ne
 80092da:	2301      	movne	r3, #1
 80092dc:	2300      	moveq	r3, #0
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	e015      	b.n	800930e <HAL_TIM_PWM_Start+0x1ca>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b10      	cmp	r3, #16
 80092e6:	d109      	bne.n	80092fc <HAL_TIM_PWM_Start+0x1b8>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	bf14      	ite	ne
 80092f4:	2301      	movne	r3, #1
 80092f6:	2300      	moveq	r3, #0
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	e008      	b.n	800930e <HAL_TIM_PWM_Start+0x1ca>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b01      	cmp	r3, #1
 8009306:	bf14      	ite	ne
 8009308:	2301      	movne	r3, #1
 800930a:	2300      	moveq	r3, #0
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e0af      	b.n	8009476 <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <HAL_TIM_PWM_Start+0x1e2>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009324:	e036      	b.n	8009394 <HAL_TIM_PWM_Start+0x250>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b04      	cmp	r3, #4
 800932a:	d104      	bne.n	8009336 <HAL_TIM_PWM_Start+0x1f2>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009334:	e02e      	b.n	8009394 <HAL_TIM_PWM_Start+0x250>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b08      	cmp	r3, #8
 800933a:	d104      	bne.n	8009346 <HAL_TIM_PWM_Start+0x202>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009344:	e026      	b.n	8009394 <HAL_TIM_PWM_Start+0x250>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b0c      	cmp	r3, #12
 800934a:	d104      	bne.n	8009356 <HAL_TIM_PWM_Start+0x212>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009354:	e01e      	b.n	8009394 <HAL_TIM_PWM_Start+0x250>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b10      	cmp	r3, #16
 800935a:	d117      	bne.n	800938c <HAL_TIM_PWM_Start+0x248>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009364:	e016      	b.n	8009394 <HAL_TIM_PWM_Start+0x250>
 8009366:	bf00      	nop
 8009368:	40012c00 	.word	0x40012c00
 800936c:	40000400 	.word	0x40000400
 8009370:	40000800 	.word	0x40000800
 8009374:	40000c00 	.word	0x40000c00
 8009378:	40013400 	.word	0x40013400
 800937c:	40014000 	.word	0x40014000
 8009380:	40014400 	.word	0x40014400
 8009384:	40014800 	.word	0x40014800
 8009388:	0800e234 	.word	0x0800e234
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2201      	movs	r2, #1
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	4618      	mov	r0, r3
 800939e:	f002 f821 	bl	800b3e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a36      	ldr	r2, [pc, #216]	@ (8009480 <HAL_TIM_PWM_Start+0x33c>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d013      	beq.n	80093d4 <HAL_TIM_PWM_Start+0x290>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a34      	ldr	r2, [pc, #208]	@ (8009484 <HAL_TIM_PWM_Start+0x340>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00e      	beq.n	80093d4 <HAL_TIM_PWM_Start+0x290>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a33      	ldr	r2, [pc, #204]	@ (8009488 <HAL_TIM_PWM_Start+0x344>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d009      	beq.n	80093d4 <HAL_TIM_PWM_Start+0x290>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a31      	ldr	r2, [pc, #196]	@ (800948c <HAL_TIM_PWM_Start+0x348>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d004      	beq.n	80093d4 <HAL_TIM_PWM_Start+0x290>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a30      	ldr	r2, [pc, #192]	@ (8009490 <HAL_TIM_PWM_Start+0x34c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d101      	bne.n	80093d8 <HAL_TIM_PWM_Start+0x294>
 80093d4:	2301      	movs	r3, #1
 80093d6:	e000      	b.n	80093da <HAL_TIM_PWM_Start+0x296>
 80093d8:	2300      	movs	r3, #0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a23      	ldr	r2, [pc, #140]	@ (8009480 <HAL_TIM_PWM_Start+0x33c>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d01d      	beq.n	8009434 <HAL_TIM_PWM_Start+0x2f0>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009400:	d018      	beq.n	8009434 <HAL_TIM_PWM_Start+0x2f0>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a23      	ldr	r2, [pc, #140]	@ (8009494 <HAL_TIM_PWM_Start+0x350>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d013      	beq.n	8009434 <HAL_TIM_PWM_Start+0x2f0>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a21      	ldr	r2, [pc, #132]	@ (8009498 <HAL_TIM_PWM_Start+0x354>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d00e      	beq.n	8009434 <HAL_TIM_PWM_Start+0x2f0>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a20      	ldr	r2, [pc, #128]	@ (800949c <HAL_TIM_PWM_Start+0x358>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d009      	beq.n	8009434 <HAL_TIM_PWM_Start+0x2f0>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a17      	ldr	r2, [pc, #92]	@ (8009484 <HAL_TIM_PWM_Start+0x340>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d004      	beq.n	8009434 <HAL_TIM_PWM_Start+0x2f0>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a16      	ldr	r2, [pc, #88]	@ (8009488 <HAL_TIM_PWM_Start+0x344>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d115      	bne.n	8009460 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	689a      	ldr	r2, [r3, #8]
 800943a:	4b19      	ldr	r3, [pc, #100]	@ (80094a0 <HAL_TIM_PWM_Start+0x35c>)
 800943c:	4013      	ands	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b06      	cmp	r3, #6
 8009444:	d015      	beq.n	8009472 <HAL_TIM_PWM_Start+0x32e>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800944c:	d011      	beq.n	8009472 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f042 0201 	orr.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800945e:	e008      	b.n	8009472 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0201 	orr.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	e000      	b.n	8009474 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40012c00 	.word	0x40012c00
 8009484:	40013400 	.word	0x40013400
 8009488:	40014000 	.word	0x40014000
 800948c:	40014400 	.word	0x40014400
 8009490:	40014800 	.word	0x40014800
 8009494:	40000400 	.word	0x40000400
 8009498:	40000800 	.word	0x40000800
 800949c:	40000c00 	.word	0x40000c00
 80094a0:	00010007 	.word	0x00010007

080094a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a8d      	ldr	r2, [pc, #564]	@ (80096e8 <HAL_TIM_PWM_Stop+0x244>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d115      	bne.n	80094e4 <HAL_TIM_PWM_Stop+0x40>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 808d 	beq.w	80095da <HAL_TIM_PWM_Stop+0x136>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	f000 8089 	beq.w	80095da <HAL_TIM_PWM_Stop+0x136>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	f000 8085 	beq.w	80095da <HAL_TIM_PWM_Stop+0x136>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b0c      	cmp	r3, #12
 80094d4:	f000 8081 	beq.w	80095da <HAL_TIM_PWM_Stop+0x136>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b10      	cmp	r3, #16
 80094dc:	d07d      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b14      	cmp	r3, #20
 80094e2:	d07a      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ec:	d10b      	bne.n	8009506 <HAL_TIM_PWM_Stop+0x62>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d072      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d06f      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d06c      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2b0c      	cmp	r3, #12
 8009504:	d069      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a78      	ldr	r2, [pc, #480]	@ (80096ec <HAL_TIM_PWM_Stop+0x248>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d10b      	bne.n	8009528 <HAL_TIM_PWM_Stop+0x84>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d061      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b04      	cmp	r3, #4
 800951a:	d05e      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b08      	cmp	r3, #8
 8009520:	d05b      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b0c      	cmp	r3, #12
 8009526:	d058      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a70      	ldr	r2, [pc, #448]	@ (80096f0 <HAL_TIM_PWM_Stop+0x24c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d10b      	bne.n	800954a <HAL_TIM_PWM_Stop+0xa6>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d050      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b04      	cmp	r3, #4
 800953c:	d04d      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b08      	cmp	r3, #8
 8009542:	d04a      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b0c      	cmp	r3, #12
 8009548:	d047      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a69      	ldr	r2, [pc, #420]	@ (80096f4 <HAL_TIM_PWM_Stop+0x250>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d10b      	bne.n	800956c <HAL_TIM_PWM_Stop+0xc8>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d03f      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b04      	cmp	r3, #4
 800955e:	d03c      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b08      	cmp	r3, #8
 8009564:	d039      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b0c      	cmp	r3, #12
 800956a:	d036      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a61      	ldr	r2, [pc, #388]	@ (80096f8 <HAL_TIM_PWM_Stop+0x254>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d111      	bne.n	800959a <HAL_TIM_PWM_Stop+0xf6>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d02e      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2b04      	cmp	r3, #4
 8009580:	d02b      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b08      	cmp	r3, #8
 8009586:	d028      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2b0c      	cmp	r3, #12
 800958c:	d025      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b10      	cmp	r3, #16
 8009592:	d022      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b14      	cmp	r3, #20
 8009598:	d01f      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a57      	ldr	r2, [pc, #348]	@ (80096fc <HAL_TIM_PWM_Stop+0x258>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d105      	bne.n	80095b0 <HAL_TIM_PWM_Stop+0x10c>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d017      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b04      	cmp	r3, #4
 80095ae:	d014      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a52      	ldr	r2, [pc, #328]	@ (8009700 <HAL_TIM_PWM_Stop+0x25c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d102      	bne.n	80095c0 <HAL_TIM_PWM_Stop+0x11c>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00c      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a4f      	ldr	r2, [pc, #316]	@ (8009704 <HAL_TIM_PWM_Stop+0x260>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d102      	bne.n	80095d0 <HAL_TIM_PWM_Stop+0x12c>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d004      	beq.n	80095da <HAL_TIM_PWM_Stop+0x136>
 80095d0:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 80095d4:	484c      	ldr	r0, [pc, #304]	@ (8009708 <HAL_TIM_PWM_Stop+0x264>)
 80095d6:	f7fa fc59 	bl	8003e8c <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2200      	movs	r2, #0
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f001 fefe 	bl	800b3e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a3e      	ldr	r2, [pc, #248]	@ (80096e8 <HAL_TIM_PWM_Stop+0x244>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d013      	beq.n	800961a <HAL_TIM_PWM_Stop+0x176>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a40      	ldr	r2, [pc, #256]	@ (80096f8 <HAL_TIM_PWM_Stop+0x254>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d00e      	beq.n	800961a <HAL_TIM_PWM_Stop+0x176>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a3e      	ldr	r2, [pc, #248]	@ (80096fc <HAL_TIM_PWM_Stop+0x258>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d009      	beq.n	800961a <HAL_TIM_PWM_Stop+0x176>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a3d      	ldr	r2, [pc, #244]	@ (8009700 <HAL_TIM_PWM_Stop+0x25c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d004      	beq.n	800961a <HAL_TIM_PWM_Stop+0x176>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a3b      	ldr	r2, [pc, #236]	@ (8009704 <HAL_TIM_PWM_Stop+0x260>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d101      	bne.n	800961e <HAL_TIM_PWM_Stop+0x17a>
 800961a:	2301      	movs	r3, #1
 800961c:	e000      	b.n	8009620 <HAL_TIM_PWM_Stop+0x17c>
 800961e:	2300      	movs	r3, #0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d017      	beq.n	8009654 <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6a1a      	ldr	r2, [r3, #32]
 800962a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800962e:	4013      	ands	r3, r2
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10f      	bne.n	8009654 <HAL_TIM_PWM_Stop+0x1b0>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6a1a      	ldr	r2, [r3, #32]
 800963a:	f240 4344 	movw	r3, #1092	@ 0x444
 800963e:	4013      	ands	r3, r2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d107      	bne.n	8009654 <HAL_TIM_PWM_Stop+0x1b0>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009652:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6a1a      	ldr	r2, [r3, #32]
 800965a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800965e:	4013      	ands	r3, r2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10f      	bne.n	8009684 <HAL_TIM_PWM_Stop+0x1e0>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6a1a      	ldr	r2, [r3, #32]
 800966a:	f240 4344 	movw	r3, #1092	@ 0x444
 800966e:	4013      	ands	r3, r2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d107      	bne.n	8009684 <HAL_TIM_PWM_Stop+0x1e0>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0201 	bic.w	r2, r2, #1
 8009682:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d104      	bne.n	8009694 <HAL_TIM_PWM_Stop+0x1f0>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009692:	e023      	b.n	80096dc <HAL_TIM_PWM_Stop+0x238>
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b04      	cmp	r3, #4
 8009698:	d104      	bne.n	80096a4 <HAL_TIM_PWM_Stop+0x200>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096a2:	e01b      	b.n	80096dc <HAL_TIM_PWM_Stop+0x238>
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b08      	cmp	r3, #8
 80096a8:	d104      	bne.n	80096b4 <HAL_TIM_PWM_Stop+0x210>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096b2:	e013      	b.n	80096dc <HAL_TIM_PWM_Stop+0x238>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	2b0c      	cmp	r3, #12
 80096b8:	d104      	bne.n	80096c4 <HAL_TIM_PWM_Stop+0x220>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096c2:	e00b      	b.n	80096dc <HAL_TIM_PWM_Stop+0x238>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b10      	cmp	r3, #16
 80096c8:	d104      	bne.n	80096d4 <HAL_TIM_PWM_Stop+0x230>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096d2:	e003      	b.n	80096dc <HAL_TIM_PWM_Stop+0x238>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	40012c00 	.word	0x40012c00
 80096ec:	40000400 	.word	0x40000400
 80096f0:	40000800 	.word	0x40000800
 80096f4:	40000c00 	.word	0x40000c00
 80096f8:	40013400 	.word	0x40013400
 80096fc:	40014000 	.word	0x40014000
 8009700:	40014400 	.word	0x40014400
 8009704:	40014800 	.word	0x40014800
 8009708:	0800e234 	.word	0x0800e234

0800970c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e1b0      	b.n	8009a82 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a7f      	ldr	r2, [pc, #508]	@ (8009924 <HAL_TIM_Encoder_Init+0x218>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d01d      	beq.n	8009766 <HAL_TIM_Encoder_Init+0x5a>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009732:	d018      	beq.n	8009766 <HAL_TIM_Encoder_Init+0x5a>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a7b      	ldr	r2, [pc, #492]	@ (8009928 <HAL_TIM_Encoder_Init+0x21c>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d013      	beq.n	8009766 <HAL_TIM_Encoder_Init+0x5a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a7a      	ldr	r2, [pc, #488]	@ (800992c <HAL_TIM_Encoder_Init+0x220>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d00e      	beq.n	8009766 <HAL_TIM_Encoder_Init+0x5a>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a78      	ldr	r2, [pc, #480]	@ (8009930 <HAL_TIM_Encoder_Init+0x224>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d009      	beq.n	8009766 <HAL_TIM_Encoder_Init+0x5a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a77      	ldr	r2, [pc, #476]	@ (8009934 <HAL_TIM_Encoder_Init+0x228>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d004      	beq.n	8009766 <HAL_TIM_Encoder_Init+0x5a>
 800975c:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8009760:	4875      	ldr	r0, [pc, #468]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 8009762:	f7fa fb93 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d014      	beq.n	8009798 <HAL_TIM_Encoder_Init+0x8c>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	2b10      	cmp	r3, #16
 8009774:	d010      	beq.n	8009798 <HAL_TIM_Encoder_Init+0x8c>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	2b20      	cmp	r3, #32
 800977c:	d00c      	beq.n	8009798 <HAL_TIM_Encoder_Init+0x8c>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	2b40      	cmp	r3, #64	@ 0x40
 8009784:	d008      	beq.n	8009798 <HAL_TIM_Encoder_Init+0x8c>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	2b60      	cmp	r3, #96	@ 0x60
 800978c:	d004      	beq.n	8009798 <HAL_TIM_Encoder_Init+0x8c>
 800978e:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8009792:	4869      	ldr	r0, [pc, #420]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 8009794:	f7fa fb7a 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00e      	beq.n	80097be <HAL_TIM_Encoder_Init+0xb2>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097a8:	d009      	beq.n	80097be <HAL_TIM_Encoder_Init+0xb2>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097b2:	d004      	beq.n	80097be <HAL_TIM_Encoder_Init+0xb2>
 80097b4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80097b8:	485f      	ldr	r0, [pc, #380]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 80097ba:	f7fa fb67 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d008      	beq.n	80097d8 <HAL_TIM_Encoder_Init+0xcc>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	2b80      	cmp	r3, #128	@ 0x80
 80097cc:	d004      	beq.n	80097d8 <HAL_TIM_Encoder_Init+0xcc>
 80097ce:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 80097d2:	4859      	ldr	r0, [pc, #356]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 80097d4:	f7fa fb5a 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d00c      	beq.n	80097fa <HAL_TIM_Encoder_Init+0xee>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d008      	beq.n	80097fa <HAL_TIM_Encoder_Init+0xee>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d004      	beq.n	80097fa <HAL_TIM_Encoder_Init+0xee>
 80097f0:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 80097f4:	4850      	ldr	r0, [pc, #320]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 80097f6:	f7fa fb49 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d00c      	beq.n	800981c <HAL_TIM_Encoder_Init+0x110>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	2b02      	cmp	r3, #2
 8009808:	d008      	beq.n	800981c <HAL_TIM_Encoder_Init+0x110>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	2b03      	cmp	r3, #3
 8009810:	d004      	beq.n	800981c <HAL_TIM_Encoder_Init+0x110>
 8009812:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8009816:	4848      	ldr	r0, [pc, #288]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 8009818:	f7fa fb38 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d00c      	beq.n	800983e <HAL_TIM_Encoder_Init+0x132>
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b02      	cmp	r3, #2
 800982a:	d008      	beq.n	800983e <HAL_TIM_Encoder_Init+0x132>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d004      	beq.n	800983e <HAL_TIM_Encoder_Init+0x132>
 8009834:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8009838:	483f      	ldr	r0, [pc, #252]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 800983a:	f7fa fb27 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d008      	beq.n	8009858 <HAL_TIM_Encoder_Init+0x14c>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2b02      	cmp	r3, #2
 800984c:	d004      	beq.n	8009858 <HAL_TIM_Encoder_Init+0x14c>
 800984e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8009852:	4839      	ldr	r0, [pc, #228]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 8009854:	f7fa fb1a 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d008      	beq.n	8009872 <HAL_TIM_Encoder_Init+0x166>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	2b02      	cmp	r3, #2
 8009866:	d004      	beq.n	8009872 <HAL_TIM_Encoder_Init+0x166>
 8009868:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800986c:	4832      	ldr	r0, [pc, #200]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 800986e:	f7fa fb0d 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d010      	beq.n	800989c <HAL_TIM_Encoder_Init+0x190>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	2b04      	cmp	r3, #4
 8009880:	d00c      	beq.n	800989c <HAL_TIM_Encoder_Init+0x190>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	2b08      	cmp	r3, #8
 8009888:	d008      	beq.n	800989c <HAL_TIM_Encoder_Init+0x190>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	2b0c      	cmp	r3, #12
 8009890:	d004      	beq.n	800989c <HAL_TIM_Encoder_Init+0x190>
 8009892:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8009896:	4828      	ldr	r0, [pc, #160]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 8009898:	f7fa faf8 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d010      	beq.n	80098c6 <HAL_TIM_Encoder_Init+0x1ba>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d00c      	beq.n	80098c6 <HAL_TIM_Encoder_Init+0x1ba>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	2b08      	cmp	r3, #8
 80098b2:	d008      	beq.n	80098c6 <HAL_TIM_Encoder_Init+0x1ba>
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	2b0c      	cmp	r3, #12
 80098ba:	d004      	beq.n	80098c6 <HAL_TIM_Encoder_Init+0x1ba>
 80098bc:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80098c0:	481d      	ldr	r0, [pc, #116]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 80098c2:	f7fa fae3 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	2b0f      	cmp	r3, #15
 80098cc:	d904      	bls.n	80098d8 <HAL_TIM_Encoder_Init+0x1cc>
 80098ce:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80098d2:	4819      	ldr	r0, [pc, #100]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 80098d4:	f7fa fada 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	2b0f      	cmp	r3, #15
 80098de:	d904      	bls.n	80098ea <HAL_TIM_Encoder_Init+0x1de>
 80098e0:	f640 31ef 	movw	r1, #3055	@ 0xbef
 80098e4:	4814      	ldr	r0, [pc, #80]	@ (8009938 <HAL_TIM_Encoder_Init+0x22c>)
 80098e6:	f7fa fad1 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098f2:	d004      	beq.n	80098fe <HAL_TIM_Encoder_Init+0x1f2>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a0d      	ldr	r2, [pc, #52]	@ (8009930 <HAL_TIM_Encoder_Init+0x224>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d107      	bne.n	800990e <HAL_TIM_Encoder_Init+0x202>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	bf14      	ite	ne
 8009906:	2301      	movne	r3, #1
 8009908:	2300      	moveq	r3, #0
 800990a:	b2db      	uxtb	r3, r3
 800990c:	e01a      	b.n	8009944 <HAL_TIM_Encoder_Init+0x238>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d012      	beq.n	800993c <HAL_TIM_Encoder_Init+0x230>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800991e:	d20d      	bcs.n	800993c <HAL_TIM_Encoder_Init+0x230>
 8009920:	2301      	movs	r3, #1
 8009922:	e00c      	b.n	800993e <HAL_TIM_Encoder_Init+0x232>
 8009924:	40012c00 	.word	0x40012c00
 8009928:	40000400 	.word	0x40000400
 800992c:	40000800 	.word	0x40000800
 8009930:	40000c00 	.word	0x40000c00
 8009934:	40013400 	.word	0x40013400
 8009938:	0800e234 	.word	0x0800e234
 800993c:	2300      	movs	r3, #0
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <HAL_TIM_Encoder_Init+0x246>
 8009948:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800994c:	484f      	ldr	r0, [pc, #316]	@ (8009a8c <HAL_TIM_Encoder_Init+0x380>)
 800994e:	f7fa fa9d 	bl	8003e8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7fa fec4 	bl	80046f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	6812      	ldr	r2, [r2, #0]
 800997e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009982:	f023 0307 	bic.w	r3, r3, #7
 8009986:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3304      	adds	r3, #4
 8009990:	4619      	mov	r1, r3
 8009992:	4610      	mov	r0, r2
 8009994:	f001 f886 	bl	800aaa4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099c0:	f023 0303 	bic.w	r3, r3, #3
 80099c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	689a      	ldr	r2, [r3, #8]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	021b      	lsls	r3, r3, #8
 80099d0:	4313      	orrs	r3, r2
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80099de:	f023 030c 	bic.w	r3, r3, #12
 80099e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80099ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	4313      	orrs	r3, r2
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	011a      	lsls	r2, r3, #4
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	031b      	lsls	r3, r3, #12
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009a1c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009a24:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	011b      	lsls	r3, r3, #4
 8009a30:	4313      	orrs	r3, r2
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	0800e234 	.word	0x0800e234

08009a90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009aa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009aa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ab8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a4d      	ldr	r2, [pc, #308]	@ (8009bf4 <HAL_TIM_Encoder_Start+0x164>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d01d      	beq.n	8009b00 <HAL_TIM_Encoder_Start+0x70>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009acc:	d018      	beq.n	8009b00 <HAL_TIM_Encoder_Start+0x70>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a49      	ldr	r2, [pc, #292]	@ (8009bf8 <HAL_TIM_Encoder_Start+0x168>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d013      	beq.n	8009b00 <HAL_TIM_Encoder_Start+0x70>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a47      	ldr	r2, [pc, #284]	@ (8009bfc <HAL_TIM_Encoder_Start+0x16c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d00e      	beq.n	8009b00 <HAL_TIM_Encoder_Start+0x70>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a46      	ldr	r2, [pc, #280]	@ (8009c00 <HAL_TIM_Encoder_Start+0x170>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d009      	beq.n	8009b00 <HAL_TIM_Encoder_Start+0x70>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a44      	ldr	r2, [pc, #272]	@ (8009c04 <HAL_TIM_Encoder_Start+0x174>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d004      	beq.n	8009b00 <HAL_TIM_Encoder_Start+0x70>
 8009af6:	f640 41a1 	movw	r1, #3233	@ 0xca1
 8009afa:	4843      	ldr	r0, [pc, #268]	@ (8009c08 <HAL_TIM_Encoder_Start+0x178>)
 8009afc:	f7fa f9c6 	bl	8003e8c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d110      	bne.n	8009b28 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d102      	bne.n	8009b12 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b0c:	7b7b      	ldrb	r3, [r7, #13]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d001      	beq.n	8009b16 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e069      	b.n	8009bea <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2202      	movs	r2, #2
 8009b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b26:	e031      	b.n	8009b8c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	d110      	bne.n	8009b50 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d102      	bne.n	8009b3a <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b34:	7b3b      	ldrb	r3, [r7, #12]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d001      	beq.n	8009b3e <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e055      	b.n	8009bea <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2202      	movs	r2, #2
 8009b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2202      	movs	r2, #2
 8009b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b4e:	e01d      	b.n	8009b8c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d108      	bne.n	8009b68 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d105      	bne.n	8009b68 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b5c:	7b7b      	ldrb	r3, [r7, #13]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d102      	bne.n	8009b68 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b62:	7b3b      	ldrb	r3, [r7, #12]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d001      	beq.n	8009b6c <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e03e      	b.n	8009bea <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <HAL_TIM_Encoder_Start+0x10a>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d008      	beq.n	8009baa <HAL_TIM_Encoder_Start+0x11a>
 8009b98:	e00f      	b.n	8009bba <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 fc1e 	bl	800b3e4 <TIM_CCxChannelCmd>
      break;
 8009ba8:	e016      	b.n	8009bd8 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	2104      	movs	r1, #4
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 fc16 	bl	800b3e4 <TIM_CCxChannelCmd>
      break;
 8009bb8:	e00e      	b.n	8009bd8 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 fc0e 	bl	800b3e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	2104      	movs	r1, #4
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 fc07 	bl	800b3e4 <TIM_CCxChannelCmd>
      break;
 8009bd6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0201 	orr.w	r2, r2, #1
 8009be6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40012c00 	.word	0x40012c00
 8009bf8:	40000400 	.word	0x40000400
 8009bfc:	40000800 	.word	0x40000800
 8009c00:	40000c00 	.word	0x40000c00
 8009c04:	40013400 	.word	0x40013400
 8009c08:	0800e234 	.word	0x0800e234

08009c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f003 0302 	and.w	r3, r3, #2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d020      	beq.n	8009c70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01b      	beq.n	8009c70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f06f 0202 	mvn.w	r2, #2
 8009c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	f003 0303 	and.w	r3, r3, #3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 ff06 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 8009c5c:	e005      	b.n	8009c6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fef8 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 ff09 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f003 0304 	and.w	r3, r3, #4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d020      	beq.n	8009cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01b      	beq.n	8009cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f06f 0204 	mvn.w	r2, #4
 8009c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2202      	movs	r2, #2
 8009c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d003      	beq.n	8009caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fee0 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 8009ca8:	e005      	b.n	8009cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fed2 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fee3 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f003 0308 	and.w	r3, r3, #8
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d020      	beq.n	8009d08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f003 0308 	and.w	r3, r3, #8
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d01b      	beq.n	8009d08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f06f 0208 	mvn.w	r2, #8
 8009cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2204      	movs	r2, #4
 8009cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	f003 0303 	and.w	r3, r3, #3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 feba 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 8009cf4:	e005      	b.n	8009d02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 feac 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 febd 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f003 0310 	and.w	r3, r3, #16
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d020      	beq.n	8009d54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d01b      	beq.n	8009d54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f06f 0210 	mvn.w	r2, #16
 8009d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2208      	movs	r2, #8
 8009d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fe94 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 8009d40:	e005      	b.n	8009d4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fe86 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fe97 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00c      	beq.n	8009d78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d007      	beq.n	8009d78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f06f 0201 	mvn.w	r2, #1
 8009d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7f9 facc 	bl	8003310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d104      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00c      	beq.n	8009da6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d007      	beq.n	8009da6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 fe2f 	bl	800ba04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00c      	beq.n	8009dca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d007      	beq.n	8009dca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 fe27 	bl	800ba18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00c      	beq.n	8009dee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fe51 	bl	800aa90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f003 0320 	and.w	r3, r3, #32
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00c      	beq.n	8009e12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f06f 0220 	mvn.w	r2, #32
 8009e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 fdef 	bl	800b9f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d016      	beq.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d013      	beq.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d010      	beq.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b0c      	cmp	r3, #12
 8009e42:	d00d      	beq.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b10      	cmp	r3, #16
 8009e48:	d00a      	beq.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b14      	cmp	r3, #20
 8009e4e:	d007      	beq.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b3c      	cmp	r3, #60	@ 0x3c
 8009e54:	d004      	beq.n	8009e60 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009e56:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8009e5a:	488b      	ldr	r0, [pc, #556]	@ (800a088 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009e5c:	f7fa f816 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b60      	cmp	r3, #96	@ 0x60
 8009e66:	d01c      	beq.n	8009ea2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b70      	cmp	r3, #112	@ 0x70
 8009e6e:	d018      	beq.n	8009ea2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a85      	ldr	r2, [pc, #532]	@ (800a08c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d013      	beq.n	8009ea2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a84      	ldr	r2, [pc, #528]	@ (800a090 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d00e      	beq.n	8009ea2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a82      	ldr	r2, [pc, #520]	@ (800a094 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d009      	beq.n	8009ea2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a81      	ldr	r2, [pc, #516]	@ (800a098 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d004      	beq.n	8009ea2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009e98:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8009e9c:	487a      	ldr	r0, [pc, #488]	@ (800a088 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009e9e:	f7f9 fff5 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d008      	beq.n	8009ebc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d004      	beq.n	8009ebc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8009eb2:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8009eb6:	4874      	ldr	r0, [pc, #464]	@ (800a088 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009eb8:	f7f9 ffe8 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d008      	beq.n	8009ed6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	2b04      	cmp	r3, #4
 8009eca:	d004      	beq.n	8009ed6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8009ecc:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8009ed0:	486d      	ldr	r0, [pc, #436]	@ (800a088 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009ed2:	f7f9 ffdb 	bl	8003e8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e1d9      	b.n	800a298 <HAL_TIM_PWM_ConfigChannel+0x47c>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b14      	cmp	r3, #20
 8009ef0:	f200 81ca 	bhi.w	800a288 <HAL_TIM_PWM_ConfigChannel+0x46c>
 8009ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8009efc <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8009ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efa:	bf00      	nop
 8009efc:	08009f51 	.word	0x08009f51
 8009f00:	0800a289 	.word	0x0800a289
 8009f04:	0800a289 	.word	0x0800a289
 8009f08:	0800a289 	.word	0x0800a289
 8009f0c:	08009ff5 	.word	0x08009ff5
 8009f10:	0800a289 	.word	0x0800a289
 8009f14:	0800a289 	.word	0x0800a289
 8009f18:	0800a289 	.word	0x0800a289
 8009f1c:	0800a0bd 	.word	0x0800a0bd
 8009f20:	0800a289 	.word	0x0800a289
 8009f24:	0800a289 	.word	0x0800a289
 8009f28:	0800a289 	.word	0x0800a289
 8009f2c:	0800a143 	.word	0x0800a143
 8009f30:	0800a289 	.word	0x0800a289
 8009f34:	0800a289 	.word	0x0800a289
 8009f38:	0800a289 	.word	0x0800a289
 8009f3c:	0800a1cb 	.word	0x0800a1cb
 8009f40:	0800a289 	.word	0x0800a289
 8009f44:	0800a289 	.word	0x0800a289
 8009f48:	0800a289 	.word	0x0800a289
 8009f4c:	0800a229 	.word	0x0800a229
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a51      	ldr	r2, [pc, #324]	@ (800a09c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d02c      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f62:	d027      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a4d      	ldr	r2, [pc, #308]	@ (800a0a0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d022      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a4c      	ldr	r2, [pc, #304]	@ (800a0a4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d01d      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a4a      	ldr	r2, [pc, #296]	@ (800a0a8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d018      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a49      	ldr	r2, [pc, #292]	@ (800a0ac <HAL_TIM_PWM_ConfigChannel+0x290>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a47      	ldr	r2, [pc, #284]	@ (800a0b0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00e      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a46      	ldr	r2, [pc, #280]	@ (800a0b4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d009      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a44      	ldr	r2, [pc, #272]	@ (800a0b8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d004      	beq.n	8009fb4 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009faa:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8009fae:	4836      	ldr	r0, [pc, #216]	@ (800a088 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009fb0:	f7f9 ff6c 	bl	8003e8c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68b9      	ldr	r1, [r7, #8]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fe18 	bl	800abf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	699a      	ldr	r2, [r3, #24]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0208 	orr.w	r2, r2, #8
 8009fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	699a      	ldr	r2, [r3, #24]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f022 0204 	bic.w	r2, r2, #4
 8009fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6999      	ldr	r1, [r3, #24]
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	619a      	str	r2, [r3, #24]
      break;
 8009ff2:	e14c      	b.n	800a28e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a28      	ldr	r2, [pc, #160]	@ (800a09c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d022      	beq.n	800a044 <HAL_TIM_PWM_ConfigChannel+0x228>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a006:	d01d      	beq.n	800a044 <HAL_TIM_PWM_ConfigChannel+0x228>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a24      	ldr	r2, [pc, #144]	@ (800a0a0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d018      	beq.n	800a044 <HAL_TIM_PWM_ConfigChannel+0x228>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a23      	ldr	r2, [pc, #140]	@ (800a0a4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <HAL_TIM_PWM_ConfigChannel+0x228>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a21      	ldr	r2, [pc, #132]	@ (800a0a8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00e      	beq.n	800a044 <HAL_TIM_PWM_ConfigChannel+0x228>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a20      	ldr	r2, [pc, #128]	@ (800a0ac <HAL_TIM_PWM_ConfigChannel+0x290>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d009      	beq.n	800a044 <HAL_TIM_PWM_ConfigChannel+0x228>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a1e      	ldr	r2, [pc, #120]	@ (800a0b0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d004      	beq.n	800a044 <HAL_TIM_PWM_ConfigChannel+0x228>
 800a03a:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800a03e:	4812      	ldr	r0, [pc, #72]	@ (800a088 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800a040:	f7f9 ff24 	bl	8003e8c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68b9      	ldr	r1, [r7, #8]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fe8a 	bl	800ad64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699a      	ldr	r2, [r3, #24]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a05e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699a      	ldr	r2, [r3, #24]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a06e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6999      	ldr	r1, [r3, #24]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	021a      	lsls	r2, r3, #8
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	619a      	str	r2, [r3, #24]
      break;
 800a084:	e103      	b.n	800a28e <HAL_TIM_PWM_ConfigChannel+0x472>
 800a086:	bf00      	nop
 800a088:	0800e234 	.word	0x0800e234
 800a08c:	00010040 	.word	0x00010040
 800a090:	00010050 	.word	0x00010050
 800a094:	00010060 	.word	0x00010060
 800a098:	00010070 	.word	0x00010070
 800a09c:	40012c00 	.word	0x40012c00
 800a0a0:	40000400 	.word	0x40000400
 800a0a4:	40000800 	.word	0x40000800
 800a0a8:	40000c00 	.word	0x40000c00
 800a0ac:	40013400 	.word	0x40013400
 800a0b0:	40014000 	.word	0x40014000
 800a0b4:	40014400 	.word	0x40014400
 800a0b8:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a77      	ldr	r2, [pc, #476]	@ (800a2a0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d01d      	beq.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ce:	d018      	beq.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a73      	ldr	r2, [pc, #460]	@ (800a2a4 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d013      	beq.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a72      	ldr	r2, [pc, #456]	@ (800a2a8 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00e      	beq.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a70      	ldr	r2, [pc, #448]	@ (800a2ac <HAL_TIM_PWM_ConfigChannel+0x490>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d009      	beq.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a6f      	ldr	r2, [pc, #444]	@ (800a2b0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d004      	beq.n	800a102 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800a0f8:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800a0fc:	486d      	ldr	r0, [pc, #436]	@ (800a2b4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800a0fe:	f7f9 fec5 	bl	8003e8c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fedd 	bl	800aec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0208 	orr.w	r2, r2, #8
 800a11c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0204 	bic.w	r2, r2, #4
 800a12c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	69d9      	ldr	r1, [r3, #28]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	691a      	ldr	r2, [r3, #16]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	430a      	orrs	r2, r1
 800a13e:	61da      	str	r2, [r3, #28]
      break;
 800a140:	e0a5      	b.n	800a28e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a56      	ldr	r2, [pc, #344]	@ (800a2a0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d01d      	beq.n	800a188 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a154:	d018      	beq.n	800a188 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a52      	ldr	r2, [pc, #328]	@ (800a2a4 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d013      	beq.n	800a188 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a50      	ldr	r2, [pc, #320]	@ (800a2a8 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d00e      	beq.n	800a188 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a4f      	ldr	r2, [pc, #316]	@ (800a2ac <HAL_TIM_PWM_ConfigChannel+0x490>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d009      	beq.n	800a188 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a4d      	ldr	r2, [pc, #308]	@ (800a2b0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d004      	beq.n	800a188 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a17e:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800a182:	484c      	ldr	r0, [pc, #304]	@ (800a2b4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800a184:	f7f9 fe82 	bl	8003e8c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68b9      	ldr	r1, [r7, #8]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 ff4c 	bl	800b02c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	69da      	ldr	r2, [r3, #28]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	69da      	ldr	r2, [r3, #28]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	69d9      	ldr	r1, [r3, #28]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	021a      	lsls	r2, r3, #8
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	61da      	str	r2, [r3, #28]
      break;
 800a1c8:	e061      	b.n	800a28e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a34      	ldr	r2, [pc, #208]	@ (800a2a0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d009      	beq.n	800a1e8 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a35      	ldr	r2, [pc, #212]	@ (800a2b0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d004      	beq.n	800a1e8 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800a1de:	f241 1104 	movw	r1, #4356	@ 0x1104
 800a1e2:	4834      	ldr	r0, [pc, #208]	@ (800a2b4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800a1e4:	f7f9 fe52 	bl	8003e8c <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 ff94 	bl	800b11c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 0208 	orr.w	r2, r2, #8
 800a202:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f022 0204 	bic.w	r2, r2, #4
 800a212:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	691a      	ldr	r2, [r3, #16]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a226:	e032      	b.n	800a28e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d009      	beq.n	800a246 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a1e      	ldr	r2, [pc, #120]	@ (800a2b0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d004      	beq.n	800a246 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800a23c:	f241 1115 	movw	r1, #4373	@ 0x1115
 800a240:	481c      	ldr	r0, [pc, #112]	@ (800a2b4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800a242:	f7f9 fe23 	bl	8003e8c <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 ffc9 	bl	800b1e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a260:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a270:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	021a      	lsls	r2, r3, #8
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a286:	e002      	b.n	800a28e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	75fb      	strb	r3, [r7, #23]
      break;
 800a28c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a296:	7dfb      	ldrb	r3, [r7, #23]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	40012c00 	.word	0x40012c00
 800a2a4:	40000400 	.word	0x40000400
 800a2a8:	40000800 	.word	0x40000800
 800a2ac:	40000c00 	.word	0x40000c00
 800a2b0:	40013400 	.word	0x40013400
 800a2b4:	0800e234 	.word	0x0800e234

0800a2b8 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a33      	ldr	r2, [pc, #204]	@ (800a394 <HAL_TIM_GenerateEvent+0xdc>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d036      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2d4:	d031      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a2f      	ldr	r2, [pc, #188]	@ (800a398 <HAL_TIM_GenerateEvent+0xe0>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d02c      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a2d      	ldr	r2, [pc, #180]	@ (800a39c <HAL_TIM_GenerateEvent+0xe4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d027      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a2c      	ldr	r2, [pc, #176]	@ (800a3a0 <HAL_TIM_GenerateEvent+0xe8>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d022      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a2a      	ldr	r2, [pc, #168]	@ (800a3a4 <HAL_TIM_GenerateEvent+0xec>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d01d      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a29      	ldr	r2, [pc, #164]	@ (800a3a8 <HAL_TIM_GenerateEvent+0xf0>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d018      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a27      	ldr	r2, [pc, #156]	@ (800a3ac <HAL_TIM_GenerateEvent+0xf4>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d013      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a26      	ldr	r2, [pc, #152]	@ (800a3b0 <HAL_TIM_GenerateEvent+0xf8>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d00e      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a24      	ldr	r2, [pc, #144]	@ (800a3b4 <HAL_TIM_GenerateEvent+0xfc>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d009      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a23      	ldr	r2, [pc, #140]	@ (800a3b8 <HAL_TIM_GenerateEvent+0x100>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d004      	beq.n	800a33a <HAL_TIM_GenerateEvent+0x82>
 800a330:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800a334:	4821      	ldr	r0, [pc, #132]	@ (800a3bc <HAL_TIM_GenerateEvent+0x104>)
 800a336:	f7f9 fda9 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a340:	d202      	bcs.n	800a348 <HAL_TIM_GenerateEvent+0x90>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d104      	bne.n	800a352 <HAL_TIM_GenerateEvent+0x9a>
 800a348:	f241 4181 	movw	r1, #5249	@ 0x1481
 800a34c:	481b      	ldr	r0, [pc, #108]	@ (800a3bc <HAL_TIM_GenerateEvent+0x104>)
 800a34e:	f7f9 fd9d 	bl	8003e8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d101      	bne.n	800a360 <HAL_TIM_GenerateEvent+0xa8>
 800a35c:	2302      	movs	r3, #2
 800a35e:	e014      	b.n	800a38a <HAL_TIM_GenerateEvent+0xd2>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	40012c00 	.word	0x40012c00
 800a398:	40000400 	.word	0x40000400
 800a39c:	40000800 	.word	0x40000800
 800a3a0:	40000c00 	.word	0x40000c00
 800a3a4:	40001000 	.word	0x40001000
 800a3a8:	40001400 	.word	0x40001400
 800a3ac:	40013400 	.word	0x40013400
 800a3b0:	40014000 	.word	0x40014000
 800a3b4:	40014400 	.word	0x40014400
 800a3b8:	40014800 	.word	0x40014800
 800a3bc:	0800e234 	.word	0x0800e234

0800a3c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d101      	bne.n	800a3dc <HAL_TIM_ConfigClockSource+0x1c>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e329      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x670>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3f4:	d029      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b70      	cmp	r3, #112	@ 0x70
 800a3fc:	d025      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a406:	d020      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b40      	cmp	r3, #64	@ 0x40
 800a40e:	d01c      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b50      	cmp	r3, #80	@ 0x50
 800a416:	d018      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b60      	cmp	r3, #96	@ 0x60
 800a41e:	d014      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d010      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b10      	cmp	r3, #16
 800a42e:	d00c      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b20      	cmp	r3, #32
 800a436:	d008      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b30      	cmp	r3, #48	@ 0x30
 800a43e:	d004      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x8a>
 800a440:	f241 5156 	movw	r1, #5462	@ 0x1556
 800a444:	4888      	ldr	r0, [pc, #544]	@ (800a668 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a446:	f7f9 fd21 	bl	8003e8c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a458:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a45c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a464:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a476:	f000 810d 	beq.w	800a694 <HAL_TIM_ConfigClockSource+0x2d4>
 800a47a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a47e:	f200 82ca 	bhi.w	800aa16 <HAL_TIM_ConfigClockSource+0x656>
 800a482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a486:	d02d      	beq.n	800a4e4 <HAL_TIM_ConfigClockSource+0x124>
 800a488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a48c:	f200 82c3 	bhi.w	800aa16 <HAL_TIM_ConfigClockSource+0x656>
 800a490:	2b70      	cmp	r3, #112	@ 0x70
 800a492:	d06f      	beq.n	800a574 <HAL_TIM_ConfigClockSource+0x1b4>
 800a494:	2b70      	cmp	r3, #112	@ 0x70
 800a496:	f200 82be 	bhi.w	800aa16 <HAL_TIM_ConfigClockSource+0x656>
 800a49a:	2b60      	cmp	r3, #96	@ 0x60
 800a49c:	f000 81d4 	beq.w	800a848 <HAL_TIM_ConfigClockSource+0x488>
 800a4a0:	2b60      	cmp	r3, #96	@ 0x60
 800a4a2:	f200 82b8 	bhi.w	800aa16 <HAL_TIM_ConfigClockSource+0x656>
 800a4a6:	2b50      	cmp	r3, #80	@ 0x50
 800a4a8:	f000 8165 	beq.w	800a776 <HAL_TIM_ConfigClockSource+0x3b6>
 800a4ac:	2b50      	cmp	r3, #80	@ 0x50
 800a4ae:	f200 82b2 	bhi.w	800aa16 <HAL_TIM_ConfigClockSource+0x656>
 800a4b2:	2b40      	cmp	r3, #64	@ 0x40
 800a4b4:	f000 8223 	beq.w	800a8fe <HAL_TIM_ConfigClockSource+0x53e>
 800a4b8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ba:	f200 82ac 	bhi.w	800aa16 <HAL_TIM_ConfigClockSource+0x656>
 800a4be:	2b30      	cmp	r3, #48	@ 0x30
 800a4c0:	f000 8278 	beq.w	800a9b4 <HAL_TIM_ConfigClockSource+0x5f4>
 800a4c4:	2b30      	cmp	r3, #48	@ 0x30
 800a4c6:	f200 82a6 	bhi.w	800aa16 <HAL_TIM_ConfigClockSource+0x656>
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	f000 8272 	beq.w	800a9b4 <HAL_TIM_ConfigClockSource+0x5f4>
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	f200 82a0 	bhi.w	800aa16 <HAL_TIM_ConfigClockSource+0x656>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 826c 	beq.w	800a9b4 <HAL_TIM_ConfigClockSource+0x5f4>
 800a4dc:	2b10      	cmp	r3, #16
 800a4de:	f000 8269 	beq.w	800a9b4 <HAL_TIM_ConfigClockSource+0x5f4>
 800a4e2:	e298      	b.n	800aa16 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a60      	ldr	r2, [pc, #384]	@ (800a66c <HAL_TIM_ConfigClockSource+0x2ac>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	f000 8296 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f8:	f000 8290 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a5b      	ldr	r2, [pc, #364]	@ (800a670 <HAL_TIM_ConfigClockSource+0x2b0>)
 800a502:	4293      	cmp	r3, r2
 800a504:	f000 828a 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a59      	ldr	r2, [pc, #356]	@ (800a674 <HAL_TIM_ConfigClockSource+0x2b4>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	f000 8284 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a57      	ldr	r2, [pc, #348]	@ (800a678 <HAL_TIM_ConfigClockSource+0x2b8>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	f000 827e 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a55      	ldr	r2, [pc, #340]	@ (800a67c <HAL_TIM_ConfigClockSource+0x2bc>)
 800a526:	4293      	cmp	r3, r2
 800a528:	f000 8278 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a53      	ldr	r2, [pc, #332]	@ (800a680 <HAL_TIM_ConfigClockSource+0x2c0>)
 800a532:	4293      	cmp	r3, r2
 800a534:	f000 8272 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a51      	ldr	r2, [pc, #324]	@ (800a684 <HAL_TIM_ConfigClockSource+0x2c4>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	f000 826c 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a4f      	ldr	r2, [pc, #316]	@ (800a688 <HAL_TIM_ConfigClockSource+0x2c8>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	f000 8266 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a4d      	ldr	r2, [pc, #308]	@ (800a68c <HAL_TIM_ConfigClockSource+0x2cc>)
 800a556:	4293      	cmp	r3, r2
 800a558:	f000 8260 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a4b      	ldr	r2, [pc, #300]	@ (800a690 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	f000 825a 	beq.w	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
 800a568:	f241 5162 	movw	r1, #5474	@ 0x1562
 800a56c:	483e      	ldr	r0, [pc, #248]	@ (800a668 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a56e:	f7f9 fc8d 	bl	8003e8c <assert_failed>
      break;
 800a572:	e253      	b.n	800aa1c <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a3c      	ldr	r2, [pc, #240]	@ (800a66c <HAL_TIM_ConfigClockSource+0x2ac>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d022      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0x204>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a586:	d01d      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0x204>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a38      	ldr	r2, [pc, #224]	@ (800a670 <HAL_TIM_ConfigClockSource+0x2b0>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d018      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0x204>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a37      	ldr	r2, [pc, #220]	@ (800a674 <HAL_TIM_ConfigClockSource+0x2b4>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d013      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0x204>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a35      	ldr	r2, [pc, #212]	@ (800a678 <HAL_TIM_ConfigClockSource+0x2b8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00e      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0x204>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a36      	ldr	r2, [pc, #216]	@ (800a684 <HAL_TIM_ConfigClockSource+0x2c4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d009      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0x204>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a34      	ldr	r2, [pc, #208]	@ (800a688 <HAL_TIM_ConfigClockSource+0x2c8>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d004      	beq.n	800a5c4 <HAL_TIM_ConfigClockSource+0x204>
 800a5ba:	f241 5169 	movw	r1, #5481	@ 0x1569
 800a5be:	482a      	ldr	r0, [pc, #168]	@ (800a668 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a5c0:	f7f9 fc64 	bl	8003e8c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d013      	beq.n	800a5f4 <HAL_TIM_ConfigClockSource+0x234>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5d4:	d00e      	beq.n	800a5f4 <HAL_TIM_ConfigClockSource+0x234>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5de:	d009      	beq.n	800a5f4 <HAL_TIM_ConfigClockSource+0x234>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5e8:	d004      	beq.n	800a5f4 <HAL_TIM_ConfigClockSource+0x234>
 800a5ea:	f241 516c 	movw	r1, #5484	@ 0x156c
 800a5ee:	481e      	ldr	r0, [pc, #120]	@ (800a668 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a5f0:	f7f9 fc4c 	bl	8003e8c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5fc:	d014      	beq.n	800a628 <HAL_TIM_ConfigClockSource+0x268>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d010      	beq.n	800a628 <HAL_TIM_ConfigClockSource+0x268>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00c      	beq.n	800a628 <HAL_TIM_ConfigClockSource+0x268>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d008      	beq.n	800a628 <HAL_TIM_ConfigClockSource+0x268>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2b0a      	cmp	r3, #10
 800a61c:	d004      	beq.n	800a628 <HAL_TIM_ConfigClockSource+0x268>
 800a61e:	f241 516d 	movw	r1, #5485	@ 0x156d
 800a622:	4811      	ldr	r0, [pc, #68]	@ (800a668 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a624:	f7f9 fc32 	bl	8003e8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	2b0f      	cmp	r3, #15
 800a62e:	d904      	bls.n	800a63a <HAL_TIM_ConfigClockSource+0x27a>
 800a630:	f241 516e 	movw	r1, #5486	@ 0x156e
 800a634:	480c      	ldr	r0, [pc, #48]	@ (800a668 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a636:	f7f9 fc29 	bl	8003e8c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a64a:	f000 feab 	bl	800b3a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a65c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	609a      	str	r2, [r3, #8]
      break;
 800a666:	e1da      	b.n	800aa1e <HAL_TIM_ConfigClockSource+0x65e>
 800a668:	0800e234 	.word	0x0800e234
 800a66c:	40012c00 	.word	0x40012c00
 800a670:	40000400 	.word	0x40000400
 800a674:	40000800 	.word	0x40000800
 800a678:	40000c00 	.word	0x40000c00
 800a67c:	40001000 	.word	0x40001000
 800a680:	40001400 	.word	0x40001400
 800a684:	40013400 	.word	0x40013400
 800a688:	40014000 	.word	0x40014000
 800a68c:	40014400 	.word	0x40014400
 800a690:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a64      	ldr	r2, [pc, #400]	@ (800a82c <HAL_TIM_ConfigClockSource+0x46c>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d01d      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x31a>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6a6:	d018      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x31a>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a60      	ldr	r2, [pc, #384]	@ (800a830 <HAL_TIM_ConfigClockSource+0x470>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d013      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x31a>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a5f      	ldr	r2, [pc, #380]	@ (800a834 <HAL_TIM_ConfigClockSource+0x474>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d00e      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x31a>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a5d      	ldr	r2, [pc, #372]	@ (800a838 <HAL_TIM_ConfigClockSource+0x478>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d009      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x31a>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a5c      	ldr	r2, [pc, #368]	@ (800a83c <HAL_TIM_ConfigClockSource+0x47c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d004      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x31a>
 800a6d0:	f241 5181 	movw	r1, #5505	@ 0x1581
 800a6d4:	485a      	ldr	r0, [pc, #360]	@ (800a840 <HAL_TIM_ConfigClockSource+0x480>)
 800a6d6:	f7f9 fbd9 	bl	8003e8c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d013      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x34a>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6ea:	d00e      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x34a>
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6f4:	d009      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x34a>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6fe:	d004      	beq.n	800a70a <HAL_TIM_ConfigClockSource+0x34a>
 800a700:	f241 5184 	movw	r1, #5508	@ 0x1584
 800a704:	484e      	ldr	r0, [pc, #312]	@ (800a840 <HAL_TIM_ConfigClockSource+0x480>)
 800a706:	f7f9 fbc1 	bl	8003e8c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a712:	d014      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x37e>
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d010      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x37e>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00c      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x37e>
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d008      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x37e>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2b0a      	cmp	r3, #10
 800a732:	d004      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x37e>
 800a734:	f241 5185 	movw	r1, #5509	@ 0x1585
 800a738:	4841      	ldr	r0, [pc, #260]	@ (800a840 <HAL_TIM_ConfigClockSource+0x480>)
 800a73a:	f7f9 fba7 	bl	8003e8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	2b0f      	cmp	r3, #15
 800a744:	d904      	bls.n	800a750 <HAL_TIM_ConfigClockSource+0x390>
 800a746:	f241 5186 	movw	r1, #5510	@ 0x1586
 800a74a:	483d      	ldr	r0, [pc, #244]	@ (800a840 <HAL_TIM_ConfigClockSource+0x480>)
 800a74c:	f7f9 fb9e 	bl	8003e8c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a760:	f000 fe20 	bl	800b3a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	689a      	ldr	r2, [r3, #8]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a772:	609a      	str	r2, [r3, #8]
      break;
 800a774:	e153      	b.n	800aa1e <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a2c      	ldr	r2, [pc, #176]	@ (800a82c <HAL_TIM_ConfigClockSource+0x46c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d022      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x406>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a788:	d01d      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x406>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a28      	ldr	r2, [pc, #160]	@ (800a830 <HAL_TIM_ConfigClockSource+0x470>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d018      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x406>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a26      	ldr	r2, [pc, #152]	@ (800a834 <HAL_TIM_ConfigClockSource+0x474>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d013      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x406>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a25      	ldr	r2, [pc, #148]	@ (800a838 <HAL_TIM_ConfigClockSource+0x478>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00e      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x406>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a23      	ldr	r2, [pc, #140]	@ (800a83c <HAL_TIM_ConfigClockSource+0x47c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d009      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x406>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a23      	ldr	r2, [pc, #140]	@ (800a844 <HAL_TIM_ConfigClockSource+0x484>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d004      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x406>
 800a7bc:	f241 5195 	movw	r1, #5525	@ 0x1595
 800a7c0:	481f      	ldr	r0, [pc, #124]	@ (800a840 <HAL_TIM_ConfigClockSource+0x480>)
 800a7c2:	f7f9 fb63 	bl	8003e8c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7ce:	d014      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x43a>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d010      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x43a>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00c      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x43a>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d008      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x43a>
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	2b0a      	cmp	r3, #10
 800a7ee:	d004      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x43a>
 800a7f0:	f241 5198 	movw	r1, #5528	@ 0x1598
 800a7f4:	4812      	ldr	r0, [pc, #72]	@ (800a840 <HAL_TIM_ConfigClockSource+0x480>)
 800a7f6:	f7f9 fb49 	bl	8003e8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	2b0f      	cmp	r3, #15
 800a800:	d904      	bls.n	800a80c <HAL_TIM_ConfigClockSource+0x44c>
 800a802:	f241 5199 	movw	r1, #5529	@ 0x1599
 800a806:	480e      	ldr	r0, [pc, #56]	@ (800a840 <HAL_TIM_ConfigClockSource+0x480>)
 800a808:	f7f9 fb40 	bl	8003e8c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a818:	461a      	mov	r2, r3
 800a81a:	f000 fd49 	bl	800b2b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2150      	movs	r1, #80	@ 0x50
 800a824:	4618      	mov	r0, r3
 800a826:	f000 fda2 	bl	800b36e <TIM_ITRx_SetConfig>
      break;
 800a82a:	e0f8      	b.n	800aa1e <HAL_TIM_ConfigClockSource+0x65e>
 800a82c:	40012c00 	.word	0x40012c00
 800a830:	40000400 	.word	0x40000400
 800a834:	40000800 	.word	0x40000800
 800a838:	40000c00 	.word	0x40000c00
 800a83c:	40013400 	.word	0x40013400
 800a840:	0800e234 	.word	0x0800e234
 800a844:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a7a      	ldr	r2, [pc, #488]	@ (800aa38 <HAL_TIM_ConfigClockSource+0x678>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d022      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x4d8>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a85a:	d01d      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x4d8>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a76      	ldr	r2, [pc, #472]	@ (800aa3c <HAL_TIM_ConfigClockSource+0x67c>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d018      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x4d8>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a75      	ldr	r2, [pc, #468]	@ (800aa40 <HAL_TIM_ConfigClockSource+0x680>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d013      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x4d8>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a73      	ldr	r2, [pc, #460]	@ (800aa44 <HAL_TIM_ConfigClockSource+0x684>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d00e      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x4d8>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a72      	ldr	r2, [pc, #456]	@ (800aa48 <HAL_TIM_ConfigClockSource+0x688>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d009      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x4d8>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a70      	ldr	r2, [pc, #448]	@ (800aa4c <HAL_TIM_ConfigClockSource+0x68c>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d004      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x4d8>
 800a88e:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800a892:	486f      	ldr	r0, [pc, #444]	@ (800aa50 <HAL_TIM_ConfigClockSource+0x690>)
 800a894:	f7f9 fafa 	bl	8003e8c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8a0:	d014      	beq.n	800a8cc <HAL_TIM_ConfigClockSource+0x50c>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d010      	beq.n	800a8cc <HAL_TIM_ConfigClockSource+0x50c>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00c      	beq.n	800a8cc <HAL_TIM_ConfigClockSource+0x50c>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d008      	beq.n	800a8cc <HAL_TIM_ConfigClockSource+0x50c>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2b0a      	cmp	r3, #10
 800a8c0:	d004      	beq.n	800a8cc <HAL_TIM_ConfigClockSource+0x50c>
 800a8c2:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800a8c6:	4862      	ldr	r0, [pc, #392]	@ (800aa50 <HAL_TIM_ConfigClockSource+0x690>)
 800a8c8:	f7f9 fae0 	bl	8003e8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	2b0f      	cmp	r3, #15
 800a8d2:	d904      	bls.n	800a8de <HAL_TIM_ConfigClockSource+0x51e>
 800a8d4:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800a8d8:	485d      	ldr	r0, [pc, #372]	@ (800aa50 <HAL_TIM_ConfigClockSource+0x690>)
 800a8da:	f7f9 fad7 	bl	8003e8c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f000 fd0f 	bl	800b30e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2160      	movs	r1, #96	@ 0x60
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 fd39 	bl	800b36e <TIM_ITRx_SetConfig>
      break;
 800a8fc:	e08f      	b.n	800aa1e <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a4d      	ldr	r2, [pc, #308]	@ (800aa38 <HAL_TIM_ConfigClockSource+0x678>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d022      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x58e>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a910:	d01d      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x58e>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a49      	ldr	r2, [pc, #292]	@ (800aa3c <HAL_TIM_ConfigClockSource+0x67c>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d018      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x58e>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a47      	ldr	r2, [pc, #284]	@ (800aa40 <HAL_TIM_ConfigClockSource+0x680>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d013      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x58e>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a46      	ldr	r2, [pc, #280]	@ (800aa44 <HAL_TIM_ConfigClockSource+0x684>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d00e      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x58e>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a44      	ldr	r2, [pc, #272]	@ (800aa48 <HAL_TIM_ConfigClockSource+0x688>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d009      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x58e>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a43      	ldr	r2, [pc, #268]	@ (800aa4c <HAL_TIM_ConfigClockSource+0x68c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d004      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x58e>
 800a944:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800a948:	4841      	ldr	r0, [pc, #260]	@ (800aa50 <HAL_TIM_ConfigClockSource+0x690>)
 800a94a:	f7f9 fa9f 	bl	8003e8c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a956:	d014      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0x5c2>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d010      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0x5c2>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00c      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0x5c2>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d008      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0x5c2>
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	2b0a      	cmp	r3, #10
 800a976:	d004      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0x5c2>
 800a978:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 800a97c:	4834      	ldr	r0, [pc, #208]	@ (800aa50 <HAL_TIM_ConfigClockSource+0x690>)
 800a97e:	f7f9 fa85 	bl	8003e8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	2b0f      	cmp	r3, #15
 800a988:	d904      	bls.n	800a994 <HAL_TIM_ConfigClockSource+0x5d4>
 800a98a:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800a98e:	4830      	ldr	r0, [pc, #192]	@ (800aa50 <HAL_TIM_ConfigClockSource+0x690>)
 800a990:	f7f9 fa7c 	bl	8003e8c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	f000 fc85 	bl	800b2b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2140      	movs	r1, #64	@ 0x40
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 fcde 	bl	800b36e <TIM_ITRx_SetConfig>
      break;
 800a9b2:	e034      	b.n	800aa1e <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a1f      	ldr	r2, [pc, #124]	@ (800aa38 <HAL_TIM_ConfigClockSource+0x678>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d022      	beq.n	800aa04 <HAL_TIM_ConfigClockSource+0x644>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9c6:	d01d      	beq.n	800aa04 <HAL_TIM_ConfigClockSource+0x644>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a1b      	ldr	r2, [pc, #108]	@ (800aa3c <HAL_TIM_ConfigClockSource+0x67c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d018      	beq.n	800aa04 <HAL_TIM_ConfigClockSource+0x644>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a1a      	ldr	r2, [pc, #104]	@ (800aa40 <HAL_TIM_ConfigClockSource+0x680>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d013      	beq.n	800aa04 <HAL_TIM_ConfigClockSource+0x644>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a18      	ldr	r2, [pc, #96]	@ (800aa44 <HAL_TIM_ConfigClockSource+0x684>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d00e      	beq.n	800aa04 <HAL_TIM_ConfigClockSource+0x644>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a17      	ldr	r2, [pc, #92]	@ (800aa48 <HAL_TIM_ConfigClockSource+0x688>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d009      	beq.n	800aa04 <HAL_TIM_ConfigClockSource+0x644>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a15      	ldr	r2, [pc, #84]	@ (800aa4c <HAL_TIM_ConfigClockSource+0x68c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d004      	beq.n	800aa04 <HAL_TIM_ConfigClockSource+0x644>
 800a9fa:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 800a9fe:	4814      	ldr	r0, [pc, #80]	@ (800aa50 <HAL_TIM_ConfigClockSource+0x690>)
 800aa00:	f7f9 fa44 	bl	8003e8c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4610      	mov	r0, r2
 800aa10:	f000 fcad 	bl	800b36e <TIM_ITRx_SetConfig>
      break;
 800aa14:	e003      	b.n	800aa1e <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	73fb      	strb	r3, [r7, #15]
      break;
 800aa1a:	e000      	b.n	800aa1e <HAL_TIM_ConfigClockSource+0x65e>
      break;
 800aa1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	40012c00 	.word	0x40012c00
 800aa3c:	40000400 	.word	0x40000400
 800aa40:	40000800 	.word	0x40000800
 800aa44:	40000c00 	.word	0x40000c00
 800aa48:	40013400 	.word	0x40013400
 800aa4c:	40014000 	.word	0x40014000
 800aa50:	0800e234 	.word	0x0800e234

0800aa54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a46      	ldr	r2, [pc, #280]	@ (800abd0 <TIM_Base_SetConfig+0x12c>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d013      	beq.n	800aae4 <TIM_Base_SetConfig+0x40>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac2:	d00f      	beq.n	800aae4 <TIM_Base_SetConfig+0x40>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a43      	ldr	r2, [pc, #268]	@ (800abd4 <TIM_Base_SetConfig+0x130>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d00b      	beq.n	800aae4 <TIM_Base_SetConfig+0x40>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a42      	ldr	r2, [pc, #264]	@ (800abd8 <TIM_Base_SetConfig+0x134>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d007      	beq.n	800aae4 <TIM_Base_SetConfig+0x40>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a41      	ldr	r2, [pc, #260]	@ (800abdc <TIM_Base_SetConfig+0x138>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d003      	beq.n	800aae4 <TIM_Base_SetConfig+0x40>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a40      	ldr	r2, [pc, #256]	@ (800abe0 <TIM_Base_SetConfig+0x13c>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d108      	bne.n	800aaf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a35      	ldr	r2, [pc, #212]	@ (800abd0 <TIM_Base_SetConfig+0x12c>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d01f      	beq.n	800ab3e <TIM_Base_SetConfig+0x9a>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab04:	d01b      	beq.n	800ab3e <TIM_Base_SetConfig+0x9a>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a32      	ldr	r2, [pc, #200]	@ (800abd4 <TIM_Base_SetConfig+0x130>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d017      	beq.n	800ab3e <TIM_Base_SetConfig+0x9a>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a31      	ldr	r2, [pc, #196]	@ (800abd8 <TIM_Base_SetConfig+0x134>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d013      	beq.n	800ab3e <TIM_Base_SetConfig+0x9a>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a30      	ldr	r2, [pc, #192]	@ (800abdc <TIM_Base_SetConfig+0x138>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d00f      	beq.n	800ab3e <TIM_Base_SetConfig+0x9a>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a2f      	ldr	r2, [pc, #188]	@ (800abe0 <TIM_Base_SetConfig+0x13c>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d00b      	beq.n	800ab3e <TIM_Base_SetConfig+0x9a>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a2e      	ldr	r2, [pc, #184]	@ (800abe4 <TIM_Base_SetConfig+0x140>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d007      	beq.n	800ab3e <TIM_Base_SetConfig+0x9a>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a2d      	ldr	r2, [pc, #180]	@ (800abe8 <TIM_Base_SetConfig+0x144>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d003      	beq.n	800ab3e <TIM_Base_SetConfig+0x9a>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a2c      	ldr	r2, [pc, #176]	@ (800abec <TIM_Base_SetConfig+0x148>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d108      	bne.n	800ab50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	689a      	ldr	r2, [r3, #8]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a16      	ldr	r2, [pc, #88]	@ (800abd0 <TIM_Base_SetConfig+0x12c>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d00f      	beq.n	800ab9c <TIM_Base_SetConfig+0xf8>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a18      	ldr	r2, [pc, #96]	@ (800abe0 <TIM_Base_SetConfig+0x13c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d00b      	beq.n	800ab9c <TIM_Base_SetConfig+0xf8>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a17      	ldr	r2, [pc, #92]	@ (800abe4 <TIM_Base_SetConfig+0x140>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d007      	beq.n	800ab9c <TIM_Base_SetConfig+0xf8>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a16      	ldr	r2, [pc, #88]	@ (800abe8 <TIM_Base_SetConfig+0x144>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d003      	beq.n	800ab9c <TIM_Base_SetConfig+0xf8>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a15      	ldr	r2, [pc, #84]	@ (800abec <TIM_Base_SetConfig+0x148>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d103      	bne.n	800aba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	691a      	ldr	r2, [r3, #16]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d105      	bne.n	800abc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f023 0201 	bic.w	r2, r3, #1
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	611a      	str	r2, [r3, #16]
  }
}
 800abc2:	bf00      	nop
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	40012c00 	.word	0x40012c00
 800abd4:	40000400 	.word	0x40000400
 800abd8:	40000800 	.word	0x40000800
 800abdc:	40000c00 	.word	0x40000c00
 800abe0:	40013400 	.word	0x40013400
 800abe4:	40014000 	.word	0x40014000
 800abe8:	40014400 	.word	0x40014400
 800abec:	40014800 	.word	0x40014800

0800abf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	f023 0201 	bic.w	r2, r3, #1
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0303 	bic.w	r3, r3, #3
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f023 0302 	bic.w	r3, r3, #2
 800ac3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a40      	ldr	r2, [pc, #256]	@ (800ad4c <TIM_OC1_SetConfig+0x15c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00f      	beq.n	800ac70 <TIM_OC1_SetConfig+0x80>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a3f      	ldr	r2, [pc, #252]	@ (800ad50 <TIM_OC1_SetConfig+0x160>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00b      	beq.n	800ac70 <TIM_OC1_SetConfig+0x80>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a3e      	ldr	r2, [pc, #248]	@ (800ad54 <TIM_OC1_SetConfig+0x164>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d007      	beq.n	800ac70 <TIM_OC1_SetConfig+0x80>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a3d      	ldr	r2, [pc, #244]	@ (800ad58 <TIM_OC1_SetConfig+0x168>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d003      	beq.n	800ac70 <TIM_OC1_SetConfig+0x80>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a3c      	ldr	r2, [pc, #240]	@ (800ad5c <TIM_OC1_SetConfig+0x16c>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d119      	bne.n	800aca4 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d008      	beq.n	800ac8a <TIM_OC1_SetConfig+0x9a>
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	2b08      	cmp	r3, #8
 800ac7e:	d004      	beq.n	800ac8a <TIM_OC1_SetConfig+0x9a>
 800ac80:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800ac84:	4836      	ldr	r0, [pc, #216]	@ (800ad60 <TIM_OC1_SetConfig+0x170>)
 800ac86:	f7f9 f901 	bl	8003e8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f023 0308 	bic.w	r3, r3, #8
 800ac90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f023 0304 	bic.w	r3, r3, #4
 800aca2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a29      	ldr	r2, [pc, #164]	@ (800ad4c <TIM_OC1_SetConfig+0x15c>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d00f      	beq.n	800accc <TIM_OC1_SetConfig+0xdc>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a28      	ldr	r2, [pc, #160]	@ (800ad50 <TIM_OC1_SetConfig+0x160>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d00b      	beq.n	800accc <TIM_OC1_SetConfig+0xdc>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a27      	ldr	r2, [pc, #156]	@ (800ad54 <TIM_OC1_SetConfig+0x164>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d007      	beq.n	800accc <TIM_OC1_SetConfig+0xdc>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a26      	ldr	r2, [pc, #152]	@ (800ad58 <TIM_OC1_SetConfig+0x168>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d003      	beq.n	800accc <TIM_OC1_SetConfig+0xdc>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a25      	ldr	r2, [pc, #148]	@ (800ad5c <TIM_OC1_SetConfig+0x16c>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d12d      	bne.n	800ad28 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acd4:	d008      	beq.n	800ace8 <TIM_OC1_SetConfig+0xf8>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d004      	beq.n	800ace8 <TIM_OC1_SetConfig+0xf8>
 800acde:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800ace2:	481f      	ldr	r0, [pc, #124]	@ (800ad60 <TIM_OC1_SetConfig+0x170>)
 800ace4:	f7f9 f8d2 	bl	8003e8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acf0:	d008      	beq.n	800ad04 <TIM_OC1_SetConfig+0x114>
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d004      	beq.n	800ad04 <TIM_OC1_SetConfig+0x114>
 800acfa:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800acfe:	4818      	ldr	r0, [pc, #96]	@ (800ad60 <TIM_OC1_SetConfig+0x170>)
 800ad00:	f7f9 f8c4 	bl	8003e8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	693a      	ldr	r2, [r7, #16]
 800ad2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	621a      	str	r2, [r3, #32]
}
 800ad42:	bf00      	nop
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	40012c00 	.word	0x40012c00
 800ad50:	40013400 	.word	0x40013400
 800ad54:	40014000 	.word	0x40014000
 800ad58:	40014400 	.word	0x40014400
 800ad5c:	40014800 	.word	0x40014800
 800ad60:	0800e234 	.word	0x0800e234

0800ad64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a1b      	ldr	r3, [r3, #32]
 800ad78:	f023 0210 	bic.w	r2, r3, #16
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	021b      	lsls	r3, r3, #8
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f023 0320 	bic.w	r3, r3, #32
 800adb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	011b      	lsls	r3, r3, #4
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a3b      	ldr	r2, [pc, #236]	@ (800aeb0 <TIM_OC2_SetConfig+0x14c>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d003      	beq.n	800add0 <TIM_OC2_SetConfig+0x6c>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a3a      	ldr	r2, [pc, #232]	@ (800aeb4 <TIM_OC2_SetConfig+0x150>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d11a      	bne.n	800ae06 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d008      	beq.n	800adea <TIM_OC2_SetConfig+0x86>
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	2b08      	cmp	r3, #8
 800adde:	d004      	beq.n	800adea <TIM_OC2_SetConfig+0x86>
 800ade0:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800ade4:	4834      	ldr	r0, [pc, #208]	@ (800aeb8 <TIM_OC2_SetConfig+0x154>)
 800ade6:	f7f9 f851 	bl	8003e8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a29      	ldr	r2, [pc, #164]	@ (800aeb0 <TIM_OC2_SetConfig+0x14c>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d00f      	beq.n	800ae2e <TIM_OC2_SetConfig+0xca>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a28      	ldr	r2, [pc, #160]	@ (800aeb4 <TIM_OC2_SetConfig+0x150>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d00b      	beq.n	800ae2e <TIM_OC2_SetConfig+0xca>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a28      	ldr	r2, [pc, #160]	@ (800aebc <TIM_OC2_SetConfig+0x158>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d007      	beq.n	800ae2e <TIM_OC2_SetConfig+0xca>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a27      	ldr	r2, [pc, #156]	@ (800aec0 <TIM_OC2_SetConfig+0x15c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d003      	beq.n	800ae2e <TIM_OC2_SetConfig+0xca>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a26      	ldr	r2, [pc, #152]	@ (800aec4 <TIM_OC2_SetConfig+0x160>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d12f      	bne.n	800ae8e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae36:	d008      	beq.n	800ae4a <TIM_OC2_SetConfig+0xe6>
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d004      	beq.n	800ae4a <TIM_OC2_SetConfig+0xe6>
 800ae40:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 800ae44:	481c      	ldr	r0, [pc, #112]	@ (800aeb8 <TIM_OC2_SetConfig+0x154>)
 800ae46:	f7f9 f821 	bl	8003e8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae52:	d008      	beq.n	800ae66 <TIM_OC2_SetConfig+0x102>
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d004      	beq.n	800ae66 <TIM_OC2_SetConfig+0x102>
 800ae5c:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 800ae60:	4815      	ldr	r0, [pc, #84]	@ (800aeb8 <TIM_OC2_SetConfig+0x154>)
 800ae62:	f7f9 f813 	bl	8003e8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	621a      	str	r2, [r3, #32]
}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	40012c00 	.word	0x40012c00
 800aeb4:	40013400 	.word	0x40013400
 800aeb8:	0800e234 	.word	0x0800e234
 800aebc:	40014000 	.word	0x40014000
 800aec0:	40014400 	.word	0x40014400
 800aec4:	40014800 	.word	0x40014800

0800aec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a1b      	ldr	r3, [r3, #32]
 800aedc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aefa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0303 	bic.w	r3, r3, #3
 800af02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	021b      	lsls	r3, r3, #8
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	4313      	orrs	r3, r2
 800af20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a3b      	ldr	r2, [pc, #236]	@ (800b014 <TIM_OC3_SetConfig+0x14c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d003      	beq.n	800af32 <TIM_OC3_SetConfig+0x6a>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a3a      	ldr	r2, [pc, #232]	@ (800b018 <TIM_OC3_SetConfig+0x150>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d11a      	bne.n	800af68 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d008      	beq.n	800af4c <TIM_OC3_SetConfig+0x84>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	2b08      	cmp	r3, #8
 800af40:	d004      	beq.n	800af4c <TIM_OC3_SetConfig+0x84>
 800af42:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800af46:	4835      	ldr	r0, [pc, #212]	@ (800b01c <TIM_OC3_SetConfig+0x154>)
 800af48:	f7f8 ffa0 	bl	8003e8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a2a      	ldr	r2, [pc, #168]	@ (800b014 <TIM_OC3_SetConfig+0x14c>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d00f      	beq.n	800af90 <TIM_OC3_SetConfig+0xc8>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a29      	ldr	r2, [pc, #164]	@ (800b018 <TIM_OC3_SetConfig+0x150>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00b      	beq.n	800af90 <TIM_OC3_SetConfig+0xc8>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a29      	ldr	r2, [pc, #164]	@ (800b020 <TIM_OC3_SetConfig+0x158>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d007      	beq.n	800af90 <TIM_OC3_SetConfig+0xc8>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a28      	ldr	r2, [pc, #160]	@ (800b024 <TIM_OC3_SetConfig+0x15c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <TIM_OC3_SetConfig+0xc8>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a27      	ldr	r2, [pc, #156]	@ (800b028 <TIM_OC3_SetConfig+0x160>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d12f      	bne.n	800aff0 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af98:	d008      	beq.n	800afac <TIM_OC3_SetConfig+0xe4>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d004      	beq.n	800afac <TIM_OC3_SetConfig+0xe4>
 800afa2:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800afa6:	481d      	ldr	r0, [pc, #116]	@ (800b01c <TIM_OC3_SetConfig+0x154>)
 800afa8:	f7f8 ff70 	bl	8003e8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afb4:	d008      	beq.n	800afc8 <TIM_OC3_SetConfig+0x100>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d004      	beq.n	800afc8 <TIM_OC3_SetConfig+0x100>
 800afbe:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800afc2:	4816      	ldr	r0, [pc, #88]	@ (800b01c <TIM_OC3_SetConfig+0x154>)
 800afc4:	f7f8 ff62 	bl	8003e8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	011b      	lsls	r3, r3, #4
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	011b      	lsls	r3, r3, #4
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	4313      	orrs	r3, r2
 800afee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	621a      	str	r2, [r3, #32]
}
 800b00a:	bf00      	nop
 800b00c:	3718      	adds	r7, #24
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	40012c00 	.word	0x40012c00
 800b018:	40013400 	.word	0x40013400
 800b01c:	0800e234 	.word	0x0800e234
 800b020:	40014000 	.word	0x40014000
 800b024:	40014400 	.word	0x40014400
 800b028:	40014800 	.word	0x40014800

0800b02c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b05a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	021b      	lsls	r3, r3, #8
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	4313      	orrs	r3, r2
 800b072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b07a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	031b      	lsls	r3, r3, #12
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	4313      	orrs	r3, r2
 800b086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a1e      	ldr	r2, [pc, #120]	@ (800b104 <TIM_OC4_SetConfig+0xd8>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d00f      	beq.n	800b0b0 <TIM_OC4_SetConfig+0x84>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a1d      	ldr	r2, [pc, #116]	@ (800b108 <TIM_OC4_SetConfig+0xdc>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d00b      	beq.n	800b0b0 <TIM_OC4_SetConfig+0x84>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a1c      	ldr	r2, [pc, #112]	@ (800b10c <TIM_OC4_SetConfig+0xe0>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d007      	beq.n	800b0b0 <TIM_OC4_SetConfig+0x84>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a1b      	ldr	r2, [pc, #108]	@ (800b110 <TIM_OC4_SetConfig+0xe4>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d003      	beq.n	800b0b0 <TIM_OC4_SetConfig+0x84>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a1a      	ldr	r2, [pc, #104]	@ (800b114 <TIM_OC4_SetConfig+0xe8>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d117      	bne.n	800b0e0 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0b8:	d008      	beq.n	800b0cc <TIM_OC4_SetConfig+0xa0>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d004      	beq.n	800b0cc <TIM_OC4_SetConfig+0xa0>
 800b0c2:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800b0c6:	4814      	ldr	r0, [pc, #80]	@ (800b118 <TIM_OC4_SetConfig+0xec>)
 800b0c8:	f7f8 fee0 	bl	8003e8c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	019b      	lsls	r3, r3, #6
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	621a      	str	r2, [r3, #32]
}
 800b0fa:	bf00      	nop
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	40012c00 	.word	0x40012c00
 800b108:	40013400 	.word	0x40013400
 800b10c:	40014000 	.word	0x40014000
 800b110:	40014400 	.word	0x40014400
 800b114:	40014800 	.word	0x40014800
 800b118:	0800e234 	.word	0x0800e234

0800b11c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b14a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b14e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	4313      	orrs	r3, r2
 800b158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b160:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	041b      	lsls	r3, r3, #16
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a17      	ldr	r2, [pc, #92]	@ (800b1d0 <TIM_OC5_SetConfig+0xb4>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00f      	beq.n	800b196 <TIM_OC5_SetConfig+0x7a>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a16      	ldr	r2, [pc, #88]	@ (800b1d4 <TIM_OC5_SetConfig+0xb8>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d00b      	beq.n	800b196 <TIM_OC5_SetConfig+0x7a>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a15      	ldr	r2, [pc, #84]	@ (800b1d8 <TIM_OC5_SetConfig+0xbc>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d007      	beq.n	800b196 <TIM_OC5_SetConfig+0x7a>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a14      	ldr	r2, [pc, #80]	@ (800b1dc <TIM_OC5_SetConfig+0xc0>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d003      	beq.n	800b196 <TIM_OC5_SetConfig+0x7a>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a13      	ldr	r2, [pc, #76]	@ (800b1e0 <TIM_OC5_SetConfig+0xc4>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d109      	bne.n	800b1aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b19c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	621a      	str	r2, [r3, #32]
}
 800b1c4:	bf00      	nop
 800b1c6:	371c      	adds	r7, #28
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	40012c00 	.word	0x40012c00
 800b1d4:	40013400 	.word	0x40013400
 800b1d8:	40014000 	.word	0x40014000
 800b1dc:	40014400 	.word	0x40014400
 800b1e0:	40014800 	.word	0x40014800

0800b1e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
 800b1f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	021b      	lsls	r3, r3, #8
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	4313      	orrs	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b22a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	051b      	lsls	r3, r3, #20
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	4313      	orrs	r3, r2
 800b236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a18      	ldr	r2, [pc, #96]	@ (800b29c <TIM_OC6_SetConfig+0xb8>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d00f      	beq.n	800b260 <TIM_OC6_SetConfig+0x7c>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a17      	ldr	r2, [pc, #92]	@ (800b2a0 <TIM_OC6_SetConfig+0xbc>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d00b      	beq.n	800b260 <TIM_OC6_SetConfig+0x7c>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a16      	ldr	r2, [pc, #88]	@ (800b2a4 <TIM_OC6_SetConfig+0xc0>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d007      	beq.n	800b260 <TIM_OC6_SetConfig+0x7c>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a15      	ldr	r2, [pc, #84]	@ (800b2a8 <TIM_OC6_SetConfig+0xc4>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d003      	beq.n	800b260 <TIM_OC6_SetConfig+0x7c>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a14      	ldr	r2, [pc, #80]	@ (800b2ac <TIM_OC6_SetConfig+0xc8>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d109      	bne.n	800b274 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	029b      	lsls	r3, r3, #10
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4313      	orrs	r3, r2
 800b272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	621a      	str	r2, [r3, #32]
}
 800b28e:	bf00      	nop
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	40012c00 	.word	0x40012c00
 800b2a0:	40013400 	.word	0x40013400
 800b2a4:	40014000 	.word	0x40014000
 800b2a8:	40014400 	.word	0x40014400
 800b2ac:	40014800 	.word	0x40014800

0800b2b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f023 0201 	bic.w	r2, r3, #1
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b2da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	011b      	lsls	r3, r3, #4
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f023 030a 	bic.w	r3, r3, #10
 800b2ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	621a      	str	r2, [r3, #32]
}
 800b302:	bf00      	nop
 800b304:	371c      	adds	r7, #28
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b30e:	b480      	push	{r7}
 800b310:	b087      	sub	sp, #28
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	f023 0210 	bic.w	r2, r3, #16
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	031b      	lsls	r3, r3, #12
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	4313      	orrs	r3, r2
 800b342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b34a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	011b      	lsls	r3, r3, #4
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	4313      	orrs	r3, r2
 800b354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	697a      	ldr	r2, [r7, #20]
 800b360:	621a      	str	r2, [r3, #32]
}
 800b362:	bf00      	nop
 800b364:	371c      	adds	r7, #28
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b36e:	b480      	push	{r7}
 800b370:	b085      	sub	sp, #20
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	f043 0307 	orr.w	r3, r3, #7
 800b390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	609a      	str	r2, [r3, #8]
}
 800b398:	bf00      	nop
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	021a      	lsls	r2, r3, #8
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	609a      	str	r2, [r3, #8]
}
 800b3d8:	bf00      	nop
 800b3da:	371c      	adds	r7, #28
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4a2f      	ldr	r2, [pc, #188]	@ (800b4b0 <TIM_CCxChannelCmd+0xcc>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d024      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3fe:	d020      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4a2c      	ldr	r2, [pc, #176]	@ (800b4b4 <TIM_CCxChannelCmd+0xd0>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d01c      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4a2b      	ldr	r2, [pc, #172]	@ (800b4b8 <TIM_CCxChannelCmd+0xd4>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d018      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4a2a      	ldr	r2, [pc, #168]	@ (800b4bc <TIM_CCxChannelCmd+0xd8>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d014      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4a29      	ldr	r2, [pc, #164]	@ (800b4c0 <TIM_CCxChannelCmd+0xdc>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d010      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4a28      	ldr	r2, [pc, #160]	@ (800b4c4 <TIM_CCxChannelCmd+0xe0>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d00c      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4a27      	ldr	r2, [pc, #156]	@ (800b4c8 <TIM_CCxChannelCmd+0xe4>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d008      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4a26      	ldr	r2, [pc, #152]	@ (800b4cc <TIM_CCxChannelCmd+0xe8>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d004      	beq.n	800b442 <TIM_CCxChannelCmd+0x5e>
 800b438:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800b43c:	4824      	ldr	r0, [pc, #144]	@ (800b4d0 <TIM_CCxChannelCmd+0xec>)
 800b43e:	f7f8 fd25 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d016      	beq.n	800b476 <TIM_CCxChannelCmd+0x92>
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d013      	beq.n	800b476 <TIM_CCxChannelCmd+0x92>
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2b08      	cmp	r3, #8
 800b452:	d010      	beq.n	800b476 <TIM_CCxChannelCmd+0x92>
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2b0c      	cmp	r3, #12
 800b458:	d00d      	beq.n	800b476 <TIM_CCxChannelCmd+0x92>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b10      	cmp	r3, #16
 800b45e:	d00a      	beq.n	800b476 <TIM_CCxChannelCmd+0x92>
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b14      	cmp	r3, #20
 800b464:	d007      	beq.n	800b476 <TIM_CCxChannelCmd+0x92>
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b3c      	cmp	r3, #60	@ 0x3c
 800b46a:	d004      	beq.n	800b476 <TIM_CCxChannelCmd+0x92>
 800b46c:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 800b470:	4817      	ldr	r0, [pc, #92]	@ (800b4d0 <TIM_CCxChannelCmd+0xec>)
 800b472:	f7f8 fd0b 	bl	8003e8c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	f003 031f 	and.w	r3, r3, #31
 800b47c:	2201      	movs	r2, #1
 800b47e:	fa02 f303 	lsl.w	r3, r2, r3
 800b482:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6a1a      	ldr	r2, [r3, #32]
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	43db      	mvns	r3, r3
 800b48c:	401a      	ands	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6a1a      	ldr	r2, [r3, #32]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	f003 031f 	and.w	r3, r3, #31
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	fa01 f303 	lsl.w	r3, r1, r3
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	621a      	str	r2, [r3, #32]
}
 800b4a8:	bf00      	nop
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	40012c00 	.word	0x40012c00
 800b4b4:	40000400 	.word	0x40000400
 800b4b8:	40000800 	.word	0x40000800
 800b4bc:	40000c00 	.word	0x40000c00
 800b4c0:	40013400 	.word	0x40013400
 800b4c4:	40014000 	.word	0x40014000
 800b4c8:	40014400 	.word	0x40014400
 800b4cc:	40014800 	.word	0x40014800
 800b4d0:	0800e234 	.word	0x0800e234

0800b4d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a34      	ldr	r2, [pc, #208]	@ (800b5b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d02c      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4f0:	d027      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a30      	ldr	r2, [pc, #192]	@ (800b5b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d022      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a2e      	ldr	r2, [pc, #184]	@ (800b5bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d01d      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a2d      	ldr	r2, [pc, #180]	@ (800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d018      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a2b      	ldr	r2, [pc, #172]	@ (800b5c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d013      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a2a      	ldr	r2, [pc, #168]	@ (800b5c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d00e      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a28      	ldr	r2, [pc, #160]	@ (800b5cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d009      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a27      	ldr	r2, [pc, #156]	@ (800b5d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d004      	beq.n	800b542 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b538:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800b53c:	4825      	ldr	r0, [pc, #148]	@ (800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b53e:	f7f8 fca5 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d020      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b10      	cmp	r3, #16
 800b550:	d01c      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b20      	cmp	r3, #32
 800b558:	d018      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b30      	cmp	r3, #48	@ 0x30
 800b560:	d014      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b40      	cmp	r3, #64	@ 0x40
 800b568:	d010      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b50      	cmp	r3, #80	@ 0x50
 800b570:	d00c      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b60      	cmp	r3, #96	@ 0x60
 800b578:	d008      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b70      	cmp	r3, #112	@ 0x70
 800b580:	d004      	beq.n	800b58c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b582:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800b586:	4813      	ldr	r0, [pc, #76]	@ (800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b588:	f7f8 fc80 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	2b80      	cmp	r3, #128	@ 0x80
 800b592:	d008      	beq.n	800b5a6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d004      	beq.n	800b5a6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800b59c:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800b5a0:	480c      	ldr	r0, [pc, #48]	@ (800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5a2:	f7f8 fc73 	bl	8003e8c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d113      	bne.n	800b5d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	e0d3      	b.n	800b75c <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800b5b4:	40012c00 	.word	0x40012c00
 800b5b8:	40000400 	.word	0x40000400
 800b5bc:	40000800 	.word	0x40000800
 800b5c0:	40000c00 	.word	0x40000c00
 800b5c4:	40001000 	.word	0x40001000
 800b5c8:	40001400 	.word	0x40001400
 800b5cc:	40013400 	.word	0x40013400
 800b5d0:	40014000 	.word	0x40014000
 800b5d4:	0800e26c 	.word	0x0800e26c
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a59      	ldr	r2, [pc, #356]	@ (800b764 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d004      	beq.n	800b60c <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a58      	ldr	r2, [pc, #352]	@ (800b768 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d161      	bne.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d054      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b61c:	d04f      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b626:	d04a      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b630:	d045      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b63a:	d040      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b644:	d03b      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b64e:	d036      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b658:	d031      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800b662:	d02c      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b66c:	d027      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800b676:	d022      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b680:	d01d      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800b68a:	d018      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b694:	d013      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800b69e:	d00e      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800b6a8:	d009      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800b6b2:	d004      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b6b4:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800b6b8:	482c      	ldr	r0, [pc, #176]	@ (800b76c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800b6ba:	f7f8 fbe7 	bl	8003e8c <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b6c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a1d      	ldr	r2, [pc, #116]	@ (800b764 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d01d      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6fc:	d018      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a1b      	ldr	r2, [pc, #108]	@ (800b770 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d013      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a19      	ldr	r2, [pc, #100]	@ (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d00e      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a18      	ldr	r2, [pc, #96]	@ (800b778 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d009      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a11      	ldr	r2, [pc, #68]	@ (800b768 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d004      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a14      	ldr	r2, [pc, #80]	@ (800b77c <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d10c      	bne.n	800b74a <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	40012c00 	.word	0x40012c00
 800b768:	40013400 	.word	0x40013400
 800b76c:	0800e26c 	.word	0x0800e26c
 800b770:	40000400 	.word	0x40000400
 800b774:	40000800 	.word	0x40000800
 800b778:	40000c00 	.word	0x40000c00
 800b77c:	40014000 	.word	0x40014000

0800b780 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b78a:	2300      	movs	r3, #0
 800b78c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a91      	ldr	r2, [pc, #580]	@ (800b9d8 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d018      	beq.n	800b7ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a8f      	ldr	r2, [pc, #572]	@ (800b9dc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d013      	beq.n	800b7ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a8e      	ldr	r2, [pc, #568]	@ (800b9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d00e      	beq.n	800b7ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a8c      	ldr	r2, [pc, #560]	@ (800b9e4 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d009      	beq.n	800b7ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a8b      	ldr	r2, [pc, #556]	@ (800b9e8 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d004      	beq.n	800b7ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b7c0:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800b7c4:	4889      	ldr	r0, [pc, #548]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b7c6:	f7f8 fb61 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7d2:	d008      	beq.n	800b7e6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d004      	beq.n	800b7e6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800b7dc:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800b7e0:	4882      	ldr	r0, [pc, #520]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b7e2:	f7f8 fb53 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7ee:	d008      	beq.n	800b802 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d004      	beq.n	800b802 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800b7f8:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800b7fc:	487b      	ldr	r0, [pc, #492]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b7fe:	f7f8 fb45 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d013      	beq.n	800b832 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b812:	d00e      	beq.n	800b832 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b81c:	d009      	beq.n	800b832 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b826:	d004      	beq.n	800b832 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800b828:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800b82c:	486f      	ldr	r0, [pc, #444]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b82e:	f7f8 fb2d 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	2bff      	cmp	r3, #255	@ 0xff
 800b838:	d904      	bls.n	800b844 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800b83a:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800b83e:	486b      	ldr	r0, [pc, #428]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b840:	f7f8 fb24 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b84c:	d008      	beq.n	800b860 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d004      	beq.n	800b860 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b856:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800b85a:	4864      	ldr	r0, [pc, #400]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b85c:	f7f8 fb16 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d009      	beq.n	800b87c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b870:	d004      	beq.n	800b87c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b872:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800b876:	485d      	ldr	r0, [pc, #372]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b878:	f7f8 fb08 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	2b0f      	cmp	r3, #15
 800b882:	d904      	bls.n	800b88e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b884:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800b888:	4858      	ldr	r0, [pc, #352]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b88a:	f7f8 faff 	bl	8003e8c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b896:	d008      	beq.n	800b8aa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b8a0:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800b8a4:	4851      	ldr	r0, [pc, #324]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b8a6:	f7f8 faf1 	bl	8003e8c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d101      	bne.n	800b8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	e08a      	b.n	800b9ce <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	4313      	orrs	r3, r2
 800b904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	695b      	ldr	r3, [r3, #20]
 800b910:	4313      	orrs	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b91e:	4313      	orrs	r3, r2
 800b920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	041b      	lsls	r3, r3, #16
 800b92e:	4313      	orrs	r3, r2
 800b930:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a28      	ldr	r2, [pc, #160]	@ (800b9d8 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d004      	beq.n	800b946 <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a26      	ldr	r2, [pc, #152]	@ (800b9dc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d13a      	bne.n	800b9bc <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b94e:	d008      	beq.n	800b962 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	69db      	ldr	r3, [r3, #28]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d004      	beq.n	800b962 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800b958:	f640 0112 	movw	r1, #2066	@ 0x812
 800b95c:	4823      	ldr	r0, [pc, #140]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b95e:	f7f8 fa95 	bl	8003e8c <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d009      	beq.n	800b97e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b972:	d004      	beq.n	800b97e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800b974:	f640 0113 	movw	r1, #2067	@ 0x813
 800b978:	481c      	ldr	r0, [pc, #112]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b97a:	f7f8 fa87 	bl	8003e8c <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b982:	2b0f      	cmp	r3, #15
 800b984:	d904      	bls.n	800b990 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800b986:	f640 0114 	movw	r1, #2068	@ 0x814
 800b98a:	4818      	ldr	r0, [pc, #96]	@ (800b9ec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b98c:	f7f8 fa7e 	bl	8003e8c <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99a:	051b      	lsls	r3, r3, #20
 800b99c:	4313      	orrs	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	69db      	ldr	r3, [r3, #28]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	40012c00 	.word	0x40012c00
 800b9dc:	40013400 	.word	0x40013400
 800b9e0:	40014000 	.word	0x40014000
 800b9e4:	40014400 	.word	0x40014400
 800b9e8:	40014800 	.word	0x40014800
 800b9ec:	0800e26c 	.word	0x0800e26c

0800b9f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e08b      	b.n	800bb56 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d023      	beq.n	800ba8e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a45      	ldr	r2, [pc, #276]	@ (800bb60 <HAL_UART_Init+0x134>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d041      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a43      	ldr	r2, [pc, #268]	@ (800bb64 <HAL_UART_Init+0x138>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d03c      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a42      	ldr	r2, [pc, #264]	@ (800bb68 <HAL_UART_Init+0x13c>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d037      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a40      	ldr	r2, [pc, #256]	@ (800bb6c <HAL_UART_Init+0x140>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d032      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a3f      	ldr	r2, [pc, #252]	@ (800bb70 <HAL_UART_Init+0x144>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d02d      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a3d      	ldr	r2, [pc, #244]	@ (800bb74 <HAL_UART_Init+0x148>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d028      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800ba82:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800ba86:	483c      	ldr	r0, [pc, #240]	@ (800bb78 <HAL_UART_Init+0x14c>)
 800ba88:	f7f8 fa00 	bl	8003e8c <assert_failed>
 800ba8c:	e022      	b.n	800bad4 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a33      	ldr	r2, [pc, #204]	@ (800bb60 <HAL_UART_Init+0x134>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d01d      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a31      	ldr	r2, [pc, #196]	@ (800bb64 <HAL_UART_Init+0x138>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d018      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a30      	ldr	r2, [pc, #192]	@ (800bb68 <HAL_UART_Init+0x13c>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d013      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a2e      	ldr	r2, [pc, #184]	@ (800bb6c <HAL_UART_Init+0x140>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d00e      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a2d      	ldr	r2, [pc, #180]	@ (800bb70 <HAL_UART_Init+0x144>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d009      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a2b      	ldr	r2, [pc, #172]	@ (800bb74 <HAL_UART_Init+0x148>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d004      	beq.n	800bad4 <HAL_UART_Init+0xa8>
 800baca:	f240 1157 	movw	r1, #343	@ 0x157
 800bace:	482a      	ldr	r0, [pc, #168]	@ (800bb78 <HAL_UART_Init+0x14c>)
 800bad0:	f7f8 f9dc 	bl	8003e8c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d106      	bne.n	800baea <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7f8 ffa3 	bl	8004a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2224      	movs	r2, #36	@ 0x24
 800baee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f022 0201 	bic.w	r2, r2, #1
 800bafe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d002      	beq.n	800bb0e <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fc1f 	bl	800c34c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f8be 	bl	800bc90 <UART_SetConfig>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d101      	bne.n	800bb1e <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e01b      	b.n	800bb56 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bb3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f042 0201 	orr.w	r2, r2, #1
 800bb4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fd5c 	bl	800c60c <UART_CheckIdleState>
 800bb54:	4603      	mov	r3, r0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	40013800 	.word	0x40013800
 800bb64:	40004400 	.word	0x40004400
 800bb68:	40004800 	.word	0x40004800
 800bb6c:	40004c00 	.word	0x40004c00
 800bb70:	40005000 	.word	0x40005000
 800bb74:	40008000 	.word	0x40008000
 800bb78:	0800e2a8 	.word	0x0800e2a8

0800bb7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b08a      	sub	sp, #40	@ 0x28
 800bb80:	af02      	add	r7, sp, #8
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb90:	2b20      	cmp	r3, #32
 800bb92:	d177      	bne.n	800bc84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <HAL_UART_Transmit+0x24>
 800bb9a:	88fb      	ldrh	r3, [r7, #6]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d101      	bne.n	800bba4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e070      	b.n	800bc86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2221      	movs	r2, #33	@ 0x21
 800bbb0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bbb2:	f7f9 f82d 	bl	8004c10 <HAL_GetTick>
 800bbb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	88fa      	ldrh	r2, [r7, #6]
 800bbbc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	88fa      	ldrh	r2, [r7, #6]
 800bbc4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbd0:	d108      	bne.n	800bbe4 <HAL_UART_Transmit+0x68>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d104      	bne.n	800bbe4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	61bb      	str	r3, [r7, #24]
 800bbe2:	e003      	b.n	800bbec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bbec:	e02f      	b.n	800bc4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2180      	movs	r1, #128	@ 0x80
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 fdaf 	bl	800c75c <UART_WaitOnFlagUntilTimeout>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d004      	beq.n	800bc0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2220      	movs	r2, #32
 800bc08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	e03b      	b.n	800bc86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10b      	bne.n	800bc2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	881a      	ldrh	r2, [r3, #0]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc20:	b292      	uxth	r2, r2
 800bc22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	3302      	adds	r3, #2
 800bc28:	61bb      	str	r3, [r7, #24]
 800bc2a:	e007      	b.n	800bc3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	781a      	ldrb	r2, [r3, #0]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	3b01      	subs	r3, #1
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1c9      	bne.n	800bbee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	2200      	movs	r2, #0
 800bc62:	2140      	movs	r1, #64	@ 0x40
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 fd79 	bl	800c75c <UART_WaitOnFlagUntilTimeout>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d004      	beq.n	800bc7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2220      	movs	r2, #32
 800bc74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e005      	b.n	800bc86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	e000      	b.n	800bc86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800bc84:	2302      	movs	r3, #2
  }
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3720      	adds	r7, #32
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc94:	b08a      	sub	sp, #40	@ 0x28
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	4a9e      	ldr	r2, [pc, #632]	@ (800bf20 <UART_SetConfig+0x290>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d904      	bls.n	800bcb4 <UART_SetConfig+0x24>
 800bcaa:	f640 4158 	movw	r1, #3160	@ 0xc58
 800bcae:	489d      	ldr	r0, [pc, #628]	@ (800bf24 <UART_SetConfig+0x294>)
 800bcb0:	f7f8 f8ec 	bl	8003e8c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bcbc:	d00d      	beq.n	800bcda <UART_SetConfig+0x4a>
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d009      	beq.n	800bcda <UART_SetConfig+0x4a>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcce:	d004      	beq.n	800bcda <UART_SetConfig+0x4a>
 800bcd0:	f640 4159 	movw	r1, #3161	@ 0xc59
 800bcd4:	4893      	ldr	r0, [pc, #588]	@ (800bf24 <UART_SetConfig+0x294>)
 800bcd6:	f7f8 f8d9 	bl	8003e8c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a92      	ldr	r2, [pc, #584]	@ (800bf28 <UART_SetConfig+0x298>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d10e      	bne.n	800bd02 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d030      	beq.n	800bd4e <UART_SetConfig+0xbe>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcf4:	d02b      	beq.n	800bd4e <UART_SetConfig+0xbe>
 800bcf6:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800bcfa:	488a      	ldr	r0, [pc, #552]	@ (800bf24 <UART_SetConfig+0x294>)
 800bcfc:	f7f8 f8c6 	bl	8003e8c <assert_failed>
 800bd00:	e025      	b.n	800bd4e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd0a:	d012      	beq.n	800bd32 <UART_SetConfig+0xa2>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00e      	beq.n	800bd32 <UART_SetConfig+0xa2>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd1c:	d009      	beq.n	800bd32 <UART_SetConfig+0xa2>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd26:	d004      	beq.n	800bd32 <UART_SetConfig+0xa2>
 800bd28:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800bd2c:	487d      	ldr	r0, [pc, #500]	@ (800bf24 <UART_SetConfig+0x294>)
 800bd2e:	f7f8 f8ad 	bl	8003e8c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6a1b      	ldr	r3, [r3, #32]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d009      	beq.n	800bd4e <UART_SetConfig+0xbe>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd42:	d004      	beq.n	800bd4e <UART_SetConfig+0xbe>
 800bd44:	f640 4161 	movw	r1, #3169	@ 0xc61
 800bd48:	4876      	ldr	r0, [pc, #472]	@ (800bf24 <UART_SetConfig+0x294>)
 800bd4a:	f7f8 f89f 	bl	8003e8c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00e      	beq.n	800bd74 <UART_SetConfig+0xe4>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd5e:	d009      	beq.n	800bd74 <UART_SetConfig+0xe4>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800bd68:	d004      	beq.n	800bd74 <UART_SetConfig+0xe4>
 800bd6a:	f640 4164 	movw	r1, #3172	@ 0xc64
 800bd6e:	486d      	ldr	r0, [pc, #436]	@ (800bf24 <UART_SetConfig+0x294>)
 800bd70:	f7f8 f88c 	bl	8003e8c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	f023 030c 	bic.w	r3, r3, #12
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d103      	bne.n	800bd88 <UART_SetConfig+0xf8>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d104      	bne.n	800bd92 <UART_SetConfig+0x102>
 800bd88:	f640 4165 	movw	r1, #3173	@ 0xc65
 800bd8c:	4865      	ldr	r0, [pc, #404]	@ (800bf24 <UART_SetConfig+0x294>)
 800bd8e:	f7f8 f87d 	bl	8003e8c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d013      	beq.n	800bdc2 <UART_SetConfig+0x132>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bda2:	d00e      	beq.n	800bdc2 <UART_SetConfig+0x132>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdac:	d009      	beq.n	800bdc2 <UART_SetConfig+0x132>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdb6:	d004      	beq.n	800bdc2 <UART_SetConfig+0x132>
 800bdb8:	f640 4166 	movw	r1, #3174	@ 0xc66
 800bdbc:	4859      	ldr	r0, [pc, #356]	@ (800bf24 <UART_SetConfig+0x294>)
 800bdbe:	f7f8 f865 	bl	8003e8c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d009      	beq.n	800bdde <UART_SetConfig+0x14e>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	69db      	ldr	r3, [r3, #28]
 800bdce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdd2:	d004      	beq.n	800bdde <UART_SetConfig+0x14e>
 800bdd4:	f640 4167 	movw	r1, #3175	@ 0xc67
 800bdd8:	4852      	ldr	r0, [pc, #328]	@ (800bf24 <UART_SetConfig+0x294>)
 800bdda:	f7f8 f857 	bl	8003e8c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	689a      	ldr	r2, [r3, #8]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	431a      	orrs	r2, r3
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	431a      	orrs	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	69db      	ldr	r3, [r3, #28]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	4b4b      	ldr	r3, [pc, #300]	@ (800bf2c <UART_SetConfig+0x29c>)
 800bdfe:	4013      	ands	r3, r2
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	6812      	ldr	r2, [r2, #0]
 800be04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be06:	430b      	orrs	r3, r1
 800be08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	68da      	ldr	r2, [r3, #12]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	430a      	orrs	r2, r1
 800be1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a3f      	ldr	r2, [pc, #252]	@ (800bf28 <UART_SetConfig+0x298>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d004      	beq.n	800be3a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be36:	4313      	orrs	r3, r2
 800be38:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be4a:	430a      	orrs	r2, r1
 800be4c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a37      	ldr	r2, [pc, #220]	@ (800bf30 <UART_SetConfig+0x2a0>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d125      	bne.n	800bea4 <UART_SetConfig+0x214>
 800be58:	4b36      	ldr	r3, [pc, #216]	@ (800bf34 <UART_SetConfig+0x2a4>)
 800be5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be5e:	f003 0303 	and.w	r3, r3, #3
 800be62:	2b03      	cmp	r3, #3
 800be64:	d81a      	bhi.n	800be9c <UART_SetConfig+0x20c>
 800be66:	a201      	add	r2, pc, #4	@ (adr r2, 800be6c <UART_SetConfig+0x1dc>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800be7d 	.word	0x0800be7d
 800be70:	0800be8d 	.word	0x0800be8d
 800be74:	0800be85 	.word	0x0800be85
 800be78:	0800be95 	.word	0x0800be95
 800be7c:	2301      	movs	r3, #1
 800be7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be82:	e114      	b.n	800c0ae <UART_SetConfig+0x41e>
 800be84:	2302      	movs	r3, #2
 800be86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be8a:	e110      	b.n	800c0ae <UART_SetConfig+0x41e>
 800be8c:	2304      	movs	r3, #4
 800be8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be92:	e10c      	b.n	800c0ae <UART_SetConfig+0x41e>
 800be94:	2308      	movs	r3, #8
 800be96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be9a:	e108      	b.n	800c0ae <UART_SetConfig+0x41e>
 800be9c:	2310      	movs	r3, #16
 800be9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bea2:	e104      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a23      	ldr	r2, [pc, #140]	@ (800bf38 <UART_SetConfig+0x2a8>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d146      	bne.n	800bf3c <UART_SetConfig+0x2ac>
 800beae:	4b21      	ldr	r3, [pc, #132]	@ (800bf34 <UART_SetConfig+0x2a4>)
 800beb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beb4:	f003 030c 	and.w	r3, r3, #12
 800beb8:	2b0c      	cmp	r3, #12
 800beba:	d82d      	bhi.n	800bf18 <UART_SetConfig+0x288>
 800bebc:	a201      	add	r2, pc, #4	@ (adr r2, 800bec4 <UART_SetConfig+0x234>)
 800bebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec2:	bf00      	nop
 800bec4:	0800bef9 	.word	0x0800bef9
 800bec8:	0800bf19 	.word	0x0800bf19
 800becc:	0800bf19 	.word	0x0800bf19
 800bed0:	0800bf19 	.word	0x0800bf19
 800bed4:	0800bf09 	.word	0x0800bf09
 800bed8:	0800bf19 	.word	0x0800bf19
 800bedc:	0800bf19 	.word	0x0800bf19
 800bee0:	0800bf19 	.word	0x0800bf19
 800bee4:	0800bf01 	.word	0x0800bf01
 800bee8:	0800bf19 	.word	0x0800bf19
 800beec:	0800bf19 	.word	0x0800bf19
 800bef0:	0800bf19 	.word	0x0800bf19
 800bef4:	0800bf11 	.word	0x0800bf11
 800bef8:	2300      	movs	r3, #0
 800befa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800befe:	e0d6      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf00:	2302      	movs	r3, #2
 800bf02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf06:	e0d2      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf08:	2304      	movs	r3, #4
 800bf0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf0e:	e0ce      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf10:	2308      	movs	r3, #8
 800bf12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf16:	e0ca      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf18:	2310      	movs	r3, #16
 800bf1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf1e:	e0c6      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf20:	00989680 	.word	0x00989680
 800bf24:	0800e2a8 	.word	0x0800e2a8
 800bf28:	40008000 	.word	0x40008000
 800bf2c:	efff69f3 	.word	0xefff69f3
 800bf30:	40013800 	.word	0x40013800
 800bf34:	40021000 	.word	0x40021000
 800bf38:	40004400 	.word	0x40004400
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4aae      	ldr	r2, [pc, #696]	@ (800c1fc <UART_SetConfig+0x56c>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d125      	bne.n	800bf92 <UART_SetConfig+0x302>
 800bf46:	4bae      	ldr	r3, [pc, #696]	@ (800c200 <UART_SetConfig+0x570>)
 800bf48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bf50:	2b30      	cmp	r3, #48	@ 0x30
 800bf52:	d016      	beq.n	800bf82 <UART_SetConfig+0x2f2>
 800bf54:	2b30      	cmp	r3, #48	@ 0x30
 800bf56:	d818      	bhi.n	800bf8a <UART_SetConfig+0x2fa>
 800bf58:	2b20      	cmp	r3, #32
 800bf5a:	d00a      	beq.n	800bf72 <UART_SetConfig+0x2e2>
 800bf5c:	2b20      	cmp	r3, #32
 800bf5e:	d814      	bhi.n	800bf8a <UART_SetConfig+0x2fa>
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <UART_SetConfig+0x2da>
 800bf64:	2b10      	cmp	r3, #16
 800bf66:	d008      	beq.n	800bf7a <UART_SetConfig+0x2ea>
 800bf68:	e00f      	b.n	800bf8a <UART_SetConfig+0x2fa>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf70:	e09d      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf72:	2302      	movs	r3, #2
 800bf74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf78:	e099      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf7a:	2304      	movs	r3, #4
 800bf7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf80:	e095      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf82:	2308      	movs	r3, #8
 800bf84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf88:	e091      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf8a:	2310      	movs	r3, #16
 800bf8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf90:	e08d      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a9b      	ldr	r2, [pc, #620]	@ (800c204 <UART_SetConfig+0x574>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d125      	bne.n	800bfe8 <UART_SetConfig+0x358>
 800bf9c:	4b98      	ldr	r3, [pc, #608]	@ (800c200 <UART_SetConfig+0x570>)
 800bf9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bfa6:	2bc0      	cmp	r3, #192	@ 0xc0
 800bfa8:	d016      	beq.n	800bfd8 <UART_SetConfig+0x348>
 800bfaa:	2bc0      	cmp	r3, #192	@ 0xc0
 800bfac:	d818      	bhi.n	800bfe0 <UART_SetConfig+0x350>
 800bfae:	2b80      	cmp	r3, #128	@ 0x80
 800bfb0:	d00a      	beq.n	800bfc8 <UART_SetConfig+0x338>
 800bfb2:	2b80      	cmp	r3, #128	@ 0x80
 800bfb4:	d814      	bhi.n	800bfe0 <UART_SetConfig+0x350>
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d002      	beq.n	800bfc0 <UART_SetConfig+0x330>
 800bfba:	2b40      	cmp	r3, #64	@ 0x40
 800bfbc:	d008      	beq.n	800bfd0 <UART_SetConfig+0x340>
 800bfbe:	e00f      	b.n	800bfe0 <UART_SetConfig+0x350>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfc6:	e072      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bfc8:	2302      	movs	r3, #2
 800bfca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfce:	e06e      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bfd0:	2304      	movs	r3, #4
 800bfd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfd6:	e06a      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bfd8:	2308      	movs	r3, #8
 800bfda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfde:	e066      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bfe0:	2310      	movs	r3, #16
 800bfe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfe6:	e062      	b.n	800c0ae <UART_SetConfig+0x41e>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a86      	ldr	r2, [pc, #536]	@ (800c208 <UART_SetConfig+0x578>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d12a      	bne.n	800c048 <UART_SetConfig+0x3b8>
 800bff2:	4b83      	ldr	r3, [pc, #524]	@ (800c200 <UART_SetConfig+0x570>)
 800bff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bff8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bffc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c000:	d01a      	beq.n	800c038 <UART_SetConfig+0x3a8>
 800c002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c006:	d81b      	bhi.n	800c040 <UART_SetConfig+0x3b0>
 800c008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c00c:	d00c      	beq.n	800c028 <UART_SetConfig+0x398>
 800c00e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c012:	d815      	bhi.n	800c040 <UART_SetConfig+0x3b0>
 800c014:	2b00      	cmp	r3, #0
 800c016:	d003      	beq.n	800c020 <UART_SetConfig+0x390>
 800c018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c01c:	d008      	beq.n	800c030 <UART_SetConfig+0x3a0>
 800c01e:	e00f      	b.n	800c040 <UART_SetConfig+0x3b0>
 800c020:	2300      	movs	r3, #0
 800c022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c026:	e042      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c028:	2302      	movs	r3, #2
 800c02a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c02e:	e03e      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c030:	2304      	movs	r3, #4
 800c032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c036:	e03a      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c038:	2308      	movs	r3, #8
 800c03a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c03e:	e036      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c040:	2310      	movs	r3, #16
 800c042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c046:	e032      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a6f      	ldr	r2, [pc, #444]	@ (800c20c <UART_SetConfig+0x57c>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d12a      	bne.n	800c0a8 <UART_SetConfig+0x418>
 800c052:	4b6b      	ldr	r3, [pc, #428]	@ (800c200 <UART_SetConfig+0x570>)
 800c054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c058:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c05c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c060:	d01a      	beq.n	800c098 <UART_SetConfig+0x408>
 800c062:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c066:	d81b      	bhi.n	800c0a0 <UART_SetConfig+0x410>
 800c068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c06c:	d00c      	beq.n	800c088 <UART_SetConfig+0x3f8>
 800c06e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c072:	d815      	bhi.n	800c0a0 <UART_SetConfig+0x410>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d003      	beq.n	800c080 <UART_SetConfig+0x3f0>
 800c078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c07c:	d008      	beq.n	800c090 <UART_SetConfig+0x400>
 800c07e:	e00f      	b.n	800c0a0 <UART_SetConfig+0x410>
 800c080:	2300      	movs	r3, #0
 800c082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c086:	e012      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c088:	2302      	movs	r3, #2
 800c08a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c08e:	e00e      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c090:	2304      	movs	r3, #4
 800c092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c096:	e00a      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c098:	2308      	movs	r3, #8
 800c09a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c09e:	e006      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c0a0:	2310      	movs	r3, #16
 800c0a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c0a6:	e002      	b.n	800c0ae <UART_SetConfig+0x41e>
 800c0a8:	2310      	movs	r3, #16
 800c0aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a56      	ldr	r2, [pc, #344]	@ (800c20c <UART_SetConfig+0x57c>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d17a      	bne.n	800c1ae <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c0b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c0bc:	2b08      	cmp	r3, #8
 800c0be:	d824      	bhi.n	800c10a <UART_SetConfig+0x47a>
 800c0c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c8 <UART_SetConfig+0x438>)
 800c0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c6:	bf00      	nop
 800c0c8:	0800c0ed 	.word	0x0800c0ed
 800c0cc:	0800c10b 	.word	0x0800c10b
 800c0d0:	0800c0f5 	.word	0x0800c0f5
 800c0d4:	0800c10b 	.word	0x0800c10b
 800c0d8:	0800c0fb 	.word	0x0800c0fb
 800c0dc:	0800c10b 	.word	0x0800c10b
 800c0e0:	0800c10b 	.word	0x0800c10b
 800c0e4:	0800c10b 	.word	0x0800c10b
 800c0e8:	0800c103 	.word	0x0800c103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0ec:	f7fa fdd2 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 800c0f0:	61f8      	str	r0, [r7, #28]
        break;
 800c0f2:	e010      	b.n	800c116 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0f4:	4b46      	ldr	r3, [pc, #280]	@ (800c210 <UART_SetConfig+0x580>)
 800c0f6:	61fb      	str	r3, [r7, #28]
        break;
 800c0f8:	e00d      	b.n	800c116 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0fa:	f7fa fd33 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 800c0fe:	61f8      	str	r0, [r7, #28]
        break;
 800c100:	e009      	b.n	800c116 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c106:	61fb      	str	r3, [r7, #28]
        break;
 800c108:	e005      	b.n	800c116 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c114:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f000 8107 	beq.w	800c32c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	4613      	mov	r3, r2
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	4413      	add	r3, r2
 800c128:	69fa      	ldr	r2, [r7, #28]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d305      	bcc.n	800c13a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c134:	69fa      	ldr	r2, [r7, #28]
 800c136:	429a      	cmp	r2, r3
 800c138:	d903      	bls.n	800c142 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c140:	e0f4      	b.n	800c32c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	2200      	movs	r2, #0
 800c146:	461c      	mov	r4, r3
 800c148:	4615      	mov	r5, r2
 800c14a:	f04f 0200 	mov.w	r2, #0
 800c14e:	f04f 0300 	mov.w	r3, #0
 800c152:	022b      	lsls	r3, r5, #8
 800c154:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c158:	0222      	lsls	r2, r4, #8
 800c15a:	68f9      	ldr	r1, [r7, #12]
 800c15c:	6849      	ldr	r1, [r1, #4]
 800c15e:	0849      	lsrs	r1, r1, #1
 800c160:	2000      	movs	r0, #0
 800c162:	4688      	mov	r8, r1
 800c164:	4681      	mov	r9, r0
 800c166:	eb12 0a08 	adds.w	sl, r2, r8
 800c16a:	eb43 0b09 	adc.w	fp, r3, r9
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	603b      	str	r3, [r7, #0]
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c17c:	4650      	mov	r0, sl
 800c17e:	4659      	mov	r1, fp
 800c180:	f7f4 f876 	bl	8000270 <__aeabi_uldivmod>
 800c184:	4602      	mov	r2, r0
 800c186:	460b      	mov	r3, r1
 800c188:	4613      	mov	r3, r2
 800c18a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c192:	d308      	bcc.n	800c1a6 <UART_SetConfig+0x516>
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c19a:	d204      	bcs.n	800c1a6 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	69ba      	ldr	r2, [r7, #24]
 800c1a2:	60da      	str	r2, [r3, #12]
 800c1a4:	e0c2      	b.n	800c32c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c1ac:	e0be      	b.n	800c32c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1b6:	d16a      	bne.n	800c28e <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800c1b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d834      	bhi.n	800c22a <UART_SetConfig+0x59a>
 800c1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c8 <UART_SetConfig+0x538>)
 800c1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c6:	bf00      	nop
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c215 	.word	0x0800c215
 800c1d4:	0800c22b 	.word	0x0800c22b
 800c1d8:	0800c21b 	.word	0x0800c21b
 800c1dc:	0800c22b 	.word	0x0800c22b
 800c1e0:	0800c22b 	.word	0x0800c22b
 800c1e4:	0800c22b 	.word	0x0800c22b
 800c1e8:	0800c223 	.word	0x0800c223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1ec:	f7fa fd52 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 800c1f0:	61f8      	str	r0, [r7, #28]
        break;
 800c1f2:	e020      	b.n	800c236 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1f4:	f7fa fd64 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 800c1f8:	61f8      	str	r0, [r7, #28]
        break;
 800c1fa:	e01c      	b.n	800c236 <UART_SetConfig+0x5a6>
 800c1fc:	40004800 	.word	0x40004800
 800c200:	40021000 	.word	0x40021000
 800c204:	40004c00 	.word	0x40004c00
 800c208:	40005000 	.word	0x40005000
 800c20c:	40008000 	.word	0x40008000
 800c210:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c214:	4b4c      	ldr	r3, [pc, #304]	@ (800c348 <UART_SetConfig+0x6b8>)
 800c216:	61fb      	str	r3, [r7, #28]
        break;
 800c218:	e00d      	b.n	800c236 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c21a:	f7fa fca3 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 800c21e:	61f8      	str	r0, [r7, #28]
        break;
 800c220:	e009      	b.n	800c236 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c226:	61fb      	str	r3, [r7, #28]
        break;
 800c228:	e005      	b.n	800c236 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800c22a:	2300      	movs	r3, #0
 800c22c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d077      	beq.n	800c32c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	005a      	lsls	r2, r3, #1
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	085b      	lsrs	r3, r3, #1
 800c246:	441a      	add	r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c250:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	2b0f      	cmp	r3, #15
 800c256:	d916      	bls.n	800c286 <UART_SetConfig+0x5f6>
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c25e:	d212      	bcs.n	800c286 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	b29b      	uxth	r3, r3
 800c264:	f023 030f 	bic.w	r3, r3, #15
 800c268:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	085b      	lsrs	r3, r3, #1
 800c26e:	b29b      	uxth	r3, r3
 800c270:	f003 0307 	and.w	r3, r3, #7
 800c274:	b29a      	uxth	r2, r3
 800c276:	8afb      	ldrh	r3, [r7, #22]
 800c278:	4313      	orrs	r3, r2
 800c27a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	8afa      	ldrh	r2, [r7, #22]
 800c282:	60da      	str	r2, [r3, #12]
 800c284:	e052      	b.n	800c32c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c28c:	e04e      	b.n	800c32c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c28e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c292:	2b08      	cmp	r3, #8
 800c294:	d827      	bhi.n	800c2e6 <UART_SetConfig+0x656>
 800c296:	a201      	add	r2, pc, #4	@ (adr r2, 800c29c <UART_SetConfig+0x60c>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2c1 	.word	0x0800c2c1
 800c2a0:	0800c2c9 	.word	0x0800c2c9
 800c2a4:	0800c2d1 	.word	0x0800c2d1
 800c2a8:	0800c2e7 	.word	0x0800c2e7
 800c2ac:	0800c2d7 	.word	0x0800c2d7
 800c2b0:	0800c2e7 	.word	0x0800c2e7
 800c2b4:	0800c2e7 	.word	0x0800c2e7
 800c2b8:	0800c2e7 	.word	0x0800c2e7
 800c2bc:	0800c2df 	.word	0x0800c2df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2c0:	f7fa fce8 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 800c2c4:	61f8      	str	r0, [r7, #28]
        break;
 800c2c6:	e014      	b.n	800c2f2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2c8:	f7fa fcfa 	bl	8006cc0 <HAL_RCC_GetPCLK2Freq>
 800c2cc:	61f8      	str	r0, [r7, #28]
        break;
 800c2ce:	e010      	b.n	800c2f2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c348 <UART_SetConfig+0x6b8>)
 800c2d2:	61fb      	str	r3, [r7, #28]
        break;
 800c2d4:	e00d      	b.n	800c2f2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2d6:	f7fa fc45 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 800c2da:	61f8      	str	r0, [r7, #28]
        break;
 800c2dc:	e009      	b.n	800c2f2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2e2:	61fb      	str	r3, [r7, #28]
        break;
 800c2e4:	e005      	b.n	800c2f2 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c2f0:	bf00      	nop
    }

    if (pclk != 0U)
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d019      	beq.n	800c32c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	085a      	lsrs	r2, r3, #1
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	441a      	add	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	fbb2 f3f3 	udiv	r3, r2, r3
 800c30a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	2b0f      	cmp	r3, #15
 800c310:	d909      	bls.n	800c326 <UART_SetConfig+0x696>
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c318:	d205      	bcs.n	800c326 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	60da      	str	r2, [r3, #12]
 800c324:	e002      	b.n	800c32c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c338:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3728      	adds	r7, #40	@ 0x28
 800c340:	46bd      	mov	sp, r7
 800c342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c346:	bf00      	nop
 800c348:	00f42400 	.word	0x00f42400

0800c34c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c358:	2bff      	cmp	r3, #255	@ 0xff
 800c35a:	d904      	bls.n	800c366 <UART_AdvFeatureConfig+0x1a>
 800c35c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800c360:	4891      	ldr	r0, [pc, #580]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c362:	f7f7 fd93 	bl	8003e8c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c36a:	f003 0308 	and.w	r3, r3, #8
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d018      	beq.n	800c3a4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c376:	2b00      	cmp	r3, #0
 800c378:	d009      	beq.n	800c38e <UART_AdvFeatureConfig+0x42>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c37e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c382:	d004      	beq.n	800c38e <UART_AdvFeatureConfig+0x42>
 800c384:	f640 5152 	movw	r1, #3410	@ 0xd52
 800c388:	4887      	ldr	r0, [pc, #540]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c38a:	f7f7 fd7f 	bl	8003e8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a8:	f003 0301 	and.w	r3, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d018      	beq.n	800c3e2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d009      	beq.n	800c3cc <UART_AdvFeatureConfig+0x80>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3c0:	d004      	beq.n	800c3cc <UART_AdvFeatureConfig+0x80>
 800c3c2:	f640 5159 	movw	r1, #3417	@ 0xd59
 800c3c6:	4878      	ldr	r0, [pc, #480]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c3c8:	f7f7 fd60 	bl	8003e8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3e6:	f003 0302 	and.w	r3, r3, #2
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d018      	beq.n	800c420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d009      	beq.n	800c40a <UART_AdvFeatureConfig+0xbe>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3fe:	d004      	beq.n	800c40a <UART_AdvFeatureConfig+0xbe>
 800c400:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800c404:	4868      	ldr	r0, [pc, #416]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c406:	f7f7 fd41 	bl	8003e8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	430a      	orrs	r2, r1
 800c41e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d018      	beq.n	800c45e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c430:	2b00      	cmp	r3, #0
 800c432:	d009      	beq.n	800c448 <UART_AdvFeatureConfig+0xfc>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c438:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c43c:	d004      	beq.n	800c448 <UART_AdvFeatureConfig+0xfc>
 800c43e:	f640 5167 	movw	r1, #3431	@ 0xd67
 800c442:	4859      	ldr	r0, [pc, #356]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c444:	f7f7 fd22 	bl	8003e8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	430a      	orrs	r2, r1
 800c45c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c462:	f003 0310 	and.w	r3, r3, #16
 800c466:	2b00      	cmp	r3, #0
 800c468:	d018      	beq.n	800c49c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d009      	beq.n	800c486 <UART_AdvFeatureConfig+0x13a>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c47a:	d004      	beq.n	800c486 <UART_AdvFeatureConfig+0x13a>
 800c47c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800c480:	4849      	ldr	r0, [pc, #292]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c482:	f7f7 fd03 	bl	8003e8c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	430a      	orrs	r2, r1
 800c49a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a0:	f003 0320 	and.w	r3, r3, #32
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d018      	beq.n	800c4da <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d009      	beq.n	800c4c4 <UART_AdvFeatureConfig+0x178>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4b8:	d004      	beq.n	800c4c4 <UART_AdvFeatureConfig+0x178>
 800c4ba:	f640 5175 	movw	r1, #3445	@ 0xd75
 800c4be:	483a      	ldr	r0, [pc, #232]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c4c0:	f7f7 fce4 	bl	8003e8c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d06c      	beq.n	800c5c0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a30      	ldr	r2, [pc, #192]	@ (800c5ac <UART_AdvFeatureConfig+0x260>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d018      	beq.n	800c522 <UART_AdvFeatureConfig+0x1d6>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a2e      	ldr	r2, [pc, #184]	@ (800c5b0 <UART_AdvFeatureConfig+0x264>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d013      	beq.n	800c522 <UART_AdvFeatureConfig+0x1d6>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a2d      	ldr	r2, [pc, #180]	@ (800c5b4 <UART_AdvFeatureConfig+0x268>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d00e      	beq.n	800c522 <UART_AdvFeatureConfig+0x1d6>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a2b      	ldr	r2, [pc, #172]	@ (800c5b8 <UART_AdvFeatureConfig+0x26c>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d009      	beq.n	800c522 <UART_AdvFeatureConfig+0x1d6>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a2a      	ldr	r2, [pc, #168]	@ (800c5bc <UART_AdvFeatureConfig+0x270>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d004      	beq.n	800c522 <UART_AdvFeatureConfig+0x1d6>
 800c518:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800c51c:	4822      	ldr	r0, [pc, #136]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c51e:	f7f7 fcb5 	bl	8003e8c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c526:	2b00      	cmp	r3, #0
 800c528:	d009      	beq.n	800c53e <UART_AdvFeatureConfig+0x1f2>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c52e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c532:	d004      	beq.n	800c53e <UART_AdvFeatureConfig+0x1f2>
 800c534:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800c538:	481b      	ldr	r0, [pc, #108]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c53a:	f7f7 fca7 	bl	8003e8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	430a      	orrs	r2, r1
 800c552:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c558:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c55c:	d130      	bne.n	800c5c0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c562:	2b00      	cmp	r3, #0
 800c564:	d013      	beq.n	800c58e <UART_AdvFeatureConfig+0x242>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c56a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c56e:	d00e      	beq.n	800c58e <UART_AdvFeatureConfig+0x242>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c578:	d009      	beq.n	800c58e <UART_AdvFeatureConfig+0x242>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c57e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c582:	d004      	beq.n	800c58e <UART_AdvFeatureConfig+0x242>
 800c584:	f640 5182 	movw	r1, #3458	@ 0xd82
 800c588:	4807      	ldr	r0, [pc, #28]	@ (800c5a8 <UART_AdvFeatureConfig+0x25c>)
 800c58a:	f7f7 fc7f 	bl	8003e8c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	430a      	orrs	r2, r1
 800c5a2:	605a      	str	r2, [r3, #4]
 800c5a4:	e00c      	b.n	800c5c0 <UART_AdvFeatureConfig+0x274>
 800c5a6:	bf00      	nop
 800c5a8:	0800e2a8 	.word	0x0800e2a8
 800c5ac:	40013800 	.word	0x40013800
 800c5b0:	40004400 	.word	0x40004400
 800c5b4:	40004800 	.word	0x40004800
 800c5b8:	40004c00 	.word	0x40004c00
 800c5bc:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d018      	beq.n	800c5fe <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d009      	beq.n	800c5e8 <UART_AdvFeatureConfig+0x29c>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c5dc:	d004      	beq.n	800c5e8 <UART_AdvFeatureConfig+0x29c>
 800c5de:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800c5e2:	4809      	ldr	r0, [pc, #36]	@ (800c608 <UART_AdvFeatureConfig+0x2bc>)
 800c5e4:	f7f7 fc52 	bl	8003e8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	605a      	str	r2, [r3, #4]
  }
}
 800c5fe:	bf00      	nop
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	0800e2a8 	.word	0x0800e2a8

0800c60c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b098      	sub	sp, #96	@ 0x60
 800c610:	af02      	add	r7, sp, #8
 800c612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c61c:	f7f8 faf8 	bl	8004c10 <HAL_GetTick>
 800c620:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0308 	and.w	r3, r3, #8
 800c62c:	2b08      	cmp	r3, #8
 800c62e:	d12e      	bne.n	800c68e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c638:	2200      	movs	r2, #0
 800c63a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f88c 	bl	800c75c <UART_WaitOnFlagUntilTimeout>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d021      	beq.n	800c68e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c652:	e853 3f00 	ldrex	r3, [r3]
 800c656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c65a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c65e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c668:	647b      	str	r3, [r7, #68]	@ 0x44
 800c66a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c66e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c670:	e841 2300 	strex	r3, r2, [r1]
 800c674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1e6      	bne.n	800c64a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2220      	movs	r2, #32
 800c680:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c68a:	2303      	movs	r3, #3
 800c68c:	e062      	b.n	800c754 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 0304 	and.w	r3, r3, #4
 800c698:	2b04      	cmp	r3, #4
 800c69a:	d149      	bne.n	800c730 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c69c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f856 	bl	800c75c <UART_WaitOnFlagUntilTimeout>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d03c      	beq.n	800c730 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6be:	e853 3f00 	ldrex	r3, [r3]
 800c6c2:	623b      	str	r3, [r7, #32]
   return(result);
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6dc:	e841 2300 	strex	r3, r2, [r1]
 800c6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e6      	bne.n	800c6b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	e853 3f00 	ldrex	r3, [r3]
 800c6f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f023 0301 	bic.w	r3, r3, #1
 800c6fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3308      	adds	r3, #8
 800c706:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c708:	61fa      	str	r2, [r7, #28]
 800c70a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70c:	69b9      	ldr	r1, [r7, #24]
 800c70e:	69fa      	ldr	r2, [r7, #28]
 800c710:	e841 2300 	strex	r3, r2, [r1]
 800c714:	617b      	str	r3, [r7, #20]
   return(result);
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1e5      	bne.n	800c6e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2220      	movs	r2, #32
 800c720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c72c:	2303      	movs	r3, #3
 800c72e:	e011      	b.n	800c754 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2220      	movs	r2, #32
 800c734:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2220      	movs	r2, #32
 800c73a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3758      	adds	r7, #88	@ 0x58
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	603b      	str	r3, [r7, #0]
 800c768:	4613      	mov	r3, r2
 800c76a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c76c:	e04f      	b.n	800c80e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c774:	d04b      	beq.n	800c80e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c776:	f7f8 fa4b 	bl	8004c10 <HAL_GetTick>
 800c77a:	4602      	mov	r2, r0
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	69ba      	ldr	r2, [r7, #24]
 800c782:	429a      	cmp	r2, r3
 800c784:	d302      	bcc.n	800c78c <UART_WaitOnFlagUntilTimeout+0x30>
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d101      	bne.n	800c790 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c78c:	2303      	movs	r3, #3
 800c78e:	e04e      	b.n	800c82e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 0304 	and.w	r3, r3, #4
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d037      	beq.n	800c80e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b80      	cmp	r3, #128	@ 0x80
 800c7a2:	d034      	beq.n	800c80e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2b40      	cmp	r3, #64	@ 0x40
 800c7a8:	d031      	beq.n	800c80e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	69db      	ldr	r3, [r3, #28]
 800c7b0:	f003 0308 	and.w	r3, r3, #8
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	d110      	bne.n	800c7da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2208      	movs	r2, #8
 800c7be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f000 f838 	bl	800c836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2208      	movs	r2, #8
 800c7ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e029      	b.n	800c82e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	69db      	ldr	r3, [r3, #28]
 800c7e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7e8:	d111      	bne.n	800c80e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c7f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f000 f81e 	bl	800c836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2220      	movs	r2, #32
 800c7fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c80a:	2303      	movs	r3, #3
 800c80c:	e00f      	b.n	800c82e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	69da      	ldr	r2, [r3, #28]
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	4013      	ands	r3, r2
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	bf0c      	ite	eq
 800c81e:	2301      	moveq	r3, #1
 800c820:	2300      	movne	r3, #0
 800c822:	b2db      	uxtb	r3, r3
 800c824:	461a      	mov	r2, r3
 800c826:	79fb      	ldrb	r3, [r7, #7]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d0a0      	beq.n	800c76e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c836:	b480      	push	{r7}
 800c838:	b095      	sub	sp, #84	@ 0x54
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c846:	e853 3f00 	ldrex	r3, [r3]
 800c84a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	461a      	mov	r2, r3
 800c85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c85c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c85e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c860:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c864:	e841 2300 	strex	r3, r2, [r1]
 800c868:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1e6      	bne.n	800c83e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	3308      	adds	r3, #8
 800c876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c878:	6a3b      	ldr	r3, [r7, #32]
 800c87a:	e853 3f00 	ldrex	r3, [r3]
 800c87e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	f023 0301 	bic.w	r3, r3, #1
 800c886:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	3308      	adds	r3, #8
 800c88e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c890:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c898:	e841 2300 	strex	r3, r2, [r1]
 800c89c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1e5      	bne.n	800c870 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d118      	bne.n	800c8de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	e853 3f00 	ldrex	r3, [r3]
 800c8b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	f023 0310 	bic.w	r3, r3, #16
 800c8c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8ca:	61bb      	str	r3, [r7, #24]
 800c8cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ce:	6979      	ldr	r1, [r7, #20]
 800c8d0:	69ba      	ldr	r2, [r7, #24]
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1e6      	bne.n	800c8ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c8f2:	bf00      	nop
 800c8f4:	3754      	adds	r7, #84	@ 0x54
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
	...

0800c900 <calloc>:
 800c900:	4b02      	ldr	r3, [pc, #8]	@ (800c90c <calloc+0xc>)
 800c902:	460a      	mov	r2, r1
 800c904:	4601      	mov	r1, r0
 800c906:	6818      	ldr	r0, [r3, #0]
 800c908:	f000 b802 	b.w	800c910 <_calloc_r>
 800c90c:	20000028 	.word	0x20000028

0800c910 <_calloc_r>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	fba1 5402 	umull	r5, r4, r1, r2
 800c916:	b934      	cbnz	r4, 800c926 <_calloc_r+0x16>
 800c918:	4629      	mov	r1, r5
 800c91a:	f000 f83f 	bl	800c99c <_malloc_r>
 800c91e:	4606      	mov	r6, r0
 800c920:	b928      	cbnz	r0, 800c92e <_calloc_r+0x1e>
 800c922:	4630      	mov	r0, r6
 800c924:	bd70      	pop	{r4, r5, r6, pc}
 800c926:	220c      	movs	r2, #12
 800c928:	6002      	str	r2, [r0, #0]
 800c92a:	2600      	movs	r6, #0
 800c92c:	e7f9      	b.n	800c922 <_calloc_r+0x12>
 800c92e:	462a      	mov	r2, r5
 800c930:	4621      	mov	r1, r4
 800c932:	f000 fac7 	bl	800cec4 <memset>
 800c936:	e7f4      	b.n	800c922 <_calloc_r+0x12>

0800c938 <malloc>:
 800c938:	4b02      	ldr	r3, [pc, #8]	@ (800c944 <malloc+0xc>)
 800c93a:	4601      	mov	r1, r0
 800c93c:	6818      	ldr	r0, [r3, #0]
 800c93e:	f000 b82d 	b.w	800c99c <_malloc_r>
 800c942:	bf00      	nop
 800c944:	20000028 	.word	0x20000028

0800c948 <free>:
 800c948:	4b02      	ldr	r3, [pc, #8]	@ (800c954 <free+0xc>)
 800c94a:	4601      	mov	r1, r0
 800c94c:	6818      	ldr	r0, [r3, #0]
 800c94e:	f000 bb53 	b.w	800cff8 <_free_r>
 800c952:	bf00      	nop
 800c954:	20000028 	.word	0x20000028

0800c958 <sbrk_aligned>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	4e0f      	ldr	r6, [pc, #60]	@ (800c998 <sbrk_aligned+0x40>)
 800c95c:	460c      	mov	r4, r1
 800c95e:	6831      	ldr	r1, [r6, #0]
 800c960:	4605      	mov	r5, r0
 800c962:	b911      	cbnz	r1, 800c96a <sbrk_aligned+0x12>
 800c964:	f000 faea 	bl	800cf3c <_sbrk_r>
 800c968:	6030      	str	r0, [r6, #0]
 800c96a:	4621      	mov	r1, r4
 800c96c:	4628      	mov	r0, r5
 800c96e:	f000 fae5 	bl	800cf3c <_sbrk_r>
 800c972:	1c43      	adds	r3, r0, #1
 800c974:	d103      	bne.n	800c97e <sbrk_aligned+0x26>
 800c976:	f04f 34ff 	mov.w	r4, #4294967295
 800c97a:	4620      	mov	r0, r4
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
 800c97e:	1cc4      	adds	r4, r0, #3
 800c980:	f024 0403 	bic.w	r4, r4, #3
 800c984:	42a0      	cmp	r0, r4
 800c986:	d0f8      	beq.n	800c97a <sbrk_aligned+0x22>
 800c988:	1a21      	subs	r1, r4, r0
 800c98a:	4628      	mov	r0, r5
 800c98c:	f000 fad6 	bl	800cf3c <_sbrk_r>
 800c990:	3001      	adds	r0, #1
 800c992:	d1f2      	bne.n	800c97a <sbrk_aligned+0x22>
 800c994:	e7ef      	b.n	800c976 <sbrk_aligned+0x1e>
 800c996:	bf00      	nop
 800c998:	20001088 	.word	0x20001088

0800c99c <_malloc_r>:
 800c99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a0:	1ccd      	adds	r5, r1, #3
 800c9a2:	f025 0503 	bic.w	r5, r5, #3
 800c9a6:	3508      	adds	r5, #8
 800c9a8:	2d0c      	cmp	r5, #12
 800c9aa:	bf38      	it	cc
 800c9ac:	250c      	movcc	r5, #12
 800c9ae:	2d00      	cmp	r5, #0
 800c9b0:	4606      	mov	r6, r0
 800c9b2:	db01      	blt.n	800c9b8 <_malloc_r+0x1c>
 800c9b4:	42a9      	cmp	r1, r5
 800c9b6:	d904      	bls.n	800c9c2 <_malloc_r+0x26>
 800c9b8:	230c      	movs	r3, #12
 800c9ba:	6033      	str	r3, [r6, #0]
 800c9bc:	2000      	movs	r0, #0
 800c9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca98 <_malloc_r+0xfc>
 800c9c6:	f000 f869 	bl	800ca9c <__malloc_lock>
 800c9ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ce:	461c      	mov	r4, r3
 800c9d0:	bb44      	cbnz	r4, 800ca24 <_malloc_r+0x88>
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7ff ffbf 	bl	800c958 <sbrk_aligned>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	4604      	mov	r4, r0
 800c9de:	d158      	bne.n	800ca92 <_malloc_r+0xf6>
 800c9e0:	f8d8 4000 	ldr.w	r4, [r8]
 800c9e4:	4627      	mov	r7, r4
 800c9e6:	2f00      	cmp	r7, #0
 800c9e8:	d143      	bne.n	800ca72 <_malloc_r+0xd6>
 800c9ea:	2c00      	cmp	r4, #0
 800c9ec:	d04b      	beq.n	800ca86 <_malloc_r+0xea>
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	4639      	mov	r1, r7
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	eb04 0903 	add.w	r9, r4, r3
 800c9f8:	f000 faa0 	bl	800cf3c <_sbrk_r>
 800c9fc:	4581      	cmp	r9, r0
 800c9fe:	d142      	bne.n	800ca86 <_malloc_r+0xea>
 800ca00:	6821      	ldr	r1, [r4, #0]
 800ca02:	1a6d      	subs	r5, r5, r1
 800ca04:	4629      	mov	r1, r5
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7ff ffa6 	bl	800c958 <sbrk_aligned>
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	d03a      	beq.n	800ca86 <_malloc_r+0xea>
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	442b      	add	r3, r5
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	f8d8 3000 	ldr.w	r3, [r8]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	bb62      	cbnz	r2, 800ca78 <_malloc_r+0xdc>
 800ca1e:	f8c8 7000 	str.w	r7, [r8]
 800ca22:	e00f      	b.n	800ca44 <_malloc_r+0xa8>
 800ca24:	6822      	ldr	r2, [r4, #0]
 800ca26:	1b52      	subs	r2, r2, r5
 800ca28:	d420      	bmi.n	800ca6c <_malloc_r+0xd0>
 800ca2a:	2a0b      	cmp	r2, #11
 800ca2c:	d917      	bls.n	800ca5e <_malloc_r+0xc2>
 800ca2e:	1961      	adds	r1, r4, r5
 800ca30:	42a3      	cmp	r3, r4
 800ca32:	6025      	str	r5, [r4, #0]
 800ca34:	bf18      	it	ne
 800ca36:	6059      	strne	r1, [r3, #4]
 800ca38:	6863      	ldr	r3, [r4, #4]
 800ca3a:	bf08      	it	eq
 800ca3c:	f8c8 1000 	streq.w	r1, [r8]
 800ca40:	5162      	str	r2, [r4, r5]
 800ca42:	604b      	str	r3, [r1, #4]
 800ca44:	4630      	mov	r0, r6
 800ca46:	f000 f82f 	bl	800caa8 <__malloc_unlock>
 800ca4a:	f104 000b 	add.w	r0, r4, #11
 800ca4e:	1d23      	adds	r3, r4, #4
 800ca50:	f020 0007 	bic.w	r0, r0, #7
 800ca54:	1ac2      	subs	r2, r0, r3
 800ca56:	bf1c      	itt	ne
 800ca58:	1a1b      	subne	r3, r3, r0
 800ca5a:	50a3      	strne	r3, [r4, r2]
 800ca5c:	e7af      	b.n	800c9be <_malloc_r+0x22>
 800ca5e:	6862      	ldr	r2, [r4, #4]
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	bf0c      	ite	eq
 800ca64:	f8c8 2000 	streq.w	r2, [r8]
 800ca68:	605a      	strne	r2, [r3, #4]
 800ca6a:	e7eb      	b.n	800ca44 <_malloc_r+0xa8>
 800ca6c:	4623      	mov	r3, r4
 800ca6e:	6864      	ldr	r4, [r4, #4]
 800ca70:	e7ae      	b.n	800c9d0 <_malloc_r+0x34>
 800ca72:	463c      	mov	r4, r7
 800ca74:	687f      	ldr	r7, [r7, #4]
 800ca76:	e7b6      	b.n	800c9e6 <_malloc_r+0x4a>
 800ca78:	461a      	mov	r2, r3
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	d1fb      	bne.n	800ca78 <_malloc_r+0xdc>
 800ca80:	2300      	movs	r3, #0
 800ca82:	6053      	str	r3, [r2, #4]
 800ca84:	e7de      	b.n	800ca44 <_malloc_r+0xa8>
 800ca86:	230c      	movs	r3, #12
 800ca88:	6033      	str	r3, [r6, #0]
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f000 f80c 	bl	800caa8 <__malloc_unlock>
 800ca90:	e794      	b.n	800c9bc <_malloc_r+0x20>
 800ca92:	6005      	str	r5, [r0, #0]
 800ca94:	e7d6      	b.n	800ca44 <_malloc_r+0xa8>
 800ca96:	bf00      	nop
 800ca98:	2000108c 	.word	0x2000108c

0800ca9c <__malloc_lock>:
 800ca9c:	4801      	ldr	r0, [pc, #4]	@ (800caa4 <__malloc_lock+0x8>)
 800ca9e:	f000 ba9a 	b.w	800cfd6 <__retarget_lock_acquire_recursive>
 800caa2:	bf00      	nop
 800caa4:	200011d0 	.word	0x200011d0

0800caa8 <__malloc_unlock>:
 800caa8:	4801      	ldr	r0, [pc, #4]	@ (800cab0 <__malloc_unlock+0x8>)
 800caaa:	f000 ba95 	b.w	800cfd8 <__retarget_lock_release_recursive>
 800caae:	bf00      	nop
 800cab0:	200011d0 	.word	0x200011d0

0800cab4 <std>:
 800cab4:	2300      	movs	r3, #0
 800cab6:	b510      	push	{r4, lr}
 800cab8:	4604      	mov	r4, r0
 800caba:	e9c0 3300 	strd	r3, r3, [r0]
 800cabe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cac2:	6083      	str	r3, [r0, #8]
 800cac4:	8181      	strh	r1, [r0, #12]
 800cac6:	6643      	str	r3, [r0, #100]	@ 0x64
 800cac8:	81c2      	strh	r2, [r0, #14]
 800caca:	6183      	str	r3, [r0, #24]
 800cacc:	4619      	mov	r1, r3
 800cace:	2208      	movs	r2, #8
 800cad0:	305c      	adds	r0, #92	@ 0x5c
 800cad2:	f000 f9f7 	bl	800cec4 <memset>
 800cad6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb0c <std+0x58>)
 800cad8:	6263      	str	r3, [r4, #36]	@ 0x24
 800cada:	4b0d      	ldr	r3, [pc, #52]	@ (800cb10 <std+0x5c>)
 800cadc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cade:	4b0d      	ldr	r3, [pc, #52]	@ (800cb14 <std+0x60>)
 800cae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cae2:	4b0d      	ldr	r3, [pc, #52]	@ (800cb18 <std+0x64>)
 800cae4:	6323      	str	r3, [r4, #48]	@ 0x30
 800cae6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb1c <std+0x68>)
 800cae8:	6224      	str	r4, [r4, #32]
 800caea:	429c      	cmp	r4, r3
 800caec:	d006      	beq.n	800cafc <std+0x48>
 800caee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800caf2:	4294      	cmp	r4, r2
 800caf4:	d002      	beq.n	800cafc <std+0x48>
 800caf6:	33d0      	adds	r3, #208	@ 0xd0
 800caf8:	429c      	cmp	r4, r3
 800cafa:	d105      	bne.n	800cb08 <std+0x54>
 800cafc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb04:	f000 ba66 	b.w	800cfd4 <__retarget_lock_init_recursive>
 800cb08:	bd10      	pop	{r4, pc}
 800cb0a:	bf00      	nop
 800cb0c:	0800cdc5 	.word	0x0800cdc5
 800cb10:	0800cde7 	.word	0x0800cde7
 800cb14:	0800ce1f 	.word	0x0800ce1f
 800cb18:	0800ce43 	.word	0x0800ce43
 800cb1c:	20001090 	.word	0x20001090

0800cb20 <stdio_exit_handler>:
 800cb20:	4a02      	ldr	r2, [pc, #8]	@ (800cb2c <stdio_exit_handler+0xc>)
 800cb22:	4903      	ldr	r1, [pc, #12]	@ (800cb30 <stdio_exit_handler+0x10>)
 800cb24:	4803      	ldr	r0, [pc, #12]	@ (800cb34 <stdio_exit_handler+0x14>)
 800cb26:	f000 b869 	b.w	800cbfc <_fwalk_sglue>
 800cb2a:	bf00      	nop
 800cb2c:	2000001c 	.word	0x2000001c
 800cb30:	0800d9e1 	.word	0x0800d9e1
 800cb34:	2000002c 	.word	0x2000002c

0800cb38 <cleanup_stdio>:
 800cb38:	6841      	ldr	r1, [r0, #4]
 800cb3a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb6c <cleanup_stdio+0x34>)
 800cb3c:	4299      	cmp	r1, r3
 800cb3e:	b510      	push	{r4, lr}
 800cb40:	4604      	mov	r4, r0
 800cb42:	d001      	beq.n	800cb48 <cleanup_stdio+0x10>
 800cb44:	f000 ff4c 	bl	800d9e0 <_fflush_r>
 800cb48:	68a1      	ldr	r1, [r4, #8]
 800cb4a:	4b09      	ldr	r3, [pc, #36]	@ (800cb70 <cleanup_stdio+0x38>)
 800cb4c:	4299      	cmp	r1, r3
 800cb4e:	d002      	beq.n	800cb56 <cleanup_stdio+0x1e>
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 ff45 	bl	800d9e0 <_fflush_r>
 800cb56:	68e1      	ldr	r1, [r4, #12]
 800cb58:	4b06      	ldr	r3, [pc, #24]	@ (800cb74 <cleanup_stdio+0x3c>)
 800cb5a:	4299      	cmp	r1, r3
 800cb5c:	d004      	beq.n	800cb68 <cleanup_stdio+0x30>
 800cb5e:	4620      	mov	r0, r4
 800cb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb64:	f000 bf3c 	b.w	800d9e0 <_fflush_r>
 800cb68:	bd10      	pop	{r4, pc}
 800cb6a:	bf00      	nop
 800cb6c:	20001090 	.word	0x20001090
 800cb70:	200010f8 	.word	0x200010f8
 800cb74:	20001160 	.word	0x20001160

0800cb78 <global_stdio_init.part.0>:
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	4b0b      	ldr	r3, [pc, #44]	@ (800cba8 <global_stdio_init.part.0+0x30>)
 800cb7c:	4c0b      	ldr	r4, [pc, #44]	@ (800cbac <global_stdio_init.part.0+0x34>)
 800cb7e:	4a0c      	ldr	r2, [pc, #48]	@ (800cbb0 <global_stdio_init.part.0+0x38>)
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	4620      	mov	r0, r4
 800cb84:	2200      	movs	r2, #0
 800cb86:	2104      	movs	r1, #4
 800cb88:	f7ff ff94 	bl	800cab4 <std>
 800cb8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cb90:	2201      	movs	r2, #1
 800cb92:	2109      	movs	r1, #9
 800cb94:	f7ff ff8e 	bl	800cab4 <std>
 800cb98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cb9c:	2202      	movs	r2, #2
 800cb9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba2:	2112      	movs	r1, #18
 800cba4:	f7ff bf86 	b.w	800cab4 <std>
 800cba8:	200011c8 	.word	0x200011c8
 800cbac:	20001090 	.word	0x20001090
 800cbb0:	0800cb21 	.word	0x0800cb21

0800cbb4 <__sfp_lock_acquire>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	@ (800cbbc <__sfp_lock_acquire+0x8>)
 800cbb6:	f000 ba0e 	b.w	800cfd6 <__retarget_lock_acquire_recursive>
 800cbba:	bf00      	nop
 800cbbc:	200011d1 	.word	0x200011d1

0800cbc0 <__sfp_lock_release>:
 800cbc0:	4801      	ldr	r0, [pc, #4]	@ (800cbc8 <__sfp_lock_release+0x8>)
 800cbc2:	f000 ba09 	b.w	800cfd8 <__retarget_lock_release_recursive>
 800cbc6:	bf00      	nop
 800cbc8:	200011d1 	.word	0x200011d1

0800cbcc <__sinit>:
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	4604      	mov	r4, r0
 800cbd0:	f7ff fff0 	bl	800cbb4 <__sfp_lock_acquire>
 800cbd4:	6a23      	ldr	r3, [r4, #32]
 800cbd6:	b11b      	cbz	r3, 800cbe0 <__sinit+0x14>
 800cbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbdc:	f7ff bff0 	b.w	800cbc0 <__sfp_lock_release>
 800cbe0:	4b04      	ldr	r3, [pc, #16]	@ (800cbf4 <__sinit+0x28>)
 800cbe2:	6223      	str	r3, [r4, #32]
 800cbe4:	4b04      	ldr	r3, [pc, #16]	@ (800cbf8 <__sinit+0x2c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1f5      	bne.n	800cbd8 <__sinit+0xc>
 800cbec:	f7ff ffc4 	bl	800cb78 <global_stdio_init.part.0>
 800cbf0:	e7f2      	b.n	800cbd8 <__sinit+0xc>
 800cbf2:	bf00      	nop
 800cbf4:	0800cb39 	.word	0x0800cb39
 800cbf8:	200011c8 	.word	0x200011c8

0800cbfc <_fwalk_sglue>:
 800cbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc00:	4607      	mov	r7, r0
 800cc02:	4688      	mov	r8, r1
 800cc04:	4614      	mov	r4, r2
 800cc06:	2600      	movs	r6, #0
 800cc08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc0c:	f1b9 0901 	subs.w	r9, r9, #1
 800cc10:	d505      	bpl.n	800cc1e <_fwalk_sglue+0x22>
 800cc12:	6824      	ldr	r4, [r4, #0]
 800cc14:	2c00      	cmp	r4, #0
 800cc16:	d1f7      	bne.n	800cc08 <_fwalk_sglue+0xc>
 800cc18:	4630      	mov	r0, r6
 800cc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc1e:	89ab      	ldrh	r3, [r5, #12]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d907      	bls.n	800cc34 <_fwalk_sglue+0x38>
 800cc24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	d003      	beq.n	800cc34 <_fwalk_sglue+0x38>
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4638      	mov	r0, r7
 800cc30:	47c0      	blx	r8
 800cc32:	4306      	orrs	r6, r0
 800cc34:	3568      	adds	r5, #104	@ 0x68
 800cc36:	e7e9      	b.n	800cc0c <_fwalk_sglue+0x10>

0800cc38 <iprintf>:
 800cc38:	b40f      	push	{r0, r1, r2, r3}
 800cc3a:	b507      	push	{r0, r1, r2, lr}
 800cc3c:	4906      	ldr	r1, [pc, #24]	@ (800cc58 <iprintf+0x20>)
 800cc3e:	ab04      	add	r3, sp, #16
 800cc40:	6808      	ldr	r0, [r1, #0]
 800cc42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc46:	6881      	ldr	r1, [r0, #8]
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	f000 fba1 	bl	800d390 <_vfiprintf_r>
 800cc4e:	b003      	add	sp, #12
 800cc50:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc54:	b004      	add	sp, #16
 800cc56:	4770      	bx	lr
 800cc58:	20000028 	.word	0x20000028

0800cc5c <setvbuf>:
 800cc5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc60:	461d      	mov	r5, r3
 800cc62:	4b57      	ldr	r3, [pc, #348]	@ (800cdc0 <setvbuf+0x164>)
 800cc64:	681f      	ldr	r7, [r3, #0]
 800cc66:	4604      	mov	r4, r0
 800cc68:	460e      	mov	r6, r1
 800cc6a:	4690      	mov	r8, r2
 800cc6c:	b127      	cbz	r7, 800cc78 <setvbuf+0x1c>
 800cc6e:	6a3b      	ldr	r3, [r7, #32]
 800cc70:	b913      	cbnz	r3, 800cc78 <setvbuf+0x1c>
 800cc72:	4638      	mov	r0, r7
 800cc74:	f7ff ffaa 	bl	800cbcc <__sinit>
 800cc78:	f1b8 0f02 	cmp.w	r8, #2
 800cc7c:	d006      	beq.n	800cc8c <setvbuf+0x30>
 800cc7e:	f1b8 0f01 	cmp.w	r8, #1
 800cc82:	f200 809a 	bhi.w	800cdba <setvbuf+0x15e>
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	f2c0 8097 	blt.w	800cdba <setvbuf+0x15e>
 800cc8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc8e:	07d9      	lsls	r1, r3, #31
 800cc90:	d405      	bmi.n	800cc9e <setvbuf+0x42>
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	059a      	lsls	r2, r3, #22
 800cc96:	d402      	bmi.n	800cc9e <setvbuf+0x42>
 800cc98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc9a:	f000 f99c 	bl	800cfd6 <__retarget_lock_acquire_recursive>
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4638      	mov	r0, r7
 800cca2:	f000 fe9d 	bl	800d9e0 <_fflush_r>
 800cca6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cca8:	b141      	cbz	r1, 800ccbc <setvbuf+0x60>
 800ccaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccae:	4299      	cmp	r1, r3
 800ccb0:	d002      	beq.n	800ccb8 <setvbuf+0x5c>
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	f000 f9a0 	bl	800cff8 <_free_r>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61a3      	str	r3, [r4, #24]
 800ccc0:	6063      	str	r3, [r4, #4]
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	061b      	lsls	r3, r3, #24
 800ccc6:	d503      	bpl.n	800ccd0 <setvbuf+0x74>
 800ccc8:	6921      	ldr	r1, [r4, #16]
 800ccca:	4638      	mov	r0, r7
 800cccc:	f000 f994 	bl	800cff8 <_free_r>
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800ccd6:	f023 0303 	bic.w	r3, r3, #3
 800ccda:	f1b8 0f02 	cmp.w	r8, #2
 800ccde:	81a3      	strh	r3, [r4, #12]
 800cce0:	d061      	beq.n	800cda6 <setvbuf+0x14a>
 800cce2:	ab01      	add	r3, sp, #4
 800cce4:	466a      	mov	r2, sp
 800cce6:	4621      	mov	r1, r4
 800cce8:	4638      	mov	r0, r7
 800ccea:	f000 fea1 	bl	800da30 <__swhatbuf_r>
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	4318      	orrs	r0, r3
 800ccf2:	81a0      	strh	r0, [r4, #12]
 800ccf4:	bb2d      	cbnz	r5, 800cd42 <setvbuf+0xe6>
 800ccf6:	9d00      	ldr	r5, [sp, #0]
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f7ff fe1d 	bl	800c938 <malloc>
 800ccfe:	4606      	mov	r6, r0
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d152      	bne.n	800cdaa <setvbuf+0x14e>
 800cd04:	f8dd 9000 	ldr.w	r9, [sp]
 800cd08:	45a9      	cmp	r9, r5
 800cd0a:	d140      	bne.n	800cd8e <setvbuf+0x132>
 800cd0c:	f04f 35ff 	mov.w	r5, #4294967295
 800cd10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd14:	f043 0202 	orr.w	r2, r3, #2
 800cd18:	81a2      	strh	r2, [r4, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	60a2      	str	r2, [r4, #8]
 800cd1e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800cd22:	6022      	str	r2, [r4, #0]
 800cd24:	6122      	str	r2, [r4, #16]
 800cd26:	2201      	movs	r2, #1
 800cd28:	6162      	str	r2, [r4, #20]
 800cd2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd2c:	07d6      	lsls	r6, r2, #31
 800cd2e:	d404      	bmi.n	800cd3a <setvbuf+0xde>
 800cd30:	0598      	lsls	r0, r3, #22
 800cd32:	d402      	bmi.n	800cd3a <setvbuf+0xde>
 800cd34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd36:	f000 f94f 	bl	800cfd8 <__retarget_lock_release_recursive>
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	b003      	add	sp, #12
 800cd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd42:	2e00      	cmp	r6, #0
 800cd44:	d0d8      	beq.n	800ccf8 <setvbuf+0x9c>
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	b913      	cbnz	r3, 800cd50 <setvbuf+0xf4>
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	f7ff ff3e 	bl	800cbcc <__sinit>
 800cd50:	f1b8 0f01 	cmp.w	r8, #1
 800cd54:	bf08      	it	eq
 800cd56:	89a3      	ldrheq	r3, [r4, #12]
 800cd58:	6026      	str	r6, [r4, #0]
 800cd5a:	bf04      	itt	eq
 800cd5c:	f043 0301 	orreq.w	r3, r3, #1
 800cd60:	81a3      	strheq	r3, [r4, #12]
 800cd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd66:	f013 0208 	ands.w	r2, r3, #8
 800cd6a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800cd6e:	d01e      	beq.n	800cdae <setvbuf+0x152>
 800cd70:	07d9      	lsls	r1, r3, #31
 800cd72:	bf41      	itttt	mi
 800cd74:	2200      	movmi	r2, #0
 800cd76:	426d      	negmi	r5, r5
 800cd78:	60a2      	strmi	r2, [r4, #8]
 800cd7a:	61a5      	strmi	r5, [r4, #24]
 800cd7c:	bf58      	it	pl
 800cd7e:	60a5      	strpl	r5, [r4, #8]
 800cd80:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd82:	07d2      	lsls	r2, r2, #31
 800cd84:	d401      	bmi.n	800cd8a <setvbuf+0x12e>
 800cd86:	059b      	lsls	r3, r3, #22
 800cd88:	d513      	bpl.n	800cdb2 <setvbuf+0x156>
 800cd8a:	2500      	movs	r5, #0
 800cd8c:	e7d5      	b.n	800cd3a <setvbuf+0xde>
 800cd8e:	4648      	mov	r0, r9
 800cd90:	f7ff fdd2 	bl	800c938 <malloc>
 800cd94:	4606      	mov	r6, r0
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d0b8      	beq.n	800cd0c <setvbuf+0xb0>
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cda0:	81a3      	strh	r3, [r4, #12]
 800cda2:	464d      	mov	r5, r9
 800cda4:	e7cf      	b.n	800cd46 <setvbuf+0xea>
 800cda6:	2500      	movs	r5, #0
 800cda8:	e7b2      	b.n	800cd10 <setvbuf+0xb4>
 800cdaa:	46a9      	mov	r9, r5
 800cdac:	e7f5      	b.n	800cd9a <setvbuf+0x13e>
 800cdae:	60a2      	str	r2, [r4, #8]
 800cdb0:	e7e6      	b.n	800cd80 <setvbuf+0x124>
 800cdb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdb4:	f000 f910 	bl	800cfd8 <__retarget_lock_release_recursive>
 800cdb8:	e7e7      	b.n	800cd8a <setvbuf+0x12e>
 800cdba:	f04f 35ff 	mov.w	r5, #4294967295
 800cdbe:	e7bc      	b.n	800cd3a <setvbuf+0xde>
 800cdc0:	20000028 	.word	0x20000028

0800cdc4 <__sread>:
 800cdc4:	b510      	push	{r4, lr}
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdcc:	f000 f8a4 	bl	800cf18 <_read_r>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	bfab      	itete	ge
 800cdd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cdd6:	89a3      	ldrhlt	r3, [r4, #12]
 800cdd8:	181b      	addge	r3, r3, r0
 800cdda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cdde:	bfac      	ite	ge
 800cde0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cde2:	81a3      	strhlt	r3, [r4, #12]
 800cde4:	bd10      	pop	{r4, pc}

0800cde6 <__swrite>:
 800cde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdea:	461f      	mov	r7, r3
 800cdec:	898b      	ldrh	r3, [r1, #12]
 800cdee:	05db      	lsls	r3, r3, #23
 800cdf0:	4605      	mov	r5, r0
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	4616      	mov	r6, r2
 800cdf6:	d505      	bpl.n	800ce04 <__swrite+0x1e>
 800cdf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f000 f878 	bl	800cef4 <_lseek_r>
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	4632      	mov	r2, r6
 800ce12:	463b      	mov	r3, r7
 800ce14:	4628      	mov	r0, r5
 800ce16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1a:	f000 b89f 	b.w	800cf5c <_write_r>

0800ce1e <__sseek>:
 800ce1e:	b510      	push	{r4, lr}
 800ce20:	460c      	mov	r4, r1
 800ce22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce26:	f000 f865 	bl	800cef4 <_lseek_r>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	bf15      	itete	ne
 800ce30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce3a:	81a3      	strheq	r3, [r4, #12]
 800ce3c:	bf18      	it	ne
 800ce3e:	81a3      	strhne	r3, [r4, #12]
 800ce40:	bd10      	pop	{r4, pc}

0800ce42 <__sclose>:
 800ce42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce46:	f000 b845 	b.w	800ced4 <_close_r>

0800ce4a <_vsniprintf_r>:
 800ce4a:	b530      	push	{r4, r5, lr}
 800ce4c:	4614      	mov	r4, r2
 800ce4e:	2c00      	cmp	r4, #0
 800ce50:	b09b      	sub	sp, #108	@ 0x6c
 800ce52:	4605      	mov	r5, r0
 800ce54:	461a      	mov	r2, r3
 800ce56:	da05      	bge.n	800ce64 <_vsniprintf_r+0x1a>
 800ce58:	238b      	movs	r3, #139	@ 0x8b
 800ce5a:	6003      	str	r3, [r0, #0]
 800ce5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce60:	b01b      	add	sp, #108	@ 0x6c
 800ce62:	bd30      	pop	{r4, r5, pc}
 800ce64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ce68:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ce6c:	f04f 0300 	mov.w	r3, #0
 800ce70:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce72:	bf14      	ite	ne
 800ce74:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce78:	4623      	moveq	r3, r4
 800ce7a:	9302      	str	r3, [sp, #8]
 800ce7c:	9305      	str	r3, [sp, #20]
 800ce7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce82:	9100      	str	r1, [sp, #0]
 800ce84:	9104      	str	r1, [sp, #16]
 800ce86:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ce8a:	4669      	mov	r1, sp
 800ce8c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ce8e:	f000 f959 	bl	800d144 <_svfiprintf_r>
 800ce92:	1c43      	adds	r3, r0, #1
 800ce94:	bfbc      	itt	lt
 800ce96:	238b      	movlt	r3, #139	@ 0x8b
 800ce98:	602b      	strlt	r3, [r5, #0]
 800ce9a:	2c00      	cmp	r4, #0
 800ce9c:	d0e0      	beq.n	800ce60 <_vsniprintf_r+0x16>
 800ce9e:	9b00      	ldr	r3, [sp, #0]
 800cea0:	2200      	movs	r2, #0
 800cea2:	701a      	strb	r2, [r3, #0]
 800cea4:	e7dc      	b.n	800ce60 <_vsniprintf_r+0x16>
	...

0800cea8 <vsniprintf>:
 800cea8:	b507      	push	{r0, r1, r2, lr}
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	4613      	mov	r3, r2
 800ceae:	460a      	mov	r2, r1
 800ceb0:	4601      	mov	r1, r0
 800ceb2:	4803      	ldr	r0, [pc, #12]	@ (800cec0 <vsniprintf+0x18>)
 800ceb4:	6800      	ldr	r0, [r0, #0]
 800ceb6:	f7ff ffc8 	bl	800ce4a <_vsniprintf_r>
 800ceba:	b003      	add	sp, #12
 800cebc:	f85d fb04 	ldr.w	pc, [sp], #4
 800cec0:	20000028 	.word	0x20000028

0800cec4 <memset>:
 800cec4:	4402      	add	r2, r0
 800cec6:	4603      	mov	r3, r0
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d100      	bne.n	800cece <memset+0xa>
 800cecc:	4770      	bx	lr
 800cece:	f803 1b01 	strb.w	r1, [r3], #1
 800ced2:	e7f9      	b.n	800cec8 <memset+0x4>

0800ced4 <_close_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4d06      	ldr	r5, [pc, #24]	@ (800cef0 <_close_r+0x1c>)
 800ced8:	2300      	movs	r3, #0
 800ceda:	4604      	mov	r4, r0
 800cedc:	4608      	mov	r0, r1
 800cede:	602b      	str	r3, [r5, #0]
 800cee0:	f7f7 f97e 	bl	80041e0 <_close>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_close_r+0x1a>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_close_r+0x1a>
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	200011cc 	.word	0x200011cc

0800cef4 <_lseek_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d07      	ldr	r5, [pc, #28]	@ (800cf14 <_lseek_r+0x20>)
 800cef8:	4604      	mov	r4, r0
 800cefa:	4608      	mov	r0, r1
 800cefc:	4611      	mov	r1, r2
 800cefe:	2200      	movs	r2, #0
 800cf00:	602a      	str	r2, [r5, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f7f7 f993 	bl	800422e <_lseek>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_lseek_r+0x1e>
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_lseek_r+0x1e>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	200011cc 	.word	0x200011cc

0800cf18 <_read_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d07      	ldr	r5, [pc, #28]	@ (800cf38 <_read_r+0x20>)
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	4608      	mov	r0, r1
 800cf20:	4611      	mov	r1, r2
 800cf22:	2200      	movs	r2, #0
 800cf24:	602a      	str	r2, [r5, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	f7f7 f93d 	bl	80041a6 <_read>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_read_r+0x1e>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_read_r+0x1e>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	200011cc 	.word	0x200011cc

0800cf3c <_sbrk_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4d06      	ldr	r5, [pc, #24]	@ (800cf58 <_sbrk_r+0x1c>)
 800cf40:	2300      	movs	r3, #0
 800cf42:	4604      	mov	r4, r0
 800cf44:	4608      	mov	r0, r1
 800cf46:	602b      	str	r3, [r5, #0]
 800cf48:	f7f7 f97e 	bl	8004248 <_sbrk>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_sbrk_r+0x1a>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_sbrk_r+0x1a>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	200011cc 	.word	0x200011cc

0800cf5c <_write_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d07      	ldr	r5, [pc, #28]	@ (800cf7c <_write_r+0x20>)
 800cf60:	4604      	mov	r4, r0
 800cf62:	4608      	mov	r0, r1
 800cf64:	4611      	mov	r1, r2
 800cf66:	2200      	movs	r2, #0
 800cf68:	602a      	str	r2, [r5, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f7f4 ffa2 	bl	8001eb4 <_write>
 800cf70:	1c43      	adds	r3, r0, #1
 800cf72:	d102      	bne.n	800cf7a <_write_r+0x1e>
 800cf74:	682b      	ldr	r3, [r5, #0]
 800cf76:	b103      	cbz	r3, 800cf7a <_write_r+0x1e>
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
 800cf7c:	200011cc 	.word	0x200011cc

0800cf80 <__errno>:
 800cf80:	4b01      	ldr	r3, [pc, #4]	@ (800cf88 <__errno+0x8>)
 800cf82:	6818      	ldr	r0, [r3, #0]
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	20000028 	.word	0x20000028

0800cf8c <__libc_init_array>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	4d0d      	ldr	r5, [pc, #52]	@ (800cfc4 <__libc_init_array+0x38>)
 800cf90:	4c0d      	ldr	r4, [pc, #52]	@ (800cfc8 <__libc_init_array+0x3c>)
 800cf92:	1b64      	subs	r4, r4, r5
 800cf94:	10a4      	asrs	r4, r4, #2
 800cf96:	2600      	movs	r6, #0
 800cf98:	42a6      	cmp	r6, r4
 800cf9a:	d109      	bne.n	800cfb0 <__libc_init_array+0x24>
 800cf9c:	4d0b      	ldr	r5, [pc, #44]	@ (800cfcc <__libc_init_array+0x40>)
 800cf9e:	4c0c      	ldr	r4, [pc, #48]	@ (800cfd0 <__libc_init_array+0x44>)
 800cfa0:	f000 feae 	bl	800dd00 <_init>
 800cfa4:	1b64      	subs	r4, r4, r5
 800cfa6:	10a4      	asrs	r4, r4, #2
 800cfa8:	2600      	movs	r6, #0
 800cfaa:	42a6      	cmp	r6, r4
 800cfac:	d105      	bne.n	800cfba <__libc_init_array+0x2e>
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfb4:	4798      	blx	r3
 800cfb6:	3601      	adds	r6, #1
 800cfb8:	e7ee      	b.n	800cf98 <__libc_init_array+0xc>
 800cfba:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfbe:	4798      	blx	r3
 800cfc0:	3601      	adds	r6, #1
 800cfc2:	e7f2      	b.n	800cfaa <__libc_init_array+0x1e>
 800cfc4:	0800e3c8 	.word	0x0800e3c8
 800cfc8:	0800e3c8 	.word	0x0800e3c8
 800cfcc:	0800e3c8 	.word	0x0800e3c8
 800cfd0:	0800e3cc 	.word	0x0800e3cc

0800cfd4 <__retarget_lock_init_recursive>:
 800cfd4:	4770      	bx	lr

0800cfd6 <__retarget_lock_acquire_recursive>:
 800cfd6:	4770      	bx	lr

0800cfd8 <__retarget_lock_release_recursive>:
 800cfd8:	4770      	bx	lr

0800cfda <memcpy>:
 800cfda:	440a      	add	r2, r1
 800cfdc:	4291      	cmp	r1, r2
 800cfde:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfe2:	d100      	bne.n	800cfe6 <memcpy+0xc>
 800cfe4:	4770      	bx	lr
 800cfe6:	b510      	push	{r4, lr}
 800cfe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cff0:	4291      	cmp	r1, r2
 800cff2:	d1f9      	bne.n	800cfe8 <memcpy+0xe>
 800cff4:	bd10      	pop	{r4, pc}
	...

0800cff8 <_free_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4605      	mov	r5, r0
 800cffc:	2900      	cmp	r1, #0
 800cffe:	d041      	beq.n	800d084 <_free_r+0x8c>
 800d000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d004:	1f0c      	subs	r4, r1, #4
 800d006:	2b00      	cmp	r3, #0
 800d008:	bfb8      	it	lt
 800d00a:	18e4      	addlt	r4, r4, r3
 800d00c:	f7ff fd46 	bl	800ca9c <__malloc_lock>
 800d010:	4a1d      	ldr	r2, [pc, #116]	@ (800d088 <_free_r+0x90>)
 800d012:	6813      	ldr	r3, [r2, #0]
 800d014:	b933      	cbnz	r3, 800d024 <_free_r+0x2c>
 800d016:	6063      	str	r3, [r4, #4]
 800d018:	6014      	str	r4, [r2, #0]
 800d01a:	4628      	mov	r0, r5
 800d01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d020:	f7ff bd42 	b.w	800caa8 <__malloc_unlock>
 800d024:	42a3      	cmp	r3, r4
 800d026:	d908      	bls.n	800d03a <_free_r+0x42>
 800d028:	6820      	ldr	r0, [r4, #0]
 800d02a:	1821      	adds	r1, r4, r0
 800d02c:	428b      	cmp	r3, r1
 800d02e:	bf01      	itttt	eq
 800d030:	6819      	ldreq	r1, [r3, #0]
 800d032:	685b      	ldreq	r3, [r3, #4]
 800d034:	1809      	addeq	r1, r1, r0
 800d036:	6021      	streq	r1, [r4, #0]
 800d038:	e7ed      	b.n	800d016 <_free_r+0x1e>
 800d03a:	461a      	mov	r2, r3
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	b10b      	cbz	r3, 800d044 <_free_r+0x4c>
 800d040:	42a3      	cmp	r3, r4
 800d042:	d9fa      	bls.n	800d03a <_free_r+0x42>
 800d044:	6811      	ldr	r1, [r2, #0]
 800d046:	1850      	adds	r0, r2, r1
 800d048:	42a0      	cmp	r0, r4
 800d04a:	d10b      	bne.n	800d064 <_free_r+0x6c>
 800d04c:	6820      	ldr	r0, [r4, #0]
 800d04e:	4401      	add	r1, r0
 800d050:	1850      	adds	r0, r2, r1
 800d052:	4283      	cmp	r3, r0
 800d054:	6011      	str	r1, [r2, #0]
 800d056:	d1e0      	bne.n	800d01a <_free_r+0x22>
 800d058:	6818      	ldr	r0, [r3, #0]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	6053      	str	r3, [r2, #4]
 800d05e:	4408      	add	r0, r1
 800d060:	6010      	str	r0, [r2, #0]
 800d062:	e7da      	b.n	800d01a <_free_r+0x22>
 800d064:	d902      	bls.n	800d06c <_free_r+0x74>
 800d066:	230c      	movs	r3, #12
 800d068:	602b      	str	r3, [r5, #0]
 800d06a:	e7d6      	b.n	800d01a <_free_r+0x22>
 800d06c:	6820      	ldr	r0, [r4, #0]
 800d06e:	1821      	adds	r1, r4, r0
 800d070:	428b      	cmp	r3, r1
 800d072:	bf04      	itt	eq
 800d074:	6819      	ldreq	r1, [r3, #0]
 800d076:	685b      	ldreq	r3, [r3, #4]
 800d078:	6063      	str	r3, [r4, #4]
 800d07a:	bf04      	itt	eq
 800d07c:	1809      	addeq	r1, r1, r0
 800d07e:	6021      	streq	r1, [r4, #0]
 800d080:	6054      	str	r4, [r2, #4]
 800d082:	e7ca      	b.n	800d01a <_free_r+0x22>
 800d084:	bd38      	pop	{r3, r4, r5, pc}
 800d086:	bf00      	nop
 800d088:	2000108c 	.word	0x2000108c

0800d08c <__ssputs_r>:
 800d08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d090:	688e      	ldr	r6, [r1, #8]
 800d092:	461f      	mov	r7, r3
 800d094:	42be      	cmp	r6, r7
 800d096:	680b      	ldr	r3, [r1, #0]
 800d098:	4682      	mov	sl, r0
 800d09a:	460c      	mov	r4, r1
 800d09c:	4690      	mov	r8, r2
 800d09e:	d82d      	bhi.n	800d0fc <__ssputs_r+0x70>
 800d0a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d0a8:	d026      	beq.n	800d0f8 <__ssputs_r+0x6c>
 800d0aa:	6965      	ldr	r5, [r4, #20]
 800d0ac:	6909      	ldr	r1, [r1, #16]
 800d0ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0b2:	eba3 0901 	sub.w	r9, r3, r1
 800d0b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0ba:	1c7b      	adds	r3, r7, #1
 800d0bc:	444b      	add	r3, r9
 800d0be:	106d      	asrs	r5, r5, #1
 800d0c0:	429d      	cmp	r5, r3
 800d0c2:	bf38      	it	cc
 800d0c4:	461d      	movcc	r5, r3
 800d0c6:	0553      	lsls	r3, r2, #21
 800d0c8:	d527      	bpl.n	800d11a <__ssputs_r+0x8e>
 800d0ca:	4629      	mov	r1, r5
 800d0cc:	f7ff fc66 	bl	800c99c <_malloc_r>
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	b360      	cbz	r0, 800d12e <__ssputs_r+0xa2>
 800d0d4:	6921      	ldr	r1, [r4, #16]
 800d0d6:	464a      	mov	r2, r9
 800d0d8:	f7ff ff7f 	bl	800cfda <memcpy>
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0e6:	81a3      	strh	r3, [r4, #12]
 800d0e8:	6126      	str	r6, [r4, #16]
 800d0ea:	6165      	str	r5, [r4, #20]
 800d0ec:	444e      	add	r6, r9
 800d0ee:	eba5 0509 	sub.w	r5, r5, r9
 800d0f2:	6026      	str	r6, [r4, #0]
 800d0f4:	60a5      	str	r5, [r4, #8]
 800d0f6:	463e      	mov	r6, r7
 800d0f8:	42be      	cmp	r6, r7
 800d0fa:	d900      	bls.n	800d0fe <__ssputs_r+0x72>
 800d0fc:	463e      	mov	r6, r7
 800d0fe:	6820      	ldr	r0, [r4, #0]
 800d100:	4632      	mov	r2, r6
 800d102:	4641      	mov	r1, r8
 800d104:	f000 fd8a 	bl	800dc1c <memmove>
 800d108:	68a3      	ldr	r3, [r4, #8]
 800d10a:	1b9b      	subs	r3, r3, r6
 800d10c:	60a3      	str	r3, [r4, #8]
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	4433      	add	r3, r6
 800d112:	6023      	str	r3, [r4, #0]
 800d114:	2000      	movs	r0, #0
 800d116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11a:	462a      	mov	r2, r5
 800d11c:	f000 fdba 	bl	800dc94 <_realloc_r>
 800d120:	4606      	mov	r6, r0
 800d122:	2800      	cmp	r0, #0
 800d124:	d1e0      	bne.n	800d0e8 <__ssputs_r+0x5c>
 800d126:	6921      	ldr	r1, [r4, #16]
 800d128:	4650      	mov	r0, sl
 800d12a:	f7ff ff65 	bl	800cff8 <_free_r>
 800d12e:	230c      	movs	r3, #12
 800d130:	f8ca 3000 	str.w	r3, [sl]
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d13a:	81a3      	strh	r3, [r4, #12]
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
 800d140:	e7e9      	b.n	800d116 <__ssputs_r+0x8a>
	...

0800d144 <_svfiprintf_r>:
 800d144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d148:	4698      	mov	r8, r3
 800d14a:	898b      	ldrh	r3, [r1, #12]
 800d14c:	061b      	lsls	r3, r3, #24
 800d14e:	b09d      	sub	sp, #116	@ 0x74
 800d150:	4607      	mov	r7, r0
 800d152:	460d      	mov	r5, r1
 800d154:	4614      	mov	r4, r2
 800d156:	d510      	bpl.n	800d17a <_svfiprintf_r+0x36>
 800d158:	690b      	ldr	r3, [r1, #16]
 800d15a:	b973      	cbnz	r3, 800d17a <_svfiprintf_r+0x36>
 800d15c:	2140      	movs	r1, #64	@ 0x40
 800d15e:	f7ff fc1d 	bl	800c99c <_malloc_r>
 800d162:	6028      	str	r0, [r5, #0]
 800d164:	6128      	str	r0, [r5, #16]
 800d166:	b930      	cbnz	r0, 800d176 <_svfiprintf_r+0x32>
 800d168:	230c      	movs	r3, #12
 800d16a:	603b      	str	r3, [r7, #0]
 800d16c:	f04f 30ff 	mov.w	r0, #4294967295
 800d170:	b01d      	add	sp, #116	@ 0x74
 800d172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d176:	2340      	movs	r3, #64	@ 0x40
 800d178:	616b      	str	r3, [r5, #20]
 800d17a:	2300      	movs	r3, #0
 800d17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d17e:	2320      	movs	r3, #32
 800d180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d184:	f8cd 800c 	str.w	r8, [sp, #12]
 800d188:	2330      	movs	r3, #48	@ 0x30
 800d18a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d328 <_svfiprintf_r+0x1e4>
 800d18e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d192:	f04f 0901 	mov.w	r9, #1
 800d196:	4623      	mov	r3, r4
 800d198:	469a      	mov	sl, r3
 800d19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d19e:	b10a      	cbz	r2, 800d1a4 <_svfiprintf_r+0x60>
 800d1a0:	2a25      	cmp	r2, #37	@ 0x25
 800d1a2:	d1f9      	bne.n	800d198 <_svfiprintf_r+0x54>
 800d1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800d1a8:	d00b      	beq.n	800d1c2 <_svfiprintf_r+0x7e>
 800d1aa:	465b      	mov	r3, fp
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	4638      	mov	r0, r7
 800d1b2:	f7ff ff6b 	bl	800d08c <__ssputs_r>
 800d1b6:	3001      	adds	r0, #1
 800d1b8:	f000 80a7 	beq.w	800d30a <_svfiprintf_r+0x1c6>
 800d1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1be:	445a      	add	r2, fp
 800d1c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f000 809f 	beq.w	800d30a <_svfiprintf_r+0x1c6>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1d6:	f10a 0a01 	add.w	sl, sl, #1
 800d1da:	9304      	str	r3, [sp, #16]
 800d1dc:	9307      	str	r3, [sp, #28]
 800d1de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1e4:	4654      	mov	r4, sl
 800d1e6:	2205      	movs	r2, #5
 800d1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ec:	484e      	ldr	r0, [pc, #312]	@ (800d328 <_svfiprintf_r+0x1e4>)
 800d1ee:	f7f2 ffef 	bl	80001d0 <memchr>
 800d1f2:	9a04      	ldr	r2, [sp, #16]
 800d1f4:	b9d8      	cbnz	r0, 800d22e <_svfiprintf_r+0xea>
 800d1f6:	06d0      	lsls	r0, r2, #27
 800d1f8:	bf44      	itt	mi
 800d1fa:	2320      	movmi	r3, #32
 800d1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d200:	0711      	lsls	r1, r2, #28
 800d202:	bf44      	itt	mi
 800d204:	232b      	movmi	r3, #43	@ 0x2b
 800d206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d20a:	f89a 3000 	ldrb.w	r3, [sl]
 800d20e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d210:	d015      	beq.n	800d23e <_svfiprintf_r+0xfa>
 800d212:	9a07      	ldr	r2, [sp, #28]
 800d214:	4654      	mov	r4, sl
 800d216:	2000      	movs	r0, #0
 800d218:	f04f 0c0a 	mov.w	ip, #10
 800d21c:	4621      	mov	r1, r4
 800d21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d222:	3b30      	subs	r3, #48	@ 0x30
 800d224:	2b09      	cmp	r3, #9
 800d226:	d94b      	bls.n	800d2c0 <_svfiprintf_r+0x17c>
 800d228:	b1b0      	cbz	r0, 800d258 <_svfiprintf_r+0x114>
 800d22a:	9207      	str	r2, [sp, #28]
 800d22c:	e014      	b.n	800d258 <_svfiprintf_r+0x114>
 800d22e:	eba0 0308 	sub.w	r3, r0, r8
 800d232:	fa09 f303 	lsl.w	r3, r9, r3
 800d236:	4313      	orrs	r3, r2
 800d238:	9304      	str	r3, [sp, #16]
 800d23a:	46a2      	mov	sl, r4
 800d23c:	e7d2      	b.n	800d1e4 <_svfiprintf_r+0xa0>
 800d23e:	9b03      	ldr	r3, [sp, #12]
 800d240:	1d19      	adds	r1, r3, #4
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	9103      	str	r1, [sp, #12]
 800d246:	2b00      	cmp	r3, #0
 800d248:	bfbb      	ittet	lt
 800d24a:	425b      	neglt	r3, r3
 800d24c:	f042 0202 	orrlt.w	r2, r2, #2
 800d250:	9307      	strge	r3, [sp, #28]
 800d252:	9307      	strlt	r3, [sp, #28]
 800d254:	bfb8      	it	lt
 800d256:	9204      	strlt	r2, [sp, #16]
 800d258:	7823      	ldrb	r3, [r4, #0]
 800d25a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d25c:	d10a      	bne.n	800d274 <_svfiprintf_r+0x130>
 800d25e:	7863      	ldrb	r3, [r4, #1]
 800d260:	2b2a      	cmp	r3, #42	@ 0x2a
 800d262:	d132      	bne.n	800d2ca <_svfiprintf_r+0x186>
 800d264:	9b03      	ldr	r3, [sp, #12]
 800d266:	1d1a      	adds	r2, r3, #4
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	9203      	str	r2, [sp, #12]
 800d26c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d270:	3402      	adds	r4, #2
 800d272:	9305      	str	r3, [sp, #20]
 800d274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d338 <_svfiprintf_r+0x1f4>
 800d278:	7821      	ldrb	r1, [r4, #0]
 800d27a:	2203      	movs	r2, #3
 800d27c:	4650      	mov	r0, sl
 800d27e:	f7f2 ffa7 	bl	80001d0 <memchr>
 800d282:	b138      	cbz	r0, 800d294 <_svfiprintf_r+0x150>
 800d284:	9b04      	ldr	r3, [sp, #16]
 800d286:	eba0 000a 	sub.w	r0, r0, sl
 800d28a:	2240      	movs	r2, #64	@ 0x40
 800d28c:	4082      	lsls	r2, r0
 800d28e:	4313      	orrs	r3, r2
 800d290:	3401      	adds	r4, #1
 800d292:	9304      	str	r3, [sp, #16]
 800d294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d298:	4824      	ldr	r0, [pc, #144]	@ (800d32c <_svfiprintf_r+0x1e8>)
 800d29a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d29e:	2206      	movs	r2, #6
 800d2a0:	f7f2 ff96 	bl	80001d0 <memchr>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d036      	beq.n	800d316 <_svfiprintf_r+0x1d2>
 800d2a8:	4b21      	ldr	r3, [pc, #132]	@ (800d330 <_svfiprintf_r+0x1ec>)
 800d2aa:	bb1b      	cbnz	r3, 800d2f4 <_svfiprintf_r+0x1b0>
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	3307      	adds	r3, #7
 800d2b0:	f023 0307 	bic.w	r3, r3, #7
 800d2b4:	3308      	adds	r3, #8
 800d2b6:	9303      	str	r3, [sp, #12]
 800d2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ba:	4433      	add	r3, r6
 800d2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2be:	e76a      	b.n	800d196 <_svfiprintf_r+0x52>
 800d2c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	2001      	movs	r0, #1
 800d2c8:	e7a8      	b.n	800d21c <_svfiprintf_r+0xd8>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	3401      	adds	r4, #1
 800d2ce:	9305      	str	r3, [sp, #20]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	f04f 0c0a 	mov.w	ip, #10
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2dc:	3a30      	subs	r2, #48	@ 0x30
 800d2de:	2a09      	cmp	r2, #9
 800d2e0:	d903      	bls.n	800d2ea <_svfiprintf_r+0x1a6>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d0c6      	beq.n	800d274 <_svfiprintf_r+0x130>
 800d2e6:	9105      	str	r1, [sp, #20]
 800d2e8:	e7c4      	b.n	800d274 <_svfiprintf_r+0x130>
 800d2ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e7f0      	b.n	800d2d6 <_svfiprintf_r+0x192>
 800d2f4:	ab03      	add	r3, sp, #12
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	462a      	mov	r2, r5
 800d2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d334 <_svfiprintf_r+0x1f0>)
 800d2fc:	a904      	add	r1, sp, #16
 800d2fe:	4638      	mov	r0, r7
 800d300:	f3af 8000 	nop.w
 800d304:	1c42      	adds	r2, r0, #1
 800d306:	4606      	mov	r6, r0
 800d308:	d1d6      	bne.n	800d2b8 <_svfiprintf_r+0x174>
 800d30a:	89ab      	ldrh	r3, [r5, #12]
 800d30c:	065b      	lsls	r3, r3, #25
 800d30e:	f53f af2d 	bmi.w	800d16c <_svfiprintf_r+0x28>
 800d312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d314:	e72c      	b.n	800d170 <_svfiprintf_r+0x2c>
 800d316:	ab03      	add	r3, sp, #12
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	462a      	mov	r2, r5
 800d31c:	4b05      	ldr	r3, [pc, #20]	@ (800d334 <_svfiprintf_r+0x1f0>)
 800d31e:	a904      	add	r1, sp, #16
 800d320:	4638      	mov	r0, r7
 800d322:	f000 f9bb 	bl	800d69c <_printf_i>
 800d326:	e7ed      	b.n	800d304 <_svfiprintf_r+0x1c0>
 800d328:	0800e38c 	.word	0x0800e38c
 800d32c:	0800e396 	.word	0x0800e396
 800d330:	00000000 	.word	0x00000000
 800d334:	0800d08d 	.word	0x0800d08d
 800d338:	0800e392 	.word	0x0800e392

0800d33c <__sfputc_r>:
 800d33c:	6893      	ldr	r3, [r2, #8]
 800d33e:	3b01      	subs	r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	b410      	push	{r4}
 800d344:	6093      	str	r3, [r2, #8]
 800d346:	da08      	bge.n	800d35a <__sfputc_r+0x1e>
 800d348:	6994      	ldr	r4, [r2, #24]
 800d34a:	42a3      	cmp	r3, r4
 800d34c:	db01      	blt.n	800d352 <__sfputc_r+0x16>
 800d34e:	290a      	cmp	r1, #10
 800d350:	d103      	bne.n	800d35a <__sfputc_r+0x1e>
 800d352:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d356:	f000 bbcd 	b.w	800daf4 <__swbuf_r>
 800d35a:	6813      	ldr	r3, [r2, #0]
 800d35c:	1c58      	adds	r0, r3, #1
 800d35e:	6010      	str	r0, [r2, #0]
 800d360:	7019      	strb	r1, [r3, #0]
 800d362:	4608      	mov	r0, r1
 800d364:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <__sfputs_r>:
 800d36a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36c:	4606      	mov	r6, r0
 800d36e:	460f      	mov	r7, r1
 800d370:	4614      	mov	r4, r2
 800d372:	18d5      	adds	r5, r2, r3
 800d374:	42ac      	cmp	r4, r5
 800d376:	d101      	bne.n	800d37c <__sfputs_r+0x12>
 800d378:	2000      	movs	r0, #0
 800d37a:	e007      	b.n	800d38c <__sfputs_r+0x22>
 800d37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d380:	463a      	mov	r2, r7
 800d382:	4630      	mov	r0, r6
 800d384:	f7ff ffda 	bl	800d33c <__sfputc_r>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d1f3      	bne.n	800d374 <__sfputs_r+0xa>
 800d38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d390 <_vfiprintf_r>:
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	460d      	mov	r5, r1
 800d396:	b09d      	sub	sp, #116	@ 0x74
 800d398:	4614      	mov	r4, r2
 800d39a:	4698      	mov	r8, r3
 800d39c:	4606      	mov	r6, r0
 800d39e:	b118      	cbz	r0, 800d3a8 <_vfiprintf_r+0x18>
 800d3a0:	6a03      	ldr	r3, [r0, #32]
 800d3a2:	b90b      	cbnz	r3, 800d3a8 <_vfiprintf_r+0x18>
 800d3a4:	f7ff fc12 	bl	800cbcc <__sinit>
 800d3a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3aa:	07d9      	lsls	r1, r3, #31
 800d3ac:	d405      	bmi.n	800d3ba <_vfiprintf_r+0x2a>
 800d3ae:	89ab      	ldrh	r3, [r5, #12]
 800d3b0:	059a      	lsls	r2, r3, #22
 800d3b2:	d402      	bmi.n	800d3ba <_vfiprintf_r+0x2a>
 800d3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3b6:	f7ff fe0e 	bl	800cfd6 <__retarget_lock_acquire_recursive>
 800d3ba:	89ab      	ldrh	r3, [r5, #12]
 800d3bc:	071b      	lsls	r3, r3, #28
 800d3be:	d501      	bpl.n	800d3c4 <_vfiprintf_r+0x34>
 800d3c0:	692b      	ldr	r3, [r5, #16]
 800d3c2:	b99b      	cbnz	r3, 800d3ec <_vfiprintf_r+0x5c>
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f000 fbd2 	bl	800db70 <__swsetup_r>
 800d3cc:	b170      	cbz	r0, 800d3ec <_vfiprintf_r+0x5c>
 800d3ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3d0:	07dc      	lsls	r4, r3, #31
 800d3d2:	d504      	bpl.n	800d3de <_vfiprintf_r+0x4e>
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d8:	b01d      	add	sp, #116	@ 0x74
 800d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3de:	89ab      	ldrh	r3, [r5, #12]
 800d3e0:	0598      	lsls	r0, r3, #22
 800d3e2:	d4f7      	bmi.n	800d3d4 <_vfiprintf_r+0x44>
 800d3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3e6:	f7ff fdf7 	bl	800cfd8 <__retarget_lock_release_recursive>
 800d3ea:	e7f3      	b.n	800d3d4 <_vfiprintf_r+0x44>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3f0:	2320      	movs	r3, #32
 800d3f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3fa:	2330      	movs	r3, #48	@ 0x30
 800d3fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d5ac <_vfiprintf_r+0x21c>
 800d400:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d404:	f04f 0901 	mov.w	r9, #1
 800d408:	4623      	mov	r3, r4
 800d40a:	469a      	mov	sl, r3
 800d40c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d410:	b10a      	cbz	r2, 800d416 <_vfiprintf_r+0x86>
 800d412:	2a25      	cmp	r2, #37	@ 0x25
 800d414:	d1f9      	bne.n	800d40a <_vfiprintf_r+0x7a>
 800d416:	ebba 0b04 	subs.w	fp, sl, r4
 800d41a:	d00b      	beq.n	800d434 <_vfiprintf_r+0xa4>
 800d41c:	465b      	mov	r3, fp
 800d41e:	4622      	mov	r2, r4
 800d420:	4629      	mov	r1, r5
 800d422:	4630      	mov	r0, r6
 800d424:	f7ff ffa1 	bl	800d36a <__sfputs_r>
 800d428:	3001      	adds	r0, #1
 800d42a:	f000 80a7 	beq.w	800d57c <_vfiprintf_r+0x1ec>
 800d42e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d430:	445a      	add	r2, fp
 800d432:	9209      	str	r2, [sp, #36]	@ 0x24
 800d434:	f89a 3000 	ldrb.w	r3, [sl]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 809f 	beq.w	800d57c <_vfiprintf_r+0x1ec>
 800d43e:	2300      	movs	r3, #0
 800d440:	f04f 32ff 	mov.w	r2, #4294967295
 800d444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d448:	f10a 0a01 	add.w	sl, sl, #1
 800d44c:	9304      	str	r3, [sp, #16]
 800d44e:	9307      	str	r3, [sp, #28]
 800d450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d454:	931a      	str	r3, [sp, #104]	@ 0x68
 800d456:	4654      	mov	r4, sl
 800d458:	2205      	movs	r2, #5
 800d45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d45e:	4853      	ldr	r0, [pc, #332]	@ (800d5ac <_vfiprintf_r+0x21c>)
 800d460:	f7f2 feb6 	bl	80001d0 <memchr>
 800d464:	9a04      	ldr	r2, [sp, #16]
 800d466:	b9d8      	cbnz	r0, 800d4a0 <_vfiprintf_r+0x110>
 800d468:	06d1      	lsls	r1, r2, #27
 800d46a:	bf44      	itt	mi
 800d46c:	2320      	movmi	r3, #32
 800d46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d472:	0713      	lsls	r3, r2, #28
 800d474:	bf44      	itt	mi
 800d476:	232b      	movmi	r3, #43	@ 0x2b
 800d478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d47c:	f89a 3000 	ldrb.w	r3, [sl]
 800d480:	2b2a      	cmp	r3, #42	@ 0x2a
 800d482:	d015      	beq.n	800d4b0 <_vfiprintf_r+0x120>
 800d484:	9a07      	ldr	r2, [sp, #28]
 800d486:	4654      	mov	r4, sl
 800d488:	2000      	movs	r0, #0
 800d48a:	f04f 0c0a 	mov.w	ip, #10
 800d48e:	4621      	mov	r1, r4
 800d490:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d494:	3b30      	subs	r3, #48	@ 0x30
 800d496:	2b09      	cmp	r3, #9
 800d498:	d94b      	bls.n	800d532 <_vfiprintf_r+0x1a2>
 800d49a:	b1b0      	cbz	r0, 800d4ca <_vfiprintf_r+0x13a>
 800d49c:	9207      	str	r2, [sp, #28]
 800d49e:	e014      	b.n	800d4ca <_vfiprintf_r+0x13a>
 800d4a0:	eba0 0308 	sub.w	r3, r0, r8
 800d4a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	9304      	str	r3, [sp, #16]
 800d4ac:	46a2      	mov	sl, r4
 800d4ae:	e7d2      	b.n	800d456 <_vfiprintf_r+0xc6>
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	1d19      	adds	r1, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	9103      	str	r1, [sp, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	bfbb      	ittet	lt
 800d4bc:	425b      	neglt	r3, r3
 800d4be:	f042 0202 	orrlt.w	r2, r2, #2
 800d4c2:	9307      	strge	r3, [sp, #28]
 800d4c4:	9307      	strlt	r3, [sp, #28]
 800d4c6:	bfb8      	it	lt
 800d4c8:	9204      	strlt	r2, [sp, #16]
 800d4ca:	7823      	ldrb	r3, [r4, #0]
 800d4cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4ce:	d10a      	bne.n	800d4e6 <_vfiprintf_r+0x156>
 800d4d0:	7863      	ldrb	r3, [r4, #1]
 800d4d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4d4:	d132      	bne.n	800d53c <_vfiprintf_r+0x1ac>
 800d4d6:	9b03      	ldr	r3, [sp, #12]
 800d4d8:	1d1a      	adds	r2, r3, #4
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	9203      	str	r2, [sp, #12]
 800d4de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4e2:	3402      	adds	r4, #2
 800d4e4:	9305      	str	r3, [sp, #20]
 800d4e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d5bc <_vfiprintf_r+0x22c>
 800d4ea:	7821      	ldrb	r1, [r4, #0]
 800d4ec:	2203      	movs	r2, #3
 800d4ee:	4650      	mov	r0, sl
 800d4f0:	f7f2 fe6e 	bl	80001d0 <memchr>
 800d4f4:	b138      	cbz	r0, 800d506 <_vfiprintf_r+0x176>
 800d4f6:	9b04      	ldr	r3, [sp, #16]
 800d4f8:	eba0 000a 	sub.w	r0, r0, sl
 800d4fc:	2240      	movs	r2, #64	@ 0x40
 800d4fe:	4082      	lsls	r2, r0
 800d500:	4313      	orrs	r3, r2
 800d502:	3401      	adds	r4, #1
 800d504:	9304      	str	r3, [sp, #16]
 800d506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d50a:	4829      	ldr	r0, [pc, #164]	@ (800d5b0 <_vfiprintf_r+0x220>)
 800d50c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d510:	2206      	movs	r2, #6
 800d512:	f7f2 fe5d 	bl	80001d0 <memchr>
 800d516:	2800      	cmp	r0, #0
 800d518:	d03f      	beq.n	800d59a <_vfiprintf_r+0x20a>
 800d51a:	4b26      	ldr	r3, [pc, #152]	@ (800d5b4 <_vfiprintf_r+0x224>)
 800d51c:	bb1b      	cbnz	r3, 800d566 <_vfiprintf_r+0x1d6>
 800d51e:	9b03      	ldr	r3, [sp, #12]
 800d520:	3307      	adds	r3, #7
 800d522:	f023 0307 	bic.w	r3, r3, #7
 800d526:	3308      	adds	r3, #8
 800d528:	9303      	str	r3, [sp, #12]
 800d52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d52c:	443b      	add	r3, r7
 800d52e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d530:	e76a      	b.n	800d408 <_vfiprintf_r+0x78>
 800d532:	fb0c 3202 	mla	r2, ip, r2, r3
 800d536:	460c      	mov	r4, r1
 800d538:	2001      	movs	r0, #1
 800d53a:	e7a8      	b.n	800d48e <_vfiprintf_r+0xfe>
 800d53c:	2300      	movs	r3, #0
 800d53e:	3401      	adds	r4, #1
 800d540:	9305      	str	r3, [sp, #20]
 800d542:	4619      	mov	r1, r3
 800d544:	f04f 0c0a 	mov.w	ip, #10
 800d548:	4620      	mov	r0, r4
 800d54a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d54e:	3a30      	subs	r2, #48	@ 0x30
 800d550:	2a09      	cmp	r2, #9
 800d552:	d903      	bls.n	800d55c <_vfiprintf_r+0x1cc>
 800d554:	2b00      	cmp	r3, #0
 800d556:	d0c6      	beq.n	800d4e6 <_vfiprintf_r+0x156>
 800d558:	9105      	str	r1, [sp, #20]
 800d55a:	e7c4      	b.n	800d4e6 <_vfiprintf_r+0x156>
 800d55c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d560:	4604      	mov	r4, r0
 800d562:	2301      	movs	r3, #1
 800d564:	e7f0      	b.n	800d548 <_vfiprintf_r+0x1b8>
 800d566:	ab03      	add	r3, sp, #12
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	462a      	mov	r2, r5
 800d56c:	4b12      	ldr	r3, [pc, #72]	@ (800d5b8 <_vfiprintf_r+0x228>)
 800d56e:	a904      	add	r1, sp, #16
 800d570:	4630      	mov	r0, r6
 800d572:	f3af 8000 	nop.w
 800d576:	4607      	mov	r7, r0
 800d578:	1c78      	adds	r0, r7, #1
 800d57a:	d1d6      	bne.n	800d52a <_vfiprintf_r+0x19a>
 800d57c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d57e:	07d9      	lsls	r1, r3, #31
 800d580:	d405      	bmi.n	800d58e <_vfiprintf_r+0x1fe>
 800d582:	89ab      	ldrh	r3, [r5, #12]
 800d584:	059a      	lsls	r2, r3, #22
 800d586:	d402      	bmi.n	800d58e <_vfiprintf_r+0x1fe>
 800d588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d58a:	f7ff fd25 	bl	800cfd8 <__retarget_lock_release_recursive>
 800d58e:	89ab      	ldrh	r3, [r5, #12]
 800d590:	065b      	lsls	r3, r3, #25
 800d592:	f53f af1f 	bmi.w	800d3d4 <_vfiprintf_r+0x44>
 800d596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d598:	e71e      	b.n	800d3d8 <_vfiprintf_r+0x48>
 800d59a:	ab03      	add	r3, sp, #12
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	462a      	mov	r2, r5
 800d5a0:	4b05      	ldr	r3, [pc, #20]	@ (800d5b8 <_vfiprintf_r+0x228>)
 800d5a2:	a904      	add	r1, sp, #16
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f000 f879 	bl	800d69c <_printf_i>
 800d5aa:	e7e4      	b.n	800d576 <_vfiprintf_r+0x1e6>
 800d5ac:	0800e38c 	.word	0x0800e38c
 800d5b0:	0800e396 	.word	0x0800e396
 800d5b4:	00000000 	.word	0x00000000
 800d5b8:	0800d36b 	.word	0x0800d36b
 800d5bc:	0800e392 	.word	0x0800e392

0800d5c0 <_printf_common>:
 800d5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c4:	4616      	mov	r6, r2
 800d5c6:	4698      	mov	r8, r3
 800d5c8:	688a      	ldr	r2, [r1, #8]
 800d5ca:	690b      	ldr	r3, [r1, #16]
 800d5cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	bfb8      	it	lt
 800d5d4:	4613      	movlt	r3, r2
 800d5d6:	6033      	str	r3, [r6, #0]
 800d5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5dc:	4607      	mov	r7, r0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	b10a      	cbz	r2, 800d5e6 <_printf_common+0x26>
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	6033      	str	r3, [r6, #0]
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	0699      	lsls	r1, r3, #26
 800d5ea:	bf42      	ittt	mi
 800d5ec:	6833      	ldrmi	r3, [r6, #0]
 800d5ee:	3302      	addmi	r3, #2
 800d5f0:	6033      	strmi	r3, [r6, #0]
 800d5f2:	6825      	ldr	r5, [r4, #0]
 800d5f4:	f015 0506 	ands.w	r5, r5, #6
 800d5f8:	d106      	bne.n	800d608 <_printf_common+0x48>
 800d5fa:	f104 0a19 	add.w	sl, r4, #25
 800d5fe:	68e3      	ldr	r3, [r4, #12]
 800d600:	6832      	ldr	r2, [r6, #0]
 800d602:	1a9b      	subs	r3, r3, r2
 800d604:	42ab      	cmp	r3, r5
 800d606:	dc26      	bgt.n	800d656 <_printf_common+0x96>
 800d608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d60c:	6822      	ldr	r2, [r4, #0]
 800d60e:	3b00      	subs	r3, #0
 800d610:	bf18      	it	ne
 800d612:	2301      	movne	r3, #1
 800d614:	0692      	lsls	r2, r2, #26
 800d616:	d42b      	bmi.n	800d670 <_printf_common+0xb0>
 800d618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d61c:	4641      	mov	r1, r8
 800d61e:	4638      	mov	r0, r7
 800d620:	47c8      	blx	r9
 800d622:	3001      	adds	r0, #1
 800d624:	d01e      	beq.n	800d664 <_printf_common+0xa4>
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	6922      	ldr	r2, [r4, #16]
 800d62a:	f003 0306 	and.w	r3, r3, #6
 800d62e:	2b04      	cmp	r3, #4
 800d630:	bf02      	ittt	eq
 800d632:	68e5      	ldreq	r5, [r4, #12]
 800d634:	6833      	ldreq	r3, [r6, #0]
 800d636:	1aed      	subeq	r5, r5, r3
 800d638:	68a3      	ldr	r3, [r4, #8]
 800d63a:	bf0c      	ite	eq
 800d63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d640:	2500      	movne	r5, #0
 800d642:	4293      	cmp	r3, r2
 800d644:	bfc4      	itt	gt
 800d646:	1a9b      	subgt	r3, r3, r2
 800d648:	18ed      	addgt	r5, r5, r3
 800d64a:	2600      	movs	r6, #0
 800d64c:	341a      	adds	r4, #26
 800d64e:	42b5      	cmp	r5, r6
 800d650:	d11a      	bne.n	800d688 <_printf_common+0xc8>
 800d652:	2000      	movs	r0, #0
 800d654:	e008      	b.n	800d668 <_printf_common+0xa8>
 800d656:	2301      	movs	r3, #1
 800d658:	4652      	mov	r2, sl
 800d65a:	4641      	mov	r1, r8
 800d65c:	4638      	mov	r0, r7
 800d65e:	47c8      	blx	r9
 800d660:	3001      	adds	r0, #1
 800d662:	d103      	bne.n	800d66c <_printf_common+0xac>
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66c:	3501      	adds	r5, #1
 800d66e:	e7c6      	b.n	800d5fe <_printf_common+0x3e>
 800d670:	18e1      	adds	r1, r4, r3
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	2030      	movs	r0, #48	@ 0x30
 800d676:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d67a:	4422      	add	r2, r4
 800d67c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d684:	3302      	adds	r3, #2
 800d686:	e7c7      	b.n	800d618 <_printf_common+0x58>
 800d688:	2301      	movs	r3, #1
 800d68a:	4622      	mov	r2, r4
 800d68c:	4641      	mov	r1, r8
 800d68e:	4638      	mov	r0, r7
 800d690:	47c8      	blx	r9
 800d692:	3001      	adds	r0, #1
 800d694:	d0e6      	beq.n	800d664 <_printf_common+0xa4>
 800d696:	3601      	adds	r6, #1
 800d698:	e7d9      	b.n	800d64e <_printf_common+0x8e>
	...

0800d69c <_printf_i>:
 800d69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a0:	7e0f      	ldrb	r7, [r1, #24]
 800d6a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d6a4:	2f78      	cmp	r7, #120	@ 0x78
 800d6a6:	4691      	mov	r9, r2
 800d6a8:	4680      	mov	r8, r0
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	469a      	mov	sl, r3
 800d6ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d6b2:	d807      	bhi.n	800d6c4 <_printf_i+0x28>
 800d6b4:	2f62      	cmp	r7, #98	@ 0x62
 800d6b6:	d80a      	bhi.n	800d6ce <_printf_i+0x32>
 800d6b8:	2f00      	cmp	r7, #0
 800d6ba:	f000 80d1 	beq.w	800d860 <_printf_i+0x1c4>
 800d6be:	2f58      	cmp	r7, #88	@ 0x58
 800d6c0:	f000 80b8 	beq.w	800d834 <_printf_i+0x198>
 800d6c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d6cc:	e03a      	b.n	800d744 <_printf_i+0xa8>
 800d6ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d6d2:	2b15      	cmp	r3, #21
 800d6d4:	d8f6      	bhi.n	800d6c4 <_printf_i+0x28>
 800d6d6:	a101      	add	r1, pc, #4	@ (adr r1, 800d6dc <_printf_i+0x40>)
 800d6d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6dc:	0800d735 	.word	0x0800d735
 800d6e0:	0800d749 	.word	0x0800d749
 800d6e4:	0800d6c5 	.word	0x0800d6c5
 800d6e8:	0800d6c5 	.word	0x0800d6c5
 800d6ec:	0800d6c5 	.word	0x0800d6c5
 800d6f0:	0800d6c5 	.word	0x0800d6c5
 800d6f4:	0800d749 	.word	0x0800d749
 800d6f8:	0800d6c5 	.word	0x0800d6c5
 800d6fc:	0800d6c5 	.word	0x0800d6c5
 800d700:	0800d6c5 	.word	0x0800d6c5
 800d704:	0800d6c5 	.word	0x0800d6c5
 800d708:	0800d847 	.word	0x0800d847
 800d70c:	0800d773 	.word	0x0800d773
 800d710:	0800d801 	.word	0x0800d801
 800d714:	0800d6c5 	.word	0x0800d6c5
 800d718:	0800d6c5 	.word	0x0800d6c5
 800d71c:	0800d869 	.word	0x0800d869
 800d720:	0800d6c5 	.word	0x0800d6c5
 800d724:	0800d773 	.word	0x0800d773
 800d728:	0800d6c5 	.word	0x0800d6c5
 800d72c:	0800d6c5 	.word	0x0800d6c5
 800d730:	0800d809 	.word	0x0800d809
 800d734:	6833      	ldr	r3, [r6, #0]
 800d736:	1d1a      	adds	r2, r3, #4
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6032      	str	r2, [r6, #0]
 800d73c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d740:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d744:	2301      	movs	r3, #1
 800d746:	e09c      	b.n	800d882 <_printf_i+0x1e6>
 800d748:	6833      	ldr	r3, [r6, #0]
 800d74a:	6820      	ldr	r0, [r4, #0]
 800d74c:	1d19      	adds	r1, r3, #4
 800d74e:	6031      	str	r1, [r6, #0]
 800d750:	0606      	lsls	r6, r0, #24
 800d752:	d501      	bpl.n	800d758 <_printf_i+0xbc>
 800d754:	681d      	ldr	r5, [r3, #0]
 800d756:	e003      	b.n	800d760 <_printf_i+0xc4>
 800d758:	0645      	lsls	r5, r0, #25
 800d75a:	d5fb      	bpl.n	800d754 <_printf_i+0xb8>
 800d75c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d760:	2d00      	cmp	r5, #0
 800d762:	da03      	bge.n	800d76c <_printf_i+0xd0>
 800d764:	232d      	movs	r3, #45	@ 0x2d
 800d766:	426d      	negs	r5, r5
 800d768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d76c:	4858      	ldr	r0, [pc, #352]	@ (800d8d0 <_printf_i+0x234>)
 800d76e:	230a      	movs	r3, #10
 800d770:	e011      	b.n	800d796 <_printf_i+0xfa>
 800d772:	6821      	ldr	r1, [r4, #0]
 800d774:	6833      	ldr	r3, [r6, #0]
 800d776:	0608      	lsls	r0, r1, #24
 800d778:	f853 5b04 	ldr.w	r5, [r3], #4
 800d77c:	d402      	bmi.n	800d784 <_printf_i+0xe8>
 800d77e:	0649      	lsls	r1, r1, #25
 800d780:	bf48      	it	mi
 800d782:	b2ad      	uxthmi	r5, r5
 800d784:	2f6f      	cmp	r7, #111	@ 0x6f
 800d786:	4852      	ldr	r0, [pc, #328]	@ (800d8d0 <_printf_i+0x234>)
 800d788:	6033      	str	r3, [r6, #0]
 800d78a:	bf14      	ite	ne
 800d78c:	230a      	movne	r3, #10
 800d78e:	2308      	moveq	r3, #8
 800d790:	2100      	movs	r1, #0
 800d792:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d796:	6866      	ldr	r6, [r4, #4]
 800d798:	60a6      	str	r6, [r4, #8]
 800d79a:	2e00      	cmp	r6, #0
 800d79c:	db05      	blt.n	800d7aa <_printf_i+0x10e>
 800d79e:	6821      	ldr	r1, [r4, #0]
 800d7a0:	432e      	orrs	r6, r5
 800d7a2:	f021 0104 	bic.w	r1, r1, #4
 800d7a6:	6021      	str	r1, [r4, #0]
 800d7a8:	d04b      	beq.n	800d842 <_printf_i+0x1a6>
 800d7aa:	4616      	mov	r6, r2
 800d7ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7b0:	fb03 5711 	mls	r7, r3, r1, r5
 800d7b4:	5dc7      	ldrb	r7, [r0, r7]
 800d7b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7ba:	462f      	mov	r7, r5
 800d7bc:	42bb      	cmp	r3, r7
 800d7be:	460d      	mov	r5, r1
 800d7c0:	d9f4      	bls.n	800d7ac <_printf_i+0x110>
 800d7c2:	2b08      	cmp	r3, #8
 800d7c4:	d10b      	bne.n	800d7de <_printf_i+0x142>
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	07df      	lsls	r7, r3, #31
 800d7ca:	d508      	bpl.n	800d7de <_printf_i+0x142>
 800d7cc:	6923      	ldr	r3, [r4, #16]
 800d7ce:	6861      	ldr	r1, [r4, #4]
 800d7d0:	4299      	cmp	r1, r3
 800d7d2:	bfde      	ittt	le
 800d7d4:	2330      	movle	r3, #48	@ 0x30
 800d7d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7de:	1b92      	subs	r2, r2, r6
 800d7e0:	6122      	str	r2, [r4, #16]
 800d7e2:	f8cd a000 	str.w	sl, [sp]
 800d7e6:	464b      	mov	r3, r9
 800d7e8:	aa03      	add	r2, sp, #12
 800d7ea:	4621      	mov	r1, r4
 800d7ec:	4640      	mov	r0, r8
 800d7ee:	f7ff fee7 	bl	800d5c0 <_printf_common>
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	d14a      	bne.n	800d88c <_printf_i+0x1f0>
 800d7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fa:	b004      	add	sp, #16
 800d7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	f043 0320 	orr.w	r3, r3, #32
 800d806:	6023      	str	r3, [r4, #0]
 800d808:	4832      	ldr	r0, [pc, #200]	@ (800d8d4 <_printf_i+0x238>)
 800d80a:	2778      	movs	r7, #120	@ 0x78
 800d80c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d810:	6823      	ldr	r3, [r4, #0]
 800d812:	6831      	ldr	r1, [r6, #0]
 800d814:	061f      	lsls	r7, r3, #24
 800d816:	f851 5b04 	ldr.w	r5, [r1], #4
 800d81a:	d402      	bmi.n	800d822 <_printf_i+0x186>
 800d81c:	065f      	lsls	r7, r3, #25
 800d81e:	bf48      	it	mi
 800d820:	b2ad      	uxthmi	r5, r5
 800d822:	6031      	str	r1, [r6, #0]
 800d824:	07d9      	lsls	r1, r3, #31
 800d826:	bf44      	itt	mi
 800d828:	f043 0320 	orrmi.w	r3, r3, #32
 800d82c:	6023      	strmi	r3, [r4, #0]
 800d82e:	b11d      	cbz	r5, 800d838 <_printf_i+0x19c>
 800d830:	2310      	movs	r3, #16
 800d832:	e7ad      	b.n	800d790 <_printf_i+0xf4>
 800d834:	4826      	ldr	r0, [pc, #152]	@ (800d8d0 <_printf_i+0x234>)
 800d836:	e7e9      	b.n	800d80c <_printf_i+0x170>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	f023 0320 	bic.w	r3, r3, #32
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	e7f6      	b.n	800d830 <_printf_i+0x194>
 800d842:	4616      	mov	r6, r2
 800d844:	e7bd      	b.n	800d7c2 <_printf_i+0x126>
 800d846:	6833      	ldr	r3, [r6, #0]
 800d848:	6825      	ldr	r5, [r4, #0]
 800d84a:	6961      	ldr	r1, [r4, #20]
 800d84c:	1d18      	adds	r0, r3, #4
 800d84e:	6030      	str	r0, [r6, #0]
 800d850:	062e      	lsls	r6, r5, #24
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	d501      	bpl.n	800d85a <_printf_i+0x1be>
 800d856:	6019      	str	r1, [r3, #0]
 800d858:	e002      	b.n	800d860 <_printf_i+0x1c4>
 800d85a:	0668      	lsls	r0, r5, #25
 800d85c:	d5fb      	bpl.n	800d856 <_printf_i+0x1ba>
 800d85e:	8019      	strh	r1, [r3, #0]
 800d860:	2300      	movs	r3, #0
 800d862:	6123      	str	r3, [r4, #16]
 800d864:	4616      	mov	r6, r2
 800d866:	e7bc      	b.n	800d7e2 <_printf_i+0x146>
 800d868:	6833      	ldr	r3, [r6, #0]
 800d86a:	1d1a      	adds	r2, r3, #4
 800d86c:	6032      	str	r2, [r6, #0]
 800d86e:	681e      	ldr	r6, [r3, #0]
 800d870:	6862      	ldr	r2, [r4, #4]
 800d872:	2100      	movs	r1, #0
 800d874:	4630      	mov	r0, r6
 800d876:	f7f2 fcab 	bl	80001d0 <memchr>
 800d87a:	b108      	cbz	r0, 800d880 <_printf_i+0x1e4>
 800d87c:	1b80      	subs	r0, r0, r6
 800d87e:	6060      	str	r0, [r4, #4]
 800d880:	6863      	ldr	r3, [r4, #4]
 800d882:	6123      	str	r3, [r4, #16]
 800d884:	2300      	movs	r3, #0
 800d886:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d88a:	e7aa      	b.n	800d7e2 <_printf_i+0x146>
 800d88c:	6923      	ldr	r3, [r4, #16]
 800d88e:	4632      	mov	r2, r6
 800d890:	4649      	mov	r1, r9
 800d892:	4640      	mov	r0, r8
 800d894:	47d0      	blx	sl
 800d896:	3001      	adds	r0, #1
 800d898:	d0ad      	beq.n	800d7f6 <_printf_i+0x15a>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	079b      	lsls	r3, r3, #30
 800d89e:	d413      	bmi.n	800d8c8 <_printf_i+0x22c>
 800d8a0:	68e0      	ldr	r0, [r4, #12]
 800d8a2:	9b03      	ldr	r3, [sp, #12]
 800d8a4:	4298      	cmp	r0, r3
 800d8a6:	bfb8      	it	lt
 800d8a8:	4618      	movlt	r0, r3
 800d8aa:	e7a6      	b.n	800d7fa <_printf_i+0x15e>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	4632      	mov	r2, r6
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	47d0      	blx	sl
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	d09d      	beq.n	800d7f6 <_printf_i+0x15a>
 800d8ba:	3501      	adds	r5, #1
 800d8bc:	68e3      	ldr	r3, [r4, #12]
 800d8be:	9903      	ldr	r1, [sp, #12]
 800d8c0:	1a5b      	subs	r3, r3, r1
 800d8c2:	42ab      	cmp	r3, r5
 800d8c4:	dcf2      	bgt.n	800d8ac <_printf_i+0x210>
 800d8c6:	e7eb      	b.n	800d8a0 <_printf_i+0x204>
 800d8c8:	2500      	movs	r5, #0
 800d8ca:	f104 0619 	add.w	r6, r4, #25
 800d8ce:	e7f5      	b.n	800d8bc <_printf_i+0x220>
 800d8d0:	0800e39d 	.word	0x0800e39d
 800d8d4:	0800e3ae 	.word	0x0800e3ae

0800d8d8 <__sflush_r>:
 800d8d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e0:	0716      	lsls	r6, r2, #28
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	d454      	bmi.n	800d992 <__sflush_r+0xba>
 800d8e8:	684b      	ldr	r3, [r1, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	dc02      	bgt.n	800d8f4 <__sflush_r+0x1c>
 800d8ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	dd48      	ble.n	800d986 <__sflush_r+0xae>
 800d8f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8f6:	2e00      	cmp	r6, #0
 800d8f8:	d045      	beq.n	800d986 <__sflush_r+0xae>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d900:	682f      	ldr	r7, [r5, #0]
 800d902:	6a21      	ldr	r1, [r4, #32]
 800d904:	602b      	str	r3, [r5, #0]
 800d906:	d030      	beq.n	800d96a <__sflush_r+0x92>
 800d908:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d90a:	89a3      	ldrh	r3, [r4, #12]
 800d90c:	0759      	lsls	r1, r3, #29
 800d90e:	d505      	bpl.n	800d91c <__sflush_r+0x44>
 800d910:	6863      	ldr	r3, [r4, #4]
 800d912:	1ad2      	subs	r2, r2, r3
 800d914:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d916:	b10b      	cbz	r3, 800d91c <__sflush_r+0x44>
 800d918:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d91a:	1ad2      	subs	r2, r2, r3
 800d91c:	2300      	movs	r3, #0
 800d91e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d920:	6a21      	ldr	r1, [r4, #32]
 800d922:	4628      	mov	r0, r5
 800d924:	47b0      	blx	r6
 800d926:	1c43      	adds	r3, r0, #1
 800d928:	89a3      	ldrh	r3, [r4, #12]
 800d92a:	d106      	bne.n	800d93a <__sflush_r+0x62>
 800d92c:	6829      	ldr	r1, [r5, #0]
 800d92e:	291d      	cmp	r1, #29
 800d930:	d82b      	bhi.n	800d98a <__sflush_r+0xb2>
 800d932:	4a2a      	ldr	r2, [pc, #168]	@ (800d9dc <__sflush_r+0x104>)
 800d934:	40ca      	lsrs	r2, r1
 800d936:	07d6      	lsls	r6, r2, #31
 800d938:	d527      	bpl.n	800d98a <__sflush_r+0xb2>
 800d93a:	2200      	movs	r2, #0
 800d93c:	6062      	str	r2, [r4, #4]
 800d93e:	04d9      	lsls	r1, r3, #19
 800d940:	6922      	ldr	r2, [r4, #16]
 800d942:	6022      	str	r2, [r4, #0]
 800d944:	d504      	bpl.n	800d950 <__sflush_r+0x78>
 800d946:	1c42      	adds	r2, r0, #1
 800d948:	d101      	bne.n	800d94e <__sflush_r+0x76>
 800d94a:	682b      	ldr	r3, [r5, #0]
 800d94c:	b903      	cbnz	r3, 800d950 <__sflush_r+0x78>
 800d94e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d952:	602f      	str	r7, [r5, #0]
 800d954:	b1b9      	cbz	r1, 800d986 <__sflush_r+0xae>
 800d956:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d95a:	4299      	cmp	r1, r3
 800d95c:	d002      	beq.n	800d964 <__sflush_r+0x8c>
 800d95e:	4628      	mov	r0, r5
 800d960:	f7ff fb4a 	bl	800cff8 <_free_r>
 800d964:	2300      	movs	r3, #0
 800d966:	6363      	str	r3, [r4, #52]	@ 0x34
 800d968:	e00d      	b.n	800d986 <__sflush_r+0xae>
 800d96a:	2301      	movs	r3, #1
 800d96c:	4628      	mov	r0, r5
 800d96e:	47b0      	blx	r6
 800d970:	4602      	mov	r2, r0
 800d972:	1c50      	adds	r0, r2, #1
 800d974:	d1c9      	bne.n	800d90a <__sflush_r+0x32>
 800d976:	682b      	ldr	r3, [r5, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d0c6      	beq.n	800d90a <__sflush_r+0x32>
 800d97c:	2b1d      	cmp	r3, #29
 800d97e:	d001      	beq.n	800d984 <__sflush_r+0xac>
 800d980:	2b16      	cmp	r3, #22
 800d982:	d11e      	bne.n	800d9c2 <__sflush_r+0xea>
 800d984:	602f      	str	r7, [r5, #0]
 800d986:	2000      	movs	r0, #0
 800d988:	e022      	b.n	800d9d0 <__sflush_r+0xf8>
 800d98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d98e:	b21b      	sxth	r3, r3
 800d990:	e01b      	b.n	800d9ca <__sflush_r+0xf2>
 800d992:	690f      	ldr	r7, [r1, #16]
 800d994:	2f00      	cmp	r7, #0
 800d996:	d0f6      	beq.n	800d986 <__sflush_r+0xae>
 800d998:	0793      	lsls	r3, r2, #30
 800d99a:	680e      	ldr	r6, [r1, #0]
 800d99c:	bf08      	it	eq
 800d99e:	694b      	ldreq	r3, [r1, #20]
 800d9a0:	600f      	str	r7, [r1, #0]
 800d9a2:	bf18      	it	ne
 800d9a4:	2300      	movne	r3, #0
 800d9a6:	eba6 0807 	sub.w	r8, r6, r7
 800d9aa:	608b      	str	r3, [r1, #8]
 800d9ac:	f1b8 0f00 	cmp.w	r8, #0
 800d9b0:	dde9      	ble.n	800d986 <__sflush_r+0xae>
 800d9b2:	6a21      	ldr	r1, [r4, #32]
 800d9b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d9b6:	4643      	mov	r3, r8
 800d9b8:	463a      	mov	r2, r7
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	47b0      	blx	r6
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	dc08      	bgt.n	800d9d4 <__sflush_r+0xfc>
 800d9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9d4:	4407      	add	r7, r0
 800d9d6:	eba8 0800 	sub.w	r8, r8, r0
 800d9da:	e7e7      	b.n	800d9ac <__sflush_r+0xd4>
 800d9dc:	20400001 	.word	0x20400001

0800d9e0 <_fflush_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	690b      	ldr	r3, [r1, #16]
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	b913      	cbnz	r3, 800d9f0 <_fflush_r+0x10>
 800d9ea:	2500      	movs	r5, #0
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	b118      	cbz	r0, 800d9fa <_fflush_r+0x1a>
 800d9f2:	6a03      	ldr	r3, [r0, #32]
 800d9f4:	b90b      	cbnz	r3, 800d9fa <_fflush_r+0x1a>
 800d9f6:	f7ff f8e9 	bl	800cbcc <__sinit>
 800d9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d0f3      	beq.n	800d9ea <_fflush_r+0xa>
 800da02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da04:	07d0      	lsls	r0, r2, #31
 800da06:	d404      	bmi.n	800da12 <_fflush_r+0x32>
 800da08:	0599      	lsls	r1, r3, #22
 800da0a:	d402      	bmi.n	800da12 <_fflush_r+0x32>
 800da0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da0e:	f7ff fae2 	bl	800cfd6 <__retarget_lock_acquire_recursive>
 800da12:	4628      	mov	r0, r5
 800da14:	4621      	mov	r1, r4
 800da16:	f7ff ff5f 	bl	800d8d8 <__sflush_r>
 800da1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da1c:	07da      	lsls	r2, r3, #31
 800da1e:	4605      	mov	r5, r0
 800da20:	d4e4      	bmi.n	800d9ec <_fflush_r+0xc>
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	059b      	lsls	r3, r3, #22
 800da26:	d4e1      	bmi.n	800d9ec <_fflush_r+0xc>
 800da28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da2a:	f7ff fad5 	bl	800cfd8 <__retarget_lock_release_recursive>
 800da2e:	e7dd      	b.n	800d9ec <_fflush_r+0xc>

0800da30 <__swhatbuf_r>:
 800da30:	b570      	push	{r4, r5, r6, lr}
 800da32:	460c      	mov	r4, r1
 800da34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da38:	2900      	cmp	r1, #0
 800da3a:	b096      	sub	sp, #88	@ 0x58
 800da3c:	4615      	mov	r5, r2
 800da3e:	461e      	mov	r6, r3
 800da40:	da0d      	bge.n	800da5e <__swhatbuf_r+0x2e>
 800da42:	89a3      	ldrh	r3, [r4, #12]
 800da44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da48:	f04f 0100 	mov.w	r1, #0
 800da4c:	bf14      	ite	ne
 800da4e:	2340      	movne	r3, #64	@ 0x40
 800da50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da54:	2000      	movs	r0, #0
 800da56:	6031      	str	r1, [r6, #0]
 800da58:	602b      	str	r3, [r5, #0]
 800da5a:	b016      	add	sp, #88	@ 0x58
 800da5c:	bd70      	pop	{r4, r5, r6, pc}
 800da5e:	466a      	mov	r2, sp
 800da60:	f000 f8f6 	bl	800dc50 <_fstat_r>
 800da64:	2800      	cmp	r0, #0
 800da66:	dbec      	blt.n	800da42 <__swhatbuf_r+0x12>
 800da68:	9901      	ldr	r1, [sp, #4]
 800da6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da72:	4259      	negs	r1, r3
 800da74:	4159      	adcs	r1, r3
 800da76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da7a:	e7eb      	b.n	800da54 <__swhatbuf_r+0x24>

0800da7c <__smakebuf_r>:
 800da7c:	898b      	ldrh	r3, [r1, #12]
 800da7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da80:	079d      	lsls	r5, r3, #30
 800da82:	4606      	mov	r6, r0
 800da84:	460c      	mov	r4, r1
 800da86:	d507      	bpl.n	800da98 <__smakebuf_r+0x1c>
 800da88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da8c:	6023      	str	r3, [r4, #0]
 800da8e:	6123      	str	r3, [r4, #16]
 800da90:	2301      	movs	r3, #1
 800da92:	6163      	str	r3, [r4, #20]
 800da94:	b003      	add	sp, #12
 800da96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da98:	ab01      	add	r3, sp, #4
 800da9a:	466a      	mov	r2, sp
 800da9c:	f7ff ffc8 	bl	800da30 <__swhatbuf_r>
 800daa0:	9f00      	ldr	r7, [sp, #0]
 800daa2:	4605      	mov	r5, r0
 800daa4:	4639      	mov	r1, r7
 800daa6:	4630      	mov	r0, r6
 800daa8:	f7fe ff78 	bl	800c99c <_malloc_r>
 800daac:	b948      	cbnz	r0, 800dac2 <__smakebuf_r+0x46>
 800daae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dab2:	059a      	lsls	r2, r3, #22
 800dab4:	d4ee      	bmi.n	800da94 <__smakebuf_r+0x18>
 800dab6:	f023 0303 	bic.w	r3, r3, #3
 800daba:	f043 0302 	orr.w	r3, r3, #2
 800dabe:	81a3      	strh	r3, [r4, #12]
 800dac0:	e7e2      	b.n	800da88 <__smakebuf_r+0xc>
 800dac2:	89a3      	ldrh	r3, [r4, #12]
 800dac4:	6020      	str	r0, [r4, #0]
 800dac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daca:	81a3      	strh	r3, [r4, #12]
 800dacc:	9b01      	ldr	r3, [sp, #4]
 800dace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dad2:	b15b      	cbz	r3, 800daec <__smakebuf_r+0x70>
 800dad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dad8:	4630      	mov	r0, r6
 800dada:	f000 f8cb 	bl	800dc74 <_isatty_r>
 800dade:	b128      	cbz	r0, 800daec <__smakebuf_r+0x70>
 800dae0:	89a3      	ldrh	r3, [r4, #12]
 800dae2:	f023 0303 	bic.w	r3, r3, #3
 800dae6:	f043 0301 	orr.w	r3, r3, #1
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	89a3      	ldrh	r3, [r4, #12]
 800daee:	431d      	orrs	r5, r3
 800daf0:	81a5      	strh	r5, [r4, #12]
 800daf2:	e7cf      	b.n	800da94 <__smakebuf_r+0x18>

0800daf4 <__swbuf_r>:
 800daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf6:	460e      	mov	r6, r1
 800daf8:	4614      	mov	r4, r2
 800dafa:	4605      	mov	r5, r0
 800dafc:	b118      	cbz	r0, 800db06 <__swbuf_r+0x12>
 800dafe:	6a03      	ldr	r3, [r0, #32]
 800db00:	b90b      	cbnz	r3, 800db06 <__swbuf_r+0x12>
 800db02:	f7ff f863 	bl	800cbcc <__sinit>
 800db06:	69a3      	ldr	r3, [r4, #24]
 800db08:	60a3      	str	r3, [r4, #8]
 800db0a:	89a3      	ldrh	r3, [r4, #12]
 800db0c:	071a      	lsls	r2, r3, #28
 800db0e:	d501      	bpl.n	800db14 <__swbuf_r+0x20>
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	b943      	cbnz	r3, 800db26 <__swbuf_r+0x32>
 800db14:	4621      	mov	r1, r4
 800db16:	4628      	mov	r0, r5
 800db18:	f000 f82a 	bl	800db70 <__swsetup_r>
 800db1c:	b118      	cbz	r0, 800db26 <__swbuf_r+0x32>
 800db1e:	f04f 37ff 	mov.w	r7, #4294967295
 800db22:	4638      	mov	r0, r7
 800db24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	6922      	ldr	r2, [r4, #16]
 800db2a:	1a98      	subs	r0, r3, r2
 800db2c:	6963      	ldr	r3, [r4, #20]
 800db2e:	b2f6      	uxtb	r6, r6
 800db30:	4283      	cmp	r3, r0
 800db32:	4637      	mov	r7, r6
 800db34:	dc05      	bgt.n	800db42 <__swbuf_r+0x4e>
 800db36:	4621      	mov	r1, r4
 800db38:	4628      	mov	r0, r5
 800db3a:	f7ff ff51 	bl	800d9e0 <_fflush_r>
 800db3e:	2800      	cmp	r0, #0
 800db40:	d1ed      	bne.n	800db1e <__swbuf_r+0x2a>
 800db42:	68a3      	ldr	r3, [r4, #8]
 800db44:	3b01      	subs	r3, #1
 800db46:	60a3      	str	r3, [r4, #8]
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	1c5a      	adds	r2, r3, #1
 800db4c:	6022      	str	r2, [r4, #0]
 800db4e:	701e      	strb	r6, [r3, #0]
 800db50:	6962      	ldr	r2, [r4, #20]
 800db52:	1c43      	adds	r3, r0, #1
 800db54:	429a      	cmp	r2, r3
 800db56:	d004      	beq.n	800db62 <__swbuf_r+0x6e>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	07db      	lsls	r3, r3, #31
 800db5c:	d5e1      	bpl.n	800db22 <__swbuf_r+0x2e>
 800db5e:	2e0a      	cmp	r6, #10
 800db60:	d1df      	bne.n	800db22 <__swbuf_r+0x2e>
 800db62:	4621      	mov	r1, r4
 800db64:	4628      	mov	r0, r5
 800db66:	f7ff ff3b 	bl	800d9e0 <_fflush_r>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d0d9      	beq.n	800db22 <__swbuf_r+0x2e>
 800db6e:	e7d6      	b.n	800db1e <__swbuf_r+0x2a>

0800db70 <__swsetup_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4b29      	ldr	r3, [pc, #164]	@ (800dc18 <__swsetup_r+0xa8>)
 800db74:	4605      	mov	r5, r0
 800db76:	6818      	ldr	r0, [r3, #0]
 800db78:	460c      	mov	r4, r1
 800db7a:	b118      	cbz	r0, 800db84 <__swsetup_r+0x14>
 800db7c:	6a03      	ldr	r3, [r0, #32]
 800db7e:	b90b      	cbnz	r3, 800db84 <__swsetup_r+0x14>
 800db80:	f7ff f824 	bl	800cbcc <__sinit>
 800db84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db88:	0719      	lsls	r1, r3, #28
 800db8a:	d422      	bmi.n	800dbd2 <__swsetup_r+0x62>
 800db8c:	06da      	lsls	r2, r3, #27
 800db8e:	d407      	bmi.n	800dba0 <__swsetup_r+0x30>
 800db90:	2209      	movs	r2, #9
 800db92:	602a      	str	r2, [r5, #0]
 800db94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db98:	81a3      	strh	r3, [r4, #12]
 800db9a:	f04f 30ff 	mov.w	r0, #4294967295
 800db9e:	e033      	b.n	800dc08 <__swsetup_r+0x98>
 800dba0:	0758      	lsls	r0, r3, #29
 800dba2:	d512      	bpl.n	800dbca <__swsetup_r+0x5a>
 800dba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dba6:	b141      	cbz	r1, 800dbba <__swsetup_r+0x4a>
 800dba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbac:	4299      	cmp	r1, r3
 800dbae:	d002      	beq.n	800dbb6 <__swsetup_r+0x46>
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f7ff fa21 	bl	800cff8 <_free_r>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbba:	89a3      	ldrh	r3, [r4, #12]
 800dbbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	6063      	str	r3, [r4, #4]
 800dbc6:	6923      	ldr	r3, [r4, #16]
 800dbc8:	6023      	str	r3, [r4, #0]
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	f043 0308 	orr.w	r3, r3, #8
 800dbd0:	81a3      	strh	r3, [r4, #12]
 800dbd2:	6923      	ldr	r3, [r4, #16]
 800dbd4:	b94b      	cbnz	r3, 800dbea <__swsetup_r+0x7a>
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dbdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbe0:	d003      	beq.n	800dbea <__swsetup_r+0x7a>
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f7ff ff49 	bl	800da7c <__smakebuf_r>
 800dbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbee:	f013 0201 	ands.w	r2, r3, #1
 800dbf2:	d00a      	beq.n	800dc0a <__swsetup_r+0x9a>
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	60a2      	str	r2, [r4, #8]
 800dbf8:	6962      	ldr	r2, [r4, #20]
 800dbfa:	4252      	negs	r2, r2
 800dbfc:	61a2      	str	r2, [r4, #24]
 800dbfe:	6922      	ldr	r2, [r4, #16]
 800dc00:	b942      	cbnz	r2, 800dc14 <__swsetup_r+0xa4>
 800dc02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc06:	d1c5      	bne.n	800db94 <__swsetup_r+0x24>
 800dc08:	bd38      	pop	{r3, r4, r5, pc}
 800dc0a:	0799      	lsls	r1, r3, #30
 800dc0c:	bf58      	it	pl
 800dc0e:	6962      	ldrpl	r2, [r4, #20]
 800dc10:	60a2      	str	r2, [r4, #8]
 800dc12:	e7f4      	b.n	800dbfe <__swsetup_r+0x8e>
 800dc14:	2000      	movs	r0, #0
 800dc16:	e7f7      	b.n	800dc08 <__swsetup_r+0x98>
 800dc18:	20000028 	.word	0x20000028

0800dc1c <memmove>:
 800dc1c:	4288      	cmp	r0, r1
 800dc1e:	b510      	push	{r4, lr}
 800dc20:	eb01 0402 	add.w	r4, r1, r2
 800dc24:	d902      	bls.n	800dc2c <memmove+0x10>
 800dc26:	4284      	cmp	r4, r0
 800dc28:	4623      	mov	r3, r4
 800dc2a:	d807      	bhi.n	800dc3c <memmove+0x20>
 800dc2c:	1e43      	subs	r3, r0, #1
 800dc2e:	42a1      	cmp	r1, r4
 800dc30:	d008      	beq.n	800dc44 <memmove+0x28>
 800dc32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc3a:	e7f8      	b.n	800dc2e <memmove+0x12>
 800dc3c:	4402      	add	r2, r0
 800dc3e:	4601      	mov	r1, r0
 800dc40:	428a      	cmp	r2, r1
 800dc42:	d100      	bne.n	800dc46 <memmove+0x2a>
 800dc44:	bd10      	pop	{r4, pc}
 800dc46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc4e:	e7f7      	b.n	800dc40 <memmove+0x24>

0800dc50 <_fstat_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4d07      	ldr	r5, [pc, #28]	@ (800dc70 <_fstat_r+0x20>)
 800dc54:	2300      	movs	r3, #0
 800dc56:	4604      	mov	r4, r0
 800dc58:	4608      	mov	r0, r1
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	602b      	str	r3, [r5, #0]
 800dc5e:	f7f6 facb 	bl	80041f8 <_fstat>
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	d102      	bne.n	800dc6c <_fstat_r+0x1c>
 800dc66:	682b      	ldr	r3, [r5, #0]
 800dc68:	b103      	cbz	r3, 800dc6c <_fstat_r+0x1c>
 800dc6a:	6023      	str	r3, [r4, #0]
 800dc6c:	bd38      	pop	{r3, r4, r5, pc}
 800dc6e:	bf00      	nop
 800dc70:	200011cc 	.word	0x200011cc

0800dc74 <_isatty_r>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	4d06      	ldr	r5, [pc, #24]	@ (800dc90 <_isatty_r+0x1c>)
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	f7f6 faca 	bl	8004218 <_isatty>
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	d102      	bne.n	800dc8e <_isatty_r+0x1a>
 800dc88:	682b      	ldr	r3, [r5, #0]
 800dc8a:	b103      	cbz	r3, 800dc8e <_isatty_r+0x1a>
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	200011cc 	.word	0x200011cc

0800dc94 <_realloc_r>:
 800dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	4607      	mov	r7, r0
 800dc9a:	4614      	mov	r4, r2
 800dc9c:	460d      	mov	r5, r1
 800dc9e:	b921      	cbnz	r1, 800dcaa <_realloc_r+0x16>
 800dca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dca4:	4611      	mov	r1, r2
 800dca6:	f7fe be79 	b.w	800c99c <_malloc_r>
 800dcaa:	b92a      	cbnz	r2, 800dcb8 <_realloc_r+0x24>
 800dcac:	f7ff f9a4 	bl	800cff8 <_free_r>
 800dcb0:	4625      	mov	r5, r4
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb8:	f000 f81a 	bl	800dcf0 <_malloc_usable_size_r>
 800dcbc:	4284      	cmp	r4, r0
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	d802      	bhi.n	800dcc8 <_realloc_r+0x34>
 800dcc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcc6:	d8f4      	bhi.n	800dcb2 <_realloc_r+0x1e>
 800dcc8:	4621      	mov	r1, r4
 800dcca:	4638      	mov	r0, r7
 800dccc:	f7fe fe66 	bl	800c99c <_malloc_r>
 800dcd0:	4680      	mov	r8, r0
 800dcd2:	b908      	cbnz	r0, 800dcd8 <_realloc_r+0x44>
 800dcd4:	4645      	mov	r5, r8
 800dcd6:	e7ec      	b.n	800dcb2 <_realloc_r+0x1e>
 800dcd8:	42b4      	cmp	r4, r6
 800dcda:	4622      	mov	r2, r4
 800dcdc:	4629      	mov	r1, r5
 800dcde:	bf28      	it	cs
 800dce0:	4632      	movcs	r2, r6
 800dce2:	f7ff f97a 	bl	800cfda <memcpy>
 800dce6:	4629      	mov	r1, r5
 800dce8:	4638      	mov	r0, r7
 800dcea:	f7ff f985 	bl	800cff8 <_free_r>
 800dcee:	e7f1      	b.n	800dcd4 <_realloc_r+0x40>

0800dcf0 <_malloc_usable_size_r>:
 800dcf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf4:	1f18      	subs	r0, r3, #4
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	bfbc      	itt	lt
 800dcfa:	580b      	ldrlt	r3, [r1, r0]
 800dcfc:	18c0      	addlt	r0, r0, r3
 800dcfe:	4770      	bx	lr

0800dd00 <_init>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_fini>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr
