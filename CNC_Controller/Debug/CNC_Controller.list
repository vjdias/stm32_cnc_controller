
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  0800ef18  0800ef18  0000ff18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f684  0800f684  0001107c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f684  0800f684  00010684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f68c  0800f68c  0001107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f68c  0800f68c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f690  0800f690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800f694  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000080  0800f710  00011080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001230  0800f710  00011230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020845  00000000  00000000  000110ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000579e  00000000  00000000  000318f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d80  00000000  00000000  00037090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001676  00000000  00000000  00038e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c3b  00000000  00000000  0003a486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002835a  00000000  00000000  000640c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa633  00000000  00000000  0008c41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186a4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f8  00000000  00000000  00186a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0018eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef00 	.word	0x0800ef00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800ef00 	.word	0x0800ef00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d011      	beq.n	8000724 <has_header_tail+0x40>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d90e      	bls.n	8000724 <has_header_tail+0x40>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	429a      	cmp	r2, r3
 800070e:	d109      	bne.n	8000724 <has_header_tail+0x40>
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3b01      	subs	r3, #1
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	429a      	cmp	r2, r3
 800071e:	d101      	bne.n	8000724 <has_header_tail+0x40>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <has_header_tail+0x42>
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <frame_expect_req+0x1e>
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d202      	bcs.n	8000756 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	e012      	b.n	800077c <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000756:	2355      	movs	r3, #85	@ 0x55
 8000758:	22aa      	movs	r2, #170	@ 0xaa
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff ffc1 	bl	80006e4 <has_header_tail>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	429a      	cmp	r2, r3
 8000772:	d002      	beq.n	800077a <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000774:	f06f 0301 	mvn.w	r3, #1
 8000778:	e000      	b.n	800077c <frame_expect_req+0x4a>
	return PROTO_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <move_end_req_decoder>:
#include "Protocol/Requests/move_end_request.h"

int move_end_req_decoder(const uint8_t *raw, uint32_t len, move_end_req_t *out) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <move_end_req_decoder+0x18>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <move_end_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	e011      	b.n	80007c6 <move_end_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_END, 4);
 80007a2:	2304      	movs	r3, #4
 80007a4:	2206      	movs	r2, #6
 80007a6:	68b9      	ldr	r1, [r7, #8]
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff ffc2 	bl	8000732 <frame_expect_req>
 80007ae:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <move_end_req_decoder+0x36>
		return st;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	e005      	b.n	80007c6 <move_end_req_decoder+0x42>
	out->frameId = raw[2];
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3302      	adds	r3, #2
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80007ce:	b480      	push	{r7}
 80007d0:	b085      	sub	sp, #20
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	4611      	mov	r1, r2
 80007da:	461a      	mov	r2, r3
 80007dc:	460b      	mov	r3, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <has_header_tail+0x40>
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d90e      	bls.n	800080e <has_header_tail+0x40>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d109      	bne.n	800080e <has_header_tail+0x40>
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	429a      	cmp	r2, r3
 8000808:	d101      	bne.n	800080e <has_header_tail+0x40>
 800080a:	2301      	movs	r3, #1
 800080c:	e000      	b.n	8000810 <has_header_tail+0x42>
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b21b      	sxth	r3, r3
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	b21a      	sxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	b29b      	uxth	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <be32_read>:
static inline uint32_t be32_read(const uint8_t *p) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	return (((uint32_t) p[0] << 24) | ((uint32_t) p[1] << 16)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	061a      	lsls	r2, r3, #24
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	431a      	orrs	r2, r3
			| ((uint32_t) p[2] << 8) | (uint32_t) p[3]);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3302      	adds	r3, #2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	4313      	orrs	r3, r2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	3203      	adds	r2, #3
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	4313      	orrs	r3, r2
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4613      	mov	r3, r2
 800088c:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <frame_expect_req+0x1e>
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d202      	bcs.n	80008a2 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	e012      	b.n	80008c8 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80008a2:	2355      	movs	r3, #85	@ 0x55
 80008a4:	22aa      	movs	r2, #170	@ 0xaa
 80008a6:	68b9      	ldr	r1, [r7, #8]
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff ff90 	bl	80007ce <has_header_tail>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d002      	beq.n	80008c6 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80008c0:	f06f 0301 	mvn.w	r3, #1
 80008c4:	e000      	b.n	80008c8 <frame_expect_req+0x4a>
	return PROTO_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <move_queue_add_req_decoder>:
#include "Protocol/Requests/move_queue_add_request.h"

int move_queue_add_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_add_req_t *out) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <move_queue_add_req_decoder+0x18>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <move_queue_add_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	e09a      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_ADD, 42);
 80008ee:	232a      	movs	r3, #42	@ 0x2a
 80008f0:	2201      	movs	r2, #1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff ffc2 	bl	800087e <frame_expect_req>
 80008fa:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <move_queue_add_req_decoder+0x36>
		return st;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	e08e      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	out->frameId = raw[2];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3302      	adds	r3, #2
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	701a      	strb	r2, [r3, #0]
	out->dirMask = raw[3];
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3303      	adds	r3, #3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	705a      	strb	r2, [r3, #1]
	out->vx = be16_read(&raw[4]);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff7c 	bl	800081c <be16_read>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	805a      	strh	r2, [r3, #2]
	out->sx = be32_read(&raw[6]);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3306      	adds	r3, #6
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff89 	bl	8000848 <be32_read>
 8000936:	4602      	mov	r2, r0
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	out->vy = be16_read(&raw[10]);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	330a      	adds	r3, #10
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff6b 	bl	800081c <be16_read>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	811a      	strh	r2, [r3, #8]
	out->sy = be32_read(&raw[12]);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff78 	bl	8000848 <be32_read>
 8000958:	4602      	mov	r2, r0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60da      	str	r2, [r3, #12]
	out->vz = be16_read(&raw[16]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3310      	adds	r3, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff5a 	bl	800081c <be16_read>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	821a      	strh	r2, [r3, #16]
	out->sz = be32_read(&raw[18]);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3312      	adds	r3, #18
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff67 	bl	8000848 <be32_read>
 800097a:	4602      	mov	r2, r0
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	615a      	str	r2, [r3, #20]
	out->kp_x = be16_read(&raw[22]);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3316      	adds	r3, #22
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff49 	bl	800081c <be16_read>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	831a      	strh	r2, [r3, #24]
	out->ki_x = be16_read(&raw[24]);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3318      	adds	r3, #24
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff40 	bl	800081c <be16_read>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	835a      	strh	r2, [r3, #26]
	out->kd_x = be16_read(&raw[26]);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	331a      	adds	r3, #26
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff37 	bl	800081c <be16_read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	839a      	strh	r2, [r3, #28]
	out->kp_y = be16_read(&raw[28]);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	331c      	adds	r3, #28
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff2e 	bl	800081c <be16_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	83da      	strh	r2, [r3, #30]
	out->ki_y = be16_read(&raw[30]);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	331e      	adds	r3, #30
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff25 	bl	800081c <be16_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	841a      	strh	r2, [r3, #32]
	out->kd_y = be16_read(&raw[32]);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3320      	adds	r3, #32
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff1c 	bl	800081c <be16_read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	845a      	strh	r2, [r3, #34]	@ 0x22
	out->kp_z = be16_read(&raw[34]);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3322      	adds	r3, #34	@ 0x22
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff13 	bl	800081c <be16_read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	849a      	strh	r2, [r3, #36]	@ 0x24
	out->ki_z = be16_read(&raw[36]);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3324      	adds	r3, #36	@ 0x24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff0a 	bl	800081c <be16_read>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
	out->kd_z = be16_read(&raw[38]);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3326      	adds	r3, #38	@ 0x26
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff01 	bl	800081c <be16_read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	851a      	strh	r2, [r3, #40]	@ 0x28
	return PROTO_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d011      	beq.n	8000a6c <has_header_tail+0x40>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d90e      	bls.n	8000a6c <has_header_tail+0x40>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d109      	bne.n	8000a6c <has_header_tail+0x40>
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d101      	bne.n	8000a6c <has_header_tail+0x40>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <has_header_tail+0x42>
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <frame_expect_req+0x1e>
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d202      	bcs.n	8000a9e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e012      	b.n	8000ac4 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000a9e:	2355      	movs	r3, #85	@ 0x55
 8000aa0:	22aa      	movs	r2, #170	@ 0xaa
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff ffc1 	bl	8000a2c <has_header_tail>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d002      	beq.n	8000ac2 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000abc:	f06f 0301 	mvn.w	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <move_queue_status_req_decoder>:
#include "Protocol/Requests/move_queue_status_request.h"

int move_queue_status_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_status_req_t *out) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <move_queue_status_req_decoder+0x18>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <move_queue_status_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	e011      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_STATUS, 4);
 8000aea:	2304      	movs	r3, #4
 8000aec:	2202      	movs	r2, #2
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ffc2 	bl	8000a7a <frame_expect_req>
 8000af6:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <move_queue_status_req_decoder+0x36>
		return st;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	e005      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	out->frameId = raw[2];
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3302      	adds	r3, #2
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4611      	mov	r1, r2
 8000b22:	461a      	mov	r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d011      	beq.n	8000b56 <has_header_tail+0x40>
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d90e      	bls.n	8000b56 <has_header_tail+0x40>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d109      	bne.n	8000b56 <has_header_tail+0x40>
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d101      	bne.n	8000b56 <has_header_tail+0x40>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <has_header_tail+0x42>
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <frame_expect_req+0x1e>
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d202      	bcs.n	8000b88 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e012      	b.n	8000bae <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000b88:	2355      	movs	r3, #85	@ 0x55
 8000b8a:	22aa      	movs	r2, #170	@ 0xaa
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ffc1 	bl	8000b16 <has_header_tail>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d002      	beq.n	8000bac <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000ba6:	f06f 0301 	mvn.w	r3, #1
 8000baa:	e000      	b.n	8000bae <frame_expect_req+0x4a>
	return PROTO_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <start_move_req_decoder>:
#include "Protocol/Requests/start_move_request.h"

int start_move_req_decoder(const uint8_t *raw, uint32_t len,
		start_move_req_t *out) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <start_move_req_decoder+0x18>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <start_move_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e011      	b.n	8000bf8 <start_move_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_START_MOVE, 4);
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff ffc2 	bl	8000b64 <frame_expect_req>
 8000be0:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <start_move_req_decoder+0x36>
		return st;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	e005      	b.n	8000bf8 <start_move_req_decoder+0x42>
	out->frameId = raw[2];
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <xor_reduce_bytes>:
// =====================
// Conjunto genérico de auxiliares
// =====================

// XOR sobre bytes (paridade byte a byte)
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	e009      	b.n	8000c28 <xor_reduce_bytes+0x28>
		x ^= p[i];
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3f1      	bcc.n	8000c14 <xor_reduce_bytes+0x14>
	return x;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <set_parity_byte>:
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
		uint32_t parity_index) {
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <set_parity_byte+0x1a>
		return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e00b      	b.n	8000c70 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	18d0      	adds	r0, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	18d4      	adds	r4, r2, r3
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	f7ff ffcb 	bl	8000c00 <xor_reduce_bytes>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	7023      	strb	r3, [r4, #0]
	return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}

08000c78 <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	22ab      	movs	r2, #171	@ 0xab
 8000c88:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	2254      	movs	r2, #84	@ 0x54
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	2101      	movs	r1, #1
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f7ff ffb4 	bl	8000c3e <set_parity_byte>
 8000cd6:	4603      	mov	r3, r0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d802      	bhi.n	8000d04 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e01c      	b.n	8000d3e <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 8000d04:	2107      	movs	r1, #7
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff ffb6 	bl	8000c78 <resp_init>
	raw[2] = in->frameId;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3302      	adds	r3, #2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3303      	adds	r3, #3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	7852      	ldrb	r2, [r2, #1]
 8000d1e:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3304      	adds	r3, #4
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	7892      	ldrb	r2, [r2, #2]
 8000d28:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f7ff ffc5 	bl	8000cbe <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000d34:	2106      	movs	r1, #6
 8000d36:	68b8      	ldr	r0, [r7, #8]
 8000d38:	f7ff ffb1 	bl	8000c9e <resp_set_tail>
	return PROTO_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	22ab      	movs	r2, #171	@ 0xab
 8000d56:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2254      	movs	r2, #84	@ 0x54
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <move_end_resp_encoder>:
	if (st != PROTO_OK)
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int move_end_resp_encoder(const move_end_resp_t *in, uint8_t *raw, uint32_t len) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d802      	bhi.n	8000db0 <move_end_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e00d      	b.n	8000dcc <move_end_resp_encoder+0x40>
	resp_init(raw, RESP_MOVE_END);
 8000db0:	2106      	movs	r1, #6
 8000db2:	68b8      	ldr	r0, [r7, #8]
 8000db4:	f7ff ffc7 	bl	8000d46 <resp_init>
	raw[2] = in->frameId;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	7812      	ldrb	r2, [r2, #0]
 8000dc0:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f7ff ffd1 	bl	8000d6c <resp_set_tail>
	return PROTO_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e009      	b.n	8000dfc <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4053      	eors	r3, r2
 8000df4:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3f1      	bcc.n	8000de8 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4053      	eors	r3, r2
 8000e0e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	4053      	eors	r3, r2
 8000e1a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4053      	eors	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <set_parity_bit>:
		uint32_t parity_index) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <set_parity_bit+0x1a>
		return -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	e010      	b.n	8000e78 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffb8 	bl	8000dd4 <xor_bit_reduce_bytes>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f001 0201 	and.w	r2, r1, #1
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]
	return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	22ab      	movs	r2, #171	@ 0xab
 8000e90:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2254      	movs	r2, #84	@ 0x54
 8000eb8:	701a      	strb	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <parity_set_bit_1N>:
static inline int parity_check_byte_1N(const uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
	return check_parity_byte(raw, 1, last_index, parity_index);
}
static inline int parity_set_bit_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ffaf 	bl	8000e3c <set_parity_bit>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <move_queue_add_ack_resp_encoder>:
	uint8_t b[3] = { RESP_MOVE_QUEUE_ADD_ACK, in ? in->frameId : 0,
			in ? in->status : 0 };
	return xor_bit_reduce_bytes(b, 3);
}
int move_queue_add_ack_resp_encoder(const move_queue_add_ack_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d802      	bhi.n	8000f0c <move_queue_add_ack_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e017      	b.n	8000f3c <move_queue_add_ack_resp_encoder+0x54>
	resp_init(raw, RESP_MOVE_QUEUE_ADD_ACK);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	68b8      	ldr	r0, [r7, #8]
 8000f10:	f7ff ffb6 	bl	8000e80 <resp_init>
	raw[2] = in->frameId;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3302      	adds	r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3303      	adds	r3, #3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	7852      	ldrb	r2, [r2, #1]
 8000f26:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 3, 4);
 8000f28:	2204      	movs	r2, #4
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	68b8      	ldr	r0, [r7, #8]
 8000f2e:	f7ff ffca 	bl	8000ec6 <parity_set_bit_1N>
	resp_set_tail(raw, 5);
 8000f32:	2105      	movs	r1, #5
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff ffb6 	bl	8000ea6 <resp_set_tail>
	return PROTO_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e009      	b.n	8000f6c <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4053      	eors	r3, r2
 8000f64:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f1      	bcc.n	8000f58 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4053      	eors	r3, r2
 8000f8a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4053      	eors	r3, r2
 8000f96:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <set_parity_bit>:
		uint32_t parity_index) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <set_parity_bit+0x1a>
		return -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	e010      	b.n	8000fe8 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffb8 	bl	8000f44 <xor_bit_reduce_bytes>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f001 0201 	and.w	r2, r1, #1
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	22ab      	movs	r2, #171	@ 0xab
 8001000:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	78fa      	ldrb	r2, [r7, #3]
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4413      	add	r3, r2
 8001026:	2254      	movs	r2, #84	@ 0x54
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <parity_set_bit_1N>:
		uint32_t parity_index) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	2101      	movs	r1, #1
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ffaf 	bl	8000fac <set_parity_bit>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <move_queue_status_resp_encoder>:
			in ? in->pidErrZ : 0, in ? in->pctX : 0, in ? in->pctY : 0,
			in ? in->pctZ : 0 };
	return xor_bit_reduce_bytes(b, 9);
}
int move_queue_status_resp_encoder(const move_queue_status_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 12)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b0b      	cmp	r3, #11
 8001074:	d802      	bhi.n	800107c <move_queue_status_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e035      	b.n	80010e8 <move_queue_status_resp_encoder+0x90>
	resp_init(raw, RESP_MOVE_QUEUE_STATUS);
 800107c:	2102      	movs	r1, #2
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff ffb6 	bl	8000ff0 <resp_init>
	raw[2] = in->frameId;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3302      	adds	r3, #2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3303      	adds	r3, #3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	7852      	ldrb	r2, [r2, #1]
 8001096:	701a      	strb	r2, [r3, #0]
	raw[4] = in->pidErrX;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3304      	adds	r3, #4
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	7892      	ldrb	r2, [r2, #2]
 80010a0:	701a      	strb	r2, [r3, #0]
	raw[5] = in->pidErrY;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3305      	adds	r3, #5
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	78d2      	ldrb	r2, [r2, #3]
 80010aa:	701a      	strb	r2, [r3, #0]
	raw[6] = in->pidErrZ;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3306      	adds	r3, #6
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	7912      	ldrb	r2, [r2, #4]
 80010b4:	701a      	strb	r2, [r3, #0]
	raw[7] = in->pctX;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3307      	adds	r3, #7
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	7952      	ldrb	r2, [r2, #5]
 80010be:	701a      	strb	r2, [r3, #0]
	raw[8] = in->pctY;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3308      	adds	r3, #8
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	7992      	ldrb	r2, [r2, #6]
 80010c8:	701a      	strb	r2, [r3, #0]
	raw[9] = in->pctZ;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3309      	adds	r3, #9
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	79d2      	ldrb	r2, [r2, #7]
 80010d2:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 9, 10);
 80010d4:	220a      	movs	r2, #10
 80010d6:	2109      	movs	r1, #9
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f7ff ffac 	bl	8001036 <parity_set_bit_1N>
	resp_set_tail(raw, 11);
 80010de:	210b      	movs	r1, #11
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f7ff ff98 	bl	8001016 <resp_set_tail>
	return PROTO_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	22ab      	movs	r2, #171	@ 0xab
 8001100:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	2254      	movs	r2, #84	@ 0x54
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <start_move_resp_encoder>:
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int start_move_resp_encoder(const start_move_resp_t *in, uint8_t *raw,
		uint32_t len) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d802      	bhi.n	800115a <start_move_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	e00d      	b.n	8001176 <start_move_resp_encoder+0x40>
	resp_init(raw, RESP_START_MOVE);
 800115a:	2103      	movs	r1, #3
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff ffc7 	bl	80010f0 <resp_init>
	raw[2] = in->frameId;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3302      	adds	r3, #2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 800116c:	2103      	movs	r1, #3
 800116e:	68b8      	ldr	r0, [r7, #8]
 8001170:	f7ff ffd1 	bl	8001116 <resp_set_tail>
	return PROTO_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 8001182:	210c      	movs	r1, #12
 8001184:	2001      	movs	r0, #1
 8001186:	f00c fcbb 	bl	800db00 <calloc>
 800118a:	4603      	mov	r3, r0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <resp_fifo_push+0x24>
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e03d      	b.n	8001230 <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 80011b4:	200c      	movs	r0, #12
 80011b6:	f00c fcbf 	bl	800db38 <malloc>
 80011ba:	4603      	mov	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <resp_fifo_push+0x3a>
 80011c4:	f06f 0302 	mvn.w	r3, #2
 80011c8:	e032      	b.n	8001230 <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f00c fcb4 	bl	800db38 <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <resp_fifo_push+0x5c>
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f00c fcb1 	bl	800db48 <free>
 80011e6:	f06f 0302 	mvn.w	r3, #2
 80011ea:	e021      	b.n	8001230 <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00c fff0 	bl	800e1da <memcpy>
    n->len = len;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <resp_fifo_push+0x88>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	e002      	b.n	800121e <resp_fifo_push+0x8e>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]
    q->tail = n;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	605a      	str	r2, [r3, #4]
    q->count++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <resp_fifo_pop+0x20>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <resp_fifo_pop+0x20>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <resp_fifo_pop+0x24>
 8001258:	2300      	movs	r3, #0
 800125a:	e02e      	b.n	80012ba <resp_fifo_pop+0x82>
    node_t *n = q->head;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d202      	bcs.n	8001272 <resp_fifo_pop+0x3a>
 800126c:	f06f 0303 	mvn.w	r3, #3
 8001270:	e023      	b.n	80012ba <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f00c ffac 	bl	800e1da <memcpy>
    int ret = (int)n->len;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <resp_fifo_pop+0x66>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
    q->count--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
    free(n->buf);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00c fc4b 	bl	800db48 <free>
    free(n);
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f00c fc48 	bl	800db48 <free>
    return ret;
 80012b8:	693b      	ldr	r3, [r7, #16]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    if (!r) return;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01a      	beq.n	800130c <router_init+0x48>
    memset(r, 0, sizeof(*r));
 80012d6:	2248      	movs	r2, #72	@ 0x48
 80012d8:	2100      	movs	r1, #0
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f00c fef2 	bl	800e0c4 <memset>
    r->resp = resp_fifo;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 80012e6:	2224      	movs	r2, #36	@ 0x24
 80012e8:	2100      	movs	r1, #0
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <router_init+0x50>)
 80012ec:	f00c feea 	bl	800e0c4 <memset>
    if (h) g_handlers = *h;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <router_init+0x4a>
 80012f6:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <router_init+0x50>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4614      	mov	r4, r2
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	e000      	b.n	800130e <router_init+0x4a>
    if (!r) return;
 800130c:	bf00      	nop
}
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000009c 	.word	0x2000009c

08001318 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80c0 	beq.w	80014ac <dispatch+0x194>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80bc 	beq.w	80014ac <dispatch+0x194>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b03      	cmp	r3, #3
 8001338:	f240 80b8 	bls.w	80014ac <dispatch+0x194>
    uint8_t type = f[1];
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b20      	cmp	r3, #32
 8001348:	dc4a      	bgt.n	80013e0 <dispatch+0xc8>
 800134a:	2b00      	cmp	r3, #0
 800134c:	f340 80b0 	ble.w	80014b0 <dispatch+0x198>
 8001350:	3b01      	subs	r3, #1
 8001352:	2b1f      	cmp	r3, #31
 8001354:	f200 80ac 	bhi.w	80014b0 <dispatch+0x198>
 8001358:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <dispatch+0x48>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013fd 	.word	0x080013fd
 8001368:	08001413 	.word	0x08001413
 800136c:	08001429 	.word	0x08001429
 8001370:	0800143f 	.word	0x0800143f
 8001374:	08001455 	.word	0x08001455
 8001378:	0800146b 	.word	0x0800146b
 800137c:	080014b1 	.word	0x080014b1
 8001380:	080014b1 	.word	0x080014b1
 8001384:	080014b1 	.word	0x080014b1
 8001388:	080014b1 	.word	0x080014b1
 800138c:	080014b1 	.word	0x080014b1
 8001390:	080014b1 	.word	0x080014b1
 8001394:	080014b1 	.word	0x080014b1
 8001398:	080014b1 	.word	0x080014b1
 800139c:	080014b1 	.word	0x080014b1
 80013a0:	080014b1 	.word	0x080014b1
 80013a4:	080014b1 	.word	0x080014b1
 80013a8:	080014b1 	.word	0x080014b1
 80013ac:	080014b1 	.word	0x080014b1
 80013b0:	080014b1 	.word	0x080014b1
 80013b4:	080014b1 	.word	0x080014b1
 80013b8:	080014b1 	.word	0x080014b1
 80013bc:	080014b1 	.word	0x080014b1
 80013c0:	080014b1 	.word	0x080014b1
 80013c4:	080014b1 	.word	0x080014b1
 80013c8:	080014b1 	.word	0x080014b1
 80013cc:	080014b1 	.word	0x080014b1
 80013d0:	080014b1 	.word	0x080014b1
 80013d4:	080014b1 	.word	0x080014b1
 80013d8:	080014b1 	.word	0x080014b1
 80013dc:	08001481 	.word	0x08001481
 80013e0:	2b68      	cmp	r3, #104	@ 0x68
 80013e2:	d058      	beq.n	8001496 <dispatch+0x17e>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
        case REQ_MOVE_END:           CALL(on_move_end);           break;
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 80013e4:	e064      	b.n	80014b0 <dispatch+0x198>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <dispatch+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d062      	beq.n	80014b4 <dispatch+0x19c>
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <dispatch+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	4798      	blx	r3
 80013fa:	e05b      	b.n	80014b4 <dispatch+0x19c>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80013fc:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <dispatch+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d059      	beq.n	80014b8 <dispatch+0x1a0>
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <dispatch+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	4798      	blx	r3
 8001410:	e052      	b.n	80014b8 <dispatch+0x1a0>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <dispatch+0x1c4>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d050      	beq.n	80014bc <dispatch+0x1a4>
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <dispatch+0x1c4>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	4798      	blx	r3
 8001426:	e049      	b.n	80014bc <dispatch+0x1a4>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <dispatch+0x1c4>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d047      	beq.n	80014c0 <dispatch+0x1a8>
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <dispatch+0x1c4>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	4798      	blx	r3
 800143c:	e040      	b.n	80014c0 <dispatch+0x1a8>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <dispatch+0x1c4>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d03e      	beq.n	80014c4 <dispatch+0x1ac>
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <dispatch+0x1c4>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	4798      	blx	r3
 8001452:	e037      	b.n	80014c4 <dispatch+0x1ac>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <dispatch+0x1c4>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d035      	beq.n	80014c8 <dispatch+0x1b0>
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <dispatch+0x1c4>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	4798      	blx	r3
 8001468:	e02e      	b.n	80014c8 <dispatch+0x1b0>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <dispatch+0x1c4>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d02c      	beq.n	80014cc <dispatch+0x1b4>
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <dispatch+0x1c4>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	4798      	blx	r3
 800147e:	e025      	b.n	80014cc <dispatch+0x1b4>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <dispatch+0x1c4>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <dispatch+0x1b8>
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <dispatch+0x1c4>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	4798      	blx	r3
 8001494:	e01c      	b.n	80014d0 <dispatch+0x1b8>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <dispatch+0x1c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <dispatch+0x1bc>
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <dispatch+0x1c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	4798      	blx	r3
 80014aa:	e013      	b.n	80014d4 <dispatch+0x1bc>
    if (!r || !f || len < 4) return;
 80014ac:	bf00      	nop
 80014ae:	e012      	b.n	80014d6 <dispatch+0x1be>
        default: /* desconhecido */  break;
 80014b0:	bf00      	nop
 80014b2:	e010      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80014b4:	bf00      	nop
 80014b6:	e00e      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80014b8:	bf00      	nop
 80014ba:	e00c      	b.n	80014d6 <dispatch+0x1be>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 80014bc:	bf00      	nop
 80014be:	e00a      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 80014c0:	bf00      	nop
 80014c2:	e008      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 80014c4:	bf00      	nop
 80014c6:	e006      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 80014c8:	bf00      	nop
 80014ca:	e004      	b.n	80014d6 <dispatch+0x1be>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <dispatch+0x1be>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <dispatch+0x1be>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 80014d4:	bf00      	nop
    }
    #undef CALL
}
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000009c 	.word	0x2000009c

080014e0 <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d016      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d910      	bls.n	8001520 <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2baa      	cmp	r3, #170	@ 0xaa
 8001504:	d10e      	bne.n	8001524 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3b01      	subs	r3, #1
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b55      	cmp	r3, #85	@ 0x55
 8001512:	d109      	bne.n	8001528 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fefd 	bl	8001318 <dispatch>
 800151e:	e004      	b.n	800152a <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8001520:	bf00      	nop
 8001522:	e002      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8001524:	bf00      	nop
 8001526:	e000      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8001528:	bf00      	nop
}
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <home_service_init>:

LOG_SVC_DEFINE(LOG_SVC_HOME, "home");

static home_status_t g_home;

void home_service_init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af04      	add	r7, sp, #16
	g_home.axis_done_mask = 0;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <home_service_init+0x34>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	g_home.error_flags = 0;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <home_service_init+0x34>)
 800153e:	2200      	movs	r2, #0
 8001540:	705a      	strb	r2, [r3, #1]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8001542:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <home_service_init+0x38>)
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <home_service_init+0x3c>)
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <home_service_init+0x40>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <home_service_init+0x44>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2003      	movs	r0, #3
 8001558:	f000 fd3a 	bl	8001fd0 <log_event_auto>
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000c0 	.word	0x200000c0
 8001568:	0800ef18 	.word	0x0800ef18
 800156c:	0800ef20 	.word	0x0800ef20
 8001570:	0800ef24 	.word	0x0800ef24
 8001574:	0800ef28 	.word	0x0800ef28

08001578 <home_on_move_home>:
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <home_on_move_home+0x2c>)
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <home_on_move_home+0x30>)
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <home_on_move_home+0x34>)
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <home_on_move_home+0x38>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	2200      	movs	r2, #0
 8001594:	2101      	movs	r1, #1
 8001596:	2003      	movs	r0, #3
 8001598:	f000 fd1a 	bl	8001fd0 <log_event_auto>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0800ef18 	.word	0x0800ef18
 80015a8:	0800ef30 	.word	0x0800ef30
 80015ac:	0800ef24 	.word	0x0800ef24
 80015b0:	0800ef40 	.word	0x0800ef40

080015b4 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    if (!led)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f107 020c 	add.w	r2, r7, #12
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fc38 	bl	8005e64 <HAL_GPIO_Init>
 80015f4:	e000      	b.n	80015f8 <led_gpio_config_output+0x44>
        return;
 80015f6:	bf00      	nop
}
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	b088      	sub	sp, #32
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
    if (!led)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	889b      	ldrh	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fc10 	bl	8005e64 <HAL_GPIO_Init>
 8001644:	e000      	b.n	8001648 <led_gpio_config_pwm+0x4a>
        return;
 8001646:	bf00      	nop
}
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	460b      	mov	r3, r1
 800165c:	71bb      	strb	r3, [r7, #6]
 800165e:	4613      	mov	r3, r2
 8001660:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	733b      	strb	r3, [r7, #12]
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	737b      	strb	r3, [r7, #13]
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 800166e:	f107 0110 	add.w	r1, r7, #16
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2207      	movs	r2, #7
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb31 	bl	8000ce0 <led_ctrl_resp_encoder>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8001684:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <led_push_response+0x80>)
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <led_push_response+0x84>)
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <led_push_response+0x88>)
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	2164      	movs	r1, #100	@ 0x64
 8001696:	2001      	movs	r0, #1
 8001698:	f000 fc9a 	bl	8001fd0 <log_event_auto>
 800169c:	e014      	b.n	80016c8 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2107      	movs	r1, #7
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fd3b 	bl	8004120 <app_resp_push>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <led_push_response+0x80>)
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <led_push_response+0x8c>)
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <led_push_response+0x88>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	f06f 0203 	mvn.w	r2, #3
 80016c0:	2164      	movs	r1, #100	@ 0x64
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 fc84 	bl	8001fd0 <log_event_auto>
    }
}
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0800ef4c 	.word	0x0800ef4c
 80016d4:	0800ef50 	.word	0x0800ef50
 80016d8:	0800ef6c 	.word	0x0800ef6c
 80016dc:	0800ef74 	.word	0x0800ef74

080016e0 <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 80016e6:	f006 fb75 	bl	8007dd4 <HAL_RCC_GetPCLK2Freq>
 80016ea:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <led_timer_get_clock+0x34>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80016f4:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <led_timer_get_clock+0x28>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <led_timer_get_clock+0x28>
        clk *= 2u;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000

08001718 <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b094      	sub	sp, #80	@ 0x50
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8001724:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <led_compute_period_ticks+0x16>
        return 0u;
 800172a:	2300      	movs	r3, #0
 800172c:	e066      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 800172e:	f7ff ffd7 	bl	80016e0 <led_timer_get_clock>
 8001732:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <led_compute_period_ticks+0xf0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 800173c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <led_compute_period_ticks+0x2e>
        return 0u;
 8001742:	2300      	movs	r3, #0
 8001744:	e05a      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8001746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8001750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <led_compute_period_ticks+0x42>
        return 0u;
 8001756:	2300      	movs	r3, #0
 8001758:	e050      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 800175a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175c:	2200      	movs	r2, #0
 800175e:	4698      	mov	r8, r3
 8001760:	4691      	mov	r9, r2
 8001762:	4642      	mov	r2, r8
 8001764:	464b      	mov	r3, r9
 8001766:	1891      	adds	r1, r2, r2
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	415b      	adcs	r3, r3
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001772:	eb12 0408 	adds.w	r4, r2, r8
 8001776:	eb43 0509 	adc.w	r5, r3, r9
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	016b      	lsls	r3, r5, #5
 8001784:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001788:	0162      	lsls	r2, r4, #5
 800178a:	eb14 0a02 	adds.w	sl, r4, r2
 800178e:	eb45 0b03 	adc.w	fp, r5, r3
 8001792:	eb1a 0308 	adds.w	r3, sl, r8
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	eb4b 0309 	adc.w	r3, fp, r9
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 80017a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017b8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017bc:	4621      	mov	r1, r4
 80017be:	1889      	adds	r1, r1, r2
 80017c0:	61b9      	str	r1, [r7, #24]
 80017c2:	4629      	mov	r1, r5
 80017c4:	eb43 0101 	adc.w	r1, r3, r1
 80017c8:	61f9      	str	r1, [r7, #28]
 80017ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017cc:	2200      	movs	r2, #0
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	617a      	str	r2, [r7, #20]
 80017d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017da:	f7fe fd49 	bl	8000270 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 80017e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d305      	bcc.n	80017fa <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 80017fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3750      	adds	r7, #80	@ 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001806:	bf00      	nop
 8001808:	2000100c 	.word	0x2000100c

0800180c <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <led_apply_pwm+0x14>
        period_ticks = 1u;
 800181c:	2301      	movs	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d901      	bls.n	800182c <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <led_apply_pwm+0x2c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3b01      	subs	r3, #1
 8001836:	e000      	b.n	800183a <led_apply_pwm+0x2e>
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <led_apply_pwm+0x5c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001844:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <led_apply_pwm+0x5c>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <led_apply_pwm+0x5c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8001852:	2101      	movs	r1, #1
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <led_apply_pwm+0x5c>)
 8001856:	f009 fe2f 	bl	800b4b8 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 800185a:	4a03      	ldr	r2, [pc, #12]	@ (8001868 <led_apply_pwm+0x5c>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000100c 	.word	0x2000100c

0800186c <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
    if (!led)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d029      	beq.n	80018ce <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 800187a:	f000 f913 	bl	8001aa4 <led_pwm_stop>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00d      	beq.n	80018a4 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001888:	4a13      	ldr	r2, [pc, #76]	@ (80018d8 <led_force_off+0x6c>)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <led_force_off+0x70>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <led_force_off+0x74>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	f06f 0203 	mvn.w	r2, #3
 800189c:	2164      	movs	r1, #100	@ 0x64
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fb96 	bl	8001fd0 <log_event_auto>
    }
    led_gpio_config_output(led);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe85 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	f004 fd81 	bl	80063bc <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	735a      	strb	r2, [r3, #13]
 80018cc:	e000      	b.n	80018d0 <led_force_off+0x64>
        return;
 80018ce:	bf00      	nop
}
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800ef4c 	.word	0x0800ef4c
 80018dc:	0800ef8c 	.word	0x0800ef8c
 80018e0:	0800efb0 	.word	0x0800efb0

080018e4 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af04      	add	r7, sp, #16
 80018ea:	6078      	str	r0, [r7, #4]
    if (!led)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d029      	beq.n	8001946 <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 80018f2:	f000 f8d7 	bl	8001aa4 <led_pwm_stop>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00d      	beq.n	800191c <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001900:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <led_force_on+0x6c>)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <led_force_on+0x70>)
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <led_force_on+0x74>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	f06f 0203 	mvn.w	r2, #3
 8001914:	2164      	movs	r1, #100	@ 0x64
 8001916:	2001      	movs	r0, #1
 8001918:	f000 fb5a 	bl	8001fd0 <log_event_auto>
    }
    led_gpio_config_output(led);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fe49 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f004 fd45 	bl	80063bc <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	735a      	strb	r2, [r3, #13]
 8001944:	e000      	b.n	8001948 <led_force_on+0x64>
        return;
 8001946:	bf00      	nop
}
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800ef4c 	.word	0x0800ef4c
 8001954:	0800ef8c 	.word	0x0800ef8c
 8001958:	0800efb0 	.word	0x0800efb0

0800195c <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <led_force_blink+0x8c>
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d039      	beq.n	80019e8 <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fece 	bl	8001718 <led_compute_period_ticks>
 800197c:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d801      	bhi.n	8001988 <led_force_blink+0x2c>
        period_ticks = 2u;
 8001984:	2302      	movs	r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198e:	d902      	bls.n	8001996 <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8001990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001994:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fe2e 	bl	80015fe <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff ff31 	bl	800180c <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 80019aa:	f000 f85d 	bl	8001a68 <led_pwm_start>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00f      	beq.n	80019d4 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 80019b4:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <led_force_blink+0x94>)
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <led_force_blink+0x98>)
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <led_force_blink+0x9c>)
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	f06f 0203 	mvn.w	r2, #3
 80019c4:	2164      	movs	r1, #100	@ 0x64
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fb02 	bl	8001fd0 <log_event_auto>
        led_force_off(led);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff4d 	bl	800186c <led_force_off>
        return;
 80019d2:	e00a      	b.n	80019ea <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	735a      	strb	r2, [r3, #13]
 80019e6:	e000      	b.n	80019ea <led_force_blink+0x8e>
        return;
 80019e8:	bf00      	nop
}
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	0800ef4c 	.word	0x0800ef4c
 80019f4:	0800efb8 	.word	0x0800efb8
 80019f8:	0800efb0 	.word	0x0800efb0

080019fc <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	803b      	strh	r3, [r7, #0]
    if (!led)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d026      	beq.n	8001a60 <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a22:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8001a24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d103      	bne.n	8001a38 <led_apply_config+0x3c>
        led_force_on(led);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff57 	bl	80018e4 <led_force_on>
 8001a36:	e00e      	b.n	8001a56 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d108      	bne.n	8001a50 <led_apply_config+0x54>
 8001a3e:	883b      	ldrh	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 8001a44:	883b      	ldrh	r3, [r7, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff87 	bl	800195c <led_force_blink>
 8001a4e:	e002      	b.n	8001a56 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff0b 	bl	800186c <led_force_off>
    }

    if (primask == 0u) {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5c:	b662      	cpsie	i
}
 8001a5e:	e000      	b.n	8001a62 <led_apply_config+0x66>
        return;
 8001a60:	bf00      	nop
        __enable_irq();
    }
}
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <led_pwm_start+0x34>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <led_pwm_start+0x12>
        return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e00c      	b.n	8001a94 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <led_pwm_start+0x38>)
 8001a7e:	f008 fc61 	bl	800a344 <HAL_TIM_PWM_Start>
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <led_pwm_start+0x34>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000c2 	.word	0x200000c2
 8001aa0:	2000100c 	.word	0x2000100c

08001aa4 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <led_pwm_stop+0x64>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <led_pwm_stop+0x12>
        return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e024      	b.n	8001b00 <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aba:	f008 fdf3 	bl	800a6a4 <HAL_TIM_PWM_Stop>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11a      	bne.n	8001afe <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10f      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <led_pwm_stop+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <led_pwm_stop+0x68>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <led_pwm_stop+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000c2 	.word	0x200000c2
 8001b0c:	2000100c 	.word	0x2000100c

08001b10 <led_service_init>:

void led_service_init(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af02      	add	r7, sp, #8
    g_pwm_running = 0u;
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <led_service_init+0x110>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e02d      	b.n	8001b7e <led_service_init+0x6e>
        led_gpio_config_output(&g_leds[i]);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	4a3f      	ldr	r2, [pc, #252]	@ (8001c24 <led_service_init+0x114>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fd42 	bl	80015b4 <led_gpio_config_output>
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 8001b30:	4a3c      	ldr	r2, [pc, #240]	@ (8001c24 <led_service_init+0x114>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <led_service_init+0x114>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f004 fc37 	bl	80063bc <HAL_GPIO_WritePin>
        g_leds[i].mode = LED_MODE_OFF;
 8001b4e:	4a35      	ldr	r2, [pc, #212]	@ (8001c24 <led_service_init+0x114>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	330c      	adds	r3, #12
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_centi_hz = 0u;
 8001b5c:	4a31      	ldr	r2, [pc, #196]	@ (8001c24 <led_service_init+0x114>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	330e      	adds	r3, #14
 8001b66:	2200      	movs	r2, #0
 8001b68:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 8001b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c24 <led_service_init+0x114>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	330d      	adds	r3, #13
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ce      	beq.n	8001b22 <led_service_init+0x12>
    }

    if (htim15.Instance != TIM15) {
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <led_service_init+0x118>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <led_service_init+0x11c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d001      	beq.n	8001b92 <led_service_init+0x82>
        MX_TIM15_Init();
 8001b8e:	f003 f9f5 	bl	8004f7c <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8001b92:	4825      	ldr	r0, [pc, #148]	@ (8001c28 <led_service_init+0x118>)
 8001b94:	f008 fac2 	bl	800a11c <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <led_service_init+0xa8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 8001b9e:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <led_service_init+0x120>)
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <led_service_init+0x124>)
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <led_service_init+0x128>)
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	f06f 0203 	mvn.w	r2, #3
 8001bae:	2164      	movs	r1, #100	@ 0x64
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 fa0d 	bl	8001fd0 <log_event_auto>
        return;
 8001bb6:	e02f      	b.n	8001c18 <led_service_init+0x108>
    }

    TIM_OC_InitTypeDef oc = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	@ 0x60
 8001bcc:	603b      	str	r3, [r7, #0]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    oc.Pulse = 0u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	480e      	ldr	r0, [pc, #56]	@ (8001c28 <led_service_init+0x118>)
 8001bee:	f009 fa15 	bl	800b01c <HAL_TIM_PWM_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <led_service_init+0x102>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <led_service_init+0x120>)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <led_service_init+0x12c>)
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <led_service_init+0x128>)
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	f06f 0203 	mvn.w	r2, #3
 8001c08:	2164      	movs	r1, #100	@ 0x64
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 f9e0 	bl	8001fd0 <log_event_auto>
        return;
 8001c10:	e002      	b.n	8001c18 <led_service_init+0x108>
    }

    led_force_off(&g_leds[0]);
 8001c12:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <led_service_init+0x114>)
 8001c14:	f7ff fe2a 	bl	800186c <led_force_off>
}
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000c2 	.word	0x200000c2
 8001c24:	20000000 	.word	0x20000000
 8001c28:	2000100c 	.word	0x2000100c
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	0800ef4c 	.word	0x0800ef4c
 8001c34:	0800efd8 	.word	0x0800efd8
 8001c38:	0800efb0 	.word	0x0800efb0
 8001c3c:	0800effc 	.word	0x0800effc

08001c40 <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b097      	sub	sp, #92	@ 0x5c
 8001c44:	af0a      	add	r7, sp, #40	@ 0x28
 8001c46:	6178      	str	r0, [r7, #20]
 8001c48:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80d2 	beq.w	8001df6 <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d902      	bls.n	8001c5e <led_on_led_ctrl+0x1e>
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c5c:	d90e      	bls.n	8001c7c <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 8001c5e:	4a68      	ldr	r2, [pc, #416]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <led_on_led_ctrl+0x1c4>)
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	4b67      	ldr	r3, [pc, #412]	@ (8001e08 <led_on_led_ctrl+0x1c8>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	f06f 0203 	mvn.w	r2, #3
 8001c72:	2164      	movs	r1, #100	@ 0x64
 8001c74:	2001      	movs	r0, #1
 8001c76:	f000 f9ab 	bl	8001fd0 <log_event_auto>
        return;
 8001c7a:	e0bd      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	461a      	mov	r2, r3
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7fe fcef 	bl	8000668 <led_ctrl_req_decoder>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 8001c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00f      	beq.n	8001cb8 <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 8001c98:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8001c9c:	4958      	ldr	r1, [pc, #352]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	4b59      	ldr	r3, [pc, #356]	@ (8001e0c <led_on_led_ctrl+0x1cc>)
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <led_on_led_ctrl+0x1d0>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	2164      	movs	r1, #100	@ 0x64
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 f98d 	bl	8001fd0 <log_event_auto>
        return;
 8001cb6:	e09f      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 8001cb8:	7f7b      	ldrb	r3, [r7, #29]
 8001cba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd4:	e02d      	b.n	8001d32 <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 8001cdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01e      	beq.n	8001d2a <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8001cec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4a45      	ldr	r2, [pc, #276]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d00:	1898      	adds	r0, r3, r2
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3320      	adds	r3, #32
 8001d08:	f107 0210 	add.w	r2, r7, #16
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	3320      	adds	r3, #32
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f7ff fe6a 	bl	80019fc <led_apply_config>
 8001d28:	e000      	b.n	8001d2c <led_on_led_ctrl+0xec>
            continue;
 8001d2a:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2e:	3301      	adds	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ce      	beq.n	8001cd6 <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8001d38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d44:	4013      	ands	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001d52:	e00a      	b.n	8001d6a <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8001d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <led_on_led_ctrl+0x12a>
 8001d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 8001d6a:	7f3b      	ldrb	r3, [r7, #28]
 8001d6c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001d70:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc6b 	bl	8001650 <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 8001d7a:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001d7e:	4e20      	ldr	r6, [pc, #128]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001d80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001d84:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d88:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d90:	89db      	ldrh	r3, [r3, #14]
 8001d92:	4821      	ldr	r0, [pc, #132]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001d94:	fba0 0303 	umull	r0, r3, r0, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001da0:	89db      	ldrh	r3, [r3, #14]
 8001da2:	481d      	ldr	r0, [pc, #116]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001da4:	fba0 5003 	umull	r5, r0, r0, r3
 8001da8:	0940      	lsrs	r0, r0, #5
 8001daa:	2564      	movs	r5, #100	@ 0x64
 8001dac:	fb05 f000 	mul.w	r0, r5, r0
 8001db0:	1a1b      	subs	r3, r3, r0
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461d      	mov	r5, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001db8:	7b5b      	ldrb	r3, [r3, #13]
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dc6:	6800      	ldr	r0, [r0, #0]
 8001dc8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001dca:	9009      	str	r0, [sp, #36]	@ 0x24
 8001dcc:	9308      	str	r3, [sp, #32]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	9007      	str	r0, [sp, #28]
 8001dd2:	9506      	str	r5, [sp, #24]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	9005      	str	r0, [sp, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	9103      	str	r1, [sp, #12]
 8001dde:	9202      	str	r2, [sp, #8]
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <led_on_led_ctrl+0x1e0>)
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <led_on_led_ctrl+0x1e4>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4633      	mov	r3, r6
 8001dea:	4622      	mov	r2, r4
 8001dec:	2102      	movs	r1, #2
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 f8ee 	bl	8001fd0 <log_event_auto>
 8001df4:	e000      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
        return;
 8001df6:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
 8001df8:	3734      	adds	r7, #52	@ 0x34
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800ef4c 	.word	0x0800ef4c
 8001e04:	0800f024 	.word	0x0800f024
 8001e08:	0800f040 	.word	0x0800f040
 8001e0c:	0800f044 	.word	0x0800f044
 8001e10:	0800f068 	.word	0x0800f068
 8001e14:	20000000 	.word	0x20000000
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	2000100c 	.word	0x2000100c
 8001e20:	0800f070 	.word	0x0800f070
 8001e24:	0800f0c0 	.word	0x0800f0c0

08001e28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e40:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001e48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e50:	e000      	b.n	8001e54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f9      	beq.n	8001e52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e5e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <log_service_init>:
#include <stdarg.h>
#include <string.h>
#include "usart.h"
#include "stm32l4xx.h"  // ITM_SendChar/CoreDebug/DBGMCU/TPI

void log_service_init(void){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <log_service_init+0x18>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6898      	ldr	r0, [r3, #8]
 8001e82:	2300      	movs	r3, #0
 8001e84:	2202      	movs	r2, #2
 8001e86:	2100      	movs	r1, #0
 8001e88:	f00b ffe8 	bl	800de5c <setvbuf>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	2000002c 	.word	0x2000002c

08001e94 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	603a      	str	r2, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 8001ea4:	79f9      	ldrb	r1, [r7, #7]
 8001ea6:	79ba      	ldrb	r2, [r7, #6]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <log_event_ids+0x24>)
 8001eac:	f00b ffc4 	bl	800de38 <iprintf>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0800f0c8 	.word	0x0800f0c8

08001ebc <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <log_event_names+0x16>
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <log_event_names+0x40>)
 8001ed0:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <log_event_names+0x20>
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <log_event_names+0x40>)
 8001eda:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <log_event_names+0x2a>
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <log_event_names+0x40>)
 8001ee4:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <log_event_names+0x44>)
 8001eee:	f00b ffa3 	bl	800de38 <iprintf>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0800f0e8 	.word	0x0800f0e8
 8001f00:	0800f0ec 	.word	0x0800f0ec

08001f04 <log_swo_enabled>:

// Verifica em tempo de execução se o SWO/ITM está habilitado (porta 0).
static inline int log_swo_enabled(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <log_swo_enabled+0x4c>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d017      	beq.n	8001f44 <log_swo_enabled+0x40>
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <log_swo_enabled+0x50>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0320 	and.w	r3, r3, #32
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d011      	beq.n	8001f44 <log_swo_enabled+0x40>
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8001f20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f24:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001f28:	f003 0301 	and.w	r3, r3, #1
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <log_swo_enabled+0x40>
            (ITM->TER & (1UL << 0)));
 8001f30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f34:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001f38:	f003 0301 	and.w	r3, r3, #1
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <log_swo_enabled+0x40>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <log_swo_enabled+0x42>
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000edf0 	.word	0xe000edf0
 8001f54:	e0042000 	.word	0xe0042000

08001f58 <_write>:

// Retarget de printf: usa SWO quando disponível; senão, USART1.
int _write(int fd, char *ptr, int len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
    if (fd != 1 && fd != 2)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d005      	beq.n	8001f76 <_write+0x1e>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d002      	beq.n	8001f76 <_write+0x1e>
        return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	e026      	b.n	8001fc4 <_write+0x6c>

    if (log_swo_enabled()) {
 8001f76:	f7ff ffc5 	bl	8001f04 <log_swo_enabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d012      	beq.n	8001fa6 <_write+0x4e>
        for (int i = 0; i < len; ++i) {
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e009      	b.n	8001f9a <_write+0x42>
            ITM_SendChar((uint32_t)ptr[i]);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff4a 	bl	8001e28 <ITM_SendChar>
        for (int i = 0; i < len; ++i) {
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3301      	adds	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	dbf1      	blt.n	8001f86 <_write+0x2e>
        }
        return len;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	e00e      	b.n	8001fc4 <_write+0x6c>
    }

    // Fallback: UART1 síncrona
    if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, HAL_MAX_DELAY) == HAL_OK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	4806      	ldr	r0, [pc, #24]	@ (8001fcc <_write+0x74>)
 8001fb2:	f00a fee3 	bl	800cd7c <HAL_UART_Transmit>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <_write+0x68>
        return len;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	e001      	b.n	8001fc4 <_write+0x6c>
    return -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20001058 	.word	0x20001058

08001fd0 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0a8      	sub	sp, #160	@ 0xa0
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60ba      	str	r2, [r7, #8]
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 8001fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d010      	beq.n	800200c <log_event_auto+0x3c>
 8001fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8001ff4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001ff8:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001ffa:	f107 0018 	add.w	r0, r7, #24
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002004:	2180      	movs	r1, #128	@ 0x80
 8002006:	f00c f84f 	bl	800e0a8 <vsniprintf>
    if(fmt && fmt[0]){
 800200a:	e003      	b.n	8002014 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 800200c:	233f      	movs	r3, #63	@ 0x3f
 800200e:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8002010:	2300      	movs	r3, #0
 8002012:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <log_event_auto+0x4e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	e000      	b.n	8002020 <log_event_auto+0x50>
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <log_event_auto+0x84>)
 8002020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8002024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <log_event_auto+0x62>
 800202c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002030:	e000      	b.n	8002034 <log_event_auto+0x64>
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <log_event_auto+0x84>)
 8002034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002040:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <log_event_auto+0x88>)
 8002046:	f00b fef7 	bl	800de38 <iprintf>
}
 800204a:	bf00      	nop
 800204c:	37a0      	adds	r7, #160	@ 0xa0
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	0800f0e8 	.word	0x0800f0e8
 8002058:	0800f0ec 	.word	0x0800f0ec

0800205c <gpio_bsrr_set>:
    { GPIOB, GPIO_PIN_1, GPIOA, GPIO_PIN_2, GPIOD, GPIO_PIN_14,
      MOTION_ENCODER_TYPE_TIM, &htim5, NULL, 32u },
};

static inline void gpio_bsrr_set(GPIO_TypeDef *port, uint16_t pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <gpio_bsrr_set+0x1a>
    port->BSRR = pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
 8002074:	e000      	b.n	8002078 <gpio_bsrr_set+0x1c>
    if (!port) return;
 8002076:	bf00      	nop
}
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <gpio_bsrr_reset>:
static inline void gpio_bsrr_reset(GPIO_TypeDef *port, uint16_t pin)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d004      	beq.n	800209e <gpio_bsrr_reset+0x1c>
    port->BSRR = ((uint32_t)pin) << 16u;
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
 800209c:	e000      	b.n	80020a0 <gpio_bsrr_reset+0x1e>
    if (!port) return;
 800209e:	bf00      	nop
}
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <motion_hw_init>:

void motion_hw_init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
    // Garante STEP baixo e drivers desabilitados
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 80020b2:	2300      	movs	r3, #0
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	e02b      	b.n	8002110 <motion_hw_init+0x64>
        gpio_bsrr_reset(g_axis[i].step_port, g_axis[i].step_pin);
 80020b8:	79fa      	ldrb	r2, [r7, #7]
 80020ba:	493d      	ldr	r1, [pc, #244]	@ (80021b0 <motion_hw_init+0x104>)
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	4939      	ldr	r1, [pc, #228]	@ (80021b0 <motion_hw_init+0x104>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3304      	adds	r3, #4
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	f7ff ffd1 	bl	8002082 <gpio_bsrr_reset>
        // Enable ativo em baixo: mantém alto (desabilitado)
        gpio_bsrr_set(g_axis[i].ena_port, g_axis[i].ena_pin);
 80020e0:	79fa      	ldrb	r2, [r7, #7]
 80020e2:	4933      	ldr	r1, [pc, #204]	@ (80021b0 <motion_hw_init+0x104>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3310      	adds	r3, #16
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	79fa      	ldrb	r2, [r7, #7]
 80020f4:	492e      	ldr	r1, [pc, #184]	@ (80021b0 <motion_hw_init+0x104>)
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3314      	adds	r3, #20
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f7ff ffa9 	bl	800205c <gpio_bsrr_set>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	3301      	adds	r3, #1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d9d0      	bls.n	80020b8 <motion_hw_init+0xc>
    }

    // Zera contadores e inicia encoders conforme o tipo de periférico
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002116:	2300      	movs	r3, #0
 8002118:	71bb      	strb	r3, [r7, #6]
 800211a:	e034      	b.n	8002186 <motion_hw_init+0xda>
        const motion_axis_hw_t *axis = &g_axis[i];
 800211c:	79ba      	ldrb	r2, [r7, #6]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <motion_hw_init+0x104>)
 8002128:	4413      	add	r3, r2
 800212a:	603b      	str	r3, [r7, #0]
        if (axis->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	7d9b      	ldrb	r3, [r3, #22]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d110      	bne.n	8002156 <motion_hw_init+0xaa>
            __HAL_TIM_SET_COUNTER(axis->tim, 0u);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24
            if (HAL_TIM_Encoder_Start(axis->tim, TIM_CHANNEL_ALL) != HAL_OK) {
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	213c      	movs	r1, #60	@ 0x3c
 8002144:	4618      	mov	r0, r3
 8002146:	f008 fda3 	bl	800ac90 <HAL_TIM_Encoder_Start>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d017      	beq.n	8002180 <motion_hw_init+0xd4>
                Error_Handler();
 8002150:	f002 fbb4 	bl	80048bc <Error_Handler>
 8002154:	e014      	b.n	8002180 <motion_hw_init+0xd4>
            }
        } else if (axis->encoder_type == MOTION_ENCODER_TYPE_LPTIM) {
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	7d9b      	ldrb	r3, [r3, #22]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d110      	bne.n	8002180 <motion_hw_init+0xd4>
            (void)HAL_LPTIM_Encoder_Stop(axis->lptim);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4618      	mov	r0, r3
 8002164:	f004 fc24 	bl	80069b0 <HAL_LPTIM_Encoder_Stop>
            if (HAL_LPTIM_Encoder_Start(axis->lptim, LPTIM_ENCODER_PERIOD) != HAL_OK) {
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fb93 	bl	800689c <HAL_LPTIM_Encoder_Start>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <motion_hw_init+0xd4>
                Error_Handler();
 800217c:	f002 fb9e 	bl	80048bc <Error_Handler>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	3301      	adds	r3, #1
 8002184:	71bb      	strb	r3, [r7, #6]
 8002186:	79bb      	ldrb	r3, [r7, #6]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d9c7      	bls.n	800211c <motion_hw_init+0x70>
#endif
        }
    }

    // Mantém os EN dos eixos Y (1) e Z (2) ativados (nível baixo) conforme solicitado
    gpio_bsrr_reset(g_axis[1].ena_port, g_axis[1].ena_pin);
 800218c:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <motion_hw_init+0x108>)
 800218e:	2220      	movs	r2, #32
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff75 	bl	8002082 <gpio_bsrr_reset>
    gpio_bsrr_reset(g_axis[2].ena_port, g_axis[2].ena_pin);
 8002198:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <motion_hw_init+0x10c>)
 800219a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff6e 	bl	8002082 <gpio_bsrr_reset>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	0800f594 	.word	0x0800f594
 80021b4:	48000800 	.word	0x48000800
 80021b8:	48000c00 	.word	0x48000c00

080021bc <motion_hw_set_dir>:

void motion_hw_set_dir(uint8_t axis, uint8_t dir)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d82e      	bhi.n	8002230 <motion_hw_set_dir+0x74>
    if (dir) gpio_bsrr_set(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <motion_hw_set_dir+0x48>
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	4917      	ldr	r1, [pc, #92]	@ (8002238 <motion_hw_set_dir+0x7c>)
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3308      	adds	r3, #8
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	79fa      	ldrb	r2, [r7, #7]
 80021ec:	4912      	ldr	r1, [pc, #72]	@ (8002238 <motion_hw_set_dir+0x7c>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	330c      	adds	r3, #12
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7ff ff2d 	bl	800205c <gpio_bsrr_set>
 8002202:	e016      	b.n	8002232 <motion_hw_set_dir+0x76>
    else     gpio_bsrr_reset(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 8002204:	79fa      	ldrb	r2, [r7, #7]
 8002206:	490c      	ldr	r1, [pc, #48]	@ (8002238 <motion_hw_set_dir+0x7c>)
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3308      	adds	r3, #8
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	79fa      	ldrb	r2, [r7, #7]
 8002218:	4907      	ldr	r1, [pc, #28]	@ (8002238 <motion_hw_set_dir+0x7c>)
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	330c      	adds	r3, #12
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f7ff ff2a 	bl	8002082 <gpio_bsrr_reset>
 800222e:	e000      	b.n	8002232 <motion_hw_set_dir+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 8002230:	bf00      	nop
}
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0800f594 	.word	0x0800f594

0800223c <motion_hw_enable>:

void motion_hw_enable(uint8_t axis, uint8_t enable)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	460a      	mov	r2, r1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	4613      	mov	r3, r2
 800224a:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d82e      	bhi.n	80022b0 <motion_hw_enable+0x74>
    // Enable ativo em baixo: enable=1 -> força baixo
    if (enable) gpio_bsrr_reset(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 8002252:	79bb      	ldrb	r3, [r7, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <motion_hw_enable+0x48>
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	4917      	ldr	r1, [pc, #92]	@ (80022b8 <motion_hw_enable+0x7c>)
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3310      	adds	r3, #16
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	79fa      	ldrb	r2, [r7, #7]
 800226c:	4912      	ldr	r1, [pc, #72]	@ (80022b8 <motion_hw_enable+0x7c>)
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	3314      	adds	r3, #20
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f7ff ff00 	bl	8002082 <gpio_bsrr_reset>
 8002282:	e016      	b.n	80022b2 <motion_hw_enable+0x76>
    else        gpio_bsrr_set(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 8002284:	79fa      	ldrb	r2, [r7, #7]
 8002286:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <motion_hw_enable+0x7c>)
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3310      	adds	r3, #16
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4907      	ldr	r1, [pc, #28]	@ (80022b8 <motion_hw_enable+0x7c>)
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3314      	adds	r3, #20
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7ff fed7 	bl	800205c <gpio_bsrr_set>
 80022ae:	e000      	b.n	80022b2 <motion_hw_enable+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 80022b0:	bf00      	nop
}
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	0800f594 	.word	0x0800f594

080022bc <motion_hw_step_high>:

void motion_hw_step_high(uint8_t axis)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d814      	bhi.n	80022f6 <motion_hw_step_high+0x3a>
    gpio_bsrr_set(g_axis[axis].step_port, g_axis[axis].step_pin);
 80022cc:	79fa      	ldrb	r2, [r7, #7]
 80022ce:	490c      	ldr	r1, [pc, #48]	@ (8002300 <motion_hw_step_high+0x44>)
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	79fa      	ldrb	r2, [r7, #7]
 80022de:	4908      	ldr	r1, [pc, #32]	@ (8002300 <motion_hw_step_high+0x44>)
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3304      	adds	r3, #4
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7ff feb4 	bl	800205c <gpio_bsrr_set>
 80022f4:	e000      	b.n	80022f8 <motion_hw_step_high+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 80022f6:	bf00      	nop
}
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800f594 	.word	0x0800f594

08002304 <motion_hw_step_low>:
void motion_hw_step_low(uint8_t axis)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d814      	bhi.n	800233e <motion_hw_step_low+0x3a>
    gpio_bsrr_reset(g_axis[axis].step_port, g_axis[axis].step_pin);
 8002314:	79fa      	ldrb	r2, [r7, #7]
 8002316:	490c      	ldr	r1, [pc, #48]	@ (8002348 <motion_hw_step_low+0x44>)
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	4908      	ldr	r1, [pc, #32]	@ (8002348 <motion_hw_step_low+0x44>)
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3304      	adds	r3, #4
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	f7ff fea3 	bl	8002082 <gpio_bsrr_reset>
 800233c:	e000      	b.n	8002340 <motion_hw_step_low+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 800233e:	bf00      	nop
}
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	0800f594 	.word	0x0800f594

0800234c <motion_hw_encoder_read_raw>:

uint32_t motion_hw_encoder_read_raw(uint8_t axis)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0;
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <motion_hw_encoder_read_raw+0x14>
 800235c:	2300      	movs	r3, #0
 800235e:	e015      	b.n	800238c <motion_hw_encoder_read_raw+0x40>
    const motion_axis_hw_t *hw = &g_axis[axis];
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4a0b      	ldr	r2, [pc, #44]	@ (8002398 <motion_hw_encoder_read_raw+0x4c>)
 800236c:	4413      	add	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    if (hw->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	7d9b      	ldrb	r3, [r3, #22]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <motion_hw_encoder_read_raw+0x36>
        return (uint32_t)__HAL_TIM_GET_COUNTER(hw->tim);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	e004      	b.n	800238c <motion_hw_encoder_read_raw+0x40>
    } else {
        return (uint32_t)(hw->lptim->Instance->CNT & 0xFFFFu);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	b29b      	uxth	r3, r3
    }
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	0800f594 	.word	0x0800f594

0800239c <motion_hw_encoder_bits>:

uint8_t motion_hw_encoder_bits(uint8_t axis)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0u;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <motion_hw_encoder_bits+0x14>
 80023ac:	2300      	movs	r3, #0
 80023ae:	e008      	b.n	80023c2 <motion_hw_encoder_bits+0x26>
    return g_axis[axis].counter_bits;
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <motion_hw_encoder_bits+0x34>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3320      	adds	r3, #32
 80023c0:	781b      	ldrb	r3, [r3, #0]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	0800f594 	.word	0x0800f594

080023d4 <motion_lock>:
static volatile uint8_t g_demo_speed_idx = 1u; /* default ≈10k steps/s */

/* =======================
 *  Helpers de lock
 * ======================= */
static inline uint32_t motion_lock(void) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023da:	f3ef 8310 	mrs	r3, PRIMASK
 80023de:	603b      	str	r3, [r7, #0]
  return(result);
 80023e0:	683b      	ldr	r3, [r7, #0]
    uint32_t primask = __get_PRIMASK();
 80023e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80023e4:	b672      	cpsid	i
}
 80023e6:	bf00      	nop
    __disable_irq();
    return primask;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <motion_unlock>:
static inline void motion_unlock(uint32_t primask) {
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f383 8810 	msr	PRIMASK, r3
}
 8002408:	bf00      	nop
    __set_PRIMASK(primask);
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <motion_total_for_axis>:

/* =======================
 *  Helpers de acesso por eixo
 * ======================= */
static inline uint32_t motion_total_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <motion_total_for_axis+0x18>
 8002428:	2b01      	cmp	r3, #1
 800242a:	d003      	beq.n	8002434 <motion_total_for_axis+0x1e>
 800242c:	e005      	b.n	800243a <motion_total_for_axis+0x24>
        case AXIS_X: return req->sx;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	e004      	b.n	800243e <motion_total_for_axis+0x28>
        case AXIS_Y: return req->sy;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	e001      	b.n	800243e <motion_total_for_axis+0x28>
        case AXIS_Z:
        default:     return req->sz;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
    }
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <motion_velocity_for_axis>:
static inline uint16_t motion_velocity_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <motion_velocity_for_axis+0x18>
 800245c:	2b01      	cmp	r3, #1
 800245e:	d003      	beq.n	8002468 <motion_velocity_for_axis+0x1e>
 8002460:	e005      	b.n	800246e <motion_velocity_for_axis+0x24>
        case AXIS_X: return req->vx;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	885b      	ldrh	r3, [r3, #2]
 8002466:	e004      	b.n	8002472 <motion_velocity_for_axis+0x28>
        case AXIS_Y: return req->vy;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	891b      	ldrh	r3, [r3, #8]
 800246c:	e001      	b.n	8002472 <motion_velocity_for_axis+0x28>
        case AXIS_Z:
        default:     return req->vz;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8a1b      	ldrh	r3, [r3, #16]
    }
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <motion_kp_for_axis>:
static inline uint16_t motion_kp_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <motion_kp_for_axis+0x18>
 8002490:	2b01      	cmp	r3, #1
 8002492:	d003      	beq.n	800249c <motion_kp_for_axis+0x1e>
 8002494:	e005      	b.n	80024a2 <motion_kp_for_axis+0x24>
        case AXIS_X: return req->kp_x;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8b1b      	ldrh	r3, [r3, #24]
 800249a:	e004      	b.n	80024a6 <motion_kp_for_axis+0x28>
        case AXIS_Y: return req->kp_y;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8bdb      	ldrh	r3, [r3, #30]
 80024a0:	e001      	b.n	80024a6 <motion_kp_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kp_z;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <motion_ki_for_axis>:
static inline uint16_t motion_ki_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <motion_ki_for_axis+0x18>
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d003      	beq.n	80024d0 <motion_ki_for_axis+0x1e>
 80024c8:	e005      	b.n	80024d6 <motion_ki_for_axis+0x24>
        case AXIS_X: return req->ki_x;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	8b5b      	ldrh	r3, [r3, #26]
 80024ce:	e004      	b.n	80024da <motion_ki_for_axis+0x28>
        case AXIS_Y: return req->ki_y;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8c1b      	ldrh	r3, [r3, #32]
 80024d4:	e001      	b.n	80024da <motion_ki_for_axis+0x28>
        case AXIS_Z:
        default:     return req->ki_z;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
    }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <motion_kd_for_axis>:
static inline uint16_t motion_kd_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <motion_kd_for_axis+0x18>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d003      	beq.n	8002504 <motion_kd_for_axis+0x1e>
 80024fc:	e005      	b.n	800250a <motion_kd_for_axis+0x24>
        case AXIS_X: return req->kd_x;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8b9b      	ldrh	r3, [r3, #28]
 8002502:	e004      	b.n	800250e <motion_kd_for_axis+0x28>
        case AXIS_Y: return req->kd_y;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002508:	e001      	b.n	800250e <motion_kd_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kd_z;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    }
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <motion_clamp_error>:
static inline int8_t motion_clamp_error(int32_t value) {
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
    if (value > 127)  return 127;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b7f      	cmp	r3, #127	@ 0x7f
 8002526:	dd01      	ble.n	800252c <motion_clamp_error+0x12>
 8002528:	237f      	movs	r3, #127	@ 0x7f
 800252a:	e008      	b.n	800253e <motion_clamp_error+0x24>
    if (value < -128) return -128;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002532:	da02      	bge.n	800253a <motion_clamp_error+0x20>
 8002534:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8002538:	e001      	b.n	800253e <motion_clamp_error+0x24>
    return (int8_t)value;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	b25b      	sxtb	r3, r3
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <motion_refresh_status_locked>:

/* =======================
 *  Status e fila
 * ======================= */
static void motion_refresh_status_locked(void) {
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	b0a3      	sub	sp, #140	@ 0x8c
 8002552:	af00      	add	r7, sp, #0
    g_status.queue_depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 8002554:	4b9a      	ldr	r3, [pc, #616]	@ (80027c0 <motion_refresh_status_locked+0x274>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <motion_refresh_status_locked+0x16>
 800255e:	2201      	movs	r2, #1
 8002560:	e000      	b.n	8002564 <motion_refresh_status_locked+0x18>
 8002562:	2200      	movs	r2, #0
 8002564:	4b97      	ldr	r3, [pc, #604]	@ (80027c4 <motion_refresh_status_locked+0x278>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4413      	add	r3, r2
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4a96      	ldr	r2, [pc, #600]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 800256e:	7053      	strb	r3, [r2, #1]

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002576:	e118      	b.n	80027aa <motion_refresh_status_locked+0x25e>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 8002578:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4a91      	ldr	r2, [pc, #580]	@ (80027cc <motion_refresh_status_locked+0x280>)
 8002586:	4413      	add	r3, r2
 8002588:	677b      	str	r3, [r7, #116]	@ 0x74
        uint32_t total = ax->total_steps;
 800258a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	673b      	str	r3, [r7, #112]	@ 0x70
        uint32_t emitted = ax->emitted_steps;
 8002590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	66fb      	str	r3, [r7, #108]	@ 0x6c
        uint8_t pct = 0u;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

        if (g_has_active_segment && total > 0u) {
 800259c:	4b88      	ldr	r3, [pc, #544]	@ (80027c0 <motion_refresh_status_locked+0x274>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d049      	beq.n	800263a <motion_refresh_status_locked+0xee>
 80025a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d046      	beq.n	800263a <motion_refresh_status_locked+0xee>
            uint64_t scaled = (uint64_t)emitted * 100u;
 80025ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ae:	2200      	movs	r2, #0
 80025b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025b8:	1891      	adds	r1, r2, r2
 80025ba:	6239      	str	r1, [r7, #32]
 80025bc:	415b      	adcs	r3, r3
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025c4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025c6:	eb12 0801 	adds.w	r8, r2, r1
 80025ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80025cc:	eb43 0901 	adc.w	r9, r3, r1
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80025dc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80025e0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80025e4:	eb18 0102 	adds.w	r1, r8, r2
 80025e8:	6439      	str	r1, [r7, #64]	@ 0x40
 80025ea:	eb49 0303 	adc.w	r3, r9, r3
 80025ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80025f6:	4602      	mov	r2, r0
 80025f8:	189b      	adds	r3, r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025fe:	460a      	mov	r2, r1
 8002600:	4153      	adcs	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002608:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
            pct = (uint8_t)(scaled / total);
 800260c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800260e:	2200      	movs	r2, #0
 8002610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002612:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002618:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800261c:	f7fd fe28 	bl	8000270 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
            if (pct > 100u) pct = 100u;
 800262a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800262e:	2b64      	cmp	r3, #100	@ 0x64
 8002630:	d954      	bls.n	80026dc <motion_refresh_status_locked+0x190>
 8002632:	2364      	movs	r3, #100	@ 0x64
 8002634:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
        if (g_has_active_segment && total > 0u) {
 8002638:	e050      	b.n	80026dc <motion_refresh_status_locked+0x190>
        } else if (total == 0u && g_has_active_segment) {
 800263a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800263c:	2b00      	cmp	r3, #0
 800263e:	d108      	bne.n	8002652 <motion_refresh_status_locked+0x106>
 8002640:	4b5f      	ldr	r3, [pc, #380]	@ (80027c0 <motion_refresh_status_locked+0x274>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <motion_refresh_status_locked+0x106>
            pct = 100u;
 800264a:	2364      	movs	r3, #100	@ 0x64
 800264c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002650:	e045      	b.n	80026de <motion_refresh_status_locked+0x192>
        } else if (!g_has_active_segment && total > 0u) {
 8002652:	4b5b      	ldr	r3, [pc, #364]	@ (80027c0 <motion_refresh_status_locked+0x274>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d140      	bne.n	80026de <motion_refresh_status_locked+0x192>
 800265c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800265e:	2b00      	cmp	r3, #0
 8002660:	d03d      	beq.n	80026de <motion_refresh_status_locked+0x192>
            pct = (emitted >= total) ? 100u : (uint8_t)(((uint64_t)emitted * 100u) / total);
 8002662:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002666:	429a      	cmp	r2, r3
 8002668:	d234      	bcs.n	80026d4 <motion_refresh_status_locked+0x188>
 800266a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800266c:	2200      	movs	r2, #0
 800266e:	469a      	mov	sl, r3
 8002670:	4693      	mov	fp, r2
 8002672:	4652      	mov	r2, sl
 8002674:	465b      	mov	r3, fp
 8002676:	1891      	adds	r1, r2, r2
 8002678:	6139      	str	r1, [r7, #16]
 800267a:	415b      	adcs	r3, r3
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002682:	eb12 040a 	adds.w	r4, r2, sl
 8002686:	eb43 050b 	adc.w	r5, r3, fp
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	016b      	lsls	r3, r5, #5
 8002694:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002698:	0162      	lsls	r2, r4, #5
 800269a:	18a1      	adds	r1, r4, r2
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	eb45 0303 	adc.w	r3, r5, r3
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80026a8:	460b      	mov	r3, r1
 80026aa:	eb13 030a 	adds.w	r3, r3, sl
 80026ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80026b0:	4613      	mov	r3, r2
 80026b2:	eb43 030b 	adc.w	r3, r3, fp
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026ba:	2200      	movs	r2, #0
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80026c8:	f7fd fdd2 	bl	8000270 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	b2d3      	uxtb	r3, r2
 80026d2:	e000      	b.n	80026d6 <motion_refresh_status_locked+0x18a>
 80026d4:	2364      	movs	r3, #100	@ 0x64
 80026d6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80026da:	e000      	b.n	80026de <motion_refresh_status_locked+0x192>
        if (g_has_active_segment && total > 0u) {
 80026dc:	bf00      	nop
        }

        int64_t actual_counts = g_encoder_position[axis] - g_encoder_origin[axis];
 80026de:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026e2:	4a3b      	ldr	r2, [pc, #236]	@ (80027d0 <motion_refresh_status_locked+0x284>)
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026f0:	4a38      	ldr	r2, [pc, #224]	@ (80027d4 <motion_refresh_status_locked+0x288>)
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	1a86      	subs	r6, r0, r2
 80026fc:	603e      	str	r6, [r7, #0]
 80026fe:	eb61 0303 	sbc.w	r3, r1, r3
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002708:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        if (actual_counts > (int64_t)INT32_MAX) actual_counts = INT32_MAX;
 800270c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002710:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002714:	f173 0300 	sbcs.w	r3, r3, #0
 8002718:	db06      	blt.n	8002728 <motion_refresh_status_locked+0x1dc>
 800271a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 8002726:	e00c      	b.n	8002742 <motion_refresh_status_locked+0x1f6>
        else if (actual_counts < (int64_t)INT32_MIN) actual_counts = INT32_MIN;
 8002728:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800272c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002730:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002734:	da05      	bge.n	8002742 <motion_refresh_status_locked+0x1f6>
 8002736:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

        int32_t desired_counts = (int32_t)ax->target_steps;
 8002742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	65fb      	str	r3, [r7, #92]	@ 0x5c
        int32_t err = desired_counts - (int32_t)actual_counts;
 8002748:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800274a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	65bb      	str	r3, [r7, #88]	@ 0x58
        int8_t  err8 = motion_clamp_error(err);
 8002750:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002752:	f7ff fee2 	bl	800251a <motion_clamp_error>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        switch (axis) {
 800275c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <motion_refresh_status_locked+0x21e>
 8002764:	2b01      	cmp	r3, #1
 8002766:	d009      	beq.n	800277c <motion_refresh_status_locked+0x230>
 8002768:	e011      	b.n	800278e <motion_refresh_status_locked+0x242>
            case AXIS_X: g_status.pctX = pct; g_status.pidErrX = err8; break;
 800276a:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 800276c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002770:	7093      	strb	r3, [r2, #2]
 8002772:	4a15      	ldr	r2, [pc, #84]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 8002774:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002778:	7153      	strb	r3, [r2, #5]
 800277a:	e011      	b.n	80027a0 <motion_refresh_status_locked+0x254>
            case AXIS_Y: g_status.pctY = pct; g_status.pidErrY = err8; break;
 800277c:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 800277e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002782:	70d3      	strb	r3, [r2, #3]
 8002784:	4a10      	ldr	r2, [pc, #64]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 8002786:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800278a:	7193      	strb	r3, [r2, #6]
 800278c:	e008      	b.n	80027a0 <motion_refresh_status_locked+0x254>
            case AXIS_Z:
            default:     g_status.pctZ = pct; g_status.pidErrZ = err8; break;
 800278e:	4a0e      	ldr	r2, [pc, #56]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 8002790:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002794:	7113      	strb	r3, [r2, #4]
 8002796:	4a0c      	ldr	r2, [pc, #48]	@ (80027c8 <motion_refresh_status_locked+0x27c>)
 8002798:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800279c:	71d3      	strb	r3, [r2, #7]
 800279e:	bf00      	nop
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80027a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80027a4:	3301      	adds	r3, #1
 80027a6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80027aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f67f aee2 	bls.w	8002578 <motion_refresh_status_locked+0x2c>
        }
    }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	378c      	adds	r7, #140	@ 0x8c
 80027ba:	46bd      	mov	sp, r7
 80027bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c0:	2000015c 	.word	0x2000015c
 80027c4:	20000c62 	.word	0x20000c62
 80027c8:	200000c4 	.word	0x200000c4
 80027cc:	200000cc 	.word	0x200000cc
 80027d0:	20000c68 	.word	0x20000c68
 80027d4:	20000c90 	.word	0x20000c90

080027d8 <motion_stop_all_axes_locked>:

static void motion_stop_all_axes_locked(void) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80027de:	2300      	movs	r3, #0
 80027e0:	71fb      	strb	r3, [r7, #7]
 80027e2:	e045      	b.n	8002870 <motion_stop_all_axes_locked+0x98>
        motion_hw_step_low(axis);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fd8c 	bl	8002304 <motion_hw_step_low>
        motion_hw_enable(axis, 0u);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fd23 	bl	800223c <motion_hw_enable>

        motion_axis_state_t *ax = &g_axis_state[axis];
 80027f6:	79fa      	ldrb	r2, [r7, #7]
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <motion_stop_all_axes_locked+0xa8>)
 8002802:	4413      	add	r3, r2
 8002804:	603b      	str	r3, [r7, #0]
        ax->total_steps       = 0u;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = 0u;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	819a      	strh	r2, [r3, #12]
        ax->kp = 0u; ax->ki = 0u; ax->kd = 0u;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	81da      	strh	r2, [r3, #14]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	821a      	strh	r2, [r3, #16]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2200      	movs	r2, #0
 800282e:	825a      	strh	r2, [r3, #18]

        /* limpa controle de pulso/guardas */
        ax->step_high         = 0u;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = 0u;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ax->dir_settle_ticks  = 0u;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* limpa DDA/rampa */
        ax->dda_accum_q16     = 0u;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = 0u;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	621a      	str	r2, [r3, #32]
        ax->v_actual_sps      = 0u;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	625a      	str	r2, [r3, #36]	@ 0x24
        ax->accel_sps2        = 0u;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	629a      	str	r2, [r3, #40]	@ 0x28
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	3301      	adds	r3, #1
 800286e:	71fb      	strb	r3, [r7, #7]
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d9b6      	bls.n	80027e4 <motion_stop_all_axes_locked+0xc>
    }
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200000cc 	.word	0x200000cc

08002884 <motion_queue_clear_locked>:

static void motion_queue_clear_locked(void) {
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
    g_queue_head = 0u;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <motion_queue_clear_locked+0x20>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    g_queue_tail = 0u;
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <motion_queue_clear_locked+0x24>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
    g_queue_count = 0u;
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <motion_queue_clear_locked+0x28>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	20000c60 	.word	0x20000c60
 80028a8:	20000c61 	.word	0x20000c61
 80028ac:	20000c62 	.word	0x20000c62

080028b0 <motion_queue_push_locked>:

static proto_result_t motion_queue_push_locked(const move_queue_add_req_t *req) {
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
    if (g_queue_count >= MOTION_QUEUE_CAPACITY)
 80028b8:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <motion_queue_push_locked+0x68>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80028be:	d902      	bls.n	80028c6 <motion_queue_push_locked+0x16>
        return PROTO_ERR_RANGE;
 80028c0:	f06f 0303 	mvn.w	r3, #3
 80028c4:	e024      	b.n	8002910 <motion_queue_push_locked+0x60>
    g_queue[g_queue_tail].req = *req;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <motion_queue_push_locked+0x6c>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <motion_queue_push_locked+0x70>)
 80028ce:	232c      	movs	r3, #44	@ 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	441a      	add	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4614      	mov	r4, r2
 80028da:	461d      	mov	r5, r3
 80028dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_tail = (uint8_t)((g_queue_tail + 1u) % MOTION_QUEUE_CAPACITY);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <motion_queue_push_locked+0x6c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <motion_queue_push_locked+0x6c>)
 80028fc:	701a      	strb	r2, [r3, #0]
    ++g_queue_count;
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <motion_queue_push_locked+0x68>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <motion_queue_push_locked+0x68>)
 8002908:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 800290a:	f7ff fe1f 	bl	800254c <motion_refresh_status_locked>
    return PROTO_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bdb0      	pop	{r4, r5, r7, pc}
 8002918:	20000c62 	.word	0x20000c62
 800291c:	20000c61 	.word	0x20000c61
 8002920:	20000160 	.word	0x20000160

08002924 <motion_queue_pop_locked>:

static int motion_queue_pop_locked(move_queue_add_req_t *out) {
 8002924:	b4b0      	push	{r4, r5, r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
    if (g_queue_count == 0u) return 0;
 800292c:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <motion_queue_pop_locked+0x6c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <motion_queue_pop_locked+0x14>
 8002934:	2300      	movs	r3, #0
 8002936:	e025      	b.n	8002984 <motion_queue_pop_locked+0x60>
    if (out) *out = g_queue[g_queue_head].req;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d012      	beq.n	8002964 <motion_queue_pop_locked+0x40>
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <motion_queue_pop_locked+0x70>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <motion_queue_pop_locked+0x74>)
 8002948:	232c      	movs	r3, #44	@ 0x2c
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	4413      	add	r3, r2
 8002950:	460c      	mov	r4, r1
 8002952:	461d      	mov	r5, r3
 8002954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800295a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800295c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_head = (uint8_t)((g_queue_head + 1u) % MOTION_QUEUE_CAPACITY);
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <motion_queue_pop_locked+0x70>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <motion_queue_pop_locked+0x70>)
 8002974:	701a      	strb	r2, [r3, #0]
    --g_queue_count;
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <motion_queue_pop_locked+0x6c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	3b01      	subs	r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <motion_queue_pop_locked+0x6c>)
 8002980:	701a      	strb	r2, [r3, #0]
    return 1;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bcb0      	pop	{r4, r5, r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000c62 	.word	0x20000c62
 8002994:	20000c60 	.word	0x20000c60
 8002998:	20000160 	.word	0x20000160

0800299c <motion_begin_segment_locked>:

/* =======================
 *  Início de segmento
 * ======================= */
static void motion_begin_segment_locked(const move_queue_add_req_t *seg) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    if (!seg) return;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 809d 	beq.w	8002ae6 <motion_begin_segment_locked+0x14a>

    g_has_active_segment = 1u;
 80029ac:	4b50      	ldr	r3, [pc, #320]	@ (8002af0 <motion_begin_segment_locked+0x154>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]
 80029b6:	e091      	b.n	8002adc <motion_begin_segment_locked+0x140>
        motion_axis_state_t *ax = &g_axis_state[axis];
 80029b8:	7dfa      	ldrb	r2, [r7, #23]
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4a4c      	ldr	r2, [pc, #304]	@ (8002af4 <motion_begin_segment_locked+0x158>)
 80029c4:	4413      	add	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        uint32_t total   = motion_total_for_axis(seg, axis);
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fd22 	bl	8002416 <motion_total_for_axis>
 80029d2:	60f8      	str	r0, [r7, #12]
        uint16_t velTick = motion_velocity_for_axis(seg, axis);
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fd36 	bl	800244a <motion_velocity_for_axis>
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]

        ax->total_steps       = total;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = velTick;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	897a      	ldrh	r2, [r7, #10]
 80029f8:	819a      	strh	r2, [r3, #12]
        ax->kp = motion_kp_for_axis(seg, axis);
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fd3d 	bl	800247e <motion_kp_for_axis>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	81da      	strh	r2, [r3, #14]
        ax->ki = motion_ki_for_axis(seg, axis);
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fd4e 	bl	80024b2 <motion_ki_for_axis>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	821a      	strh	r2, [r3, #16]
        ax->kd = motion_kd_for_axis(seg, axis);
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fd5f 	bl	80024e6 <motion_kd_for_axis>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	825a      	strh	r2, [r3, #18]

        /* guardas para atender DIR/ENABLE timings do TMC5160 */
        ax->step_high         = 0u;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2200      	movs	r2, #0
 8002a34:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u; /* tLOW inicia zerado; será aplicado após o 1º pulso */
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = (total > 0u) ? MOTION_ENABLE_SETTLE_TICKS : 0u;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <motion_begin_segment_locked+0xaa>
 8002a42:	2202      	movs	r2, #2
 8002a44:	e000      	b.n	8002a48 <motion_begin_segment_locked+0xac>
 8002a46:	2200      	movs	r2, #0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* zera DDA/rampa (não atrapalha caminho de fila) */
        ax->dda_accum_q16     = 0u;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = ((uint32_t)velTick) * 1000u;  /* steps/s alvo (derivado do seu campo) */
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a68:	fb03 f202 	mul.w	r2, r3, r2
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	621a      	str	r2, [r3, #32]
        ax->v_actual_sps      = 0u;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
        ax->accel_sps2        = DEMO_ACCEL_SPS2;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4a1f      	ldr	r2, [pc, #124]	@ (8002af8 <motion_begin_segment_locked+0x15c>)
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28

        motion_hw_step_low(axis);
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fc40 	bl	8002304 <motion_hw_step_low>
        motion_hw_set_dir(axis, (uint8_t)((seg->dirMask >> axis) & 0x1u));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	785b      	ldrb	r3, [r3, #1]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	fa42 f303 	asr.w	r3, r2, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fb8d 	bl	80021bc <motion_hw_set_dir>

        if (total > 0u) motion_hw_enable(axis, 1u);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <motion_begin_segment_locked+0x118>
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fbc5 	bl	800223c <motion_hw_enable>
 8002ab2:	e004      	b.n	8002abe <motion_begin_segment_locked+0x122>
        else            motion_hw_enable(axis, 0u);
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fbbf 	bl	800223c <motion_hw_enable>

        g_encoder_origin[axis] = g_encoder_position[axis];
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	7df9      	ldrb	r1, [r7, #23]
 8002ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8002afc <motion_begin_segment_locked+0x160>)
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	480c      	ldr	r0, [pc, #48]	@ (8002b00 <motion_begin_segment_locked+0x164>)
 8002ace:	00c9      	lsls	r1, r1, #3
 8002ad0:	4401      	add	r1, r0
 8002ad2:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	75fb      	strb	r3, [r7, #23]
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	f67f af6a 	bls.w	80029b8 <motion_begin_segment_locked+0x1c>
 8002ae4:	e000      	b.n	8002ae8 <motion_begin_segment_locked+0x14c>
    if (!seg) return;
 8002ae6:	bf00      	nop
    }
}
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000015c 	.word	0x2000015c
 8002af4:	200000cc 	.word	0x200000cc
 8002af8:	00030d40 	.word	0x00030d40
 8002afc:	20000c68 	.word	0x20000c68
 8002b00:	20000c90 	.word	0x20000c90

08002b04 <motion_try_start_next_locked>:

static uint8_t motion_try_start_next_locked(void) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08c      	sub	sp, #48	@ 0x30
 8002b08:	af00      	add	r7, sp, #0
    move_queue_add_req_t next;
    if (!motion_queue_pop_locked(&next))
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff09 	bl	8002924 <motion_queue_pop_locked>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <motion_try_start_next_locked+0x18>
        return 0u;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e004      	b.n	8002b26 <motion_try_start_next_locked+0x22>
    motion_begin_segment_locked(&next);
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff3c 	bl	800299c <motion_begin_segment_locked>
    return 1u;
 8002b24:	2301      	movs	r3, #1
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3730      	adds	r7, #48	@ 0x30
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <motion_update_encoders>:

/* =======================
 *  Encoders
 * ======================= */
static void motion_update_encoders(void) {
 8002b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b34:	b08b      	sub	sp, #44	@ 0x2c
 8002b36:	af02      	add	r7, sp, #8
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002b38:	2300      	movs	r3, #0
 8002b3a:	77fb      	strb	r3, [r7, #31]
 8002b3c:	e085      	b.n	8002c4a <motion_update_encoders+0x11a>
        uint32_t now = motion_hw_encoder_read_raw(axis);
 8002b3e:	7ffb      	ldrb	r3, [r7, #31]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fc03 	bl	800234c <motion_hw_encoder_read_raw>
 8002b46:	61b8      	str	r0, [r7, #24]
        uint8_t bits = motion_hw_encoder_bits(axis);
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fc26 	bl	800239c <motion_hw_encoder_bits>
 8002b50:	4603      	mov	r3, r0
 8002b52:	75fb      	strb	r3, [r7, #23]
        if (bits == 16u) {
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d13d      	bne.n	8002bd6 <motion_update_encoders+0xa6>
            uint16_t prev = (uint16_t)g_encoder_last_raw[axis];
 8002b5a:	7ffb      	ldrb	r3, [r7, #31]
 8002b5c:	4a40      	ldr	r2, [pc, #256]	@ (8002c60 <motion_update_encoders+0x130>)
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	81fb      	strh	r3, [r7, #14]
            int16_t delta = (int16_t)((uint16_t)now - prev);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	89fb      	ldrh	r3, [r7, #14]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	81bb      	strh	r3, [r7, #12]
            g_encoder_last_raw[axis] = (uint16_t)now;
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	7ffb      	ldrb	r3, [r7, #31]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4a39      	ldr	r2, [pc, #228]	@ (8002c60 <motion_update_encoders+0x130>)
 8002b7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_encoder_position[axis] += delta;
 8002b7e:	7ffb      	ldrb	r3, [r7, #31]
 8002b80:	4a38      	ldr	r2, [pc, #224]	@ (8002c64 <motion_update_encoders+0x134>)
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002b8e:	17c8      	asrs	r0, r1, #31
 8002b90:	460c      	mov	r4, r1
 8002b92:	4605      	mov	r5, r0
 8002b94:	7ff9      	ldrb	r1, [r7, #31]
 8002b96:	eb12 0a04 	adds.w	sl, r2, r4
 8002b9a:	eb43 0b05 	adc.w	fp, r3, r5
 8002b9e:	4a31      	ldr	r2, [pc, #196]	@ (8002c64 <motion_update_encoders+0x134>)
 8002ba0:	00cb      	lsls	r3, r1, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	e9c3 ab00 	strd	sl, fp, [r3]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 8002ba8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d049      	beq.n	8002c44 <motion_update_encoders+0x114>
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 8002bb0:	7ff9      	ldrb	r1, [r7, #31]
 8002bb2:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8002bb6:	7ffb      	ldrb	r3, [r7, #31]
                       (unsigned)axis,
                       (unsigned)now,
                       (int)delta,
                       (long)g_enc_abs32[axis],
 8002bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c68 <motion_update_encoders+0x138>)
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 8002bbe:	7ffa      	ldrb	r2, [r7, #31]
                       (long)g_enc_rel32[axis]);
 8002bc0:	4e2a      	ldr	r6, [pc, #168]	@ (8002c6c <motion_update_encoders+0x13c>)
 8002bc2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4603      	mov	r3, r0
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4828      	ldr	r0, [pc, #160]	@ (8002c70 <motion_update_encoders+0x140>)
 8002bd0:	f00b f932 	bl	800de38 <iprintf>
 8002bd4:	e036      	b.n	8002c44 <motion_update_encoders+0x114>
            }
#endif
        } else {
            int32_t delta = (int32_t)(now - g_encoder_last_raw[axis]);
 8002bd6:	7ffb      	ldrb	r3, [r7, #31]
 8002bd8:	4a21      	ldr	r2, [pc, #132]	@ (8002c60 <motion_update_encoders+0x130>)
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	613b      	str	r3, [r7, #16]
            g_encoder_last_raw[axis] = now;
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
 8002be6:	491e      	ldr	r1, [pc, #120]	@ (8002c60 <motion_update_encoders+0x130>)
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            g_encoder_position[axis] += delta;
 8002bee:	7ffb      	ldrb	r3, [r7, #31]
 8002bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c64 <motion_update_encoders+0x134>)
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfa:	6939      	ldr	r1, [r7, #16]
 8002bfc:	17c8      	asrs	r0, r1, #31
 8002bfe:	4688      	mov	r8, r1
 8002c00:	4681      	mov	r9, r0
 8002c02:	7ff9      	ldrb	r1, [r7, #31]
 8002c04:	eb12 0008 	adds.w	r0, r2, r8
 8002c08:	6038      	str	r0, [r7, #0]
 8002c0a:	eb43 0309 	adc.w	r3, r3, r9
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	4a14      	ldr	r2, [pc, #80]	@ (8002c64 <motion_update_encoders+0x134>)
 8002c12:	00cb      	lsls	r3, r1, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002c1a:	e9c3 1200 	strd	r1, r2, [r3]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00f      	beq.n	8002c44 <motion_update_encoders+0x114>
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 8002c24:	7ff9      	ldrb	r1, [r7, #31]
 8002c26:	7ffb      	ldrb	r3, [r7, #31]
                       (unsigned)axis,
                       (unsigned long)now,
                       (long)delta,
                       (long)g_enc_abs32[axis],
 8002c28:	4a0f      	ldr	r2, [pc, #60]	@ (8002c68 <motion_update_encoders+0x138>)
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 8002c2e:	7ffa      	ldrb	r2, [r7, #31]
                       (long)g_enc_rel32[axis]);
 8002c30:	480e      	ldr	r0, [pc, #56]	@ (8002c6c <motion_update_encoders+0x13c>)
 8002c32:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 8002c36:	9201      	str	r2, [sp, #4]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <motion_update_encoders+0x144>)
 8002c40:	f00b f8fa 	bl	800de38 <iprintf>
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
 8002c46:	3301      	adds	r3, #1
 8002c48:	77fb      	strb	r3, [r7, #31]
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	f67f af76 	bls.w	8002b3e <motion_update_encoders+0xe>
            }
#endif
        }
    }
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	3724      	adds	r7, #36	@ 0x24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000c80 	.word	0x20000c80
 8002c64:	20000c68 	.word	0x20000c68
 8002c68:	20000ca8 	.word	0x20000ca8
 8002c6c:	20000cb4 	.word	0x20000cb4
 8002c70:	0800f118 	.word	0x0800f118
 8002c74:	0800f148 	.word	0x0800f148

08002c78 <motion_send_queue_add_ack>:

/* =======================
 *  Envio de respostas
 * ======================= */
static void motion_send_queue_add_ack(uint8_t frame_id, uint8_t status) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	4603      	mov	r3, r0
 8002c80:	460a      	mov	r2, r1
 8002c82:	71fb      	strb	r3, [r7, #7]
 8002c84:	4613      	mov	r3, r2
 8002c86:	71bb      	strb	r3, [r7, #6]
    uint8_t raw[6];
    move_queue_add_ack_resp_t resp = { frame_id, status };
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	733b      	strb	r3, [r7, #12]
 8002c8c:	79bb      	ldrb	r3, [r7, #6]
 8002c8e:	737b      	strb	r3, [r7, #13]
    if (move_queue_add_ack_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8002c90:	f107 0110 	add.w	r1, r7, #16
 8002c94:	f107 030c 	add.w	r3, r7, #12
 8002c98:	2206      	movs	r2, #6
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f924 	bl	8000ee8 <move_queue_add_ack_resp_encoder>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <motion_send_queue_add_ack+0x48>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "ack", "encode_fail");
 8002ca6:	4a12      	ldr	r2, [pc, #72]	@ (8002cf0 <motion_send_queue_add_ack+0x78>)
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <motion_send_queue_add_ack+0x7c>)
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	4b12      	ldr	r3, [pc, #72]	@ (8002cf8 <motion_send_queue_add_ack+0x80>)
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	f06f 0201 	mvn.w	r2, #1
 8002cb6:	2164      	movs	r1, #100	@ 0x64
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7ff f989 	bl	8001fd0 <log_event_auto>
 8002cbe:	e014      	b.n	8002cea <motion_send_queue_add_ack+0x72>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	2106      	movs	r1, #6
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fa2a 	bl	8004120 <app_resp_push>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <motion_send_queue_add_ack+0x72>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "ack", "queue_full");
 8002cd2:	4a07      	ldr	r2, [pc, #28]	@ (8002cf0 <motion_send_queue_add_ack+0x78>)
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <motion_send_queue_add_ack+0x84>)
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	4b07      	ldr	r3, [pc, #28]	@ (8002cf8 <motion_send_queue_add_ack+0x80>)
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	f06f 0203 	mvn.w	r2, #3
 8002ce2:	2164      	movs	r1, #100	@ 0x64
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f7ff f973 	bl	8001fd0 <log_event_auto>
    }
}
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	0800f110 	.word	0x0800f110
 8002cf4:	0800f17c 	.word	0x0800f17c
 8002cf8:	0800f188 	.word	0x0800f188
 8002cfc:	0800f18c 	.word	0x0800f18c

08002d00 <motion_send_queue_status_response>:
static void motion_send_queue_status_response(uint8_t frame_id) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[12];
    move_queue_status_resp_t resp = {
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	733b      	strb	r3, [r7, #12]
        .frameId = frame_id,
        .status  = (uint8_t)g_status.state,
 8002d0e:	4b27      	ldr	r3, [pc, #156]	@ (8002dac <motion_send_queue_status_response+0xac>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002d14:	737b      	strb	r3, [r7, #13]
        .pidErrX = (uint8_t)g_status.pidErrX,
 8002d16:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <motion_send_queue_status_response+0xac>)
 8002d18:	795b      	ldrb	r3, [r3, #5]
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002d1e:	73bb      	strb	r3, [r7, #14]
        .pidErrY = (uint8_t)g_status.pidErrY,
 8002d20:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <motion_send_queue_status_response+0xac>)
 8002d22:	799b      	ldrb	r3, [r3, #6]
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002d28:	73fb      	strb	r3, [r7, #15]
        .pidErrZ = (uint8_t)g_status.pidErrZ,
 8002d2a:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <motion_send_queue_status_response+0xac>)
 8002d2c:	79db      	ldrb	r3, [r3, #7]
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002d32:	743b      	strb	r3, [r7, #16]
        .pctX    = g_status.pctX,
 8002d34:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <motion_send_queue_status_response+0xac>)
 8002d36:	789b      	ldrb	r3, [r3, #2]
 8002d38:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002d3a:	747b      	strb	r3, [r7, #17]
        .pctY    = g_status.pctY,
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <motion_send_queue_status_response+0xac>)
 8002d3e:	78db      	ldrb	r3, [r3, #3]
 8002d40:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002d42:	74bb      	strb	r3, [r7, #18]
        .pctZ    = g_status.pctZ,
 8002d44:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <motion_send_queue_status_response+0xac>)
 8002d46:	791b      	ldrb	r3, [r3, #4]
 8002d48:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8002d4a:	74fb      	strb	r3, [r7, #19]
    };
    if (move_queue_status_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8002d4c:	f107 0114 	add.w	r1, r7, #20
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	220c      	movs	r2, #12
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe f97e 	bl	8001058 <move_queue_status_resp_encoder>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <motion_send_queue_status_response+0x7c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "status", "encode_fail");
 8002d62:	4a13      	ldr	r2, [pc, #76]	@ (8002db0 <motion_send_queue_status_response+0xb0>)
 8002d64:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <motion_send_queue_status_response+0xb4>)
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	4b13      	ldr	r3, [pc, #76]	@ (8002db8 <motion_send_queue_status_response+0xb8>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	f06f 0201 	mvn.w	r2, #1
 8002d72:	2164      	movs	r1, #100	@ 0x64
 8002d74:	2002      	movs	r0, #2
 8002d76:	f7ff f92b 	bl	8001fd0 <log_event_auto>
 8002d7a:	e014      	b.n	8002da6 <motion_send_queue_status_response+0xa6>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	210c      	movs	r1, #12
 8002d82:	4618      	mov	r0, r3
 8002d84:	f001 f9cc 	bl	8004120 <app_resp_push>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <motion_send_queue_status_response+0xa6>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "status", "queue_full");
 8002d8e:	4a08      	ldr	r2, [pc, #32]	@ (8002db0 <motion_send_queue_status_response+0xb0>)
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <motion_send_queue_status_response+0xbc>)
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <motion_send_queue_status_response+0xb8>)
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	f06f 0203 	mvn.w	r2, #3
 8002d9e:	2164      	movs	r1, #100	@ 0x64
 8002da0:	2002      	movs	r0, #2
 8002da2:	f7ff f915 	bl	8001fd0 <log_event_auto>
    }
}
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	200000c4 	.word	0x200000c4
 8002db0:	0800f110 	.word	0x0800f110
 8002db4:	0800f17c 	.word	0x0800f17c
 8002db8:	0800f198 	.word	0x0800f198
 8002dbc:	0800f18c 	.word	0x0800f18c

08002dc0 <motion_send_start_response>:
static void motion_send_start_response(uint8_t frame_id) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[4];
    start_move_resp_t resp = { frame_id };
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	723b      	strb	r3, [r7, #8]
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8002dce:	f107 010c 	add.w	r1, r7, #12
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe f9ac 	bl	8001136 <start_move_resp_encoder>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d115      	bne.n	8002e10 <motion_send_start_response+0x50>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	2104      	movs	r1, #4
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 f998 	bl	8004120 <app_resp_push>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <motion_send_start_response+0x52>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "start", "resp_queue_full");
 8002df6:	4a08      	ldr	r2, [pc, #32]	@ (8002e18 <motion_send_start_response+0x58>)
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <motion_send_start_response+0x5c>)
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <motion_send_start_response+0x60>)
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	f06f 0203 	mvn.w	r2, #3
 8002e06:	2164      	movs	r1, #100	@ 0x64
 8002e08:	2002      	movs	r0, #2
 8002e0a:	f7ff f8e1 	bl	8001fd0 <log_event_auto>
 8002e0e:	e000      	b.n	8002e12 <motion_send_start_response+0x52>
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8002e10:	bf00      	nop
    }
}
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	0800f110 	.word	0x0800f110
 8002e1c:	0800f1a0 	.word	0x0800f1a0
 8002e20:	0800f1b0 	.word	0x0800f1b0

08002e24 <motion_send_move_end_response>:
static void motion_send_move_end_response(uint8_t frame_id) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[4];
    move_end_resp_t resp = { frame_id };
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	723b      	strb	r3, [r7, #8]
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8002e32:	f107 010c 	add.w	r1, r7, #12
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd ffa5 	bl	8000d8c <move_end_resp_encoder>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d115      	bne.n	8002e74 <motion_send_move_end_response+0x50>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 f966 	bl	8004120 <app_resp_push>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <motion_send_move_end_response+0x52>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "move_end", "resp_queue_full");
 8002e5a:	4a08      	ldr	r2, [pc, #32]	@ (8002e7c <motion_send_move_end_response+0x58>)
 8002e5c:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <motion_send_move_end_response+0x5c>)
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <motion_send_move_end_response+0x60>)
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	f06f 0203 	mvn.w	r2, #3
 8002e6a:	2164      	movs	r1, #100	@ 0x64
 8002e6c:	2002      	movs	r0, #2
 8002e6e:	f7ff f8af 	bl	8001fd0 <log_event_auto>
 8002e72:	e000      	b.n	8002e76 <motion_send_move_end_response+0x52>
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8002e74:	bf00      	nop
    }
}
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0800f110 	.word	0x0800f110
 8002e80:	0800f1a0 	.word	0x0800f1a0
 8002e84:	0800f1b8 	.word	0x0800f1b8

08002e88 <motion_service_init>:

/* =======================
 *  Init
 * ======================= */
void motion_service_init(void) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af04      	add	r7, sp, #16
    uint32_t primask = motion_lock();
 8002e8e:	f7ff faa1 	bl	80023d4 <motion_lock>
 8002e92:	60b8      	str	r0, [r7, #8]

    memset(&g_status, 0, sizeof g_status);
 8002e94:	2208      	movs	r2, #8
 8002e96:	2100      	movs	r1, #0
 8002e98:	483c      	ldr	r0, [pc, #240]	@ (8002f8c <motion_service_init+0x104>)
 8002e9a:	f00b f913 	bl	800e0c4 <memset>
    memset(g_axis_state, 0, sizeof g_axis_state);
 8002e9e:	2290      	movs	r2, #144	@ 0x90
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	483b      	ldr	r0, [pc, #236]	@ (8002f90 <motion_service_init+0x108>)
 8002ea4:	f00b f90e 	bl	800e0c4 <memset>
    memset(g_queue, 0, sizeof g_queue);
 8002ea8:	f44f 6230 	mov.w	r2, #2816	@ 0xb00
 8002eac:	2100      	movs	r1, #0
 8002eae:	4839      	ldr	r0, [pc, #228]	@ (8002f94 <motion_service_init+0x10c>)
 8002eb0:	f00b f908 	bl	800e0c4 <memset>
    memset(g_encoder_position, 0, sizeof g_encoder_position);
 8002eb4:	2218      	movs	r2, #24
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4837      	ldr	r0, [pc, #220]	@ (8002f98 <motion_service_init+0x110>)
 8002eba:	f00b f903 	bl	800e0c4 <memset>
    memset(g_encoder_last_raw, 0, sizeof g_encoder_last_raw);
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4836      	ldr	r0, [pc, #216]	@ (8002f9c <motion_service_init+0x114>)
 8002ec4:	f00b f8fe 	bl	800e0c4 <memset>
    memset(g_encoder_origin, 0, sizeof g_encoder_origin);
 8002ec8:	2218      	movs	r2, #24
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4834      	ldr	r0, [pc, #208]	@ (8002fa0 <motion_service_init+0x118>)
 8002ece:	f00b f8f9 	bl	800e0c4 <memset>

    g_status.state = MOTION_IDLE;
 8002ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8002f8c <motion_service_init+0x104>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
    g_queue_head = g_queue_tail = g_queue_count = 0u;
 8002ed8:	4b32      	ldr	r3, [pc, #200]	@ (8002fa4 <motion_service_init+0x11c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <motion_service_init+0x11c>)
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <motion_service_init+0x120>)
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <motion_service_init+0x120>)
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <motion_service_init+0x124>)
 8002eec:	701a      	strb	r2, [r3, #0]
    g_has_active_segment = 0u;
 8002eee:	4b30      	ldr	r3, [pc, #192]	@ (8002fb0 <motion_service_init+0x128>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]

    motion_stop_all_axes_locked();
 8002ef4:	f7ff fc70 	bl	80027d8 <motion_stop_all_axes_locked>
    motion_refresh_status_locked();
 8002ef8:	f7ff fb28 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8002efc:	68b8      	ldr	r0, [r7, #8]
 8002efe:	f7ff fa7a 	bl	80023f6 <motion_unlock>

    motion_hw_init();
 8002f02:	f7ff f8d3 	bl	80020ac <motion_hw_init>

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	e01a      	b.n	8002f42 <motion_service_init+0xba>
        uint32_t raw = motion_hw_encoder_read_raw(axis);
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fa1c 	bl	800234c <motion_hw_encoder_read_raw>
 8002f14:	6078      	str	r0, [r7, #4]
        if (motion_hw_encoder_bits(axis) == 16u) {
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fa3f 	bl	800239c <motion_hw_encoder_bits>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d106      	bne.n	8002f32 <motion_service_init+0xaa>
            g_encoder_last_raw[axis] = raw & 0xFFFFu;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	491c      	ldr	r1, [pc, #112]	@ (8002f9c <motion_service_init+0x114>)
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002f30:	e004      	b.n	8002f3c <motion_service_init+0xb4>
        } else {
            g_encoder_last_raw[axis] = raw;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	4919      	ldr	r1, [pc, #100]	@ (8002f9c <motion_service_init+0x114>)
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d9e1      	bls.n	8002f0c <motion_service_init+0x84>
        }
    }

    if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) Error_Handler();
 8002f48:	481a      	ldr	r0, [pc, #104]	@ (8002fb4 <motion_service_init+0x12c>)
 8002f4a:	f006 ffb3 	bl	8009eb4 <HAL_TIM_Base_Start_IT>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <motion_service_init+0xd0>
 8002f54:	f001 fcb2 	bl	80048bc <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) Error_Handler();
 8002f58:	4817      	ldr	r0, [pc, #92]	@ (8002fb8 <motion_service_init+0x130>)
 8002f5a:	f006 ffab 	bl	8009eb4 <HAL_TIM_Base_Start_IT>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <motion_service_init+0xe0>
 8002f64:	f001 fcaa 	bl	80048bc <Error_Handler>

    LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "timers_ready");
 8002f68:	4a14      	ldr	r2, [pc, #80]	@ (8002fbc <motion_service_init+0x134>)
 8002f6a:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <motion_service_init+0x138>)
 8002f6c:	9302      	str	r3, [sp, #8]
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <motion_service_init+0x13c>)
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <motion_service_init+0x140>)
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	f7ff f827 	bl	8001fd0 <log_event_auto>
}
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200000c4 	.word	0x200000c4
 8002f90:	200000cc 	.word	0x200000cc
 8002f94:	20000160 	.word	0x20000160
 8002f98:	20000c68 	.word	0x20000c68
 8002f9c:	20000c80 	.word	0x20000c80
 8002fa0:	20000c90 	.word	0x20000c90
 8002fa4:	20000c62 	.word	0x20000c62
 8002fa8:	20000c61 	.word	0x20000c61
 8002fac:	20000c60 	.word	0x20000c60
 8002fb0:	2000015c 	.word	0x2000015c
 8002fb4:	20000f74 	.word	0x20000f74
 8002fb8:	20000fc0 	.word	0x20000fc0
 8002fbc:	0800f110 	.word	0x0800f110
 8002fc0:	0800f1c4 	.word	0x0800f1c4
 8002fc4:	0800f1d4 	.word	0x0800f1d4
 8002fc8:	0800f1d8 	.word	0x0800f1d8

08002fcc <motion_on_tim6_tick>:
 *  - fecha largura de pulso
 *  - DEMO: DDA suave
 *  - Fila: caminho original
 * ======================= */
void motion_on_tim6_tick(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
    if (g_status.state != MOTION_RUNNING || !g_has_active_segment)
 8002fd2:	4b9d      	ldr	r3, [pc, #628]	@ (8003248 <motion_on_tim6_tick+0x27c>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	f040 815d 	bne.w	8003298 <motion_on_tim6_tick+0x2cc>
 8002fde:	4b9b      	ldr	r3, [pc, #620]	@ (800324c <motion_on_tim6_tick+0x280>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8157 	beq.w	8003298 <motion_on_tim6_tick+0x2cc>
        return;

    /* 1) Fecha pulsos altos pendentes (garante largura do STEP) */
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002fea:	2300      	movs	r3, #0
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e02a      	b.n	8003046 <motion_on_tim6_tick+0x7a>
        motion_axis_state_t *ax = &g_axis_state[axis];
 8002ff0:	7ffa      	ldrb	r2, [r7, #31]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	4a95      	ldr	r2, [pc, #596]	@ (8003250 <motion_on_tim6_tick+0x284>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	603b      	str	r3, [r7, #0]
        if (ax->step_high) {
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	7d1b      	ldrb	r3, [r3, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d011      	beq.n	800302c <motion_on_tim6_tick+0x60>
            if (--ax->step_high == 0u) {
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	7d1b      	ldrb	r3, [r3, #20]
 800300c:	3b01      	subs	r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	751a      	strb	r2, [r3, #20]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	7d1b      	ldrb	r3, [r3, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <motion_on_tim6_tick+0x74>
                motion_hw_step_low(axis);
 800301c:	7ffb      	ldrb	r3, [r7, #31]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff f970 	bl	8002304 <motion_hw_step_low>
                /* Inicia tempo mínimo em BAIXO antes de permitir novo STEP */
                ax->step_low = MOTION_STEP_LOW_TICKS; /* Para voltar ao comportamento anterior, defina MOTION_STEP_LOW_TICKS=0u */
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	755a      	strb	r2, [r3, #21]
 800302a:	e009      	b.n	8003040 <motion_on_tim6_tick+0x74>
            }
        } else if (ax->step_low) {
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	7d5b      	ldrb	r3, [r3, #21]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <motion_on_tim6_tick+0x74>
            /* Conta o período obrigatório em BAIXO (tLOW) */
            --ax->step_low;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	7d5b      	ldrb	r3, [r3, #21]
 8003038:	3b01      	subs	r3, #1
 800303a:	b2da      	uxtb	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	755a      	strb	r2, [r3, #21]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003040:	7ffb      	ldrb	r3, [r7, #31]
 8003042:	3301      	adds	r3, #1
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	7ffb      	ldrb	r3, [r7, #31]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d9d1      	bls.n	8002ff0 <motion_on_tim6_tick+0x24>
        }
    }

    /* 2) DEMO: DDA a 50 kHz -> distribuição uniforme de passos */
    if (g_demo_continuous) {
 800304c:	4b81      	ldr	r3, [pc, #516]	@ (8003254 <motion_on_tim6_tick+0x288>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d05f      	beq.n	8003116 <motion_on_tim6_tick+0x14a>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003056:	2300      	movs	r3, #0
 8003058:	77bb      	strb	r3, [r7, #30]
 800305a:	e058      	b.n	800310e <motion_on_tim6_tick+0x142>
            motion_axis_state_t *ax = &g_axis_state[axis];
 800305c:	7fba      	ldrb	r2, [r7, #30]
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	4a7a      	ldr	r2, [pc, #488]	@ (8003250 <motion_on_tim6_tick+0x284>)
 8003068:	4413      	add	r3, r2
 800306a:	613b      	str	r3, [r7, #16]

            if (ax->emitted_steps >= ax->total_steps) continue;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d242      	bcs.n	80030fe <motion_on_tim6_tick+0x132>

            /* guardas de ENABLE e DIR (atendem setup/hold do TMC5160) */
            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <motion_on_tim6_tick+0xc8>
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003088:	3b01      	subs	r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003092:	e039      	b.n	8003108 <motion_on_tim6_tick+0x13c>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <motion_on_tim6_tick+0xe4>
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80030ae:	e02b      	b.n	8003108 <motion_on_tim6_tick+0x13c>

            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	7d1b      	ldrb	r3, [r3, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d124      	bne.n	8003102 <motion_on_tim6_tick+0x136>
            if (ax->step_low)  continue; /* aguardando tLOW mínimo antes de novo STEP */
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	7d5b      	ldrb	r3, [r3, #21]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d122      	bne.n	8003106 <motion_on_tim6_tick+0x13a>

            /* DDA: acumula fase e emite STEP ao cruzar 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	699a      	ldr	r2, [r3, #24]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	441a      	add	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d6:	d317      	bcc.n	8003108 <motion_on_tim6_tick+0x13c>
                ax->dda_accum_q16 -= Q16_1;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	619a      	str	r2, [r3, #24]

                motion_hw_step_high(axis);
 80030e4:	7fbb      	ldrb	r3, [r7, #30]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f8e8 	bl	80022bc <motion_hw_step_high>
                ax->step_high = MOTION_STEP_HIGH_TICKS;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2201      	movs	r2, #1
 80030f0:	751a      	strb	r2, [r3, #20]
                ++ax->emitted_steps;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	e004      	b.n	8003108 <motion_on_tim6_tick+0x13c>
            if (ax->emitted_steps >= ax->total_steps) continue;
 80030fe:	bf00      	nop
 8003100:	e002      	b.n	8003108 <motion_on_tim6_tick+0x13c>
            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <motion_on_tim6_tick+0x13c>
            if (ax->step_low)  continue; /* aguardando tLOW mínimo antes de novo STEP */
 8003106:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003108:	7fbb      	ldrb	r3, [r7, #30]
 800310a:	3301      	adds	r3, #1
 800310c:	77bb      	strb	r3, [r7, #30]
 800310e:	7fbb      	ldrb	r3, [r7, #30]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d9a3      	bls.n	800305c <motion_on_tim6_tick+0x90>
 8003114:	e052      	b.n	80031bc <motion_on_tim6_tick+0x1f0>
            }
        }
    }
    else {
        /* 3) Caminho original (fila): preservado */
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003116:	2300      	movs	r3, #0
 8003118:	777b      	strb	r3, [r7, #29]
 800311a:	e04c      	b.n	80031b6 <motion_on_tim6_tick+0x1ea>
            motion_axis_state_t *ax = &g_axis_state[axis];
 800311c:	7f7a      	ldrb	r2, [r7, #29]
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	4a4a      	ldr	r2, [pc, #296]	@ (8003250 <motion_on_tim6_tick+0x284>)
 8003128:	4413      	add	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

            if (ax->step_high) continue;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	7d1b      	ldrb	r3, [r3, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d138      	bne.n	80031a6 <motion_on_tim6_tick+0x1da>
            if (ax->step_low)  continue; /* aguardando tLOW mínimo antes de novo STEP */
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	7d5b      	ldrb	r3, [r3, #21]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d136      	bne.n	80031aa <motion_on_tim6_tick+0x1de>
            if (ax->emitted_steps >= ax->total_steps) continue;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d232      	bcs.n	80031ae <motion_on_tim6_tick+0x1e2>

            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <motion_on_tim6_tick+0x198>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003158:	3b01      	subs	r3, #1
 800315a:	b2da      	uxtb	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003162:	e025      	b.n	80031b0 <motion_on_tim6_tick+0x1e4>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <motion_on_tim6_tick+0x1b4>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003174:	3b01      	subs	r3, #1
 8003176:	b2da      	uxtb	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 800317e:	e017      	b.n	80031b0 <motion_on_tim6_tick+0x1e4>

            if (ax->emitted_steps < ax->target_steps) {
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d211      	bcs.n	80031b0 <motion_on_tim6_tick+0x1e4>
                motion_hw_step_high(axis);
 800318c:	7f7b      	ldrb	r3, [r7, #29]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f894 	bl	80022bc <motion_hw_step_high>
                ax->step_high = MOTION_STEP_HIGH_TICKS;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2201      	movs	r2, #1
 8003198:	751a      	strb	r2, [r3, #20]
                ++ax->emitted_steps;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	e004      	b.n	80031b0 <motion_on_tim6_tick+0x1e4>
            if (ax->step_high) continue;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <motion_on_tim6_tick+0x1e4>
            if (ax->step_low)  continue; /* aguardando tLOW mínimo antes de novo STEP */
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <motion_on_tim6_tick+0x1e4>
            if (ax->emitted_steps >= ax->total_steps) continue;
 80031ae:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80031b0:	7f7b      	ldrb	r3, [r7, #29]
 80031b2:	3301      	adds	r3, #1
 80031b4:	777b      	strb	r3, [r7, #29]
 80031b6:	7f7b      	ldrb	r3, [r7, #29]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d9af      	bls.n	800311c <motion_on_tim6_tick+0x150>
            }
        }
    }

    /* 4) Término do segmento (inalterado) */
    uint8_t finished = 1u;
 80031bc:	2301      	movs	r3, #1
 80031be:	773b      	strb	r3, [r7, #28]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80031c0:	2300      	movs	r3, #0
 80031c2:	76fb      	strb	r3, [r7, #27]
 80031c4:	e017      	b.n	80031f6 <motion_on_tim6_tick+0x22a>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 80031c6:	7efa      	ldrb	r2, [r7, #27]
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <motion_on_tim6_tick+0x284>)
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
        if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d303      	bcc.n	80031ea <motion_on_tim6_tick+0x21e>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	7d1b      	ldrb	r3, [r3, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <motion_on_tim6_tick+0x224>
            finished = 0u; break;
 80031ea:	2300      	movs	r3, #0
 80031ec:	773b      	strb	r3, [r7, #28]
 80031ee:	e005      	b.n	80031fc <motion_on_tim6_tick+0x230>
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80031f0:	7efb      	ldrb	r3, [r7, #27]
 80031f2:	3301      	adds	r3, #1
 80031f4:	76fb      	strb	r3, [r7, #27]
 80031f6:	7efb      	ldrb	r3, [r7, #27]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d9e4      	bls.n	80031c6 <motion_on_tim6_tick+0x1fa>
        }
    }
    if (!finished) return;
 80031fc:	7f3b      	ldrb	r3, [r7, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d04c      	beq.n	800329c <motion_on_tim6_tick+0x2d0>

    uint32_t primask = motion_lock();
 8003202:	f7ff f8e7 	bl	80023d4 <motion_lock>
 8003206:	60b8      	str	r0, [r7, #8]
    if (g_has_active_segment) {
 8003208:	4b10      	ldr	r3, [pc, #64]	@ (800324c <motion_on_tim6_tick+0x280>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d03e      	beq.n	8003290 <motion_on_tim6_tick+0x2c4>
        uint8_t confirm = 1u;
 8003212:	2301      	movs	r3, #1
 8003214:	76bb      	strb	r3, [r7, #26]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003216:	2300      	movs	r3, #0
 8003218:	767b      	strb	r3, [r7, #25]
 800321a:	e020      	b.n	800325e <motion_on_tim6_tick+0x292>
            const motion_axis_state_t *ax = &g_axis_state[axis];
 800321c:	7e7a      	ldrb	r2, [r7, #25]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	4a0a      	ldr	r2, [pc, #40]	@ (8003250 <motion_on_tim6_tick+0x284>)
 8003228:	4413      	add	r3, r2
 800322a:	607b      	str	r3, [r7, #4]
            if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d303      	bcc.n	8003240 <motion_on_tim6_tick+0x274>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7d1b      	ldrb	r3, [r3, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <motion_on_tim6_tick+0x28c>
                confirm = 0u; break;
 8003240:	2300      	movs	r3, #0
 8003242:	76bb      	strb	r3, [r7, #26]
 8003244:	e00e      	b.n	8003264 <motion_on_tim6_tick+0x298>
 8003246:	bf00      	nop
 8003248:	200000c4 	.word	0x200000c4
 800324c:	2000015c 	.word	0x2000015c
 8003250:	200000cc 	.word	0x200000cc
 8003254:	20000cc0 	.word	0x20000cc0
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003258:	7e7b      	ldrb	r3, [r7, #25]
 800325a:	3301      	adds	r3, #1
 800325c:	767b      	strb	r3, [r7, #25]
 800325e:	7e7b      	ldrb	r3, [r7, #25]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d9db      	bls.n	800321c <motion_on_tim6_tick+0x250>
            }
        }
        if (confirm) {
 8003264:	7ebb      	ldrb	r3, [r7, #26]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d012      	beq.n	8003290 <motion_on_tim6_tick+0x2c4>
            if (motion_try_start_next_locked()) {
 800326a:	f7ff fc4b 	bl	8002b04 <motion_try_start_next_locked>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <motion_on_tim6_tick+0x2b0>
                g_status.state = MOTION_RUNNING;
 8003274:	4b0b      	ldr	r3, [pc, #44]	@ (80032a4 <motion_on_tim6_tick+0x2d8>)
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e007      	b.n	800328c <motion_on_tim6_tick+0x2c0>
            } else {
                g_has_active_segment = 0u;
 800327c:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <motion_on_tim6_tick+0x2dc>)
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
                motion_stop_all_axes_locked();
 8003282:	f7ff faa9 	bl	80027d8 <motion_stop_all_axes_locked>
                g_status.state = MOTION_DONE;
 8003286:	4b07      	ldr	r3, [pc, #28]	@ (80032a4 <motion_on_tim6_tick+0x2d8>)
 8003288:	2205      	movs	r2, #5
 800328a:	701a      	strb	r2, [r3, #0]
            }
            motion_refresh_status_locked();
 800328c:	f7ff f95e 	bl	800254c <motion_refresh_status_locked>
        }
    }
    motion_unlock(primask);
 8003290:	68b8      	ldr	r0, [r7, #8]
 8003292:	f7ff f8b0 	bl	80023f6 <motion_unlock>
 8003296:	e002      	b.n	800329e <motion_on_tim6_tick+0x2d2>
        return;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <motion_on_tim6_tick+0x2d2>
    if (!finished) return;
 800329c:	bf00      	nop
}
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200000c4 	.word	0x200000c4
 80032a8:	2000015c 	.word	0x2000015c

080032ac <motion_on_tim7_tick>:
 *  - Atualiza encoders
 *  - DEMO: rampa e dda_inc
 *  - Fila: sua lógica original de target_steps
 * ======================= */
void motion_on_tim7_tick(void)
{
 80032ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b0:	b094      	sub	sp, #80	@ 0x50
 80032b2:	af00      	add	r7, sp, #0
    motion_update_encoders();
 80032b4:	f7ff fc3c 	bl	8002b30 <motion_update_encoders>

    // Atualiza sombras 32-bit para SWV/Data Trace (4 bytes por amostra)
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80032be:	e027      	b.n	8003310 <motion_on_tim7_tick+0x64>
        g_enc_abs32[axis] = (int32_t)g_encoder_position[axis];
 80032c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80032c4:	4a8b      	ldr	r2, [pc, #556]	@ (80034f4 <motion_on_tim7_tick+0x248>)
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 80032d2:	4b89      	ldr	r3, [pc, #548]	@ (80034f8 <motion_on_tim7_tick+0x24c>)
 80032d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        g_enc_rel32[axis] = (int32_t)(g_encoder_position[axis] - g_encoder_origin[axis]);
 80032d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80032dc:	4a85      	ldr	r2, [pc, #532]	@ (80034f4 <motion_on_tim7_tick+0x248>)
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	4611      	mov	r1, r2
 80032e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80032ec:	4a83      	ldr	r2, [pc, #524]	@ (80034fc <motion_on_tim7_tick+0x250>)
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	4613      	mov	r3, r2
 80032f8:	1acb      	subs	r3, r1, r3
 80032fa:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80032fe:	4619      	mov	r1, r3
 8003300:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <motion_on_tim7_tick+0x254>)
 8003302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003306:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800330a:	3301      	adds	r3, #1
 800330c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8003310:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003314:	2b02      	cmp	r3, #2
 8003316:	d9d3      	bls.n	80032c0 <motion_on_tim7_tick+0x14>
    }

    /* DEMO: aplica rampa e calcula incremento do DDA */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && g_demo_continuous) {
 8003318:	4b7a      	ldr	r3, [pc, #488]	@ (8003504 <motion_on_tim7_tick+0x258>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d175      	bne.n	800340e <motion_on_tim7_tick+0x162>
 8003322:	4b79      	ldr	r3, [pc, #484]	@ (8003508 <motion_on_tim7_tick+0x25c>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d070      	beq.n	800340e <motion_on_tim7_tick+0x162>
 800332c:	4b77      	ldr	r3, [pc, #476]	@ (800350c <motion_on_tim7_tick+0x260>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06b      	beq.n	800340e <motion_on_tim7_tick+0x162>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003336:	2300      	movs	r3, #0
 8003338:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800333c:	e063      	b.n	8003406 <motion_on_tim7_tick+0x15a>
            motion_axis_state_t *ax = &g_axis_state[axis];
 800333e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4a71      	ldr	r2, [pc, #452]	@ (8003510 <motion_on_tim7_tick+0x264>)
 800334c:	4413      	add	r3, r2
 800334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d24e      	bcs.n	80033fa <motion_on_tim7_tick+0x14e>

            /* dv = a/1000 (steps/s por tick de 1 ms) */
            uint32_t dv = ax->accel_sps2 / 1000u;
 800335c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003360:	4b6c      	ldr	r3, [pc, #432]	@ (8003514 <motion_on_tim7_tick+0x268>)
 8003362:	fba3 2302 	umull	r2, r3, r3, r2
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (ax->v_actual_sps < ax->v_target_sps) {
 800336a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800336c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	429a      	cmp	r2, r3
 8003374:	d20d      	bcs.n	8003392 <motion_on_tim7_tick+0xe6>
                uint32_t v = ax->v_actual_sps + dv;
 8003376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337c:	4413      	add	r3, r2
 800337e:	633b      	str	r3, [r7, #48]	@ 0x30
                ax->v_actual_sps = (v > ax->v_target_sps) ? ax->v_target_sps : v;
 8003380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	429a      	cmp	r2, r3
 8003388:	bf28      	it	cs
 800338a:	461a      	movcs	r2, r3
 800338c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003390:	e019      	b.n	80033c6 <motion_on_tim7_tick+0x11a>
            } else if (ax->v_actual_sps > ax->v_target_sps) {
 8003392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	429a      	cmp	r2, r3
 800339c:	d913      	bls.n	80033c6 <motion_on_tim7_tick+0x11a>
                uint32_t v = (ax->v_actual_sps > dv) ? ax->v_actual_sps - dv : 0u;
 800339e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d204      	bcs.n	80033b2 <motion_on_tim7_tick+0x106>
 80033a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	e000      	b.n	80033b4 <motion_on_tim7_tick+0x108>
 80033b2:	2300      	movs	r3, #0
 80033b4:	637b      	str	r3, [r7, #52]	@ 0x34
                ax->v_actual_sps = (v < ax->v_target_sps) ? ax->v_target_sps : v;
 80033b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b8:	6a1a      	ldr	r2, [r3, #32]
 80033ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033bc:	429a      	cmp	r2, r3
 80033be:	bf38      	it	cc
 80033c0:	461a      	movcc	r2, r3
 80033c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c4:	625a      	str	r2, [r3, #36]	@ 0x24
            }

            /* inc_Q16 = v_actual / f_TIM6 */
            ax->dda_inc_q16 = Q16_DIV_UINT(ax->v_actual_sps, MOTION_TIM6_HZ);
 80033c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	2200      	movs	r2, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	61fa      	str	r2, [r7, #28]
 80033d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80033d4:	460b      	mov	r3, r1
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	460b      	mov	r3, r1
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033ec:	f7fc ff40 	bl	8000270 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f6:	61da      	str	r2, [r3, #28]
 80033f8:	e000      	b.n	80033fc <motion_on_tim7_tick+0x150>
            if (ax->emitted_steps >= ax->total_steps) continue;
 80033fa:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80033fc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003400:	3301      	adds	r3, #1
 8003402:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8003406:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800340a:	2b02      	cmp	r3, #2
 800340c:	d997      	bls.n	800333e <motion_on_tim7_tick+0x92>
        }
    }

    /* Caminho original da fila: mantém avanço por velocity_per_tick */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && !g_demo_continuous) {
 800340e:	4b3d      	ldr	r3, [pc, #244]	@ (8003504 <motion_on_tim7_tick+0x258>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d15f      	bne.n	80034d8 <motion_on_tim7_tick+0x22c>
 8003418:	4b3b      	ldr	r3, [pc, #236]	@ (8003508 <motion_on_tim7_tick+0x25c>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d05a      	beq.n	80034d8 <motion_on_tim7_tick+0x22c>
 8003422:	4b3a      	ldr	r3, [pc, #232]	@ (800350c <motion_on_tim7_tick+0x260>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d155      	bne.n	80034d8 <motion_on_tim7_tick+0x22c>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800342c:	2300      	movs	r3, #0
 800342e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8003432:	e04d      	b.n	80034d0 <motion_on_tim7_tick+0x224>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003434:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	4a33      	ldr	r2, [pc, #204]	@ (8003510 <motion_on_tim7_tick+0x264>)
 8003442:	4413      	add	r3, r2
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d238      	bcs.n	80034c4 <motion_on_tim7_tick+0x218>

            uint32_t total = ax->total_steps;
 8003452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t target = ax->target_steps;
 8003458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	64bb      	str	r3, [r7, #72]	@ 0x48
            uint32_t velocity = ax->velocity_per_tick;
 800345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003460:	899b      	ldrh	r3, [r3, #12]
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24

            if (velocity == 0u) {
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <motion_on_tim7_tick+0x1c4>
                target = total;
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800346e:	e025      	b.n	80034bc <motion_on_tim7_tick+0x210>
            } else {
                uint64_t next = (uint64_t)target + (uint64_t)velocity;
 8003470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003472:	2200      	movs	r2, #0
 8003474:	461c      	mov	r4, r3
 8003476:	4615      	mov	r5, r2
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	2200      	movs	r2, #0
 800347c:	4698      	mov	r8, r3
 800347e:	4691      	mov	r9, r2
 8003480:	eb14 0308 	adds.w	r3, r4, r8
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	eb45 0309 	adc.w	r3, r5, r9
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003490:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                if (next > total) next = total;
 8003494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003496:	2200      	movs	r2, #0
 8003498:	469a      	mov	sl, r3
 800349a:	4693      	mov	fp, r2
 800349c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034a0:	4592      	cmp	sl, r2
 80034a2:	eb7b 0303 	sbcs.w	r3, fp, r3
 80034a6:	d207      	bcs.n	80034b8 <motion_on_tim7_tick+0x20c>
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	2200      	movs	r2, #0
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                target = (uint32_t)next;
 80034b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ba:	64bb      	str	r3, [r7, #72]	@ 0x48
            }
            ax->target_steps = target;
 80034bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	e000      	b.n	80034c6 <motion_on_tim7_tick+0x21a>
            if (ax->emitted_steps >= ax->total_steps) continue;
 80034c4:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80034c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034ca:	3301      	adds	r3, #1
 80034cc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80034d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d9ad      	bls.n	8003434 <motion_on_tim7_tick+0x188>
        }
    }

    uint32_t primask = motion_lock();
 80034d8:	f7fe ff7c 	bl	80023d4 <motion_lock>
 80034dc:	6238      	str	r0, [r7, #32]
    motion_refresh_status_locked();
 80034de:	f7ff f835 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 80034e2:	6a38      	ldr	r0, [r7, #32]
 80034e4:	f7fe ff87 	bl	80023f6 <motion_unlock>
}
 80034e8:	bf00      	nop
 80034ea:	3750      	adds	r7, #80	@ 0x50
 80034ec:	46bd      	mov	sp, r7
 80034ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034f2:	bf00      	nop
 80034f4:	20000c68 	.word	0x20000c68
 80034f8:	20000ca8 	.word	0x20000ca8
 80034fc:	20000c90 	.word	0x20000c90
 8003500:	20000cb4 	.word	0x20000cb4
 8003504:	200000c4 	.word	0x200000c4
 8003508:	2000015c 	.word	0x2000015c
 800350c:	20000cc0 	.word	0x20000cc0
 8003510:	200000cc 	.word	0x200000cc
 8003514:	10624dd3 	.word	0x10624dd3

08003518 <motion_on_move_queue_add>:

/* =======================
 *  Handlers de protocolo
 * ======================= */
void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b097      	sub	sp, #92	@ 0x5c
 800351c:	af06      	add	r7, sp, #24
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
    move_queue_add_req_t req;
    uint8_t ack_status = MOTION_ACK_INVALID;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t frame_id = 0u;
 8003528:	2300      	movs	r3, #0
 800352a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    if (!frame) return;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8087 	beq.w	8003644 <motion_on_move_queue_add+0x12c>
    proto_result_t decode_status = move_queue_add_req_decoder(frame, len, &req);
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	461a      	mov	r2, r3
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd f9c6 	bl	80008d0 <move_queue_add_req_decoder>
 8003544:	4603      	mov	r3, r0
 8003546:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (decode_status != PROTO_OK) {
 800354a:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 800354e:	2b00      	cmp	r3, #0
 8003550:	d014      	beq.n	800357c <motion_on_move_queue_add+0x64>
        motion_send_queue_add_ack(frame_id, ack_status);
 8003552:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003556:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fb8b 	bl	8002c78 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "queue_add", "decode_fail");
 8003562:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8003566:	4939      	ldr	r1, [pc, #228]	@ (800364c <motion_on_move_queue_add+0x134>)
 8003568:	4b39      	ldr	r3, [pc, #228]	@ (8003650 <motion_on_move_queue_add+0x138>)
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	4b39      	ldr	r3, [pc, #228]	@ (8003654 <motion_on_move_queue_add+0x13c>)
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	460b      	mov	r3, r1
 8003572:	2164      	movs	r1, #100	@ 0x64
 8003574:	2002      	movs	r0, #2
 8003576:	f7fe fd2b 	bl	8001fd0 <log_event_auto>
        return;
 800357a:	e064      	b.n	8003646 <motion_on_move_queue_add+0x12e>
    }
    frame_id = req.frameId;
 800357c:	7a3b      	ldrb	r3, [r7, #8]
 800357e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    /* Bloqueia enfileiramento em condição de E-STOP */
    if (!safety_is_safe()) {
 8003582:	f000 fb8d 	bl	8003ca0 <safety_is_safe>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d114      	bne.n	80035b6 <motion_on_move_queue_add+0x9e>
        motion_send_queue_add_ack(frame_id, ack_status);
 800358c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003590:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fb6e 	bl	8002c78 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "queue_add", "blocked_safety");
 800359c:	4a2b      	ldr	r2, [pc, #172]	@ (800364c <motion_on_move_queue_add+0x134>)
 800359e:	4b2e      	ldr	r3, [pc, #184]	@ (8003658 <motion_on_move_queue_add+0x140>)
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <motion_on_move_queue_add+0x13c>)
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	f06f 0203 	mvn.w	r2, #3
 80035ac:	2164      	movs	r1, #100	@ 0x64
 80035ae:	2002      	movs	r0, #2
 80035b0:	f7fe fd0e 	bl	8001fd0 <log_event_auto>
        return;
 80035b4:	e047      	b.n	8003646 <motion_on_move_queue_add+0x12e>
    }

    uint32_t primask = motion_lock();
 80035b6:	f7fe ff0d 	bl	80023d4 <motion_lock>
 80035ba:	63b8      	str	r0, [r7, #56]	@ 0x38
    proto_result_t push_status = motion_queue_push_locked(&req);
 80035bc:	f107 0308 	add.w	r3, r7, #8
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff f975 	bl	80028b0 <motion_queue_push_locked>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (push_status == PROTO_OK) {
 80035cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d112      	bne.n	80035fa <motion_on_move_queue_add+0xe2>
        ack_status = MOTION_ACK_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (g_status.state == MOTION_IDLE || g_status.state == MOTION_DONE)
 80035da:	4b20      	ldr	r3, [pc, #128]	@ (800365c <motion_on_move_queue_add+0x144>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d004      	beq.n	80035ee <motion_on_move_queue_add+0xd6>
 80035e4:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <motion_on_move_queue_add+0x144>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d102      	bne.n	80035f4 <motion_on_move_queue_add+0xdc>
            g_status.state = MOTION_QUEUED;
 80035ee:	4b1b      	ldr	r3, [pc, #108]	@ (800365c <motion_on_move_queue_add+0x144>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 80035f4:	f7fe ffaa 	bl	800254c <motion_refresh_status_locked>
 80035f8:	e002      	b.n	8003600 <motion_on_move_queue_add+0xe8>
    } else {
        ack_status = MOTION_ACK_QUEUE_FULL;
 80035fa:	2302      	movs	r3, #2
 80035fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    motion_unlock(primask);
 8003600:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003602:	f7fe fef8 	bl	80023f6 <motion_unlock>

    motion_send_queue_add_ack(frame_id, ack_status);
 8003606:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800360a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fb31 	bl	8002c78 <motion_send_queue_add_ack>
    LOGA_THIS(LOG_STATE_RECEIVED, ack_status, "queue_add",
 8003616:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800361a:	480c      	ldr	r0, [pc, #48]	@ (800364c <motion_on_move_queue_add+0x134>)
 800361c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003620:	7a79      	ldrb	r1, [r7, #9]
 8003622:	460c      	mov	r4, r1
 8003624:	490d      	ldr	r1, [pc, #52]	@ (800365c <motion_on_move_queue_add+0x144>)
 8003626:	7849      	ldrb	r1, [r1, #1]
 8003628:	b2c9      	uxtb	r1, r1
 800362a:	9104      	str	r1, [sp, #16]
 800362c:	9403      	str	r4, [sp, #12]
 800362e:	9302      	str	r3, [sp, #8]
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <motion_on_move_queue_add+0x148>)
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	4b07      	ldr	r3, [pc, #28]	@ (8003654 <motion_on_move_queue_add+0x13c>)
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	4603      	mov	r3, r0
 800363a:	2101      	movs	r1, #1
 800363c:	2002      	movs	r0, #2
 800363e:	f7fe fcc7 	bl	8001fd0 <log_event_auto>
 8003642:	e000      	b.n	8003646 <motion_on_move_queue_add+0x12e>
    if (!frame) return;
 8003644:	bf00      	nop
              "frame=%u dirMask=0x%02X queue=%u",
              (unsigned)frame_id, (unsigned)req.dirMask, (unsigned)g_status.queue_depth);
}
 8003646:	3744      	adds	r7, #68	@ 0x44
 8003648:	46bd      	mov	sp, r7
 800364a:	bd90      	pop	{r4, r7, pc}
 800364c:	0800f110 	.word	0x0800f110
 8003650:	0800f1e0 	.word	0x0800f1e0
 8003654:	0800f1ec 	.word	0x0800f1ec
 8003658:	0800f1f8 	.word	0x0800f1f8
 800365c:	200000c4 	.word	0x200000c4
 8003660:	0800f208 	.word	0x0800f208

08003664 <motion_on_move_queue_status>:

void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8003664:	b5b0      	push	{r4, r5, r7, lr}
 8003666:	b08c      	sub	sp, #48	@ 0x30
 8003668:	af08      	add	r7, sp, #32
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
    move_queue_status_req_t req;
    if (move_queue_status_req_decoder(frame, len, &req) != PROTO_OK) {
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	461a      	mov	r2, r3
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fa28 	bl	8000acc <move_queue_status_req_decoder>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <motion_on_move_queue_status+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "queue_status", "decode_fail");
 8003682:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <motion_on_move_queue_status+0x9c>)
 8003684:	4b1f      	ldr	r3, [pc, #124]	@ (8003704 <motion_on_move_queue_status+0xa0>)
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	4b1f      	ldr	r3, [pc, #124]	@ (8003708 <motion_on_move_queue_status+0xa4>)
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	f06f 0201 	mvn.w	r2, #1
 8003692:	2164      	movs	r1, #100	@ 0x64
 8003694:	2002      	movs	r0, #2
 8003696:	f7fe fc9b 	bl	8001fd0 <log_event_auto>
 800369a:	e02e      	b.n	80036fa <motion_on_move_queue_status+0x96>
        return;
    }
    uint32_t primask = motion_lock();
 800369c:	f7fe fe9a 	bl	80023d4 <motion_lock>
 80036a0:	60f8      	str	r0, [r7, #12]
    motion_refresh_status_locked();
 80036a2:	f7fe ff53 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7fe fea5 	bl	80023f6 <motion_unlock>

    motion_send_queue_status_response(req.frameId);
 80036ac:	7a3b      	ldrb	r3, [r7, #8]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fb26 	bl	8002d00 <motion_send_queue_status_response>
    LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status",
 80036b4:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <motion_on_move_queue_status+0x9c>)
 80036b6:	4b15      	ldr	r3, [pc, #84]	@ (800370c <motion_on_move_queue_status+0xa8>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	4b13      	ldr	r3, [pc, #76]	@ (800370c <motion_on_move_queue_status+0xa8>)
 80036c0:	785b      	ldrb	r3, [r3, #1]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	4b11      	ldr	r3, [pc, #68]	@ (800370c <motion_on_move_queue_status+0xa8>)
 80036c8:	789b      	ldrb	r3, [r3, #2]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461c      	mov	r4, r3
 80036ce:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <motion_on_move_queue_status+0xa8>)
 80036d0:	78db      	ldrb	r3, [r3, #3]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461d      	mov	r5, r3
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <motion_on_move_queue_status+0xa8>)
 80036d8:	791b      	ldrb	r3, [r3, #4]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	9306      	str	r3, [sp, #24]
 80036de:	9505      	str	r5, [sp, #20]
 80036e0:	9404      	str	r4, [sp, #16]
 80036e2:	9003      	str	r0, [sp, #12]
 80036e4:	9102      	str	r1, [sp, #8]
 80036e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <motion_on_move_queue_status+0xac>)
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <motion_on_move_queue_status+0xa4>)
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4613      	mov	r3, r2
 80036f0:	2200      	movs	r2, #0
 80036f2:	2101      	movs	r1, #1
 80036f4:	2002      	movs	r0, #2
 80036f6:	f7fe fc6b 	bl	8001fd0 <log_event_auto>
              "state=%u depth=%u pct=(%u,%u,%u)",
              (unsigned)g_status.state, (unsigned)g_status.queue_depth,
              (unsigned)g_status.pctX, (unsigned)g_status.pctY, (unsigned)g_status.pctZ);
}
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003700:	0800f110 	.word	0x0800f110
 8003704:	0800f1e0 	.word	0x0800f1e0
 8003708:	0800f22c 	.word	0x0800f22c
 800370c:	200000c4 	.word	0x200000c4
 8003710:	0800f23c 	.word	0x0800f23c

08003714 <motion_on_start_move>:

void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af02      	add	r7, sp, #8
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
    start_move_req_t req;
    if (start_move_req_decoder(frame, len, &req) != PROTO_OK) {
 800371e:	f107 030c 	add.w	r3, r7, #12
 8003722:	461a      	mov	r2, r3
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fa45 	bl	8000bb6 <start_move_req_decoder>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <motion_on_start_move+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "start_move", "decode_fail");
 8003732:	4a25      	ldr	r2, [pc, #148]	@ (80037c8 <motion_on_start_move+0xb4>)
 8003734:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <motion_on_start_move+0xb8>)
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	4b25      	ldr	r3, [pc, #148]	@ (80037d0 <motion_on_start_move+0xbc>)
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	f06f 0201 	mvn.w	r2, #1
 8003742:	2164      	movs	r1, #100	@ 0x64
 8003744:	2002      	movs	r0, #2
 8003746:	f7fe fc43 	bl	8001fd0 <log_event_auto>
 800374a:	e03a      	b.n	80037c2 <motion_on_start_move+0xae>
        return;
    }
    uint8_t started = 0u;
 800374c:	2300      	movs	r3, #0
 800374e:	75fb      	strb	r3, [r7, #23]
    uint32_t primask = motion_lock();
 8003750:	f7fe fe40 	bl	80023d4 <motion_lock>
 8003754:	6138      	str	r0, [r7, #16]

    if (!safety_is_safe()) {
 8003756:	f000 faa3 	bl	8003ca0 <safety_is_safe>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <motion_on_start_move+0x52>
        started = 0u;
 8003760:	2300      	movs	r3, #0
 8003762:	75fb      	strb	r3, [r7, #23]
 8003764:	e014      	b.n	8003790 <motion_on_start_move+0x7c>
    } else if (!g_has_active_segment) {
 8003766:	4b1b      	ldr	r3, [pc, #108]	@ (80037d4 <motion_on_start_move+0xc0>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <motion_on_start_move+0x72>
        if (motion_try_start_next_locked()) {
 8003770:	f7ff f9c8 	bl	8002b04 <motion_try_start_next_locked>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <motion_on_start_move+0x7c>
            g_status.state = MOTION_RUNNING;
 800377a:	4b17      	ldr	r3, [pc, #92]	@ (80037d8 <motion_on_start_move+0xc4>)
 800377c:	2202      	movs	r2, #2
 800377e:	701a      	strb	r2, [r3, #0]
            started = 1u;
 8003780:	2301      	movs	r3, #1
 8003782:	75fb      	strb	r3, [r7, #23]
 8003784:	e004      	b.n	8003790 <motion_on_start_move+0x7c>
        }
    } else {
        g_status.state = MOTION_RUNNING;
 8003786:	4b14      	ldr	r3, [pc, #80]	@ (80037d8 <motion_on_start_move+0xc4>)
 8003788:	2202      	movs	r2, #2
 800378a:	701a      	strb	r2, [r3, #0]
        started = 1u;
 800378c:	2301      	movs	r3, #1
 800378e:	75fb      	strb	r3, [r7, #23]
    }

    motion_refresh_status_locked();
 8003790:	f7fe fedc 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003794:	6938      	ldr	r0, [r7, #16]
 8003796:	f7fe fe2e 	bl	80023f6 <motion_unlock>

    motion_send_start_response(req.frameId);
 800379a:	7b3b      	ldrb	r3, [r7, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fb0f 	bl	8002dc0 <motion_send_start_response>
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", started ? "running" : "ignored");
 80037a2:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <motion_on_start_move+0xb4>)
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <motion_on_start_move+0x9a>
 80037aa:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <motion_on_start_move+0xc8>)
 80037ac:	e000      	b.n	80037b0 <motion_on_start_move+0x9c>
 80037ae:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <motion_on_start_move+0xcc>)
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	4b07      	ldr	r3, [pc, #28]	@ (80037d0 <motion_on_start_move+0xbc>)
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	2200      	movs	r2, #0
 80037ba:	2102      	movs	r1, #2
 80037bc:	2002      	movs	r0, #2
 80037be:	f7fe fc07 	bl	8001fd0 <log_event_auto>
}
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	0800f110 	.word	0x0800f110
 80037cc:	0800f1e0 	.word	0x0800f1e0
 80037d0:	0800f260 	.word	0x0800f260
 80037d4:	2000015c 	.word	0x2000015c
 80037d8:	200000c4 	.word	0x200000c4
 80037dc:	0800f26c 	.word	0x0800f26c
 80037e0:	0800f274 	.word	0x0800f274

080037e4 <motion_on_move_end>:

void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af04      	add	r7, sp, #16
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
    move_end_req_t req;
    if (move_end_req_decoder(frame, len, &req) != PROTO_OK) {
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	461a      	mov	r2, r3
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fc ffc4 	bl	8000784 <move_end_req_decoder>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00c      	beq.n	800381c <motion_on_move_end+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "move_end", "decode_fail");
 8003802:	4a1f      	ldr	r2, [pc, #124]	@ (8003880 <motion_on_move_end+0x9c>)
 8003804:	4b1f      	ldr	r3, [pc, #124]	@ (8003884 <motion_on_move_end+0xa0>)
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	4b1f      	ldr	r3, [pc, #124]	@ (8003888 <motion_on_move_end+0xa4>)
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	f06f 0201 	mvn.w	r2, #1
 8003812:	2164      	movs	r1, #100	@ 0x64
 8003814:	2002      	movs	r0, #2
 8003816:	f7fe fbdb 	bl	8001fd0 <log_event_auto>
 800381a:	e02d      	b.n	8003878 <motion_on_move_end+0x94>
        return;
    }
    uint32_t primask = motion_lock();
 800381c:	f7fe fdda 	bl	80023d4 <motion_lock>
 8003820:	60f8      	str	r0, [r7, #12]
    motion_stop_all_axes_locked();
 8003822:	f7fe ffd9 	bl	80027d8 <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 8003826:	f7ff f82d 	bl	8002884 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 800382a:	4b18      	ldr	r3, [pc, #96]	@ (800388c <motion_on_move_end+0xa8>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
    g_status.state = MOTION_STOPPING;
 8003830:	4b17      	ldr	r3, [pc, #92]	@ (8003890 <motion_on_move_end+0xac>)
 8003832:	2204      	movs	r2, #4
 8003834:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8003836:	f7fe fe89 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7fe fddb 	bl	80023f6 <motion_unlock>

    motion_send_move_end_response(req.frameId);
 8003840:	7a3b      	ldrb	r3, [r7, #8]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff faee 	bl	8002e24 <motion_send_move_end_response>

    primask = motion_lock();
 8003848:	f7fe fdc4 	bl	80023d4 <motion_lock>
 800384c:	60f8      	str	r0, [r7, #12]
    g_status.state = MOTION_IDLE;
 800384e:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <motion_on_move_end+0xac>)
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8003854:	f7fe fe7a 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7fe fdcc 	bl	80023f6 <motion_unlock>

    LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopped");
 800385e:	4a08      	ldr	r2, [pc, #32]	@ (8003880 <motion_on_move_end+0x9c>)
 8003860:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <motion_on_move_end+0xb0>)
 8003862:	9302      	str	r3, [sp, #8]
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <motion_on_move_end+0xb4>)
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	4b07      	ldr	r3, [pc, #28]	@ (8003888 <motion_on_move_end+0xa4>)
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	2200      	movs	r2, #0
 8003870:	2102      	movs	r1, #2
 8003872:	2002      	movs	r0, #2
 8003874:	f7fe fbac 	bl	8001fd0 <log_event_auto>
}
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	0800f110 	.word	0x0800f110
 8003884:	0800f1e0 	.word	0x0800f1e0
 8003888:	0800f1b8 	.word	0x0800f1b8
 800388c:	2000015c 	.word	0x2000015c
 8003890:	200000c4 	.word	0x200000c4
 8003894:	0800f27c 	.word	0x0800f27c
 8003898:	0800f1d4 	.word	0x0800f1d4

0800389c <motion_demo_set_continuous>:
    motion_unlock(primask);
}

/* Liga/desliga gerador contínuo de passos (ignora a fila) */
void motion_demo_set_continuous(uint8_t enable)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
    uint32_t primask = motion_lock();
 80038a6:	f7fe fd95 	bl	80023d4 <motion_lock>
 80038aa:	6138      	str	r0, [r7, #16]
    g_demo_continuous = (enable ? 1u : 0u);
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <motion_demo_set_continuous+0x1a>
 80038b2:	2201      	movs	r2, #1
 80038b4:	e000      	b.n	80038b8 <motion_demo_set_continuous+0x1c>
 80038b6:	2200      	movs	r2, #0
 80038b8:	4b42      	ldr	r3, [pc, #264]	@ (80039c4 <motion_demo_set_continuous+0x128>)
 80038ba:	701a      	strb	r2, [r3, #0]

    if (g_demo_continuous) {
 80038bc:	4b41      	ldr	r3, [pc, #260]	@ (80039c4 <motion_demo_set_continuous+0x128>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d06a      	beq.n	800399c <motion_demo_set_continuous+0x100>
        g_has_active_segment = 1u;
 80038c6:	4b40      	ldr	r3, [pc, #256]	@ (80039c8 <motion_demo_set_continuous+0x12c>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]

        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
 80038d0:	e05b      	b.n	800398a <motion_demo_set_continuous+0xee>
            motion_axis_state_t *ax = &g_axis_state[axis];
 80038d2:	7dfa      	ldrb	r2, [r7, #23]
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	4a3b      	ldr	r2, [pc, #236]	@ (80039cc <motion_demo_set_continuous+0x130>)
 80038de:	4413      	add	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

            ax->total_steps       = 0xFFFFFFFFu; /* efetivamente contínuo */
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295
 80038e8:	601a      	str	r2, [r3, #0]
            ax->target_steps      = 0u;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	605a      	str	r2, [r3, #4]
            ax->emitted_steps     = 0u;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]

            /* tabela em "k steps/s" (~1 kHz) -> converte para steps/s */
            uint16_t vtab         = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 80038f6:	4b36      	ldr	r3, [pc, #216]	@ (80039d0 <motion_demo_set_continuous+0x134>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	4a34      	ldr	r2, [pc, #208]	@ (80039d4 <motion_demo_set_continuous+0x138>)
 8003902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003906:	817b      	strh	r3, [r7, #10]
            ax->velocity_per_tick = vtab;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	897a      	ldrh	r2, [r7, #10]
 800390c:	819a      	strh	r2, [r3, #12]
            ax->v_target_sps      = ((uint32_t)vtab) * 1000u;
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003914:	fb03 f202 	mul.w	r2, r3, r2
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	621a      	str	r2, [r3, #32]
            ax->v_actual_sps      = 0u;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24
            ax->accel_sps2        = DEMO_ACCEL_SPS2;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a2c      	ldr	r2, [pc, #176]	@ (80039d8 <motion_demo_set_continuous+0x13c>)
 8003926:	629a      	str	r2, [r3, #40]	@ 0x28

            ax->dda_accum_q16     = 0u;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]
            ax->dda_inc_q16       = 0u;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	61da      	str	r2, [r3, #28]

            ax->step_high         = 0u;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	751a      	strb	r2, [r3, #20]
            ax->step_low          = 0u; /* tLOW inicia zerado; será aplicado nos pulsos subsequentes */
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	755a      	strb	r2, [r3, #21]
            ax->en_settle_ticks   = MOTION_ENABLE_SETTLE_TICKS;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

            motion_hw_step_low(axis);
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fcd6 	bl	8002304 <motion_hw_step_low>
            motion_hw_set_dir(axis, 1u);     /* forward */
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fc2d 	bl	80021bc <motion_hw_set_dir>
            motion_hw_enable(axis, 1u);      /* ativo em baixo no TMC5160 */
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fc68 	bl	800223c <motion_hw_enable>
            g_encoder_origin[axis] = g_encoder_position[axis];
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	7df9      	ldrb	r1, [r7, #23]
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <motion_demo_set_continuous+0x140>)
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	4819      	ldr	r0, [pc, #100]	@ (80039e0 <motion_demo_set_continuous+0x144>)
 800397c:	00c9      	lsls	r1, r1, #3
 800397e:	4401      	add	r1, r0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	3301      	adds	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d9a0      	bls.n	80038d2 <motion_demo_set_continuous+0x36>
        }
        g_status.state = MOTION_RUNNING;
 8003990:	4b14      	ldr	r3, [pc, #80]	@ (80039e4 <motion_demo_set_continuous+0x148>)
 8003992:	2202      	movs	r2, #2
 8003994:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8003996:	f7fe fdd9 	bl	800254c <motion_refresh_status_locked>
 800399a:	e00b      	b.n	80039b4 <motion_demo_set_continuous+0x118>
    } else {
        motion_stop_all_axes_locked();
 800399c:	f7fe ff1c 	bl	80027d8 <motion_stop_all_axes_locked>
        motion_queue_clear_locked();
 80039a0:	f7fe ff70 	bl	8002884 <motion_queue_clear_locked>
        g_has_active_segment = 0u;
 80039a4:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <motion_demo_set_continuous+0x12c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
        g_status.state = MOTION_IDLE;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	@ (80039e4 <motion_demo_set_continuous+0x148>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 80039b0:	f7fe fdcc 	bl	800254c <motion_refresh_status_locked>
    }
    motion_unlock(primask);
 80039b4:	6938      	ldr	r0, [r7, #16]
 80039b6:	f7fe fd1e 	bl	80023f6 <motion_unlock>
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000cc0 	.word	0x20000cc0
 80039c8:	2000015c 	.word	0x2000015c
 80039cc:	200000cc 	.word	0x200000cc
 80039d0:	20000010 	.word	0x20000010
 80039d4:	0800f600 	.word	0x0800f600
 80039d8:	00030d40 	.word	0x00030d40
 80039dc:	20000c68 	.word	0x20000c68
 80039e0:	20000c90 	.word	0x20000c90
 80039e4:	200000c4 	.word	0x200000c4

080039e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
    if (!htim) return;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00f      	beq.n	8003a16 <HAL_TIM_PeriodElapsedCallback+0x2e>
    if (htim->Instance == TIM6) {
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a09      	ldr	r2, [pc, #36]	@ (8003a20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d102      	bne.n	8003a06 <HAL_TIM_PeriodElapsedCallback+0x1e>
        motion_on_tim6_tick();
 8003a00:	f7ff fae4 	bl	8002fcc <motion_on_tim6_tick>
 8003a04:	e008      	b.n	8003a18 <HAL_TIM_PeriodElapsedCallback+0x30>
    } else if (htim->Instance == TIM7) {
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a06      	ldr	r2, [pc, #24]	@ (8003a24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d103      	bne.n	8003a18 <HAL_TIM_PeriodElapsedCallback+0x30>
        motion_on_tim7_tick();
 8003a10:	f7ff fc4c 	bl	80032ac <motion_on_tim7_tick>
 8003a14:	e000      	b.n	8003a18 <HAL_TIM_PeriodElapsedCallback+0x30>
    if (!htim) return;
 8003a16:	bf00      	nop
    } else {
        (void)htim;
    }
}
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40001000 	.word	0x40001000
 8003a24:	40001400 	.word	0x40001400

08003a28 <motion_emergency_stop>:

/* ===== API pública auxiliar ===== */
void motion_emergency_stop(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
    uint32_t primask = motion_lock();
 8003a2e:	f7fe fcd1 	bl	80023d4 <motion_lock>
 8003a32:	6078      	str	r0, [r7, #4]

    g_demo_continuous = 0u;
 8003a34:	4b10      	ldr	r3, [pc, #64]	@ (8003a78 <motion_emergency_stop+0x50>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
    motion_stop_all_axes_locked();
 8003a3a:	f7fe fecd 	bl	80027d8 <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 8003a3e:	f7fe ff21 	bl	8002884 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 8003a42:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <motion_emergency_stop+0x54>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]

    g_status.state = MOTION_STOPPING;
 8003a48:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <motion_emergency_stop+0x58>)
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8003a4e:	f7fe fd7d 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe fccf 	bl	80023f6 <motion_unlock>

    primask = motion_lock();
 8003a58:	f7fe fcbc 	bl	80023d4 <motion_lock>
 8003a5c:	6078      	str	r0, [r7, #4]
    g_status.state = MOTION_IDLE;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <motion_emergency_stop+0x58>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8003a64:	f7fe fd72 	bl	800254c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fe fcc4 	bl	80023f6 <motion_unlock>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000cc0 	.word	0x20000cc0
 8003a7c:	2000015c 	.word	0x2000015c
 8003a80:	200000c4 	.word	0x200000c4

08003a84 <motion_demo_is_active>:

uint8_t motion_demo_is_active(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
    return g_demo_continuous ? 1u : 0u;
 8003a88:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <motion_demo_is_active+0x20>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <motion_demo_is_active+0x12>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <motion_demo_is_active+0x14>
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000cc0 	.word	0x20000cc0

08003aa8 <motion_demo_cycle_speed>:

void motion_demo_cycle_speed(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
    /* Avança índice (0..3) */
    g_demo_speed_idx = (uint8_t)((g_demo_speed_idx + 1u) & 0x3u);
 8003aae:	4b21      	ldr	r3, [pc, #132]	@ (8003b34 <motion_demo_cycle_speed+0x8c>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b34 <motion_demo_cycle_speed+0x8c>)
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Se demo está ativo, atualiza v_target_sps imediatamente (rampa cuida do resto) */
    if (g_demo_continuous) {
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <motion_demo_cycle_speed+0x90>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02f      	beq.n	8003b2c <motion_demo_cycle_speed+0x84>
        uint16_t vtab = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8003acc:	4b19      	ldr	r3, [pc, #100]	@ (8003b34 <motion_demo_cycle_speed+0x8c>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	4a19      	ldr	r2, [pc, #100]	@ (8003b3c <motion_demo_cycle_speed+0x94>)
 8003ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003adc:	80bb      	strh	r3, [r7, #4]
        uint32_t primask = motion_lock();
 8003ade:	f7fe fc79 	bl	80023d4 <motion_lock>
 8003ae2:	6038      	str	r0, [r7, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	71fb      	strb	r3, [r7, #7]
 8003ae8:	e01a      	b.n	8003b20 <motion_demo_cycle_speed+0x78>
            g_axis_state[axis].velocity_per_tick = vtab;
 8003aea:	79fa      	ldrb	r2, [r7, #7]
 8003aec:	4914      	ldr	r1, [pc, #80]	@ (8003b40 <motion_demo_cycle_speed+0x98>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	440b      	add	r3, r1
 8003af8:	330c      	adds	r3, #12
 8003afa:	88ba      	ldrh	r2, [r7, #4]
 8003afc:	801a      	strh	r2, [r3, #0]
            g_axis_state[axis].v_target_sps      = ((uint32_t)vtab) * 1000u;
 8003afe:	88bb      	ldrh	r3, [r7, #4]
 8003b00:	79fa      	ldrb	r2, [r7, #7]
 8003b02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b06:	fb03 f101 	mul.w	r1, r3, r1
 8003b0a:	480d      	ldr	r0, [pc, #52]	@ (8003b40 <motion_demo_cycle_speed+0x98>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	4403      	add	r3, r0
 8003b16:	3320      	adds	r3, #32
 8003b18:	6019      	str	r1, [r3, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	71fb      	strb	r3, [r7, #7]
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d9e1      	bls.n	8003aea <motion_demo_cycle_speed+0x42>
            /* dda_inc será recalculado no próximo tick do TIM7 conforme v_actual */
        }
        motion_unlock(primask);
 8003b26:	6838      	ldr	r0, [r7, #0]
 8003b28:	f7fe fc65 	bl	80023f6 <motion_unlock>
    }
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000010 	.word	0x20000010
 8003b38:	20000cc0 	.word	0x20000cc0
 8003b3c:	0800f600 	.word	0x0800f600
 8003b40:	200000cc 	.word	0x200000cc

08003b44 <probe_service_init>:

LOG_SVC_DEFINE(LOG_SVC_PROBE, "probe");

static probe_status_t g_probe;

void probe_service_init(void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af04      	add	r7, sp, #16
	g_probe.axis_done_mask = 0;
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <probe_service_init+0x40>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
	g_probe.error_flags = 0;
 8003b50:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <probe_service_init+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	705a      	strb	r2, [r3, #1]
	g_probe.latched_pos_x = g_probe.latched_pos_y = g_probe.latched_pos_z = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <probe_service_init+0x40>)
 8003b5a:	60d3      	str	r3, [r2, #12]
 8003b5c:	4a09      	ldr	r2, [pc, #36]	@ (8003b84 <probe_service_init+0x40>)
 8003b5e:	6093      	str	r3, [r2, #8]
 8003b60:	4a08      	ldr	r2, [pc, #32]	@ (8003b84 <probe_service_init+0x40>)
 8003b62:	6053      	str	r3, [r2, #4]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8003b64:	4a08      	ldr	r2, [pc, #32]	@ (8003b88 <probe_service_init+0x44>)
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <probe_service_init+0x48>)
 8003b68:	9302      	str	r3, [sp, #8]
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <probe_service_init+0x4c>)
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <probe_service_init+0x50>)
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	4613      	mov	r3, r2
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	2004      	movs	r0, #4
 8003b7a:	f7fe fa29 	bl	8001fd0 <log_event_auto>
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000cc4 	.word	0x20000cc4
 8003b88:	0800f284 	.word	0x0800f284
 8003b8c:	0800f28c 	.word	0x0800f28c
 8003b90:	0800f290 	.word	0x0800f290
 8003b94:	0800f294 	.word	0x0800f294

08003b98 <probe_on_move_probe_level>:
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af04      	add	r7, sp, #16
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 8003ba2:	4a08      	ldr	r2, [pc, #32]	@ (8003bc4 <probe_on_move_probe_level+0x2c>)
 8003ba4:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <probe_on_move_probe_level+0x30>)
 8003ba6:	9302      	str	r3, [sp, #8]
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <probe_on_move_probe_level+0x34>)
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	4b08      	ldr	r3, [pc, #32]	@ (8003bd0 <probe_on_move_probe_level+0x38>)
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	2004      	movs	r0, #4
 8003bb8:	f7fe fa0a 	bl	8001fd0 <log_event_auto>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	0800f284 	.word	0x0800f284
 8003bc8:	0800f29c 	.word	0x0800f29c
 8003bcc:	0800f290 	.word	0x0800f290
 8003bd0:	0800f2ac 	.word	0x0800f2ac

08003bd4 <safety_service_init>:

LOG_SVC_DEFINE(LOG_SVC_SAFETY, "safety");

static volatile safety_state_t g_state = SAFETY_NORMAL;

void safety_service_init(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af04      	add	r7, sp, #16
	g_state = SAFETY_NORMAL;
 8003bda:	4b09      	ldr	r3, [pc, #36]	@ (8003c00 <safety_service_init+0x2c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "normal");
 8003be0:	4a08      	ldr	r2, [pc, #32]	@ (8003c04 <safety_service_init+0x30>)
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <safety_service_init+0x34>)
 8003be4:	9302      	str	r3, [sp, #8]
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <safety_service_init+0x38>)
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <safety_service_init+0x3c>)
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	2005      	movs	r0, #5
 8003bf6:	f7fe f9eb 	bl	8001fd0 <log_event_auto>
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000cd4 	.word	0x20000cd4
 8003c04:	0800f2c0 	.word	0x0800f2c0
 8003c08:	0800f2c8 	.word	0x0800f2c8
 8003c0c:	0800f2d0 	.word	0x0800f2d0
 8003c10:	0800f2d4 	.word	0x0800f2d4

08003c14 <safety_estop_assert>:
void safety_estop_assert(void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af04      	add	r7, sp, #16
	g_state = SAFETY_ESTOP;
 8003c1a:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <safety_estop_assert+0x2c>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_ASSERT, PROTO_OK, "estop", "assert");
 8003c20:	4a08      	ldr	r2, [pc, #32]	@ (8003c44 <safety_estop_assert+0x30>)
 8003c22:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <safety_estop_assert+0x34>)
 8003c24:	9302      	str	r3, [sp, #8]
 8003c26:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <safety_estop_assert+0x38>)
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <safety_estop_assert+0x3c>)
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	2200      	movs	r2, #0
 8003c32:	210a      	movs	r1, #10
 8003c34:	2005      	movs	r0, #5
 8003c36:	f7fe f9cb 	bl	8001fd0 <log_event_auto>
}
 8003c3a:	bf00      	nop
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000cd4 	.word	0x20000cd4
 8003c44:	0800f2c0 	.word	0x0800f2c0
 8003c48:	0800f2dc 	.word	0x0800f2dc
 8003c4c:	0800f2d0 	.word	0x0800f2d0
 8003c50:	0800f2e4 	.word	0x0800f2e4

08003c54 <safety_estop_release>:
void safety_estop_release(void) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af04      	add	r7, sp, #16
	if (g_state == SAFETY_ESTOP)
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <safety_estop_release+0x38>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d102      	bne.n	8003c6a <safety_estop_release+0x16>
		g_state = SAFETY_RECOVERY_WAIT;
 8003c64:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <safety_estop_release+0x38>)
 8003c66:	2202      	movs	r2, #2
 8003c68:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_RELEASE, PROTO_OK, "estop", "release");
 8003c6a:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <safety_estop_release+0x3c>)
 8003c6c:	4b09      	ldr	r3, [pc, #36]	@ (8003c94 <safety_estop_release+0x40>)
 8003c6e:	9302      	str	r3, [sp, #8]
 8003c70:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <safety_estop_release+0x44>)
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <safety_estop_release+0x48>)
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	210b      	movs	r1, #11
 8003c7e:	2005      	movs	r0, #5
 8003c80:	f7fe f9a6 	bl	8001fd0 <log_event_auto>
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000cd4 	.word	0x20000cd4
 8003c90:	0800f2c0 	.word	0x0800f2c0
 8003c94:	0800f2ec 	.word	0x0800f2ec
 8003c98:	0800f2d0 	.word	0x0800f2d0
 8003c9c:	0800f2e4 	.word	0x0800f2e4

08003ca0 <safety_is_safe>:
int safety_is_safe(void) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
	return g_state == SAFETY_NORMAL;
 8003ca4:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <safety_is_safe+0x20>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf0c      	ite	eq
 8003cae:	2301      	moveq	r3, #1
 8003cb0:	2300      	movne	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000cd4 	.word	0x20000cd4

08003cc4 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	68b8      	ldr	r0, [r7, #8]
 8003cd4:	f7ff fc20 	bl	8003518 <motion_on_move_queue_add>
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	68b8      	ldr	r0, [r7, #8]
 8003cf0:	f7ff fcb8 	bl	8003664 <motion_on_move_queue_status>
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	68b8      	ldr	r0, [r7, #8]
 8003d0c:	f7ff fd02 	bl	8003714 <motion_on_start_move>
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	68b8      	ldr	r0, [r7, #8]
 8003d28:	f7fd fc26 	bl	8001578 <home_on_move_home>
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	68b8      	ldr	r0, [r7, #8]
 8003d44:	f7ff ff28 	bl	8003b98 <probe_on_move_probe_level>
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	68b8      	ldr	r0, [r7, #8]
 8003d60:	f7ff fd40 	bl	80037e4 <motion_on_move_end>
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	68b8      	ldr	r0, [r7, #8]
 8003d7c:	f7fd ff60 	bl	8001c40 <led_on_led_ctrl>
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	if (!h)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01b      	beq.n	8003dfe <services_register_handlers+0x46>
		return;
	h->on_move_queue_add = h_move_queue_add;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a10      	ldr	r2, [pc, #64]	@ (8003e0c <services_register_handlers+0x54>)
 8003dca:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a10      	ldr	r2, [pc, #64]	@ (8003e10 <services_register_handlers+0x58>)
 8003dd0:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003e14 <services_register_handlers+0x5c>)
 8003dd6:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0f      	ldr	r2, [pc, #60]	@ (8003e18 <services_register_handlers+0x60>)
 8003ddc:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a0e      	ldr	r2, [pc, #56]	@ (8003e1c <services_register_handlers+0x64>)
 8003de2:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e20 <services_register_handlers+0x68>)
 8003de8:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a0d      	ldr	r2, [pc, #52]	@ (8003e24 <services_register_handlers+0x6c>)
 8003dee:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0d      	ldr	r2, [pc, #52]	@ (8003e28 <services_register_handlers+0x70>)
 8003df4:	61da      	str	r2, [r3, #28]
	h->on_test_hello = h_test_hello;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <services_register_handlers+0x74>)
 8003dfa:	621a      	str	r2, [r3, #32]
 8003dfc:	e000      	b.n	8003e00 <services_register_handlers+0x48>
		return;
 8003dfe:	bf00      	nop
}
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	08003cc5 	.word	0x08003cc5
 8003e10:	08003ce1 	.word	0x08003ce1
 8003e14:	08003cfd 	.word	0x08003cfd
 8003e18:	08003d19 	.word	0x08003d19
 8003e1c:	08003d35 	.word	0x08003d35
 8003e20:	08003d51 	.word	0x08003d51
 8003e24:	08003d6d 	.word	0x08003d6d
 8003e28:	08003d89 	.word	0x08003d89
 8003e2c:	08003da1 	.word	0x08003da1

08003e30 <tx_fill_left_zero_right_filler>:
/**
 * @brief Preenche o buffer de TX com 22×0x00 à esquerda e 20×SPI_FILL_BYTE à direita.
 * @param dst Ponteiro para o buffer de TX (tamanho = 42).
 */
static inline void tx_fill_left_zero_right_filler(uint8_t *dst)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
    memset(&dst[0],                 0x00,           RESP_LEFT_PAD_LEN); /* 22×0x00  */
 8003e38:	2216      	movs	r2, #22
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f00a f941 	bl	800e0c4 <memset>
    memset(&dst[RESP_LEFT_PAD_LEN], SPI_FILL_BYTE,  RESP_RIGHT_LEN);    /* 20×filler */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3316      	adds	r3, #22
 8003e46:	2214      	movs	r2, #20
 8003e48:	21a5      	movs	r1, #165	@ 0xa5
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f00a f93a 	bl	800e0c4 <memset>
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <is_fill42>:
 * @param buf Buffer de entrada (tamanho = 42).
 * @param val Valor esperado em todos os bytes.
 * @return 1 se todos os bytes são 'val', 0 caso contrário.
 */
static int is_fill42(const uint8_t *buf, uint8_t val)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e00b      	b.n	8003e82 <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <is_fill42+0x24>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e006      	b.n	8003e8a <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b29      	cmp	r3, #41	@ 0x29
 8003e86:	d9f0      	bls.n	8003e6a <is_fill42+0x12>
    return 1;
 8003e88:	2301      	movs	r3, #1
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <find_frame>:
 * @param off  (out) Offset de início do quadro (REQ_HEADER).
 * @param len  (out) Comprimento do quadro (inclui REQ_TAIL).
 * @return 1 se encontrou, 0 caso contrário.
 */
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b087      	sub	sp, #28
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 8003ea6:	e002      	b.n	8003eae <find_frame+0x18>
 8003ea8:	8afb      	ldrh	r3, [r7, #22]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	82fb      	strh	r3, [r7, #22]
 8003eae:	8afb      	ldrh	r3, [r7, #22]
 8003eb0:	2b29      	cmp	r3, #41	@ 0x29
 8003eb2:	d805      	bhi.n	8003ec0 <find_frame+0x2a>
 8003eb4:	8afb      	ldrh	r3, [r7, #22]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2baa      	cmp	r3, #170	@ 0xaa
 8003ebe:	d1f3      	bne.n	8003ea8 <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 8003ec0:	8afb      	ldrh	r3, [r7, #22]
 8003ec2:	2b29      	cmp	r3, #41	@ 0x29
 8003ec4:	d901      	bls.n	8003eca <find_frame+0x34>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e01d      	b.n	8003f06 <find_frame+0x70>

    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8003eca:	8afb      	ldrh	r3, [r7, #22]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	82bb      	strh	r3, [r7, #20]
 8003ed0:	e015      	b.n	8003efe <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 8003ed2:	8abb      	ldrh	r3, [r7, #20]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b55      	cmp	r3, #85	@ 0x55
 8003edc:	d10c      	bne.n	8003ef8 <find_frame+0x62>
            *off = i;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	8afa      	ldrh	r2, [r7, #22]
 8003ee2:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8003ee4:	8aba      	ldrh	r2, [r7, #20]
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3301      	adds	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	801a      	strh	r2, [r3, #0]
            return 1;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e006      	b.n	8003f06 <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 8003ef8:	8abb      	ldrh	r3, [r7, #20]
 8003efa:	3301      	adds	r3, #1
 8003efc:	82bb      	strh	r3, [r7, #20]
 8003efe:	8abb      	ldrh	r3, [r7, #20]
 8003f00:	2b29      	cmp	r3, #41	@ 0x29
 8003f02:	d9e6      	bls.n	8003ed2 <find_frame+0x3c>
        }
    }
    return 0;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <prepare_next_tx>:
 *      * Se n > 20, trunca para os 20 últimos bytes.
 *  - SEM resposta:
 *      * 22×0x00 + 20×SPI_FILL_BYTE (poll).
 */
static void prepare_next_tx(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	@ 0x38
 8003f18:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (!g_resp_fifo) {
 8003f1e:	4b21      	ldr	r3, [pc, #132]	@ (8003fa4 <prepare_next_tx+0x90>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <prepare_next_tx+0x20>
        /* Sem fila -> 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8003f26:	4820      	ldr	r0, [pc, #128]	@ (8003fa8 <prepare_next_tx+0x94>)
 8003f28:	f7ff ff82 	bl	8003e30 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fac <prepare_next_tx+0x98>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	e034      	b.n	8003f9e <prepare_next_tx+0x8a>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 8003f34:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <prepare_next_tx+0x90>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1d39      	adds	r1, r7, #4
 8003f3a:	222a      	movs	r2, #42	@ 0x2a
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fd f97b 	bl	8001238 <resp_fifo_pop>
 8003f42:	6378      	str	r0, [r7, #52]	@ 0x34
    if (n > 0) {
 8003f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dd23      	ble.n	8003f92 <prepare_next_tx+0x7e>
        /* Zera TODO o frame para evitar A5 antes do payload */
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 8003f4a:	222a      	movs	r2, #42	@ 0x2a
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4816      	ldr	r0, [pc, #88]	@ (8003fa8 <prepare_next_tx+0x94>)
 8003f50:	f00a f8b8 	bl	800e0c4 <memset>

        /* Copia o payload alinhado à direita (trunca se necessário) */
        uint16_t to_copy = (uint16_t)((n > (int)RESP_RIGHT_LEN) ? RESP_RIGHT_LEN : n);
 8003f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f56:	2b14      	cmp	r3, #20
 8003f58:	dc02      	bgt.n	8003f60 <prepare_next_tx+0x4c>
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	e000      	b.n	8003f62 <prepare_next_tx+0x4e>
 8003f60:	2314      	movs	r3, #20
 8003f62:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint16_t dst_off = (uint16_t)(APP_SPI_DMA_BUF_LEN - to_copy); /* 42 - to_copy */
 8003f64:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f66:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8003f6a:	863b      	strh	r3, [r7, #48]	@ 0x30
        uint16_t src_off = (uint16_t)(n - to_copy);                   /* últimos 'to_copy' bytes */
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        memcpy(&g_spi_tx_dma_buf[dst_off], &tmp[src_off], to_copy);
 8003f76:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f78:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa8 <prepare_next_tx+0x94>)
 8003f7a:	1898      	adds	r0, r3, r2
 8003f7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003f7e:	1d3a      	adds	r2, r7, #4
 8003f80:	4413      	add	r3, r2
 8003f82:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8003f84:	4619      	mov	r1, r3
 8003f86:	f00a f928 	bl	800e1da <memcpy>
        g_state = APP_SPI_PENDING;
 8003f8a:	4b08      	ldr	r3, [pc, #32]	@ (8003fac <prepare_next_tx+0x98>)
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e005      	b.n	8003f9e <prepare_next_tx+0x8a>
    } else {
        /* Sem resposta -> mantém contrato visual: 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8003f92:	4805      	ldr	r0, [pc, #20]	@ (8003fa8 <prepare_next_tx+0x94>)
 8003f94:	f7ff ff4c 	bl	8003e30 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <prepare_next_tx+0x98>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
    }
}
 8003f9e:	3738      	adds	r7, #56	@ 0x38
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000d44 	.word	0x20000d44
 8003fa8:	20000d74 	.word	0x20000d74
 8003fac:	20000da0 	.word	0x20000da0

08003fb0 <restart_spi_dma>:
/**
 * @brief Reinicia uma transação SPI por DMA (não bloqueante).
 * Seta g_state=BUSY em caso de sucesso; seta g_spi_error_flag em erro.
 */
static void restart_spi_dma(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 8003fb4:	480d      	ldr	r0, [pc, #52]	@ (8003fec <restart_spi_dma+0x3c>)
 8003fb6:	f005 fbbb 	bl	8009730 <HAL_SPI_GetState>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d003      	beq.n	8003fc8 <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <restart_spi_dma+0x40>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
        return;
 8003fc6:	e00f      	b.n	8003fe8 <restart_spi_dma+0x38>
    }

    if (HAL_SPI_TransmitReceive_DMA(&hspi2,
 8003fc8:	232a      	movs	r3, #42	@ 0x2a
 8003fca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <restart_spi_dma+0x44>)
 8003fcc:	490a      	ldr	r1, [pc, #40]	@ (8003ff8 <restart_spi_dma+0x48>)
 8003fce:	4807      	ldr	r0, [pc, #28]	@ (8003fec <restart_spi_dma+0x3c>)
 8003fd0:	f005 f8ec 	bl	80091ac <HAL_SPI_TransmitReceive_DMA>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 8003fda:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <restart_spi_dma+0x40>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
        return;
 8003fe0:	e002      	b.n	8003fe8 <restart_spi_dma+0x38>
    }

    g_state = APP_SPI_BUSY;
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <restart_spi_dma+0x4c>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
}
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000de4 	.word	0x20000de4
 8003ff0:	20000d9f 	.word	0x20000d9f
 8003ff4:	20000d48 	.word	0x20000d48
 8003ff8:	20000d74 	.word	0x20000d74
 8003ffc:	20000da0 	.word	0x20000da0

08004000 <app_init>:
/**
 * @brief Inicializa roteador, fila de respostas e a primeira rodada DMA.
 * Preenche o primeiro TX como 22×0x00 + 20×filler.
 */
void app_init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
    /* Registra serviços no router (o projeto deve prover os handlers) */
    memset(&g_handlers, 0, sizeof g_handlers);
 8004004:	2224      	movs	r2, #36	@ 0x24
 8004006:	2100      	movs	r1, #0
 8004008:	4813      	ldr	r0, [pc, #76]	@ (8004058 <app_init+0x58>)
 800400a:	f00a f85b 	bl	800e0c4 <memset>
    services_register_handlers(&g_handlers);
 800400e:	4812      	ldr	r0, [pc, #72]	@ (8004058 <app_init+0x58>)
 8004010:	f7ff fed2 	bl	8003db8 <services_register_handlers>

    /* Inicializa serviços (ordem: log/diag, safety, periféricos simples, motion) */
#if LOG_ENABLE
    log_service_init();
 8004014:	f7fd ff30 	bl	8001e78 <log_service_init>
#endif
    safety_service_init();
 8004018:	f7ff fddc 	bl	8003bd4 <safety_service_init>
    led_service_init();
 800401c:	f7fd fd78 	bl	8001b10 <led_service_init>
    home_service_init();
 8004020:	f7fd fa86 	bl	8001530 <home_service_init>
    probe_service_init();
 8004024:	f7ff fd8e 	bl	8003b44 <probe_service_init>
    motion_service_init();
 8004028:	f7fe ff2e 	bl	8002e88 <motion_service_init>

    g_resp_fifo = resp_fifo_create();
 800402c:	f7fd f8a7 	bl	800117e <resp_fifo_create>
 8004030:	4603      	mov	r3, r0
 8004032:	4a0a      	ldr	r2, [pc, #40]	@ (800405c <app_init+0x5c>)
 8004034:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 8004036:	4b09      	ldr	r3, [pc, #36]	@ (800405c <app_init+0x5c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a07      	ldr	r2, [pc, #28]	@ (8004058 <app_init+0x58>)
 800403c:	4619      	mov	r1, r3
 800403e:	4808      	ldr	r0, [pc, #32]	@ (8004060 <app_init+0x60>)
 8004040:	f7fd f940 	bl	80012c4 <router_init>

    /* Primeiro frame: 22×0x00 + 20×filler (evita A5 no início quando não há resposta) */
    tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8004044:	4807      	ldr	r0, [pc, #28]	@ (8004064 <app_init+0x64>)
 8004046:	f7ff fef3 	bl	8003e30 <tx_fill_left_zero_right_filler>

    restart_spi_dma();
 800404a:	f7ff ffb1 	bl	8003fb0 <restart_spi_dma>
    g_state = APP_SPI_READY;
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <app_init+0x68>)
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000d20 	.word	0x20000d20
 800405c:	20000d44 	.word	0x20000d44
 8004060:	20000cd8 	.word	0x20000cd8
 8004064:	20000d74 	.word	0x20000d74
 8004068:	20000da0 	.word	0x20000da0

0800406c <app_poll>:
/**
 * @brief Loop de serviço: processa RX (quando há rodada concluída),
 *        prepara o próximo TX e rearma o DMA.
 */
void app_poll(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
    /* Só processa quando um round DMA foi concluído pelo HAL */
    if (!g_spi_round_done) return;
 8004072:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <app_poll+0x6c>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d028      	beq.n	80040ce <app_poll+0x62>
    g_spi_round_done = 0u;
 800407c:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <app_poll+0x6c>)
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]

    /* 1) Interpretar o RX atual */
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 8004082:	213c      	movs	r1, #60	@ 0x3c
 8004084:	4815      	ldr	r0, [pc, #84]	@ (80040dc <app_poll+0x70>)
 8004086:	f7ff fee7 	bl	8003e58 <is_fill42>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d119      	bne.n	80040c4 <app_poll+0x58>
        /* 42×0x3C => cliente apenas leu respostas; não alimenta router */
    } else {
        /* Tenta extrair [REQ_HEADER ... REQ_TAIL] e empurra para o router */
        uint16_t off = 0, len = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	80fb      	strh	r3, [r7, #6]
 8004094:	2300      	movs	r3, #0
 8004096:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 8004098:	1d3a      	adds	r2, r7, #4
 800409a:	1dbb      	adds	r3, r7, #6
 800409c:	4619      	mov	r1, r3
 800409e:	480f      	ldr	r0, [pc, #60]	@ (80040dc <app_poll+0x70>)
 80040a0:	f7ff fef9 	bl	8003e96 <find_frame>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <app_poll+0x70>)
 80040b0:	4413      	add	r3, r2
 80040b2:	88ba      	ldrh	r2, [r7, #4]
 80040b4:	4619      	mov	r1, r3
 80040b6:	480a      	ldr	r0, [pc, #40]	@ (80040e0 <app_poll+0x74>)
 80040b8:	f7fd fa12 	bl	80014e0 <router_feed_bytes>
 80040bc:	e002      	b.n	80040c4 <app_poll+0x58>
        } else {
            /* Quadro inválido/parcial ou outro padrão -> marca erro leve */
            g_spi_error_flag = 1u;
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <app_poll+0x78>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
        }
    }

    /* 2) Preparar TX (resposta à direita ou 22×0x00 + 20×filler) */
    prepare_next_tx();
 80040c4:	f7ff ff26 	bl	8003f14 <prepare_next_tx>

    /* 3) Reiniciar DMA para o próximo round */
    restart_spi_dma();
 80040c8:	f7ff ff72 	bl	8003fb0 <restart_spi_dma>
 80040cc:	e000      	b.n	80040d0 <app_poll+0x64>
    if (!g_spi_round_done) return;
 80040ce:	bf00      	nop
}
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000d9e 	.word	0x20000d9e
 80040dc:	20000d48 	.word	0x20000d48
 80040e0:	20000cd8 	.word	0x20000cd8
 80040e4:	20000d9f 	.word	0x20000d9f

080040e8 <app_spi_isr_txrx_done>:
/**
 * @brief Callback para “transfer complete” do SPI+DMA.
 * Apenas sinaliza o loop principal (app_poll) via g_spi_round_done.
 */
void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a07      	ldr	r2, [pc, #28]	@ (8004118 <app_spi_isr_txrx_done+0x30>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d105      	bne.n	800410c <app_spi_isr_txrx_done+0x24>
    g_spi_round_done = 1u;
 8004100:	4b06      	ldr	r3, [pc, #24]	@ (800411c <app_spi_isr_txrx_done+0x34>)
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e002      	b.n	800410e <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 800410c:	bf00      	nop
}
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40003800 	.word	0x40003800
 800411c:	20000d9e 	.word	0x20000d9e

08004120 <app_resp_push>:
 * @param frame Buffer com a resposta (número de bytes = len).
 * @param len   Tamanho da resposta (até 20 bytes). >20 retorna erro.
 * @return 0 em sucesso; PROTO_ERR_ARG ou PROTO_ERR_RANGE em erro.
 */
int app_resp_push(const uint8_t *frame, uint32_t len)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 800412a:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <app_resp_push+0x48>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <app_resp_push+0x1e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <app_resp_push+0x1e>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 800413e:	f04f 33ff 	mov.w	r3, #4294967295
 8004142:	e00d      	b.n	8004160 <app_resp_push+0x40>
    }
    if (len > RESP_RIGHT_LEN) {
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b14      	cmp	r3, #20
 8004148:	d902      	bls.n	8004150 <app_resp_push+0x30>
        return PROTO_ERR_RANGE; /* impede >20 bytes */
 800414a:	f06f 0303 	mvn.w	r3, #3
 800414e:	e007      	b.n	8004160 <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <app_resp_push+0x48>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4618      	mov	r0, r3
 800415a:	f7fd f819 	bl	8001190 <resp_fifo_push>
 800415e:	4603      	mov	r3, r0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000d44 	.word	0x20000d44

0800416c <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08e      	sub	sp, #56	@ 0x38
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 8004174:	f107 0314 	add.w	r3, r7, #20
 8004178:	2224      	movs	r2, #36	@ 0x24
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f009 ffa1 	bl	800e0c4 <memset>
    TIM_MasterConfigTypeDef master = {0};
 8004182:	f107 0308 	add.w	r3, r7, #8
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 800418e:	2303      	movs	r3, #3
 8004190:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004196:	2301      	movs	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 80041a2:	2300      	movs	r3, #0
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041a6:	2301      	movs	r3, #1
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 80041aa:	2300      	movs	r3, #0
 80041ac:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f006 fba7 	bl	800a90c <HAL_TIM_Encoder_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 80041c4:	f000 fb7a 	bl	80048bc <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f008 fa7c 	bl	800c6d4 <HAL_TIMEx_MasterConfigSynchronization>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 80041e2:	f000 fb6b 	bl	80048bc <Error_Handler>
    }
}
 80041e6:	bf00      	nop
 80041e8:	3738      	adds	r7, #56	@ 0x38
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b08a      	sub	sp, #40	@ 0x28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 80041fa:	f107 0314 	add.w	r3, r7, #20
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	60da      	str	r2, [r3, #12]
 8004208:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 800421a:	f107 0314 	add.w	r3, r7, #20
 800421e:	4619      	mov	r1, r3
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f001 fe1f 	bl	8005e64 <HAL_GPIO_Init>
}
 8004226:	bf00      	nop
 8004228:	3728      	adds	r7, #40	@ 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8004244:	2203      	movs	r2, #3
 8004246:	2113      	movs	r1, #19
 8004248:	4825      	ldr	r0, [pc, #148]	@ (80042e0 <board_config_apply_motion_gpio+0xb0>)
 800424a:	f7ff ffd0 	bl	80041ee <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 800424e:	2203      	movs	r2, #3
 8004250:	2104      	movs	r1, #4
 8004252:	4823      	ldr	r0, [pc, #140]	@ (80042e0 <board_config_apply_motion_gpio+0xb0>)
 8004254:	f7ff ffcb 	bl	80041ee <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8004258:	2203      	movs	r2, #3
 800425a:	210c      	movs	r1, #12
 800425c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004260:	f7ff ffc5 	bl	80041ee <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8004264:	2200      	movs	r2, #0
 8004266:	2130      	movs	r1, #48	@ 0x30
 8004268:	481e      	ldr	r0, [pc, #120]	@ (80042e4 <board_config_apply_motion_gpio+0xb4>)
 800426a:	f7ff ffc0 	bl	80041ee <configure_output>
    configure_output(GPIOD, GPIO_PIN_14, GPIO_SPEED_FREQ_LOW);
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004274:	481c      	ldr	r0, [pc, #112]	@ (80042e8 <board_config_apply_motion_gpio+0xb8>)
 8004276:	f7ff ffba 	bl	80041ee <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 800427a:	2200      	movs	r2, #0
 800427c:	2117      	movs	r1, #23
 800427e:	4818      	ldr	r0, [pc, #96]	@ (80042e0 <board_config_apply_motion_gpio+0xb0>)
 8004280:	f002 f89c 	bl	80063bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 8004284:	2200      	movs	r2, #0
 8004286:	210c      	movs	r1, #12
 8004288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800428c:	f002 f896 	bl	80063bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);     /* EN_X desabilitado (alto) */
 8004290:	2201      	movs	r2, #1
 8004292:	2110      	movs	r1, #16
 8004294:	4813      	ldr	r0, [pc, #76]	@ (80042e4 <board_config_apply_motion_gpio+0xb4>)
 8004296:	f002 f891 	bl	80063bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);   /* EN_Y habilitado (baixo) */
 800429a:	2200      	movs	r2, #0
 800429c:	2120      	movs	r1, #32
 800429e:	4811      	ldr	r0, [pc, #68]	@ (80042e4 <board_config_apply_motion_gpio+0xb4>)
 80042a0:	f002 f88c 	bl	80063bc <HAL_GPIO_WritePin>
    // EN_Z (PD14) ativo em nível baixo por solicitação: inicia habilitado
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80042a4:	2200      	movs	r2, #0
 80042a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80042aa:	480f      	ldr	r0, [pc, #60]	@ (80042e8 <board_config_apply_motion_gpio+0xb8>)
 80042ac:	f002 f886 	bl	80063bc <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 80042b0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80042b4:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 80042b6:	2301      	movs	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
     */
#if 0
    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;  /* PC0/PC1/PC2 como EXTI */
    HAL_GPIO_Init(GPIOC, &init);
#else
    init.Pin = GPIO_PIN_1;                             /* Somente PC1 como EXTI */
 80042ba:	2302      	movs	r3, #2
 80042bc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4808      	ldr	r0, [pc, #32]	@ (80042e4 <board_config_apply_motion_gpio+0xb4>)
 80042c4:	f001 fdce 	bl	8005e64 <HAL_GPIO_Init>
#endif

    init.Pin = GPIO_PIN_13;                            /* EXTI do PC13 permanece */
 80042c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042cc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4804      	ldr	r0, [pc, #16]	@ (80042e4 <board_config_apply_motion_gpio+0xb4>)
 80042d4:	f001 fdc6 	bl	8005e64 <HAL_GPIO_Init>
}
 80042d8:	bf00      	nop
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	48000400 	.word	0x48000400
 80042e4:	48000800 	.word	0x48000800
 80042e8:	48000c00 	.word	0x48000c00

080042ec <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim3);
 80042f0:	4803      	ldr	r0, [pc, #12]	@ (8004300 <board_config_force_encoder_quadrature+0x14>)
 80042f2:	f7ff ff3b 	bl	800416c <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 80042f6:	4803      	ldr	r0, [pc, #12]	@ (8004304 <board_config_force_encoder_quadrature+0x18>)
 80042f8:	f7ff ff38 	bl	800416c <configure_encoder_timer>
}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000edc 	.word	0x20000edc
 8004304:	20000f28 	.word	0x20000f28

08004308 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800430c:	2200      	movs	r2, #0
 800430e:	2100      	movs	r1, #0
 8004310:	2006      	movs	r0, #6
 8004312:	f001 fa11 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004316:	2006      	movs	r0, #6
 8004318:	f001 fa3a 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800431c:	2200      	movs	r2, #0
 800431e:	2100      	movs	r1, #0
 8004320:	2007      	movs	r0, #7
 8004322:	f001 fa09 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004326:	2007      	movs	r0, #7
 8004328:	f001 fa32 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800432c:	2200      	movs	r2, #0
 800432e:	2100      	movs	r1, #0
 8004330:	2008      	movs	r0, #8
 8004332:	f001 fa01 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004336:	2008      	movs	r0, #8
 8004338:	f001 fa2a 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800433c:	2200      	movs	r2, #0
 800433e:	2100      	movs	r1, #0
 8004340:	2028      	movs	r0, #40	@ 0x28
 8004342:	f001 f9f9 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004346:	2028      	movs	r0, #40	@ 0x28
 8004348:	f001 fa22 	bl	8005790 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800434c:	2200      	movs	r2, #0
 800434e:	2101      	movs	r1, #1
 8004350:	2036      	movs	r0, #54	@ 0x36
 8004352:	f001 f9f1 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004356:	2036      	movs	r0, #54	@ 0x36
 8004358:	f001 fa1a 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 800435c:	2200      	movs	r2, #0
 800435e:	2102      	movs	r1, #2
 8004360:	200e      	movs	r0, #14
 8004362:	f001 f9e9 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004366:	200e      	movs	r0, #14
 8004368:	f001 fa12 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2102      	movs	r1, #2
 8004370:	200f      	movs	r0, #15
 8004372:	f001 f9e1 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004376:	200f      	movs	r0, #15
 8004378:	f001 fa0a 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800437c:	2200      	movs	r2, #0
 800437e:	2103      	movs	r1, #3
 8004380:	2037      	movs	r0, #55	@ 0x37
 8004382:	f001 f9d9 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004386:	2037      	movs	r0, #55	@ 0x37
 8004388:	f001 fa02 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 800438c:	2200      	movs	r2, #0
 800438e:	2104      	movs	r1, #4
 8004390:	2025      	movs	r0, #37	@ 0x25
 8004392:	f001 f9d1 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004396:	2025      	movs	r0, #37	@ 0x25
 8004398:	f001 f9fa 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800439c:	2200      	movs	r2, #0
 800439e:	2105      	movs	r1, #5
 80043a0:	2024      	movs	r0, #36	@ 0x24
 80043a2:	f001 f9c9 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80043a6:	2024      	movs	r0, #36	@ 0x24
 80043a8:	f001 f9f2 	bl	8005790 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 80043ac:	2200      	movs	r2, #0
 80043ae:	2106      	movs	r1, #6
 80043b0:	2018      	movs	r0, #24
 80043b2:	f001 f9c1 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80043b6:	2018      	movs	r0, #24
 80043b8:	f001 f9ea 	bl	8005790 <HAL_NVIC_EnableIRQ>
}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}

080043c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <MX_DMA_Init+0x48>)
 80043c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004408 <MX_DMA_Init+0x48>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <MX_DMA_Init+0x48>)
 80043d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	607b      	str	r3, [r7, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2100      	movs	r1, #0
 80043e2:	200e      	movs	r0, #14
 80043e4:	f001 f9a8 	bl	8005738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80043e8:	200e      	movs	r0, #14
 80043ea:	f001 f9d1 	bl	8005790 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	200f      	movs	r0, #15
 80043f4:	f001 f9a0 	bl	8005738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80043f8:	200f      	movs	r0, #15
 80043fa:	f001 f9c9 	bl	8005790 <HAL_NVIC_EnableIRQ>

}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000

0800440c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	@ 0x30
 8004410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004412:	f107 031c 	add.w	r3, r7, #28
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	60da      	str	r2, [r3, #12]
 8004420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004422:	4b4d      	ldr	r3, [pc, #308]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004426:	4a4c      	ldr	r2, [pc, #304]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004428:	f043 0310 	orr.w	r3, r3, #16
 800442c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800442e:	4b4a      	ldr	r3, [pc, #296]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800443a:	4b47      	ldr	r3, [pc, #284]	@ (8004558 <MX_GPIO_Init+0x14c>)
 800443c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443e:	4a46      	ldr	r2, [pc, #280]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004446:	4b44      	ldr	r3, [pc, #272]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004452:	4b41      	ldr	r3, [pc, #260]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004456:	4a40      	ldr	r2, [pc, #256]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800445c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800445e:	4b3e      	ldr	r3, [pc, #248]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800446a:	4b3b      	ldr	r3, [pc, #236]	@ (8004558 <MX_GPIO_Init+0x14c>)
 800446c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446e:	4a3a      	ldr	r2, [pc, #232]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004476:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004482:	4b35      	ldr	r3, [pc, #212]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004486:	4a34      	ldr	r2, [pc, #208]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004488:	f043 0302 	orr.w	r3, r3, #2
 800448c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800448e:	4b32      	ldr	r3, [pc, #200]	@ (8004558 <MX_GPIO_Init+0x14c>)
 8004490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <MX_GPIO_Init+0x14c>)
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	4a2e      	ldr	r2, [pc, #184]	@ (8004558 <MX_GPIO_Init+0x14c>)
 80044a0:	f043 0308 	orr.w	r3, r3, #8
 80044a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004558 <MX_GPIO_Init+0x14c>)
 80044a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80044b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044b6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044b8:	2303      	movs	r3, #3
 80044ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044c0:	f107 031c 	add.w	r3, r7, #28
 80044c4:	4619      	mov	r1, r3
 80044c6:	4825      	ldr	r0, [pc, #148]	@ (800455c <MX_GPIO_Init+0x150>)
 80044c8:	f001 fccc 	bl	8005e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80044cc:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 80044d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044d2:	2303      	movs	r3, #3
 80044d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044da:	f107 031c 	add.w	r3, r7, #28
 80044de:	4619      	mov	r1, r3
 80044e0:	481f      	ldr	r0, [pc, #124]	@ (8004560 <MX_GPIO_Init+0x154>)
 80044e2:	f001 fcbf 	bl	8005e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044e6:	2303      	movs	r3, #3
 80044e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044ea:	2303      	movs	r3, #3
 80044ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80044f2:	f107 031c 	add.w	r3, r7, #28
 80044f6:	4619      	mov	r1, r3
 80044f8:	481a      	ldr	r0, [pc, #104]	@ (8004564 <MX_GPIO_Init+0x158>)
 80044fa:	f001 fcb3 	bl	8005e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 80044fe:	f649 7338 	movw	r3, #40760	@ 0x9f38
 8004502:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004504:	2303      	movs	r3, #3
 8004506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450c:	f107 031c 	add.w	r3, r7, #28
 8004510:	4619      	mov	r1, r3
 8004512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004516:	f001 fca5 	bl	8005e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800451a:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 800451e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004520:	2303      	movs	r3, #3
 8004522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004528:	f107 031c 	add.w	r3, r7, #28
 800452c:	4619      	mov	r1, r3
 800452e:	480e      	ldr	r0, [pc, #56]	@ (8004568 <MX_GPIO_Init+0x15c>)
 8004530:	f001 fc98 	bl	8005e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004534:	f64f 73e4 	movw	r3, #65508	@ 0xffe4
 8004538:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800453a:	2303      	movs	r3, #3
 800453c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004542:	f107 031c 	add.w	r3, r7, #28
 8004546:	4619      	mov	r1, r3
 8004548:	4808      	ldr	r0, [pc, #32]	@ (800456c <MX_GPIO_Init+0x160>)
 800454a:	f001 fc8b 	bl	8005e64 <HAL_GPIO_Init>

}
 800454e:	bf00      	nop
 8004550:	3730      	adds	r7, #48	@ 0x30
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	48001000 	.word	0x48001000
 8004560:	48000800 	.word	0x48000800
 8004564:	48001c00 	.word	0x48001c00
 8004568:	48000400 	.word	0x48000400
 800456c:	48000c00 	.word	0x48000c00

08004570 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8004574:	4b16      	ldr	r3, [pc, #88]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 8004576:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <MX_LPTIM1_Init+0x64>)
 8004578:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800457a:	4b15      	ldr	r3, [pc, #84]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8004580:	4b13      	ldr	r3, [pc, #76]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8004586:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 8004588:	2200      	movs	r2, #0
 800458a:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 800458c:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004592:	4b0f      	ldr	r3, [pc, #60]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 8004594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004598:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800459a:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 800459c:	2200      	movs	r2, #0
 800459e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80045a6:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 80045a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80045ae:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80045ba:	4805      	ldr	r0, [pc, #20]	@ (80045d0 <MX_LPTIM1_Init+0x60>)
 80045bc:	f001 ff64 	bl	8006488 <HAL_LPTIM_Init>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 80045c6:	f000 f979 	bl	80048bc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000da4 	.word	0x20000da4
 80045d4:	40007c00 	.word	0x40007c00

080045d8 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0ac      	sub	sp, #176	@ 0xb0
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	2288      	movs	r2, #136	@ 0x88
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f009 fd63 	bl	800e0c4 <memset>
  if(lptimHandle->Instance==LPTIM1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a25      	ldr	r2, [pc, #148]	@ (8004698 <HAL_LPTIM_MspInit+0xc0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d143      	bne.n	8004690 <HAL_LPTIM_MspInit+0xb8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800460c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800460e:	2300      	movs	r3, #0
 8004610:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4618      	mov	r0, r3
 8004618:	f003 fc52 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8004622:	f000 f94b 	bl	80048bc <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004626:	4b1d      	ldr	r3, [pc, #116]	@ (800469c <HAL_LPTIM_MspInit+0xc4>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	4a1c      	ldr	r2, [pc, #112]	@ (800469c <HAL_LPTIM_MspInit+0xc4>)
 800462c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004630:	6593      	str	r3, [r2, #88]	@ 0x58
 8004632:	4b1a      	ldr	r3, [pc, #104]	@ (800469c <HAL_LPTIM_MspInit+0xc4>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800463e:	4b17      	ldr	r3, [pc, #92]	@ (800469c <HAL_LPTIM_MspInit+0xc4>)
 8004640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004642:	4a16      	ldr	r2, [pc, #88]	@ (800469c <HAL_LPTIM_MspInit+0xc4>)
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800464a:	4b14      	ldr	r3, [pc, #80]	@ (800469c <HAL_LPTIM_MspInit+0xc4>)
 800464c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004656:	2305      	movs	r3, #5
 8004658:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	2302      	movs	r3, #2
 800465e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004668:	2300      	movs	r3, #0
 800466a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 800466e:	2301      	movs	r3, #1
 8004670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004674:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004678:	4619      	mov	r1, r3
 800467a:	4809      	ldr	r0, [pc, #36]	@ (80046a0 <HAL_LPTIM_MspInit+0xc8>)
 800467c:	f001 fbf2 	bl	8005e64 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8004680:	2200      	movs	r2, #0
 8004682:	2100      	movs	r1, #0
 8004684:	2041      	movs	r0, #65	@ 0x41
 8004686:	f001 f857 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800468a:	2041      	movs	r0, #65	@ 0x41
 800468c:	f001 f880 	bl	8005790 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8004690:	bf00      	nop
 8004692:	37b0      	adds	r7, #176	@ 0xb0
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40007c00 	.word	0x40007c00
 800469c:	40021000 	.word	0x40021000
 80046a0:	48000800 	.word	0x48000800

080046a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046a8:	f000 fee1 	bl	800546e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046ac:	f000 f82c 	bl	8004708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046b0:	f7ff feac 	bl	800440c <MX_GPIO_Init>
  MX_DMA_Init();
 80046b4:	f7ff fe84 	bl	80043c0 <MX_DMA_Init>
  MX_SPI2_Init();
 80046b8:	f000 f924 	bl	8004904 <MX_SPI2_Init>
  MX_TIM6_Init();
 80046bc:	f000 fbf2 	bl	8004ea4 <MX_TIM6_Init>
  MX_TIM5_Init();
 80046c0:	f000 fb9a 	bl	8004df8 <MX_TIM5_Init>
  MX_TIM7_Init();
 80046c4:	f000 fc24 	bl	8004f10 <MX_TIM7_Init>
  MX_TIM3_Init();
 80046c8:	f000 fb40 	bl	8004d4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80046cc:	f000 fe18 	bl	8005300 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80046d0:	f000 fc54 	bl	8004f7c <MX_TIM15_Init>
  MX_LPTIM1_Init();
 80046d4:	f7ff ff4c 	bl	8004570 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 80046d8:	f7ff fdaa 	bl	8004230 <board_config_apply_motion_gpio>
    board_config_force_encoder_quadrature();
 80046dc:	f7ff fe06 	bl	80042ec <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 80046e0:	f7ff fe12 	bl	8004308 <board_config_apply_interrupt_priorities>
    //board_config_apply_spi_dma_profile();
    app_init();
 80046e4:	f7ff fc8c 	bl	8004000 <app_init>
    // Inicia timers do laço de passos (TIM6) e controle/status (TIM7)
    HAL_TIM_Base_Start_IT(&htim6);
 80046e8:	4805      	ldr	r0, [pc, #20]	@ (8004700 <main+0x5c>)
 80046ea:	f005 fbe3 	bl	8009eb4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 80046ee:	4805      	ldr	r0, [pc, #20]	@ (8004704 <main+0x60>)
 80046f0:	f005 fbe0 	bl	8009eb4 <HAL_TIM_Base_Start_IT>
    motion_demo_set_continuous(1);
 80046f4:	2001      	movs	r0, #1
 80046f6:	f7ff f8d1 	bl	800389c <motion_demo_set_continuous>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 80046fa:	f7ff fcb7 	bl	800406c <app_poll>
 80046fe:	e7fc      	b.n	80046fa <main+0x56>
 8004700:	20000f74 	.word	0x20000f74
 8004704:	20000fc0 	.word	0x20000fc0

08004708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b096      	sub	sp, #88	@ 0x58
 800470c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800470e:	f107 0314 	add.w	r3, r7, #20
 8004712:	2244      	movs	r2, #68	@ 0x44
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f009 fcd4 	bl	800e0c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800471c:	463b      	mov	r3, r7
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	609a      	str	r2, [r3, #8]
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800472a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800472e:	f002 fb9f 	bl	8006e70 <HAL_PWREx_ControlVoltageScaling>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004738:	f000 f8c0 	bl	80048bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800473c:	2310      	movs	r3, #16
 800473e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004740:	2301      	movs	r3, #1
 8004742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004748:	2360      	movs	r3, #96	@ 0x60
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800474c:	2302      	movs	r3, #2
 800474e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004750:	2301      	movs	r3, #1
 8004752:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004754:	2301      	movs	r3, #1
 8004756:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004758:	2328      	movs	r3, #40	@ 0x28
 800475a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800475c:	2307      	movs	r3, #7
 800475e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004760:	2302      	movs	r3, #2
 8004762:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004764:	2302      	movs	r3, #2
 8004766:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	4618      	mov	r0, r3
 800476e:	f002 fbe1 	bl	8006f34 <HAL_RCC_OscConfig>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8004778:	f000 f8a0 	bl	80048bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800477c:	230f      	movs	r3, #15
 800477e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004780:	2303      	movs	r3, #3
 8004782:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800478c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004792:	463b      	mov	r3, r7
 8004794:	2104      	movs	r1, #4
 8004796:	4618      	mov	r0, r3
 8004798:	f003 f8ce 	bl	8007938 <HAL_RCC_ClockConfig>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80047a2:	f000 f88b 	bl	80048bc <Error_Handler>
  }
}
 80047a6:	bf00      	nop
 80047a8:	3758      	adds	r7, #88	@ 0x58
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fc96 	bl	80040e8 <app_spi_isr_txrx_done>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    if (hspi == NULL) return;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d013      	beq.n	80047fa <HAL_SPI_ErrorCallback+0x36>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004808 <HAL_SPI_ErrorCallback+0x44>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d110      	bne.n	80047fe <HAL_SPI_ErrorCallback+0x3a>

    g_spi_last_error = hspi->ErrorCode;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e0:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <HAL_SPI_ErrorCallback+0x48>)
 80047e2:	6013      	str	r3, [r2, #0]
    g_spi_error_count++;
 80047e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <HAL_SPI_ErrorCallback+0x4c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3301      	adds	r3, #1
 80047ea:	4a09      	ldr	r2, [pc, #36]	@ (8004810 <HAL_SPI_ErrorCallback+0x4c>)
 80047ec:	6013      	str	r3, [r2, #0]

    /* Indicação visual simples para diagnóstico */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80047ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047f2:	4808      	ldr	r0, [pc, #32]	@ (8004814 <HAL_SPI_ErrorCallback+0x50>)
 80047f4:	f001 fe0e 	bl	8006414 <HAL_GPIO_TogglePin>
 80047f8:	e002      	b.n	8004800 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi == NULL) return;
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 80047fe:	bf00      	nop
}
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40003800 	.word	0x40003800
 800480c:	20000de0 	.word	0x20000de0
 8004810:	20000ddc 	.word	0x20000ddc
 8004814:	48000400 	.word	0x48000400

08004818 <HAL_GPIO_EXTI_Callback>:
/* Botões de segurança (EXTI):
 * - B1 (PC13): E-STOP imediato (pressionado = nível baixo)
 * - B2 (PC0): Release/recover + funções extras do demo (pressionado = baixo)
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d019      	beq.n	800485c <HAL_GPIO_EXTI_Callback+0x44>
 8004828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800482c:	d135      	bne.n	800489a <HAL_GPIO_EXTI_Callback+0x82>
    case GPIO_PIN_13: /* B1 - E-STOP */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800482e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004832:	481e      	ldr	r0, [pc, #120]	@ (80048ac <HAL_GPIO_EXTI_Callback+0x94>)
 8004834:	f001 fda2 	bl	800637c <HAL_GPIO_ReadPin>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d12f      	bne.n	800489e <HAL_GPIO_EXTI_Callback+0x86>
            /* Pressionado: aciona E-STOP e para tudo agora */
            safety_estop_assert();
 800483e:	f7ff f9e9 	bl	8003c14 <safety_estop_assert>
            motion_emergency_stop();
 8004842:	f7ff f8f1 	bl	8003a28 <motion_emergency_stop>
            /* Opcionalmente interrompe os timers para cessar qualquer atividade em ISR */
            HAL_TIM_Base_Stop_IT(&htim6);
 8004846:	481a      	ldr	r0, [pc, #104]	@ (80048b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8004848:	f005 fbe8 	bl	800a01c <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim7);
 800484c:	4819      	ldr	r0, [pc, #100]	@ (80048b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800484e:	f005 fbe5 	bl	800a01c <HAL_TIM_Base_Stop_IT>
            /* Se houver PWM em TIM15 (LED/auxiliar), pare também */
            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8004852:	2100      	movs	r1, #0
 8004854:	4818      	ldr	r0, [pc, #96]	@ (80048b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004856:	f005 ff25 	bl	800a6a4 <HAL_TIM_PWM_Stop>
        }
        break;
 800485a:	e020      	b.n	800489e <HAL_GPIO_EXTI_Callback+0x86>
    case GPIO_PIN_0:  /* B2 - Release/Resume + demo speed step */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 800485c:	2101      	movs	r1, #1
 800485e:	4813      	ldr	r0, [pc, #76]	@ (80048ac <HAL_GPIO_EXTI_Callback+0x94>)
 8004860:	f001 fd8c 	bl	800637c <HAL_GPIO_ReadPin>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11b      	bne.n	80048a2 <HAL_GPIO_EXTI_Callback+0x8a>
            /* Libera segurança */
            safety_estop_release();
 800486a:	f7ff f9f3 	bl	8003c54 <safety_estop_release>
            /* Garante que os timers base voltem a rodar */
            HAL_TIM_Base_Start_IT(&htim6);
 800486e:	4810      	ldr	r0, [pc, #64]	@ (80048b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8004870:	f005 fb20 	bl	8009eb4 <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim7);
 8004874:	480f      	ldr	r0, [pc, #60]	@ (80048b4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8004876:	f005 fb1d 	bl	8009eb4 <HAL_TIM_Base_Start_IT>
            /* Reativa movimentos conforme contexto */
            if (motion_demo_is_active()) {
 800487a:	f7ff f903 	bl	8003a84 <motion_demo_is_active>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_GPIO_EXTI_Callback+0x72>
                /* Cicla velocidade no modo demo contínuo */
                motion_demo_cycle_speed();
 8004884:	f7ff f910 	bl	8003aa8 <motion_demo_cycle_speed>
                motion_demo_set_continuous(1);
                /* Se usa PWM em TIM15 para indicação, retome */
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
            }
        }
        break;
 8004888:	e00b      	b.n	80048a2 <HAL_GPIO_EXTI_Callback+0x8a>
                motion_demo_set_continuous(1);
 800488a:	2001      	movs	r0, #1
 800488c:	f7ff f806 	bl	800389c <motion_demo_set_continuous>
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8004890:	2100      	movs	r1, #0
 8004892:	4809      	ldr	r0, [pc, #36]	@ (80048b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8004894:	f005 fd56 	bl	800a344 <HAL_TIM_PWM_Start>
        break;
 8004898:	e003      	b.n	80048a2 <HAL_GPIO_EXTI_Callback+0x8a>
    case GPIO_PIN_1:
    case GPIO_PIN_2:
    default:
        /* Reservado para sensores PROX/limites; sem ação específica aqui */
        break;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 80048a2:	bf00      	nop
    }
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	48000800 	.word	0x48000800
 80048b0:	20000f74 	.word	0x20000f74
 80048b4:	20000fc0 	.word	0x20000fc0
 80048b8:	2000100c 	.word	0x2000100c

080048bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 80048c0:	f04f 32ff 	mov.w	r2, #4294967295
 80048c4:	2164      	movs	r1, #100	@ 0x64
 80048c6:	2000      	movs	r0, #0
 80048c8:	f7fd fae4 	bl	8001e94 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 80048cc:	4a04      	ldr	r2, [pc, #16]	@ (80048e0 <Error_Handler+0x24>)
 80048ce:	4905      	ldr	r1, [pc, #20]	@ (80048e4 <Error_Handler+0x28>)
 80048d0:	4805      	ldr	r0, [pc, #20]	@ (80048e8 <Error_Handler+0x2c>)
 80048d2:	f7fd faf3 	bl	8001ebc <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 80048d6:	b672      	cpsid	i
}
 80048d8:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 80048da:	bf00      	nop
 80048dc:	e7fd      	b.n	80048da <Error_Handler+0x1e>
 80048de:	bf00      	nop
 80048e0:	0800f2f4 	.word	0x0800f2f4
 80048e4:	0800f304 	.word	0x0800f304
 80048e8:	0800f30c 	.word	0x0800f30c

080048ec <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004908:	4b18      	ldr	r3, [pc, #96]	@ (800496c <MX_SPI2_Init+0x68>)
 800490a:	4a19      	ldr	r2, [pc, #100]	@ (8004970 <MX_SPI2_Init+0x6c>)
 800490c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800490e:	4b17      	ldr	r3, [pc, #92]	@ (800496c <MX_SPI2_Init+0x68>)
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004914:	4b15      	ldr	r3, [pc, #84]	@ (800496c <MX_SPI2_Init+0x68>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800491a:	4b14      	ldr	r3, [pc, #80]	@ (800496c <MX_SPI2_Init+0x68>)
 800491c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004920:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004922:	4b12      	ldr	r3, [pc, #72]	@ (800496c <MX_SPI2_Init+0x68>)
 8004924:	2202      	movs	r2, #2
 8004926:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004928:	4b10      	ldr	r3, [pc, #64]	@ (800496c <MX_SPI2_Init+0x68>)
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800492e:	4b0f      	ldr	r3, [pc, #60]	@ (800496c <MX_SPI2_Init+0x68>)
 8004930:	2200      	movs	r2, #0
 8004932:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004934:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <MX_SPI2_Init+0x68>)
 8004936:	2200      	movs	r2, #0
 8004938:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800493a:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <MX_SPI2_Init+0x68>)
 800493c:	2200      	movs	r2, #0
 800493e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004940:	4b0a      	ldr	r3, [pc, #40]	@ (800496c <MX_SPI2_Init+0x68>)
 8004942:	2200      	movs	r2, #0
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <MX_SPI2_Init+0x68>)
 8004948:	2207      	movs	r2, #7
 800494a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800494c:	4b07      	ldr	r3, [pc, #28]	@ (800496c <MX_SPI2_Init+0x68>)
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004952:	4b06      	ldr	r3, [pc, #24]	@ (800496c <MX_SPI2_Init+0x68>)
 8004954:	2200      	movs	r2, #0
 8004956:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004958:	4804      	ldr	r0, [pc, #16]	@ (800496c <MX_SPI2_Init+0x68>)
 800495a:	f004 fa39 	bl	8008dd0 <HAL_SPI_Init>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8004964:	f7ff ffaa 	bl	80048bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000de4 	.word	0x20000de4
 8004970:	40003800 	.word	0x40003800

08004974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	@ 0x28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497c:	f107 0314 	add.w	r3, r7, #20
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a44      	ldr	r2, [pc, #272]	@ (8004aa4 <HAL_SPI_MspInit+0x130>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f040 8082 	bne.w	8004a9c <HAL_SPI_MspInit+0x128>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004998:	4b43      	ldr	r3, [pc, #268]	@ (8004aa8 <HAL_SPI_MspInit+0x134>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499c:	4a42      	ldr	r2, [pc, #264]	@ (8004aa8 <HAL_SPI_MspInit+0x134>)
 800499e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a4:	4b40      	ldr	r3, [pc, #256]	@ (8004aa8 <HAL_SPI_MspInit+0x134>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049b0:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa8 <HAL_SPI_MspInit+0x134>)
 80049b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b4:	4a3c      	ldr	r2, [pc, #240]	@ (8004aa8 <HAL_SPI_MspInit+0x134>)
 80049b6:	f043 0308 	orr.w	r3, r3, #8
 80049ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049bc:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa8 <HAL_SPI_MspInit+0x134>)
 80049be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> SPI2_NSS
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80049c8:	231b      	movs	r3, #27
 80049ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049cc:	2302      	movs	r3, #2
 80049ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d4:	2303      	movs	r3, #3
 80049d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049d8:	2305      	movs	r3, #5
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4619      	mov	r1, r3
 80049e2:	4832      	ldr	r0, [pc, #200]	@ (8004aac <HAL_SPI_MspInit+0x138>)
 80049e4:	f001 fa3e 	bl	8005e64 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80049e8:	4b31      	ldr	r3, [pc, #196]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 80049ea:	4a32      	ldr	r2, [pc, #200]	@ (8004ab4 <HAL_SPI_MspInit+0x140>)
 80049ec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 80049ee:	4b30      	ldr	r3, [pc, #192]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049f4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049fa:	4b2d      	ldr	r3, [pc, #180]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a00:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 8004a02:	2280      	movs	r2, #128	@ 0x80
 8004a04:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a06:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a0c:	4b28      	ldr	r3, [pc, #160]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8004a12:	4b27      	ldr	r3, [pc, #156]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 8004a14:	2220      	movs	r2, #32
 8004a16:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a18:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004a1e:	4824      	ldr	r0, [pc, #144]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 8004a20:	f000 feda 	bl	80057d8 <HAL_DMA_Init>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004a2a:	f7ff ff47 	bl	80048bc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 8004a32:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a34:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab0 <HAL_SPI_MspInit+0x13c>)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8004a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004abc <HAL_SPI_MspInit+0x148>)
 8004a3e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8004a40:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a46:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a48:	2210      	movs	r2, #16
 8004a4a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a52:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a54:	2280      	movs	r2, #128	@ 0x80
 8004a56:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a58:	4b17      	ldr	r3, [pc, #92]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a5e:	4b16      	ldr	r3, [pc, #88]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004a64:	4b14      	ldr	r3, [pc, #80]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a66:	2220      	movs	r2, #32
 8004a68:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a6a:	4b13      	ldr	r3, [pc, #76]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a70:	4811      	ldr	r0, [pc, #68]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a72:	f000 feb1 	bl	80057d8 <HAL_DMA_Init>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004a7c:	f7ff ff1e 	bl	80048bc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a86:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab8 <HAL_SPI_MspInit+0x144>)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	2024      	movs	r0, #36	@ 0x24
 8004a92:	f000 fe51 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004a96:	2024      	movs	r0, #36	@ 0x24
 8004a98:	f000 fe7a 	bl	8005790 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3728      	adds	r7, #40	@ 0x28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40003800 	.word	0x40003800
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	48000c00 	.word	0x48000c00
 8004ab0:	20000e48 	.word	0x20000e48
 8004ab4:	40020044 	.word	0x40020044
 8004ab8:	20000e90 	.word	0x20000e90
 8004abc:	40020058 	.word	0x40020058

08004ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <HAL_MspInit+0x44>)
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aca:	4a0e      	ldr	r2, [pc, #56]	@ (8004b04 <HAL_MspInit+0x44>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <HAL_MspInit+0x44>)
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ade:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <HAL_MspInit+0x44>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae2:	4a08      	ldr	r2, [pc, #32]	@ (8004b04 <HAL_MspInit+0x44>)
 8004ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_MspInit+0x44>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000

08004b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004b0c:	bf00      	nop
 8004b0e:	e7fd      	b.n	8004b0c <NMI_Handler+0x4>

08004b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <HardFault_Handler+0x4>

08004b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b1c:	bf00      	nop
 8004b1e:	e7fd      	b.n	8004b1c <MemManage_Handler+0x4>

08004b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <BusFault_Handler+0x4>

08004b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b2c:	bf00      	nop
 8004b2e:	e7fd      	b.n	8004b2c <UsageFault_Handler+0x4>

08004b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b42:	bf00      	nop
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b5e:	f000 fcdb 	bl	8005518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004b6c:	4802      	ldr	r0, [pc, #8]	@ (8004b78 <DMA1_Channel4_IRQHandler+0x10>)
 8004b6e:	f001 f89a 	bl	8005ca6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000e48 	.word	0x20000e48

08004b7c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004b80:	4802      	ldr	r0, [pc, #8]	@ (8004b8c <DMA1_Channel5_IRQHandler+0x10>)
 8004b82:	f001 f890 	bl	8005ca6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000e90 	.word	0x20000e90

08004b90 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004b94:	4802      	ldr	r0, [pc, #8]	@ (8004ba0 <SPI2_IRQHandler+0x10>)
 8004b96:	f004 fcad 	bl	80094f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000de4 	.word	0x20000de4

08004ba4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ba8:	4802      	ldr	r0, [pc, #8]	@ (8004bb4 <TIM6_DAC_IRQHandler+0x10>)
 8004baa:	f006 f92f 	bl	800ae0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000f74 	.word	0x20000f74

08004bb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004bbc:	4802      	ldr	r0, [pc, #8]	@ (8004bc8 <TIM7_IRQHandler+0x10>)
 8004bbe:	f006 f925 	bl	800ae0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000fc0 	.word	0x20000fc0

08004bcc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004bd0:	4802      	ldr	r0, [pc, #8]	@ (8004bdc <LPTIM1_IRQHandler+0x10>)
 8004bd2:	f001 ff1f 	bl	8006a14 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000da4 	.word	0x20000da4

08004be0 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004be4:	2001      	movs	r0, #1
 8004be6:	f001 fc37 	bl	8006458 <HAL_GPIO_EXTI_IRQHandler>
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}

08004bee <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004bf2:	2002      	movs	r0, #2
 8004bf4:	f001 fc30 	bl	8006458 <HAL_GPIO_EXTI_IRQHandler>
}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004c00:	2004      	movs	r0, #4
 8004c02:	f001 fc29 	bl	8006458 <HAL_GPIO_EXTI_IRQHandler>
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004c0e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004c12:	f001 fc21 	bl	8006458 <HAL_GPIO_EXTI_IRQHandler>
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e00a      	b.n	8004c42 <_read+0x28>
		*ptr++ = __io_getchar();
 8004c2c:	f3af 8000 	nop.w
 8004c30:	4601      	mov	r1, r0
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	60ba      	str	r2, [r7, #8]
 8004c38:	b2ca      	uxtb	r2, r1
 8004c3a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	dbf0      	blt.n	8004c2c <_read+0x12>
	}

	return len;
 8004c4a:	687b      	ldr	r3, [r7, #4]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_fstat>:

int _fstat(int file, struct stat *st) {
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c7c:	605a      	str	r2, [r3, #4]
	return 0;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <_isatty>:

int _isatty(int file) {
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004c94:	2301      	movs	r3, #1
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004cc4:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004cd0:	4b13      	ldr	r3, [pc, #76]	@ (8004d20 <_sbrk+0x64>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004cd8:	4b11      	ldr	r3, [pc, #68]	@ (8004d20 <_sbrk+0x64>)
 8004cda:	4a12      	ldr	r2, [pc, #72]	@ (8004d24 <_sbrk+0x68>)
 8004cdc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004cde:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <_sbrk+0x64>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d207      	bcs.n	8004cfc <_sbrk+0x40>
		errno = ENOMEM;
 8004cec:	f009 fa48 	bl	800e180 <__errno>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	220c      	movs	r2, #12
 8004cf4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	e009      	b.n	8004d10 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004cfc:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <_sbrk+0x64>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <_sbrk+0x64>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <_sbrk+0x64>)
 8004d0c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20018000 	.word	0x20018000
 8004d1c:	00000400 	.word	0x00000400
 8004d20:	20000ed8 	.word	0x20000ed8
 8004d24:	20001230 	.word	0x20001230

08004d28 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8004d2c:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <SystemInit+0x20>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d32:	4a05      	ldr	r2, [pc, #20]	@ (8004d48 <SystemInit+0x20>)
 8004d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004d3c:	bf00      	nop
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	e000ed00 	.word	0xe000ed00

08004d4c <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	@ 0x30
 8004d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d52:	f107 030c 	add.w	r3, r7, #12
 8004d56:	2224      	movs	r2, #36	@ 0x24
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f009 f9b2 	bl	800e0c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d60:	463b      	mov	r3, r7
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d6a:	4b21      	ldr	r3, [pc, #132]	@ (8004df0 <MX_TIM3_Init+0xa4>)
 8004d6c:	4a21      	ldr	r2, [pc, #132]	@ (8004df4 <MX_TIM3_Init+0xa8>)
 8004d6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004d70:	4b1f      	ldr	r3, [pc, #124]	@ (8004df0 <MX_TIM3_Init+0xa4>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d76:	4b1e      	ldr	r3, [pc, #120]	@ (8004df0 <MX_TIM3_Init+0xa4>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004df0 <MX_TIM3_Init+0xa4>)
 8004d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d84:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <MX_TIM3_Init+0xa4>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d8a:	4b19      	ldr	r3, [pc, #100]	@ (8004df0 <MX_TIM3_Init+0xa4>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004d90:	2301      	movs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004da4:	2300      	movs	r3, #0
 8004da6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004da8:	2301      	movs	r3, #1
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004db4:	f107 030c 	add.w	r3, r7, #12
 8004db8:	4619      	mov	r1, r3
 8004dba:	480d      	ldr	r0, [pc, #52]	@ (8004df0 <MX_TIM3_Init+0xa4>)
 8004dbc:	f005 fda6 	bl	800a90c <HAL_TIM_Encoder_Init>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004dc6:	f7ff fd79 	bl	80048bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4806      	ldr	r0, [pc, #24]	@ (8004df0 <MX_TIM3_Init+0xa4>)
 8004dd8:	f007 fc7c 	bl	800c6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004de2:	f7ff fd6b 	bl	80048bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004de6:	bf00      	nop
 8004de8:	3730      	adds	r7, #48	@ 0x30
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000edc 	.word	0x20000edc
 8004df4:	40000400 	.word	0x40000400

08004df8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	@ 0x30
 8004dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004dfe:	f107 030c 	add.w	r3, r7, #12
 8004e02:	2224      	movs	r2, #36	@ 0x24
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f009 f95c 	bl	800e0c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004e16:	4b21      	ldr	r3, [pc, #132]	@ (8004e9c <MX_TIM5_Init+0xa4>)
 8004e18:	4a21      	ldr	r2, [pc, #132]	@ (8004ea0 <MX_TIM5_Init+0xa8>)
 8004e1a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004e9c <MX_TIM5_Init+0xa4>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e22:	4b1e      	ldr	r3, [pc, #120]	@ (8004e9c <MX_TIM5_Init+0xa4>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004e28:	4b1c      	ldr	r3, [pc, #112]	@ (8004e9c <MX_TIM5_Init+0xa4>)
 8004e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e30:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <MX_TIM5_Init+0xa4>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e36:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <MX_TIM5_Init+0xa4>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e44:	2301      	movs	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e50:	2300      	movs	r3, #0
 8004e52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e54:	2301      	movs	r3, #1
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	4619      	mov	r1, r3
 8004e66:	480d      	ldr	r0, [pc, #52]	@ (8004e9c <MX_TIM5_Init+0xa4>)
 8004e68:	f005 fd50 	bl	800a90c <HAL_TIM_Encoder_Init>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8004e72:	f7ff fd23 	bl	80048bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e76:	2300      	movs	r3, #0
 8004e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e7e:	463b      	mov	r3, r7
 8004e80:	4619      	mov	r1, r3
 8004e82:	4806      	ldr	r0, [pc, #24]	@ (8004e9c <MX_TIM5_Init+0xa4>)
 8004e84:	f007 fc26 	bl	800c6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8004e8e:	f7ff fd15 	bl	80048bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004e92:	bf00      	nop
 8004e94:	3730      	adds	r7, #48	@ 0x30
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000f28 	.word	0x20000f28
 8004ea0:	40000c00 	.word	0x40000c00

08004ea4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004eb4:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <MX_TIM6_Init+0x64>)
 8004eb6:	4a15      	ldr	r2, [pc, #84]	@ (8004f0c <MX_TIM6_Init+0x68>)
 8004eb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8004eba:	4b13      	ldr	r3, [pc, #76]	@ (8004f08 <MX_TIM6_Init+0x64>)
 8004ebc:	224f      	movs	r2, #79	@ 0x4f
 8004ebe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ec0:	4b11      	ldr	r3, [pc, #68]	@ (8004f08 <MX_TIM6_Init+0x64>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8004ec6:	4b10      	ldr	r3, [pc, #64]	@ (8004f08 <MX_TIM6_Init+0x64>)
 8004ec8:	2213      	movs	r2, #19
 8004eca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <MX_TIM6_Init+0x64>)
 8004ece:	2280      	movs	r2, #128	@ 0x80
 8004ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ed2:	480d      	ldr	r0, [pc, #52]	@ (8004f08 <MX_TIM6_Init+0x64>)
 8004ed4:	f004 fee4 	bl	8009ca0 <HAL_TIM_Base_Init>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004ede:	f7ff fced 	bl	80048bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ee2:	2320      	movs	r3, #32
 8004ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004eea:	1d3b      	adds	r3, r7, #4
 8004eec:	4619      	mov	r1, r3
 8004eee:	4806      	ldr	r0, [pc, #24]	@ (8004f08 <MX_TIM6_Init+0x64>)
 8004ef0:	f007 fbf0 	bl	800c6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004efa:	f7ff fcdf 	bl	80048bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000f74 	.word	0x20000f74
 8004f0c:	40001000 	.word	0x40001000

08004f10 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	605a      	str	r2, [r3, #4]
 8004f1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004f20:	4b14      	ldr	r3, [pc, #80]	@ (8004f74 <MX_TIM7_Init+0x64>)
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <MX_TIM7_Init+0x68>)
 8004f24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8004f26:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <MX_TIM7_Init+0x64>)
 8004f28:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8004f2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f2e:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <MX_TIM7_Init+0x64>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004f34:	4b0f      	ldr	r3, [pc, #60]	@ (8004f74 <MX_TIM7_Init+0x64>)
 8004f36:	2209      	movs	r2, #9
 8004f38:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <MX_TIM7_Init+0x64>)
 8004f3c:	2280      	movs	r2, #128	@ 0x80
 8004f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004f40:	480c      	ldr	r0, [pc, #48]	@ (8004f74 <MX_TIM7_Init+0x64>)
 8004f42:	f004 fead 	bl	8009ca0 <HAL_TIM_Base_Init>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004f4c:	f7ff fcb6 	bl	80048bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f50:	2300      	movs	r3, #0
 8004f52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004f58:	1d3b      	adds	r3, r7, #4
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4805      	ldr	r0, [pc, #20]	@ (8004f74 <MX_TIM7_Init+0x64>)
 8004f5e:	f007 fbb9 	bl	800c6d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004f68:	f7ff fca8 	bl	80048bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000fc0 	.word	0x20000fc0
 8004f78:	40001400 	.word	0x40001400

08004f7c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b09a      	sub	sp, #104	@ 0x68
 8004f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f82:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	605a      	str	r2, [r3, #4]
 8004f8c:	609a      	str	r2, [r3, #8]
 8004f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f90:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	611a      	str	r2, [r3, #16]
 8004fac:	615a      	str	r2, [r3, #20]
 8004fae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004fb0:	1d3b      	adds	r3, r7, #4
 8004fb2:	222c      	movs	r2, #44	@ 0x2c
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f009 f884 	bl	800e0c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8004fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80050bc <MX_TIM15_Init+0x140>)
 8004fc0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 8004fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8004fc4:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8004fc8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fca:	4b3b      	ldr	r3, [pc, #236]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8004fd0:	4b39      	ldr	r3, [pc, #228]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8004fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fd6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fd8:	4b37      	ldr	r3, [pc, #220]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004fde:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fe4:	4b34      	ldr	r3, [pc, #208]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004fea:	4833      	ldr	r0, [pc, #204]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8004fec:	f004 fe58 	bl	8009ca0 <HAL_TIM_Base_Init>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8004ff6:	f7ff fc61 	bl	80048bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ffe:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005000:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005004:	4619      	mov	r1, r3
 8005006:	482c      	ldr	r0, [pc, #176]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8005008:	f006 fada 	bl	800b5c0 <HAL_TIM_ConfigClockSource>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8005012:	f7ff fc53 	bl	80048bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005016:	4828      	ldr	r0, [pc, #160]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8005018:	f005 f880 	bl	800a11c <HAL_TIM_PWM_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8005022:	f7ff fc4b 	bl	80048bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005026:	2300      	movs	r3, #0
 8005028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800502a:	2300      	movs	r3, #0
 800502c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800502e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005032:	4619      	mov	r1, r3
 8005034:	4820      	ldr	r0, [pc, #128]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 8005036:	f007 fb4d 	bl	800c6d4 <HAL_TIMEx_MasterConfigSynchronization>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8005040:	f7ff fc3c 	bl	80048bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005044:	2360      	movs	r3, #96	@ 0x60
 8005046:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800504c:	2300      	movs	r3, #0
 800504e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005050:	2300      	movs	r3, #0
 8005052:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005054:	2300      	movs	r3, #0
 8005056:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005058:	2300      	movs	r3, #0
 800505a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800505c:	2300      	movs	r3, #0
 800505e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005060:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005064:	2200      	movs	r2, #0
 8005066:	4619      	mov	r1, r3
 8005068:	4813      	ldr	r0, [pc, #76]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 800506a:	f005 ffd7 	bl	800b01c <HAL_TIM_PWM_ConfigChannel>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005074:	f7ff fc22 	bl	80048bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005078:	2300      	movs	r3, #0
 800507a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800507c:	2300      	movs	r3, #0
 800507e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800508c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005090:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005092:	2300      	movs	r3, #0
 8005094:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005096:	1d3b      	adds	r3, r7, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4807      	ldr	r0, [pc, #28]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 800509c:	f007 fc70 	bl	800c980 <HAL_TIMEx_ConfigBreakDeadTime>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80050a6:	f7ff fc09 	bl	80048bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80050aa:	4803      	ldr	r0, [pc, #12]	@ (80050b8 <MX_TIM15_Init+0x13c>)
 80050ac:	f000 f8d2 	bl	8005254 <HAL_TIM_MspPostInit>

}
 80050b0:	bf00      	nop
 80050b2:	3768      	adds	r7, #104	@ 0x68
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	2000100c 	.word	0x2000100c
 80050bc:	40014000 	.word	0x40014000

080050c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	@ 0x30
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c8:	f107 031c 	add.w	r3, r7, #28
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2f      	ldr	r2, [pc, #188]	@ (800519c <HAL_TIM_Encoder_MspInit+0xdc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d129      	bne.n	8005136 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050e2:	4b2f      	ldr	r3, [pc, #188]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e6:	4a2e      	ldr	r2, [pc, #184]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 80050e8:	f043 0302 	orr.w	r3, r3, #2
 80050ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ee:	4b2c      	ldr	r3, [pc, #176]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fa:	4b29      	ldr	r3, [pc, #164]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 80050fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fe:	4a28      	ldr	r2, [pc, #160]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005106:	4b26      	ldr	r3, [pc, #152]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005112:	23c0      	movs	r3, #192	@ 0xc0
 8005114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005116:	2302      	movs	r3, #2
 8005118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800511e:	2300      	movs	r3, #0
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005122:	2302      	movs	r3, #2
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005126:	f107 031c 	add.w	r3, r7, #28
 800512a:	4619      	mov	r1, r3
 800512c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005130:	f000 fe98 	bl	8005e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005134:	e02d      	b.n	8005192 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM5)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1a      	ldr	r2, [pc, #104]	@ (80051a4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d128      	bne.n	8005192 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005140:	4b17      	ldr	r3, [pc, #92]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005144:	4a16      	ldr	r2, [pc, #88]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005146:	f043 0308 	orr.w	r3, r3, #8
 800514a:	6593      	str	r3, [r2, #88]	@ 0x58
 800514c:	4b14      	ldr	r3, [pc, #80]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005158:	4b11      	ldr	r3, [pc, #68]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800515a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515c:	4a10      	ldr	r2, [pc, #64]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005170:	2303      	movs	r3, #3
 8005172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005174:	2302      	movs	r3, #2
 8005176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005178:	2300      	movs	r3, #0
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800517c:	2300      	movs	r3, #0
 800517e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005180:	2302      	movs	r3, #2
 8005182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005184:	f107 031c 	add.w	r3, r7, #28
 8005188:	4619      	mov	r1, r3
 800518a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800518e:	f000 fe69 	bl	8005e64 <HAL_GPIO_Init>
}
 8005192:	bf00      	nop
 8005194:	3730      	adds	r7, #48	@ 0x30
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40000400 	.word	0x40000400
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40000c00 	.word	0x40000c00

080051a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a23      	ldr	r2, [pc, #140]	@ (8005244 <HAL_TIM_Base_MspInit+0x9c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d114      	bne.n	80051e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051ba:	4b23      	ldr	r3, [pc, #140]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051be:	4a22      	ldr	r2, [pc, #136]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 80051c0:	f043 0310 	orr.w	r3, r3, #16
 80051c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c6:	4b20      	ldr	r3, [pc, #128]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80051d2:	2200      	movs	r2, #0
 80051d4:	2100      	movs	r1, #0
 80051d6:	2036      	movs	r0, #54	@ 0x36
 80051d8:	f000 faae 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051dc:	2036      	movs	r0, #54	@ 0x36
 80051de:	f000 fad7 	bl	8005790 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80051e2:	e02a      	b.n	800523a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a18      	ldr	r2, [pc, #96]	@ (800524c <HAL_TIM_Base_MspInit+0xa4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d114      	bne.n	8005218 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051ee:	4b16      	ldr	r3, [pc, #88]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 80051f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f2:	4a15      	ldr	r2, [pc, #84]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 80051f4:	f043 0320 	orr.w	r3, r3, #32
 80051f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80051fa:	4b13      	ldr	r3, [pc, #76]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005206:	2200      	movs	r2, #0
 8005208:	2100      	movs	r1, #0
 800520a:	2037      	movs	r0, #55	@ 0x37
 800520c:	f000 fa94 	bl	8005738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005210:	2037      	movs	r0, #55	@ 0x37
 8005212:	f000 fabd 	bl	8005790 <HAL_NVIC_EnableIRQ>
}
 8005216:	e010      	b.n	800523a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a0c      	ldr	r2, [pc, #48]	@ (8005250 <HAL_TIM_Base_MspInit+0xa8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10b      	bne.n	800523a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005222:	4b09      	ldr	r3, [pc, #36]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 8005224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005226:	4a08      	ldr	r2, [pc, #32]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800522c:	6613      	str	r3, [r2, #96]	@ 0x60
 800522e:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <HAL_TIM_Base_MspInit+0xa0>)
 8005230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	bf00      	nop
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40001000 	.word	0x40001000
 8005248:	40021000 	.word	0x40021000
 800524c:	40001400 	.word	0x40001400
 8005250:	40014000 	.word	0x40014000

08005254 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	@ 0x28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a20      	ldr	r2, [pc, #128]	@ (80052f4 <HAL_TIM_MspPostInit+0xa0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d139      	bne.n	80052ea <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005276:	4b20      	ldr	r3, [pc, #128]	@ (80052f8 <HAL_TIM_MspPostInit+0xa4>)
 8005278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527a:	4a1f      	ldr	r2, [pc, #124]	@ (80052f8 <HAL_TIM_MspPostInit+0xa4>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005282:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <HAL_TIM_MspPostInit+0xa4>)
 8005284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800528e:	4b1a      	ldr	r3, [pc, #104]	@ (80052f8 <HAL_TIM_MspPostInit+0xa4>)
 8005290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005292:	4a19      	ldr	r2, [pc, #100]	@ (80052f8 <HAL_TIM_MspPostInit+0xa4>)
 8005294:	f043 0302 	orr.w	r3, r3, #2
 8005298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800529a:	4b17      	ldr	r3, [pc, #92]	@ (80052f8 <HAL_TIM_MspPostInit+0xa4>)
 800529c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052a6:	2304      	movs	r3, #4
 80052a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052aa:	2302      	movs	r3, #2
 80052ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b2:	2300      	movs	r3, #0
 80052b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80052b6:	230e      	movs	r3, #14
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ba:	f107 0314 	add.w	r3, r7, #20
 80052be:	4619      	mov	r1, r3
 80052c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052c4:	f000 fdce 	bl	8005e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80052c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ce:	2302      	movs	r3, #2
 80052d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80052da:	230e      	movs	r3, #14
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	4619      	mov	r1, r3
 80052e4:	4805      	ldr	r0, [pc, #20]	@ (80052fc <HAL_TIM_MspPostInit+0xa8>)
 80052e6:	f000 fdbd 	bl	8005e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80052ea:	bf00      	nop
 80052ec:	3728      	adds	r7, #40	@ 0x28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	48000400 	.word	0x48000400

08005300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005304:	4b14      	ldr	r3, [pc, #80]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 8005306:	4a15      	ldr	r2, [pc, #84]	@ (800535c <MX_USART1_UART_Init+0x5c>)
 8005308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800530a:	4b13      	ldr	r3, [pc, #76]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 800530c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005312:	4b11      	ldr	r3, [pc, #68]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 8005314:	2200      	movs	r2, #0
 8005316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005318:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 800531a:	2200      	movs	r2, #0
 800531c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800531e:	4b0e      	ldr	r3, [pc, #56]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 8005320:	2200      	movs	r2, #0
 8005322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005324:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 8005326:	220c      	movs	r2, #12
 8005328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800532a:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 800532c:	2200      	movs	r2, #0
 800532e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005330:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 8005332:	2200      	movs	r2, #0
 8005334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005336:	4b08      	ldr	r3, [pc, #32]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 8005338:	2200      	movs	r2, #0
 800533a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800533c:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 800533e:	2200      	movs	r2, #0
 8005340:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005342:	4805      	ldr	r0, [pc, #20]	@ (8005358 <MX_USART1_UART_Init+0x58>)
 8005344:	f007 fc72 	bl	800cc2c <HAL_UART_Init>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800534e:	f7ff fab5 	bl	80048bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20001058 	.word	0x20001058
 800535c:	40013800 	.word	0x40013800

08005360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b0ac      	sub	sp, #176	@ 0xb0
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005368:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005378:	f107 0314 	add.w	r3, r7, #20
 800537c:	2288      	movs	r2, #136	@ 0x88
 800537e:	2100      	movs	r1, #0
 8005380:	4618      	mov	r0, r3
 8005382:	f008 fe9f 	bl	800e0c4 <memset>
  if(uartHandle->Instance==USART1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a21      	ldr	r2, [pc, #132]	@ (8005410 <HAL_UART_MspInit+0xb0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d13a      	bne.n	8005406 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005390:	2301      	movs	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005394:	2300      	movs	r3, #0
 8005396:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005398:	f107 0314 	add.w	r3, r7, #20
 800539c:	4618      	mov	r0, r3
 800539e:	f002 fd8f 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80053a8:	f7ff fa88 	bl	80048bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80053ac:	4b19      	ldr	r3, [pc, #100]	@ (8005414 <HAL_UART_MspInit+0xb4>)
 80053ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b0:	4a18      	ldr	r2, [pc, #96]	@ (8005414 <HAL_UART_MspInit+0xb4>)
 80053b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80053b8:	4b16      	ldr	r3, [pc, #88]	@ (8005414 <HAL_UART_MspInit+0xb4>)
 80053ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c4:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <HAL_UART_MspInit+0xb4>)
 80053c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c8:	4a12      	ldr	r2, [pc, #72]	@ (8005414 <HAL_UART_MspInit+0xb4>)
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053d0:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <HAL_UART_MspInit+0xb4>)
 80053d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053dc:	23c0      	movs	r3, #192	@ 0xc0
 80053de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e2:	2302      	movs	r3, #2
 80053e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ee:	2303      	movs	r3, #3
 80053f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053f4:	2307      	movs	r3, #7
 80053f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053fa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80053fe:	4619      	mov	r1, r3
 8005400:	4805      	ldr	r0, [pc, #20]	@ (8005418 <HAL_UART_MspInit+0xb8>)
 8005402:	f000 fd2f 	bl	8005e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005406:	bf00      	nop
 8005408:	37b0      	adds	r7, #176	@ 0xb0
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40013800 	.word	0x40013800
 8005414:	40021000 	.word	0x40021000
 8005418:	48000400 	.word	0x48000400

0800541c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800541c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005454 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005420:	f7ff fc82 	bl	8004d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005424:	480c      	ldr	r0, [pc, #48]	@ (8005458 <LoopForever+0x6>)
  ldr r1, =_edata
 8005426:	490d      	ldr	r1, [pc, #52]	@ (800545c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005428:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <LoopForever+0xe>)
  movs r3, #0
 800542a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800542c:	e002      	b.n	8005434 <LoopCopyDataInit>

0800542e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800542e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005432:	3304      	adds	r3, #4

08005434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005438:	d3f9      	bcc.n	800542e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800543a:	4a0a      	ldr	r2, [pc, #40]	@ (8005464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800543c:	4c0a      	ldr	r4, [pc, #40]	@ (8005468 <LoopForever+0x16>)
  movs r3, #0
 800543e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005440:	e001      	b.n	8005446 <LoopFillZerobss>

08005442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005444:	3204      	adds	r2, #4

08005446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005448:	d3fb      	bcc.n	8005442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800544a:	f008 fe9f 	bl	800e18c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800544e:	f7ff f929 	bl	80046a4 <main>

08005452 <LoopForever>:

LoopForever:
    b LoopForever
 8005452:	e7fe      	b.n	8005452 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005454:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800545c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8005460:	0800f694 	.word	0x0800f694
  ldr r2, =_sbss
 8005464:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005468:	20001230 	.word	0x20001230

0800546c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800546c:	e7fe      	b.n	800546c <ADC1_2_IRQHandler>

0800546e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005478:	2003      	movs	r0, #3
 800547a:	f000 f93d 	bl	80056f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800547e:	200f      	movs	r0, #15
 8005480:	f000 f80e 	bl	80054a0 <HAL_InitTick>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	71fb      	strb	r3, [r7, #7]
 800548e:	e001      	b.n	8005494 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005490:	f7ff fb16 	bl	8004ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005494:	79fb      	ldrb	r3, [r7, #7]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80054ac:	4b17      	ldr	r3, [pc, #92]	@ (800550c <HAL_InitTick+0x6c>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d023      	beq.n	80054fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80054b4:	4b16      	ldr	r3, [pc, #88]	@ (8005510 <HAL_InitTick+0x70>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b14      	ldr	r3, [pc, #80]	@ (800550c <HAL_InitTick+0x6c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	4619      	mov	r1, r3
 80054be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f978 	bl	80057c0 <HAL_SYSTICK_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b0f      	cmp	r3, #15
 80054da:	d809      	bhi.n	80054f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054dc:	2200      	movs	r2, #0
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	f000 f928 	bl	8005738 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005514 <HAL_InitTick+0x74>)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e007      	b.n	8005500 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
 80054f4:	e004      	b.n	8005500 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	e001      	b.n	8005500 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	2000001c 	.word	0x2000001c
 8005510:	20000014 	.word	0x20000014
 8005514:	20000018 	.word	0x20000018

08005518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_IncTick+0x20>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <HAL_IncTick+0x24>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4413      	add	r3, r2
 8005528:	4a04      	ldr	r2, [pc, #16]	@ (800553c <HAL_IncTick+0x24>)
 800552a:	6013      	str	r3, [r2, #0]
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	2000001c 	.word	0x2000001c
 800553c:	200010e0 	.word	0x200010e0

08005540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return uwTick;
 8005544:	4b03      	ldr	r3, [pc, #12]	@ (8005554 <HAL_GetTick+0x14>)
 8005546:	681b      	ldr	r3, [r3, #0]
}
 8005548:	4618      	mov	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	200010e0 	.word	0x200010e0

08005558 <__NVIC_SetPriorityGrouping>:
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005568:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <__NVIC_SetPriorityGrouping+0x44>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005574:	4013      	ands	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800558a:	4a04      	ldr	r2, [pc, #16]	@ (800559c <__NVIC_SetPriorityGrouping+0x44>)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	60d3      	str	r3, [r2, #12]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	e000ed00 	.word	0xe000ed00

080055a0 <__NVIC_GetPriorityGrouping>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055a4:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <__NVIC_GetPriorityGrouping+0x18>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	0a1b      	lsrs	r3, r3, #8
 80055aa:	f003 0307 	and.w	r3, r3, #7
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000ed00 	.word	0xe000ed00

080055bc <__NVIC_EnableIRQ>:
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	db0b      	blt.n	80055e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	f003 021f 	and.w	r2, r3, #31
 80055d4:	4907      	ldr	r1, [pc, #28]	@ (80055f4 <__NVIC_EnableIRQ+0x38>)
 80055d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	2001      	movs	r0, #1
 80055de:	fa00 f202 	lsl.w	r2, r0, r2
 80055e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	e000e100 	.word	0xe000e100

080055f8 <__NVIC_SetPriority>:
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	6039      	str	r1, [r7, #0]
 8005602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005608:	2b00      	cmp	r3, #0
 800560a:	db0a      	blt.n	8005622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	490c      	ldr	r1, [pc, #48]	@ (8005644 <__NVIC_SetPriority+0x4c>)
 8005612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005616:	0112      	lsls	r2, r2, #4
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	440b      	add	r3, r1
 800561c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005620:	e00a      	b.n	8005638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4908      	ldr	r1, [pc, #32]	@ (8005648 <__NVIC_SetPriority+0x50>)
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	3b04      	subs	r3, #4
 8005630:	0112      	lsls	r2, r2, #4
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	440b      	add	r3, r1
 8005636:	761a      	strb	r2, [r3, #24]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	e000e100 	.word	0xe000e100
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <NVIC_EncodePriority>:
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	@ 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f1c3 0307 	rsb	r3, r3, #7
 8005666:	2b04      	cmp	r3, #4
 8005668:	bf28      	it	cs
 800566a:	2304      	movcs	r3, #4
 800566c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3304      	adds	r3, #4
 8005672:	2b06      	cmp	r3, #6
 8005674:	d902      	bls.n	800567c <NVIC_EncodePriority+0x30>
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	3b03      	subs	r3, #3
 800567a:	e000      	b.n	800567e <NVIC_EncodePriority+0x32>
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43da      	mvns	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	401a      	ands	r2, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005694:	f04f 31ff 	mov.w	r1, #4294967295
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	43d9      	mvns	r1, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a4:	4313      	orrs	r3, r2
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3724      	adds	r7, #36	@ 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <SysTick_Config>:
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056c4:	d301      	bcc.n	80056ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80056c6:	2301      	movs	r3, #1
 80056c8:	e00f      	b.n	80056ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ca:	4a0a      	ldr	r2, [pc, #40]	@ (80056f4 <SysTick_Config+0x40>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056d2:	210f      	movs	r1, #15
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	f7ff ff8e 	bl	80055f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056dc:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <SysTick_Config+0x40>)
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056e2:	4b04      	ldr	r3, [pc, #16]	@ (80056f4 <SysTick_Config+0x40>)
 80056e4:	2207      	movs	r2, #7
 80056e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	e000e010 	.word	0xe000e010

080056f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b07      	cmp	r3, #7
 8005704:	d00f      	beq.n	8005726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d00c      	beq.n	8005726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b05      	cmp	r3, #5
 8005710:	d009      	beq.n	8005726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d006      	beq.n	8005726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d003      	beq.n	8005726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800571e:	21a6      	movs	r1, #166	@ 0xa6
 8005720:	4804      	ldr	r0, [pc, #16]	@ (8005734 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005722:	f7ff f8e3 	bl	80048ec <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff ff16 	bl	8005558 <__NVIC_SetPriorityGrouping>
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	0800f310 	.word	0x0800f310

08005738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b0f      	cmp	r3, #15
 800574e:	d903      	bls.n	8005758 <HAL_NVIC_SetPriority+0x20>
 8005750:	21be      	movs	r1, #190	@ 0xbe
 8005752:	480e      	ldr	r0, [pc, #56]	@ (800578c <HAL_NVIC_SetPriority+0x54>)
 8005754:	f7ff f8ca 	bl	80048ec <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b0f      	cmp	r3, #15
 800575c:	d903      	bls.n	8005766 <HAL_NVIC_SetPriority+0x2e>
 800575e:	21bf      	movs	r1, #191	@ 0xbf
 8005760:	480a      	ldr	r0, [pc, #40]	@ (800578c <HAL_NVIC_SetPriority+0x54>)
 8005762:	f7ff f8c3 	bl	80048ec <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8005766:	f7ff ff1b 	bl	80055a0 <__NVIC_GetPriorityGrouping>
 800576a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	6978      	ldr	r0, [r7, #20]
 8005772:	f7ff ff6b 	bl	800564c <NVIC_EncodePriority>
 8005776:	4602      	mov	r2, r0
 8005778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800577c:	4611      	mov	r1, r2
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ff3a 	bl	80055f8 <__NVIC_SetPriority>
}
 8005784:	bf00      	nop
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	0800f310 	.word	0x0800f310

08005790 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800579a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da03      	bge.n	80057aa <HAL_NVIC_EnableIRQ+0x1a>
 80057a2:	21d2      	movs	r1, #210	@ 0xd2
 80057a4:	4805      	ldr	r0, [pc, #20]	@ (80057bc <HAL_NVIC_EnableIRQ+0x2c>)
 80057a6:	f7ff f8a1 	bl	80048ec <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff ff04 	bl	80055bc <__NVIC_EnableIRQ>
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	0800f310 	.word	0x0800f310

080057c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ff73 	bl	80056b4 <SysTick_Config>
 80057ce:	4603      	mov	r3, r0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e19d      	b.n	8005b26 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a79      	ldr	r2, [pc, #484]	@ (80059d4 <HAL_DMA_Init+0x1fc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d044      	beq.n	800587e <HAL_DMA_Init+0xa6>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a77      	ldr	r2, [pc, #476]	@ (80059d8 <HAL_DMA_Init+0x200>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d03f      	beq.n	800587e <HAL_DMA_Init+0xa6>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a76      	ldr	r2, [pc, #472]	@ (80059dc <HAL_DMA_Init+0x204>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d03a      	beq.n	800587e <HAL_DMA_Init+0xa6>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a74      	ldr	r2, [pc, #464]	@ (80059e0 <HAL_DMA_Init+0x208>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d035      	beq.n	800587e <HAL_DMA_Init+0xa6>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a73      	ldr	r2, [pc, #460]	@ (80059e4 <HAL_DMA_Init+0x20c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d030      	beq.n	800587e <HAL_DMA_Init+0xa6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a71      	ldr	r2, [pc, #452]	@ (80059e8 <HAL_DMA_Init+0x210>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d02b      	beq.n	800587e <HAL_DMA_Init+0xa6>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a70      	ldr	r2, [pc, #448]	@ (80059ec <HAL_DMA_Init+0x214>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d026      	beq.n	800587e <HAL_DMA_Init+0xa6>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a6e      	ldr	r2, [pc, #440]	@ (80059f0 <HAL_DMA_Init+0x218>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d021      	beq.n	800587e <HAL_DMA_Init+0xa6>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6d      	ldr	r2, [pc, #436]	@ (80059f4 <HAL_DMA_Init+0x21c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d01c      	beq.n	800587e <HAL_DMA_Init+0xa6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a6b      	ldr	r2, [pc, #428]	@ (80059f8 <HAL_DMA_Init+0x220>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d017      	beq.n	800587e <HAL_DMA_Init+0xa6>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a6a      	ldr	r2, [pc, #424]	@ (80059fc <HAL_DMA_Init+0x224>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d012      	beq.n	800587e <HAL_DMA_Init+0xa6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a68      	ldr	r2, [pc, #416]	@ (8005a00 <HAL_DMA_Init+0x228>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00d      	beq.n	800587e <HAL_DMA_Init+0xa6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a67      	ldr	r2, [pc, #412]	@ (8005a04 <HAL_DMA_Init+0x22c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d008      	beq.n	800587e <HAL_DMA_Init+0xa6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a65      	ldr	r2, [pc, #404]	@ (8005a08 <HAL_DMA_Init+0x230>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <HAL_DMA_Init+0xa6>
 8005876:	21a5      	movs	r1, #165	@ 0xa5
 8005878:	4864      	ldr	r0, [pc, #400]	@ (8005a0c <HAL_DMA_Init+0x234>)
 800587a:	f7ff f837 	bl	80048ec <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <HAL_DMA_Init+0xc8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b10      	cmp	r3, #16
 800588c:	d008      	beq.n	80058a0 <HAL_DMA_Init+0xc8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005896:	d003      	beq.n	80058a0 <HAL_DMA_Init+0xc8>
 8005898:	21a6      	movs	r1, #166	@ 0xa6
 800589a:	485c      	ldr	r0, [pc, #368]	@ (8005a0c <HAL_DMA_Init+0x234>)
 800589c:	f7ff f826 	bl	80048ec <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b40      	cmp	r3, #64	@ 0x40
 80058a6:	d007      	beq.n	80058b8 <HAL_DMA_Init+0xe0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_DMA_Init+0xe0>
 80058b0:	21a7      	movs	r1, #167	@ 0xa7
 80058b2:	4856      	ldr	r0, [pc, #344]	@ (8005a0c <HAL_DMA_Init+0x234>)
 80058b4:	f7ff f81a 	bl	80048ec <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b80      	cmp	r3, #128	@ 0x80
 80058be:	d007      	beq.n	80058d0 <HAL_DMA_Init+0xf8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_DMA_Init+0xf8>
 80058c8:	21a8      	movs	r1, #168	@ 0xa8
 80058ca:	4850      	ldr	r0, [pc, #320]	@ (8005a0c <HAL_DMA_Init+0x234>)
 80058cc:	f7ff f80e 	bl	80048ec <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00d      	beq.n	80058f4 <HAL_DMA_Init+0x11c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e0:	d008      	beq.n	80058f4 <HAL_DMA_Init+0x11c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ea:	d003      	beq.n	80058f4 <HAL_DMA_Init+0x11c>
 80058ec:	21a9      	movs	r1, #169	@ 0xa9
 80058ee:	4847      	ldr	r0, [pc, #284]	@ (8005a0c <HAL_DMA_Init+0x234>)
 80058f0:	f7fe fffc 	bl	80048ec <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00d      	beq.n	8005918 <HAL_DMA_Init+0x140>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005904:	d008      	beq.n	8005918 <HAL_DMA_Init+0x140>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800590e:	d003      	beq.n	8005918 <HAL_DMA_Init+0x140>
 8005910:	21aa      	movs	r1, #170	@ 0xaa
 8005912:	483e      	ldr	r0, [pc, #248]	@ (8005a0c <HAL_DMA_Init+0x234>)
 8005914:	f7fe ffea 	bl	80048ec <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <HAL_DMA_Init+0x158>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b20      	cmp	r3, #32
 8005926:	d003      	beq.n	8005930 <HAL_DMA_Init+0x158>
 8005928:	21ab      	movs	r1, #171	@ 0xab
 800592a:	4838      	ldr	r0, [pc, #224]	@ (8005a0c <HAL_DMA_Init+0x234>)
 800592c:	f7fe ffde 	bl	80048ec <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d012      	beq.n	800595e <HAL_DMA_Init+0x186>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005940:	d00d      	beq.n	800595e <HAL_DMA_Init+0x186>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594a:	d008      	beq.n	800595e <HAL_DMA_Init+0x186>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005954:	d003      	beq.n	800595e <HAL_DMA_Init+0x186>
 8005956:	21ac      	movs	r1, #172	@ 0xac
 8005958:	482c      	ldr	r0, [pc, #176]	@ (8005a0c <HAL_DMA_Init+0x234>)
 800595a:	f7fe ffc7 	bl	80048ec <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01f      	beq.n	80059a6 <HAL_DMA_Init+0x1ce>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d01b      	beq.n	80059a6 <HAL_DMA_Init+0x1ce>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d017      	beq.n	80059a6 <HAL_DMA_Init+0x1ce>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b03      	cmp	r3, #3
 800597c:	d013      	beq.n	80059a6 <HAL_DMA_Init+0x1ce>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d00f      	beq.n	80059a6 <HAL_DMA_Init+0x1ce>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b05      	cmp	r3, #5
 800598c:	d00b      	beq.n	80059a6 <HAL_DMA_Init+0x1ce>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b06      	cmp	r3, #6
 8005994:	d007      	beq.n	80059a6 <HAL_DMA_Init+0x1ce>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b07      	cmp	r3, #7
 800599c:	d003      	beq.n	80059a6 <HAL_DMA_Init+0x1ce>
 800599e:	21ae      	movs	r1, #174	@ 0xae
 80059a0:	481a      	ldr	r0, [pc, #104]	@ (8005a0c <HAL_DMA_Init+0x234>)
 80059a2:	f7fe ffa3 	bl	80048ec <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	4b18      	ldr	r3, [pc, #96]	@ (8005a10 <HAL_DMA_Init+0x238>)
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d836      	bhi.n	8005a20 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <HAL_DMA_Init+0x23c>)
 80059ba:	4413      	add	r3, r2
 80059bc:	4a16      	ldr	r2, [pc, #88]	@ (8005a18 <HAL_DMA_Init+0x240>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	009a      	lsls	r2, r3, #2
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a13      	ldr	r2, [pc, #76]	@ (8005a1c <HAL_DMA_Init+0x244>)
 80059ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80059d0:	e035      	b.n	8005a3e <HAL_DMA_Init+0x266>
 80059d2:	bf00      	nop
 80059d4:	40020008 	.word	0x40020008
 80059d8:	4002001c 	.word	0x4002001c
 80059dc:	40020030 	.word	0x40020030
 80059e0:	40020044 	.word	0x40020044
 80059e4:	40020058 	.word	0x40020058
 80059e8:	4002006c 	.word	0x4002006c
 80059ec:	40020080 	.word	0x40020080
 80059f0:	40020408 	.word	0x40020408
 80059f4:	4002041c 	.word	0x4002041c
 80059f8:	40020430 	.word	0x40020430
 80059fc:	40020444 	.word	0x40020444
 8005a00:	40020458 	.word	0x40020458
 8005a04:	4002046c 	.word	0x4002046c
 8005a08:	40020480 	.word	0x40020480
 8005a0c:	0800f34c 	.word	0x0800f34c
 8005a10:	40020407 	.word	0x40020407
 8005a14:	bffdfff8 	.word	0xbffdfff8
 8005a18:	cccccccd 	.word	0xcccccccd
 8005a1c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	4b42      	ldr	r3, [pc, #264]	@ (8005b30 <HAL_DMA_Init+0x358>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	4a42      	ldr	r2, [pc, #264]	@ (8005b34 <HAL_DMA_Init+0x35c>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	009a      	lsls	r2, r3, #2
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b38 <HAL_DMA_Init+0x360>)
 8005a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a58:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a98:	d039      	beq.n	8005b0e <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	4a27      	ldr	r2, [pc, #156]	@ (8005b3c <HAL_DMA_Init+0x364>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d11a      	bne.n	8005ada <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005aa4:	4b26      	ldr	r3, [pc, #152]	@ (8005b40 <HAL_DMA_Init+0x368>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aac:	f003 031c 	and.w	r3, r3, #28
 8005ab0:	210f      	movs	r1, #15
 8005ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	4921      	ldr	r1, [pc, #132]	@ (8005b40 <HAL_DMA_Init+0x368>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005abe:	4b20      	ldr	r3, [pc, #128]	@ (8005b40 <HAL_DMA_Init+0x368>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aca:	f003 031c 	and.w	r3, r3, #28
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	491b      	ldr	r1, [pc, #108]	@ (8005b40 <HAL_DMA_Init+0x368>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]
 8005ad8:	e019      	b.n	8005b0e <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ada:	4b1a      	ldr	r3, [pc, #104]	@ (8005b44 <HAL_DMA_Init+0x36c>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae2:	f003 031c 	and.w	r3, r3, #28
 8005ae6:	210f      	movs	r1, #15
 8005ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aec:	43db      	mvns	r3, r3
 8005aee:	4915      	ldr	r1, [pc, #84]	@ (8005b44 <HAL_DMA_Init+0x36c>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005af4:	4b13      	ldr	r3, [pc, #76]	@ (8005b44 <HAL_DMA_Init+0x36c>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6859      	ldr	r1, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b00:	f003 031c 	and.w	r3, r3, #28
 8005b04:	fa01 f303 	lsl.w	r3, r1, r3
 8005b08:	490e      	ldr	r1, [pc, #56]	@ (8005b44 <HAL_DMA_Init+0x36c>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	bffdfbf8 	.word	0xbffdfbf8
 8005b34:	cccccccd 	.word	0xcccccccd
 8005b38:	40020400 	.word	0x40020400
 8005b3c:	40020000 	.word	0x40020000
 8005b40:	400200a8 	.word	0x400200a8
 8005b44:	400204a8 	.word	0x400204a8

08005b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_DMA_Start_IT+0x20>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b66:	d304      	bcc.n	8005b72 <HAL_DMA_Start_IT+0x2a>
 8005b68:	f240 11df 	movw	r1, #479	@ 0x1df
 8005b6c:	482c      	ldr	r0, [pc, #176]	@ (8005c20 <HAL_DMA_Start_IT+0xd8>)
 8005b6e:	f7fe febd 	bl	80048ec <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_DMA_Start_IT+0x38>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e04b      	b.n	8005c18 <HAL_DMA_Start_IT+0xd0>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d13a      	bne.n	8005c0a <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f923 	bl	8005e04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d008      	beq.n	8005bd8 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 020e 	orr.w	r2, r2, #14
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e00f      	b.n	8005bf8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0204 	bic.w	r2, r2, #4
 8005be6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 020a 	orr.w	r2, r2, #10
 8005bf6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e005      	b.n	8005c16 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
 8005c14:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	0800f34c 	.word	0x0800f34c

08005c24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d005      	beq.n	8005c48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2204      	movs	r2, #4
 8005c40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
 8005c46:	e029      	b.n	8005c9c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 020e 	bic.w	r2, r2, #14
 8005c56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6c:	f003 021c 	and.w	r2, r3, #28
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f202 	lsl.w	r2, r1, r2
 8005c7a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
    }
  }
  return status;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc2:	f003 031c 	and.w	r3, r3, #28
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d026      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x7a>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d021      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0204 	bic.w	r2, r2, #4
 8005cf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f003 021c 	and.w	r2, r3, #28
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	2104      	movs	r1, #4
 8005d08:	fa01 f202 	lsl.w	r2, r1, r2
 8005d0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d071      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d1e:	e06c      	b.n	8005dfa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d24:	f003 031c 	and.w	r3, r3, #28
 8005d28:	2202      	movs	r2, #2
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d02e      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xec>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d029      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 020a 	bic.w	r2, r2, #10
 8005d5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	f003 021c 	and.w	r2, r3, #28
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	2102      	movs	r1, #2
 8005d72:	fa01 f202 	lsl.w	r2, r1, r2
 8005d76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d038      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005d90:	e033      	b.n	8005dfa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d96:	f003 031c 	and.w	r3, r3, #28
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02a      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x156>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d025      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 020e 	bic.w	r2, r2, #14
 8005dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc4:	f003 021c 	and.w	r2, r3, #28
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
}
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e16:	f003 021c 	and.w	r2, r3, #28
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	2101      	movs	r1, #1
 8005e20:	fa01 f202 	lsl.w	r2, r1, r2
 8005e24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d108      	bne.n	8005e48 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e46:	e007      	b.n	8005e58 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	60da      	str	r2, [r3, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e78:	d01f      	beq.n	8005eba <HAL_GPIO_Init+0x56>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f70 <HAL_GPIO_Init+0x10c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01b      	beq.n	8005eba <HAL_GPIO_Init+0x56>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a3b      	ldr	r2, [pc, #236]	@ (8005f74 <HAL_GPIO_Init+0x110>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d017      	beq.n	8005eba <HAL_GPIO_Init+0x56>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8005f78 <HAL_GPIO_Init+0x114>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_GPIO_Init+0x56>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a39      	ldr	r2, [pc, #228]	@ (8005f7c <HAL_GPIO_Init+0x118>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00f      	beq.n	8005eba <HAL_GPIO_Init+0x56>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a38      	ldr	r2, [pc, #224]	@ (8005f80 <HAL_GPIO_Init+0x11c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <HAL_GPIO_Init+0x56>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a37      	ldr	r2, [pc, #220]	@ (8005f84 <HAL_GPIO_Init+0x120>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <HAL_GPIO_Init+0x56>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a36      	ldr	r2, [pc, #216]	@ (8005f88 <HAL_GPIO_Init+0x124>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <HAL_GPIO_Init+0x56>
 8005eb2:	21aa      	movs	r1, #170	@ 0xaa
 8005eb4:	4835      	ldr	r0, [pc, #212]	@ (8005f8c <HAL_GPIO_Init+0x128>)
 8005eb6:	f7fe fd19 	bl	80048ec <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <HAL_GPIO_Init+0x6a>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ecc:	d303      	bcc.n	8005ed6 <HAL_GPIO_Init+0x72>
 8005ece:	21ab      	movs	r1, #171	@ 0xab
 8005ed0:	482e      	ldr	r0, [pc, #184]	@ (8005f8c <HAL_GPIO_Init+0x128>)
 8005ed2:	f7fe fd0b 	bl	80048ec <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 823d 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	f000 8238 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b11      	cmp	r3, #17
 8005ef0:	f000 8233 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	f000 822e 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b12      	cmp	r3, #18
 8005f04:	f000 8229 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8005f10:	f000 8223 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005f1c:	f000 821d 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8005f28:	f000 8217 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8005f34:	f000 8211 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8005f40:	f000 820b 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8005f4c:	f000 8205 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	f000 8200 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b0b      	cmp	r3, #11
 8005f60:	f000 81fb 	beq.w	800635a <HAL_GPIO_Init+0x4f6>
 8005f64:	21ac      	movs	r1, #172	@ 0xac
 8005f66:	4809      	ldr	r0, [pc, #36]	@ (8005f8c <HAL_GPIO_Init+0x128>)
 8005f68:	f7fe fcc0 	bl	80048ec <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f6c:	e1f5      	b.n	800635a <HAL_GPIO_Init+0x4f6>
 8005f6e:	bf00      	nop
 8005f70:	48000400 	.word	0x48000400
 8005f74:	48000800 	.word	0x48000800
 8005f78:	48000c00 	.word	0x48000c00
 8005f7c:	48001000 	.word	0x48001000
 8005f80:	48001400 	.word	0x48001400
 8005f84:	48001800 	.word	0x48001800
 8005f88:	48001c00 	.word	0x48001c00
 8005f8c:	0800f384 	.word	0x0800f384
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	2101      	movs	r1, #1
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 81d6 	beq.w	8006354 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d005      	beq.n	8005fc0 <HAL_GPIO_Init+0x15c>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d144      	bne.n	800604a <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00f      	beq.n	8005fe8 <HAL_GPIO_Init+0x184>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d00b      	beq.n	8005fe8 <HAL_GPIO_Init+0x184>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d007      	beq.n	8005fe8 <HAL_GPIO_Init+0x184>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d003      	beq.n	8005fe8 <HAL_GPIO_Init+0x184>
 8005fe0:	21bb      	movs	r1, #187	@ 0xbb
 8005fe2:	489c      	ldr	r0, [pc, #624]	@ (8006254 <HAL_GPIO_Init+0x3f0>)
 8005fe4:	f7fe fc82 	bl	80048ec <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800601e:	2201      	movs	r2, #1
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4013      	ands	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	091b      	lsrs	r3, r3, #4
 8006034:	f003 0201 	and.w	r2, r3, #1
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	2b03      	cmp	r3, #3
 8006054:	d118      	bne.n	8006088 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800605c:	2201      	movs	r2, #1
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4013      	ands	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	08db      	lsrs	r3, r3, #3
 8006072:	f003 0201 	and.w	r2, r3, #1
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	2b03      	cmp	r3, #3
 8006092:	d027      	beq.n	80060e4 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <HAL_GPIO_Init+0x250>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d007      	beq.n	80060b4 <HAL_GPIO_Init+0x250>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d003      	beq.n	80060b4 <HAL_GPIO_Init+0x250>
 80060ac:	21dc      	movs	r1, #220	@ 0xdc
 80060ae:	4869      	ldr	r0, [pc, #420]	@ (8006254 <HAL_GPIO_Init+0x3f0>)
 80060b0:	f7fe fc1c 	bl	80048ec <assert_failed>

        temp = GPIOx->PUPDR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	2203      	movs	r2, #3
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	43db      	mvns	r3, r3
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4013      	ands	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d14f      	bne.n	8006190 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80060f6:	d01f      	beq.n	8006138 <HAL_GPIO_Init+0x2d4>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a57      	ldr	r2, [pc, #348]	@ (8006258 <HAL_GPIO_Init+0x3f4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d01b      	beq.n	8006138 <HAL_GPIO_Init+0x2d4>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a56      	ldr	r2, [pc, #344]	@ (800625c <HAL_GPIO_Init+0x3f8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d017      	beq.n	8006138 <HAL_GPIO_Init+0x2d4>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a55      	ldr	r2, [pc, #340]	@ (8006260 <HAL_GPIO_Init+0x3fc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d013      	beq.n	8006138 <HAL_GPIO_Init+0x2d4>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a54      	ldr	r2, [pc, #336]	@ (8006264 <HAL_GPIO_Init+0x400>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00f      	beq.n	8006138 <HAL_GPIO_Init+0x2d4>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a53      	ldr	r2, [pc, #332]	@ (8006268 <HAL_GPIO_Init+0x404>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00b      	beq.n	8006138 <HAL_GPIO_Init+0x2d4>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a52      	ldr	r2, [pc, #328]	@ (800626c <HAL_GPIO_Init+0x408>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <HAL_GPIO_Init+0x2d4>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a51      	ldr	r2, [pc, #324]	@ (8006270 <HAL_GPIO_Init+0x40c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <HAL_GPIO_Init+0x2d4>
 8006130:	21e8      	movs	r1, #232	@ 0xe8
 8006132:	4848      	ldr	r0, [pc, #288]	@ (8006254 <HAL_GPIO_Init+0x3f0>)
 8006134:	f7fe fbda 	bl	80048ec <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b0f      	cmp	r3, #15
 800613e:	d903      	bls.n	8006148 <HAL_GPIO_Init+0x2e4>
 8006140:	21e9      	movs	r1, #233	@ 0xe9
 8006142:	4844      	ldr	r0, [pc, #272]	@ (8006254 <HAL_GPIO_Init+0x3f0>)
 8006144:	f7fe fbd2 	bl	80048ec <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	08da      	lsrs	r2, r3, #3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3208      	adds	r2, #8
 8006150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006154:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	220f      	movs	r2, #15
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4013      	ands	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	08da      	lsrs	r2, r3, #3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3208      	adds	r2, #8
 800618a:	6939      	ldr	r1, [r7, #16]
 800618c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	2203      	movs	r2, #3
 800619c:	fa02 f303 	lsl.w	r3, r2, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4013      	ands	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 0203 	and.w	r2, r3, #3
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80c1 	beq.w	8006354 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061d2:	4b28      	ldr	r3, [pc, #160]	@ (8006274 <HAL_GPIO_Init+0x410>)
 80061d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d6:	4a27      	ldr	r2, [pc, #156]	@ (8006274 <HAL_GPIO_Init+0x410>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80061de:	4b25      	ldr	r3, [pc, #148]	@ (8006274 <HAL_GPIO_Init+0x410>)
 80061e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	60bb      	str	r3, [r7, #8]
 80061e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80061ea:	4a23      	ldr	r2, [pc, #140]	@ (8006278 <HAL_GPIO_Init+0x414>)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	3302      	adds	r3, #2
 80061f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	220f      	movs	r2, #15
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	43db      	mvns	r3, r3
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4013      	ands	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006214:	d03a      	beq.n	800628c <HAL_GPIO_Init+0x428>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a0f      	ldr	r2, [pc, #60]	@ (8006258 <HAL_GPIO_Init+0x3f4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d034      	beq.n	8006288 <HAL_GPIO_Init+0x424>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a0e      	ldr	r2, [pc, #56]	@ (800625c <HAL_GPIO_Init+0x3f8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d02e      	beq.n	8006284 <HAL_GPIO_Init+0x420>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a0d      	ldr	r2, [pc, #52]	@ (8006260 <HAL_GPIO_Init+0x3fc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d028      	beq.n	8006280 <HAL_GPIO_Init+0x41c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a0c      	ldr	r2, [pc, #48]	@ (8006264 <HAL_GPIO_Init+0x400>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d022      	beq.n	800627c <HAL_GPIO_Init+0x418>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a0b      	ldr	r2, [pc, #44]	@ (8006268 <HAL_GPIO_Init+0x404>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d007      	beq.n	800624e <HAL_GPIO_Init+0x3ea>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <HAL_GPIO_Init+0x408>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_GPIO_Init+0x3e6>
 8006246:	2306      	movs	r3, #6
 8006248:	e021      	b.n	800628e <HAL_GPIO_Init+0x42a>
 800624a:	2307      	movs	r3, #7
 800624c:	e01f      	b.n	800628e <HAL_GPIO_Init+0x42a>
 800624e:	2305      	movs	r3, #5
 8006250:	e01d      	b.n	800628e <HAL_GPIO_Init+0x42a>
 8006252:	bf00      	nop
 8006254:	0800f384 	.word	0x0800f384
 8006258:	48000400 	.word	0x48000400
 800625c:	48000800 	.word	0x48000800
 8006260:	48000c00 	.word	0x48000c00
 8006264:	48001000 	.word	0x48001000
 8006268:	48001400 	.word	0x48001400
 800626c:	48001800 	.word	0x48001800
 8006270:	48001c00 	.word	0x48001c00
 8006274:	40021000 	.word	0x40021000
 8006278:	40010000 	.word	0x40010000
 800627c:	2304      	movs	r3, #4
 800627e:	e006      	b.n	800628e <HAL_GPIO_Init+0x42a>
 8006280:	2303      	movs	r3, #3
 8006282:	e004      	b.n	800628e <HAL_GPIO_Init+0x42a>
 8006284:	2302      	movs	r3, #2
 8006286:	e002      	b.n	800628e <HAL_GPIO_Init+0x42a>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_GPIO_Init+0x42a>
 800628c:	2300      	movs	r3, #0
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	f002 0203 	and.w	r2, r2, #3
 8006294:	0092      	lsls	r2, r2, #2
 8006296:	4093      	lsls	r3, r2
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800629e:	4935      	ldr	r1, [pc, #212]	@ (8006374 <HAL_GPIO_Init+0x510>)
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	089b      	lsrs	r3, r3, #2
 80062a4:	3302      	adds	r3, #2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062ac:	4b32      	ldr	r3, [pc, #200]	@ (8006378 <HAL_GPIO_Init+0x514>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4013      	ands	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062d0:	4a29      	ldr	r2, [pc, #164]	@ (8006378 <HAL_GPIO_Init+0x514>)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80062d6:	4b28      	ldr	r3, [pc, #160]	@ (8006378 <HAL_GPIO_Init+0x514>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	43db      	mvns	r3, r3
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4013      	ands	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006378 <HAL_GPIO_Init+0x514>)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006300:	4b1d      	ldr	r3, [pc, #116]	@ (8006378 <HAL_GPIO_Init+0x514>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	43db      	mvns	r3, r3
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4013      	ands	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006324:	4a14      	ldr	r2, [pc, #80]	@ (8006378 <HAL_GPIO_Init+0x514>)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800632a:	4b13      	ldr	r3, [pc, #76]	@ (8006378 <HAL_GPIO_Init+0x514>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	43db      	mvns	r3, r3
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4013      	ands	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800634e:	4a0a      	ldr	r2, [pc, #40]	@ (8006378 <HAL_GPIO_Init+0x514>)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	3301      	adds	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	f47f ae13 	bne.w	8005f90 <HAL_GPIO_Init+0x12c>
  }
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40010000 	.word	0x40010000
 8006378:	40010400 	.word	0x40010400

0800637c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006388:	887b      	ldrh	r3, [r7, #2]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <HAL_GPIO_ReadPin+0x1c>
 800638e:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 8006392:	4809      	ldr	r0, [pc, #36]	@ (80063b8 <HAL_GPIO_ReadPin+0x3c>)
 8006394:	f7fe faaa 	bl	80048ec <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	887b      	ldrh	r3, [r7, #2]
 800639e:	4013      	ands	r3, r2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
 80063a8:	e001      	b.n	80063ae <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	0800f384 	.word	0x0800f384

080063bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	807b      	strh	r3, [r7, #2]
 80063c8:	4613      	mov	r3, r2
 80063ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80063cc:	887b      	ldrh	r3, [r7, #2]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <HAL_GPIO_WritePin+0x20>
 80063d2:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80063d6:	480e      	ldr	r0, [pc, #56]	@ (8006410 <HAL_GPIO_WritePin+0x54>)
 80063d8:	f7fe fa88 	bl	80048ec <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80063dc:	787b      	ldrb	r3, [r7, #1]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <HAL_GPIO_WritePin+0x36>
 80063e2:	787b      	ldrb	r3, [r7, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d004      	beq.n	80063f2 <HAL_GPIO_WritePin+0x36>
 80063e8:	f240 11af 	movw	r1, #431	@ 0x1af
 80063ec:	4808      	ldr	r0, [pc, #32]	@ (8006410 <HAL_GPIO_WritePin+0x54>)
 80063ee:	f7fe fa7d 	bl	80048ec <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80063f2:	787b      	ldrb	r3, [r7, #1]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063f8:	887a      	ldrh	r2, [r7, #2]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063fe:	e002      	b.n	8006406 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006400:	887a      	ldrh	r2, [r7, #2]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	0800f384 	.word	0x0800f384

08006414 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006420:	887b      	ldrh	r3, [r7, #2]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <HAL_GPIO_TogglePin+0x1c>
 8006426:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 800642a:	480a      	ldr	r0, [pc, #40]	@ (8006454 <HAL_GPIO_TogglePin+0x40>)
 800642c:	f7fe fa5e 	bl	80048ec <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006436:	887a      	ldrh	r2, [r7, #2]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4013      	ands	r3, r2
 800643c:	041a      	lsls	r2, r3, #16
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	43d9      	mvns	r1, r3
 8006442:	887b      	ldrh	r3, [r7, #2]
 8006444:	400b      	ands	r3, r1
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	0800f384 	.word	0x0800f384

08006458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006462:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d006      	beq.n	800647c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800646e:	4a05      	ldr	r2, [pc, #20]	@ (8006484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe f9ce 	bl	8004818 <HAL_GPIO_EXTI_Callback>
  }
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40010400 	.word	0x40010400

08006488 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e1f3      	b.n	8006882 <HAL_LPTIM_Init+0x3fa>
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a8e      	ldr	r2, [pc, #568]	@ (80066d8 <HAL_LPTIM_Init+0x250>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d008      	beq.n	80064b6 <HAL_LPTIM_Init+0x2e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a8c      	ldr	r2, [pc, #560]	@ (80066dc <HAL_LPTIM_Init+0x254>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <HAL_LPTIM_Init+0x2e>
 80064ae:	21fc      	movs	r1, #252	@ 0xfc
 80064b0:	488b      	ldr	r0, [pc, #556]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 80064b2:	f7fe fa1b 	bl	80048ec <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d007      	beq.n	80064ce <HAL_LPTIM_Init+0x46>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_LPTIM_Init+0x46>
 80064c6:	21fe      	movs	r1, #254	@ 0xfe
 80064c8:	4885      	ldr	r0, [pc, #532]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 80064ca:	f7fe fa0f 	bl	80048ec <assert_failed>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d026      	beq.n	8006524 <HAL_LPTIM_Init+0x9c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064de:	d021      	beq.n	8006524 <HAL_LPTIM_Init+0x9c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e8:	d01c      	beq.n	8006524 <HAL_LPTIM_Init+0x9c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80064f2:	d017      	beq.n	8006524 <HAL_LPTIM_Init+0x9c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064fc:	d012      	beq.n	8006524 <HAL_LPTIM_Init+0x9c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006506:	d00d      	beq.n	8006524 <HAL_LPTIM_Init+0x9c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006510:	d008      	beq.n	8006524 <HAL_LPTIM_Init+0x9c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800651a:	d003      	beq.n	8006524 <HAL_LPTIM_Init+0x9c>
 800651c:	21ff      	movs	r1, #255	@ 0xff
 800651e:	4870      	ldr	r0, [pc, #448]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 8006520:	f7fe f9e4 	bl	80048ec <assert_failed>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d004      	beq.n	8006536 <HAL_LPTIM_Init+0xae>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006534:	d125      	bne.n	8006582 <HAL_LPTIM_Init+0xfa>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00c      	beq.n	8006558 <HAL_LPTIM_Init+0xd0>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d008      	beq.n	8006558 <HAL_LPTIM_Init+0xd0>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b04      	cmp	r3, #4
 800654c:	d004      	beq.n	8006558 <HAL_LPTIM_Init+0xd0>
 800654e:	f240 1103 	movw	r1, #259	@ 0x103
 8006552:	4863      	ldr	r0, [pc, #396]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 8006554:	f7fe f9ca 	bl	80048ec <assert_failed>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d010      	beq.n	8006582 <HAL_LPTIM_Init+0xfa>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b08      	cmp	r3, #8
 8006566:	d00c      	beq.n	8006582 <HAL_LPTIM_Init+0xfa>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b10      	cmp	r3, #16
 800656e:	d008      	beq.n	8006582 <HAL_LPTIM_Init+0xfa>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b18      	cmp	r3, #24
 8006576:	d004      	beq.n	8006582 <HAL_LPTIM_Init+0xfa>
 8006578:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800657c:	4858      	ldr	r0, [pc, #352]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 800657e:	f7fe f9b5 	bl	80048ec <assert_failed>
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800658a:	4293      	cmp	r3, r2
 800658c:	d02b      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d027      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800659e:	d022      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065a8:	d01d      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065b2:	d018      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065bc:	d013      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065c6:	d00e      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80065d0:	d009      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80065da:	d004      	beq.n	80065e6 <HAL_LPTIM_Init+0x15e>
 80065dc:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80065e0:	483f      	ldr	r0, [pc, #252]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 80065e2:	f7fe f983 	bl	80048ec <assert_failed>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d028      	beq.n	8006644 <HAL_LPTIM_Init+0x1bc>
  {
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065fa:	d00e      	beq.n	800661a <HAL_LPTIM_Init+0x192>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006604:	d009      	beq.n	800661a <HAL_LPTIM_Init+0x192>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800660e:	d004      	beq.n	800661a <HAL_LPTIM_Init+0x192>
 8006610:	f240 1109 	movw	r1, #265	@ 0x109
 8006614:	4832      	ldr	r0, [pc, #200]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 8006616:	f7fe f969 	bl	80048ec <assert_failed>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d010      	beq.n	8006644 <HAL_LPTIM_Init+0x1bc>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	2b40      	cmp	r3, #64	@ 0x40
 8006628:	d00c      	beq.n	8006644 <HAL_LPTIM_Init+0x1bc>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	2b80      	cmp	r3, #128	@ 0x80
 8006630:	d008      	beq.n	8006644 <HAL_LPTIM_Init+0x1bc>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	2bc0      	cmp	r3, #192	@ 0xc0
 8006638:	d004      	beq.n	8006644 <HAL_LPTIM_Init+0x1bc>
 800663a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800663e:	4828      	ldr	r0, [pc, #160]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 8006640:	f7fe f954 	bl	80048ec <assert_failed>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800664c:	d008      	beq.n	8006660 <HAL_LPTIM_Init+0x1d8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <HAL_LPTIM_Init+0x1d8>
 8006656:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800665a:	4821      	ldr	r0, [pc, #132]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 800665c:	f7fe f946 	bl	80048ec <assert_failed>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <HAL_LPTIM_Init+0x1f4>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006670:	d004      	beq.n	800667c <HAL_LPTIM_Init+0x1f4>
 8006672:	f240 110d 	movw	r1, #269	@ 0x10d
 8006676:	481a      	ldr	r0, [pc, #104]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 8006678:	f7fe f938 	bl	80048ec <assert_failed>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	2b00      	cmp	r3, #0
 8006682:	d009      	beq.n	8006698 <HAL_LPTIM_Init+0x210>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800668c:	d004      	beq.n	8006698 <HAL_LPTIM_Init+0x210>
 800668e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8006692:	4813      	ldr	r0, [pc, #76]	@ (80066e0 <HAL_LPTIM_Init+0x258>)
 8006694:	f7fe f92a 	bl	80048ec <assert_failed>
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_LPTIM_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7fd ff93 	bl	80045d8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d00c      	beq.n	80066e4 <HAL_LPTIM_Init+0x25c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066d2:	d10b      	bne.n	80066ec <HAL_LPTIM_Init+0x264>
 80066d4:	e006      	b.n	80066e4 <HAL_LPTIM_Init+0x25c>
 80066d6:	bf00      	nop
 80066d8:	40007c00 	.word	0x40007c00
 80066dc:	40009400 	.word	0x40009400
 80066e0:	0800f3c0 	.word	0x0800f3c0
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 031e 	bic.w	r3, r3, #30
 80066ea:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d005      	beq.n	8006704 <HAL_LPTIM_Init+0x27c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80066fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006702:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4b61      	ldr	r3, [pc, #388]	@ (800688c <HAL_LPTIM_Init+0x404>)
 8006708:	4013      	ands	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006714:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800671a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8006720:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8006726:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d107      	bne.n	8006746 <HAL_LPTIM_Init+0x2be>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800673e:	4313      	orrs	r3, r2
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d004      	beq.n	8006758 <HAL_LPTIM_Init+0x2d0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006752:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006756:	d107      	bne.n	8006768 <HAL_LPTIM_Init+0x2e0>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006760:	4313      	orrs	r3, r2
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006770:	4293      	cmp	r3, r2
 8006772:	d00a      	beq.n	800678a <HAL_LPTIM_Init+0x302>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800677c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8006782:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a3e      	ldr	r2, [pc, #248]	@ (8006890 <HAL_LPTIM_Init+0x408>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d141      	bne.n	8006820 <HAL_LPTIM_Init+0x398>
  {
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a3b      	ldr	r2, [pc, #236]	@ (8006890 <HAL_LPTIM_Init+0x408>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d107      	bne.n	80067b6 <HAL_LPTIM_Init+0x32e>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d01d      	beq.n	80067ea <HAL_LPTIM_Init+0x362>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d019      	beq.n	80067ea <HAL_LPTIM_Init+0x362>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a36      	ldr	r2, [pc, #216]	@ (8006894 <HAL_LPTIM_Init+0x40c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10f      	bne.n	80067e0 <HAL_LPTIM_Init+0x358>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <HAL_LPTIM_Init+0x362>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d00c      	beq.n	80067ea <HAL_LPTIM_Init+0x362>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d008      	beq.n	80067ea <HAL_LPTIM_Init+0x362>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d004      	beq.n	80067ea <HAL_LPTIM_Init+0x362>
 80067e0:	f240 117f 	movw	r1, #383	@ 0x17f
 80067e4:	482c      	ldr	r0, [pc, #176]	@ (8006898 <HAL_LPTIM_Init+0x410>)
 80067e6:	f7fe f881 	bl	80048ec <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a28      	ldr	r2, [pc, #160]	@ (8006890 <HAL_LPTIM_Init+0x408>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d107      	bne.n	8006804 <HAL_LPTIM_Init+0x37c>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_LPTIM_Init+0x386>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006800:	2b02      	cmp	r3, #2
 8006802:	d004      	beq.n	800680e <HAL_LPTIM_Init+0x386>
 8006804:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8006808:	4823      	ldr	r0, [pc, #140]	@ (8006898 <HAL_LPTIM_Init+0x410>)
 800680a:	f7fe f86f 	bl	80048ec <assert_failed>

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	621a      	str	r2, [r3, #32]
 800681e:	e02b      	b.n	8006878 <HAL_LPTIM_Init+0x3f0>
  }
  else
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1a      	ldr	r2, [pc, #104]	@ (8006890 <HAL_LPTIM_Init+0x408>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d107      	bne.n	800683a <HAL_LPTIM_Init+0x3b2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01d      	beq.n	800686e <HAL_LPTIM_Init+0x3e6>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d019      	beq.n	800686e <HAL_LPTIM_Init+0x3e6>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a15      	ldr	r2, [pc, #84]	@ (8006894 <HAL_LPTIM_Init+0x40c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d10f      	bne.n	8006864 <HAL_LPTIM_Init+0x3dc>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <HAL_LPTIM_Init+0x3e6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d00c      	beq.n	800686e <HAL_LPTIM_Init+0x3e6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	2b02      	cmp	r3, #2
 800685a:	d008      	beq.n	800686e <HAL_LPTIM_Init+0x3e6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006860:	2b03      	cmp	r3, #3
 8006862:	d004      	beq.n	800686e <HAL_LPTIM_Init+0x3e6>
 8006864:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006868:	480b      	ldr	r0, [pc, #44]	@ (8006898 <HAL_LPTIM_Init+0x410>)
 800686a:	f7fe f83f 	bl	80048ec <assert_failed>

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006876:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	ff19f1fe 	.word	0xff19f1fe
 8006890:	40007c00 	.word	0x40007c00
 8006894:	40009400 	.word	0x40009400
 8006898:	0800f3c0 	.word	0x0800f3c0

0800689c <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t          tmpcfgr;

  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a3f      	ldr	r2, [pc, #252]	@ (80069a8 <HAL_LPTIM_Encoder_Start+0x10c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <HAL_LPTIM_Encoder_Start+0x1e>
 80068b0:	f240 41ca 	movw	r1, #1226	@ 0x4ca
 80068b4:	483d      	ldr	r0, [pc, #244]	@ (80069ac <HAL_LPTIM_Encoder_Start+0x110>)
 80068b6:	f7fe f819 	bl	80048ec <assert_failed>
  assert_param(IS_LPTIM_PERIOD(Period));
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_LPTIM_Encoder_Start+0x2c>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c6:	d304      	bcc.n	80068d2 <HAL_LPTIM_Encoder_Start+0x36>
 80068c8:	f240 41cb 	movw	r1, #1227	@ 0x4cb
 80068cc:	4837      	ldr	r0, [pc, #220]	@ (80069ac <HAL_LPTIM_Encoder_Start+0x110>)
 80068ce:	f7fe f80d 	bl	80048ec <assert_failed>
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <HAL_LPTIM_Encoder_Start+0x48>
 80068da:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 80068de:	4833      	ldr	r0, [pc, #204]	@ (80069ac <HAL_LPTIM_Encoder_Start+0x110>)
 80068e0:	f7fe f804 	bl	80048ec <assert_failed>
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <HAL_LPTIM_Encoder_Start+0x5a>
 80068ec:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 80068f0:	482e      	ldr	r0, [pc, #184]	@ (80069ac <HAL_LPTIM_Encoder_Start+0x110>)
 80068f2:	f7fd fffb 	bl	80048ec <assert_failed>
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <HAL_LPTIM_Encoder_Start+0x7c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d008      	beq.n	8006918 <HAL_LPTIM_Encoder_Start+0x7c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d004      	beq.n	8006918 <HAL_LPTIM_Encoder_Start+0x7c>
 800690e:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 8006912:	4826      	ldr	r0, [pc, #152]	@ (80069ac <HAL_LPTIM_Encoder_Start+0x110>)
 8006914:	f7fd ffea 	bl	80048ec <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0306 	bic.w	r3, r3, #6
 800692e:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006950:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0201 	orr.w	r2, r2, #1
 8006960:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2210      	movs	r2, #16
 8006968:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006972:	2110      	movs	r1, #16
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f93d 	bl	8006bf4 <LPTIM_WaitForFlag>
 800697a:	4603      	mov	r3, r0
 800697c:	2b03      	cmp	r3, #3
 800697e:	d101      	bne.n	8006984 <HAL_LPTIM_Encoder_Start+0xe8>
  {
    return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e00c      	b.n	800699e <HAL_LPTIM_Encoder_Start+0x102>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0204 	orr.w	r2, r2, #4
 8006992:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40007c00 	.word	0x40007c00
 80069ac:	0800f3c0 	.word	0x0800f3c0

080069b0 <HAL_LPTIM_Encoder_Stop>:
  * @brief  Stop the Encoder interface.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a13      	ldr	r2, [pc, #76]	@ (8006a0c <HAL_LPTIM_Encoder_Stop+0x5c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_LPTIM_Encoder_Stop+0x1c>
 80069c2:	f240 5103 	movw	r1, #1283	@ 0x503
 80069c6:	4812      	ldr	r0, [pc, #72]	@ (8006a10 <HAL_LPTIM_Encoder_Stop+0x60>)
 80069c8:	f7fd ff90 	bl	80048ec <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f93d 	bl	8006c54 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8fb 	bl	8006bd6 <HAL_LPTIM_GetState>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d101      	bne.n	80069ea <HAL_LPTIM_Encoder_Stop+0x3a>
  {
    return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e00c      	b.n	8006a04 <HAL_LPTIM_Encoder_Stop+0x54>
  }

  /* Reset ENC bit to disable the encoder interface */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80069f8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40007c00 	.word	0x40007c00
 8006a10:	0800f3c0 	.word	0x0800f3c0

08006a14 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d10d      	bne.n	8006a46 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d106      	bne.n	8006a46 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f882 	bl	8006b4a <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d10d      	bne.n	8006a70 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d106      	bne.n	8006a70 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2202      	movs	r2, #2
 8006a68:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f877 	bl	8006b5e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d10d      	bne.n	8006a9a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d106      	bne.n	8006a9a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2204      	movs	r2, #4
 8006a92:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f86c 	bl	8006b72 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d10d      	bne.n	8006ac4 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d106      	bne.n	8006ac4 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2208      	movs	r2, #8
 8006abc:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f861 	bl	8006b86 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	d10d      	bne.n	8006aee <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d106      	bne.n	8006aee <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2210      	movs	r2, #16
 8006ae6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f856 	bl	8006b9a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d10d      	bne.n	8006b18 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d106      	bne.n	8006b18 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f84b 	bl	8006bae <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b22:	2b40      	cmp	r3, #64	@ 0x40
 8006b24:	d10d      	bne.n	8006b42 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b30:	2b40      	cmp	r3, #64	@ 0x40
 8006b32:	d106      	bne.n	8006b42 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2240      	movs	r2, #64	@ 0x40
 8006b3a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f840 	bl	8006bc2 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006be4:	b2db      	uxtb	r3, r3
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
	...

08006bf4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006c02:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <LPTIM_WaitForFlag+0x58>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a12      	ldr	r2, [pc, #72]	@ (8006c50 <LPTIM_WaitForFlag+0x5c>)
 8006c08:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0c:	0b9b      	lsrs	r3, r3, #14
 8006c0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006c12:	fb02 f303 	mul.w	r3, r2, r3
 8006c16:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	4013      	ands	r3, r2
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d002      	beq.n	8006c3e <LPTIM_WaitForFlag+0x4a>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1ec      	bne.n	8006c18 <LPTIM_WaitForFlag+0x24>

  return result;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	20000014 	.word	0x20000014
 8006c50:	d1b71759 	.word	0xd1b71759

08006c54 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08c      	sub	sp, #48	@ 0x30
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c60:	f3ef 8310 	mrs	r3, PRIMASK
 8006c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c66:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f383 8810 	msr	PRIMASK, r3
}
 8006c74:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a73      	ldr	r2, [pc, #460]	@ (8006e48 <LPTIM_Disable+0x1f4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <LPTIM_Disable+0x34>
 8006c80:	4a72      	ldr	r2, [pc, #456]	@ (8006e4c <LPTIM_Disable+0x1f8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d007      	beq.n	8006c96 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8006c86:	e00d      	b.n	8006ca4 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006c88:	4b71      	ldr	r3, [pc, #452]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006c94:	e006      	b.n	8006ca4 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006c96:	4b6e      	ldr	r3, [pc, #440]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006ca2:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8006e48 <LPTIM_Disable+0x1f4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d003      	beq.n	8006cde <LPTIM_Disable+0x8a>
 8006cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8006e4c <LPTIM_Disable+0x1f8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00d      	beq.n	8006cf8 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8006cdc:	e019      	b.n	8006d12 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8006cde:	4b5c      	ldr	r3, [pc, #368]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	4a5b      	ldr	r2, [pc, #364]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006ce4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ce8:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006cea:	4b59      	ldr	r3, [pc, #356]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	4a58      	ldr	r2, [pc, #352]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cf4:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8006cf6:	e00c      	b.n	8006d12 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8006cf8:	4b55      	ldr	r3, [pc, #340]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfc:	4a54      	ldr	r2, [pc, #336]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006cfe:	f043 0320 	orr.w	r3, r3, #32
 8006d02:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8006d04:	4b52      	ldr	r3, [pc, #328]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d08:	4a51      	ldr	r2, [pc, #324]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006d0a:	f023 0320 	bic.w	r3, r3, #32
 8006d0e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8006d10:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d102      	bne.n	8006d1e <LPTIM_Disable+0xca>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d075      	beq.n	8006e0a <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a49      	ldr	r2, [pc, #292]	@ (8006e48 <LPTIM_Disable+0x1f4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <LPTIM_Disable+0xdc>
 8006d28:	4a48      	ldr	r2, [pc, #288]	@ (8006e4c <LPTIM_Disable+0x1f8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d009      	beq.n	8006d42 <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8006d2e:	e011      	b.n	8006d54 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8006d30:	4b47      	ldr	r3, [pc, #284]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d36:	4a46      	ldr	r2, [pc, #280]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006d38:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8006d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8006d40:	e008      	b.n	8006d54 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8006d42:	4b43      	ldr	r3, [pc, #268]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d48:	4a41      	ldr	r2, [pc, #260]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006d4a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006d4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8006d52:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01a      	beq.n	8006d90 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006d72:	2108      	movs	r1, #8
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff ff3d 	bl	8006bf4 <LPTIM_WaitForFlag>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d103      	bne.n	8006d88 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2203      	movs	r2, #3
 8006d84:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01a      	beq.n	8006dcc <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0201 	orr.w	r2, r2, #1
 8006da4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006dae:	2110      	movs	r1, #16
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff ff1f 	bl	8006bf4 <LPTIM_WaitForFlag>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d103      	bne.n	8006dc4 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2203      	movs	r2, #3
 8006dc0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2210      	movs	r2, #16
 8006dca:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e48 <LPTIM_Disable+0x1f4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <LPTIM_Disable+0x18a>
 8006dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e4c <LPTIM_Disable+0x1f8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00b      	beq.n	8006df4 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8006ddc:	e015      	b.n	8006e0a <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8006dde:	4b1c      	ldr	r3, [pc, #112]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006de8:	4919      	ldr	r1, [pc, #100]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8006df2:	e00a      	b.n	8006e0a <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8006df4:	4b16      	ldr	r3, [pc, #88]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dfe:	4914      	ldr	r1, [pc, #80]	@ (8006e50 <LPTIM_Disable+0x1fc>)
 8006e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8006e08:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e20:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6a3a      	ldr	r2, [r7, #32]
 8006e28:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	621a      	str	r2, [r3, #32]
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f383 8810 	msr	PRIMASK, r3
}
 8006e3c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006e3e:	bf00      	nop
 8006e40:	3730      	adds	r7, #48	@ 0x30
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40007c00 	.word	0x40007c00
 8006e4c:	40009400 	.word	0x40009400
 8006e50:	40021000 	.word	0x40021000

08006e54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006e58:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <HAL_PWREx_GetVoltageRange+0x18>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40007000 	.word	0x40007000

08006e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e7e:	d007      	beq.n	8006e90 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e86:	d003      	beq.n	8006e90 <HAL_PWREx_ControlVoltageScaling+0x20>
 8006e88:	21a7      	movs	r1, #167	@ 0xa7
 8006e8a:	4826      	ldr	r0, [pc, #152]	@ (8006f24 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006e8c:	f7fd fd2e 	bl	80048ec <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e96:	d130      	bne.n	8006efa <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e98:	4b23      	ldr	r3, [pc, #140]	@ (8006f28 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ea4:	d038      	beq.n	8006f18 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ea6:	4b20      	ldr	r3, [pc, #128]	@ (8006f28 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006eae:	4a1e      	ldr	r2, [pc, #120]	@ (8006f28 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006eb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006eb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f2c <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2232      	movs	r2, #50	@ 0x32
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f30 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	0c9b      	lsrs	r3, r3, #18
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ecc:	e002      	b.n	8006ed4 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ed4:	4b14      	ldr	r3, [pc, #80]	@ (8006f28 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee0:	d102      	bne.n	8006ee8 <HAL_PWREx_ControlVoltageScaling+0x78>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f2      	bne.n	8006ece <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f28 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef4:	d110      	bne.n	8006f18 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e00f      	b.n	8006f1a <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006efa:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f06:	d007      	beq.n	8006f18 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f08:	4b07      	ldr	r3, [pc, #28]	@ (8006f28 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f10:	4a05      	ldr	r2, [pc, #20]	@ (8006f28 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006f12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	0800f3fc 	.word	0x0800f3fc
 8006f28:	40007000 	.word	0x40007000
 8006f2c:	20000014 	.word	0x20000014
 8006f30:	431bde83 	.word	0x431bde83

08006f34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f000 bcef 	b.w	8007926 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <HAL_RCC_OscConfig+0x2e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b1f      	cmp	r3, #31
 8006f56:	d904      	bls.n	8006f62 <HAL_RCC_OscConfig+0x2e>
 8006f58:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8006f5c:	489a      	ldr	r0, [pc, #616]	@ (80071c8 <HAL_RCC_OscConfig+0x294>)
 8006f5e:	f7fd fcc5 	bl	80048ec <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f62:	4b9a      	ldr	r3, [pc, #616]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 030c 	and.w	r3, r3, #12
 8006f6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f6c:	4b97      	ldr	r3, [pc, #604]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 813d 	beq.w	80071fe <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <HAL_RCC_OscConfig+0x6a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d004      	beq.n	8006f9e <HAL_RCC_OscConfig+0x6a>
 8006f94:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8006f98:	488b      	ldr	r0, [pc, #556]	@ (80071c8 <HAL_RCC_OscConfig+0x294>)
 8006f9a:	f7fd fca7 	bl	80048ec <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	2bff      	cmp	r3, #255	@ 0xff
 8006fa4:	d904      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x7c>
 8006fa6:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8006faa:	4887      	ldr	r0, [pc, #540]	@ (80071c8 <HAL_RCC_OscConfig+0x294>)
 8006fac:	f7fd fc9e 	bl	80048ec <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d030      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d02c      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d028      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	2b30      	cmp	r3, #48	@ 0x30
 8006fce:	d024      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	2b40      	cmp	r3, #64	@ 0x40
 8006fd6:	d020      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	2b50      	cmp	r3, #80	@ 0x50
 8006fde:	d01c      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	2b60      	cmp	r3, #96	@ 0x60
 8006fe6:	d018      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	2b70      	cmp	r3, #112	@ 0x70
 8006fee:	d014      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	2b80      	cmp	r3, #128	@ 0x80
 8006ff6:	d010      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	2b90      	cmp	r3, #144	@ 0x90
 8006ffe:	d00c      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	2ba0      	cmp	r3, #160	@ 0xa0
 8007006:	d008      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	2bb0      	cmp	r3, #176	@ 0xb0
 800700e:	d004      	beq.n	800701a <HAL_RCC_OscConfig+0xe6>
 8007010:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8007014:	486c      	ldr	r0, [pc, #432]	@ (80071c8 <HAL_RCC_OscConfig+0x294>)
 8007016:	f7fd fc69 	bl	80048ec <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <HAL_RCC_OscConfig+0xfc>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b0c      	cmp	r3, #12
 8007024:	f040 808e 	bne.w	8007144 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2b01      	cmp	r3, #1
 800702c:	f040 808a 	bne.w	8007144 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007030:	4b66      	ldr	r3, [pc, #408]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <HAL_RCC_OscConfig+0x116>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	f000 bc6e 	b.w	8007926 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	4b5f      	ldr	r3, [pc, #380]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <HAL_RCC_OscConfig+0x130>
 800705a:	4b5c      	ldr	r3, [pc, #368]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007062:	e005      	b.n	8007070 <HAL_RCC_OscConfig+0x13c>
 8007064:	4b59      	ldr	r3, [pc, #356]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800706a:	091b      	lsrs	r3, r3, #4
 800706c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007070:	4293      	cmp	r3, r2
 8007072:	d224      	bcs.n	80070be <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fec1 	bl	8007e00 <RCC_SetFlashLatencyFromMSIRange>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f000 bc4e 	b.w	8007926 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800708a:	4b50      	ldr	r3, [pc, #320]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a4f      	ldr	r2, [pc, #316]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007090:	f043 0308 	orr.w	r3, r3, #8
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	4b4d      	ldr	r3, [pc, #308]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	494a      	ldr	r1, [pc, #296]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070a8:	4b48      	ldr	r3, [pc, #288]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	4945      	ldr	r1, [pc, #276]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	604b      	str	r3, [r1, #4]
 80070bc:	e026      	b.n	800710c <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070be:	4b43      	ldr	r3, [pc, #268]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a42      	ldr	r2, [pc, #264]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070c4:	f043 0308 	orr.w	r3, r3, #8
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4b40      	ldr	r3, [pc, #256]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	493d      	ldr	r1, [pc, #244]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070dc:	4b3b      	ldr	r3, [pc, #236]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	021b      	lsls	r3, r3, #8
 80070ea:	4938      	ldr	r1, [pc, #224]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fe80 	bl	8007e00 <RCC_SetFlashLatencyFromMSIRange>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f000 bc0d 	b.w	8007926 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800710c:	f000 fdb4 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 8007110:	4602      	mov	r2, r0
 8007112:	4b2e      	ldr	r3, [pc, #184]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	091b      	lsrs	r3, r3, #4
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	492c      	ldr	r1, [pc, #176]	@ (80071d0 <HAL_RCC_OscConfig+0x29c>)
 800711e:	5ccb      	ldrb	r3, [r1, r3]
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	4a2a      	ldr	r2, [pc, #168]	@ (80071d4 <HAL_RCC_OscConfig+0x2a0>)
 800712a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800712c:	4b2a      	ldr	r3, [pc, #168]	@ (80071d8 <HAL_RCC_OscConfig+0x2a4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe f9b5 	bl	80054a0 <HAL_InitTick>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d05d      	beq.n	80071fc <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	e3f0      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d032      	beq.n	80071b2 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800714c:	4b1f      	ldr	r3, [pc, #124]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1e      	ldr	r2, [pc, #120]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007152:	f043 0301 	orr.w	r3, r3, #1
 8007156:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007158:	f7fe f9f2 	bl	8005540 <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007160:	f7fe f9ee 	bl	8005540 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e3d9      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007172:	4b16      	ldr	r3, [pc, #88]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0f0      	beq.n	8007160 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800717e:	4b13      	ldr	r3, [pc, #76]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a12      	ldr	r2, [pc, #72]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007184:	f043 0308 	orr.w	r3, r3, #8
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	4b10      	ldr	r3, [pc, #64]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	490d      	ldr	r1, [pc, #52]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 8007198:	4313      	orrs	r3, r2
 800719a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800719c:	4b0b      	ldr	r3, [pc, #44]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	4908      	ldr	r1, [pc, #32]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	604b      	str	r3, [r1, #4]
 80071b0:	e025      	b.n	80071fe <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80071b2:	4b06      	ldr	r3, [pc, #24]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a05      	ldr	r2, [pc, #20]	@ (80071cc <HAL_RCC_OscConfig+0x298>)
 80071b8:	f023 0301 	bic.w	r3, r3, #1
 80071bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80071be:	f7fe f9bf 	bl	8005540 <HAL_GetTick>
 80071c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80071c4:	e013      	b.n	80071ee <HAL_RCC_OscConfig+0x2ba>
 80071c6:	bf00      	nop
 80071c8:	0800f438 	.word	0x0800f438
 80071cc:	40021000 	.word	0x40021000
 80071d0:	0800f608 	.word	0x0800f608
 80071d4:	20000014 	.word	0x20000014
 80071d8:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071dc:	f7fe f9b0 	bl	8005540 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e39b      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80071ee:	4b97      	ldr	r3, [pc, #604]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1f0      	bne.n	80071dc <HAL_RCC_OscConfig+0x2a8>
 80071fa:	e000      	b.n	80071fe <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d07e      	beq.n	8007308 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00e      	beq.n	8007230 <HAL_RCC_OscConfig+0x2fc>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800721a:	d009      	beq.n	8007230 <HAL_RCC_OscConfig+0x2fc>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007224:	d004      	beq.n	8007230 <HAL_RCC_OscConfig+0x2fc>
 8007226:	f240 2119 	movw	r1, #537	@ 0x219
 800722a:	4889      	ldr	r0, [pc, #548]	@ (8007450 <HAL_RCC_OscConfig+0x51c>)
 800722c:	f7fd fb5e 	bl	80048ec <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	2b08      	cmp	r3, #8
 8007234:	d005      	beq.n	8007242 <HAL_RCC_OscConfig+0x30e>
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	2b0c      	cmp	r3, #12
 800723a:	d10e      	bne.n	800725a <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b03      	cmp	r3, #3
 8007240:	d10b      	bne.n	800725a <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007242:	4b82      	ldr	r3, [pc, #520]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d05b      	beq.n	8007306 <HAL_RCC_OscConfig+0x3d2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d157      	bne.n	8007306 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e365      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007262:	d106      	bne.n	8007272 <HAL_RCC_OscConfig+0x33e>
 8007264:	4b79      	ldr	r3, [pc, #484]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a78      	ldr	r2, [pc, #480]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800726a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	e01d      	b.n	80072ae <HAL_RCC_OscConfig+0x37a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800727a:	d10c      	bne.n	8007296 <HAL_RCC_OscConfig+0x362>
 800727c:	4b73      	ldr	r3, [pc, #460]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a72      	ldr	r2, [pc, #456]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 8007282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	4b70      	ldr	r3, [pc, #448]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a6f      	ldr	r2, [pc, #444]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800728e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	e00b      	b.n	80072ae <HAL_RCC_OscConfig+0x37a>
 8007296:	4b6d      	ldr	r3, [pc, #436]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a6c      	ldr	r2, [pc, #432]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800729c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	4b6a      	ldr	r3, [pc, #424]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a69      	ldr	r2, [pc, #420]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80072a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d013      	beq.n	80072de <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b6:	f7fe f943 	bl	8005540 <HAL_GetTick>
 80072ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072be:	f7fe f93f 	bl	8005540 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b64      	cmp	r3, #100	@ 0x64
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e32a      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072d0:	4b5e      	ldr	r3, [pc, #376]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0f0      	beq.n	80072be <HAL_RCC_OscConfig+0x38a>
 80072dc:	e014      	b.n	8007308 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072de:	f7fe f92f 	bl	8005540 <HAL_GetTick>
 80072e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072e6:	f7fe f92b 	bl	8005540 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b64      	cmp	r3, #100	@ 0x64
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e316      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072f8:	4b54      	ldr	r3, [pc, #336]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1f0      	bne.n	80072e6 <HAL_RCC_OscConfig+0x3b2>
 8007304:	e000      	b.n	8007308 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007306:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d077      	beq.n	8007404 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d009      	beq.n	8007330 <HAL_RCC_OscConfig+0x3fc>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007324:	d004      	beq.n	8007330 <HAL_RCC_OscConfig+0x3fc>
 8007326:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 800732a:	4849      	ldr	r0, [pc, #292]	@ (8007450 <HAL_RCC_OscConfig+0x51c>)
 800732c:	f7fd fade 	bl	80048ec <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b1f      	cmp	r3, #31
 8007336:	d904      	bls.n	8007342 <HAL_RCC_OscConfig+0x40e>
 8007338:	f240 214d 	movw	r1, #589	@ 0x24d
 800733c:	4844      	ldr	r0, [pc, #272]	@ (8007450 <HAL_RCC_OscConfig+0x51c>)
 800733e:	f7fd fad5 	bl	80048ec <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d005      	beq.n	8007354 <HAL_RCC_OscConfig+0x420>
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2b0c      	cmp	r3, #12
 800734c:	d119      	bne.n	8007382 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b02      	cmp	r3, #2
 8007352:	d116      	bne.n	8007382 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007354:	4b3d      	ldr	r3, [pc, #244]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_RCC_OscConfig+0x438>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e2dc      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800736c:	4b37      	ldr	r3, [pc, #220]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	061b      	lsls	r3, r3, #24
 800737a:	4934      	ldr	r1, [pc, #208]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800737c:	4313      	orrs	r3, r2
 800737e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007380:	e040      	b.n	8007404 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d023      	beq.n	80073d2 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800738a:	4b30      	ldr	r3, [pc, #192]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a2f      	ldr	r2, [pc, #188]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 8007390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007396:	f7fe f8d3 	bl	8005540 <HAL_GetTick>
 800739a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800739c:	e008      	b.n	80073b0 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800739e:	f7fe f8cf 	bl	8005540 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e2ba      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073b0:	4b26      	ldr	r3, [pc, #152]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0f0      	beq.n	800739e <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073bc:	4b23      	ldr	r3, [pc, #140]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	061b      	lsls	r3, r3, #24
 80073ca:	4920      	ldr	r1, [pc, #128]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	604b      	str	r3, [r1, #4]
 80073d0:	e018      	b.n	8007404 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073d2:	4b1e      	ldr	r3, [pc, #120]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1d      	ldr	r2, [pc, #116]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80073d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073de:	f7fe f8af 	bl	8005540 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073e4:	e008      	b.n	80073f8 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073e6:	f7fe f8ab 	bl	8005540 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e296      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073f8:	4b14      	ldr	r3, [pc, #80]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f0      	bne.n	80073e6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0308 	and.w	r3, r3, #8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d04e      	beq.n	80074ae <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_RCC_OscConfig+0x4f6>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d004      	beq.n	800742a <HAL_RCC_OscConfig+0x4f6>
 8007420:	f240 218d 	movw	r1, #653	@ 0x28d
 8007424:	480a      	ldr	r0, [pc, #40]	@ (8007450 <HAL_RCC_OscConfig+0x51c>)
 8007426:	f7fd fa61 	bl	80048ec <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d021      	beq.n	8007476 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007432:	4b06      	ldr	r3, [pc, #24]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 8007434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007438:	4a04      	ldr	r2, [pc, #16]	@ (800744c <HAL_RCC_OscConfig+0x518>)
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007442:	f7fe f87d 	bl	8005540 <HAL_GetTick>
 8007446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007448:	e00d      	b.n	8007466 <HAL_RCC_OscConfig+0x532>
 800744a:	bf00      	nop
 800744c:	40021000 	.word	0x40021000
 8007450:	0800f438 	.word	0x0800f438
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007454:	f7fe f874 	bl	8005540 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e25f      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007466:	4b66      	ldr	r3, [pc, #408]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 8007468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0ef      	beq.n	8007454 <HAL_RCC_OscConfig+0x520>
 8007474:	e01b      	b.n	80074ae <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007476:	4b62      	ldr	r3, [pc, #392]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 8007478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800747c:	4a60      	ldr	r2, [pc, #384]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007486:	f7fe f85b 	bl	8005540 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800748e:	f7fe f857 	bl	8005540 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e242      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074a0:	4b57      	ldr	r3, [pc, #348]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 80074a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1ef      	bne.n	800748e <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 80b8 	beq.w	800762c <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074bc:	2300      	movs	r3, #0
 80074be:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00c      	beq.n	80074e2 <HAL_RCC_OscConfig+0x5ae>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d008      	beq.n	80074e2 <HAL_RCC_OscConfig+0x5ae>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b05      	cmp	r3, #5
 80074d6:	d004      	beq.n	80074e2 <HAL_RCC_OscConfig+0x5ae>
 80074d8:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80074dc:	4849      	ldr	r0, [pc, #292]	@ (8007604 <HAL_RCC_OscConfig+0x6d0>)
 80074de:	f7fd fa05 	bl	80048ec <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80074e2:	4b47      	ldr	r3, [pc, #284]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 80074e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10d      	bne.n	800750a <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ee:	4b44      	ldr	r3, [pc, #272]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 80074f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f2:	4a43      	ldr	r2, [pc, #268]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 80074f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80074fa:	4b41      	ldr	r3, [pc, #260]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 80074fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007502:	60bb      	str	r3, [r7, #8]
 8007504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007506:	2301      	movs	r3, #1
 8007508:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800750a:	4b3f      	ldr	r3, [pc, #252]	@ (8007608 <HAL_RCC_OscConfig+0x6d4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007512:	2b00      	cmp	r3, #0
 8007514:	d118      	bne.n	8007548 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007516:	4b3c      	ldr	r3, [pc, #240]	@ (8007608 <HAL_RCC_OscConfig+0x6d4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a3b      	ldr	r2, [pc, #236]	@ (8007608 <HAL_RCC_OscConfig+0x6d4>)
 800751c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007522:	f7fe f80d 	bl	8005540 <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007528:	e008      	b.n	800753c <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800752a:	f7fe f809 	bl	8005540 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e1f4      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800753c:	4b32      	ldr	r3, [pc, #200]	@ (8007608 <HAL_RCC_OscConfig+0x6d4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d108      	bne.n	8007562 <HAL_RCC_OscConfig+0x62e>
 8007550:	4b2b      	ldr	r3, [pc, #172]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 8007552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007556:	4a2a      	ldr	r2, [pc, #168]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 8007558:	f043 0301 	orr.w	r3, r3, #1
 800755c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007560:	e024      	b.n	80075ac <HAL_RCC_OscConfig+0x678>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b05      	cmp	r3, #5
 8007568:	d110      	bne.n	800758c <HAL_RCC_OscConfig+0x658>
 800756a:	4b25      	ldr	r3, [pc, #148]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 800756c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007570:	4a23      	ldr	r2, [pc, #140]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 8007572:	f043 0304 	orr.w	r3, r3, #4
 8007576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800757a:	4b21      	ldr	r3, [pc, #132]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 800757c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007580:	4a1f      	ldr	r2, [pc, #124]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800758a:	e00f      	b.n	80075ac <HAL_RCC_OscConfig+0x678>
 800758c:	4b1c      	ldr	r3, [pc, #112]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007592:	4a1b      	ldr	r2, [pc, #108]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 8007594:	f023 0301 	bic.w	r3, r3, #1
 8007598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800759c:	4b18      	ldr	r3, [pc, #96]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a2:	4a17      	ldr	r2, [pc, #92]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 80075a4:	f023 0304 	bic.w	r3, r3, #4
 80075a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d016      	beq.n	80075e2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b4:	f7fd ffc4 	bl	8005540 <HAL_GetTick>
 80075b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ba:	e00a      	b.n	80075d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075bc:	f7fd ffc0 	bl	8005540 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e1a9      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <HAL_RCC_OscConfig+0x6cc>)
 80075d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0ed      	beq.n	80075bc <HAL_RCC_OscConfig+0x688>
 80075e0:	e01b      	b.n	800761a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e2:	f7fd ffad 	bl	8005540 <HAL_GetTick>
 80075e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075e8:	e010      	b.n	800760c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ea:	f7fd ffa9 	bl	8005540 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d907      	bls.n	800760c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e192      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
 8007600:	40021000 	.word	0x40021000
 8007604:	0800f438 	.word	0x0800f438
 8007608:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800760c:	4b98      	ldr	r3, [pc, #608]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e7      	bne.n	80075ea <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800761a:	7ffb      	ldrb	r3, [r7, #31]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d105      	bne.n	800762c <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007620:	4b93      	ldr	r3, [pc, #588]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 8007622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007624:	4a92      	ldr	r2, [pc, #584]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 8007626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800762a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00c      	beq.n	800764e <HAL_RCC_OscConfig+0x71a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007638:	2b01      	cmp	r3, #1
 800763a:	d008      	beq.n	800764e <HAL_RCC_OscConfig+0x71a>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	2b02      	cmp	r3, #2
 8007642:	d004      	beq.n	800764e <HAL_RCC_OscConfig+0x71a>
 8007644:	f240 316e 	movw	r1, #878	@ 0x36e
 8007648:	488a      	ldr	r0, [pc, #552]	@ (8007874 <HAL_RCC_OscConfig+0x940>)
 800764a:	f7fd f94f 	bl	80048ec <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8166 	beq.w	8007924 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765c:	2b02      	cmp	r3, #2
 800765e:	f040 813c 	bne.w	80078da <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d010      	beq.n	800768c <HAL_RCC_OscConfig+0x758>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d00c      	beq.n	800768c <HAL_RCC_OscConfig+0x758>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007676:	2b02      	cmp	r3, #2
 8007678:	d008      	beq.n	800768c <HAL_RCC_OscConfig+0x758>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	2b03      	cmp	r3, #3
 8007680:	d004      	beq.n	800768c <HAL_RCC_OscConfig+0x758>
 8007682:	f240 3176 	movw	r1, #886	@ 0x376
 8007686:	487b      	ldr	r0, [pc, #492]	@ (8007874 <HAL_RCC_OscConfig+0x940>)
 8007688:	f7fd f930 	bl	80048ec <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <HAL_RCC_OscConfig+0x768>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007698:	2b08      	cmp	r3, #8
 800769a:	d904      	bls.n	80076a6 <HAL_RCC_OscConfig+0x772>
 800769c:	f240 3177 	movw	r1, #887	@ 0x377
 80076a0:	4874      	ldr	r0, [pc, #464]	@ (8007874 <HAL_RCC_OscConfig+0x940>)
 80076a2:	f7fd f923 	bl	80048ec <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076aa:	2b07      	cmp	r3, #7
 80076ac:	d903      	bls.n	80076b6 <HAL_RCC_OscConfig+0x782>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b2:	2b56      	cmp	r3, #86	@ 0x56
 80076b4:	d904      	bls.n	80076c0 <HAL_RCC_OscConfig+0x78c>
 80076b6:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80076ba:	486e      	ldr	r0, [pc, #440]	@ (8007874 <HAL_RCC_OscConfig+0x940>)
 80076bc:	f7fd f916 	bl	80048ec <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	2b07      	cmp	r3, #7
 80076c6:	d008      	beq.n	80076da <HAL_RCC_OscConfig+0x7a6>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076cc:	2b11      	cmp	r3, #17
 80076ce:	d004      	beq.n	80076da <HAL_RCC_OscConfig+0x7a6>
 80076d0:	f240 317a 	movw	r1, #890	@ 0x37a
 80076d4:	4867      	ldr	r0, [pc, #412]	@ (8007874 <HAL_RCC_OscConfig+0x940>)
 80076d6:	f7fd f909 	bl	80048ec <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d010      	beq.n	8007704 <HAL_RCC_OscConfig+0x7d0>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d00c      	beq.n	8007704 <HAL_RCC_OscConfig+0x7d0>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ee:	2b06      	cmp	r3, #6
 80076f0:	d008      	beq.n	8007704 <HAL_RCC_OscConfig+0x7d0>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d004      	beq.n	8007704 <HAL_RCC_OscConfig+0x7d0>
 80076fa:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 80076fe:	485d      	ldr	r0, [pc, #372]	@ (8007874 <HAL_RCC_OscConfig+0x940>)
 8007700:	f7fd f8f4 	bl	80048ec <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007708:	2b02      	cmp	r3, #2
 800770a:	d010      	beq.n	800772e <HAL_RCC_OscConfig+0x7fa>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007710:	2b04      	cmp	r3, #4
 8007712:	d00c      	beq.n	800772e <HAL_RCC_OscConfig+0x7fa>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007718:	2b06      	cmp	r3, #6
 800771a:	d008      	beq.n	800772e <HAL_RCC_OscConfig+0x7fa>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007720:	2b08      	cmp	r3, #8
 8007722:	d004      	beq.n	800772e <HAL_RCC_OscConfig+0x7fa>
 8007724:	f240 317d 	movw	r1, #893	@ 0x37d
 8007728:	4852      	ldr	r0, [pc, #328]	@ (8007874 <HAL_RCC_OscConfig+0x940>)
 800772a:	f7fd f8df 	bl	80048ec <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800772e:	4b50      	ldr	r3, [pc, #320]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f003 0203 	and.w	r2, r3, #3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	429a      	cmp	r2, r3
 8007740:	d130      	bne.n	80077a4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774c:	3b01      	subs	r3, #1
 800774e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007750:	429a      	cmp	r2, r3
 8007752:	d127      	bne.n	80077a4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800775e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007760:	429a      	cmp	r2, r3
 8007762:	d11f      	bne.n	80077a4 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800776e:	2a07      	cmp	r2, #7
 8007770:	bf14      	ite	ne
 8007772:	2201      	movne	r2, #1
 8007774:	2200      	moveq	r2, #0
 8007776:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007778:	4293      	cmp	r3, r2
 800777a:	d113      	bne.n	80077a4 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	3b01      	subs	r3, #1
 800778a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800778c:	429a      	cmp	r2, r3
 800778e:	d109      	bne.n	80077a4 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	3b01      	subs	r3, #1
 800779e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d074      	beq.n	800788e <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b0c      	cmp	r3, #12
 80077a8:	d06f      	beq.n	800788a <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80077aa:	4b31      	ldr	r3, [pc, #196]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d105      	bne.n	80077c2 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80077b6:	4b2e      	ldr	r3, [pc, #184]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e0af      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80077c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a29      	ldr	r2, [pc, #164]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 80077cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80077d2:	f7fd feb5 	bl	8005540 <HAL_GetTick>
 80077d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077d8:	e008      	b.n	80077ec <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077da:	f7fd feb1 	bl	8005540 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e09c      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077ec:	4b20      	ldr	r3, [pc, #128]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f0      	bne.n	80077da <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007878 <HAL_RCC_OscConfig+0x944>)
 80077fe:	4013      	ands	r3, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007808:	3a01      	subs	r2, #1
 800780a:	0112      	lsls	r2, r2, #4
 800780c:	4311      	orrs	r1, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007812:	0212      	lsls	r2, r2, #8
 8007814:	4311      	orrs	r1, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800781a:	0852      	lsrs	r2, r2, #1
 800781c:	3a01      	subs	r2, #1
 800781e:	0552      	lsls	r2, r2, #21
 8007820:	4311      	orrs	r1, r2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007826:	0852      	lsrs	r2, r2, #1
 8007828:	3a01      	subs	r2, #1
 800782a:	0652      	lsls	r2, r2, #25
 800782c:	4311      	orrs	r1, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007832:	0912      	lsrs	r2, r2, #4
 8007834:	0452      	lsls	r2, r2, #17
 8007836:	430a      	orrs	r2, r1
 8007838:	490d      	ldr	r1, [pc, #52]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 800783a:	4313      	orrs	r3, r2
 800783c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800783e:	4b0c      	ldr	r3, [pc, #48]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a0b      	ldr	r2, [pc, #44]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 8007844:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007848:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800784a:	4b09      	ldr	r3, [pc, #36]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	4a08      	ldr	r2, [pc, #32]	@ (8007870 <HAL_RCC_OscConfig+0x93c>)
 8007850:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007854:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007856:	f7fd fe73 	bl	8005540 <HAL_GetTick>
 800785a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800785c:	e00e      	b.n	800787c <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800785e:	f7fd fe6f 	bl	8005540 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d907      	bls.n	800787c <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e05a      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
 8007870:	40021000 	.word	0x40021000
 8007874:	0800f438 	.word	0x0800f438
 8007878:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800787c:	4b2c      	ldr	r3, [pc, #176]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0ea      	beq.n	800785e <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007888:	e04c      	b.n	8007924 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e04b      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800788e:	4b28      	ldr	r3, [pc, #160]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d144      	bne.n	8007924 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800789a:	4b25      	ldr	r3, [pc, #148]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a24      	ldr	r2, [pc, #144]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 80078a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078a4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078a6:	4b22      	ldr	r3, [pc, #136]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	4a21      	ldr	r2, [pc, #132]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 80078ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078b0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80078b2:	f7fd fe45 	bl	8005540 <HAL_GetTick>
 80078b6:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078b8:	e008      	b.n	80078cc <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078ba:	f7fd fe41 	bl	8005540 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e02c      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078cc:	4b18      	ldr	r3, [pc, #96]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0f0      	beq.n	80078ba <HAL_RCC_OscConfig+0x986>
 80078d8:	e024      	b.n	8007924 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b0c      	cmp	r3, #12
 80078de:	d01f      	beq.n	8007920 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e0:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a12      	ldr	r2, [pc, #72]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 80078e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ec:	f7fd fe28 	bl	8005540 <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f4:	f7fd fe24 	bl	8005540 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e00f      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007906:	4b0a      	ldr	r3, [pc, #40]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1f0      	bne.n	80078f4 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007912:	4b07      	ldr	r3, [pc, #28]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	4906      	ldr	r1, [pc, #24]	@ (8007930 <HAL_RCC_OscConfig+0x9fc>)
 8007918:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <HAL_RCC_OscConfig+0xa00>)
 800791a:	4013      	ands	r3, r2
 800791c:	60cb      	str	r3, [r1, #12]
 800791e:	e001      	b.n	8007924 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e000      	b.n	8007926 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3720      	adds	r7, #32
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	40021000 	.word	0x40021000
 8007934:	feeefffc 	.word	0xfeeefffc

08007938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e186      	b.n	8007c5a <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_RCC_ClockConfig+0x24>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b0f      	cmp	r3, #15
 800795a:	d904      	bls.n	8007966 <HAL_RCC_ClockConfig+0x2e>
 800795c:	f240 4159 	movw	r1, #1113	@ 0x459
 8007960:	4882      	ldr	r0, [pc, #520]	@ (8007b6c <HAL_RCC_ClockConfig+0x234>)
 8007962:	f7fc ffc3 	bl	80048ec <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d010      	beq.n	800798e <HAL_RCC_ClockConfig+0x56>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d00d      	beq.n	800798e <HAL_RCC_ClockConfig+0x56>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d00a      	beq.n	800798e <HAL_RCC_ClockConfig+0x56>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b03      	cmp	r3, #3
 800797c:	d007      	beq.n	800798e <HAL_RCC_ClockConfig+0x56>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b04      	cmp	r3, #4
 8007982:	d004      	beq.n	800798e <HAL_RCC_ClockConfig+0x56>
 8007984:	f240 415a 	movw	r1, #1114	@ 0x45a
 8007988:	4878      	ldr	r0, [pc, #480]	@ (8007b6c <HAL_RCC_ClockConfig+0x234>)
 800798a:	f7fc ffaf 	bl	80048ec <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800798e:	4b78      	ldr	r3, [pc, #480]	@ (8007b70 <HAL_RCC_ClockConfig+0x238>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d910      	bls.n	80079be <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799c:	4b74      	ldr	r3, [pc, #464]	@ (8007b70 <HAL_RCC_ClockConfig+0x238>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f023 0207 	bic.w	r2, r3, #7
 80079a4:	4972      	ldr	r1, [pc, #456]	@ (8007b70 <HAL_RCC_ClockConfig+0x238>)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ac:	4b70      	ldr	r3, [pc, #448]	@ (8007b70 <HAL_RCC_ClockConfig+0x238>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0307 	and.w	r3, r3, #7
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d001      	beq.n	80079be <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e14d      	b.n	8007c5a <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d039      	beq.n	8007a3e <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d024      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b80      	cmp	r3, #128	@ 0x80
 80079d8:	d020      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	2b90      	cmp	r3, #144	@ 0x90
 80079e0:	d01c      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80079e8:	d018      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2bb0      	cmp	r3, #176	@ 0xb0
 80079f0:	d014      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079f8:	d010      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2bd0      	cmp	r3, #208	@ 0xd0
 8007a00:	d00c      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	2be0      	cmp	r3, #224	@ 0xe0
 8007a08:	d008      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8007a10:	d004      	beq.n	8007a1c <HAL_RCC_ClockConfig+0xe4>
 8007a12:	f240 4172 	movw	r1, #1138	@ 0x472
 8007a16:	4855      	ldr	r0, [pc, #340]	@ (8007b6c <HAL_RCC_ClockConfig+0x234>)
 8007a18:	f7fc ff68 	bl	80048ec <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	4b54      	ldr	r3, [pc, #336]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d908      	bls.n	8007a3e <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a2c:	4b51      	ldr	r3, [pc, #324]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	494e      	ldr	r1, [pc, #312]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d061      	beq.n	8007b0e <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d010      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x13c>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d00c      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x13c>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d008      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x13c>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d004      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x13c>
 8007a6a:	f240 417d 	movw	r1, #1149	@ 0x47d
 8007a6e:	483f      	ldr	r0, [pc, #252]	@ (8007b6c <HAL_RCC_ClockConfig+0x234>)
 8007a70:	f7fc ff3c 	bl	80048ec <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d107      	bne.n	8007a8c <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d121      	bne.n	8007acc <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0e6      	b.n	8007c5a <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d107      	bne.n	8007aa4 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a94:	4b37      	ldr	r3, [pc, #220]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d115      	bne.n	8007acc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0da      	b.n	8007c5a <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d107      	bne.n	8007abc <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007aac:	4b31      	ldr	r3, [pc, #196]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d109      	bne.n	8007acc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0ce      	b.n	8007c5a <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007abc:	4b2d      	ldr	r3, [pc, #180]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e0c6      	b.n	8007c5a <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007acc:	4b29      	ldr	r3, [pc, #164]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f023 0203 	bic.w	r2, r3, #3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4926      	ldr	r1, [pc, #152]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ade:	f7fd fd2f 	bl	8005540 <HAL_GetTick>
 8007ae2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ae4:	e00a      	b.n	8007afc <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ae6:	f7fd fd2b 	bl	8005540 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e0ae      	b.n	8007c5a <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007afc:	4b1d      	ldr	r3, [pc, #116]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 020c 	and.w	r2, r3, #12
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d1eb      	bne.n	8007ae6 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d010      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	4b15      	ldr	r3, [pc, #84]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d208      	bcs.n	8007b3c <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b2a:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	490f      	ldr	r1, [pc, #60]	@ (8007b74 <HAL_RCC_ClockConfig+0x23c>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b70 <HAL_RCC_ClockConfig+0x238>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d216      	bcs.n	8007b78 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b4a:	4b09      	ldr	r3, [pc, #36]	@ (8007b70 <HAL_RCC_ClockConfig+0x238>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f023 0207 	bic.w	r2, r3, #7
 8007b52:	4907      	ldr	r1, [pc, #28]	@ (8007b70 <HAL_RCC_ClockConfig+0x238>)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b5a:	4b05      	ldr	r3, [pc, #20]	@ (8007b70 <HAL_RCC_ClockConfig+0x238>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d007      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e076      	b.n	8007c5a <HAL_RCC_ClockConfig+0x322>
 8007b6c:	0800f438 	.word	0x0800f438
 8007b70:	40022000 	.word	0x40022000
 8007b74:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d025      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d018      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x286>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b94:	d013      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x286>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007b9e:	d00e      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x286>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007ba8:	d009      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x286>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007bb2:	d004      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x286>
 8007bb4:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8007bb8:	482a      	ldr	r0, [pc, #168]	@ (8007c64 <HAL_RCC_ClockConfig+0x32c>)
 8007bba:	f7fc fe97 	bl	80048ec <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8007c68 <HAL_RCC_ClockConfig+0x330>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	4927      	ldr	r1, [pc, #156]	@ (8007c68 <HAL_RCC_ClockConfig+0x330>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d026      	beq.n	8007c2a <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d018      	beq.n	8007c16 <HAL_RCC_ClockConfig+0x2de>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bec:	d013      	beq.n	8007c16 <HAL_RCC_ClockConfig+0x2de>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007bf6:	d00e      	beq.n	8007c16 <HAL_RCC_ClockConfig+0x2de>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c00:	d009      	beq.n	8007c16 <HAL_RCC_ClockConfig+0x2de>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c0a:	d004      	beq.n	8007c16 <HAL_RCC_ClockConfig+0x2de>
 8007c0c:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8007c10:	4814      	ldr	r0, [pc, #80]	@ (8007c64 <HAL_RCC_ClockConfig+0x32c>)
 8007c12:	f7fc fe6b 	bl	80048ec <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c16:	4b14      	ldr	r3, [pc, #80]	@ (8007c68 <HAL_RCC_ClockConfig+0x330>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4910      	ldr	r1, [pc, #64]	@ (8007c68 <HAL_RCC_ClockConfig+0x330>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c2a:	f000 f825 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	4b0d      	ldr	r3, [pc, #52]	@ (8007c68 <HAL_RCC_ClockConfig+0x330>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	091b      	lsrs	r3, r3, #4
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	490c      	ldr	r1, [pc, #48]	@ (8007c6c <HAL_RCC_ClockConfig+0x334>)
 8007c3c:	5ccb      	ldrb	r3, [r1, r3]
 8007c3e:	f003 031f 	and.w	r3, r3, #31
 8007c42:	fa22 f303 	lsr.w	r3, r2, r3
 8007c46:	4a0a      	ldr	r2, [pc, #40]	@ (8007c70 <HAL_RCC_ClockConfig+0x338>)
 8007c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c74 <HAL_RCC_ClockConfig+0x33c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fd fc26 	bl	80054a0 <HAL_InitTick>
 8007c54:	4603      	mov	r3, r0
 8007c56:	72fb      	strb	r3, [r7, #11]

  return status;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	0800f438 	.word	0x0800f438
 8007c68:	40021000 	.word	0x40021000
 8007c6c:	0800f608 	.word	0x0800f608
 8007c70:	20000014 	.word	0x20000014
 8007c74:	20000018 	.word	0x20000018

08007c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b089      	sub	sp, #36	@ 0x24
 8007c7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c86:	4b3e      	ldr	r3, [pc, #248]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 030c 	and.w	r3, r3, #12
 8007c8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c90:	4b3b      	ldr	r3, [pc, #236]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <HAL_RCC_GetSysClockFreq+0x34>
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2b0c      	cmp	r3, #12
 8007ca4:	d121      	bne.n	8007cea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d11e      	bne.n	8007cea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007cac:	4b34      	ldr	r3, [pc, #208]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d107      	bne.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007cb8:	4b31      	ldr	r3, [pc, #196]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	f003 030f 	and.w	r3, r3, #15
 8007cc4:	61fb      	str	r3, [r7, #28]
 8007cc6:	e005      	b.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	091b      	lsrs	r3, r3, #4
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8007d84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10d      	bne.n	8007d00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ce8:	e00a      	b.n	8007d00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d102      	bne.n	8007cf6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007cf0:	4b25      	ldr	r3, [pc, #148]	@ (8007d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	e004      	b.n	8007d00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d101      	bne.n	8007d00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007cfc:	4b23      	ldr	r3, [pc, #140]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8007cfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2b0c      	cmp	r3, #12
 8007d04:	d134      	bne.n	8007d70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d06:	4b1e      	ldr	r3, [pc, #120]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d003      	beq.n	8007d1e <HAL_RCC_GetSysClockFreq+0xa6>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d003      	beq.n	8007d24 <HAL_RCC_GetSysClockFreq+0xac>
 8007d1c:	e005      	b.n	8007d2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d88 <HAL_RCC_GetSysClockFreq+0x110>)
 8007d20:	617b      	str	r3, [r7, #20]
      break;
 8007d22:	e005      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007d24:	4b19      	ldr	r3, [pc, #100]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x114>)
 8007d26:	617b      	str	r3, [r7, #20]
      break;
 8007d28:	e002      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	617b      	str	r3, [r7, #20]
      break;
 8007d2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d30:	4b13      	ldr	r3, [pc, #76]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	091b      	lsrs	r3, r3, #4
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d3e:	4b10      	ldr	r3, [pc, #64]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	fb03 f202 	mul.w	r2, r3, r2
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d56:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	0e5b      	lsrs	r3, r3, #25
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	3301      	adds	r3, #1
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007d70:	69bb      	ldr	r3, [r7, #24]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3724      	adds	r7, #36	@ 0x24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40021000 	.word	0x40021000
 8007d84:	0800f620 	.word	0x0800f620
 8007d88:	00f42400 	.word	0x00f42400
 8007d8c:	007a1200 	.word	0x007a1200

08007d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d94:	4b03      	ldr	r3, [pc, #12]	@ (8007da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20000014 	.word	0x20000014

08007da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007dac:	f7ff fff0 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b06      	ldr	r3, [pc, #24]	@ (8007dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0a1b      	lsrs	r3, r3, #8
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4904      	ldr	r1, [pc, #16]	@ (8007dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007dbe:	5ccb      	ldrb	r3, [r1, r3]
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	40021000 	.word	0x40021000
 8007dd0:	0800f618 	.word	0x0800f618

08007dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007dd8:	f7ff ffda 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	4b06      	ldr	r3, [pc, #24]	@ (8007df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	0adb      	lsrs	r3, r3, #11
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	4904      	ldr	r1, [pc, #16]	@ (8007dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007dea:	5ccb      	ldrb	r3, [r1, r3]
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	0800f618 	.word	0x0800f618

08007e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8007eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007e18:	f7ff f81c 	bl	8006e54 <HAL_PWREx_GetVoltageRange>
 8007e1c:	6178      	str	r0, [r7, #20]
 8007e1e:	e014      	b.n	8007e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e20:	4b25      	ldr	r3, [pc, #148]	@ (8007eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e24:	4a24      	ldr	r2, [pc, #144]	@ (8007eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e2c:	4b22      	ldr	r3, [pc, #136]	@ (8007eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e38:	f7ff f80c 	bl	8006e54 <HAL_PWREx_GetVoltageRange>
 8007e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e42:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e50:	d10b      	bne.n	8007e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b80      	cmp	r3, #128	@ 0x80
 8007e56:	d919      	bls.n	8007e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8007e5c:	d902      	bls.n	8007e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e5e:	2302      	movs	r3, #2
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	e013      	b.n	8007e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e64:	2301      	movs	r3, #1
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	e010      	b.n	8007e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b80      	cmp	r3, #128	@ 0x80
 8007e6e:	d902      	bls.n	8007e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007e70:	2303      	movs	r3, #3
 8007e72:	613b      	str	r3, [r7, #16]
 8007e74:	e00a      	b.n	8007e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b80      	cmp	r3, #128	@ 0x80
 8007e7a:	d102      	bne.n	8007e82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	e004      	b.n	8007e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b70      	cmp	r3, #112	@ 0x70
 8007e86:	d101      	bne.n	8007e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e88:	2301      	movs	r3, #1
 8007e8a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f023 0207 	bic.w	r2, r3, #7
 8007e94:	4909      	ldr	r1, [pc, #36]	@ (8007ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007e9c:	4b07      	ldr	r3, [pc, #28]	@ (8007ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d001      	beq.n	8007eae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	40022000 	.word	0x40022000

08007ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ec8:	2300      	movs	r3, #0
 8007eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ecc:	2300      	movs	r3, #0
 8007ece:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ee4:	d303      	bcc.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8007ee6:	21c9      	movs	r1, #201	@ 0xc9
 8007ee8:	4889      	ldr	r0, [pc, #548]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007eea:	f7fc fcff 	bl	80048ec <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d058      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d012      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f0a:	d00d      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f14:	d008      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f1a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f1e:	d003      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007f20:	21d1      	movs	r1, #209	@ 0xd1
 8007f22:	487b      	ldr	r0, [pc, #492]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007f24:	f7fc fce2 	bl	80048ec <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f30:	d02a      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8007f32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f36:	d824      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8007f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f3c:	d008      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f42:	d81e      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f4c:	d010      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8007f4e:	e018      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007f50:	4b70      	ldr	r3, [pc, #448]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4a6f      	ldr	r2, [pc, #444]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f5c:	e015      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3304      	adds	r3, #4
 8007f62:	2100      	movs	r1, #0
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fc69 	bl	800883c <RCCEx_PLLSAI1_Config>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f6e:	e00c      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3320      	adds	r3, #32
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fde0 	bl	8008b3c <RCCEx_PLLSAI2_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007f80:	e003      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	74fb      	strb	r3, [r7, #19]
      break;
 8007f86:	e000      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8007f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f8a:	7cfb      	ldrb	r3, [r7, #19]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10b      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f90:	4b60      	ldr	r3, [pc, #384]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f9e:	495d      	ldr	r1, [pc, #372]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007fa6:	e001      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	7cfb      	ldrb	r3, [r7, #19]
 8007faa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d059      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d013      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fc8:	d00e      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fd2:	d009      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007fdc:	d004      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007fde:	f240 110f 	movw	r1, #271	@ 0x10f
 8007fe2:	484b      	ldr	r0, [pc, #300]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007fe4:	f7fc fc82 	bl	80048ec <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ff0:	d02a      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8007ff2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ff6:	d824      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8007ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ffc:	d008      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8007ffe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008002:	d81e      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00a      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800800c:	d010      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800800e:	e018      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008010:	4b40      	ldr	r3, [pc, #256]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	4a3f      	ldr	r2, [pc, #252]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800801a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800801c:	e015      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3304      	adds	r3, #4
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fc09 	bl	800883c <RCCEx_PLLSAI1_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800802e:	e00c      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3320      	adds	r3, #32
 8008034:	2100      	movs	r1, #0
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fd80 	bl	8008b3c <RCCEx_PLLSAI2_Config>
 800803c:	4603      	mov	r3, r0
 800803e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008040:	e003      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	74fb      	strb	r3, [r7, #19]
      break;
 8008046:	e000      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8008048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800804a:	7cfb      	ldrb	r3, [r7, #19]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008050:	4b30      	ldr	r3, [pc, #192]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008056:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800805e:	492d      	ldr	r1, [pc, #180]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008066:	e001      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008068:	7cfb      	ldrb	r3, [r7, #19]
 800806a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 80c2 	beq.w	80081fe <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800807a:	2300      	movs	r3, #0
 800807c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008084:	2b00      	cmp	r3, #0
 8008086:	d016      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800808e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008092:	d010      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800809a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800809e:	d00a      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080aa:	d004      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80080ac:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80080b0:	4817      	ldr	r0, [pc, #92]	@ (8008110 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80080b2:	f7fc fc1b 	bl	80048ec <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080b6:	4b17      	ldr	r3, [pc, #92]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e000      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80080c6:	2300      	movs	r3, #0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00d      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080cc:	4b11      	ldr	r3, [pc, #68]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d0:	4a10      	ldr	r2, [pc, #64]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80080d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80080da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080e4:	2301      	movs	r3, #1
 80080e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008118 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080f4:	f7fd fa24 	bl	8005540 <HAL_GetTick>
 80080f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80080fa:	e00f      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fc:	f7fd fa20 	bl	8005540 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d908      	bls.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	74fb      	strb	r3, [r7, #19]
        break;
 800810e:	e00b      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8008110:	0800f470 	.word	0x0800f470
 8008114:	40021000 	.word	0x40021000
 8008118:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800811c:	4b30      	ldr	r3, [pc, #192]	@ (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0e9      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8008128:	7cfb      	ldrb	r3, [r7, #19]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d15c      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800812e:	4b2d      	ldr	r3, [pc, #180]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008138:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01f      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	429a      	cmp	r2, r3
 800814a:	d019      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800814c:	4b25      	ldr	r3, [pc, #148]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800814e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008156:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008158:	4b22      	ldr	r3, [pc, #136]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815e:	4a21      	ldr	r2, [pc, #132]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008168:	4b1e      	ldr	r3, [pc, #120]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816e:	4a1d      	ldr	r2, [pc, #116]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8008170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008178:	4a1a      	ldr	r2, [pc, #104]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d016      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818a:	f7fd f9d9 	bl	8005540 <HAL_GetTick>
 800818e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008190:	e00b      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008192:	f7fd f9d5 	bl	8005540 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d902      	bls.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	74fb      	strb	r3, [r7, #19]
            break;
 80081a8:	e006      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081aa:	4b0e      	ldr	r3, [pc, #56]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80081ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0ec      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 80081b8:	7cfb      	ldrb	r3, [r7, #19]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10c      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081be:	4b09      	ldr	r3, [pc, #36]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80081c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ce:	4905      	ldr	r1, [pc, #20]	@ (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80081d6:	e009      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081d8:	7cfb      	ldrb	r3, [r7, #19]
 80081da:	74bb      	strb	r3, [r7, #18]
 80081dc:	e006      	b.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80081de:	bf00      	nop
 80081e0:	40007000 	.word	0x40007000
 80081e4:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081e8:	7cfb      	ldrb	r3, [r7, #19]
 80081ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081ec:	7c7b      	ldrb	r3, [r7, #17]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d105      	bne.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081f2:	4b8d      	ldr	r3, [pc, #564]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80081f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f6:	4a8c      	ldr	r2, [pc, #560]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80081f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d01f      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820e:	2b00      	cmp	r3, #0
 8008210:	d010      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008216:	2b01      	cmp	r3, #1
 8008218:	d00c      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	2b03      	cmp	r3, #3
 8008220:	d008      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008226:	2b02      	cmp	r3, #2
 8008228:	d004      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800822a:	f240 1199 	movw	r1, #409	@ 0x199
 800822e:	487f      	ldr	r0, [pc, #508]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8008230:	f7fc fb5c 	bl	80048ec <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008234:	4b7c      	ldr	r3, [pc, #496]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823a:	f023 0203 	bic.w	r2, r3, #3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	4979      	ldr	r1, [pc, #484]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008244:	4313      	orrs	r3, r2
 8008246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d01f      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d010      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008262:	2b04      	cmp	r3, #4
 8008264:	d00c      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800826a:	2b0c      	cmp	r3, #12
 800826c:	d008      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008272:	2b08      	cmp	r3, #8
 8008274:	d004      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008276:	f240 11a3 	movw	r1, #419	@ 0x1a3
 800827a:	486c      	ldr	r0, [pc, #432]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800827c:	f7fc fb36 	bl	80048ec <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008280:	4b69      	ldr	r3, [pc, #420]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008286:	f023 020c 	bic.w	r2, r3, #12
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800828e:	4966      	ldr	r1, [pc, #408]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008290:	4313      	orrs	r3, r2
 8008292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01f      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d010      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ae:	2b10      	cmp	r3, #16
 80082b0:	d00c      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	2b30      	cmp	r3, #48	@ 0x30
 80082b8:	d008      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d004      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80082c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80082c6:	4859      	ldr	r0, [pc, #356]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80082c8:	f7fc fb10 	bl	80048ec <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082cc:	4b56      	ldr	r3, [pc, #344]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80082ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082da:	4953      	ldr	r1, [pc, #332]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d01f      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d010      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082fa:	2b40      	cmp	r3, #64	@ 0x40
 80082fc:	d00c      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008302:	2bc0      	cmp	r3, #192	@ 0xc0
 8008304:	d008      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830a:	2b80      	cmp	r3, #128	@ 0x80
 800830c:	d004      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800830e:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8008312:	4846      	ldr	r0, [pc, #280]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8008314:	f7fc faea 	bl	80048ec <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008318:	4b43      	ldr	r3, [pc, #268]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800831a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800831e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008326:	4940      	ldr	r1, [pc, #256]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008328:	4313      	orrs	r3, r2
 800832a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b00      	cmp	r3, #0
 8008338:	d022      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800833e:	2b00      	cmp	r3, #0
 8008340:	d013      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834a:	d00e      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008354:	d009      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800835a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800835e:	d004      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8008360:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8008364:	4831      	ldr	r0, [pc, #196]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8008366:	f7fc fac1 	bl	80048ec <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800836a:	4b2f      	ldr	r3, [pc, #188]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800836c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008378:	492b      	ldr	r1, [pc, #172]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800837a:	4313      	orrs	r3, r2
 800837c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0320 	and.w	r3, r3, #32
 8008388:	2b00      	cmp	r3, #0
 800838a:	d022      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d013      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800839c:	d00e      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083a6:	d009      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b0:	d004      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80083b2:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80083b6:	481d      	ldr	r0, [pc, #116]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80083b8:	f7fc fa98 	bl	80048ec <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80083be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ca:	4917      	ldr	r1, [pc, #92]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d028      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d013      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083ee:	d00e      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80083f8:	d009      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008402:	d004      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8008404:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8008408:	4808      	ldr	r0, [pc, #32]	@ (800842c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800840a:	f7fc fa6f 	bl	80048ec <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800840e:	4b06      	ldr	r3, [pc, #24]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8008410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008414:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800841c:	4902      	ldr	r1, [pc, #8]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008424:	e004      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008426:	bf00      	nop
 8008428:	40021000 	.word	0x40021000
 800842c:	0800f470 	.word	0x0800f470
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008438:	2b00      	cmp	r3, #0
 800843a:	d022      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008440:	2b00      	cmp	r3, #0
 8008442:	d013      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800844c:	d00e      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008456:	d009      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800845c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008460:	d004      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008462:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8008466:	489e      	ldr	r0, [pc, #632]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008468:	f7fc fa40 	bl	80048ec <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800846c:	4b9d      	ldr	r3, [pc, #628]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008472:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800847a:	499a      	ldr	r1, [pc, #616]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800847c:	4313      	orrs	r3, r2
 800847e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01d      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00e      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800849e:	d009      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084a8:	d004      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80084aa:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80084ae:	488c      	ldr	r0, [pc, #560]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80084b0:	f7fc fa1c 	bl	80048ec <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084b4:	4b8b      	ldr	r3, [pc, #556]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80084b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c2:	4988      	ldr	r1, [pc, #544]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01d      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00e      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084e6:	d009      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084f0:	d004      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80084f2:	f240 11fb 	movw	r1, #507	@ 0x1fb
 80084f6:	487a      	ldr	r0, [pc, #488]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80084f8:	f7fc f9f8 	bl	80048ec <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084fc:	4b79      	ldr	r3, [pc, #484]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008502:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850a:	4976      	ldr	r1, [pc, #472]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800850c:	4313      	orrs	r3, r2
 800850e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800851a:	2b00      	cmp	r3, #0
 800851c:	d01d      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00e      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800852a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800852e:	d009      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008538:	d004      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800853a:	f240 2107 	movw	r1, #519	@ 0x207
 800853e:	4868      	ldr	r0, [pc, #416]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008540:	f7fc f9d4 	bl	80048ec <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008544:	4b67      	ldr	r3, [pc, #412]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008552:	4964      	ldr	r1, [pc, #400]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008554:	4313      	orrs	r3, r2
 8008556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d040      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d013      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008572:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008576:	d00e      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800857c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008580:	d009      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008586:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800858a:	d004      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800858c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8008590:	4853      	ldr	r0, [pc, #332]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008592:	f7fc f9ab 	bl	80048ec <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008596:	4b53      	ldr	r3, [pc, #332]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800859c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a4:	494f      	ldr	r1, [pc, #316]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085b4:	d106      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085b6:	4b4b      	ldr	r3, [pc, #300]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	4a4a      	ldr	r2, [pc, #296]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80085bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085c0:	60d3      	str	r3, [r2, #12]
 80085c2:	e011      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085cc:	d10c      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3304      	adds	r3, #4
 80085d2:	2101      	movs	r1, #1
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 f931 	bl	800883c <RCCEx_PLLSAI1_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80085de:	7cfb      	ldrb	r3, [r7, #19]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 80085e4:	7cfb      	ldrb	r3, [r7, #19]
 80085e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d040      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d013      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008600:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008604:	d00e      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800860e:	d009      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008614:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008618:	d004      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x764>
 800861a:	f240 2141 	movw	r1, #577	@ 0x241
 800861e:	4830      	ldr	r0, [pc, #192]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8008620:	f7fc f964 	bl	80048ec <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008624:	4b2f      	ldr	r3, [pc, #188]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800862a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008632:	492c      	ldr	r1, [pc, #176]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800863e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008642:	d106      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008644:	4b27      	ldr	r3, [pc, #156]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	4a26      	ldr	r2, [pc, #152]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800864a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800864e:	60d3      	str	r3, [r2, #12]
 8008650:	e011      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008656:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800865a:	d10c      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3304      	adds	r3, #4
 8008660:	2101      	movs	r1, #1
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f8ea 	bl	800883c <RCCEx_PLLSAI1_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800866c:	7cfb      	ldrb	r3, [r7, #19]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8008672:	7cfb      	ldrb	r3, [r7, #19]
 8008674:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d044      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008686:	2b00      	cmp	r3, #0
 8008688:	d013      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800868e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008692:	d00e      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800869c:	d009      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086a2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80086a6:	d004      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80086a8:	f240 2166 	movw	r1, #614	@ 0x266
 80086ac:	480c      	ldr	r0, [pc, #48]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80086ae:	f7fc f91d 	bl	80048ec <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086b2:	4b0c      	ldr	r3, [pc, #48]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80086b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086c0:	4908      	ldr	r1, [pc, #32]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086d0:	d10a      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086d2:	4b04      	ldr	r3, [pc, #16]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	4a03      	ldr	r2, [pc, #12]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80086d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086dc:	60d3      	str	r3, [r2, #12]
 80086de:	e015      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80086e0:	0800f470 	.word	0x0800f470
 80086e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086f0:	d10c      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3304      	adds	r3, #4
 80086f6:	2101      	movs	r1, #1
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 f89f 	bl	800883c <RCCEx_PLLSAI1_Config>
 80086fe:	4603      	mov	r3, r0
 8008700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008702:	7cfb      	ldrb	r3, [r7, #19]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8008708:	7cfb      	ldrb	r3, [r7, #19]
 800870a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d047      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800871c:	2b00      	cmp	r3, #0
 800871e:	d013      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008728:	d00e      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800872e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008732:	d009      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008738:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800873c:	d004      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800873e:	f240 2186 	movw	r1, #646	@ 0x286
 8008742:	483c      	ldr	r0, [pc, #240]	@ (8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8008744:	f7fc f8d2 	bl	80048ec <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008748:	4b3b      	ldr	r3, [pc, #236]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800874a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800874e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008756:	4938      	ldr	r1, [pc, #224]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8008758:	4313      	orrs	r3, r2
 800875a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008766:	d10d      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3304      	adds	r3, #4
 800876c:	2102      	movs	r1, #2
 800876e:	4618      	mov	r0, r3
 8008770:	f000 f864 	bl	800883c <RCCEx_PLLSAI1_Config>
 8008774:	4603      	mov	r3, r0
 8008776:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008778:	7cfb      	ldrb	r3, [r7, #19]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d014      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 800877e:	7cfb      	ldrb	r3, [r7, #19]
 8008780:	74bb      	strb	r3, [r7, #18]
 8008782:	e011      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800878c:	d10c      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3320      	adds	r3, #32
 8008792:	2102      	movs	r1, #2
 8008794:	4618      	mov	r0, r3
 8008796:	f000 f9d1 	bl	8008b3c <RCCEx_PLLSAI2_Config>
 800879a:	4603      	mov	r3, r0
 800879c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800879e:	7cfb      	ldrb	r3, [r7, #19]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80087a4:	7cfb      	ldrb	r3, [r7, #19]
 80087a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d018      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d009      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c4:	d004      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80087c6:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80087ca:	481a      	ldr	r0, [pc, #104]	@ (8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80087cc:	f7fc f88e 	bl	80048ec <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087d0:	4b19      	ldr	r3, [pc, #100]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80087d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087de:	4916      	ldr	r1, [pc, #88]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01b      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008806:	d004      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008808:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 800880c:	4809      	ldr	r0, [pc, #36]	@ (8008834 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800880e:	f7fc f86d 	bl	80048ec <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008812:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8008814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008818:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008822:	4905      	ldr	r1, [pc, #20]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8008824:	4313      	orrs	r3, r2
 8008826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800882a:	7cbb      	ldrb	r3, [r7, #18]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	0800f470 	.word	0x0800f470
 8008838:	40021000 	.word	0x40021000

0800883c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d010      	beq.n	8008874 <RCCEx_PLLSAI1_Config+0x38>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d00c      	beq.n	8008874 <RCCEx_PLLSAI1_Config+0x38>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d008      	beq.n	8008874 <RCCEx_PLLSAI1_Config+0x38>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b03      	cmp	r3, #3
 8008868:	d004      	beq.n	8008874 <RCCEx_PLLSAI1_Config+0x38>
 800886a:	f640 3162 	movw	r1, #2914	@ 0xb62
 800886e:	4887      	ldr	r0, [pc, #540]	@ (8008a8c <RCCEx_PLLSAI1_Config+0x250>)
 8008870:	f7fc f83c 	bl	80048ec <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <RCCEx_PLLSAI1_Config+0x48>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b08      	cmp	r3, #8
 8008882:	d904      	bls.n	800888e <RCCEx_PLLSAI1_Config+0x52>
 8008884:	f640 3163 	movw	r1, #2915	@ 0xb63
 8008888:	4880      	ldr	r0, [pc, #512]	@ (8008a8c <RCCEx_PLLSAI1_Config+0x250>)
 800888a:	f7fc f82f 	bl	80048ec <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b07      	cmp	r3, #7
 8008894:	d903      	bls.n	800889e <RCCEx_PLLSAI1_Config+0x62>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b56      	cmp	r3, #86	@ 0x56
 800889c:	d904      	bls.n	80088a8 <RCCEx_PLLSAI1_Config+0x6c>
 800889e:	f640 3164 	movw	r1, #2916	@ 0xb64
 80088a2:	487a      	ldr	r0, [pc, #488]	@ (8008a8c <RCCEx_PLLSAI1_Config+0x250>)
 80088a4:	f7fc f822 	bl	80048ec <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10b      	bne.n	80088cc <RCCEx_PLLSAI1_Config+0x90>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d105      	bne.n	80088cc <RCCEx_PLLSAI1_Config+0x90>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d007      	beq.n	80088dc <RCCEx_PLLSAI1_Config+0xa0>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80088d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <RCCEx_PLLSAI1_Config+0xaa>
 80088dc:	f640 3165 	movw	r1, #2917	@ 0xb65
 80088e0:	486a      	ldr	r0, [pc, #424]	@ (8008a8c <RCCEx_PLLSAI1_Config+0x250>)
 80088e2:	f7fc f803 	bl	80048ec <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d018      	beq.n	8008924 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80088f2:	4b67      	ldr	r3, [pc, #412]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f003 0203 	and.w	r2, r3, #3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d10d      	bne.n	800891e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
       ||
 8008906:	2b00      	cmp	r3, #0
 8008908:	d009      	beq.n	800891e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800890a:	4b61      	ldr	r3, [pc, #388]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	091b      	lsrs	r3, r3, #4
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
       ||
 800891a:	429a      	cmp	r2, r3
 800891c:	d047      	beq.n	80089ae <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
 8008922:	e044      	b.n	80089ae <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b03      	cmp	r3, #3
 800892a:	d018      	beq.n	800895e <RCCEx_PLLSAI1_Config+0x122>
 800892c:	2b03      	cmp	r3, #3
 800892e:	d825      	bhi.n	800897c <RCCEx_PLLSAI1_Config+0x140>
 8008930:	2b01      	cmp	r3, #1
 8008932:	d002      	beq.n	800893a <RCCEx_PLLSAI1_Config+0xfe>
 8008934:	2b02      	cmp	r3, #2
 8008936:	d009      	beq.n	800894c <RCCEx_PLLSAI1_Config+0x110>
 8008938:	e020      	b.n	800897c <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800893a:	4b55      	ldr	r3, [pc, #340]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d11d      	bne.n	8008982 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800894a:	e01a      	b.n	8008982 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800894c:	4b50      	ldr	r3, [pc, #320]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008954:	2b00      	cmp	r3, #0
 8008956:	d116      	bne.n	8008986 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800895c:	e013      	b.n	8008986 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800895e:	4b4c      	ldr	r3, [pc, #304]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10f      	bne.n	800898a <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800896a:	4b49      	ldr	r3, [pc, #292]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800897a:	e006      	b.n	800898a <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	73fb      	strb	r3, [r7, #15]
      break;
 8008980:	e004      	b.n	800898c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008982:	bf00      	nop
 8008984:	e002      	b.n	800898c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8008986:	bf00      	nop
 8008988:	e000      	b.n	800898c <RCCEx_PLLSAI1_Config+0x150>
      break;
 800898a:	bf00      	nop
    }

    if(status == HAL_OK)
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10d      	bne.n	80089ae <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008992:	4b3f      	ldr	r3, [pc, #252]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6819      	ldr	r1, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	011b      	lsls	r3, r3, #4
 80089a6:	430b      	orrs	r3, r1
 80089a8:	4939      	ldr	r1, [pc, #228]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f040 80ba 	bne.w	8008b2a <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80089b6:	4b36      	ldr	r3, [pc, #216]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a35      	ldr	r2, [pc, #212]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 80089bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089c2:	f7fc fdbd 	bl	8005540 <HAL_GetTick>
 80089c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80089c8:	e009      	b.n	80089de <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089ca:	f7fc fdb9 	bl	8005540 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d902      	bls.n	80089de <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	73fb      	strb	r3, [r7, #15]
        break;
 80089dc:	e005      	b.n	80089ea <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80089de:	4b2c      	ldr	r3, [pc, #176]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1ef      	bne.n	80089ca <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 809c 	bne.w	8008b2a <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d11e      	bne.n	8008a36 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	2b07      	cmp	r3, #7
 80089fe:	d008      	beq.n	8008a12 <RCCEx_PLLSAI1_Config+0x1d6>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	2b11      	cmp	r3, #17
 8008a06:	d004      	beq.n	8008a12 <RCCEx_PLLSAI1_Config+0x1d6>
 8008a08:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8008a0c:	481f      	ldr	r0, [pc, #124]	@ (8008a8c <RCCEx_PLLSAI1_Config+0x250>)
 8008a0e:	f7fb ff6d 	bl	80048ec <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008a12:	4b1f      	ldr	r3, [pc, #124]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	6892      	ldr	r2, [r2, #8]
 8008a22:	0211      	lsls	r1, r2, #8
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	68d2      	ldr	r2, [r2, #12]
 8008a28:	0912      	lsrs	r2, r2, #4
 8008a2a:	0452      	lsls	r2, r2, #17
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	4918      	ldr	r1, [pc, #96]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	610b      	str	r3, [r1, #16]
 8008a34:	e055      	b.n	8008ae2 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d12b      	bne.n	8008a94 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d010      	beq.n	8008a66 <RCCEx_PLLSAI1_Config+0x22a>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b04      	cmp	r3, #4
 8008a4a:	d00c      	beq.n	8008a66 <RCCEx_PLLSAI1_Config+0x22a>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b06      	cmp	r3, #6
 8008a52:	d008      	beq.n	8008a66 <RCCEx_PLLSAI1_Config+0x22a>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d004      	beq.n	8008a66 <RCCEx_PLLSAI1_Config+0x22a>
 8008a5c:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8008a60:	480a      	ldr	r0, [pc, #40]	@ (8008a8c <RCCEx_PLLSAI1_Config+0x250>)
 8008a62:	f7fb ff43 	bl	80048ec <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008a66:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008a6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6892      	ldr	r2, [r2, #8]
 8008a76:	0211      	lsls	r1, r2, #8
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	6912      	ldr	r2, [r2, #16]
 8008a7c:	0852      	lsrs	r2, r2, #1
 8008a7e:	3a01      	subs	r2, #1
 8008a80:	0552      	lsls	r2, r2, #21
 8008a82:	430a      	orrs	r2, r1
 8008a84:	4902      	ldr	r1, [pc, #8]	@ (8008a90 <RCCEx_PLLSAI1_Config+0x254>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	610b      	str	r3, [r1, #16]
 8008a8a:	e02a      	b.n	8008ae2 <RCCEx_PLLSAI1_Config+0x2a6>
 8008a8c:	0800f470 	.word	0x0800f470
 8008a90:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d010      	beq.n	8008abe <RCCEx_PLLSAI1_Config+0x282>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d00c      	beq.n	8008abe <RCCEx_PLLSAI1_Config+0x282>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	2b06      	cmp	r3, #6
 8008aaa:	d008      	beq.n	8008abe <RCCEx_PLLSAI1_Config+0x282>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d004      	beq.n	8008abe <RCCEx_PLLSAI1_Config+0x282>
 8008ab4:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8008ab8:	481e      	ldr	r0, [pc, #120]	@ (8008b34 <RCCEx_PLLSAI1_Config+0x2f8>)
 8008aba:	f7fb ff17 	bl	80048ec <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008abe:	4b1e      	ldr	r3, [pc, #120]	@ (8008b38 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008ac6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	6892      	ldr	r2, [r2, #8]
 8008ace:	0211      	lsls	r1, r2, #8
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6952      	ldr	r2, [r2, #20]
 8008ad4:	0852      	lsrs	r2, r2, #1
 8008ad6:	3a01      	subs	r2, #1
 8008ad8:	0652      	lsls	r2, r2, #25
 8008ada:	430a      	orrs	r2, r1
 8008adc:	4916      	ldr	r1, [pc, #88]	@ (8008b38 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008ae2:	4b15      	ldr	r3, [pc, #84]	@ (8008b38 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a14      	ldr	r2, [pc, #80]	@ (8008b38 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008ae8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008aec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aee:	f7fc fd27 	bl	8005540 <HAL_GetTick>
 8008af2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008af4:	e009      	b.n	8008b0a <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008af6:	f7fc fd23 	bl	8005540 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d902      	bls.n	8008b0a <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	73fb      	strb	r3, [r7, #15]
          break;
 8008b08:	e005      	b.n	8008b16 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b38 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0ef      	beq.n	8008af6 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008b1c:	4b06      	ldr	r3, [pc, #24]	@ (8008b38 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008b1e:	691a      	ldr	r2, [r3, #16]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	4904      	ldr	r1, [pc, #16]	@ (8008b38 <RCCEx_PLLSAI1_Config+0x2fc>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	0800f470 	.word	0x0800f470
 8008b38:	40021000 	.word	0x40021000

08008b3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d010      	beq.n	8008b74 <RCCEx_PLLSAI2_Config+0x38>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d00c      	beq.n	8008b74 <RCCEx_PLLSAI2_Config+0x38>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d008      	beq.n	8008b74 <RCCEx_PLLSAI2_Config+0x38>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d004      	beq.n	8008b74 <RCCEx_PLLSAI2_Config+0x38>
 8008b6a:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8008b6e:	4896      	ldr	r0, [pc, #600]	@ (8008dc8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008b70:	f7fb febc 	bl	80048ec <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <RCCEx_PLLSAI2_Config+0x48>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d904      	bls.n	8008b8e <RCCEx_PLLSAI2_Config+0x52>
 8008b84:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8008b88:	488f      	ldr	r0, [pc, #572]	@ (8008dc8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008b8a:	f7fb feaf 	bl	80048ec <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	2b07      	cmp	r3, #7
 8008b94:	d903      	bls.n	8008b9e <RCCEx_PLLSAI2_Config+0x62>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	2b56      	cmp	r3, #86	@ 0x56
 8008b9c:	d904      	bls.n	8008ba8 <RCCEx_PLLSAI2_Config+0x6c>
 8008b9e:	f640 4131 	movw	r1, #3121	@ 0xc31
 8008ba2:	4889      	ldr	r0, [pc, #548]	@ (8008dc8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008ba4:	f7fb fea2 	bl	80048ec <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d105      	bne.n	8008bc0 <RCCEx_PLLSAI2_Config+0x84>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <RCCEx_PLLSAI2_Config+0x94>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <RCCEx_PLLSAI2_Config+0x9e>
 8008bd0:	f640 4132 	movw	r1, #3122	@ 0xc32
 8008bd4:	487c      	ldr	r0, [pc, #496]	@ (8008dc8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008bd6:	f7fb fe89 	bl	80048ec <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008bda:	4b7c      	ldr	r3, [pc, #496]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d018      	beq.n	8008c18 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008be6:	4b79      	ldr	r3, [pc, #484]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f003 0203 	and.w	r2, r3, #3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d10d      	bne.n	8008c12 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008bfe:	4b73      	ldr	r3, [pc, #460]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	091b      	lsrs	r3, r3, #4
 8008c04:	f003 0307 	and.w	r3, r3, #7
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d047      	beq.n	8008ca2 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	73fb      	strb	r3, [r7, #15]
 8008c16:	e044      	b.n	8008ca2 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d018      	beq.n	8008c52 <RCCEx_PLLSAI2_Config+0x116>
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d825      	bhi.n	8008c70 <RCCEx_PLLSAI2_Config+0x134>
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d002      	beq.n	8008c2e <RCCEx_PLLSAI2_Config+0xf2>
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d009      	beq.n	8008c40 <RCCEx_PLLSAI2_Config+0x104>
 8008c2c:	e020      	b.n	8008c70 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008c2e:	4b67      	ldr	r3, [pc, #412]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d11d      	bne.n	8008c76 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c3e:	e01a      	b.n	8008c76 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c40:	4b62      	ldr	r3, [pc, #392]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d116      	bne.n	8008c7a <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c50:	e013      	b.n	8008c7a <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008c52:	4b5e      	ldr	r3, [pc, #376]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10f      	bne.n	8008c7e <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d109      	bne.n	8008c7e <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c6e:	e006      	b.n	8008c7e <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
      break;
 8008c74:	e004      	b.n	8008c80 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8008c76:	bf00      	nop
 8008c78:	e002      	b.n	8008c80 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8008c7a:	bf00      	nop
 8008c7c:	e000      	b.n	8008c80 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8008c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10d      	bne.n	8008ca2 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c86:	4b51      	ldr	r3, [pc, #324]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6819      	ldr	r1, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	494b      	ldr	r1, [pc, #300]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f040 808a 	bne.w	8008dbe <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008caa:	4b48      	ldr	r3, [pc, #288]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a47      	ldr	r2, [pc, #284]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb6:	f7fc fc43 	bl	8005540 <HAL_GetTick>
 8008cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008cbc:	e009      	b.n	8008cd2 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008cbe:	f7fc fc3f 	bl	8005540 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d902      	bls.n	8008cd2 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	73fb      	strb	r3, [r7, #15]
        break;
 8008cd0:	e005      	b.n	8008cde <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1ef      	bne.n	8008cbe <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d16c      	bne.n	8008dbe <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d11e      	bne.n	8008d28 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	2b07      	cmp	r3, #7
 8008cf0:	d008      	beq.n	8008d04 <RCCEx_PLLSAI2_Config+0x1c8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	2b11      	cmp	r3, #17
 8008cf8:	d004      	beq.n	8008d04 <RCCEx_PLLSAI2_Config+0x1c8>
 8008cfa:	f640 4185 	movw	r1, #3205	@ 0xc85
 8008cfe:	4832      	ldr	r0, [pc, #200]	@ (8008dc8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008d00:	f7fb fdf4 	bl	80048ec <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008d04:	4b31      	ldr	r3, [pc, #196]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6892      	ldr	r2, [r2, #8]
 8008d14:	0211      	lsls	r1, r2, #8
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	68d2      	ldr	r2, [r2, #12]
 8008d1a:	0912      	lsrs	r2, r2, #4
 8008d1c:	0452      	lsls	r2, r2, #17
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	492a      	ldr	r1, [pc, #168]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	614b      	str	r3, [r1, #20]
 8008d26:	e026      	b.n	8008d76 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d010      	beq.n	8008d52 <RCCEx_PLLSAI2_Config+0x216>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d00c      	beq.n	8008d52 <RCCEx_PLLSAI2_Config+0x216>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	d008      	beq.n	8008d52 <RCCEx_PLLSAI2_Config+0x216>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d004      	beq.n	8008d52 <RCCEx_PLLSAI2_Config+0x216>
 8008d48:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8008d4c:	481e      	ldr	r0, [pc, #120]	@ (8008dc8 <RCCEx_PLLSAI2_Config+0x28c>)
 8008d4e:	f7fb fdcd 	bl	80048ec <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008d52:	4b1e      	ldr	r3, [pc, #120]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008d5a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6892      	ldr	r2, [r2, #8]
 8008d62:	0211      	lsls	r1, r2, #8
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	6912      	ldr	r2, [r2, #16]
 8008d68:	0852      	lsrs	r2, r2, #1
 8008d6a:	3a01      	subs	r2, #1
 8008d6c:	0652      	lsls	r2, r2, #25
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	4916      	ldr	r1, [pc, #88]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008d76:	4b15      	ldr	r3, [pc, #84]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a14      	ldr	r2, [pc, #80]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d82:	f7fc fbdd 	bl	8005540 <HAL_GetTick>
 8008d86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008d88:	e009      	b.n	8008d9e <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008d8a:	f7fc fbd9 	bl	8005540 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d902      	bls.n	8008d9e <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	73fb      	strb	r3, [r7, #15]
          break;
 8008d9c:	e005      	b.n	8008daa <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0ef      	beq.n	8008d8a <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d106      	bne.n	8008dbe <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008db0:	4b06      	ldr	r3, [pc, #24]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	4904      	ldr	r1, [pc, #16]	@ (8008dcc <RCCEx_PLLSAI2_Config+0x290>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	0800f470 	.word	0x0800f470
 8008dcc:	40021000 	.word	0x40021000

08008dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e1dd      	b.n	800919e <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a7b      	ldr	r2, [pc, #492]	@ (8008fd4 <HAL_SPI_Init+0x204>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00e      	beq.n	8008e0a <HAL_SPI_Init+0x3a>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a79      	ldr	r2, [pc, #484]	@ (8008fd8 <HAL_SPI_Init+0x208>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d009      	beq.n	8008e0a <HAL_SPI_Init+0x3a>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a78      	ldr	r2, [pc, #480]	@ (8008fdc <HAL_SPI_Init+0x20c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d004      	beq.n	8008e0a <HAL_SPI_Init+0x3a>
 8008e00:	f240 1147 	movw	r1, #327	@ 0x147
 8008e04:	4876      	ldr	r0, [pc, #472]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008e06:	f7fb fd71 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d009      	beq.n	8008e26 <HAL_SPI_Init+0x56>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e1a:	d004      	beq.n	8008e26 <HAL_SPI_Init+0x56>
 8008e1c:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8008e20:	486f      	ldr	r0, [pc, #444]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008e22:	f7fb fd63 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00e      	beq.n	8008e4c <HAL_SPI_Init+0x7c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e36:	d009      	beq.n	8008e4c <HAL_SPI_Init+0x7c>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e40:	d004      	beq.n	8008e4c <HAL_SPI_Init+0x7c>
 8008e42:	f240 1149 	movw	r1, #329	@ 0x149
 8008e46:	4866      	ldr	r0, [pc, #408]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008e48:	f7fb fd50 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008e54:	d040      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8008e5e:	d03b      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8008e68:	d036      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e72:	d031      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8008e7c:	d02c      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008e86:	d027      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8008e90:	d022      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e9a:	d01d      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ea4:	d018      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008eae:	d013      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008eb8:	d00e      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ec2:	d009      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ecc:	d004      	beq.n	8008ed8 <HAL_SPI_Init+0x108>
 8008ece:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8008ed2:	4843      	ldr	r0, [pc, #268]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008ed4:	f7fb fd0a 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ee0:	d00d      	beq.n	8008efe <HAL_SPI_Init+0x12e>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d009      	beq.n	8008efe <HAL_SPI_Init+0x12e>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ef2:	d004      	beq.n	8008efe <HAL_SPI_Init+0x12e>
 8008ef4:	f240 114b 	movw	r1, #331	@ 0x14b
 8008ef8:	4839      	ldr	r0, [pc, #228]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008efa:	f7fb fcf7 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f02:	2b08      	cmp	r3, #8
 8008f04:	d008      	beq.n	8008f18 <HAL_SPI_Init+0x148>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d004      	beq.n	8008f18 <HAL_SPI_Init+0x148>
 8008f0e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8008f12:	4833      	ldr	r0, [pc, #204]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008f14:	f7fb fcea 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d020      	beq.n	8008f62 <HAL_SPI_Init+0x192>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d01c      	beq.n	8008f62 <HAL_SPI_Init+0x192>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	2b10      	cmp	r3, #16
 8008f2e:	d018      	beq.n	8008f62 <HAL_SPI_Init+0x192>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	2b18      	cmp	r3, #24
 8008f36:	d014      	beq.n	8008f62 <HAL_SPI_Init+0x192>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	2b20      	cmp	r3, #32
 8008f3e:	d010      	beq.n	8008f62 <HAL_SPI_Init+0x192>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	2b28      	cmp	r3, #40	@ 0x28
 8008f46:	d00c      	beq.n	8008f62 <HAL_SPI_Init+0x192>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	2b30      	cmp	r3, #48	@ 0x30
 8008f4e:	d008      	beq.n	8008f62 <HAL_SPI_Init+0x192>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	2b38      	cmp	r3, #56	@ 0x38
 8008f56:	d004      	beq.n	8008f62 <HAL_SPI_Init+0x192>
 8008f58:	f240 114d 	movw	r1, #333	@ 0x14d
 8008f5c:	4820      	ldr	r0, [pc, #128]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008f5e:	f7fb fcc5 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <HAL_SPI_Init+0x1ac>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	2b80      	cmp	r3, #128	@ 0x80
 8008f70:	d004      	beq.n	8008f7c <HAL_SPI_Init+0x1ac>
 8008f72:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8008f76:	481a      	ldr	r0, [pc, #104]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008f78:	f7fb fcb8 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d008      	beq.n	8008f96 <HAL_SPI_Init+0x1c6>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f88:	2b10      	cmp	r3, #16
 8008f8a:	d004      	beq.n	8008f96 <HAL_SPI_Init+0x1c6>
 8008f8c:	f240 114f 	movw	r1, #335	@ 0x14f
 8008f90:	4813      	ldr	r0, [pc, #76]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008f92:	f7fb fcab 	bl	80048ec <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d151      	bne.n	8009042 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d008      	beq.n	8008fb8 <HAL_SPI_Init+0x1e8>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d004      	beq.n	8008fb8 <HAL_SPI_Init+0x1e8>
 8008fae:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8008fb2:	480b      	ldr	r0, [pc, #44]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008fb4:	f7fb fc9a 	bl	80048ec <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d011      	beq.n	8008fe4 <HAL_SPI_Init+0x214>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d00d      	beq.n	8008fe4 <HAL_SPI_Init+0x214>
 8008fc8:	f240 1153 	movw	r1, #339	@ 0x153
 8008fcc:	4804      	ldr	r0, [pc, #16]	@ (8008fe0 <HAL_SPI_Init+0x210>)
 8008fce:	f7fb fc8d 	bl	80048ec <assert_failed>
 8008fd2:	e007      	b.n	8008fe4 <HAL_SPI_Init+0x214>
 8008fd4:	40013000 	.word	0x40013000
 8008fd8:	40003800 	.word	0x40003800
 8008fdc:	40003c00 	.word	0x40003c00
 8008fe0:	0800f4ac 	.word	0x0800f4ac

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fec:	d125      	bne.n	800903a <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d050      	beq.n	8009098 <HAL_SPI_Init+0x2c8>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d04c      	beq.n	8009098 <HAL_SPI_Init+0x2c8>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	2b10      	cmp	r3, #16
 8009004:	d048      	beq.n	8009098 <HAL_SPI_Init+0x2c8>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	2b18      	cmp	r3, #24
 800900c:	d044      	beq.n	8009098 <HAL_SPI_Init+0x2c8>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	2b20      	cmp	r3, #32
 8009014:	d040      	beq.n	8009098 <HAL_SPI_Init+0x2c8>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	2b28      	cmp	r3, #40	@ 0x28
 800901c:	d03c      	beq.n	8009098 <HAL_SPI_Init+0x2c8>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	2b30      	cmp	r3, #48	@ 0x30
 8009024:	d038      	beq.n	8009098 <HAL_SPI_Init+0x2c8>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	2b38      	cmp	r3, #56	@ 0x38
 800902c:	d034      	beq.n	8009098 <HAL_SPI_Init+0x2c8>
 800902e:	f240 1157 	movw	r1, #343	@ 0x157
 8009032:	485d      	ldr	r0, [pc, #372]	@ (80091a8 <HAL_SPI_Init+0x3d8>)
 8009034:	f7fb fc5a 	bl	80048ec <assert_failed>
 8009038:	e02e      	b.n	8009098 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	61da      	str	r2, [r3, #28]
 8009040:	e02a      	b.n	8009098 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d020      	beq.n	800908c <HAL_SPI_Init+0x2bc>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	2b08      	cmp	r3, #8
 8009050:	d01c      	beq.n	800908c <HAL_SPI_Init+0x2bc>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	2b10      	cmp	r3, #16
 8009058:	d018      	beq.n	800908c <HAL_SPI_Init+0x2bc>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	2b18      	cmp	r3, #24
 8009060:	d014      	beq.n	800908c <HAL_SPI_Init+0x2bc>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	2b20      	cmp	r3, #32
 8009068:	d010      	beq.n	800908c <HAL_SPI_Init+0x2bc>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	2b28      	cmp	r3, #40	@ 0x28
 8009070:	d00c      	beq.n	800908c <HAL_SPI_Init+0x2bc>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	2b30      	cmp	r3, #48	@ 0x30
 8009078:	d008      	beq.n	800908c <HAL_SPI_Init+0x2bc>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	2b38      	cmp	r3, #56	@ 0x38
 8009080:	d004      	beq.n	800908c <HAL_SPI_Init+0x2bc>
 8009082:	f240 1161 	movw	r1, #353	@ 0x161
 8009086:	4848      	ldr	r0, [pc, #288]	@ (80091a8 <HAL_SPI_Init+0x3d8>)
 8009088:	f7fb fc30 	bl	80048ec <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fb fc5e 	bl	8004974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090d8:	d902      	bls.n	80090e0 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	e002      	b.n	80090e6 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80090ee:	d007      	beq.n	8009100 <HAL_SPI_Init+0x330>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090f8:	d002      	beq.n	8009100 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009110:	431a      	orrs	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800912e:	431a      	orrs	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009138:	431a      	orrs	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009142:	ea42 0103 	orr.w	r1, r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	0c1b      	lsrs	r3, r3, #16
 800915c:	f003 0204 	and.w	r2, r3, #4
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800917c:	ea42 0103 	orr.w	r1, r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	0800f4ac 	.word	0x0800f4ac

080091ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <HAL_SPI_TransmitReceive_DMA+0x20>
 80091c2:	f640 0172 	movw	r1, #2162	@ 0x872
 80091c6:	487f      	ldr	r0, [pc, #508]	@ (80093c4 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80091c8:	f7fb fb90 	bl	80048ec <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <HAL_SPI_TransmitReceive_DMA+0x32>
 80091d4:	f640 0173 	movw	r1, #2163	@ 0x873
 80091d8:	487a      	ldr	r0, [pc, #488]	@ (80093c4 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80091da:	f7fb fb87 	bl	80048ec <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d004      	beq.n	80091f0 <HAL_SPI_TransmitReceive_DMA+0x44>
 80091e6:	f640 0176 	movw	r1, #2166	@ 0x876
 80091ea:	4876      	ldr	r0, [pc, #472]	@ (80093c4 <HAL_SPI_TransmitReceive_DMA+0x218>)
 80091ec:	f7fb fb7e 	bl	80048ec <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091f6:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d00c      	beq.n	800921e <HAL_SPI_TransmitReceive_DMA+0x72>
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800920a:	d106      	bne.n	800921a <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d102      	bne.n	800921a <HAL_SPI_TransmitReceive_DMA+0x6e>
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	2b04      	cmp	r3, #4
 8009218:	d001      	beq.n	800921e <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800921a:	2302      	movs	r3, #2
 800921c:	e15f      	b.n	80094de <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <HAL_SPI_TransmitReceive_DMA+0x84>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <HAL_SPI_TransmitReceive_DMA+0x84>
 800922a:	887b      	ldrh	r3, [r7, #2]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e154      	b.n	80094de <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_SPI_TransmitReceive_DMA+0x96>
 800923e:	2302      	movs	r3, #2
 8009240:	e14d      	b.n	80094de <HAL_SPI_TransmitReceive_DMA+0x332>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b04      	cmp	r3, #4
 8009254:	d003      	beq.n	800925e <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2205      	movs	r2, #5
 800925a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	887a      	ldrh	r2, [r7, #2]
 800926e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	887a      	ldrh	r2, [r7, #2]
 8009274:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	887a      	ldrh	r2, [r7, #2]
 8009280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	887a      	ldrh	r2, [r7, #2]
 8009288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80092a6:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80092b0:	d908      	bls.n	80092c4 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80092c0:	605a      	str	r2, [r3, #4]
 80092c2:	e06f      	b.n	80093a4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092d2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092de:	d126      	bne.n	800932e <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10f      	bne.n	800930c <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80092fa:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009300:	b29b      	uxth	r3, r3
 8009302:	085b      	lsrs	r3, r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800930a:	e010      	b.n	800932e <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800931a:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009320:	b29b      	uxth	r3, r3
 8009322:	085b      	lsrs	r3, r3, #1
 8009324:	b29b      	uxth	r3, r3
 8009326:	3301      	adds	r3, #1
 8009328:	b29a      	uxth	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009338:	d134      	bne.n	80093a4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009348:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009350:	b29b      	uxth	r3, r3
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	d111      	bne.n	800937e <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009368:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009370:	b29b      	uxth	r3, r3
 8009372:	085b      	lsrs	r3, r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800937c:	e012      	b.n	80093a4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800938c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009394:	b29b      	uxth	r3, r3
 8009396:	085b      	lsrs	r3, r3, #1
 8009398:	b29b      	uxth	r3, r3
 800939a:	3301      	adds	r3, #1
 800939c:	b29a      	uxth	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b04      	cmp	r3, #4
 80093ae:	d10f      	bne.n	80093d0 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b4:	4a04      	ldr	r2, [pc, #16]	@ (80093c8 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 80093b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093bc:	4a03      	ldr	r2, [pc, #12]	@ (80093cc <HAL_SPI_TransmitReceive_DMA+0x220>)
 80093be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093c0:	e00e      	b.n	80093e0 <HAL_SPI_TransmitReceive_DMA+0x234>
 80093c2:	bf00      	nop
 80093c4:	0800f4ac 	.word	0x0800f4ac
 80093c8:	08009885 	.word	0x08009885
 80093cc:	0800974d 	.word	0x0800974d
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d4:	4a44      	ldr	r2, [pc, #272]	@ (80094e8 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 80093d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093dc:	4a43      	ldr	r2, [pc, #268]	@ (80094ec <HAL_SPI_TransmitReceive_DMA+0x340>)
 80093de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e4:	4a42      	ldr	r2, [pc, #264]	@ (80094f0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80093e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ec:	2200      	movs	r2, #0
 80093ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	330c      	adds	r3, #12
 80093fa:	4619      	mov	r1, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009400:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009408:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800940a:	f7fc fb9d 	bl	8005b48 <HAL_DMA_Start_IT>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00b      	beq.n	800942c <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009418:	f043 0210 	orr.w	r2, r3, #16
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e058      	b.n	80094de <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0201 	orr.w	r2, r2, #1
 800943a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009440:	2200      	movs	r2, #0
 8009442:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009448:	2200      	movs	r2, #0
 800944a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009450:	2200      	movs	r2, #0
 8009452:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009458:	2200      	movs	r2, #0
 800945a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009464:	4619      	mov	r1, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	330c      	adds	r3, #12
 800946c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009472:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009474:	f7fc fb68 	bl	8005b48 <HAL_DMA_Start_IT>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009482:	f043 0210 	orr.w	r2, r3, #16
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e023      	b.n	80094de <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a0:	2b40      	cmp	r3, #64	@ 0x40
 80094a2:	d007      	beq.n	80094b4 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094b2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0220 	orr.w	r2, r2, #32
 80094ca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0202 	orr.w	r2, r2, #2
 80094da:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	080098a1 	.word	0x080098a1
 80094ec:	080097f5 	.word	0x080097f5
 80094f0:	080098bd 	.word	0x080098bd

080094f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	099b      	lsrs	r3, r3, #6
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10f      	bne.n	8009538 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	099b      	lsrs	r3, r3, #6
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
    return;
 8009536:	e0d7      	b.n	80096e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	085b      	lsrs	r3, r3, #1
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <HAL_SPI_IRQHandler+0x66>
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	09db      	lsrs	r3, r3, #7
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	d004      	beq.n	800955a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	4798      	blx	r3
    return;
 8009558:	e0c6      	b.n	80096e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	095b      	lsrs	r3, r3, #5
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10c      	bne.n	8009580 <HAL_SPI_IRQHandler+0x8c>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	099b      	lsrs	r3, r3, #6
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d106      	bne.n	8009580 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	0a1b      	lsrs	r3, r3, #8
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80b4 	beq.w	80096e8 <HAL_SPI_IRQHandler+0x1f4>
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	095b      	lsrs	r3, r3, #5
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 80ad 	beq.w	80096e8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	099b      	lsrs	r3, r3, #6
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d023      	beq.n	80095e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d011      	beq.n	80095ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095aa:	f043 0204 	orr.w	r2, r3, #4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095b2:	2300      	movs	r3, #0
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	617b      	str	r3, [r7, #20]
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	e00b      	b.n	80095e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095ca:	2300      	movs	r3, #0
 80095cc:	613b      	str	r3, [r7, #16]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	613b      	str	r3, [r7, #16]
 80095de:	693b      	ldr	r3, [r7, #16]
        return;
 80095e0:	e082      	b.n	80096e8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	095b      	lsrs	r3, r3, #5
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d014      	beq.n	8009618 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095f2:	f043 0201 	orr.w	r2, r3, #1
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00c      	beq.n	800963e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009628:	f043 0208 	orr.w	r2, r3, #8
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009630:	2300      	movs	r3, #0
 8009632:	60bb      	str	r3, [r7, #8]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	60bb      	str	r3, [r7, #8]
 800963c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009642:	2b00      	cmp	r3, #0
 8009644:	d04f      	beq.n	80096e6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009654:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	f003 0302 	and.w	r3, r3, #2
 8009664:	2b00      	cmp	r3, #0
 8009666:	d104      	bne.n	8009672 <HAL_SPI_IRQHandler+0x17e>
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d034      	beq.n	80096dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0203 	bic.w	r2, r2, #3
 8009680:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009686:	2b00      	cmp	r3, #0
 8009688:	d011      	beq.n	80096ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800968e:	4a18      	ldr	r2, [pc, #96]	@ (80096f0 <HAL_SPI_IRQHandler+0x1fc>)
 8009690:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009696:	4618      	mov	r0, r3
 8009698:	f7fc fac4 	bl	8005c24 <HAL_DMA_Abort_IT>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d016      	beq.n	80096e4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ba:	4a0d      	ldr	r2, [pc, #52]	@ (80096f0 <HAL_SPI_IRQHandler+0x1fc>)
 80096bc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fc faae 	bl	8005c24 <HAL_DMA_Abort_IT>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80096da:	e003      	b.n	80096e4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7fb f871 	bl	80047c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80096e2:	e000      	b.n	80096e6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80096e4:	bf00      	nop
    return;
 80096e6:	bf00      	nop
  }
}
 80096e8:	3720      	adds	r7, #32
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	080098fd 	.word	0x080098fd

080096f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800973e:	b2db      	uxtb	r3, r3
}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009758:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800975a:	f7fb fef1 	bl	8005540 <HAL_GetTick>
 800975e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b20      	cmp	r3, #32
 800976c:	d03c      	beq.n	80097e8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0220 	bic.w	r2, r2, #32
 800977c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10d      	bne.n	80097a2 <SPI_DMAReceiveCplt+0x56>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800978e:	d108      	bne.n	80097a2 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0203 	bic.w	r2, r2, #3
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	e007      	b.n	80097b2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0201 	bic.w	r2, r2, #1
 80097b0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	2164      	movs	r1, #100	@ 0x64
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 f9d4 	bl	8009b64 <SPI_EndRxTransaction>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2220      	movs	r2, #32
 80097c6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7fa ffef 	bl	80047c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80097e6:	e002      	b.n	80097ee <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f7ff ff83 	bl	80096f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009802:	f7fb fe9d 	bl	8005540 <HAL_GetTick>
 8009806:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b20      	cmp	r3, #32
 8009814:	d030      	beq.n	8009878 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0220 	bic.w	r2, r2, #32
 8009824:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	2164      	movs	r1, #100	@ 0x64
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f9f2 	bl	8009c14 <SPI_EndRxTxTransaction>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800983a:	f043 0220 	orr.w	r2, r3, #32
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0203 	bic.w	r2, r2, #3
 8009850:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7fa ffa7 	bl	80047c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009876:	e002      	b.n	800987e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f7fa ff98 	bl	80047ae <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009890:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff ff38 	bl	8009708 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff ff34 	bl	800971c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0203 	bic.w	r2, r2, #3
 80098d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098de:	f043 0210 	orr.w	r2, r3, #16
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7fa ff68 	bl	80047c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098f4:	bf00      	nop
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009908:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f7fa ff53 	bl	80047c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	4613      	mov	r3, r2
 8009936:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009938:	f7fb fe02 	bl	8005540 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	4413      	add	r3, r2
 8009946:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009948:	f7fb fdfa 	bl	8005540 <HAL_GetTick>
 800994c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800994e:	4b39      	ldr	r3, [pc, #228]	@ (8009a34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	015b      	lsls	r3, r3, #5
 8009954:	0d1b      	lsrs	r3, r3, #20
 8009956:	69fa      	ldr	r2, [r7, #28]
 8009958:	fb02 f303 	mul.w	r3, r2, r3
 800995c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800995e:	e054      	b.n	8009a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009966:	d050      	beq.n	8009a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009968:	f7fb fdea 	bl	8005540 <HAL_GetTick>
 800996c:	4602      	mov	r2, r0
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	69fa      	ldr	r2, [r7, #28]
 8009974:	429a      	cmp	r2, r3
 8009976:	d902      	bls.n	800997e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d13d      	bne.n	80099fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800998c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009996:	d111      	bne.n	80099bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099a0:	d004      	beq.n	80099ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099aa:	d107      	bne.n	80099bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099c4:	d10f      	bne.n	80099e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e017      	b.n	8009a2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4013      	ands	r3, r2
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	bf0c      	ite	eq
 8009a1a:	2301      	moveq	r3, #1
 8009a1c:	2300      	movne	r3, #0
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	461a      	mov	r2, r3
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d19b      	bne.n	8009960 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3720      	adds	r7, #32
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000014 	.word	0x20000014

08009a38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b08a      	sub	sp, #40	@ 0x28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a4a:	f7fb fd79 	bl	8005540 <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	4413      	add	r3, r2
 8009a58:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009a5a:	f7fb fd71 	bl	8005540 <HAL_GetTick>
 8009a5e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a68:	4b3d      	ldr	r3, [pc, #244]	@ (8009b60 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	00da      	lsls	r2, r3, #3
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	0d1b      	lsrs	r3, r3, #20
 8009a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
 8009a7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a80:	e060      	b.n	8009b44 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009a88:	d107      	bne.n	8009a9a <SPI_WaitFifoStateUntilTimeout+0x62>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d104      	bne.n	8009a9a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa0:	d050      	beq.n	8009b44 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009aa2:	f7fb fd4d 	bl	8005540 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d902      	bls.n	8009ab8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d13d      	bne.n	8009b34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ac6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ad0:	d111      	bne.n	8009af6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ada:	d004      	beq.n	8009ae6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae4:	d107      	bne.n	8009af6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009af4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009afe:	d10f      	bne.n	8009b20 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e010      	b.n	8009b56 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689a      	ldr	r2, [r3, #8]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d196      	bne.n	8009a82 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3728      	adds	r7, #40	@ 0x28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000014 	.word	0x20000014

08009b64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b78:	d111      	bne.n	8009b9e <SPI_EndRxTransaction+0x3a>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b82:	d004      	beq.n	8009b8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b8c:	d107      	bne.n	8009b9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b9c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2180      	movs	r1, #128	@ 0x80
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f7ff febd 	bl	8009928 <SPI_WaitFlagStateUntilTimeout>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d007      	beq.n	8009bc4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bb8:	f043 0220 	orr.w	r2, r3, #32
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e023      	b.n	8009c0c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bcc:	d11d      	bne.n	8009c0a <SPI_EndRxTransaction+0xa6>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bd6:	d004      	beq.n	8009be2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009be0:	d113      	bne.n	8009c0a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff ff22 	bl	8009a38 <SPI_WaitFifoStateUntilTimeout>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d007      	beq.n	8009c0a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bfe:	f043 0220 	orr.w	r2, r3, #32
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e000      	b.n	8009c0c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af02      	add	r7, sp, #8
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff ff03 	bl	8009a38 <SPI_WaitFifoStateUntilTimeout>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d007      	beq.n	8009c48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c3c:	f043 0220 	orr.w	r2, r3, #32
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e027      	b.n	8009c98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2180      	movs	r1, #128	@ 0x80
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f7ff fe68 	bl	8009928 <SPI_WaitFlagStateUntilTimeout>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d007      	beq.n	8009c6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c62:	f043 0220 	orr.w	r2, r3, #32
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e014      	b.n	8009c98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f7ff fedc 	bl	8009a38 <SPI_WaitFifoStateUntilTimeout>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d007      	beq.n	8009c96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c8a:	f043 0220 	orr.w	r2, r3, #32
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e000      	b.n	8009c98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e0e6      	b.n	8009e80 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a74      	ldr	r2, [pc, #464]	@ (8009e88 <HAL_TIM_Base_Init+0x1e8>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d036      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc4:	d031      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a70      	ldr	r2, [pc, #448]	@ (8009e8c <HAL_TIM_Base_Init+0x1ec>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d02c      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a6e      	ldr	r2, [pc, #440]	@ (8009e90 <HAL_TIM_Base_Init+0x1f0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d027      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a6d      	ldr	r2, [pc, #436]	@ (8009e94 <HAL_TIM_Base_Init+0x1f4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d022      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8009e98 <HAL_TIM_Base_Init+0x1f8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d01d      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a6a      	ldr	r2, [pc, #424]	@ (8009e9c <HAL_TIM_Base_Init+0x1fc>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d018      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a68      	ldr	r2, [pc, #416]	@ (8009ea0 <HAL_TIM_Base_Init+0x200>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d013      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a67      	ldr	r2, [pc, #412]	@ (8009ea4 <HAL_TIM_Base_Init+0x204>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d00e      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a65      	ldr	r2, [pc, #404]	@ (8009ea8 <HAL_TIM_Base_Init+0x208>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d009      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a64      	ldr	r2, [pc, #400]	@ (8009eac <HAL_TIM_Base_Init+0x20c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d004      	beq.n	8009d2a <HAL_TIM_Base_Init+0x8a>
 8009d20:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8009d24:	4862      	ldr	r0, [pc, #392]	@ (8009eb0 <HAL_TIM_Base_Init+0x210>)
 8009d26:	f7fa fde1 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d014      	beq.n	8009d5c <HAL_TIM_Base_Init+0xbc>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	2b10      	cmp	r3, #16
 8009d38:	d010      	beq.n	8009d5c <HAL_TIM_Base_Init+0xbc>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	d00c      	beq.n	8009d5c <HAL_TIM_Base_Init+0xbc>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	2b40      	cmp	r3, #64	@ 0x40
 8009d48:	d008      	beq.n	8009d5c <HAL_TIM_Base_Init+0xbc>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2b60      	cmp	r3, #96	@ 0x60
 8009d50:	d004      	beq.n	8009d5c <HAL_TIM_Base_Init+0xbc>
 8009d52:	f240 1117 	movw	r1, #279	@ 0x117
 8009d56:	4856      	ldr	r0, [pc, #344]	@ (8009eb0 <HAL_TIM_Base_Init+0x210>)
 8009d58:	f7fa fdc8 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00e      	beq.n	8009d82 <HAL_TIM_Base_Init+0xe2>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d6c:	d009      	beq.n	8009d82 <HAL_TIM_Base_Init+0xe2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d76:	d004      	beq.n	8009d82 <HAL_TIM_Base_Init+0xe2>
 8009d78:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8009d7c:	484c      	ldr	r0, [pc, #304]	@ (8009eb0 <HAL_TIM_Base_Init+0x210>)
 8009d7e:	f7fa fdb5 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d8a:	d004      	beq.n	8009d96 <HAL_TIM_Base_Init+0xf6>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a40      	ldr	r2, [pc, #256]	@ (8009e94 <HAL_TIM_Base_Init+0x1f4>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d107      	bne.n	8009da6 <HAL_TIM_Base_Init+0x106>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bf14      	ite	ne
 8009d9e:	2301      	movne	r3, #1
 8009da0:	2300      	moveq	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	e00e      	b.n	8009dc4 <HAL_TIM_Base_Init+0x124>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d006      	beq.n	8009dbc <HAL_TIM_Base_Init+0x11c>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009db6:	d201      	bcs.n	8009dbc <HAL_TIM_Base_Init+0x11c>
 8009db8:	2301      	movs	r3, #1
 8009dba:	e000      	b.n	8009dbe <HAL_TIM_Base_Init+0x11e>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <HAL_TIM_Base_Init+0x132>
 8009dc8:	f240 1119 	movw	r1, #281	@ 0x119
 8009dcc:	4838      	ldr	r0, [pc, #224]	@ (8009eb0 <HAL_TIM_Base_Init+0x210>)
 8009dce:	f7fa fd8d 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d008      	beq.n	8009dec <HAL_TIM_Base_Init+0x14c>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	2b80      	cmp	r3, #128	@ 0x80
 8009de0:	d004      	beq.n	8009dec <HAL_TIM_Base_Init+0x14c>
 8009de2:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8009de6:	4832      	ldr	r0, [pc, #200]	@ (8009eb0 <HAL_TIM_Base_Init+0x210>)
 8009de8:	f7fa fd80 	bl	80048ec <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d106      	bne.n	8009e06 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fb f9d1 	bl	80051a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2202      	movs	r2, #2
 8009e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f001 ff43 	bl	800bca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	40012c00 	.word	0x40012c00
 8009e8c:	40000400 	.word	0x40000400
 8009e90:	40000800 	.word	0x40000800
 8009e94:	40000c00 	.word	0x40000c00
 8009e98:	40001000 	.word	0x40001000
 8009e9c:	40001400 	.word	0x40001400
 8009ea0:	40013400 	.word	0x40013400
 8009ea4:	40014000 	.word	0x40014000
 8009ea8:	40014400 	.word	0x40014400
 8009eac:	40014800 	.word	0x40014800
 8009eb0:	0800f4e4 	.word	0x0800f4e4

08009eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8009fec <HAL_TIM_Base_Start_IT+0x138>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d036      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ece:	d031      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a46      	ldr	r2, [pc, #280]	@ (8009ff0 <HAL_TIM_Base_Start_IT+0x13c>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d02c      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a45      	ldr	r2, [pc, #276]	@ (8009ff4 <HAL_TIM_Base_Start_IT+0x140>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d027      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a43      	ldr	r2, [pc, #268]	@ (8009ff8 <HAL_TIM_Base_Start_IT+0x144>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d022      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a42      	ldr	r2, [pc, #264]	@ (8009ffc <HAL_TIM_Base_Start_IT+0x148>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d01d      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a40      	ldr	r2, [pc, #256]	@ (800a000 <HAL_TIM_Base_Start_IT+0x14c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d018      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a3f      	ldr	r2, [pc, #252]	@ (800a004 <HAL_TIM_Base_Start_IT+0x150>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d013      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a3d      	ldr	r2, [pc, #244]	@ (800a008 <HAL_TIM_Base_Start_IT+0x154>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00e      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800a00c <HAL_TIM_Base_Start_IT+0x158>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d009      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a3a      	ldr	r2, [pc, #232]	@ (800a010 <HAL_TIM_Base_Start_IT+0x15c>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d004      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f2a:	f240 11d3 	movw	r1, #467	@ 0x1d3
 8009f2e:	4839      	ldr	r0, [pc, #228]	@ (800a014 <HAL_TIM_Base_Start_IT+0x160>)
 8009f30:	f7fa fcdc 	bl	80048ec <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d001      	beq.n	8009f44 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e04f      	b.n	8009fe4 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 0201 	orr.w	r2, r2, #1
 8009f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a22      	ldr	r2, [pc, #136]	@ (8009fec <HAL_TIM_Base_Start_IT+0x138>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d01d      	beq.n	8009fa2 <HAL_TIM_Base_Start_IT+0xee>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f6e:	d018      	beq.n	8009fa2 <HAL_TIM_Base_Start_IT+0xee>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a1e      	ldr	r2, [pc, #120]	@ (8009ff0 <HAL_TIM_Base_Start_IT+0x13c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d013      	beq.n	8009fa2 <HAL_TIM_Base_Start_IT+0xee>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ff4 <HAL_TIM_Base_Start_IT+0x140>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d00e      	beq.n	8009fa2 <HAL_TIM_Base_Start_IT+0xee>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1b      	ldr	r2, [pc, #108]	@ (8009ff8 <HAL_TIM_Base_Start_IT+0x144>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d009      	beq.n	8009fa2 <HAL_TIM_Base_Start_IT+0xee>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a1c      	ldr	r2, [pc, #112]	@ (800a004 <HAL_TIM_Base_Start_IT+0x150>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d004      	beq.n	8009fa2 <HAL_TIM_Base_Start_IT+0xee>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a1a      	ldr	r2, [pc, #104]	@ (800a008 <HAL_TIM_Base_Start_IT+0x154>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d115      	bne.n	8009fce <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	4b1b      	ldr	r3, [pc, #108]	@ (800a018 <HAL_TIM_Base_Start_IT+0x164>)
 8009faa:	4013      	ands	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b06      	cmp	r3, #6
 8009fb2:	d015      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x12c>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fba:	d011      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f042 0201 	orr.w	r2, r2, #1
 8009fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fcc:	e008      	b.n	8009fe0 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f042 0201 	orr.w	r2, r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	e000      	b.n	8009fe2 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40012c00 	.word	0x40012c00
 8009ff0:	40000400 	.word	0x40000400
 8009ff4:	40000800 	.word	0x40000800
 8009ff8:	40000c00 	.word	0x40000c00
 8009ffc:	40001000 	.word	0x40001000
 800a000:	40001400 	.word	0x40001400
 800a004:	40013400 	.word	0x40013400
 800a008:	40014000 	.word	0x40014000
 800a00c:	40014400 	.word	0x40014400
 800a010:	40014800 	.word	0x40014800
 800a014:	0800f4e4 	.word	0x0800f4e4
 800a018:	00010007 	.word	0x00010007

0800a01c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a31      	ldr	r2, [pc, #196]	@ (800a0f0 <HAL_TIM_Base_Stop_IT+0xd4>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d036      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a036:	d031      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a2d      	ldr	r2, [pc, #180]	@ (800a0f4 <HAL_TIM_Base_Stop_IT+0xd8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d02c      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a2c      	ldr	r2, [pc, #176]	@ (800a0f8 <HAL_TIM_Base_Stop_IT+0xdc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d027      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a2a      	ldr	r2, [pc, #168]	@ (800a0fc <HAL_TIM_Base_Stop_IT+0xe0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d022      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a29      	ldr	r2, [pc, #164]	@ (800a100 <HAL_TIM_Base_Stop_IT+0xe4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d01d      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a27      	ldr	r2, [pc, #156]	@ (800a104 <HAL_TIM_Base_Stop_IT+0xe8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d018      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a26      	ldr	r2, [pc, #152]	@ (800a108 <HAL_TIM_Base_Stop_IT+0xec>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d013      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a24      	ldr	r2, [pc, #144]	@ (800a10c <HAL_TIM_Base_Stop_IT+0xf0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00e      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a23      	ldr	r2, [pc, #140]	@ (800a110 <HAL_TIM_Base_Stop_IT+0xf4>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d009      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a21      	ldr	r2, [pc, #132]	@ (800a114 <HAL_TIM_Base_Stop_IT+0xf8>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d004      	beq.n	800a09c <HAL_TIM_Base_Stop_IT+0x80>
 800a092:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800a096:	4820      	ldr	r0, [pc, #128]	@ (800a118 <HAL_TIM_Base_Stop_IT+0xfc>)
 800a098:	f7fa fc28 	bl	80048ec <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 0201 	bic.w	r2, r2, #1
 800a0aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6a1a      	ldr	r2, [r3, #32]
 800a0b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10f      	bne.n	800a0dc <HAL_TIM_Base_Stop_IT+0xc0>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6a1a      	ldr	r2, [r3, #32]
 800a0c2:	f240 4344 	movw	r3, #1092	@ 0x444
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d107      	bne.n	800a0dc <HAL_TIM_Base_Stop_IT+0xc0>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 0201 	bic.w	r2, r2, #1
 800a0da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	40012c00 	.word	0x40012c00
 800a0f4:	40000400 	.word	0x40000400
 800a0f8:	40000800 	.word	0x40000800
 800a0fc:	40000c00 	.word	0x40000c00
 800a100:	40001000 	.word	0x40001000
 800a104:	40001400 	.word	0x40001400
 800a108:	40013400 	.word	0x40013400
 800a10c:	40014000 	.word	0x40014000
 800a110:	40014400 	.word	0x40014400
 800a114:	40014800 	.word	0x40014800
 800a118:	0800f4e4 	.word	0x0800f4e4

0800a11c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e0e6      	b.n	800a2fc <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a74      	ldr	r2, [pc, #464]	@ (800a304 <HAL_TIM_PWM_Init+0x1e8>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d036      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a140:	d031      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a70      	ldr	r2, [pc, #448]	@ (800a308 <HAL_TIM_PWM_Init+0x1ec>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d02c      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a6e      	ldr	r2, [pc, #440]	@ (800a30c <HAL_TIM_PWM_Init+0x1f0>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d027      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a6d      	ldr	r2, [pc, #436]	@ (800a310 <HAL_TIM_PWM_Init+0x1f4>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d022      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a6b      	ldr	r2, [pc, #428]	@ (800a314 <HAL_TIM_PWM_Init+0x1f8>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d01d      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a6a      	ldr	r2, [pc, #424]	@ (800a318 <HAL_TIM_PWM_Init+0x1fc>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d018      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a68      	ldr	r2, [pc, #416]	@ (800a31c <HAL_TIM_PWM_Init+0x200>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d013      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a67      	ldr	r2, [pc, #412]	@ (800a320 <HAL_TIM_PWM_Init+0x204>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00e      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a65      	ldr	r2, [pc, #404]	@ (800a324 <HAL_TIM_PWM_Init+0x208>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d009      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a64      	ldr	r2, [pc, #400]	@ (800a328 <HAL_TIM_PWM_Init+0x20c>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d004      	beq.n	800a1a6 <HAL_TIM_PWM_Init+0x8a>
 800a19c:	f240 5133 	movw	r1, #1331	@ 0x533
 800a1a0:	4862      	ldr	r0, [pc, #392]	@ (800a32c <HAL_TIM_PWM_Init+0x210>)
 800a1a2:	f7fa fba3 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d014      	beq.n	800a1d8 <HAL_TIM_PWM_Init+0xbc>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d010      	beq.n	800a1d8 <HAL_TIM_PWM_Init+0xbc>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	d00c      	beq.n	800a1d8 <HAL_TIM_PWM_Init+0xbc>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	2b40      	cmp	r3, #64	@ 0x40
 800a1c4:	d008      	beq.n	800a1d8 <HAL_TIM_PWM_Init+0xbc>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	2b60      	cmp	r3, #96	@ 0x60
 800a1cc:	d004      	beq.n	800a1d8 <HAL_TIM_PWM_Init+0xbc>
 800a1ce:	f240 5134 	movw	r1, #1332	@ 0x534
 800a1d2:	4856      	ldr	r0, [pc, #344]	@ (800a32c <HAL_TIM_PWM_Init+0x210>)
 800a1d4:	f7fa fb8a 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00e      	beq.n	800a1fe <HAL_TIM_PWM_Init+0xe2>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1e8:	d009      	beq.n	800a1fe <HAL_TIM_PWM_Init+0xe2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1f2:	d004      	beq.n	800a1fe <HAL_TIM_PWM_Init+0xe2>
 800a1f4:	f240 5135 	movw	r1, #1333	@ 0x535
 800a1f8:	484c      	ldr	r0, [pc, #304]	@ (800a32c <HAL_TIM_PWM_Init+0x210>)
 800a1fa:	f7fa fb77 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a206:	d004      	beq.n	800a212 <HAL_TIM_PWM_Init+0xf6>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a40      	ldr	r2, [pc, #256]	@ (800a310 <HAL_TIM_PWM_Init+0x1f4>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d107      	bne.n	800a222 <HAL_TIM_PWM_Init+0x106>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	bf14      	ite	ne
 800a21a:	2301      	movne	r3, #1
 800a21c:	2300      	moveq	r3, #0
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	e00e      	b.n	800a240 <HAL_TIM_PWM_Init+0x124>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d006      	beq.n	800a238 <HAL_TIM_PWM_Init+0x11c>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a232:	d201      	bcs.n	800a238 <HAL_TIM_PWM_Init+0x11c>
 800a234:	2301      	movs	r3, #1
 800a236:	e000      	b.n	800a23a <HAL_TIM_PWM_Init+0x11e>
 800a238:	2300      	movs	r3, #0
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d104      	bne.n	800a24e <HAL_TIM_PWM_Init+0x132>
 800a244:	f240 5136 	movw	r1, #1334	@ 0x536
 800a248:	4838      	ldr	r0, [pc, #224]	@ (800a32c <HAL_TIM_PWM_Init+0x210>)
 800a24a:	f7fa fb4f 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d008      	beq.n	800a268 <HAL_TIM_PWM_Init+0x14c>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	2b80      	cmp	r3, #128	@ 0x80
 800a25c:	d004      	beq.n	800a268 <HAL_TIM_PWM_Init+0x14c>
 800a25e:	f240 5137 	movw	r1, #1335	@ 0x537
 800a262:	4832      	ldr	r0, [pc, #200]	@ (800a32c <HAL_TIM_PWM_Init+0x210>)
 800a264:	f7fa fb42 	bl	80048ec <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f857 	bl	800a330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3304      	adds	r3, #4
 800a292:	4619      	mov	r1, r3
 800a294:	4610      	mov	r0, r2
 800a296:	f001 fd05 	bl	800bca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	40012c00 	.word	0x40012c00
 800a308:	40000400 	.word	0x40000400
 800a30c:	40000800 	.word	0x40000800
 800a310:	40000c00 	.word	0x40000c00
 800a314:	40001000 	.word	0x40001000
 800a318:	40001400 	.word	0x40001400
 800a31c:	40013400 	.word	0x40013400
 800a320:	40014000 	.word	0x40014000
 800a324:	40014400 	.word	0x40014400
 800a328:	40014800 	.word	0x40014800
 800a32c:	0800f4e4 	.word	0x0800f4e4

0800a330 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a85      	ldr	r2, [pc, #532]	@ (800a568 <HAL_TIM_PWM_Start+0x224>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d115      	bne.n	800a384 <HAL_TIM_PWM_Start+0x40>
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 808d 	beq.w	800a47a <HAL_TIM_PWM_Start+0x136>
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b04      	cmp	r3, #4
 800a364:	f000 8089 	beq.w	800a47a <HAL_TIM_PWM_Start+0x136>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2b08      	cmp	r3, #8
 800a36c:	f000 8085 	beq.w	800a47a <HAL_TIM_PWM_Start+0x136>
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b0c      	cmp	r3, #12
 800a374:	f000 8081 	beq.w	800a47a <HAL_TIM_PWM_Start+0x136>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b10      	cmp	r3, #16
 800a37c:	d07d      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b14      	cmp	r3, #20
 800a382:	d07a      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a38c:	d10b      	bne.n	800a3a6 <HAL_TIM_PWM_Start+0x62>
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d072      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b04      	cmp	r3, #4
 800a398:	d06f      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b08      	cmp	r3, #8
 800a39e:	d06c      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2b0c      	cmp	r3, #12
 800a3a4:	d069      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a70      	ldr	r2, [pc, #448]	@ (800a56c <HAL_TIM_PWM_Start+0x228>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d10b      	bne.n	800a3c8 <HAL_TIM_PWM_Start+0x84>
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d061      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d05e      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	2b08      	cmp	r3, #8
 800a3c0:	d05b      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b0c      	cmp	r3, #12
 800a3c6:	d058      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a68      	ldr	r2, [pc, #416]	@ (800a570 <HAL_TIM_PWM_Start+0x22c>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d10b      	bne.n	800a3ea <HAL_TIM_PWM_Start+0xa6>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d050      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	d04d      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b08      	cmp	r3, #8
 800a3e2:	d04a      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2b0c      	cmp	r3, #12
 800a3e8:	d047      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a61      	ldr	r2, [pc, #388]	@ (800a574 <HAL_TIM_PWM_Start+0x230>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d10b      	bne.n	800a40c <HAL_TIM_PWM_Start+0xc8>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d03f      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d03c      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b08      	cmp	r3, #8
 800a404:	d039      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b0c      	cmp	r3, #12
 800a40a:	d036      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a59      	ldr	r2, [pc, #356]	@ (800a578 <HAL_TIM_PWM_Start+0x234>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d111      	bne.n	800a43a <HAL_TIM_PWM_Start+0xf6>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d02e      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2b04      	cmp	r3, #4
 800a420:	d02b      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b08      	cmp	r3, #8
 800a426:	d028      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b0c      	cmp	r3, #12
 800a42c:	d025      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b10      	cmp	r3, #16
 800a432:	d022      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2b14      	cmp	r3, #20
 800a438:	d01f      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a4f      	ldr	r2, [pc, #316]	@ (800a57c <HAL_TIM_PWM_Start+0x238>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d105      	bne.n	800a450 <HAL_TIM_PWM_Start+0x10c>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d017      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d014      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a4a      	ldr	r2, [pc, #296]	@ (800a580 <HAL_TIM_PWM_Start+0x23c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d102      	bne.n	800a460 <HAL_TIM_PWM_Start+0x11c>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00c      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a47      	ldr	r2, [pc, #284]	@ (800a584 <HAL_TIM_PWM_Start+0x240>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d102      	bne.n	800a470 <HAL_TIM_PWM_Start+0x12c>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d004      	beq.n	800a47a <HAL_TIM_PWM_Start+0x136>
 800a470:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800a474:	4844      	ldr	r0, [pc, #272]	@ (800a588 <HAL_TIM_PWM_Start+0x244>)
 800a476:	f7fa fa39 	bl	80048ec <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d109      	bne.n	800a494 <HAL_TIM_PWM_Start+0x150>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b01      	cmp	r3, #1
 800a48a:	bf14      	ite	ne
 800a48c:	2301      	movne	r3, #1
 800a48e:	2300      	moveq	r3, #0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	e03c      	b.n	800a50e <HAL_TIM_PWM_Start+0x1ca>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	2b04      	cmp	r3, #4
 800a498:	d109      	bne.n	800a4ae <HAL_TIM_PWM_Start+0x16a>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	bf14      	ite	ne
 800a4a6:	2301      	movne	r3, #1
 800a4a8:	2300      	moveq	r3, #0
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	e02f      	b.n	800a50e <HAL_TIM_PWM_Start+0x1ca>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b08      	cmp	r3, #8
 800a4b2:	d109      	bne.n	800a4c8 <HAL_TIM_PWM_Start+0x184>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	bf14      	ite	ne
 800a4c0:	2301      	movne	r3, #1
 800a4c2:	2300      	moveq	r3, #0
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	e022      	b.n	800a50e <HAL_TIM_PWM_Start+0x1ca>
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b0c      	cmp	r3, #12
 800a4cc:	d109      	bne.n	800a4e2 <HAL_TIM_PWM_Start+0x19e>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	bf14      	ite	ne
 800a4da:	2301      	movne	r3, #1
 800a4dc:	2300      	moveq	r3, #0
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	e015      	b.n	800a50e <HAL_TIM_PWM_Start+0x1ca>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b10      	cmp	r3, #16
 800a4e6:	d109      	bne.n	800a4fc <HAL_TIM_PWM_Start+0x1b8>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	e008      	b.n	800a50e <HAL_TIM_PWM_Start+0x1ca>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b01      	cmp	r3, #1
 800a506:	bf14      	ite	ne
 800a508:	2301      	movne	r3, #1
 800a50a:	2300      	moveq	r3, #0
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e0af      	b.n	800a676 <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d104      	bne.n	800a526 <HAL_TIM_PWM_Start+0x1e2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a524:	e036      	b.n	800a594 <HAL_TIM_PWM_Start+0x250>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d104      	bne.n	800a536 <HAL_TIM_PWM_Start+0x1f2>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a534:	e02e      	b.n	800a594 <HAL_TIM_PWM_Start+0x250>
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d104      	bne.n	800a546 <HAL_TIM_PWM_Start+0x202>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a544:	e026      	b.n	800a594 <HAL_TIM_PWM_Start+0x250>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b0c      	cmp	r3, #12
 800a54a:	d104      	bne.n	800a556 <HAL_TIM_PWM_Start+0x212>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a554:	e01e      	b.n	800a594 <HAL_TIM_PWM_Start+0x250>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b10      	cmp	r3, #16
 800a55a:	d117      	bne.n	800a58c <HAL_TIM_PWM_Start+0x248>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a564:	e016      	b.n	800a594 <HAL_TIM_PWM_Start+0x250>
 800a566:	bf00      	nop
 800a568:	40012c00 	.word	0x40012c00
 800a56c:	40000400 	.word	0x40000400
 800a570:	40000800 	.word	0x40000800
 800a574:	40000c00 	.word	0x40000c00
 800a578:	40013400 	.word	0x40013400
 800a57c:	40014000 	.word	0x40014000
 800a580:	40014400 	.word	0x40014400
 800a584:	40014800 	.word	0x40014800
 800a588:	0800f4e4 	.word	0x0800f4e4
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2201      	movs	r2, #1
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f002 f821 	bl	800c5e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a36      	ldr	r2, [pc, #216]	@ (800a680 <HAL_TIM_PWM_Start+0x33c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d013      	beq.n	800a5d4 <HAL_TIM_PWM_Start+0x290>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a34      	ldr	r2, [pc, #208]	@ (800a684 <HAL_TIM_PWM_Start+0x340>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d00e      	beq.n	800a5d4 <HAL_TIM_PWM_Start+0x290>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a33      	ldr	r2, [pc, #204]	@ (800a688 <HAL_TIM_PWM_Start+0x344>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d009      	beq.n	800a5d4 <HAL_TIM_PWM_Start+0x290>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a31      	ldr	r2, [pc, #196]	@ (800a68c <HAL_TIM_PWM_Start+0x348>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d004      	beq.n	800a5d4 <HAL_TIM_PWM_Start+0x290>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a30      	ldr	r2, [pc, #192]	@ (800a690 <HAL_TIM_PWM_Start+0x34c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d101      	bne.n	800a5d8 <HAL_TIM_PWM_Start+0x294>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e000      	b.n	800a5da <HAL_TIM_PWM_Start+0x296>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d007      	beq.n	800a5ee <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a5ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a23      	ldr	r2, [pc, #140]	@ (800a680 <HAL_TIM_PWM_Start+0x33c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d01d      	beq.n	800a634 <HAL_TIM_PWM_Start+0x2f0>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a600:	d018      	beq.n	800a634 <HAL_TIM_PWM_Start+0x2f0>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a23      	ldr	r2, [pc, #140]	@ (800a694 <HAL_TIM_PWM_Start+0x350>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d013      	beq.n	800a634 <HAL_TIM_PWM_Start+0x2f0>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a21      	ldr	r2, [pc, #132]	@ (800a698 <HAL_TIM_PWM_Start+0x354>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00e      	beq.n	800a634 <HAL_TIM_PWM_Start+0x2f0>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a20      	ldr	r2, [pc, #128]	@ (800a69c <HAL_TIM_PWM_Start+0x358>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d009      	beq.n	800a634 <HAL_TIM_PWM_Start+0x2f0>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a17      	ldr	r2, [pc, #92]	@ (800a684 <HAL_TIM_PWM_Start+0x340>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d004      	beq.n	800a634 <HAL_TIM_PWM_Start+0x2f0>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a16      	ldr	r2, [pc, #88]	@ (800a688 <HAL_TIM_PWM_Start+0x344>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d115      	bne.n	800a660 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689a      	ldr	r2, [r3, #8]
 800a63a:	4b19      	ldr	r3, [pc, #100]	@ (800a6a0 <HAL_TIM_PWM_Start+0x35c>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2b06      	cmp	r3, #6
 800a644:	d015      	beq.n	800a672 <HAL_TIM_PWM_Start+0x32e>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a64c:	d011      	beq.n	800a672 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f042 0201 	orr.w	r2, r2, #1
 800a65c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a65e:	e008      	b.n	800a672 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f042 0201 	orr.w	r2, r2, #1
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	e000      	b.n	800a674 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	40012c00 	.word	0x40012c00
 800a684:	40013400 	.word	0x40013400
 800a688:	40014000 	.word	0x40014000
 800a68c:	40014400 	.word	0x40014400
 800a690:	40014800 	.word	0x40014800
 800a694:	40000400 	.word	0x40000400
 800a698:	40000800 	.word	0x40000800
 800a69c:	40000c00 	.word	0x40000c00
 800a6a0:	00010007 	.word	0x00010007

0800a6a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a8d      	ldr	r2, [pc, #564]	@ (800a8e8 <HAL_TIM_PWM_Stop+0x244>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d115      	bne.n	800a6e4 <HAL_TIM_PWM_Stop+0x40>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 808d 	beq.w	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	f000 8089 	beq.w	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	f000 8085 	beq.w	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2b0c      	cmp	r3, #12
 800a6d4:	f000 8081 	beq.w	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2b10      	cmp	r3, #16
 800a6dc:	d07d      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b14      	cmp	r3, #20
 800a6e2:	d07a      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ec:	d10b      	bne.n	800a706 <HAL_TIM_PWM_Stop+0x62>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d072      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d06f      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d06c      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2b0c      	cmp	r3, #12
 800a704:	d069      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a78      	ldr	r2, [pc, #480]	@ (800a8ec <HAL_TIM_PWM_Stop+0x248>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d10b      	bne.n	800a728 <HAL_TIM_PWM_Stop+0x84>
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d061      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d05e      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b08      	cmp	r3, #8
 800a720:	d05b      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b0c      	cmp	r3, #12
 800a726:	d058      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a70      	ldr	r2, [pc, #448]	@ (800a8f0 <HAL_TIM_PWM_Stop+0x24c>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d10b      	bne.n	800a74a <HAL_TIM_PWM_Stop+0xa6>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d050      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d04d      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b08      	cmp	r3, #8
 800a742:	d04a      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2b0c      	cmp	r3, #12
 800a748:	d047      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a69      	ldr	r2, [pc, #420]	@ (800a8f4 <HAL_TIM_PWM_Stop+0x250>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d10b      	bne.n	800a76c <HAL_TIM_PWM_Stop+0xc8>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d03f      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d03c      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2b08      	cmp	r3, #8
 800a764:	d039      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b0c      	cmp	r3, #12
 800a76a:	d036      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a61      	ldr	r2, [pc, #388]	@ (800a8f8 <HAL_TIM_PWM_Stop+0x254>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d111      	bne.n	800a79a <HAL_TIM_PWM_Stop+0xf6>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d02e      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d02b      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b08      	cmp	r3, #8
 800a786:	d028      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	2b0c      	cmp	r3, #12
 800a78c:	d025      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b10      	cmp	r3, #16
 800a792:	d022      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2b14      	cmp	r3, #20
 800a798:	d01f      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a57      	ldr	r2, [pc, #348]	@ (800a8fc <HAL_TIM_PWM_Stop+0x258>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d105      	bne.n	800a7b0 <HAL_TIM_PWM_Stop+0x10c>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d017      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	d014      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a52      	ldr	r2, [pc, #328]	@ (800a900 <HAL_TIM_PWM_Stop+0x25c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d102      	bne.n	800a7c0 <HAL_TIM_PWM_Stop+0x11c>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00c      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a4f      	ldr	r2, [pc, #316]	@ (800a904 <HAL_TIM_PWM_Stop+0x260>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d102      	bne.n	800a7d0 <HAL_TIM_PWM_Stop+0x12c>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d004      	beq.n	800a7da <HAL_TIM_PWM_Stop+0x136>
 800a7d0:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800a7d4:	484c      	ldr	r0, [pc, #304]	@ (800a908 <HAL_TIM_PWM_Stop+0x264>)
 800a7d6:	f7fa f889 	bl	80048ec <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fefe 	bl	800c5e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a3e      	ldr	r2, [pc, #248]	@ (800a8e8 <HAL_TIM_PWM_Stop+0x244>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d013      	beq.n	800a81a <HAL_TIM_PWM_Stop+0x176>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a40      	ldr	r2, [pc, #256]	@ (800a8f8 <HAL_TIM_PWM_Stop+0x254>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d00e      	beq.n	800a81a <HAL_TIM_PWM_Stop+0x176>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a3e      	ldr	r2, [pc, #248]	@ (800a8fc <HAL_TIM_PWM_Stop+0x258>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d009      	beq.n	800a81a <HAL_TIM_PWM_Stop+0x176>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a3d      	ldr	r2, [pc, #244]	@ (800a900 <HAL_TIM_PWM_Stop+0x25c>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d004      	beq.n	800a81a <HAL_TIM_PWM_Stop+0x176>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a3b      	ldr	r2, [pc, #236]	@ (800a904 <HAL_TIM_PWM_Stop+0x260>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d101      	bne.n	800a81e <HAL_TIM_PWM_Stop+0x17a>
 800a81a:	2301      	movs	r3, #1
 800a81c:	e000      	b.n	800a820 <HAL_TIM_PWM_Stop+0x17c>
 800a81e:	2300      	movs	r3, #0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d017      	beq.n	800a854 <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6a1a      	ldr	r2, [r3, #32]
 800a82a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a82e:	4013      	ands	r3, r2
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10f      	bne.n	800a854 <HAL_TIM_PWM_Stop+0x1b0>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6a1a      	ldr	r2, [r3, #32]
 800a83a:	f240 4344 	movw	r3, #1092	@ 0x444
 800a83e:	4013      	ands	r3, r2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d107      	bne.n	800a854 <HAL_TIM_PWM_Stop+0x1b0>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a852:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6a1a      	ldr	r2, [r3, #32]
 800a85a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a85e:	4013      	ands	r3, r2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10f      	bne.n	800a884 <HAL_TIM_PWM_Stop+0x1e0>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6a1a      	ldr	r2, [r3, #32]
 800a86a:	f240 4344 	movw	r3, #1092	@ 0x444
 800a86e:	4013      	ands	r3, r2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d107      	bne.n	800a884 <HAL_TIM_PWM_Stop+0x1e0>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f022 0201 	bic.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d104      	bne.n	800a894 <HAL_TIM_PWM_Stop+0x1f0>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a892:	e023      	b.n	800a8dc <HAL_TIM_PWM_Stop+0x238>
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b04      	cmp	r3, #4
 800a898:	d104      	bne.n	800a8a4 <HAL_TIM_PWM_Stop+0x200>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8a2:	e01b      	b.n	800a8dc <HAL_TIM_PWM_Stop+0x238>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b08      	cmp	r3, #8
 800a8a8:	d104      	bne.n	800a8b4 <HAL_TIM_PWM_Stop+0x210>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8b2:	e013      	b.n	800a8dc <HAL_TIM_PWM_Stop+0x238>
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b0c      	cmp	r3, #12
 800a8b8:	d104      	bne.n	800a8c4 <HAL_TIM_PWM_Stop+0x220>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8c2:	e00b      	b.n	800a8dc <HAL_TIM_PWM_Stop+0x238>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	d104      	bne.n	800a8d4 <HAL_TIM_PWM_Stop+0x230>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8d2:	e003      	b.n	800a8dc <HAL_TIM_PWM_Stop+0x238>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	40012c00 	.word	0x40012c00
 800a8ec:	40000400 	.word	0x40000400
 800a8f0:	40000800 	.word	0x40000800
 800a8f4:	40000c00 	.word	0x40000c00
 800a8f8:	40013400 	.word	0x40013400
 800a8fc:	40014000 	.word	0x40014000
 800a900:	40014400 	.word	0x40014400
 800a904:	40014800 	.word	0x40014800
 800a908:	0800f4e4 	.word	0x0800f4e4

0800a90c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e1b0      	b.n	800ac82 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a7f      	ldr	r2, [pc, #508]	@ (800ab24 <HAL_TIM_Encoder_Init+0x218>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d01d      	beq.n	800a966 <HAL_TIM_Encoder_Init+0x5a>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a932:	d018      	beq.n	800a966 <HAL_TIM_Encoder_Init+0x5a>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a7b      	ldr	r2, [pc, #492]	@ (800ab28 <HAL_TIM_Encoder_Init+0x21c>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d013      	beq.n	800a966 <HAL_TIM_Encoder_Init+0x5a>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a7a      	ldr	r2, [pc, #488]	@ (800ab2c <HAL_TIM_Encoder_Init+0x220>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d00e      	beq.n	800a966 <HAL_TIM_Encoder_Init+0x5a>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a78      	ldr	r2, [pc, #480]	@ (800ab30 <HAL_TIM_Encoder_Init+0x224>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d009      	beq.n	800a966 <HAL_TIM_Encoder_Init+0x5a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a77      	ldr	r2, [pc, #476]	@ (800ab34 <HAL_TIM_Encoder_Init+0x228>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d004      	beq.n	800a966 <HAL_TIM_Encoder_Init+0x5a>
 800a95c:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800a960:	4875      	ldr	r0, [pc, #468]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800a962:	f7f9 ffc3 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d014      	beq.n	800a998 <HAL_TIM_Encoder_Init+0x8c>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	2b10      	cmp	r3, #16
 800a974:	d010      	beq.n	800a998 <HAL_TIM_Encoder_Init+0x8c>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d00c      	beq.n	800a998 <HAL_TIM_Encoder_Init+0x8c>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b40      	cmp	r3, #64	@ 0x40
 800a984:	d008      	beq.n	800a998 <HAL_TIM_Encoder_Init+0x8c>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	2b60      	cmp	r3, #96	@ 0x60
 800a98c:	d004      	beq.n	800a998 <HAL_TIM_Encoder_Init+0x8c>
 800a98e:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800a992:	4869      	ldr	r0, [pc, #420]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800a994:	f7f9 ffaa 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00e      	beq.n	800a9be <HAL_TIM_Encoder_Init+0xb2>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9a8:	d009      	beq.n	800a9be <HAL_TIM_Encoder_Init+0xb2>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9b2:	d004      	beq.n	800a9be <HAL_TIM_Encoder_Init+0xb2>
 800a9b4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 800a9b8:	485f      	ldr	r0, [pc, #380]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800a9ba:	f7f9 ff97 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d008      	beq.n	800a9d8 <HAL_TIM_Encoder_Init+0xcc>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	2b80      	cmp	r3, #128	@ 0x80
 800a9cc:	d004      	beq.n	800a9d8 <HAL_TIM_Encoder_Init+0xcc>
 800a9ce:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800a9d2:	4859      	ldr	r0, [pc, #356]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800a9d4:	f7f9 ff8a 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d00c      	beq.n	800a9fa <HAL_TIM_Encoder_Init+0xee>
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d008      	beq.n	800a9fa <HAL_TIM_Encoder_Init+0xee>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d004      	beq.n	800a9fa <HAL_TIM_Encoder_Init+0xee>
 800a9f0:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 800a9f4:	4850      	ldr	r0, [pc, #320]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800a9f6:	f7f9 ff79 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d00c      	beq.n	800aa1c <HAL_TIM_Encoder_Init+0x110>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d008      	beq.n	800aa1c <HAL_TIM_Encoder_Init+0x110>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d004      	beq.n	800aa1c <HAL_TIM_Encoder_Init+0x110>
 800aa12:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800aa16:	4848      	ldr	r0, [pc, #288]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800aa18:	f7f9 ff68 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d00c      	beq.n	800aa3e <HAL_TIM_Encoder_Init+0x132>
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d008      	beq.n	800aa3e <HAL_TIM_Encoder_Init+0x132>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d004      	beq.n	800aa3e <HAL_TIM_Encoder_Init+0x132>
 800aa34:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 800aa38:	483f      	ldr	r0, [pc, #252]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800aa3a:	f7f9 ff57 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d008      	beq.n	800aa58 <HAL_TIM_Encoder_Init+0x14c>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d004      	beq.n	800aa58 <HAL_TIM_Encoder_Init+0x14c>
 800aa4e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800aa52:	4839      	ldr	r0, [pc, #228]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800aa54:	f7f9 ff4a 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d008      	beq.n	800aa72 <HAL_TIM_Encoder_Init+0x166>
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d004      	beq.n	800aa72 <HAL_TIM_Encoder_Init+0x166>
 800aa68:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800aa6c:	4832      	ldr	r0, [pc, #200]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800aa6e:	f7f9 ff3d 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d010      	beq.n	800aa9c <HAL_TIM_Encoder_Init+0x190>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d00c      	beq.n	800aa9c <HAL_TIM_Encoder_Init+0x190>
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	2b08      	cmp	r3, #8
 800aa88:	d008      	beq.n	800aa9c <HAL_TIM_Encoder_Init+0x190>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	2b0c      	cmp	r3, #12
 800aa90:	d004      	beq.n	800aa9c <HAL_TIM_Encoder_Init+0x190>
 800aa92:	f640 31ec 	movw	r1, #3052	@ 0xbec
 800aa96:	4828      	ldr	r0, [pc, #160]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800aa98:	f7f9 ff28 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d010      	beq.n	800aac6 <HAL_TIM_Encoder_Init+0x1ba>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	d00c      	beq.n	800aac6 <HAL_TIM_Encoder_Init+0x1ba>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	2b08      	cmp	r3, #8
 800aab2:	d008      	beq.n	800aac6 <HAL_TIM_Encoder_Init+0x1ba>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	2b0c      	cmp	r3, #12
 800aaba:	d004      	beq.n	800aac6 <HAL_TIM_Encoder_Init+0x1ba>
 800aabc:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800aac0:	481d      	ldr	r0, [pc, #116]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800aac2:	f7f9 ff13 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	2b0f      	cmp	r3, #15
 800aacc:	d904      	bls.n	800aad8 <HAL_TIM_Encoder_Init+0x1cc>
 800aace:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800aad2:	4819      	ldr	r0, [pc, #100]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800aad4:	f7f9 ff0a 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	2b0f      	cmp	r3, #15
 800aade:	d904      	bls.n	800aaea <HAL_TIM_Encoder_Init+0x1de>
 800aae0:	f640 31ef 	movw	r1, #3055	@ 0xbef
 800aae4:	4814      	ldr	r0, [pc, #80]	@ (800ab38 <HAL_TIM_Encoder_Init+0x22c>)
 800aae6:	f7f9 ff01 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaf2:	d004      	beq.n	800aafe <HAL_TIM_Encoder_Init+0x1f2>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a0d      	ldr	r2, [pc, #52]	@ (800ab30 <HAL_TIM_Encoder_Init+0x224>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d107      	bne.n	800ab0e <HAL_TIM_Encoder_Init+0x202>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf14      	ite	ne
 800ab06:	2301      	movne	r3, #1
 800ab08:	2300      	moveq	r3, #0
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	e01a      	b.n	800ab44 <HAL_TIM_Encoder_Init+0x238>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d012      	beq.n	800ab3c <HAL_TIM_Encoder_Init+0x230>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab1e:	d20d      	bcs.n	800ab3c <HAL_TIM_Encoder_Init+0x230>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e00c      	b.n	800ab3e <HAL_TIM_Encoder_Init+0x232>
 800ab24:	40012c00 	.word	0x40012c00
 800ab28:	40000400 	.word	0x40000400
 800ab2c:	40000800 	.word	0x40000800
 800ab30:	40000c00 	.word	0x40000c00
 800ab34:	40013400 	.word	0x40013400
 800ab38:	0800f4e4 	.word	0x0800f4e4
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d104      	bne.n	800ab52 <HAL_TIM_Encoder_Init+0x246>
 800ab48:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800ab4c:	484f      	ldr	r0, [pc, #316]	@ (800ac8c <HAL_TIM_Encoder_Init+0x380>)
 800ab4e:	f7f9 fecd 	bl	80048ec <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7fa faaa 	bl	80050c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ab82:	f023 0307 	bic.w	r3, r3, #7
 800ab86:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4619      	mov	r1, r3
 800ab92:	4610      	mov	r0, r2
 800ab94:	f001 f886 	bl	800bca4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abc0:	f023 0303 	bic.w	r3, r3, #3
 800abc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	021b      	lsls	r3, r3, #8
 800abd0:	4313      	orrs	r3, r2
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800abde:	f023 030c 	bic.w	r3, r3, #12
 800abe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800abea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	68da      	ldr	r2, [r3, #12]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	4313      	orrs	r3, r2
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	011a      	lsls	r2, r3, #4
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	031b      	lsls	r3, r3, #12
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800ac1c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ac24:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	4313      	orrs	r3, r2
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	0800f4e4 	.word	0x0800f4e4

0800ac90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aca0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aca8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a4d      	ldr	r2, [pc, #308]	@ (800adf4 <HAL_TIM_Encoder_Start+0x164>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d01d      	beq.n	800ad00 <HAL_TIM_Encoder_Start+0x70>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800accc:	d018      	beq.n	800ad00 <HAL_TIM_Encoder_Start+0x70>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a49      	ldr	r2, [pc, #292]	@ (800adf8 <HAL_TIM_Encoder_Start+0x168>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d013      	beq.n	800ad00 <HAL_TIM_Encoder_Start+0x70>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a47      	ldr	r2, [pc, #284]	@ (800adfc <HAL_TIM_Encoder_Start+0x16c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d00e      	beq.n	800ad00 <HAL_TIM_Encoder_Start+0x70>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a46      	ldr	r2, [pc, #280]	@ (800ae00 <HAL_TIM_Encoder_Start+0x170>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d009      	beq.n	800ad00 <HAL_TIM_Encoder_Start+0x70>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a44      	ldr	r2, [pc, #272]	@ (800ae04 <HAL_TIM_Encoder_Start+0x174>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d004      	beq.n	800ad00 <HAL_TIM_Encoder_Start+0x70>
 800acf6:	f640 41a1 	movw	r1, #3233	@ 0xca1
 800acfa:	4843      	ldr	r0, [pc, #268]	@ (800ae08 <HAL_TIM_Encoder_Start+0x178>)
 800acfc:	f7f9 fdf6 	bl	80048ec <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d110      	bne.n	800ad28 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d102      	bne.n	800ad12 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad0c:	7b7b      	ldrb	r3, [r7, #13]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d001      	beq.n	800ad16 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e069      	b.n	800adea <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2202      	movs	r2, #2
 800ad22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad26:	e031      	b.n	800ad8c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b04      	cmp	r3, #4
 800ad2c:	d110      	bne.n	800ad50 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad2e:	7bbb      	ldrb	r3, [r7, #14]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d102      	bne.n	800ad3a <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad34:	7b3b      	ldrb	r3, [r7, #12]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d001      	beq.n	800ad3e <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e055      	b.n	800adea <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2202      	movs	r2, #2
 800ad42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2202      	movs	r2, #2
 800ad4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad4e:	e01d      	b.n	800ad8c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d108      	bne.n	800ad68 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d105      	bne.n	800ad68 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ad5c:	7b7b      	ldrb	r3, [r7, #13]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d102      	bne.n	800ad68 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ad62:	7b3b      	ldrb	r3, [r7, #12]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d001      	beq.n	800ad6c <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e03e      	b.n	800adea <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2202      	movs	r2, #2
 800ad78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <HAL_TIM_Encoder_Start+0x10a>
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2b04      	cmp	r3, #4
 800ad96:	d008      	beq.n	800adaa <HAL_TIM_Encoder_Start+0x11a>
 800ad98:	e00f      	b.n	800adba <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	2100      	movs	r1, #0
 800ada2:	4618      	mov	r0, r3
 800ada4:	f001 fc1e 	bl	800c5e4 <TIM_CCxChannelCmd>
      break;
 800ada8:	e016      	b.n	800add8 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2201      	movs	r2, #1
 800adb0:	2104      	movs	r1, #4
 800adb2:	4618      	mov	r0, r3
 800adb4:	f001 fc16 	bl	800c5e4 <TIM_CCxChannelCmd>
      break;
 800adb8:	e00e      	b.n	800add8 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2201      	movs	r2, #1
 800adc0:	2100      	movs	r1, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f001 fc0e 	bl	800c5e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2201      	movs	r2, #1
 800adce:	2104      	movs	r1, #4
 800add0:	4618      	mov	r0, r3
 800add2:	f001 fc07 	bl	800c5e4 <TIM_CCxChannelCmd>
      break;
 800add6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f042 0201 	orr.w	r2, r2, #1
 800ade6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	40012c00 	.word	0x40012c00
 800adf8:	40000400 	.word	0x40000400
 800adfc:	40000800 	.word	0x40000800
 800ae00:	40000c00 	.word	0x40000c00
 800ae04:	40013400 	.word	0x40013400
 800ae08:	0800f4e4 	.word	0x0800f4e4

0800ae0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d020      	beq.n	800ae70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01b      	beq.n	800ae70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f06f 0202 	mvn.w	r2, #2
 800ae40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2201      	movs	r2, #1
 800ae46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	f003 0303 	and.w	r3, r3, #3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 ff06 	bl	800bc68 <HAL_TIM_IC_CaptureCallback>
 800ae5c:	e005      	b.n	800ae6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fef8 	bl	800bc54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 ff09 	bl	800bc7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	f003 0304 	and.w	r3, r3, #4
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d020      	beq.n	800aebc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d01b      	beq.n	800aebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f06f 0204 	mvn.w	r2, #4
 800ae8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2202      	movs	r2, #2
 800ae92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fee0 	bl	800bc68 <HAL_TIM_IC_CaptureCallback>
 800aea8:	e005      	b.n	800aeb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fed2 	bl	800bc54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fee3 	bl	800bc7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	f003 0308 	and.w	r3, r3, #8
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d020      	beq.n	800af08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f003 0308 	and.w	r3, r3, #8
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01b      	beq.n	800af08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f06f 0208 	mvn.w	r2, #8
 800aed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2204      	movs	r2, #4
 800aede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	f003 0303 	and.w	r3, r3, #3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 feba 	bl	800bc68 <HAL_TIM_IC_CaptureCallback>
 800aef4:	e005      	b.n	800af02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 feac 	bl	800bc54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 febd 	bl	800bc7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f003 0310 	and.w	r3, r3, #16
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d020      	beq.n	800af54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f003 0310 	and.w	r3, r3, #16
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01b      	beq.n	800af54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f06f 0210 	mvn.w	r2, #16
 800af24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2208      	movs	r2, #8
 800af2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fe94 	bl	800bc68 <HAL_TIM_IC_CaptureCallback>
 800af40:	e005      	b.n	800af4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fe86 	bl	800bc54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fe97 	bl	800bc7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00c      	beq.n	800af78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f06f 0201 	mvn.w	r2, #1
 800af70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7f8 fd38 	bl	80039e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d104      	bne.n	800af8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00c      	beq.n	800afa6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af92:	2b00      	cmp	r3, #0
 800af94:	d007      	beq.n	800afa6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800af9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 fe2f 	bl	800cc04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00c      	beq.n	800afca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d007      	beq.n	800afca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800afc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 fe27 	bl	800cc18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00c      	beq.n	800afee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d007      	beq.n	800afee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800afe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fe51 	bl	800bc90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	f003 0320 	and.w	r3, r3, #32
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00c      	beq.n	800b012 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f003 0320 	and.w	r3, r3, #32
 800affe:	2b00      	cmp	r3, #0
 800b000:	d007      	beq.n	800b012 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f06f 0220 	mvn.w	r2, #32
 800b00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 fdef 	bl	800cbf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b012:	bf00      	nop
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
	...

0800b01c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d016      	beq.n	800b060 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b04      	cmp	r3, #4
 800b036:	d013      	beq.n	800b060 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b08      	cmp	r3, #8
 800b03c:	d010      	beq.n	800b060 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b0c      	cmp	r3, #12
 800b042:	d00d      	beq.n	800b060 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b10      	cmp	r3, #16
 800b048:	d00a      	beq.n	800b060 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b14      	cmp	r3, #20
 800b04e:	d007      	beq.n	800b060 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b3c      	cmp	r3, #60	@ 0x3c
 800b054:	d004      	beq.n	800b060 <HAL_TIM_PWM_ConfigChannel+0x44>
 800b056:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800b05a:	488b      	ldr	r0, [pc, #556]	@ (800b288 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b05c:	f7f9 fc46 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b60      	cmp	r3, #96	@ 0x60
 800b066:	d01c      	beq.n	800b0a2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b70      	cmp	r3, #112	@ 0x70
 800b06e:	d018      	beq.n	800b0a2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a85      	ldr	r2, [pc, #532]	@ (800b28c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d013      	beq.n	800b0a2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a84      	ldr	r2, [pc, #528]	@ (800b290 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d00e      	beq.n	800b0a2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a82      	ldr	r2, [pc, #520]	@ (800b294 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d009      	beq.n	800b0a2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a81      	ldr	r2, [pc, #516]	@ (800b298 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d004      	beq.n	800b0a2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800b098:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800b09c:	487a      	ldr	r0, [pc, #488]	@ (800b288 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b09e:	f7f9 fc25 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d008      	beq.n	800b0bc <HAL_TIM_PWM_ConfigChannel+0xa0>
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d004      	beq.n	800b0bc <HAL_TIM_PWM_ConfigChannel+0xa0>
 800b0b2:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800b0b6:	4874      	ldr	r0, [pc, #464]	@ (800b288 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b0b8:	f7f9 fc18 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d008      	beq.n	800b0d6 <HAL_TIM_PWM_ConfigChannel+0xba>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d004      	beq.n	800b0d6 <HAL_TIM_PWM_ConfigChannel+0xba>
 800b0cc:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800b0d0:	486d      	ldr	r0, [pc, #436]	@ (800b288 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b0d2:	f7f9 fc0b 	bl	80048ec <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d101      	bne.n	800b0e4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	e1d9      	b.n	800b498 <HAL_TIM_PWM_ConfigChannel+0x47c>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b14      	cmp	r3, #20
 800b0f0:	f200 81ca 	bhi.w	800b488 <HAL_TIM_PWM_ConfigChannel+0x46c>
 800b0f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800b0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fa:	bf00      	nop
 800b0fc:	0800b151 	.word	0x0800b151
 800b100:	0800b489 	.word	0x0800b489
 800b104:	0800b489 	.word	0x0800b489
 800b108:	0800b489 	.word	0x0800b489
 800b10c:	0800b1f5 	.word	0x0800b1f5
 800b110:	0800b489 	.word	0x0800b489
 800b114:	0800b489 	.word	0x0800b489
 800b118:	0800b489 	.word	0x0800b489
 800b11c:	0800b2bd 	.word	0x0800b2bd
 800b120:	0800b489 	.word	0x0800b489
 800b124:	0800b489 	.word	0x0800b489
 800b128:	0800b489 	.word	0x0800b489
 800b12c:	0800b343 	.word	0x0800b343
 800b130:	0800b489 	.word	0x0800b489
 800b134:	0800b489 	.word	0x0800b489
 800b138:	0800b489 	.word	0x0800b489
 800b13c:	0800b3cb 	.word	0x0800b3cb
 800b140:	0800b489 	.word	0x0800b489
 800b144:	0800b489 	.word	0x0800b489
 800b148:	0800b489 	.word	0x0800b489
 800b14c:	0800b429 	.word	0x0800b429
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a51      	ldr	r2, [pc, #324]	@ (800b29c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d02c      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b162:	d027      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a4d      	ldr	r2, [pc, #308]	@ (800b2a0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d022      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a4c      	ldr	r2, [pc, #304]	@ (800b2a4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d01d      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a4a      	ldr	r2, [pc, #296]	@ (800b2a8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d018      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a49      	ldr	r2, [pc, #292]	@ (800b2ac <HAL_TIM_PWM_ConfigChannel+0x290>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d013      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a47      	ldr	r2, [pc, #284]	@ (800b2b0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d00e      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a46      	ldr	r2, [pc, #280]	@ (800b2b4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d009      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a44      	ldr	r2, [pc, #272]	@ (800b2b8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d004      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x198>
 800b1aa:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800b1ae:	4836      	ldr	r0, [pc, #216]	@ (800b288 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b1b0:	f7f9 fb9c 	bl	80048ec <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68b9      	ldr	r1, [r7, #8]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fe18 	bl	800bdf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	699a      	ldr	r2, [r3, #24]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f042 0208 	orr.w	r2, r2, #8
 800b1ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699a      	ldr	r2, [r3, #24]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 0204 	bic.w	r2, r2, #4
 800b1de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	6999      	ldr	r1, [r3, #24]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	691a      	ldr	r2, [r3, #16]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	619a      	str	r2, [r3, #24]
      break;
 800b1f2:	e14c      	b.n	800b48e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a28      	ldr	r2, [pc, #160]	@ (800b29c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d022      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x228>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b206:	d01d      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x228>
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a24      	ldr	r2, [pc, #144]	@ (800b2a0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d018      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x228>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a23      	ldr	r2, [pc, #140]	@ (800b2a4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d013      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x228>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a21      	ldr	r2, [pc, #132]	@ (800b2a8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d00e      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x228>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a20      	ldr	r2, [pc, #128]	@ (800b2ac <HAL_TIM_PWM_ConfigChannel+0x290>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d009      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x228>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a1e      	ldr	r2, [pc, #120]	@ (800b2b0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d004      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x228>
 800b23a:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800b23e:	4812      	ldr	r0, [pc, #72]	@ (800b288 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800b240:	f7f9 fb54 	bl	80048ec <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fe8a 	bl	800bf64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b25e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	699a      	ldr	r2, [r3, #24]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b26e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6999      	ldr	r1, [r3, #24]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	021a      	lsls	r2, r3, #8
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	430a      	orrs	r2, r1
 800b282:	619a      	str	r2, [r3, #24]
      break;
 800b284:	e103      	b.n	800b48e <HAL_TIM_PWM_ConfigChannel+0x472>
 800b286:	bf00      	nop
 800b288:	0800f4e4 	.word	0x0800f4e4
 800b28c:	00010040 	.word	0x00010040
 800b290:	00010050 	.word	0x00010050
 800b294:	00010060 	.word	0x00010060
 800b298:	00010070 	.word	0x00010070
 800b29c:	40012c00 	.word	0x40012c00
 800b2a0:	40000400 	.word	0x40000400
 800b2a4:	40000800 	.word	0x40000800
 800b2a8:	40000c00 	.word	0x40000c00
 800b2ac:	40013400 	.word	0x40013400
 800b2b0:	40014000 	.word	0x40014000
 800b2b4:	40014400 	.word	0x40014400
 800b2b8:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a77      	ldr	r2, [pc, #476]	@ (800b4a0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d01d      	beq.n	800b302 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ce:	d018      	beq.n	800b302 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a73      	ldr	r2, [pc, #460]	@ (800b4a4 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d013      	beq.n	800b302 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a72      	ldr	r2, [pc, #456]	@ (800b4a8 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d00e      	beq.n	800b302 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a70      	ldr	r2, [pc, #448]	@ (800b4ac <HAL_TIM_PWM_ConfigChannel+0x490>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d009      	beq.n	800b302 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a6f      	ldr	r2, [pc, #444]	@ (800b4b0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d004      	beq.n	800b302 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800b2f8:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800b2fc:	486d      	ldr	r0, [pc, #436]	@ (800b4b4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800b2fe:	f7f9 faf5 	bl	80048ec <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	4618      	mov	r0, r3
 800b30a:	f000 fedd 	bl	800c0c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	69da      	ldr	r2, [r3, #28]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f042 0208 	orr.w	r2, r2, #8
 800b31c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	69da      	ldr	r2, [r3, #28]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 0204 	bic.w	r2, r2, #4
 800b32c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	69d9      	ldr	r1, [r3, #28]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	691a      	ldr	r2, [r3, #16]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	61da      	str	r2, [r3, #28]
      break;
 800b340:	e0a5      	b.n	800b48e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a56      	ldr	r2, [pc, #344]	@ (800b4a0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d01d      	beq.n	800b388 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b354:	d018      	beq.n	800b388 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a52      	ldr	r2, [pc, #328]	@ (800b4a4 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d013      	beq.n	800b388 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a50      	ldr	r2, [pc, #320]	@ (800b4a8 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00e      	beq.n	800b388 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a4f      	ldr	r2, [pc, #316]	@ (800b4ac <HAL_TIM_PWM_ConfigChannel+0x490>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d009      	beq.n	800b388 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a4d      	ldr	r2, [pc, #308]	@ (800b4b0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d004      	beq.n	800b388 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800b37e:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800b382:	484c      	ldr	r0, [pc, #304]	@ (800b4b4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800b384:	f7f9 fab2 	bl	80048ec <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 ff4c 	bl	800c22c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	69da      	ldr	r2, [r3, #28]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b3a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	69da      	ldr	r2, [r3, #28]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	69d9      	ldr	r1, [r3, #28]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	021a      	lsls	r2, r3, #8
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	430a      	orrs	r2, r1
 800b3c6:	61da      	str	r2, [r3, #28]
      break;
 800b3c8:	e061      	b.n	800b48e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a34      	ldr	r2, [pc, #208]	@ (800b4a0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d009      	beq.n	800b3e8 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a35      	ldr	r2, [pc, #212]	@ (800b4b0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d004      	beq.n	800b3e8 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800b3de:	f241 1104 	movw	r1, #4356	@ 0x1104
 800b3e2:	4834      	ldr	r0, [pc, #208]	@ (800b4b4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800b3e4:	f7f9 fa82 	bl	80048ec <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 ff94 	bl	800c31c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f042 0208 	orr.w	r2, r2, #8
 800b402:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0204 	bic.w	r2, r2, #4
 800b412:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	691a      	ldr	r2, [r3, #16]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	430a      	orrs	r2, r1
 800b424:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b426:	e032      	b.n	800b48e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a1c      	ldr	r2, [pc, #112]	@ (800b4a0 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d009      	beq.n	800b446 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a1e      	ldr	r2, [pc, #120]	@ (800b4b0 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d004      	beq.n	800b446 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800b43c:	f241 1115 	movw	r1, #4373	@ 0x1115
 800b440:	481c      	ldr	r0, [pc, #112]	@ (800b4b4 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800b442:	f7f9 fa53 	bl	80048ec <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 ffc9 	bl	800c3e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b460:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b470:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	021a      	lsls	r2, r3, #8
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b486:	e002      	b.n	800b48e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	75fb      	strb	r3, [r7, #23]
      break;
 800b48c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b496:	7dfb      	ldrb	r3, [r7, #23]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	40012c00 	.word	0x40012c00
 800b4a4:	40000400 	.word	0x40000400
 800b4a8:	40000800 	.word	0x40000800
 800b4ac:	40000c00 	.word	0x40000c00
 800b4b0:	40013400 	.word	0x40013400
 800b4b4:	0800f4e4 	.word	0x0800f4e4

0800b4b8 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a33      	ldr	r2, [pc, #204]	@ (800b594 <HAL_TIM_GenerateEvent+0xdc>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d036      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4d4:	d031      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a2f      	ldr	r2, [pc, #188]	@ (800b598 <HAL_TIM_GenerateEvent+0xe0>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d02c      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a2d      	ldr	r2, [pc, #180]	@ (800b59c <HAL_TIM_GenerateEvent+0xe4>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d027      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a2c      	ldr	r2, [pc, #176]	@ (800b5a0 <HAL_TIM_GenerateEvent+0xe8>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d022      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a2a      	ldr	r2, [pc, #168]	@ (800b5a4 <HAL_TIM_GenerateEvent+0xec>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d01d      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a29      	ldr	r2, [pc, #164]	@ (800b5a8 <HAL_TIM_GenerateEvent+0xf0>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d018      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a27      	ldr	r2, [pc, #156]	@ (800b5ac <HAL_TIM_GenerateEvent+0xf4>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d013      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a26      	ldr	r2, [pc, #152]	@ (800b5b0 <HAL_TIM_GenerateEvent+0xf8>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d00e      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a24      	ldr	r2, [pc, #144]	@ (800b5b4 <HAL_TIM_GenerateEvent+0xfc>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d009      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a23      	ldr	r2, [pc, #140]	@ (800b5b8 <HAL_TIM_GenerateEvent+0x100>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d004      	beq.n	800b53a <HAL_TIM_GenerateEvent+0x82>
 800b530:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800b534:	4821      	ldr	r0, [pc, #132]	@ (800b5bc <HAL_TIM_GenerateEvent+0x104>)
 800b536:	f7f9 f9d9 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b540:	d202      	bcs.n	800b548 <HAL_TIM_GenerateEvent+0x90>
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d104      	bne.n	800b552 <HAL_TIM_GenerateEvent+0x9a>
 800b548:	f241 4181 	movw	r1, #5249	@ 0x1481
 800b54c:	481b      	ldr	r0, [pc, #108]	@ (800b5bc <HAL_TIM_GenerateEvent+0x104>)
 800b54e:	f7f9 f9cd 	bl	80048ec <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d101      	bne.n	800b560 <HAL_TIM_GenerateEvent+0xa8>
 800b55c:	2302      	movs	r3, #2
 800b55e:	e014      	b.n	800b58a <HAL_TIM_GenerateEvent+0xd2>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	40012c00 	.word	0x40012c00
 800b598:	40000400 	.word	0x40000400
 800b59c:	40000800 	.word	0x40000800
 800b5a0:	40000c00 	.word	0x40000c00
 800b5a4:	40001000 	.word	0x40001000
 800b5a8:	40001400 	.word	0x40001400
 800b5ac:	40013400 	.word	0x40013400
 800b5b0:	40014000 	.word	0x40014000
 800b5b4:	40014400 	.word	0x40014400
 800b5b8:	40014800 	.word	0x40014800
 800b5bc:	0800f4e4 	.word	0x0800f4e4

0800b5c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d101      	bne.n	800b5dc <HAL_TIM_ConfigClockSource+0x1c>
 800b5d8:	2302      	movs	r3, #2
 800b5da:	e329      	b.n	800bc30 <HAL_TIM_ConfigClockSource+0x670>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5f4:	d029      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b70      	cmp	r3, #112	@ 0x70
 800b5fc:	d025      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b606:	d020      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b40      	cmp	r3, #64	@ 0x40
 800b60e:	d01c      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b50      	cmp	r3, #80	@ 0x50
 800b616:	d018      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b60      	cmp	r3, #96	@ 0x60
 800b61e:	d014      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d010      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b10      	cmp	r3, #16
 800b62e:	d00c      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b20      	cmp	r3, #32
 800b636:	d008      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b30      	cmp	r3, #48	@ 0x30
 800b63e:	d004      	beq.n	800b64a <HAL_TIM_ConfigClockSource+0x8a>
 800b640:	f241 5156 	movw	r1, #5462	@ 0x1556
 800b644:	4888      	ldr	r0, [pc, #544]	@ (800b868 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b646:	f7f9 f951 	bl	80048ec <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b658:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b65c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b664:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b676:	f000 810d 	beq.w	800b894 <HAL_TIM_ConfigClockSource+0x2d4>
 800b67a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b67e:	f200 82ca 	bhi.w	800bc16 <HAL_TIM_ConfigClockSource+0x656>
 800b682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b686:	d02d      	beq.n	800b6e4 <HAL_TIM_ConfigClockSource+0x124>
 800b688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b68c:	f200 82c3 	bhi.w	800bc16 <HAL_TIM_ConfigClockSource+0x656>
 800b690:	2b70      	cmp	r3, #112	@ 0x70
 800b692:	d06f      	beq.n	800b774 <HAL_TIM_ConfigClockSource+0x1b4>
 800b694:	2b70      	cmp	r3, #112	@ 0x70
 800b696:	f200 82be 	bhi.w	800bc16 <HAL_TIM_ConfigClockSource+0x656>
 800b69a:	2b60      	cmp	r3, #96	@ 0x60
 800b69c:	f000 81d4 	beq.w	800ba48 <HAL_TIM_ConfigClockSource+0x488>
 800b6a0:	2b60      	cmp	r3, #96	@ 0x60
 800b6a2:	f200 82b8 	bhi.w	800bc16 <HAL_TIM_ConfigClockSource+0x656>
 800b6a6:	2b50      	cmp	r3, #80	@ 0x50
 800b6a8:	f000 8165 	beq.w	800b976 <HAL_TIM_ConfigClockSource+0x3b6>
 800b6ac:	2b50      	cmp	r3, #80	@ 0x50
 800b6ae:	f200 82b2 	bhi.w	800bc16 <HAL_TIM_ConfigClockSource+0x656>
 800b6b2:	2b40      	cmp	r3, #64	@ 0x40
 800b6b4:	f000 8223 	beq.w	800bafe <HAL_TIM_ConfigClockSource+0x53e>
 800b6b8:	2b40      	cmp	r3, #64	@ 0x40
 800b6ba:	f200 82ac 	bhi.w	800bc16 <HAL_TIM_ConfigClockSource+0x656>
 800b6be:	2b30      	cmp	r3, #48	@ 0x30
 800b6c0:	f000 8278 	beq.w	800bbb4 <HAL_TIM_ConfigClockSource+0x5f4>
 800b6c4:	2b30      	cmp	r3, #48	@ 0x30
 800b6c6:	f200 82a6 	bhi.w	800bc16 <HAL_TIM_ConfigClockSource+0x656>
 800b6ca:	2b20      	cmp	r3, #32
 800b6cc:	f000 8272 	beq.w	800bbb4 <HAL_TIM_ConfigClockSource+0x5f4>
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	f200 82a0 	bhi.w	800bc16 <HAL_TIM_ConfigClockSource+0x656>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f000 826c 	beq.w	800bbb4 <HAL_TIM_ConfigClockSource+0x5f4>
 800b6dc:	2b10      	cmp	r3, #16
 800b6de:	f000 8269 	beq.w	800bbb4 <HAL_TIM_ConfigClockSource+0x5f4>
 800b6e2:	e298      	b.n	800bc16 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a60      	ldr	r2, [pc, #384]	@ (800b86c <HAL_TIM_ConfigClockSource+0x2ac>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	f000 8296 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6f8:	f000 8290 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a5b      	ldr	r2, [pc, #364]	@ (800b870 <HAL_TIM_ConfigClockSource+0x2b0>)
 800b702:	4293      	cmp	r3, r2
 800b704:	f000 828a 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a59      	ldr	r2, [pc, #356]	@ (800b874 <HAL_TIM_ConfigClockSource+0x2b4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	f000 8284 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a57      	ldr	r2, [pc, #348]	@ (800b878 <HAL_TIM_ConfigClockSource+0x2b8>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	f000 827e 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a55      	ldr	r2, [pc, #340]	@ (800b87c <HAL_TIM_ConfigClockSource+0x2bc>)
 800b726:	4293      	cmp	r3, r2
 800b728:	f000 8278 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a53      	ldr	r2, [pc, #332]	@ (800b880 <HAL_TIM_ConfigClockSource+0x2c0>)
 800b732:	4293      	cmp	r3, r2
 800b734:	f000 8272 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a51      	ldr	r2, [pc, #324]	@ (800b884 <HAL_TIM_ConfigClockSource+0x2c4>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	f000 826c 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a4f      	ldr	r2, [pc, #316]	@ (800b888 <HAL_TIM_ConfigClockSource+0x2c8>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	f000 8266 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a4d      	ldr	r2, [pc, #308]	@ (800b88c <HAL_TIM_ConfigClockSource+0x2cc>)
 800b756:	4293      	cmp	r3, r2
 800b758:	f000 8260 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a4b      	ldr	r2, [pc, #300]	@ (800b890 <HAL_TIM_ConfigClockSource+0x2d0>)
 800b762:	4293      	cmp	r3, r2
 800b764:	f000 825a 	beq.w	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
 800b768:	f241 5162 	movw	r1, #5474	@ 0x1562
 800b76c:	483e      	ldr	r0, [pc, #248]	@ (800b868 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b76e:	f7f9 f8bd 	bl	80048ec <assert_failed>
      break;
 800b772:	e253      	b.n	800bc1c <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a3c      	ldr	r2, [pc, #240]	@ (800b86c <HAL_TIM_ConfigClockSource+0x2ac>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d022      	beq.n	800b7c4 <HAL_TIM_ConfigClockSource+0x204>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b786:	d01d      	beq.n	800b7c4 <HAL_TIM_ConfigClockSource+0x204>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a38      	ldr	r2, [pc, #224]	@ (800b870 <HAL_TIM_ConfigClockSource+0x2b0>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d018      	beq.n	800b7c4 <HAL_TIM_ConfigClockSource+0x204>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a37      	ldr	r2, [pc, #220]	@ (800b874 <HAL_TIM_ConfigClockSource+0x2b4>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d013      	beq.n	800b7c4 <HAL_TIM_ConfigClockSource+0x204>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a35      	ldr	r2, [pc, #212]	@ (800b878 <HAL_TIM_ConfigClockSource+0x2b8>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d00e      	beq.n	800b7c4 <HAL_TIM_ConfigClockSource+0x204>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a36      	ldr	r2, [pc, #216]	@ (800b884 <HAL_TIM_ConfigClockSource+0x2c4>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d009      	beq.n	800b7c4 <HAL_TIM_ConfigClockSource+0x204>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a34      	ldr	r2, [pc, #208]	@ (800b888 <HAL_TIM_ConfigClockSource+0x2c8>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d004      	beq.n	800b7c4 <HAL_TIM_ConfigClockSource+0x204>
 800b7ba:	f241 5169 	movw	r1, #5481	@ 0x1569
 800b7be:	482a      	ldr	r0, [pc, #168]	@ (800b868 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b7c0:	f7f9 f894 	bl	80048ec <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d013      	beq.n	800b7f4 <HAL_TIM_ConfigClockSource+0x234>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7d4:	d00e      	beq.n	800b7f4 <HAL_TIM_ConfigClockSource+0x234>
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7de:	d009      	beq.n	800b7f4 <HAL_TIM_ConfigClockSource+0x234>
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b7e8:	d004      	beq.n	800b7f4 <HAL_TIM_ConfigClockSource+0x234>
 800b7ea:	f241 516c 	movw	r1, #5484	@ 0x156c
 800b7ee:	481e      	ldr	r0, [pc, #120]	@ (800b868 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b7f0:	f7f9 f87c 	bl	80048ec <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7fc:	d014      	beq.n	800b828 <HAL_TIM_ConfigClockSource+0x268>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d010      	beq.n	800b828 <HAL_TIM_ConfigClockSource+0x268>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00c      	beq.n	800b828 <HAL_TIM_ConfigClockSource+0x268>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d008      	beq.n	800b828 <HAL_TIM_ConfigClockSource+0x268>
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2b0a      	cmp	r3, #10
 800b81c:	d004      	beq.n	800b828 <HAL_TIM_ConfigClockSource+0x268>
 800b81e:	f241 516d 	movw	r1, #5485	@ 0x156d
 800b822:	4811      	ldr	r0, [pc, #68]	@ (800b868 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b824:	f7f9 f862 	bl	80048ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	2b0f      	cmp	r3, #15
 800b82e:	d904      	bls.n	800b83a <HAL_TIM_ConfigClockSource+0x27a>
 800b830:	f241 516e 	movw	r1, #5486	@ 0x156e
 800b834:	480c      	ldr	r0, [pc, #48]	@ (800b868 <HAL_TIM_ConfigClockSource+0x2a8>)
 800b836:	f7f9 f859 	bl	80048ec <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b84a:	f000 feab 	bl	800c5a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b85c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	609a      	str	r2, [r3, #8]
      break;
 800b866:	e1da      	b.n	800bc1e <HAL_TIM_ConfigClockSource+0x65e>
 800b868:	0800f4e4 	.word	0x0800f4e4
 800b86c:	40012c00 	.word	0x40012c00
 800b870:	40000400 	.word	0x40000400
 800b874:	40000800 	.word	0x40000800
 800b878:	40000c00 	.word	0x40000c00
 800b87c:	40001000 	.word	0x40001000
 800b880:	40001400 	.word	0x40001400
 800b884:	40013400 	.word	0x40013400
 800b888:	40014000 	.word	0x40014000
 800b88c:	40014400 	.word	0x40014400
 800b890:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a64      	ldr	r2, [pc, #400]	@ (800ba2c <HAL_TIM_ConfigClockSource+0x46c>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d01d      	beq.n	800b8da <HAL_TIM_ConfigClockSource+0x31a>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8a6:	d018      	beq.n	800b8da <HAL_TIM_ConfigClockSource+0x31a>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a60      	ldr	r2, [pc, #384]	@ (800ba30 <HAL_TIM_ConfigClockSource+0x470>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d013      	beq.n	800b8da <HAL_TIM_ConfigClockSource+0x31a>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a5f      	ldr	r2, [pc, #380]	@ (800ba34 <HAL_TIM_ConfigClockSource+0x474>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d00e      	beq.n	800b8da <HAL_TIM_ConfigClockSource+0x31a>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a5d      	ldr	r2, [pc, #372]	@ (800ba38 <HAL_TIM_ConfigClockSource+0x478>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d009      	beq.n	800b8da <HAL_TIM_ConfigClockSource+0x31a>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a5c      	ldr	r2, [pc, #368]	@ (800ba3c <HAL_TIM_ConfigClockSource+0x47c>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d004      	beq.n	800b8da <HAL_TIM_ConfigClockSource+0x31a>
 800b8d0:	f241 5181 	movw	r1, #5505	@ 0x1581
 800b8d4:	485a      	ldr	r0, [pc, #360]	@ (800ba40 <HAL_TIM_ConfigClockSource+0x480>)
 800b8d6:	f7f9 f809 	bl	80048ec <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d013      	beq.n	800b90a <HAL_TIM_ConfigClockSource+0x34a>
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8ea:	d00e      	beq.n	800b90a <HAL_TIM_ConfigClockSource+0x34a>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8f4:	d009      	beq.n	800b90a <HAL_TIM_ConfigClockSource+0x34a>
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b8fe:	d004      	beq.n	800b90a <HAL_TIM_ConfigClockSource+0x34a>
 800b900:	f241 5184 	movw	r1, #5508	@ 0x1584
 800b904:	484e      	ldr	r0, [pc, #312]	@ (800ba40 <HAL_TIM_ConfigClockSource+0x480>)
 800b906:	f7f8 fff1 	bl	80048ec <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b912:	d014      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x37e>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d010      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x37e>
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00c      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x37e>
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d008      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x37e>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	2b0a      	cmp	r3, #10
 800b932:	d004      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x37e>
 800b934:	f241 5185 	movw	r1, #5509	@ 0x1585
 800b938:	4841      	ldr	r0, [pc, #260]	@ (800ba40 <HAL_TIM_ConfigClockSource+0x480>)
 800b93a:	f7f8 ffd7 	bl	80048ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	2b0f      	cmp	r3, #15
 800b944:	d904      	bls.n	800b950 <HAL_TIM_ConfigClockSource+0x390>
 800b946:	f241 5186 	movw	r1, #5510	@ 0x1586
 800b94a:	483d      	ldr	r0, [pc, #244]	@ (800ba40 <HAL_TIM_ConfigClockSource+0x480>)
 800b94c:	f7f8 ffce 	bl	80048ec <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b960:	f000 fe20 	bl	800c5a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689a      	ldr	r2, [r3, #8]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b972:	609a      	str	r2, [r3, #8]
      break;
 800b974:	e153      	b.n	800bc1e <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a2c      	ldr	r2, [pc, #176]	@ (800ba2c <HAL_TIM_ConfigClockSource+0x46c>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d022      	beq.n	800b9c6 <HAL_TIM_ConfigClockSource+0x406>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b988:	d01d      	beq.n	800b9c6 <HAL_TIM_ConfigClockSource+0x406>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a28      	ldr	r2, [pc, #160]	@ (800ba30 <HAL_TIM_ConfigClockSource+0x470>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d018      	beq.n	800b9c6 <HAL_TIM_ConfigClockSource+0x406>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a26      	ldr	r2, [pc, #152]	@ (800ba34 <HAL_TIM_ConfigClockSource+0x474>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d013      	beq.n	800b9c6 <HAL_TIM_ConfigClockSource+0x406>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a25      	ldr	r2, [pc, #148]	@ (800ba38 <HAL_TIM_ConfigClockSource+0x478>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d00e      	beq.n	800b9c6 <HAL_TIM_ConfigClockSource+0x406>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a23      	ldr	r2, [pc, #140]	@ (800ba3c <HAL_TIM_ConfigClockSource+0x47c>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d009      	beq.n	800b9c6 <HAL_TIM_ConfigClockSource+0x406>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a23      	ldr	r2, [pc, #140]	@ (800ba44 <HAL_TIM_ConfigClockSource+0x484>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d004      	beq.n	800b9c6 <HAL_TIM_ConfigClockSource+0x406>
 800b9bc:	f241 5195 	movw	r1, #5525	@ 0x1595
 800b9c0:	481f      	ldr	r0, [pc, #124]	@ (800ba40 <HAL_TIM_ConfigClockSource+0x480>)
 800b9c2:	f7f8 ff93 	bl	80048ec <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9ce:	d014      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x43a>
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d010      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x43a>
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00c      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x43a>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d008      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x43a>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	2b0a      	cmp	r3, #10
 800b9ee:	d004      	beq.n	800b9fa <HAL_TIM_ConfigClockSource+0x43a>
 800b9f0:	f241 5198 	movw	r1, #5528	@ 0x1598
 800b9f4:	4812      	ldr	r0, [pc, #72]	@ (800ba40 <HAL_TIM_ConfigClockSource+0x480>)
 800b9f6:	f7f8 ff79 	bl	80048ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	2b0f      	cmp	r3, #15
 800ba00:	d904      	bls.n	800ba0c <HAL_TIM_ConfigClockSource+0x44c>
 800ba02:	f241 5199 	movw	r1, #5529	@ 0x1599
 800ba06:	480e      	ldr	r0, [pc, #56]	@ (800ba40 <HAL_TIM_ConfigClockSource+0x480>)
 800ba08:	f7f8 ff70 	bl	80048ec <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f000 fd49 	bl	800c4b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2150      	movs	r1, #80	@ 0x50
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fda2 	bl	800c56e <TIM_ITRx_SetConfig>
      break;
 800ba2a:	e0f8      	b.n	800bc1e <HAL_TIM_ConfigClockSource+0x65e>
 800ba2c:	40012c00 	.word	0x40012c00
 800ba30:	40000400 	.word	0x40000400
 800ba34:	40000800 	.word	0x40000800
 800ba38:	40000c00 	.word	0x40000c00
 800ba3c:	40013400 	.word	0x40013400
 800ba40:	0800f4e4 	.word	0x0800f4e4
 800ba44:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a7a      	ldr	r2, [pc, #488]	@ (800bc38 <HAL_TIM_ConfigClockSource+0x678>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d022      	beq.n	800ba98 <HAL_TIM_ConfigClockSource+0x4d8>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba5a:	d01d      	beq.n	800ba98 <HAL_TIM_ConfigClockSource+0x4d8>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a76      	ldr	r2, [pc, #472]	@ (800bc3c <HAL_TIM_ConfigClockSource+0x67c>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d018      	beq.n	800ba98 <HAL_TIM_ConfigClockSource+0x4d8>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a75      	ldr	r2, [pc, #468]	@ (800bc40 <HAL_TIM_ConfigClockSource+0x680>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d013      	beq.n	800ba98 <HAL_TIM_ConfigClockSource+0x4d8>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a73      	ldr	r2, [pc, #460]	@ (800bc44 <HAL_TIM_ConfigClockSource+0x684>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d00e      	beq.n	800ba98 <HAL_TIM_ConfigClockSource+0x4d8>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a72      	ldr	r2, [pc, #456]	@ (800bc48 <HAL_TIM_ConfigClockSource+0x688>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d009      	beq.n	800ba98 <HAL_TIM_ConfigClockSource+0x4d8>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a70      	ldr	r2, [pc, #448]	@ (800bc4c <HAL_TIM_ConfigClockSource+0x68c>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d004      	beq.n	800ba98 <HAL_TIM_ConfigClockSource+0x4d8>
 800ba8e:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800ba92:	486f      	ldr	r0, [pc, #444]	@ (800bc50 <HAL_TIM_ConfigClockSource+0x690>)
 800ba94:	f7f8 ff2a 	bl	80048ec <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800baa0:	d014      	beq.n	800bacc <HAL_TIM_ConfigClockSource+0x50c>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d010      	beq.n	800bacc <HAL_TIM_ConfigClockSource+0x50c>
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00c      	beq.n	800bacc <HAL_TIM_ConfigClockSource+0x50c>
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d008      	beq.n	800bacc <HAL_TIM_ConfigClockSource+0x50c>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	2b0a      	cmp	r3, #10
 800bac0:	d004      	beq.n	800bacc <HAL_TIM_ConfigClockSource+0x50c>
 800bac2:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800bac6:	4862      	ldr	r0, [pc, #392]	@ (800bc50 <HAL_TIM_ConfigClockSource+0x690>)
 800bac8:	f7f8 ff10 	bl	80048ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	2b0f      	cmp	r3, #15
 800bad2:	d904      	bls.n	800bade <HAL_TIM_ConfigClockSource+0x51e>
 800bad4:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800bad8:	485d      	ldr	r0, [pc, #372]	@ (800bc50 <HAL_TIM_ConfigClockSource+0x690>)
 800bada:	f7f8 ff07 	bl	80048ec <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800baea:	461a      	mov	r2, r3
 800baec:	f000 fd0f 	bl	800c50e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2160      	movs	r1, #96	@ 0x60
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 fd39 	bl	800c56e <TIM_ITRx_SetConfig>
      break;
 800bafc:	e08f      	b.n	800bc1e <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a4d      	ldr	r2, [pc, #308]	@ (800bc38 <HAL_TIM_ConfigClockSource+0x678>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d022      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x58e>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb10:	d01d      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x58e>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a49      	ldr	r2, [pc, #292]	@ (800bc3c <HAL_TIM_ConfigClockSource+0x67c>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d018      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x58e>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a47      	ldr	r2, [pc, #284]	@ (800bc40 <HAL_TIM_ConfigClockSource+0x680>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d013      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x58e>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a46      	ldr	r2, [pc, #280]	@ (800bc44 <HAL_TIM_ConfigClockSource+0x684>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d00e      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x58e>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a44      	ldr	r2, [pc, #272]	@ (800bc48 <HAL_TIM_ConfigClockSource+0x688>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d009      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x58e>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a43      	ldr	r2, [pc, #268]	@ (800bc4c <HAL_TIM_ConfigClockSource+0x68c>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d004      	beq.n	800bb4e <HAL_TIM_ConfigClockSource+0x58e>
 800bb44:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800bb48:	4841      	ldr	r0, [pc, #260]	@ (800bc50 <HAL_TIM_ConfigClockSource+0x690>)
 800bb4a:	f7f8 fecf 	bl	80048ec <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb56:	d014      	beq.n	800bb82 <HAL_TIM_ConfigClockSource+0x5c2>
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d010      	beq.n	800bb82 <HAL_TIM_ConfigClockSource+0x5c2>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00c      	beq.n	800bb82 <HAL_TIM_ConfigClockSource+0x5c2>
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d008      	beq.n	800bb82 <HAL_TIM_ConfigClockSource+0x5c2>
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	2b0a      	cmp	r3, #10
 800bb76:	d004      	beq.n	800bb82 <HAL_TIM_ConfigClockSource+0x5c2>
 800bb78:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 800bb7c:	4834      	ldr	r0, [pc, #208]	@ (800bc50 <HAL_TIM_ConfigClockSource+0x690>)
 800bb7e:	f7f8 feb5 	bl	80048ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	2b0f      	cmp	r3, #15
 800bb88:	d904      	bls.n	800bb94 <HAL_TIM_ConfigClockSource+0x5d4>
 800bb8a:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800bb8e:	4830      	ldr	r0, [pc, #192]	@ (800bc50 <HAL_TIM_ConfigClockSource+0x690>)
 800bb90:	f7f8 feac 	bl	80048ec <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bba0:	461a      	mov	r2, r3
 800bba2:	f000 fc85 	bl	800c4b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2140      	movs	r1, #64	@ 0x40
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 fcde 	bl	800c56e <TIM_ITRx_SetConfig>
      break;
 800bbb2:	e034      	b.n	800bc1e <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a1f      	ldr	r2, [pc, #124]	@ (800bc38 <HAL_TIM_ConfigClockSource+0x678>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d022      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x644>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbc6:	d01d      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x644>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a1b      	ldr	r2, [pc, #108]	@ (800bc3c <HAL_TIM_ConfigClockSource+0x67c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d018      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x644>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a1a      	ldr	r2, [pc, #104]	@ (800bc40 <HAL_TIM_ConfigClockSource+0x680>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d013      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x644>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a18      	ldr	r2, [pc, #96]	@ (800bc44 <HAL_TIM_ConfigClockSource+0x684>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d00e      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x644>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a17      	ldr	r2, [pc, #92]	@ (800bc48 <HAL_TIM_ConfigClockSource+0x688>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d009      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x644>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a15      	ldr	r2, [pc, #84]	@ (800bc4c <HAL_TIM_ConfigClockSource+0x68c>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d004      	beq.n	800bc04 <HAL_TIM_ConfigClockSource+0x644>
 800bbfa:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 800bbfe:	4814      	ldr	r0, [pc, #80]	@ (800bc50 <HAL_TIM_ConfigClockSource+0x690>)
 800bc00:	f7f8 fe74 	bl	80048ec <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	4610      	mov	r0, r2
 800bc10:	f000 fcad 	bl	800c56e <TIM_ITRx_SetConfig>
      break;
 800bc14:	e003      	b.n	800bc1e <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	73fb      	strb	r3, [r7, #15]
      break;
 800bc1a:	e000      	b.n	800bc1e <HAL_TIM_ConfigClockSource+0x65e>
      break;
 800bc1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	40012c00 	.word	0x40012c00
 800bc3c:	40000400 	.word	0x40000400
 800bc40:	40000800 	.word	0x40000800
 800bc44:	40000c00 	.word	0x40000c00
 800bc48:	40013400 	.word	0x40013400
 800bc4c:	40014000 	.word	0x40014000
 800bc50:	0800f4e4 	.word	0x0800f4e4

0800bc54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a46      	ldr	r2, [pc, #280]	@ (800bdd0 <TIM_Base_SetConfig+0x12c>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d013      	beq.n	800bce4 <TIM_Base_SetConfig+0x40>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcc2:	d00f      	beq.n	800bce4 <TIM_Base_SetConfig+0x40>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a43      	ldr	r2, [pc, #268]	@ (800bdd4 <TIM_Base_SetConfig+0x130>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d00b      	beq.n	800bce4 <TIM_Base_SetConfig+0x40>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a42      	ldr	r2, [pc, #264]	@ (800bdd8 <TIM_Base_SetConfig+0x134>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d007      	beq.n	800bce4 <TIM_Base_SetConfig+0x40>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a41      	ldr	r2, [pc, #260]	@ (800bddc <TIM_Base_SetConfig+0x138>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d003      	beq.n	800bce4 <TIM_Base_SetConfig+0x40>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a40      	ldr	r2, [pc, #256]	@ (800bde0 <TIM_Base_SetConfig+0x13c>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d108      	bne.n	800bcf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a35      	ldr	r2, [pc, #212]	@ (800bdd0 <TIM_Base_SetConfig+0x12c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d01f      	beq.n	800bd3e <TIM_Base_SetConfig+0x9a>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd04:	d01b      	beq.n	800bd3e <TIM_Base_SetConfig+0x9a>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a32      	ldr	r2, [pc, #200]	@ (800bdd4 <TIM_Base_SetConfig+0x130>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d017      	beq.n	800bd3e <TIM_Base_SetConfig+0x9a>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a31      	ldr	r2, [pc, #196]	@ (800bdd8 <TIM_Base_SetConfig+0x134>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d013      	beq.n	800bd3e <TIM_Base_SetConfig+0x9a>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a30      	ldr	r2, [pc, #192]	@ (800bddc <TIM_Base_SetConfig+0x138>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d00f      	beq.n	800bd3e <TIM_Base_SetConfig+0x9a>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a2f      	ldr	r2, [pc, #188]	@ (800bde0 <TIM_Base_SetConfig+0x13c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d00b      	beq.n	800bd3e <TIM_Base_SetConfig+0x9a>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a2e      	ldr	r2, [pc, #184]	@ (800bde4 <TIM_Base_SetConfig+0x140>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d007      	beq.n	800bd3e <TIM_Base_SetConfig+0x9a>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a2d      	ldr	r2, [pc, #180]	@ (800bde8 <TIM_Base_SetConfig+0x144>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d003      	beq.n	800bd3e <TIM_Base_SetConfig+0x9a>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a2c      	ldr	r2, [pc, #176]	@ (800bdec <TIM_Base_SetConfig+0x148>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d108      	bne.n	800bd50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	695b      	ldr	r3, [r3, #20]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	689a      	ldr	r2, [r3, #8]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a16      	ldr	r2, [pc, #88]	@ (800bdd0 <TIM_Base_SetConfig+0x12c>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d00f      	beq.n	800bd9c <TIM_Base_SetConfig+0xf8>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a18      	ldr	r2, [pc, #96]	@ (800bde0 <TIM_Base_SetConfig+0x13c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d00b      	beq.n	800bd9c <TIM_Base_SetConfig+0xf8>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4a17      	ldr	r2, [pc, #92]	@ (800bde4 <TIM_Base_SetConfig+0x140>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d007      	beq.n	800bd9c <TIM_Base_SetConfig+0xf8>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a16      	ldr	r2, [pc, #88]	@ (800bde8 <TIM_Base_SetConfig+0x144>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d003      	beq.n	800bd9c <TIM_Base_SetConfig+0xf8>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a15      	ldr	r2, [pc, #84]	@ (800bdec <TIM_Base_SetConfig+0x148>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d103      	bne.n	800bda4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	691a      	ldr	r2, [r3, #16]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d105      	bne.n	800bdc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	f023 0201 	bic.w	r2, r3, #1
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	611a      	str	r2, [r3, #16]
  }
}
 800bdc2:	bf00      	nop
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	40012c00 	.word	0x40012c00
 800bdd4:	40000400 	.word	0x40000400
 800bdd8:	40000800 	.word	0x40000800
 800bddc:	40000c00 	.word	0x40000c00
 800bde0:	40013400 	.word	0x40013400
 800bde4:	40014000 	.word	0x40014000
 800bde8:	40014400 	.word	0x40014400
 800bdec:	40014800 	.word	0x40014800

0800bdf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a1b      	ldr	r3, [r3, #32]
 800be04:	f023 0201 	bic.w	r2, r3, #1
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f023 0303 	bic.w	r3, r3, #3
 800be2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	4313      	orrs	r3, r2
 800be34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f023 0302 	bic.w	r3, r3, #2
 800be3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	4313      	orrs	r3, r2
 800be46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a40      	ldr	r2, [pc, #256]	@ (800bf4c <TIM_OC1_SetConfig+0x15c>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d00f      	beq.n	800be70 <TIM_OC1_SetConfig+0x80>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a3f      	ldr	r2, [pc, #252]	@ (800bf50 <TIM_OC1_SetConfig+0x160>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d00b      	beq.n	800be70 <TIM_OC1_SetConfig+0x80>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a3e      	ldr	r2, [pc, #248]	@ (800bf54 <TIM_OC1_SetConfig+0x164>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d007      	beq.n	800be70 <TIM_OC1_SetConfig+0x80>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a3d      	ldr	r2, [pc, #244]	@ (800bf58 <TIM_OC1_SetConfig+0x168>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d003      	beq.n	800be70 <TIM_OC1_SetConfig+0x80>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a3c      	ldr	r2, [pc, #240]	@ (800bf5c <TIM_OC1_SetConfig+0x16c>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d119      	bne.n	800bea4 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d008      	beq.n	800be8a <TIM_OC1_SetConfig+0x9a>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	2b08      	cmp	r3, #8
 800be7e:	d004      	beq.n	800be8a <TIM_OC1_SetConfig+0x9a>
 800be80:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800be84:	4836      	ldr	r0, [pc, #216]	@ (800bf60 <TIM_OC1_SetConfig+0x170>)
 800be86:	f7f8 fd31 	bl	80048ec <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f023 0308 	bic.w	r3, r3, #8
 800be90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	4313      	orrs	r3, r2
 800be9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f023 0304 	bic.w	r3, r3, #4
 800bea2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a29      	ldr	r2, [pc, #164]	@ (800bf4c <TIM_OC1_SetConfig+0x15c>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d00f      	beq.n	800becc <TIM_OC1_SetConfig+0xdc>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4a28      	ldr	r2, [pc, #160]	@ (800bf50 <TIM_OC1_SetConfig+0x160>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d00b      	beq.n	800becc <TIM_OC1_SetConfig+0xdc>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a27      	ldr	r2, [pc, #156]	@ (800bf54 <TIM_OC1_SetConfig+0x164>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d007      	beq.n	800becc <TIM_OC1_SetConfig+0xdc>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a26      	ldr	r2, [pc, #152]	@ (800bf58 <TIM_OC1_SetConfig+0x168>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d003      	beq.n	800becc <TIM_OC1_SetConfig+0xdc>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a25      	ldr	r2, [pc, #148]	@ (800bf5c <TIM_OC1_SetConfig+0x16c>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d12d      	bne.n	800bf28 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bed4:	d008      	beq.n	800bee8 <TIM_OC1_SetConfig+0xf8>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	699b      	ldr	r3, [r3, #24]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d004      	beq.n	800bee8 <TIM_OC1_SetConfig+0xf8>
 800bede:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800bee2:	481f      	ldr	r0, [pc, #124]	@ (800bf60 <TIM_OC1_SetConfig+0x170>)
 800bee4:	f7f8 fd02 	bl	80048ec <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	695b      	ldr	r3, [r3, #20]
 800beec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bef0:	d008      	beq.n	800bf04 <TIM_OC1_SetConfig+0x114>
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d004      	beq.n	800bf04 <TIM_OC1_SetConfig+0x114>
 800befa:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800befe:	4818      	ldr	r0, [pc, #96]	@ (800bf60 <TIM_OC1_SetConfig+0x170>)
 800bf00:	f7f8 fcf4 	bl	80048ec <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bf12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	697a      	ldr	r2, [r7, #20]
 800bf40:	621a      	str	r2, [r3, #32]
}
 800bf42:	bf00      	nop
 800bf44:	3718      	adds	r7, #24
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	40012c00 	.word	0x40012c00
 800bf50:	40013400 	.word	0x40013400
 800bf54:	40014000 	.word	0x40014000
 800bf58:	40014400 	.word	0x40014400
 800bf5c:	40014800 	.word	0x40014800
 800bf60:	0800f4e4 	.word	0x0800f4e4

0800bf64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a1b      	ldr	r3, [r3, #32]
 800bf78:	f023 0210 	bic.w	r2, r3, #16
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bf92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	021b      	lsls	r3, r3, #8
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f023 0320 	bic.w	r3, r3, #32
 800bfb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	011b      	lsls	r3, r3, #4
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4a3b      	ldr	r2, [pc, #236]	@ (800c0b0 <TIM_OC2_SetConfig+0x14c>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d003      	beq.n	800bfd0 <TIM_OC2_SetConfig+0x6c>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a3a      	ldr	r2, [pc, #232]	@ (800c0b4 <TIM_OC2_SetConfig+0x150>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d11a      	bne.n	800c006 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d008      	beq.n	800bfea <TIM_OC2_SetConfig+0x86>
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	2b08      	cmp	r3, #8
 800bfde:	d004      	beq.n	800bfea <TIM_OC2_SetConfig+0x86>
 800bfe0:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800bfe4:	4834      	ldr	r0, [pc, #208]	@ (800c0b8 <TIM_OC2_SetConfig+0x154>)
 800bfe6:	f7f8 fc81 	bl	80048ec <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	011b      	lsls	r3, r3, #4
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a29      	ldr	r2, [pc, #164]	@ (800c0b0 <TIM_OC2_SetConfig+0x14c>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d00f      	beq.n	800c02e <TIM_OC2_SetConfig+0xca>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a28      	ldr	r2, [pc, #160]	@ (800c0b4 <TIM_OC2_SetConfig+0x150>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d00b      	beq.n	800c02e <TIM_OC2_SetConfig+0xca>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a28      	ldr	r2, [pc, #160]	@ (800c0bc <TIM_OC2_SetConfig+0x158>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d007      	beq.n	800c02e <TIM_OC2_SetConfig+0xca>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a27      	ldr	r2, [pc, #156]	@ (800c0c0 <TIM_OC2_SetConfig+0x15c>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d003      	beq.n	800c02e <TIM_OC2_SetConfig+0xca>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a26      	ldr	r2, [pc, #152]	@ (800c0c4 <TIM_OC2_SetConfig+0x160>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d12f      	bne.n	800c08e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c036:	d008      	beq.n	800c04a <TIM_OC2_SetConfig+0xe6>
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d004      	beq.n	800c04a <TIM_OC2_SetConfig+0xe6>
 800c040:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 800c044:	481c      	ldr	r0, [pc, #112]	@ (800c0b8 <TIM_OC2_SetConfig+0x154>)
 800c046:	f7f8 fc51 	bl	80048ec <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c052:	d008      	beq.n	800c066 <TIM_OC2_SetConfig+0x102>
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <TIM_OC2_SetConfig+0x102>
 800c05c:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 800c060:	4815      	ldr	r0, [pc, #84]	@ (800c0b8 <TIM_OC2_SetConfig+0x154>)
 800c062:	f7f8 fc43 	bl	80048ec <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c06c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	695b      	ldr	r3, [r3, #20]
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	4313      	orrs	r3, r2
 800c080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	697a      	ldr	r2, [r7, #20]
 800c0a6:	621a      	str	r2, [r3, #32]
}
 800c0a8:	bf00      	nop
 800c0aa:	3718      	adds	r7, #24
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	40012c00 	.word	0x40012c00
 800c0b4:	40013400 	.word	0x40013400
 800c0b8:	0800f4e4 	.word	0x0800f4e4
 800c0bc:	40014000 	.word	0x40014000
 800c0c0:	40014400 	.word	0x40014400
 800c0c4:	40014800 	.word	0x40014800

0800c0c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b086      	sub	sp, #24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	021b      	lsls	r3, r3, #8
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	4313      	orrs	r3, r2
 800c120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a3b      	ldr	r2, [pc, #236]	@ (800c214 <TIM_OC3_SetConfig+0x14c>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d003      	beq.n	800c132 <TIM_OC3_SetConfig+0x6a>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a3a      	ldr	r2, [pc, #232]	@ (800c218 <TIM_OC3_SetConfig+0x150>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d11a      	bne.n	800c168 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d008      	beq.n	800c14c <TIM_OC3_SetConfig+0x84>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	2b08      	cmp	r3, #8
 800c140:	d004      	beq.n	800c14c <TIM_OC3_SetConfig+0x84>
 800c142:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800c146:	4835      	ldr	r0, [pc, #212]	@ (800c21c <TIM_OC3_SetConfig+0x154>)
 800c148:	f7f8 fbd0 	bl	80048ec <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	021b      	lsls	r3, r3, #8
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c166:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a2a      	ldr	r2, [pc, #168]	@ (800c214 <TIM_OC3_SetConfig+0x14c>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d00f      	beq.n	800c190 <TIM_OC3_SetConfig+0xc8>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a29      	ldr	r2, [pc, #164]	@ (800c218 <TIM_OC3_SetConfig+0x150>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d00b      	beq.n	800c190 <TIM_OC3_SetConfig+0xc8>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a29      	ldr	r2, [pc, #164]	@ (800c220 <TIM_OC3_SetConfig+0x158>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d007      	beq.n	800c190 <TIM_OC3_SetConfig+0xc8>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a28      	ldr	r2, [pc, #160]	@ (800c224 <TIM_OC3_SetConfig+0x15c>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d003      	beq.n	800c190 <TIM_OC3_SetConfig+0xc8>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a27      	ldr	r2, [pc, #156]	@ (800c228 <TIM_OC3_SetConfig+0x160>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d12f      	bne.n	800c1f0 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c198:	d008      	beq.n	800c1ac <TIM_OC3_SetConfig+0xe4>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d004      	beq.n	800c1ac <TIM_OC3_SetConfig+0xe4>
 800c1a2:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800c1a6:	481d      	ldr	r0, [pc, #116]	@ (800c21c <TIM_OC3_SetConfig+0x154>)
 800c1a8:	f7f8 fba0 	bl	80048ec <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1b4:	d008      	beq.n	800c1c8 <TIM_OC3_SetConfig+0x100>
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d004      	beq.n	800c1c8 <TIM_OC3_SetConfig+0x100>
 800c1be:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800c1c2:	4816      	ldr	r0, [pc, #88]	@ (800c21c <TIM_OC3_SetConfig+0x154>)
 800c1c4:	f7f8 fb92 	bl	80048ec <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	011b      	lsls	r3, r3, #4
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	011b      	lsls	r3, r3, #4
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	621a      	str	r2, [r3, #32]
}
 800c20a:	bf00      	nop
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	40012c00 	.word	0x40012c00
 800c218:	40013400 	.word	0x40013400
 800c21c:	0800f4e4 	.word	0x0800f4e4
 800c220:	40014000 	.word	0x40014000
 800c224:	40014400 	.word	0x40014400
 800c228:	40014800 	.word	0x40014800

0800c22c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a1b      	ldr	r3, [r3, #32]
 800c23a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	69db      	ldr	r3, [r3, #28]
 800c252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c25a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	4313      	orrs	r3, r2
 800c272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c27a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	031b      	lsls	r3, r3, #12
 800c282:	693a      	ldr	r2, [r7, #16]
 800c284:	4313      	orrs	r3, r2
 800c286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a1e      	ldr	r2, [pc, #120]	@ (800c304 <TIM_OC4_SetConfig+0xd8>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d00f      	beq.n	800c2b0 <TIM_OC4_SetConfig+0x84>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a1d      	ldr	r2, [pc, #116]	@ (800c308 <TIM_OC4_SetConfig+0xdc>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d00b      	beq.n	800c2b0 <TIM_OC4_SetConfig+0x84>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a1c      	ldr	r2, [pc, #112]	@ (800c30c <TIM_OC4_SetConfig+0xe0>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d007      	beq.n	800c2b0 <TIM_OC4_SetConfig+0x84>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a1b      	ldr	r2, [pc, #108]	@ (800c310 <TIM_OC4_SetConfig+0xe4>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d003      	beq.n	800c2b0 <TIM_OC4_SetConfig+0x84>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a1a      	ldr	r2, [pc, #104]	@ (800c314 <TIM_OC4_SetConfig+0xe8>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d117      	bne.n	800c2e0 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	695b      	ldr	r3, [r3, #20]
 800c2b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2b8:	d008      	beq.n	800c2cc <TIM_OC4_SetConfig+0xa0>
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d004      	beq.n	800c2cc <TIM_OC4_SetConfig+0xa0>
 800c2c2:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800c2c6:	4814      	ldr	r0, [pc, #80]	@ (800c318 <TIM_OC4_SetConfig+0xec>)
 800c2c8:	f7f8 fb10 	bl	80048ec <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	019b      	lsls	r3, r3, #6
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	621a      	str	r2, [r3, #32]
}
 800c2fa:	bf00      	nop
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	40012c00 	.word	0x40012c00
 800c308:	40013400 	.word	0x40013400
 800c30c:	40014000 	.word	0x40014000
 800c310:	40014400 	.word	0x40014400
 800c314:	40014800 	.word	0x40014800
 800c318:	0800f4e4 	.word	0x0800f4e4

0800c31c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6a1b      	ldr	r3, [r3, #32]
 800c330:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c34a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c34e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	4313      	orrs	r3, r2
 800c358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c360:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	041b      	lsls	r3, r3, #16
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a17      	ldr	r2, [pc, #92]	@ (800c3d0 <TIM_OC5_SetConfig+0xb4>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d00f      	beq.n	800c396 <TIM_OC5_SetConfig+0x7a>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a16      	ldr	r2, [pc, #88]	@ (800c3d4 <TIM_OC5_SetConfig+0xb8>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d00b      	beq.n	800c396 <TIM_OC5_SetConfig+0x7a>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a15      	ldr	r2, [pc, #84]	@ (800c3d8 <TIM_OC5_SetConfig+0xbc>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d007      	beq.n	800c396 <TIM_OC5_SetConfig+0x7a>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a14      	ldr	r2, [pc, #80]	@ (800c3dc <TIM_OC5_SetConfig+0xc0>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d003      	beq.n	800c396 <TIM_OC5_SetConfig+0x7a>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a13      	ldr	r2, [pc, #76]	@ (800c3e0 <TIM_OC5_SetConfig+0xc4>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d109      	bne.n	800c3aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c39c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	021b      	lsls	r3, r3, #8
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	685a      	ldr	r2, [r3, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	621a      	str	r2, [r3, #32]
}
 800c3c4:	bf00      	nop
 800c3c6:	371c      	adds	r7, #28
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	40012c00 	.word	0x40012c00
 800c3d4:	40013400 	.word	0x40013400
 800c3d8:	40014000 	.word	0x40014000
 800c3dc:	40014400 	.word	0x40014400
 800c3e0:	40014800 	.word	0x40014800

0800c3e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a1b      	ldr	r3, [r3, #32]
 800c3f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	021b      	lsls	r3, r3, #8
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	4313      	orrs	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c42a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	051b      	lsls	r3, r3, #20
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	4313      	orrs	r3, r2
 800c436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a18      	ldr	r2, [pc, #96]	@ (800c49c <TIM_OC6_SetConfig+0xb8>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d00f      	beq.n	800c460 <TIM_OC6_SetConfig+0x7c>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a17      	ldr	r2, [pc, #92]	@ (800c4a0 <TIM_OC6_SetConfig+0xbc>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d00b      	beq.n	800c460 <TIM_OC6_SetConfig+0x7c>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a16      	ldr	r2, [pc, #88]	@ (800c4a4 <TIM_OC6_SetConfig+0xc0>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d007      	beq.n	800c460 <TIM_OC6_SetConfig+0x7c>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a15      	ldr	r2, [pc, #84]	@ (800c4a8 <TIM_OC6_SetConfig+0xc4>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d003      	beq.n	800c460 <TIM_OC6_SetConfig+0x7c>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a14      	ldr	r2, [pc, #80]	@ (800c4ac <TIM_OC6_SetConfig+0xc8>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d109      	bne.n	800c474 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c466:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	029b      	lsls	r3, r3, #10
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	4313      	orrs	r3, r2
 800c472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	621a      	str	r2, [r3, #32]
}
 800c48e:	bf00      	nop
 800c490:	371c      	adds	r7, #28
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	40012c00 	.word	0x40012c00
 800c4a0:	40013400 	.word	0x40013400
 800c4a4:	40014000 	.word	0x40014000
 800c4a8:	40014400 	.word	0x40014400
 800c4ac:	40014800 	.word	0x40014800

0800c4b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6a1b      	ldr	r3, [r3, #32]
 800c4c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	f023 0201 	bic.w	r2, r3, #1
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	699b      	ldr	r3, [r3, #24]
 800c4d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c4da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	011b      	lsls	r3, r3, #4
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f023 030a 	bic.w	r3, r3, #10
 800c4ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c4ee:	697a      	ldr	r2, [r7, #20]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	621a      	str	r2, [r3, #32]
}
 800c502:	bf00      	nop
 800c504:	371c      	adds	r7, #28
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c50e:	b480      	push	{r7}
 800c510:	b087      	sub	sp, #28
 800c512:	af00      	add	r7, sp, #0
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	60b9      	str	r1, [r7, #8]
 800c518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6a1b      	ldr	r3, [r3, #32]
 800c524:	f023 0210 	bic.w	r2, r3, #16
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	699b      	ldr	r3, [r3, #24]
 800c530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	031b      	lsls	r3, r3, #12
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	4313      	orrs	r3, r2
 800c542:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c54a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	011b      	lsls	r3, r3, #4
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	4313      	orrs	r3, r2
 800c554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	621a      	str	r2, [r3, #32]
}
 800c562:	bf00      	nop
 800c564:	371c      	adds	r7, #28
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c56e:	b480      	push	{r7}
 800c570:	b085      	sub	sp, #20
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	f043 0307 	orr.w	r3, r3, #7
 800c590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	609a      	str	r2, [r3, #8]
}
 800c598:	bf00      	nop
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c5be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	021a      	lsls	r2, r3, #8
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	431a      	orrs	r2, r3
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	697a      	ldr	r2, [r7, #20]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	697a      	ldr	r2, [r7, #20]
 800c5d6:	609a      	str	r2, [r3, #8]
}
 800c5d8:	bf00      	nop
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	4a2f      	ldr	r2, [pc, #188]	@ (800c6b0 <TIM_CCxChannelCmd+0xcc>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d024      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5fe:	d020      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	4a2c      	ldr	r2, [pc, #176]	@ (800c6b4 <TIM_CCxChannelCmd+0xd0>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d01c      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	4a2b      	ldr	r2, [pc, #172]	@ (800c6b8 <TIM_CCxChannelCmd+0xd4>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d018      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	4a2a      	ldr	r2, [pc, #168]	@ (800c6bc <TIM_CCxChannelCmd+0xd8>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d014      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	4a29      	ldr	r2, [pc, #164]	@ (800c6c0 <TIM_CCxChannelCmd+0xdc>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d010      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4a28      	ldr	r2, [pc, #160]	@ (800c6c4 <TIM_CCxChannelCmd+0xe0>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d00c      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	4a27      	ldr	r2, [pc, #156]	@ (800c6c8 <TIM_CCxChannelCmd+0xe4>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d008      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	4a26      	ldr	r2, [pc, #152]	@ (800c6cc <TIM_CCxChannelCmd+0xe8>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d004      	beq.n	800c642 <TIM_CCxChannelCmd+0x5e>
 800c638:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800c63c:	4824      	ldr	r0, [pc, #144]	@ (800c6d0 <TIM_CCxChannelCmd+0xec>)
 800c63e:	f7f8 f955 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d016      	beq.n	800c676 <TIM_CCxChannelCmd+0x92>
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b04      	cmp	r3, #4
 800c64c:	d013      	beq.n	800c676 <TIM_CCxChannelCmd+0x92>
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2b08      	cmp	r3, #8
 800c652:	d010      	beq.n	800c676 <TIM_CCxChannelCmd+0x92>
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	2b0c      	cmp	r3, #12
 800c658:	d00d      	beq.n	800c676 <TIM_CCxChannelCmd+0x92>
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b10      	cmp	r3, #16
 800c65e:	d00a      	beq.n	800c676 <TIM_CCxChannelCmd+0x92>
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2b14      	cmp	r3, #20
 800c664:	d007      	beq.n	800c676 <TIM_CCxChannelCmd+0x92>
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	2b3c      	cmp	r3, #60	@ 0x3c
 800c66a:	d004      	beq.n	800c676 <TIM_CCxChannelCmd+0x92>
 800c66c:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 800c670:	4817      	ldr	r0, [pc, #92]	@ (800c6d0 <TIM_CCxChannelCmd+0xec>)
 800c672:	f7f8 f93b 	bl	80048ec <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	f003 031f 	and.w	r3, r3, #31
 800c67c:	2201      	movs	r2, #1
 800c67e:	fa02 f303 	lsl.w	r3, r2, r3
 800c682:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6a1a      	ldr	r2, [r3, #32]
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	43db      	mvns	r3, r3
 800c68c:	401a      	ands	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6a1a      	ldr	r2, [r3, #32]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f003 031f 	and.w	r3, r3, #31
 800c69c:	6879      	ldr	r1, [r7, #4]
 800c69e:	fa01 f303 	lsl.w	r3, r1, r3
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	621a      	str	r2, [r3, #32]
}
 800c6a8:	bf00      	nop
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	40012c00 	.word	0x40012c00
 800c6b4:	40000400 	.word	0x40000400
 800c6b8:	40000800 	.word	0x40000800
 800c6bc:	40000c00 	.word	0x40000c00
 800c6c0:	40013400 	.word	0x40013400
 800c6c4:	40014000 	.word	0x40014000
 800c6c8:	40014400 	.word	0x40014400
 800c6cc:	40014800 	.word	0x40014800
 800c6d0:	0800f4e4 	.word	0x0800f4e4

0800c6d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a34      	ldr	r2, [pc, #208]	@ (800c7b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d02c      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6f0:	d027      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a30      	ldr	r2, [pc, #192]	@ (800c7b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d022      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a2e      	ldr	r2, [pc, #184]	@ (800c7bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d01d      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a2d      	ldr	r2, [pc, #180]	@ (800c7c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d018      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a2b      	ldr	r2, [pc, #172]	@ (800c7c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d013      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a2a      	ldr	r2, [pc, #168]	@ (800c7c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d00e      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a28      	ldr	r2, [pc, #160]	@ (800c7cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d009      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a27      	ldr	r2, [pc, #156]	@ (800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d004      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800c738:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800c73c:	4825      	ldr	r0, [pc, #148]	@ (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c73e:	f7f8 f8d5 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d020      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b10      	cmp	r3, #16
 800c750:	d01c      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b20      	cmp	r3, #32
 800c758:	d018      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b30      	cmp	r3, #48	@ 0x30
 800c760:	d014      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b40      	cmp	r3, #64	@ 0x40
 800c768:	d010      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b50      	cmp	r3, #80	@ 0x50
 800c770:	d00c      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b60      	cmp	r3, #96	@ 0x60
 800c778:	d008      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b70      	cmp	r3, #112	@ 0x70
 800c780:	d004      	beq.n	800c78c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c782:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800c786:	4813      	ldr	r0, [pc, #76]	@ (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c788:	f7f8 f8b0 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	2b80      	cmp	r3, #128	@ 0x80
 800c792:	d008      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d004      	beq.n	800c7a6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800c79c:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800c7a0:	480c      	ldr	r0, [pc, #48]	@ (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7a2:	f7f8 f8a3 	bl	80048ec <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d113      	bne.n	800c7d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	e0d3      	b.n	800c95c <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800c7b4:	40012c00 	.word	0x40012c00
 800c7b8:	40000400 	.word	0x40000400
 800c7bc:	40000800 	.word	0x40000800
 800c7c0:	40000c00 	.word	0x40000c00
 800c7c4:	40001000 	.word	0x40001000
 800c7c8:	40001400 	.word	0x40001400
 800c7cc:	40013400 	.word	0x40013400
 800c7d0:	40014000 	.word	0x40014000
 800c7d4:	0800f51c 	.word	0x0800f51c
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a59      	ldr	r2, [pc, #356]	@ (800c964 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d004      	beq.n	800c80c <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a58      	ldr	r2, [pc, #352]	@ (800c968 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d161      	bne.n	800c8d0 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d054      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c81c:	d04f      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c826:	d04a      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c830:	d045      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c83a:	d040      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800c844:	d03b      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c84e:	d036      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c858:	d031      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800c862:	d02c      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c86c:	d027      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800c876:	d022      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c880:	d01d      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800c88a:	d018      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c894:	d013      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800c89e:	d00e      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800c8a8:	d009      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800c8b2:	d004      	beq.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800c8b4:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800c8b8:	482c      	ldr	r0, [pc, #176]	@ (800c96c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800c8ba:	f7f8 f817 	bl	80048ec <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c8c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a1d      	ldr	r2, [pc, #116]	@ (800c964 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d01d      	beq.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8fc:	d018      	beq.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a1b      	ldr	r2, [pc, #108]	@ (800c970 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d013      	beq.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a19      	ldr	r2, [pc, #100]	@ (800c974 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d00e      	beq.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a18      	ldr	r2, [pc, #96]	@ (800c978 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d009      	beq.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a11      	ldr	r2, [pc, #68]	@ (800c968 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d004      	beq.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a14      	ldr	r2, [pc, #80]	@ (800c97c <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d10c      	bne.n	800c94a <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c936:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	68ba      	ldr	r2, [r7, #8]
 800c93e:	4313      	orrs	r3, r2
 800c940:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68ba      	ldr	r2, [r7, #8]
 800c948:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	40012c00 	.word	0x40012c00
 800c968:	40013400 	.word	0x40013400
 800c96c:	0800f51c 	.word	0x0800f51c
 800c970:	40000400 	.word	0x40000400
 800c974:	40000800 	.word	0x40000800
 800c978:	40000c00 	.word	0x40000c00
 800c97c:	40014000 	.word	0x40014000

0800c980 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a91      	ldr	r2, [pc, #580]	@ (800cbd8 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d018      	beq.n	800c9ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a8f      	ldr	r2, [pc, #572]	@ (800cbdc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d013      	beq.n	800c9ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a8e      	ldr	r2, [pc, #568]	@ (800cbe0 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d00e      	beq.n	800c9ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a8c      	ldr	r2, [pc, #560]	@ (800cbe4 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d009      	beq.n	800c9ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a8b      	ldr	r2, [pc, #556]	@ (800cbe8 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d004      	beq.n	800c9ca <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800c9c0:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800c9c4:	4889      	ldr	r0, [pc, #548]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c9c6:	f7f7 ff91 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9d2:	d008      	beq.n	800c9e6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d004      	beq.n	800c9e6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800c9dc:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800c9e0:	4882      	ldr	r0, [pc, #520]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c9e2:	f7f7 ff83 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9ee:	d008      	beq.n	800ca02 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d004      	beq.n	800ca02 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800c9f8:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800c9fc:	487b      	ldr	r0, [pc, #492]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800c9fe:	f7f7 ff75 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d013      	beq.n	800ca32 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca12:	d00e      	beq.n	800ca32 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca1c:	d009      	beq.n	800ca32 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca26:	d004      	beq.n	800ca32 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800ca28:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800ca2c:	486f      	ldr	r0, [pc, #444]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ca2e:	f7f7 ff5d 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	2bff      	cmp	r3, #255	@ 0xff
 800ca38:	d904      	bls.n	800ca44 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800ca3a:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800ca3e:	486b      	ldr	r0, [pc, #428]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ca40:	f7f7 ff54 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca4c:	d008      	beq.n	800ca60 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d004      	beq.n	800ca60 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ca56:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800ca5a:	4864      	ldr	r0, [pc, #400]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ca5c:	f7f7 ff46 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	695b      	ldr	r3, [r3, #20]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d009      	beq.n	800ca7c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca70:	d004      	beq.n	800ca7c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800ca72:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800ca76:	485d      	ldr	r0, [pc, #372]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ca78:	f7f7 ff38 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	699b      	ldr	r3, [r3, #24]
 800ca80:	2b0f      	cmp	r3, #15
 800ca82:	d904      	bls.n	800ca8e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ca84:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800ca88:	4858      	ldr	r0, [pc, #352]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800ca8a:	f7f7 ff2f 	bl	80048ec <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca96:	d008      	beq.n	800caaa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d004      	beq.n	800caaa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800caa0:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800caa4:	4851      	ldr	r0, [pc, #324]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800caa6:	f7f7 ff21 	bl	80048ec <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d101      	bne.n	800cab8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800cab4:	2302      	movs	r3, #2
 800cab6:	e08a      	b.n	800cbce <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	4313      	orrs	r3, r2
 800cacc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	4313      	orrs	r3, r2
 800cada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	695b      	ldr	r3, [r3, #20]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	041b      	lsls	r3, r3, #16
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a28      	ldr	r2, [pc, #160]	@ (800cbd8 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d004      	beq.n	800cb46 <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a26      	ldr	r2, [pc, #152]	@ (800cbdc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d13a      	bne.n	800cbbc <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	69db      	ldr	r3, [r3, #28]
 800cb4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb4e:	d008      	beq.n	800cb62 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	69db      	ldr	r3, [r3, #28]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d004      	beq.n	800cb62 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800cb58:	f640 0112 	movw	r1, #2066	@ 0x812
 800cb5c:	4823      	ldr	r0, [pc, #140]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cb5e:	f7f7 fec5 	bl	80048ec <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d009      	beq.n	800cb7e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb72:	d004      	beq.n	800cb7e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800cb74:	f640 0113 	movw	r1, #2067	@ 0x813
 800cb78:	481c      	ldr	r0, [pc, #112]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cb7a:	f7f7 feb7 	bl	80048ec <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb82:	2b0f      	cmp	r3, #15
 800cb84:	d904      	bls.n	800cb90 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800cb86:	f640 0114 	movw	r1, #2068	@ 0x814
 800cb8a:	4818      	ldr	r0, [pc, #96]	@ (800cbec <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800cb8c:	f7f7 feae 	bl	80048ec <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb9a:	051b      	lsls	r3, r3, #20
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	69db      	ldr	r3, [r3, #28]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	6a1b      	ldr	r3, [r3, #32]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	40012c00 	.word	0x40012c00
 800cbdc:	40013400 	.word	0x40013400
 800cbe0:	40014000 	.word	0x40014000
 800cbe4:	40014400 	.word	0x40014400
 800cbe8:	40014800 	.word	0x40014800
 800cbec:	0800f51c 	.word	0x0800f51c

0800cbf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e08b      	b.n	800cd56 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d023      	beq.n	800cc8e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a45      	ldr	r2, [pc, #276]	@ (800cd60 <HAL_UART_Init+0x134>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d041      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a43      	ldr	r2, [pc, #268]	@ (800cd64 <HAL_UART_Init+0x138>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d03c      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a42      	ldr	r2, [pc, #264]	@ (800cd68 <HAL_UART_Init+0x13c>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d037      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a40      	ldr	r2, [pc, #256]	@ (800cd6c <HAL_UART_Init+0x140>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d032      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a3f      	ldr	r2, [pc, #252]	@ (800cd70 <HAL_UART_Init+0x144>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d02d      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a3d      	ldr	r2, [pc, #244]	@ (800cd74 <HAL_UART_Init+0x148>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d028      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800cc82:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800cc86:	483c      	ldr	r0, [pc, #240]	@ (800cd78 <HAL_UART_Init+0x14c>)
 800cc88:	f7f7 fe30 	bl	80048ec <assert_failed>
 800cc8c:	e022      	b.n	800ccd4 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a33      	ldr	r2, [pc, #204]	@ (800cd60 <HAL_UART_Init+0x134>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d01d      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a31      	ldr	r2, [pc, #196]	@ (800cd64 <HAL_UART_Init+0x138>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d018      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a30      	ldr	r2, [pc, #192]	@ (800cd68 <HAL_UART_Init+0x13c>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d013      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a2e      	ldr	r2, [pc, #184]	@ (800cd6c <HAL_UART_Init+0x140>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d00e      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a2d      	ldr	r2, [pc, #180]	@ (800cd70 <HAL_UART_Init+0x144>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d009      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a2b      	ldr	r2, [pc, #172]	@ (800cd74 <HAL_UART_Init+0x148>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d004      	beq.n	800ccd4 <HAL_UART_Init+0xa8>
 800ccca:	f240 1157 	movw	r1, #343	@ 0x157
 800ccce:	482a      	ldr	r0, [pc, #168]	@ (800cd78 <HAL_UART_Init+0x14c>)
 800ccd0:	f7f7 fe0c 	bl	80048ec <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d106      	bne.n	800ccea <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7f8 fb3b 	bl	8005360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2224      	movs	r2, #36	@ 0x24
 800ccee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f022 0201 	bic.w	r2, r2, #1
 800ccfe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d002      	beq.n	800cd0e <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fc1f 	bl	800d54c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f8be 	bl	800ce90 <UART_SetConfig>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d101      	bne.n	800cd1e <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e01b      	b.n	800cd56 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	685a      	ldr	r2, [r3, #4]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	689a      	ldr	r2, [r3, #8]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f042 0201 	orr.w	r2, r2, #1
 800cd4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fd5c 	bl	800d80c <UART_CheckIdleState>
 800cd54:	4603      	mov	r3, r0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	40013800 	.word	0x40013800
 800cd64:	40004400 	.word	0x40004400
 800cd68:	40004800 	.word	0x40004800
 800cd6c:	40004c00 	.word	0x40004c00
 800cd70:	40005000 	.word	0x40005000
 800cd74:	40008000 	.word	0x40008000
 800cd78:	0800f558 	.word	0x0800f558

0800cd7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b08a      	sub	sp, #40	@ 0x28
 800cd80:	af02      	add	r7, sp, #8
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	603b      	str	r3, [r7, #0]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd90:	2b20      	cmp	r3, #32
 800cd92:	d177      	bne.n	800ce84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <HAL_UART_Transmit+0x24>
 800cd9a:	88fb      	ldrh	r3, [r7, #6]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d101      	bne.n	800cda4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e070      	b.n	800ce86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2221      	movs	r2, #33	@ 0x21
 800cdb0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cdb2:	f7f8 fbc5 	bl	8005540 <HAL_GetTick>
 800cdb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	88fa      	ldrh	r2, [r7, #6]
 800cdbc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	88fa      	ldrh	r2, [r7, #6]
 800cdc4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdd0:	d108      	bne.n	800cde4 <HAL_UART_Transmit+0x68>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d104      	bne.n	800cde4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800cdda:	2300      	movs	r3, #0
 800cddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	61bb      	str	r3, [r7, #24]
 800cde2:	e003      	b.n	800cdec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cde8:	2300      	movs	r3, #0
 800cdea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cdec:	e02f      	b.n	800ce4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	2180      	movs	r1, #128	@ 0x80
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 fdaf 	bl	800d95c <UART_WaitOnFlagUntilTimeout>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2220      	movs	r2, #32
 800ce08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	e03b      	b.n	800ce86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10b      	bne.n	800ce2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	881a      	ldrh	r2, [r3, #0]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce20:	b292      	uxth	r2, r2
 800ce22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	3302      	adds	r3, #2
 800ce28:	61bb      	str	r3, [r7, #24]
 800ce2a:	e007      	b.n	800ce3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	3b01      	subs	r3, #1
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1c9      	bne.n	800cdee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	2200      	movs	r2, #0
 800ce62:	2140      	movs	r1, #64	@ 0x40
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 fd79 	bl	800d95c <UART_WaitOnFlagUntilTimeout>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d004      	beq.n	800ce7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2220      	movs	r2, #32
 800ce74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ce76:	2303      	movs	r3, #3
 800ce78:	e005      	b.n	800ce86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2220      	movs	r2, #32
 800ce7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	e000      	b.n	800ce86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ce84:	2302      	movs	r3, #2
  }
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3720      	adds	r7, #32
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
	...

0800ce90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce94:	b08a      	sub	sp, #40	@ 0x28
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	4a9e      	ldr	r2, [pc, #632]	@ (800d120 <UART_SetConfig+0x290>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d904      	bls.n	800ceb4 <UART_SetConfig+0x24>
 800ceaa:	f640 4158 	movw	r1, #3160	@ 0xc58
 800ceae:	489d      	ldr	r0, [pc, #628]	@ (800d124 <UART_SetConfig+0x294>)
 800ceb0:	f7f7 fd1c 	bl	80048ec <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cebc:	d00d      	beq.n	800ceda <UART_SetConfig+0x4a>
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d009      	beq.n	800ceda <UART_SetConfig+0x4a>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cece:	d004      	beq.n	800ceda <UART_SetConfig+0x4a>
 800ced0:	f640 4159 	movw	r1, #3161	@ 0xc59
 800ced4:	4893      	ldr	r0, [pc, #588]	@ (800d124 <UART_SetConfig+0x294>)
 800ced6:	f7f7 fd09 	bl	80048ec <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a92      	ldr	r2, [pc, #584]	@ (800d128 <UART_SetConfig+0x298>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d10e      	bne.n	800cf02 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d030      	beq.n	800cf4e <UART_SetConfig+0xbe>
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cef4:	d02b      	beq.n	800cf4e <UART_SetConfig+0xbe>
 800cef6:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800cefa:	488a      	ldr	r0, [pc, #552]	@ (800d124 <UART_SetConfig+0x294>)
 800cefc:	f7f7 fcf6 	bl	80048ec <assert_failed>
 800cf00:	e025      	b.n	800cf4e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf0a:	d012      	beq.n	800cf32 <UART_SetConfig+0xa2>
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00e      	beq.n	800cf32 <UART_SetConfig+0xa2>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf1c:	d009      	beq.n	800cf32 <UART_SetConfig+0xa2>
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf26:	d004      	beq.n	800cf32 <UART_SetConfig+0xa2>
 800cf28:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800cf2c:	487d      	ldr	r0, [pc, #500]	@ (800d124 <UART_SetConfig+0x294>)
 800cf2e:	f7f7 fcdd 	bl	80048ec <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6a1b      	ldr	r3, [r3, #32]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d009      	beq.n	800cf4e <UART_SetConfig+0xbe>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf42:	d004      	beq.n	800cf4e <UART_SetConfig+0xbe>
 800cf44:	f640 4161 	movw	r1, #3169	@ 0xc61
 800cf48:	4876      	ldr	r0, [pc, #472]	@ (800d124 <UART_SetConfig+0x294>)
 800cf4a:	f7f7 fccf 	bl	80048ec <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00e      	beq.n	800cf74 <UART_SetConfig+0xe4>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf5e:	d009      	beq.n	800cf74 <UART_SetConfig+0xe4>
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cf68:	d004      	beq.n	800cf74 <UART_SetConfig+0xe4>
 800cf6a:	f640 4164 	movw	r1, #3172	@ 0xc64
 800cf6e:	486d      	ldr	r0, [pc, #436]	@ (800d124 <UART_SetConfig+0x294>)
 800cf70:	f7f7 fcbc 	bl	80048ec <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	695b      	ldr	r3, [r3, #20]
 800cf78:	f023 030c 	bic.w	r3, r3, #12
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d103      	bne.n	800cf88 <UART_SetConfig+0xf8>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d104      	bne.n	800cf92 <UART_SetConfig+0x102>
 800cf88:	f640 4165 	movw	r1, #3173	@ 0xc65
 800cf8c:	4865      	ldr	r0, [pc, #404]	@ (800d124 <UART_SetConfig+0x294>)
 800cf8e:	f7f7 fcad 	bl	80048ec <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	699b      	ldr	r3, [r3, #24]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d013      	beq.n	800cfc2 <UART_SetConfig+0x132>
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	699b      	ldr	r3, [r3, #24]
 800cf9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfa2:	d00e      	beq.n	800cfc2 <UART_SetConfig+0x132>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	699b      	ldr	r3, [r3, #24]
 800cfa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfac:	d009      	beq.n	800cfc2 <UART_SetConfig+0x132>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfb6:	d004      	beq.n	800cfc2 <UART_SetConfig+0x132>
 800cfb8:	f640 4166 	movw	r1, #3174	@ 0xc66
 800cfbc:	4859      	ldr	r0, [pc, #356]	@ (800d124 <UART_SetConfig+0x294>)
 800cfbe:	f7f7 fc95 	bl	80048ec <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	69db      	ldr	r3, [r3, #28]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d009      	beq.n	800cfde <UART_SetConfig+0x14e>
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfd2:	d004      	beq.n	800cfde <UART_SetConfig+0x14e>
 800cfd4:	f640 4167 	movw	r1, #3175	@ 0xc67
 800cfd8:	4852      	ldr	r0, [pc, #328]	@ (800d124 <UART_SetConfig+0x294>)
 800cfda:	f7f7 fc87 	bl	80048ec <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	689a      	ldr	r2, [r3, #8]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	695b      	ldr	r3, [r3, #20]
 800cfec:	431a      	orrs	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	69db      	ldr	r3, [r3, #28]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	4b4b      	ldr	r3, [pc, #300]	@ (800d12c <UART_SetConfig+0x29c>)
 800cffe:	4013      	ands	r3, r2
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	6812      	ldr	r2, [r2, #0]
 800d004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d006:	430b      	orrs	r3, r1
 800d008:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	68da      	ldr	r2, [r3, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a3f      	ldr	r2, [pc, #252]	@ (800d128 <UART_SetConfig+0x298>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d004      	beq.n	800d03a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6a1b      	ldr	r3, [r3, #32]
 800d034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d036:	4313      	orrs	r3, r2
 800d038:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d04a:	430a      	orrs	r2, r1
 800d04c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a37      	ldr	r2, [pc, #220]	@ (800d130 <UART_SetConfig+0x2a0>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d125      	bne.n	800d0a4 <UART_SetConfig+0x214>
 800d058:	4b36      	ldr	r3, [pc, #216]	@ (800d134 <UART_SetConfig+0x2a4>)
 800d05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d05e:	f003 0303 	and.w	r3, r3, #3
 800d062:	2b03      	cmp	r3, #3
 800d064:	d81a      	bhi.n	800d09c <UART_SetConfig+0x20c>
 800d066:	a201      	add	r2, pc, #4	@ (adr r2, 800d06c <UART_SetConfig+0x1dc>)
 800d068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06c:	0800d07d 	.word	0x0800d07d
 800d070:	0800d08d 	.word	0x0800d08d
 800d074:	0800d085 	.word	0x0800d085
 800d078:	0800d095 	.word	0x0800d095
 800d07c:	2301      	movs	r3, #1
 800d07e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d082:	e114      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d084:	2302      	movs	r3, #2
 800d086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d08a:	e110      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d08c:	2304      	movs	r3, #4
 800d08e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d092:	e10c      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d094:	2308      	movs	r3, #8
 800d096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d09a:	e108      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d09c:	2310      	movs	r3, #16
 800d09e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d0a2:	e104      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a23      	ldr	r2, [pc, #140]	@ (800d138 <UART_SetConfig+0x2a8>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d146      	bne.n	800d13c <UART_SetConfig+0x2ac>
 800d0ae:	4b21      	ldr	r3, [pc, #132]	@ (800d134 <UART_SetConfig+0x2a4>)
 800d0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0b4:	f003 030c 	and.w	r3, r3, #12
 800d0b8:	2b0c      	cmp	r3, #12
 800d0ba:	d82d      	bhi.n	800d118 <UART_SetConfig+0x288>
 800d0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c4 <UART_SetConfig+0x234>)
 800d0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c2:	bf00      	nop
 800d0c4:	0800d0f9 	.word	0x0800d0f9
 800d0c8:	0800d119 	.word	0x0800d119
 800d0cc:	0800d119 	.word	0x0800d119
 800d0d0:	0800d119 	.word	0x0800d119
 800d0d4:	0800d109 	.word	0x0800d109
 800d0d8:	0800d119 	.word	0x0800d119
 800d0dc:	0800d119 	.word	0x0800d119
 800d0e0:	0800d119 	.word	0x0800d119
 800d0e4:	0800d101 	.word	0x0800d101
 800d0e8:	0800d119 	.word	0x0800d119
 800d0ec:	0800d119 	.word	0x0800d119
 800d0f0:	0800d119 	.word	0x0800d119
 800d0f4:	0800d111 	.word	0x0800d111
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d0fe:	e0d6      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d100:	2302      	movs	r3, #2
 800d102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d106:	e0d2      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d108:	2304      	movs	r3, #4
 800d10a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d10e:	e0ce      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d110:	2308      	movs	r3, #8
 800d112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d116:	e0ca      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d118:	2310      	movs	r3, #16
 800d11a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d11e:	e0c6      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d120:	00989680 	.word	0x00989680
 800d124:	0800f558 	.word	0x0800f558
 800d128:	40008000 	.word	0x40008000
 800d12c:	efff69f3 	.word	0xefff69f3
 800d130:	40013800 	.word	0x40013800
 800d134:	40021000 	.word	0x40021000
 800d138:	40004400 	.word	0x40004400
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4aae      	ldr	r2, [pc, #696]	@ (800d3fc <UART_SetConfig+0x56c>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d125      	bne.n	800d192 <UART_SetConfig+0x302>
 800d146:	4bae      	ldr	r3, [pc, #696]	@ (800d400 <UART_SetConfig+0x570>)
 800d148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d14c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d150:	2b30      	cmp	r3, #48	@ 0x30
 800d152:	d016      	beq.n	800d182 <UART_SetConfig+0x2f2>
 800d154:	2b30      	cmp	r3, #48	@ 0x30
 800d156:	d818      	bhi.n	800d18a <UART_SetConfig+0x2fa>
 800d158:	2b20      	cmp	r3, #32
 800d15a:	d00a      	beq.n	800d172 <UART_SetConfig+0x2e2>
 800d15c:	2b20      	cmp	r3, #32
 800d15e:	d814      	bhi.n	800d18a <UART_SetConfig+0x2fa>
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <UART_SetConfig+0x2da>
 800d164:	2b10      	cmp	r3, #16
 800d166:	d008      	beq.n	800d17a <UART_SetConfig+0x2ea>
 800d168:	e00f      	b.n	800d18a <UART_SetConfig+0x2fa>
 800d16a:	2300      	movs	r3, #0
 800d16c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d170:	e09d      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d172:	2302      	movs	r3, #2
 800d174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d178:	e099      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d17a:	2304      	movs	r3, #4
 800d17c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d180:	e095      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d182:	2308      	movs	r3, #8
 800d184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d188:	e091      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d18a:	2310      	movs	r3, #16
 800d18c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d190:	e08d      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a9b      	ldr	r2, [pc, #620]	@ (800d404 <UART_SetConfig+0x574>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d125      	bne.n	800d1e8 <UART_SetConfig+0x358>
 800d19c:	4b98      	ldr	r3, [pc, #608]	@ (800d400 <UART_SetConfig+0x570>)
 800d19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d1a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800d1a8:	d016      	beq.n	800d1d8 <UART_SetConfig+0x348>
 800d1aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800d1ac:	d818      	bhi.n	800d1e0 <UART_SetConfig+0x350>
 800d1ae:	2b80      	cmp	r3, #128	@ 0x80
 800d1b0:	d00a      	beq.n	800d1c8 <UART_SetConfig+0x338>
 800d1b2:	2b80      	cmp	r3, #128	@ 0x80
 800d1b4:	d814      	bhi.n	800d1e0 <UART_SetConfig+0x350>
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <UART_SetConfig+0x330>
 800d1ba:	2b40      	cmp	r3, #64	@ 0x40
 800d1bc:	d008      	beq.n	800d1d0 <UART_SetConfig+0x340>
 800d1be:	e00f      	b.n	800d1e0 <UART_SetConfig+0x350>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1c6:	e072      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1ce:	e06e      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d1d0:	2304      	movs	r3, #4
 800d1d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1d6:	e06a      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d1d8:	2308      	movs	r3, #8
 800d1da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1de:	e066      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d1e0:	2310      	movs	r3, #16
 800d1e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d1e6:	e062      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a86      	ldr	r2, [pc, #536]	@ (800d408 <UART_SetConfig+0x578>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d12a      	bne.n	800d248 <UART_SetConfig+0x3b8>
 800d1f2:	4b83      	ldr	r3, [pc, #524]	@ (800d400 <UART_SetConfig+0x570>)
 800d1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d1fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d200:	d01a      	beq.n	800d238 <UART_SetConfig+0x3a8>
 800d202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d206:	d81b      	bhi.n	800d240 <UART_SetConfig+0x3b0>
 800d208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d20c:	d00c      	beq.n	800d228 <UART_SetConfig+0x398>
 800d20e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d212:	d815      	bhi.n	800d240 <UART_SetConfig+0x3b0>
 800d214:	2b00      	cmp	r3, #0
 800d216:	d003      	beq.n	800d220 <UART_SetConfig+0x390>
 800d218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d21c:	d008      	beq.n	800d230 <UART_SetConfig+0x3a0>
 800d21e:	e00f      	b.n	800d240 <UART_SetConfig+0x3b0>
 800d220:	2300      	movs	r3, #0
 800d222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d226:	e042      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d228:	2302      	movs	r3, #2
 800d22a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d22e:	e03e      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d230:	2304      	movs	r3, #4
 800d232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d236:	e03a      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d238:	2308      	movs	r3, #8
 800d23a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d23e:	e036      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d240:	2310      	movs	r3, #16
 800d242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d246:	e032      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a6f      	ldr	r2, [pc, #444]	@ (800d40c <UART_SetConfig+0x57c>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d12a      	bne.n	800d2a8 <UART_SetConfig+0x418>
 800d252:	4b6b      	ldr	r3, [pc, #428]	@ (800d400 <UART_SetConfig+0x570>)
 800d254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d258:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d25c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d260:	d01a      	beq.n	800d298 <UART_SetConfig+0x408>
 800d262:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d266:	d81b      	bhi.n	800d2a0 <UART_SetConfig+0x410>
 800d268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d26c:	d00c      	beq.n	800d288 <UART_SetConfig+0x3f8>
 800d26e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d272:	d815      	bhi.n	800d2a0 <UART_SetConfig+0x410>
 800d274:	2b00      	cmp	r3, #0
 800d276:	d003      	beq.n	800d280 <UART_SetConfig+0x3f0>
 800d278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d27c:	d008      	beq.n	800d290 <UART_SetConfig+0x400>
 800d27e:	e00f      	b.n	800d2a0 <UART_SetConfig+0x410>
 800d280:	2300      	movs	r3, #0
 800d282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d286:	e012      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d288:	2302      	movs	r3, #2
 800d28a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d28e:	e00e      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d290:	2304      	movs	r3, #4
 800d292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d296:	e00a      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d298:	2308      	movs	r3, #8
 800d29a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d29e:	e006      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d2a0:	2310      	movs	r3, #16
 800d2a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d2a6:	e002      	b.n	800d2ae <UART_SetConfig+0x41e>
 800d2a8:	2310      	movs	r3, #16
 800d2aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a56      	ldr	r2, [pc, #344]	@ (800d40c <UART_SetConfig+0x57c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d17a      	bne.n	800d3ae <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d2bc:	2b08      	cmp	r3, #8
 800d2be:	d824      	bhi.n	800d30a <UART_SetConfig+0x47a>
 800d2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c8 <UART_SetConfig+0x438>)
 800d2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c6:	bf00      	nop
 800d2c8:	0800d2ed 	.word	0x0800d2ed
 800d2cc:	0800d30b 	.word	0x0800d30b
 800d2d0:	0800d2f5 	.word	0x0800d2f5
 800d2d4:	0800d30b 	.word	0x0800d30b
 800d2d8:	0800d2fb 	.word	0x0800d2fb
 800d2dc:	0800d30b 	.word	0x0800d30b
 800d2e0:	0800d30b 	.word	0x0800d30b
 800d2e4:	0800d30b 	.word	0x0800d30b
 800d2e8:	0800d303 	.word	0x0800d303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2ec:	f7fa fd5c 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800d2f0:	61f8      	str	r0, [r7, #28]
        break;
 800d2f2:	e010      	b.n	800d316 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d2f4:	4b46      	ldr	r3, [pc, #280]	@ (800d410 <UART_SetConfig+0x580>)
 800d2f6:	61fb      	str	r3, [r7, #28]
        break;
 800d2f8:	e00d      	b.n	800d316 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2fa:	f7fa fcbd 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 800d2fe:	61f8      	str	r0, [r7, #28]
        break;
 800d300:	e009      	b.n	800d316 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d306:	61fb      	str	r3, [r7, #28]
        break;
 800d308:	e005      	b.n	800d316 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800d30a:	2300      	movs	r3, #0
 800d30c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 8107 	beq.w	800d52c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	685a      	ldr	r2, [r3, #4]
 800d322:	4613      	mov	r3, r2
 800d324:	005b      	lsls	r3, r3, #1
 800d326:	4413      	add	r3, r2
 800d328:	69fa      	ldr	r2, [r7, #28]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d305      	bcc.n	800d33a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d334:	69fa      	ldr	r2, [r7, #28]
 800d336:	429a      	cmp	r2, r3
 800d338:	d903      	bls.n	800d342 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d340:	e0f4      	b.n	800d52c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	2200      	movs	r2, #0
 800d346:	461c      	mov	r4, r3
 800d348:	4615      	mov	r5, r2
 800d34a:	f04f 0200 	mov.w	r2, #0
 800d34e:	f04f 0300 	mov.w	r3, #0
 800d352:	022b      	lsls	r3, r5, #8
 800d354:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d358:	0222      	lsls	r2, r4, #8
 800d35a:	68f9      	ldr	r1, [r7, #12]
 800d35c:	6849      	ldr	r1, [r1, #4]
 800d35e:	0849      	lsrs	r1, r1, #1
 800d360:	2000      	movs	r0, #0
 800d362:	4688      	mov	r8, r1
 800d364:	4681      	mov	r9, r0
 800d366:	eb12 0a08 	adds.w	sl, r2, r8
 800d36a:	eb43 0b09 	adc.w	fp, r3, r9
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	603b      	str	r3, [r7, #0]
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d37c:	4650      	mov	r0, sl
 800d37e:	4659      	mov	r1, fp
 800d380:	f7f2 ff76 	bl	8000270 <__aeabi_uldivmod>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	4613      	mov	r3, r2
 800d38a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d392:	d308      	bcc.n	800d3a6 <UART_SetConfig+0x516>
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d39a:	d204      	bcs.n	800d3a6 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	60da      	str	r2, [r3, #12]
 800d3a4:	e0c2      	b.n	800d52c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d3ac:	e0be      	b.n	800d52c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	69db      	ldr	r3, [r3, #28]
 800d3b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3b6:	d16a      	bne.n	800d48e <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800d3b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d3bc:	2b08      	cmp	r3, #8
 800d3be:	d834      	bhi.n	800d42a <UART_SetConfig+0x59a>
 800d3c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3c8 <UART_SetConfig+0x538>)
 800d3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c6:	bf00      	nop
 800d3c8:	0800d3ed 	.word	0x0800d3ed
 800d3cc:	0800d3f5 	.word	0x0800d3f5
 800d3d0:	0800d415 	.word	0x0800d415
 800d3d4:	0800d42b 	.word	0x0800d42b
 800d3d8:	0800d41b 	.word	0x0800d41b
 800d3dc:	0800d42b 	.word	0x0800d42b
 800d3e0:	0800d42b 	.word	0x0800d42b
 800d3e4:	0800d42b 	.word	0x0800d42b
 800d3e8:	0800d423 	.word	0x0800d423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3ec:	f7fa fcdc 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800d3f0:	61f8      	str	r0, [r7, #28]
        break;
 800d3f2:	e020      	b.n	800d436 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3f4:	f7fa fcee 	bl	8007dd4 <HAL_RCC_GetPCLK2Freq>
 800d3f8:	61f8      	str	r0, [r7, #28]
        break;
 800d3fa:	e01c      	b.n	800d436 <UART_SetConfig+0x5a6>
 800d3fc:	40004800 	.word	0x40004800
 800d400:	40021000 	.word	0x40021000
 800d404:	40004c00 	.word	0x40004c00
 800d408:	40005000 	.word	0x40005000
 800d40c:	40008000 	.word	0x40008000
 800d410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d414:	4b4c      	ldr	r3, [pc, #304]	@ (800d548 <UART_SetConfig+0x6b8>)
 800d416:	61fb      	str	r3, [r7, #28]
        break;
 800d418:	e00d      	b.n	800d436 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d41a:	f7fa fc2d 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 800d41e:	61f8      	str	r0, [r7, #28]
        break;
 800d420:	e009      	b.n	800d436 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d426:	61fb      	str	r3, [r7, #28]
        break;
 800d428:	e005      	b.n	800d436 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800d42a:	2300      	movs	r3, #0
 800d42c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d077      	beq.n	800d52c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	005a      	lsls	r2, r3, #1
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	085b      	lsrs	r3, r3, #1
 800d446:	441a      	add	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d450:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	2b0f      	cmp	r3, #15
 800d456:	d916      	bls.n	800d486 <UART_SetConfig+0x5f6>
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d45e:	d212      	bcs.n	800d486 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	b29b      	uxth	r3, r3
 800d464:	f023 030f 	bic.w	r3, r3, #15
 800d468:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	085b      	lsrs	r3, r3, #1
 800d46e:	b29b      	uxth	r3, r3
 800d470:	f003 0307 	and.w	r3, r3, #7
 800d474:	b29a      	uxth	r2, r3
 800d476:	8afb      	ldrh	r3, [r7, #22]
 800d478:	4313      	orrs	r3, r2
 800d47a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	8afa      	ldrh	r2, [r7, #22]
 800d482:	60da      	str	r2, [r3, #12]
 800d484:	e052      	b.n	800d52c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800d48c:	e04e      	b.n	800d52c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d48e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d492:	2b08      	cmp	r3, #8
 800d494:	d827      	bhi.n	800d4e6 <UART_SetConfig+0x656>
 800d496:	a201      	add	r2, pc, #4	@ (adr r2, 800d49c <UART_SetConfig+0x60c>)
 800d498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49c:	0800d4c1 	.word	0x0800d4c1
 800d4a0:	0800d4c9 	.word	0x0800d4c9
 800d4a4:	0800d4d1 	.word	0x0800d4d1
 800d4a8:	0800d4e7 	.word	0x0800d4e7
 800d4ac:	0800d4d7 	.word	0x0800d4d7
 800d4b0:	0800d4e7 	.word	0x0800d4e7
 800d4b4:	0800d4e7 	.word	0x0800d4e7
 800d4b8:	0800d4e7 	.word	0x0800d4e7
 800d4bc:	0800d4df 	.word	0x0800d4df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4c0:	f7fa fc72 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800d4c4:	61f8      	str	r0, [r7, #28]
        break;
 800d4c6:	e014      	b.n	800d4f2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4c8:	f7fa fc84 	bl	8007dd4 <HAL_RCC_GetPCLK2Freq>
 800d4cc:	61f8      	str	r0, [r7, #28]
        break;
 800d4ce:	e010      	b.n	800d4f2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d548 <UART_SetConfig+0x6b8>)
 800d4d2:	61fb      	str	r3, [r7, #28]
        break;
 800d4d4:	e00d      	b.n	800d4f2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4d6:	f7fa fbcf 	bl	8007c78 <HAL_RCC_GetSysClockFreq>
 800d4da:	61f8      	str	r0, [r7, #28]
        break;
 800d4dc:	e009      	b.n	800d4f2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4e2:	61fb      	str	r3, [r7, #28]
        break;
 800d4e4:	e005      	b.n	800d4f2 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800d4f0:	bf00      	nop
    }

    if (pclk != 0U)
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d019      	beq.n	800d52c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	085a      	lsrs	r2, r3, #1
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	441a      	add	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	fbb2 f3f3 	udiv	r3, r2, r3
 800d50a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	2b0f      	cmp	r3, #15
 800d510:	d909      	bls.n	800d526 <UART_SetConfig+0x696>
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d518:	d205      	bcs.n	800d526 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	60da      	str	r2, [r3, #12]
 800d524:	e002      	b.n	800d52c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2200      	movs	r2, #0
 800d536:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d538:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3728      	adds	r7, #40	@ 0x28
 800d540:	46bd      	mov	sp, r7
 800d542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d546:	bf00      	nop
 800d548:	00f42400 	.word	0x00f42400

0800d54c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d558:	2bff      	cmp	r3, #255	@ 0xff
 800d55a:	d904      	bls.n	800d566 <UART_AdvFeatureConfig+0x1a>
 800d55c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800d560:	4891      	ldr	r0, [pc, #580]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d562:	f7f7 f9c3 	bl	80048ec <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d56a:	f003 0308 	and.w	r3, r3, #8
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d018      	beq.n	800d5a4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d576:	2b00      	cmp	r3, #0
 800d578:	d009      	beq.n	800d58e <UART_AdvFeatureConfig+0x42>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d57e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d582:	d004      	beq.n	800d58e <UART_AdvFeatureConfig+0x42>
 800d584:	f640 5152 	movw	r1, #3410	@ 0xd52
 800d588:	4887      	ldr	r0, [pc, #540]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d58a:	f7f7 f9af 	bl	80048ec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a8:	f003 0301 	and.w	r3, r3, #1
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d018      	beq.n	800d5e2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d009      	beq.n	800d5cc <UART_AdvFeatureConfig+0x80>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5c0:	d004      	beq.n	800d5cc <UART_AdvFeatureConfig+0x80>
 800d5c2:	f640 5159 	movw	r1, #3417	@ 0xd59
 800d5c6:	4878      	ldr	r0, [pc, #480]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d5c8:	f7f7 f990 	bl	80048ec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	430a      	orrs	r2, r1
 800d5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e6:	f003 0302 	and.w	r3, r3, #2
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d018      	beq.n	800d620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d009      	beq.n	800d60a <UART_AdvFeatureConfig+0xbe>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5fe:	d004      	beq.n	800d60a <UART_AdvFeatureConfig+0xbe>
 800d600:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800d604:	4868      	ldr	r0, [pc, #416]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d606:	f7f7 f971 	bl	80048ec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	430a      	orrs	r2, r1
 800d61e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d624:	f003 0304 	and.w	r3, r3, #4
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d018      	beq.n	800d65e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d630:	2b00      	cmp	r3, #0
 800d632:	d009      	beq.n	800d648 <UART_AdvFeatureConfig+0xfc>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d638:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d63c:	d004      	beq.n	800d648 <UART_AdvFeatureConfig+0xfc>
 800d63e:	f640 5167 	movw	r1, #3431	@ 0xd67
 800d642:	4859      	ldr	r0, [pc, #356]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d644:	f7f7 f952 	bl	80048ec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	430a      	orrs	r2, r1
 800d65c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d662:	f003 0310 	and.w	r3, r3, #16
 800d666:	2b00      	cmp	r3, #0
 800d668:	d018      	beq.n	800d69c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d009      	beq.n	800d686 <UART_AdvFeatureConfig+0x13a>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d67a:	d004      	beq.n	800d686 <UART_AdvFeatureConfig+0x13a>
 800d67c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800d680:	4849      	ldr	r0, [pc, #292]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d682:	f7f7 f933 	bl	80048ec <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	430a      	orrs	r2, r1
 800d69a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6a0:	f003 0320 	and.w	r3, r3, #32
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d018      	beq.n	800d6da <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d009      	beq.n	800d6c4 <UART_AdvFeatureConfig+0x178>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6b8:	d004      	beq.n	800d6c4 <UART_AdvFeatureConfig+0x178>
 800d6ba:	f640 5175 	movw	r1, #3445	@ 0xd75
 800d6be:	483a      	ldr	r0, [pc, #232]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d6c0:	f7f7 f914 	bl	80048ec <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	430a      	orrs	r2, r1
 800d6d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d06c      	beq.n	800d7c0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a30      	ldr	r2, [pc, #192]	@ (800d7ac <UART_AdvFeatureConfig+0x260>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d018      	beq.n	800d722 <UART_AdvFeatureConfig+0x1d6>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a2e      	ldr	r2, [pc, #184]	@ (800d7b0 <UART_AdvFeatureConfig+0x264>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d013      	beq.n	800d722 <UART_AdvFeatureConfig+0x1d6>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a2d      	ldr	r2, [pc, #180]	@ (800d7b4 <UART_AdvFeatureConfig+0x268>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d00e      	beq.n	800d722 <UART_AdvFeatureConfig+0x1d6>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a2b      	ldr	r2, [pc, #172]	@ (800d7b8 <UART_AdvFeatureConfig+0x26c>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d009      	beq.n	800d722 <UART_AdvFeatureConfig+0x1d6>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a2a      	ldr	r2, [pc, #168]	@ (800d7bc <UART_AdvFeatureConfig+0x270>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d004      	beq.n	800d722 <UART_AdvFeatureConfig+0x1d6>
 800d718:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800d71c:	4822      	ldr	r0, [pc, #136]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d71e:	f7f7 f8e5 	bl	80048ec <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d726:	2b00      	cmp	r3, #0
 800d728:	d009      	beq.n	800d73e <UART_AdvFeatureConfig+0x1f2>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d72e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d732:	d004      	beq.n	800d73e <UART_AdvFeatureConfig+0x1f2>
 800d734:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800d738:	481b      	ldr	r0, [pc, #108]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d73a:	f7f7 f8d7 	bl	80048ec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	430a      	orrs	r2, r1
 800d752:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d75c:	d130      	bne.n	800d7c0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d762:	2b00      	cmp	r3, #0
 800d764:	d013      	beq.n	800d78e <UART_AdvFeatureConfig+0x242>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d76a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d76e:	d00e      	beq.n	800d78e <UART_AdvFeatureConfig+0x242>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d778:	d009      	beq.n	800d78e <UART_AdvFeatureConfig+0x242>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d77e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d782:	d004      	beq.n	800d78e <UART_AdvFeatureConfig+0x242>
 800d784:	f640 5182 	movw	r1, #3458	@ 0xd82
 800d788:	4807      	ldr	r0, [pc, #28]	@ (800d7a8 <UART_AdvFeatureConfig+0x25c>)
 800d78a:	f7f7 f8af 	bl	80048ec <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	430a      	orrs	r2, r1
 800d7a2:	605a      	str	r2, [r3, #4]
 800d7a4:	e00c      	b.n	800d7c0 <UART_AdvFeatureConfig+0x274>
 800d7a6:	bf00      	nop
 800d7a8:	0800f558 	.word	0x0800f558
 800d7ac:	40013800 	.word	0x40013800
 800d7b0:	40004400 	.word	0x40004400
 800d7b4:	40004800 	.word	0x40004800
 800d7b8:	40004c00 	.word	0x40004c00
 800d7bc:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d018      	beq.n	800d7fe <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d009      	beq.n	800d7e8 <UART_AdvFeatureConfig+0x29c>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d7dc:	d004      	beq.n	800d7e8 <UART_AdvFeatureConfig+0x29c>
 800d7de:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800d7e2:	4809      	ldr	r0, [pc, #36]	@ (800d808 <UART_AdvFeatureConfig+0x2bc>)
 800d7e4:	f7f7 f882 	bl	80048ec <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	605a      	str	r2, [r3, #4]
  }
}
 800d7fe:	bf00      	nop
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	0800f558 	.word	0x0800f558

0800d80c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b098      	sub	sp, #96	@ 0x60
 800d810:	af02      	add	r7, sp, #8
 800d812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d81c:	f7f7 fe90 	bl	8005540 <HAL_GetTick>
 800d820:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f003 0308 	and.w	r3, r3, #8
 800d82c:	2b08      	cmp	r3, #8
 800d82e:	d12e      	bne.n	800d88e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d830:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d838:	2200      	movs	r2, #0
 800d83a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f88c 	bl	800d95c <UART_WaitOnFlagUntilTimeout>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d021      	beq.n	800d88e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d852:	e853 3f00 	ldrex	r3, [r3]
 800d856:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d85e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	461a      	mov	r2, r3
 800d866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d868:	647b      	str	r3, [r7, #68]	@ 0x44
 800d86a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d86e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d870:	e841 2300 	strex	r3, r2, [r1]
 800d874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1e6      	bne.n	800d84a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2220      	movs	r2, #32
 800d880:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d88a:	2303      	movs	r3, #3
 800d88c:	e062      	b.n	800d954 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b04      	cmp	r3, #4
 800d89a:	d149      	bne.n	800d930 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d89c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 f856 	bl	800d95c <UART_WaitOnFlagUntilTimeout>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d03c      	beq.n	800d930 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	e853 3f00 	ldrex	r3, [r3]
 800d8c2:	623b      	str	r3, [r7, #32]
   return(result);
 800d8c4:	6a3b      	ldr	r3, [r7, #32]
 800d8c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8dc:	e841 2300 	strex	r3, r2, [r1]
 800d8e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1e6      	bne.n	800d8b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	e853 3f00 	ldrex	r3, [r3]
 800d8f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f023 0301 	bic.w	r3, r3, #1
 800d8fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3308      	adds	r3, #8
 800d906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d908:	61fa      	str	r2, [r7, #28]
 800d90a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90c:	69b9      	ldr	r1, [r7, #24]
 800d90e:	69fa      	ldr	r2, [r7, #28]
 800d910:	e841 2300 	strex	r3, r2, [r1]
 800d914:	617b      	str	r3, [r7, #20]
   return(result);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1e5      	bne.n	800d8e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2220      	movs	r2, #32
 800d920:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d92c:	2303      	movs	r3, #3
 800d92e:	e011      	b.n	800d954 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2220      	movs	r2, #32
 800d934:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2220      	movs	r2, #32
 800d93a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3758      	adds	r7, #88	@ 0x58
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	603b      	str	r3, [r7, #0]
 800d968:	4613      	mov	r3, r2
 800d96a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d96c:	e04f      	b.n	800da0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d974:	d04b      	beq.n	800da0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d976:	f7f7 fde3 	bl	8005540 <HAL_GetTick>
 800d97a:	4602      	mov	r2, r0
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	1ad3      	subs	r3, r2, r3
 800d980:	69ba      	ldr	r2, [r7, #24]
 800d982:	429a      	cmp	r2, r3
 800d984:	d302      	bcc.n	800d98c <UART_WaitOnFlagUntilTimeout+0x30>
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d101      	bne.n	800d990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e04e      	b.n	800da2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f003 0304 	and.w	r3, r3, #4
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d037      	beq.n	800da0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2b80      	cmp	r3, #128	@ 0x80
 800d9a2:	d034      	beq.n	800da0e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2b40      	cmp	r3, #64	@ 0x40
 800d9a8:	d031      	beq.n	800da0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	f003 0308 	and.w	r3, r3, #8
 800d9b4:	2b08      	cmp	r3, #8
 800d9b6:	d110      	bne.n	800d9da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2208      	movs	r2, #8
 800d9be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f000 f838 	bl	800da36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2208      	movs	r2, #8
 800d9ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e029      	b.n	800da2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	69db      	ldr	r3, [r3, #28]
 800d9e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9e8:	d111      	bne.n	800da0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d9f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f000 f81e 	bl	800da36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2220      	movs	r2, #32
 800d9fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e00f      	b.n	800da2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	69da      	ldr	r2, [r3, #28]
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	4013      	ands	r3, r2
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	bf0c      	ite	eq
 800da1e:	2301      	moveq	r3, #1
 800da20:	2300      	movne	r3, #0
 800da22:	b2db      	uxtb	r3, r3
 800da24:	461a      	mov	r2, r3
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d0a0      	beq.n	800d96e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da36:	b480      	push	{r7}
 800da38:	b095      	sub	sp, #84	@ 0x54
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da46:	e853 3f00 	ldrex	r3, [r3]
 800da4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800da4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	461a      	mov	r2, r3
 800da5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800da5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da64:	e841 2300 	strex	r3, r2, [r1]
 800da68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1e6      	bne.n	800da3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	3308      	adds	r3, #8
 800da76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	e853 3f00 	ldrex	r3, [r3]
 800da7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	f023 0301 	bic.w	r3, r3, #1
 800da86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	3308      	adds	r3, #8
 800da8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da98:	e841 2300 	strex	r3, r2, [r1]
 800da9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1e5      	bne.n	800da70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d118      	bne.n	800dade <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	e853 3f00 	ldrex	r3, [r3]
 800dab8:	60bb      	str	r3, [r7, #8]
   return(result);
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	f023 0310 	bic.w	r3, r3, #16
 800dac0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daca:	61bb      	str	r3, [r7, #24]
 800dacc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dace:	6979      	ldr	r1, [r7, #20]
 800dad0:	69ba      	ldr	r2, [r7, #24]
 800dad2:	e841 2300 	strex	r3, r2, [r1]
 800dad6:	613b      	str	r3, [r7, #16]
   return(result);
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1e6      	bne.n	800daac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2220      	movs	r2, #32
 800dae2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800daf2:	bf00      	nop
 800daf4:	3754      	adds	r7, #84	@ 0x54
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
	...

0800db00 <calloc>:
 800db00:	4b02      	ldr	r3, [pc, #8]	@ (800db0c <calloc+0xc>)
 800db02:	460a      	mov	r2, r1
 800db04:	4601      	mov	r1, r0
 800db06:	6818      	ldr	r0, [r3, #0]
 800db08:	f000 b802 	b.w	800db10 <_calloc_r>
 800db0c:	2000002c 	.word	0x2000002c

0800db10 <_calloc_r>:
 800db10:	b570      	push	{r4, r5, r6, lr}
 800db12:	fba1 5402 	umull	r5, r4, r1, r2
 800db16:	b934      	cbnz	r4, 800db26 <_calloc_r+0x16>
 800db18:	4629      	mov	r1, r5
 800db1a:	f000 f83f 	bl	800db9c <_malloc_r>
 800db1e:	4606      	mov	r6, r0
 800db20:	b928      	cbnz	r0, 800db2e <_calloc_r+0x1e>
 800db22:	4630      	mov	r0, r6
 800db24:	bd70      	pop	{r4, r5, r6, pc}
 800db26:	220c      	movs	r2, #12
 800db28:	6002      	str	r2, [r0, #0]
 800db2a:	2600      	movs	r6, #0
 800db2c:	e7f9      	b.n	800db22 <_calloc_r+0x12>
 800db2e:	462a      	mov	r2, r5
 800db30:	4621      	mov	r1, r4
 800db32:	f000 fac7 	bl	800e0c4 <memset>
 800db36:	e7f4      	b.n	800db22 <_calloc_r+0x12>

0800db38 <malloc>:
 800db38:	4b02      	ldr	r3, [pc, #8]	@ (800db44 <malloc+0xc>)
 800db3a:	4601      	mov	r1, r0
 800db3c:	6818      	ldr	r0, [r3, #0]
 800db3e:	f000 b82d 	b.w	800db9c <_malloc_r>
 800db42:	bf00      	nop
 800db44:	2000002c 	.word	0x2000002c

0800db48 <free>:
 800db48:	4b02      	ldr	r3, [pc, #8]	@ (800db54 <free+0xc>)
 800db4a:	4601      	mov	r1, r0
 800db4c:	6818      	ldr	r0, [r3, #0]
 800db4e:	f000 bb53 	b.w	800e1f8 <_free_r>
 800db52:	bf00      	nop
 800db54:	2000002c 	.word	0x2000002c

0800db58 <sbrk_aligned>:
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	4e0f      	ldr	r6, [pc, #60]	@ (800db98 <sbrk_aligned+0x40>)
 800db5c:	460c      	mov	r4, r1
 800db5e:	6831      	ldr	r1, [r6, #0]
 800db60:	4605      	mov	r5, r0
 800db62:	b911      	cbnz	r1, 800db6a <sbrk_aligned+0x12>
 800db64:	f000 faea 	bl	800e13c <_sbrk_r>
 800db68:	6030      	str	r0, [r6, #0]
 800db6a:	4621      	mov	r1, r4
 800db6c:	4628      	mov	r0, r5
 800db6e:	f000 fae5 	bl	800e13c <_sbrk_r>
 800db72:	1c43      	adds	r3, r0, #1
 800db74:	d103      	bne.n	800db7e <sbrk_aligned+0x26>
 800db76:	f04f 34ff 	mov.w	r4, #4294967295
 800db7a:	4620      	mov	r0, r4
 800db7c:	bd70      	pop	{r4, r5, r6, pc}
 800db7e:	1cc4      	adds	r4, r0, #3
 800db80:	f024 0403 	bic.w	r4, r4, #3
 800db84:	42a0      	cmp	r0, r4
 800db86:	d0f8      	beq.n	800db7a <sbrk_aligned+0x22>
 800db88:	1a21      	subs	r1, r4, r0
 800db8a:	4628      	mov	r0, r5
 800db8c:	f000 fad6 	bl	800e13c <_sbrk_r>
 800db90:	3001      	adds	r0, #1
 800db92:	d1f2      	bne.n	800db7a <sbrk_aligned+0x22>
 800db94:	e7ef      	b.n	800db76 <sbrk_aligned+0x1e>
 800db96:	bf00      	nop
 800db98:	200010e4 	.word	0x200010e4

0800db9c <_malloc_r>:
 800db9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dba0:	1ccd      	adds	r5, r1, #3
 800dba2:	f025 0503 	bic.w	r5, r5, #3
 800dba6:	3508      	adds	r5, #8
 800dba8:	2d0c      	cmp	r5, #12
 800dbaa:	bf38      	it	cc
 800dbac:	250c      	movcc	r5, #12
 800dbae:	2d00      	cmp	r5, #0
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	db01      	blt.n	800dbb8 <_malloc_r+0x1c>
 800dbb4:	42a9      	cmp	r1, r5
 800dbb6:	d904      	bls.n	800dbc2 <_malloc_r+0x26>
 800dbb8:	230c      	movs	r3, #12
 800dbba:	6033      	str	r3, [r6, #0]
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc98 <_malloc_r+0xfc>
 800dbc6:	f000 f869 	bl	800dc9c <__malloc_lock>
 800dbca:	f8d8 3000 	ldr.w	r3, [r8]
 800dbce:	461c      	mov	r4, r3
 800dbd0:	bb44      	cbnz	r4, 800dc24 <_malloc_r+0x88>
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f7ff ffbf 	bl	800db58 <sbrk_aligned>
 800dbda:	1c43      	adds	r3, r0, #1
 800dbdc:	4604      	mov	r4, r0
 800dbde:	d158      	bne.n	800dc92 <_malloc_r+0xf6>
 800dbe0:	f8d8 4000 	ldr.w	r4, [r8]
 800dbe4:	4627      	mov	r7, r4
 800dbe6:	2f00      	cmp	r7, #0
 800dbe8:	d143      	bne.n	800dc72 <_malloc_r+0xd6>
 800dbea:	2c00      	cmp	r4, #0
 800dbec:	d04b      	beq.n	800dc86 <_malloc_r+0xea>
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	4630      	mov	r0, r6
 800dbf4:	eb04 0903 	add.w	r9, r4, r3
 800dbf8:	f000 faa0 	bl	800e13c <_sbrk_r>
 800dbfc:	4581      	cmp	r9, r0
 800dbfe:	d142      	bne.n	800dc86 <_malloc_r+0xea>
 800dc00:	6821      	ldr	r1, [r4, #0]
 800dc02:	1a6d      	subs	r5, r5, r1
 800dc04:	4629      	mov	r1, r5
 800dc06:	4630      	mov	r0, r6
 800dc08:	f7ff ffa6 	bl	800db58 <sbrk_aligned>
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	d03a      	beq.n	800dc86 <_malloc_r+0xea>
 800dc10:	6823      	ldr	r3, [r4, #0]
 800dc12:	442b      	add	r3, r5
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	f8d8 3000 	ldr.w	r3, [r8]
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	bb62      	cbnz	r2, 800dc78 <_malloc_r+0xdc>
 800dc1e:	f8c8 7000 	str.w	r7, [r8]
 800dc22:	e00f      	b.n	800dc44 <_malloc_r+0xa8>
 800dc24:	6822      	ldr	r2, [r4, #0]
 800dc26:	1b52      	subs	r2, r2, r5
 800dc28:	d420      	bmi.n	800dc6c <_malloc_r+0xd0>
 800dc2a:	2a0b      	cmp	r2, #11
 800dc2c:	d917      	bls.n	800dc5e <_malloc_r+0xc2>
 800dc2e:	1961      	adds	r1, r4, r5
 800dc30:	42a3      	cmp	r3, r4
 800dc32:	6025      	str	r5, [r4, #0]
 800dc34:	bf18      	it	ne
 800dc36:	6059      	strne	r1, [r3, #4]
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	bf08      	it	eq
 800dc3c:	f8c8 1000 	streq.w	r1, [r8]
 800dc40:	5162      	str	r2, [r4, r5]
 800dc42:	604b      	str	r3, [r1, #4]
 800dc44:	4630      	mov	r0, r6
 800dc46:	f000 f82f 	bl	800dca8 <__malloc_unlock>
 800dc4a:	f104 000b 	add.w	r0, r4, #11
 800dc4e:	1d23      	adds	r3, r4, #4
 800dc50:	f020 0007 	bic.w	r0, r0, #7
 800dc54:	1ac2      	subs	r2, r0, r3
 800dc56:	bf1c      	itt	ne
 800dc58:	1a1b      	subne	r3, r3, r0
 800dc5a:	50a3      	strne	r3, [r4, r2]
 800dc5c:	e7af      	b.n	800dbbe <_malloc_r+0x22>
 800dc5e:	6862      	ldr	r2, [r4, #4]
 800dc60:	42a3      	cmp	r3, r4
 800dc62:	bf0c      	ite	eq
 800dc64:	f8c8 2000 	streq.w	r2, [r8]
 800dc68:	605a      	strne	r2, [r3, #4]
 800dc6a:	e7eb      	b.n	800dc44 <_malloc_r+0xa8>
 800dc6c:	4623      	mov	r3, r4
 800dc6e:	6864      	ldr	r4, [r4, #4]
 800dc70:	e7ae      	b.n	800dbd0 <_malloc_r+0x34>
 800dc72:	463c      	mov	r4, r7
 800dc74:	687f      	ldr	r7, [r7, #4]
 800dc76:	e7b6      	b.n	800dbe6 <_malloc_r+0x4a>
 800dc78:	461a      	mov	r2, r3
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	42a3      	cmp	r3, r4
 800dc7e:	d1fb      	bne.n	800dc78 <_malloc_r+0xdc>
 800dc80:	2300      	movs	r3, #0
 800dc82:	6053      	str	r3, [r2, #4]
 800dc84:	e7de      	b.n	800dc44 <_malloc_r+0xa8>
 800dc86:	230c      	movs	r3, #12
 800dc88:	6033      	str	r3, [r6, #0]
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f000 f80c 	bl	800dca8 <__malloc_unlock>
 800dc90:	e794      	b.n	800dbbc <_malloc_r+0x20>
 800dc92:	6005      	str	r5, [r0, #0]
 800dc94:	e7d6      	b.n	800dc44 <_malloc_r+0xa8>
 800dc96:	bf00      	nop
 800dc98:	200010e8 	.word	0x200010e8

0800dc9c <__malloc_lock>:
 800dc9c:	4801      	ldr	r0, [pc, #4]	@ (800dca4 <__malloc_lock+0x8>)
 800dc9e:	f000 ba9a 	b.w	800e1d6 <__retarget_lock_acquire_recursive>
 800dca2:	bf00      	nop
 800dca4:	2000122c 	.word	0x2000122c

0800dca8 <__malloc_unlock>:
 800dca8:	4801      	ldr	r0, [pc, #4]	@ (800dcb0 <__malloc_unlock+0x8>)
 800dcaa:	f000 ba95 	b.w	800e1d8 <__retarget_lock_release_recursive>
 800dcae:	bf00      	nop
 800dcb0:	2000122c 	.word	0x2000122c

0800dcb4 <std>:
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	b510      	push	{r4, lr}
 800dcb8:	4604      	mov	r4, r0
 800dcba:	e9c0 3300 	strd	r3, r3, [r0]
 800dcbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcc2:	6083      	str	r3, [r0, #8]
 800dcc4:	8181      	strh	r1, [r0, #12]
 800dcc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800dcc8:	81c2      	strh	r2, [r0, #14]
 800dcca:	6183      	str	r3, [r0, #24]
 800dccc:	4619      	mov	r1, r3
 800dcce:	2208      	movs	r2, #8
 800dcd0:	305c      	adds	r0, #92	@ 0x5c
 800dcd2:	f000 f9f7 	bl	800e0c4 <memset>
 800dcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd0c <std+0x58>)
 800dcd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800dcda:	4b0d      	ldr	r3, [pc, #52]	@ (800dd10 <std+0x5c>)
 800dcdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dcde:	4b0d      	ldr	r3, [pc, #52]	@ (800dd14 <std+0x60>)
 800dce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dce2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd18 <std+0x64>)
 800dce4:	6323      	str	r3, [r4, #48]	@ 0x30
 800dce6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd1c <std+0x68>)
 800dce8:	6224      	str	r4, [r4, #32]
 800dcea:	429c      	cmp	r4, r3
 800dcec:	d006      	beq.n	800dcfc <std+0x48>
 800dcee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dcf2:	4294      	cmp	r4, r2
 800dcf4:	d002      	beq.n	800dcfc <std+0x48>
 800dcf6:	33d0      	adds	r3, #208	@ 0xd0
 800dcf8:	429c      	cmp	r4, r3
 800dcfa:	d105      	bne.n	800dd08 <std+0x54>
 800dcfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd04:	f000 ba66 	b.w	800e1d4 <__retarget_lock_init_recursive>
 800dd08:	bd10      	pop	{r4, pc}
 800dd0a:	bf00      	nop
 800dd0c:	0800dfc5 	.word	0x0800dfc5
 800dd10:	0800dfe7 	.word	0x0800dfe7
 800dd14:	0800e01f 	.word	0x0800e01f
 800dd18:	0800e043 	.word	0x0800e043
 800dd1c:	200010ec 	.word	0x200010ec

0800dd20 <stdio_exit_handler>:
 800dd20:	4a02      	ldr	r2, [pc, #8]	@ (800dd2c <stdio_exit_handler+0xc>)
 800dd22:	4903      	ldr	r1, [pc, #12]	@ (800dd30 <stdio_exit_handler+0x10>)
 800dd24:	4803      	ldr	r0, [pc, #12]	@ (800dd34 <stdio_exit_handler+0x14>)
 800dd26:	f000 b869 	b.w	800ddfc <_fwalk_sglue>
 800dd2a:	bf00      	nop
 800dd2c:	20000020 	.word	0x20000020
 800dd30:	0800ebe1 	.word	0x0800ebe1
 800dd34:	20000030 	.word	0x20000030

0800dd38 <cleanup_stdio>:
 800dd38:	6841      	ldr	r1, [r0, #4]
 800dd3a:	4b0c      	ldr	r3, [pc, #48]	@ (800dd6c <cleanup_stdio+0x34>)
 800dd3c:	4299      	cmp	r1, r3
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	4604      	mov	r4, r0
 800dd42:	d001      	beq.n	800dd48 <cleanup_stdio+0x10>
 800dd44:	f000 ff4c 	bl	800ebe0 <_fflush_r>
 800dd48:	68a1      	ldr	r1, [r4, #8]
 800dd4a:	4b09      	ldr	r3, [pc, #36]	@ (800dd70 <cleanup_stdio+0x38>)
 800dd4c:	4299      	cmp	r1, r3
 800dd4e:	d002      	beq.n	800dd56 <cleanup_stdio+0x1e>
 800dd50:	4620      	mov	r0, r4
 800dd52:	f000 ff45 	bl	800ebe0 <_fflush_r>
 800dd56:	68e1      	ldr	r1, [r4, #12]
 800dd58:	4b06      	ldr	r3, [pc, #24]	@ (800dd74 <cleanup_stdio+0x3c>)
 800dd5a:	4299      	cmp	r1, r3
 800dd5c:	d004      	beq.n	800dd68 <cleanup_stdio+0x30>
 800dd5e:	4620      	mov	r0, r4
 800dd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd64:	f000 bf3c 	b.w	800ebe0 <_fflush_r>
 800dd68:	bd10      	pop	{r4, pc}
 800dd6a:	bf00      	nop
 800dd6c:	200010ec 	.word	0x200010ec
 800dd70:	20001154 	.word	0x20001154
 800dd74:	200011bc 	.word	0x200011bc

0800dd78 <global_stdio_init.part.0>:
 800dd78:	b510      	push	{r4, lr}
 800dd7a:	4b0b      	ldr	r3, [pc, #44]	@ (800dda8 <global_stdio_init.part.0+0x30>)
 800dd7c:	4c0b      	ldr	r4, [pc, #44]	@ (800ddac <global_stdio_init.part.0+0x34>)
 800dd7e:	4a0c      	ldr	r2, [pc, #48]	@ (800ddb0 <global_stdio_init.part.0+0x38>)
 800dd80:	601a      	str	r2, [r3, #0]
 800dd82:	4620      	mov	r0, r4
 800dd84:	2200      	movs	r2, #0
 800dd86:	2104      	movs	r1, #4
 800dd88:	f7ff ff94 	bl	800dcb4 <std>
 800dd8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd90:	2201      	movs	r2, #1
 800dd92:	2109      	movs	r1, #9
 800dd94:	f7ff ff8e 	bl	800dcb4 <std>
 800dd98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dda2:	2112      	movs	r1, #18
 800dda4:	f7ff bf86 	b.w	800dcb4 <std>
 800dda8:	20001224 	.word	0x20001224
 800ddac:	200010ec 	.word	0x200010ec
 800ddb0:	0800dd21 	.word	0x0800dd21

0800ddb4 <__sfp_lock_acquire>:
 800ddb4:	4801      	ldr	r0, [pc, #4]	@ (800ddbc <__sfp_lock_acquire+0x8>)
 800ddb6:	f000 ba0e 	b.w	800e1d6 <__retarget_lock_acquire_recursive>
 800ddba:	bf00      	nop
 800ddbc:	2000122d 	.word	0x2000122d

0800ddc0 <__sfp_lock_release>:
 800ddc0:	4801      	ldr	r0, [pc, #4]	@ (800ddc8 <__sfp_lock_release+0x8>)
 800ddc2:	f000 ba09 	b.w	800e1d8 <__retarget_lock_release_recursive>
 800ddc6:	bf00      	nop
 800ddc8:	2000122d 	.word	0x2000122d

0800ddcc <__sinit>:
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	4604      	mov	r4, r0
 800ddd0:	f7ff fff0 	bl	800ddb4 <__sfp_lock_acquire>
 800ddd4:	6a23      	ldr	r3, [r4, #32]
 800ddd6:	b11b      	cbz	r3, 800dde0 <__sinit+0x14>
 800ddd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dddc:	f7ff bff0 	b.w	800ddc0 <__sfp_lock_release>
 800dde0:	4b04      	ldr	r3, [pc, #16]	@ (800ddf4 <__sinit+0x28>)
 800dde2:	6223      	str	r3, [r4, #32]
 800dde4:	4b04      	ldr	r3, [pc, #16]	@ (800ddf8 <__sinit+0x2c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1f5      	bne.n	800ddd8 <__sinit+0xc>
 800ddec:	f7ff ffc4 	bl	800dd78 <global_stdio_init.part.0>
 800ddf0:	e7f2      	b.n	800ddd8 <__sinit+0xc>
 800ddf2:	bf00      	nop
 800ddf4:	0800dd39 	.word	0x0800dd39
 800ddf8:	20001224 	.word	0x20001224

0800ddfc <_fwalk_sglue>:
 800ddfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de00:	4607      	mov	r7, r0
 800de02:	4688      	mov	r8, r1
 800de04:	4614      	mov	r4, r2
 800de06:	2600      	movs	r6, #0
 800de08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de0c:	f1b9 0901 	subs.w	r9, r9, #1
 800de10:	d505      	bpl.n	800de1e <_fwalk_sglue+0x22>
 800de12:	6824      	ldr	r4, [r4, #0]
 800de14:	2c00      	cmp	r4, #0
 800de16:	d1f7      	bne.n	800de08 <_fwalk_sglue+0xc>
 800de18:	4630      	mov	r0, r6
 800de1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de1e:	89ab      	ldrh	r3, [r5, #12]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d907      	bls.n	800de34 <_fwalk_sglue+0x38>
 800de24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de28:	3301      	adds	r3, #1
 800de2a:	d003      	beq.n	800de34 <_fwalk_sglue+0x38>
 800de2c:	4629      	mov	r1, r5
 800de2e:	4638      	mov	r0, r7
 800de30:	47c0      	blx	r8
 800de32:	4306      	orrs	r6, r0
 800de34:	3568      	adds	r5, #104	@ 0x68
 800de36:	e7e9      	b.n	800de0c <_fwalk_sglue+0x10>

0800de38 <iprintf>:
 800de38:	b40f      	push	{r0, r1, r2, r3}
 800de3a:	b507      	push	{r0, r1, r2, lr}
 800de3c:	4906      	ldr	r1, [pc, #24]	@ (800de58 <iprintf+0x20>)
 800de3e:	ab04      	add	r3, sp, #16
 800de40:	6808      	ldr	r0, [r1, #0]
 800de42:	f853 2b04 	ldr.w	r2, [r3], #4
 800de46:	6881      	ldr	r1, [r0, #8]
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	f000 fba1 	bl	800e590 <_vfiprintf_r>
 800de4e:	b003      	add	sp, #12
 800de50:	f85d eb04 	ldr.w	lr, [sp], #4
 800de54:	b004      	add	sp, #16
 800de56:	4770      	bx	lr
 800de58:	2000002c 	.word	0x2000002c

0800de5c <setvbuf>:
 800de5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de60:	461d      	mov	r5, r3
 800de62:	4b57      	ldr	r3, [pc, #348]	@ (800dfc0 <setvbuf+0x164>)
 800de64:	681f      	ldr	r7, [r3, #0]
 800de66:	4604      	mov	r4, r0
 800de68:	460e      	mov	r6, r1
 800de6a:	4690      	mov	r8, r2
 800de6c:	b127      	cbz	r7, 800de78 <setvbuf+0x1c>
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	b913      	cbnz	r3, 800de78 <setvbuf+0x1c>
 800de72:	4638      	mov	r0, r7
 800de74:	f7ff ffaa 	bl	800ddcc <__sinit>
 800de78:	f1b8 0f02 	cmp.w	r8, #2
 800de7c:	d006      	beq.n	800de8c <setvbuf+0x30>
 800de7e:	f1b8 0f01 	cmp.w	r8, #1
 800de82:	f200 809a 	bhi.w	800dfba <setvbuf+0x15e>
 800de86:	2d00      	cmp	r5, #0
 800de88:	f2c0 8097 	blt.w	800dfba <setvbuf+0x15e>
 800de8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de8e:	07d9      	lsls	r1, r3, #31
 800de90:	d405      	bmi.n	800de9e <setvbuf+0x42>
 800de92:	89a3      	ldrh	r3, [r4, #12]
 800de94:	059a      	lsls	r2, r3, #22
 800de96:	d402      	bmi.n	800de9e <setvbuf+0x42>
 800de98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de9a:	f000 f99c 	bl	800e1d6 <__retarget_lock_acquire_recursive>
 800de9e:	4621      	mov	r1, r4
 800dea0:	4638      	mov	r0, r7
 800dea2:	f000 fe9d 	bl	800ebe0 <_fflush_r>
 800dea6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dea8:	b141      	cbz	r1, 800debc <setvbuf+0x60>
 800deaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800deae:	4299      	cmp	r1, r3
 800deb0:	d002      	beq.n	800deb8 <setvbuf+0x5c>
 800deb2:	4638      	mov	r0, r7
 800deb4:	f000 f9a0 	bl	800e1f8 <_free_r>
 800deb8:	2300      	movs	r3, #0
 800deba:	6363      	str	r3, [r4, #52]	@ 0x34
 800debc:	2300      	movs	r3, #0
 800debe:	61a3      	str	r3, [r4, #24]
 800dec0:	6063      	str	r3, [r4, #4]
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	061b      	lsls	r3, r3, #24
 800dec6:	d503      	bpl.n	800ded0 <setvbuf+0x74>
 800dec8:	6921      	ldr	r1, [r4, #16]
 800deca:	4638      	mov	r0, r7
 800decc:	f000 f994 	bl	800e1f8 <_free_r>
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800ded6:	f023 0303 	bic.w	r3, r3, #3
 800deda:	f1b8 0f02 	cmp.w	r8, #2
 800dede:	81a3      	strh	r3, [r4, #12]
 800dee0:	d061      	beq.n	800dfa6 <setvbuf+0x14a>
 800dee2:	ab01      	add	r3, sp, #4
 800dee4:	466a      	mov	r2, sp
 800dee6:	4621      	mov	r1, r4
 800dee8:	4638      	mov	r0, r7
 800deea:	f000 fea1 	bl	800ec30 <__swhatbuf_r>
 800deee:	89a3      	ldrh	r3, [r4, #12]
 800def0:	4318      	orrs	r0, r3
 800def2:	81a0      	strh	r0, [r4, #12]
 800def4:	bb2d      	cbnz	r5, 800df42 <setvbuf+0xe6>
 800def6:	9d00      	ldr	r5, [sp, #0]
 800def8:	4628      	mov	r0, r5
 800defa:	f7ff fe1d 	bl	800db38 <malloc>
 800defe:	4606      	mov	r6, r0
 800df00:	2800      	cmp	r0, #0
 800df02:	d152      	bne.n	800dfaa <setvbuf+0x14e>
 800df04:	f8dd 9000 	ldr.w	r9, [sp]
 800df08:	45a9      	cmp	r9, r5
 800df0a:	d140      	bne.n	800df8e <setvbuf+0x132>
 800df0c:	f04f 35ff 	mov.w	r5, #4294967295
 800df10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df14:	f043 0202 	orr.w	r2, r3, #2
 800df18:	81a2      	strh	r2, [r4, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	60a2      	str	r2, [r4, #8]
 800df1e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800df22:	6022      	str	r2, [r4, #0]
 800df24:	6122      	str	r2, [r4, #16]
 800df26:	2201      	movs	r2, #1
 800df28:	6162      	str	r2, [r4, #20]
 800df2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df2c:	07d6      	lsls	r6, r2, #31
 800df2e:	d404      	bmi.n	800df3a <setvbuf+0xde>
 800df30:	0598      	lsls	r0, r3, #22
 800df32:	d402      	bmi.n	800df3a <setvbuf+0xde>
 800df34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df36:	f000 f94f 	bl	800e1d8 <__retarget_lock_release_recursive>
 800df3a:	4628      	mov	r0, r5
 800df3c:	b003      	add	sp, #12
 800df3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df42:	2e00      	cmp	r6, #0
 800df44:	d0d8      	beq.n	800def8 <setvbuf+0x9c>
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	b913      	cbnz	r3, 800df50 <setvbuf+0xf4>
 800df4a:	4638      	mov	r0, r7
 800df4c:	f7ff ff3e 	bl	800ddcc <__sinit>
 800df50:	f1b8 0f01 	cmp.w	r8, #1
 800df54:	bf08      	it	eq
 800df56:	89a3      	ldrheq	r3, [r4, #12]
 800df58:	6026      	str	r6, [r4, #0]
 800df5a:	bf04      	itt	eq
 800df5c:	f043 0301 	orreq.w	r3, r3, #1
 800df60:	81a3      	strheq	r3, [r4, #12]
 800df62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df66:	f013 0208 	ands.w	r2, r3, #8
 800df6a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800df6e:	d01e      	beq.n	800dfae <setvbuf+0x152>
 800df70:	07d9      	lsls	r1, r3, #31
 800df72:	bf41      	itttt	mi
 800df74:	2200      	movmi	r2, #0
 800df76:	426d      	negmi	r5, r5
 800df78:	60a2      	strmi	r2, [r4, #8]
 800df7a:	61a5      	strmi	r5, [r4, #24]
 800df7c:	bf58      	it	pl
 800df7e:	60a5      	strpl	r5, [r4, #8]
 800df80:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df82:	07d2      	lsls	r2, r2, #31
 800df84:	d401      	bmi.n	800df8a <setvbuf+0x12e>
 800df86:	059b      	lsls	r3, r3, #22
 800df88:	d513      	bpl.n	800dfb2 <setvbuf+0x156>
 800df8a:	2500      	movs	r5, #0
 800df8c:	e7d5      	b.n	800df3a <setvbuf+0xde>
 800df8e:	4648      	mov	r0, r9
 800df90:	f7ff fdd2 	bl	800db38 <malloc>
 800df94:	4606      	mov	r6, r0
 800df96:	2800      	cmp	r0, #0
 800df98:	d0b8      	beq.n	800df0c <setvbuf+0xb0>
 800df9a:	89a3      	ldrh	r3, [r4, #12]
 800df9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfa0:	81a3      	strh	r3, [r4, #12]
 800dfa2:	464d      	mov	r5, r9
 800dfa4:	e7cf      	b.n	800df46 <setvbuf+0xea>
 800dfa6:	2500      	movs	r5, #0
 800dfa8:	e7b2      	b.n	800df10 <setvbuf+0xb4>
 800dfaa:	46a9      	mov	r9, r5
 800dfac:	e7f5      	b.n	800df9a <setvbuf+0x13e>
 800dfae:	60a2      	str	r2, [r4, #8]
 800dfb0:	e7e6      	b.n	800df80 <setvbuf+0x124>
 800dfb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfb4:	f000 f910 	bl	800e1d8 <__retarget_lock_release_recursive>
 800dfb8:	e7e7      	b.n	800df8a <setvbuf+0x12e>
 800dfba:	f04f 35ff 	mov.w	r5, #4294967295
 800dfbe:	e7bc      	b.n	800df3a <setvbuf+0xde>
 800dfc0:	2000002c 	.word	0x2000002c

0800dfc4 <__sread>:
 800dfc4:	b510      	push	{r4, lr}
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfcc:	f000 f8a4 	bl	800e118 <_read_r>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	bfab      	itete	ge
 800dfd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dfd6:	89a3      	ldrhlt	r3, [r4, #12]
 800dfd8:	181b      	addge	r3, r3, r0
 800dfda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dfde:	bfac      	ite	ge
 800dfe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dfe2:	81a3      	strhlt	r3, [r4, #12]
 800dfe4:	bd10      	pop	{r4, pc}

0800dfe6 <__swrite>:
 800dfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfea:	461f      	mov	r7, r3
 800dfec:	898b      	ldrh	r3, [r1, #12]
 800dfee:	05db      	lsls	r3, r3, #23
 800dff0:	4605      	mov	r5, r0
 800dff2:	460c      	mov	r4, r1
 800dff4:	4616      	mov	r6, r2
 800dff6:	d505      	bpl.n	800e004 <__swrite+0x1e>
 800dff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dffc:	2302      	movs	r3, #2
 800dffe:	2200      	movs	r2, #0
 800e000:	f000 f878 	bl	800e0f4 <_lseek_r>
 800e004:	89a3      	ldrh	r3, [r4, #12]
 800e006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e00a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e00e:	81a3      	strh	r3, [r4, #12]
 800e010:	4632      	mov	r2, r6
 800e012:	463b      	mov	r3, r7
 800e014:	4628      	mov	r0, r5
 800e016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e01a:	f000 b89f 	b.w	800e15c <_write_r>

0800e01e <__sseek>:
 800e01e:	b510      	push	{r4, lr}
 800e020:	460c      	mov	r4, r1
 800e022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e026:	f000 f865 	bl	800e0f4 <_lseek_r>
 800e02a:	1c43      	adds	r3, r0, #1
 800e02c:	89a3      	ldrh	r3, [r4, #12]
 800e02e:	bf15      	itete	ne
 800e030:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e03a:	81a3      	strheq	r3, [r4, #12]
 800e03c:	bf18      	it	ne
 800e03e:	81a3      	strhne	r3, [r4, #12]
 800e040:	bd10      	pop	{r4, pc}

0800e042 <__sclose>:
 800e042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e046:	f000 b845 	b.w	800e0d4 <_close_r>

0800e04a <_vsniprintf_r>:
 800e04a:	b530      	push	{r4, r5, lr}
 800e04c:	4614      	mov	r4, r2
 800e04e:	2c00      	cmp	r4, #0
 800e050:	b09b      	sub	sp, #108	@ 0x6c
 800e052:	4605      	mov	r5, r0
 800e054:	461a      	mov	r2, r3
 800e056:	da05      	bge.n	800e064 <_vsniprintf_r+0x1a>
 800e058:	238b      	movs	r3, #139	@ 0x8b
 800e05a:	6003      	str	r3, [r0, #0]
 800e05c:	f04f 30ff 	mov.w	r0, #4294967295
 800e060:	b01b      	add	sp, #108	@ 0x6c
 800e062:	bd30      	pop	{r4, r5, pc}
 800e064:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e068:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e06c:	f04f 0300 	mov.w	r3, #0
 800e070:	9319      	str	r3, [sp, #100]	@ 0x64
 800e072:	bf14      	ite	ne
 800e074:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e078:	4623      	moveq	r3, r4
 800e07a:	9302      	str	r3, [sp, #8]
 800e07c:	9305      	str	r3, [sp, #20]
 800e07e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e082:	9100      	str	r1, [sp, #0]
 800e084:	9104      	str	r1, [sp, #16]
 800e086:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e08a:	4669      	mov	r1, sp
 800e08c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e08e:	f000 f959 	bl	800e344 <_svfiprintf_r>
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	bfbc      	itt	lt
 800e096:	238b      	movlt	r3, #139	@ 0x8b
 800e098:	602b      	strlt	r3, [r5, #0]
 800e09a:	2c00      	cmp	r4, #0
 800e09c:	d0e0      	beq.n	800e060 <_vsniprintf_r+0x16>
 800e09e:	9b00      	ldr	r3, [sp, #0]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	701a      	strb	r2, [r3, #0]
 800e0a4:	e7dc      	b.n	800e060 <_vsniprintf_r+0x16>
	...

0800e0a8 <vsniprintf>:
 800e0a8:	b507      	push	{r0, r1, r2, lr}
 800e0aa:	9300      	str	r3, [sp, #0]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	460a      	mov	r2, r1
 800e0b0:	4601      	mov	r1, r0
 800e0b2:	4803      	ldr	r0, [pc, #12]	@ (800e0c0 <vsniprintf+0x18>)
 800e0b4:	6800      	ldr	r0, [r0, #0]
 800e0b6:	f7ff ffc8 	bl	800e04a <_vsniprintf_r>
 800e0ba:	b003      	add	sp, #12
 800e0bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0c0:	2000002c 	.word	0x2000002c

0800e0c4 <memset>:
 800e0c4:	4402      	add	r2, r0
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d100      	bne.n	800e0ce <memset+0xa>
 800e0cc:	4770      	bx	lr
 800e0ce:	f803 1b01 	strb.w	r1, [r3], #1
 800e0d2:	e7f9      	b.n	800e0c8 <memset+0x4>

0800e0d4 <_close_r>:
 800e0d4:	b538      	push	{r3, r4, r5, lr}
 800e0d6:	4d06      	ldr	r5, [pc, #24]	@ (800e0f0 <_close_r+0x1c>)
 800e0d8:	2300      	movs	r3, #0
 800e0da:	4604      	mov	r4, r0
 800e0dc:	4608      	mov	r0, r1
 800e0de:	602b      	str	r3, [r5, #0]
 800e0e0:	f7f6 fdb8 	bl	8004c54 <_close>
 800e0e4:	1c43      	adds	r3, r0, #1
 800e0e6:	d102      	bne.n	800e0ee <_close_r+0x1a>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	b103      	cbz	r3, 800e0ee <_close_r+0x1a>
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	20001228 	.word	0x20001228

0800e0f4 <_lseek_r>:
 800e0f4:	b538      	push	{r3, r4, r5, lr}
 800e0f6:	4d07      	ldr	r5, [pc, #28]	@ (800e114 <_lseek_r+0x20>)
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	4608      	mov	r0, r1
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	2200      	movs	r2, #0
 800e100:	602a      	str	r2, [r5, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	f7f6 fdcd 	bl	8004ca2 <_lseek>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	d102      	bne.n	800e112 <_lseek_r+0x1e>
 800e10c:	682b      	ldr	r3, [r5, #0]
 800e10e:	b103      	cbz	r3, 800e112 <_lseek_r+0x1e>
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	bd38      	pop	{r3, r4, r5, pc}
 800e114:	20001228 	.word	0x20001228

0800e118 <_read_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d07      	ldr	r5, [pc, #28]	@ (800e138 <_read_r+0x20>)
 800e11c:	4604      	mov	r4, r0
 800e11e:	4608      	mov	r0, r1
 800e120:	4611      	mov	r1, r2
 800e122:	2200      	movs	r2, #0
 800e124:	602a      	str	r2, [r5, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	f7f6 fd77 	bl	8004c1a <_read>
 800e12c:	1c43      	adds	r3, r0, #1
 800e12e:	d102      	bne.n	800e136 <_read_r+0x1e>
 800e130:	682b      	ldr	r3, [r5, #0]
 800e132:	b103      	cbz	r3, 800e136 <_read_r+0x1e>
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	bd38      	pop	{r3, r4, r5, pc}
 800e138:	20001228 	.word	0x20001228

0800e13c <_sbrk_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4d06      	ldr	r5, [pc, #24]	@ (800e158 <_sbrk_r+0x1c>)
 800e140:	2300      	movs	r3, #0
 800e142:	4604      	mov	r4, r0
 800e144:	4608      	mov	r0, r1
 800e146:	602b      	str	r3, [r5, #0]
 800e148:	f7f6 fdb8 	bl	8004cbc <_sbrk>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d102      	bne.n	800e156 <_sbrk_r+0x1a>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	b103      	cbz	r3, 800e156 <_sbrk_r+0x1a>
 800e154:	6023      	str	r3, [r4, #0]
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	20001228 	.word	0x20001228

0800e15c <_write_r>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4d07      	ldr	r5, [pc, #28]	@ (800e17c <_write_r+0x20>)
 800e160:	4604      	mov	r4, r0
 800e162:	4608      	mov	r0, r1
 800e164:	4611      	mov	r1, r2
 800e166:	2200      	movs	r2, #0
 800e168:	602a      	str	r2, [r5, #0]
 800e16a:	461a      	mov	r2, r3
 800e16c:	f7f3 fef4 	bl	8001f58 <_write>
 800e170:	1c43      	adds	r3, r0, #1
 800e172:	d102      	bne.n	800e17a <_write_r+0x1e>
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	b103      	cbz	r3, 800e17a <_write_r+0x1e>
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	bd38      	pop	{r3, r4, r5, pc}
 800e17c:	20001228 	.word	0x20001228

0800e180 <__errno>:
 800e180:	4b01      	ldr	r3, [pc, #4]	@ (800e188 <__errno+0x8>)
 800e182:	6818      	ldr	r0, [r3, #0]
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	2000002c 	.word	0x2000002c

0800e18c <__libc_init_array>:
 800e18c:	b570      	push	{r4, r5, r6, lr}
 800e18e:	4d0d      	ldr	r5, [pc, #52]	@ (800e1c4 <__libc_init_array+0x38>)
 800e190:	4c0d      	ldr	r4, [pc, #52]	@ (800e1c8 <__libc_init_array+0x3c>)
 800e192:	1b64      	subs	r4, r4, r5
 800e194:	10a4      	asrs	r4, r4, #2
 800e196:	2600      	movs	r6, #0
 800e198:	42a6      	cmp	r6, r4
 800e19a:	d109      	bne.n	800e1b0 <__libc_init_array+0x24>
 800e19c:	4d0b      	ldr	r5, [pc, #44]	@ (800e1cc <__libc_init_array+0x40>)
 800e19e:	4c0c      	ldr	r4, [pc, #48]	@ (800e1d0 <__libc_init_array+0x44>)
 800e1a0:	f000 feae 	bl	800ef00 <_init>
 800e1a4:	1b64      	subs	r4, r4, r5
 800e1a6:	10a4      	asrs	r4, r4, #2
 800e1a8:	2600      	movs	r6, #0
 800e1aa:	42a6      	cmp	r6, r4
 800e1ac:	d105      	bne.n	800e1ba <__libc_init_array+0x2e>
 800e1ae:	bd70      	pop	{r4, r5, r6, pc}
 800e1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1b4:	4798      	blx	r3
 800e1b6:	3601      	adds	r6, #1
 800e1b8:	e7ee      	b.n	800e198 <__libc_init_array+0xc>
 800e1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1be:	4798      	blx	r3
 800e1c0:	3601      	adds	r6, #1
 800e1c2:	e7f2      	b.n	800e1aa <__libc_init_array+0x1e>
 800e1c4:	0800f68c 	.word	0x0800f68c
 800e1c8:	0800f68c 	.word	0x0800f68c
 800e1cc:	0800f68c 	.word	0x0800f68c
 800e1d0:	0800f690 	.word	0x0800f690

0800e1d4 <__retarget_lock_init_recursive>:
 800e1d4:	4770      	bx	lr

0800e1d6 <__retarget_lock_acquire_recursive>:
 800e1d6:	4770      	bx	lr

0800e1d8 <__retarget_lock_release_recursive>:
 800e1d8:	4770      	bx	lr

0800e1da <memcpy>:
 800e1da:	440a      	add	r2, r1
 800e1dc:	4291      	cmp	r1, r2
 800e1de:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1e2:	d100      	bne.n	800e1e6 <memcpy+0xc>
 800e1e4:	4770      	bx	lr
 800e1e6:	b510      	push	{r4, lr}
 800e1e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1f0:	4291      	cmp	r1, r2
 800e1f2:	d1f9      	bne.n	800e1e8 <memcpy+0xe>
 800e1f4:	bd10      	pop	{r4, pc}
	...

0800e1f8 <_free_r>:
 800e1f8:	b538      	push	{r3, r4, r5, lr}
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	2900      	cmp	r1, #0
 800e1fe:	d041      	beq.n	800e284 <_free_r+0x8c>
 800e200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e204:	1f0c      	subs	r4, r1, #4
 800e206:	2b00      	cmp	r3, #0
 800e208:	bfb8      	it	lt
 800e20a:	18e4      	addlt	r4, r4, r3
 800e20c:	f7ff fd46 	bl	800dc9c <__malloc_lock>
 800e210:	4a1d      	ldr	r2, [pc, #116]	@ (800e288 <_free_r+0x90>)
 800e212:	6813      	ldr	r3, [r2, #0]
 800e214:	b933      	cbnz	r3, 800e224 <_free_r+0x2c>
 800e216:	6063      	str	r3, [r4, #4]
 800e218:	6014      	str	r4, [r2, #0]
 800e21a:	4628      	mov	r0, r5
 800e21c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e220:	f7ff bd42 	b.w	800dca8 <__malloc_unlock>
 800e224:	42a3      	cmp	r3, r4
 800e226:	d908      	bls.n	800e23a <_free_r+0x42>
 800e228:	6820      	ldr	r0, [r4, #0]
 800e22a:	1821      	adds	r1, r4, r0
 800e22c:	428b      	cmp	r3, r1
 800e22e:	bf01      	itttt	eq
 800e230:	6819      	ldreq	r1, [r3, #0]
 800e232:	685b      	ldreq	r3, [r3, #4]
 800e234:	1809      	addeq	r1, r1, r0
 800e236:	6021      	streq	r1, [r4, #0]
 800e238:	e7ed      	b.n	800e216 <_free_r+0x1e>
 800e23a:	461a      	mov	r2, r3
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	b10b      	cbz	r3, 800e244 <_free_r+0x4c>
 800e240:	42a3      	cmp	r3, r4
 800e242:	d9fa      	bls.n	800e23a <_free_r+0x42>
 800e244:	6811      	ldr	r1, [r2, #0]
 800e246:	1850      	adds	r0, r2, r1
 800e248:	42a0      	cmp	r0, r4
 800e24a:	d10b      	bne.n	800e264 <_free_r+0x6c>
 800e24c:	6820      	ldr	r0, [r4, #0]
 800e24e:	4401      	add	r1, r0
 800e250:	1850      	adds	r0, r2, r1
 800e252:	4283      	cmp	r3, r0
 800e254:	6011      	str	r1, [r2, #0]
 800e256:	d1e0      	bne.n	800e21a <_free_r+0x22>
 800e258:	6818      	ldr	r0, [r3, #0]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	6053      	str	r3, [r2, #4]
 800e25e:	4408      	add	r0, r1
 800e260:	6010      	str	r0, [r2, #0]
 800e262:	e7da      	b.n	800e21a <_free_r+0x22>
 800e264:	d902      	bls.n	800e26c <_free_r+0x74>
 800e266:	230c      	movs	r3, #12
 800e268:	602b      	str	r3, [r5, #0]
 800e26a:	e7d6      	b.n	800e21a <_free_r+0x22>
 800e26c:	6820      	ldr	r0, [r4, #0]
 800e26e:	1821      	adds	r1, r4, r0
 800e270:	428b      	cmp	r3, r1
 800e272:	bf04      	itt	eq
 800e274:	6819      	ldreq	r1, [r3, #0]
 800e276:	685b      	ldreq	r3, [r3, #4]
 800e278:	6063      	str	r3, [r4, #4]
 800e27a:	bf04      	itt	eq
 800e27c:	1809      	addeq	r1, r1, r0
 800e27e:	6021      	streq	r1, [r4, #0]
 800e280:	6054      	str	r4, [r2, #4]
 800e282:	e7ca      	b.n	800e21a <_free_r+0x22>
 800e284:	bd38      	pop	{r3, r4, r5, pc}
 800e286:	bf00      	nop
 800e288:	200010e8 	.word	0x200010e8

0800e28c <__ssputs_r>:
 800e28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e290:	688e      	ldr	r6, [r1, #8]
 800e292:	461f      	mov	r7, r3
 800e294:	42be      	cmp	r6, r7
 800e296:	680b      	ldr	r3, [r1, #0]
 800e298:	4682      	mov	sl, r0
 800e29a:	460c      	mov	r4, r1
 800e29c:	4690      	mov	r8, r2
 800e29e:	d82d      	bhi.n	800e2fc <__ssputs_r+0x70>
 800e2a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2a8:	d026      	beq.n	800e2f8 <__ssputs_r+0x6c>
 800e2aa:	6965      	ldr	r5, [r4, #20]
 800e2ac:	6909      	ldr	r1, [r1, #16]
 800e2ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2b2:	eba3 0901 	sub.w	r9, r3, r1
 800e2b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2ba:	1c7b      	adds	r3, r7, #1
 800e2bc:	444b      	add	r3, r9
 800e2be:	106d      	asrs	r5, r5, #1
 800e2c0:	429d      	cmp	r5, r3
 800e2c2:	bf38      	it	cc
 800e2c4:	461d      	movcc	r5, r3
 800e2c6:	0553      	lsls	r3, r2, #21
 800e2c8:	d527      	bpl.n	800e31a <__ssputs_r+0x8e>
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	f7ff fc66 	bl	800db9c <_malloc_r>
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	b360      	cbz	r0, 800e32e <__ssputs_r+0xa2>
 800e2d4:	6921      	ldr	r1, [r4, #16]
 800e2d6:	464a      	mov	r2, r9
 800e2d8:	f7ff ff7f 	bl	800e1da <memcpy>
 800e2dc:	89a3      	ldrh	r3, [r4, #12]
 800e2de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e2e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2e6:	81a3      	strh	r3, [r4, #12]
 800e2e8:	6126      	str	r6, [r4, #16]
 800e2ea:	6165      	str	r5, [r4, #20]
 800e2ec:	444e      	add	r6, r9
 800e2ee:	eba5 0509 	sub.w	r5, r5, r9
 800e2f2:	6026      	str	r6, [r4, #0]
 800e2f4:	60a5      	str	r5, [r4, #8]
 800e2f6:	463e      	mov	r6, r7
 800e2f8:	42be      	cmp	r6, r7
 800e2fa:	d900      	bls.n	800e2fe <__ssputs_r+0x72>
 800e2fc:	463e      	mov	r6, r7
 800e2fe:	6820      	ldr	r0, [r4, #0]
 800e300:	4632      	mov	r2, r6
 800e302:	4641      	mov	r1, r8
 800e304:	f000 fd8a 	bl	800ee1c <memmove>
 800e308:	68a3      	ldr	r3, [r4, #8]
 800e30a:	1b9b      	subs	r3, r3, r6
 800e30c:	60a3      	str	r3, [r4, #8]
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	4433      	add	r3, r6
 800e312:	6023      	str	r3, [r4, #0]
 800e314:	2000      	movs	r0, #0
 800e316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e31a:	462a      	mov	r2, r5
 800e31c:	f000 fdba 	bl	800ee94 <_realloc_r>
 800e320:	4606      	mov	r6, r0
 800e322:	2800      	cmp	r0, #0
 800e324:	d1e0      	bne.n	800e2e8 <__ssputs_r+0x5c>
 800e326:	6921      	ldr	r1, [r4, #16]
 800e328:	4650      	mov	r0, sl
 800e32a:	f7ff ff65 	bl	800e1f8 <_free_r>
 800e32e:	230c      	movs	r3, #12
 800e330:	f8ca 3000 	str.w	r3, [sl]
 800e334:	89a3      	ldrh	r3, [r4, #12]
 800e336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e33a:	81a3      	strh	r3, [r4, #12]
 800e33c:	f04f 30ff 	mov.w	r0, #4294967295
 800e340:	e7e9      	b.n	800e316 <__ssputs_r+0x8a>
	...

0800e344 <_svfiprintf_r>:
 800e344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e348:	4698      	mov	r8, r3
 800e34a:	898b      	ldrh	r3, [r1, #12]
 800e34c:	061b      	lsls	r3, r3, #24
 800e34e:	b09d      	sub	sp, #116	@ 0x74
 800e350:	4607      	mov	r7, r0
 800e352:	460d      	mov	r5, r1
 800e354:	4614      	mov	r4, r2
 800e356:	d510      	bpl.n	800e37a <_svfiprintf_r+0x36>
 800e358:	690b      	ldr	r3, [r1, #16]
 800e35a:	b973      	cbnz	r3, 800e37a <_svfiprintf_r+0x36>
 800e35c:	2140      	movs	r1, #64	@ 0x40
 800e35e:	f7ff fc1d 	bl	800db9c <_malloc_r>
 800e362:	6028      	str	r0, [r5, #0]
 800e364:	6128      	str	r0, [r5, #16]
 800e366:	b930      	cbnz	r0, 800e376 <_svfiprintf_r+0x32>
 800e368:	230c      	movs	r3, #12
 800e36a:	603b      	str	r3, [r7, #0]
 800e36c:	f04f 30ff 	mov.w	r0, #4294967295
 800e370:	b01d      	add	sp, #116	@ 0x74
 800e372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e376:	2340      	movs	r3, #64	@ 0x40
 800e378:	616b      	str	r3, [r5, #20]
 800e37a:	2300      	movs	r3, #0
 800e37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e37e:	2320      	movs	r3, #32
 800e380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e384:	f8cd 800c 	str.w	r8, [sp, #12]
 800e388:	2330      	movs	r3, #48	@ 0x30
 800e38a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e528 <_svfiprintf_r+0x1e4>
 800e38e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e392:	f04f 0901 	mov.w	r9, #1
 800e396:	4623      	mov	r3, r4
 800e398:	469a      	mov	sl, r3
 800e39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e39e:	b10a      	cbz	r2, 800e3a4 <_svfiprintf_r+0x60>
 800e3a0:	2a25      	cmp	r2, #37	@ 0x25
 800e3a2:	d1f9      	bne.n	800e398 <_svfiprintf_r+0x54>
 800e3a4:	ebba 0b04 	subs.w	fp, sl, r4
 800e3a8:	d00b      	beq.n	800e3c2 <_svfiprintf_r+0x7e>
 800e3aa:	465b      	mov	r3, fp
 800e3ac:	4622      	mov	r2, r4
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f7ff ff6b 	bl	800e28c <__ssputs_r>
 800e3b6:	3001      	adds	r0, #1
 800e3b8:	f000 80a7 	beq.w	800e50a <_svfiprintf_r+0x1c6>
 800e3bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3be:	445a      	add	r2, fp
 800e3c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f000 809f 	beq.w	800e50a <_svfiprintf_r+0x1c6>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3d6:	f10a 0a01 	add.w	sl, sl, #1
 800e3da:	9304      	str	r3, [sp, #16]
 800e3dc:	9307      	str	r3, [sp, #28]
 800e3de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3e4:	4654      	mov	r4, sl
 800e3e6:	2205      	movs	r2, #5
 800e3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ec:	484e      	ldr	r0, [pc, #312]	@ (800e528 <_svfiprintf_r+0x1e4>)
 800e3ee:	f7f1 feef 	bl	80001d0 <memchr>
 800e3f2:	9a04      	ldr	r2, [sp, #16]
 800e3f4:	b9d8      	cbnz	r0, 800e42e <_svfiprintf_r+0xea>
 800e3f6:	06d0      	lsls	r0, r2, #27
 800e3f8:	bf44      	itt	mi
 800e3fa:	2320      	movmi	r3, #32
 800e3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e400:	0711      	lsls	r1, r2, #28
 800e402:	bf44      	itt	mi
 800e404:	232b      	movmi	r3, #43	@ 0x2b
 800e406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e40a:	f89a 3000 	ldrb.w	r3, [sl]
 800e40e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e410:	d015      	beq.n	800e43e <_svfiprintf_r+0xfa>
 800e412:	9a07      	ldr	r2, [sp, #28]
 800e414:	4654      	mov	r4, sl
 800e416:	2000      	movs	r0, #0
 800e418:	f04f 0c0a 	mov.w	ip, #10
 800e41c:	4621      	mov	r1, r4
 800e41e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e422:	3b30      	subs	r3, #48	@ 0x30
 800e424:	2b09      	cmp	r3, #9
 800e426:	d94b      	bls.n	800e4c0 <_svfiprintf_r+0x17c>
 800e428:	b1b0      	cbz	r0, 800e458 <_svfiprintf_r+0x114>
 800e42a:	9207      	str	r2, [sp, #28]
 800e42c:	e014      	b.n	800e458 <_svfiprintf_r+0x114>
 800e42e:	eba0 0308 	sub.w	r3, r0, r8
 800e432:	fa09 f303 	lsl.w	r3, r9, r3
 800e436:	4313      	orrs	r3, r2
 800e438:	9304      	str	r3, [sp, #16]
 800e43a:	46a2      	mov	sl, r4
 800e43c:	e7d2      	b.n	800e3e4 <_svfiprintf_r+0xa0>
 800e43e:	9b03      	ldr	r3, [sp, #12]
 800e440:	1d19      	adds	r1, r3, #4
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	9103      	str	r1, [sp, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	bfbb      	ittet	lt
 800e44a:	425b      	neglt	r3, r3
 800e44c:	f042 0202 	orrlt.w	r2, r2, #2
 800e450:	9307      	strge	r3, [sp, #28]
 800e452:	9307      	strlt	r3, [sp, #28]
 800e454:	bfb8      	it	lt
 800e456:	9204      	strlt	r2, [sp, #16]
 800e458:	7823      	ldrb	r3, [r4, #0]
 800e45a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e45c:	d10a      	bne.n	800e474 <_svfiprintf_r+0x130>
 800e45e:	7863      	ldrb	r3, [r4, #1]
 800e460:	2b2a      	cmp	r3, #42	@ 0x2a
 800e462:	d132      	bne.n	800e4ca <_svfiprintf_r+0x186>
 800e464:	9b03      	ldr	r3, [sp, #12]
 800e466:	1d1a      	adds	r2, r3, #4
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	9203      	str	r2, [sp, #12]
 800e46c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e470:	3402      	adds	r4, #2
 800e472:	9305      	str	r3, [sp, #20]
 800e474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e538 <_svfiprintf_r+0x1f4>
 800e478:	7821      	ldrb	r1, [r4, #0]
 800e47a:	2203      	movs	r2, #3
 800e47c:	4650      	mov	r0, sl
 800e47e:	f7f1 fea7 	bl	80001d0 <memchr>
 800e482:	b138      	cbz	r0, 800e494 <_svfiprintf_r+0x150>
 800e484:	9b04      	ldr	r3, [sp, #16]
 800e486:	eba0 000a 	sub.w	r0, r0, sl
 800e48a:	2240      	movs	r2, #64	@ 0x40
 800e48c:	4082      	lsls	r2, r0
 800e48e:	4313      	orrs	r3, r2
 800e490:	3401      	adds	r4, #1
 800e492:	9304      	str	r3, [sp, #16]
 800e494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e498:	4824      	ldr	r0, [pc, #144]	@ (800e52c <_svfiprintf_r+0x1e8>)
 800e49a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e49e:	2206      	movs	r2, #6
 800e4a0:	f7f1 fe96 	bl	80001d0 <memchr>
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	d036      	beq.n	800e516 <_svfiprintf_r+0x1d2>
 800e4a8:	4b21      	ldr	r3, [pc, #132]	@ (800e530 <_svfiprintf_r+0x1ec>)
 800e4aa:	bb1b      	cbnz	r3, 800e4f4 <_svfiprintf_r+0x1b0>
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	3307      	adds	r3, #7
 800e4b0:	f023 0307 	bic.w	r3, r3, #7
 800e4b4:	3308      	adds	r3, #8
 800e4b6:	9303      	str	r3, [sp, #12]
 800e4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ba:	4433      	add	r3, r6
 800e4bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4be:	e76a      	b.n	800e396 <_svfiprintf_r+0x52>
 800e4c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	2001      	movs	r0, #1
 800e4c8:	e7a8      	b.n	800e41c <_svfiprintf_r+0xd8>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	3401      	adds	r4, #1
 800e4ce:	9305      	str	r3, [sp, #20]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	f04f 0c0a 	mov.w	ip, #10
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4dc:	3a30      	subs	r2, #48	@ 0x30
 800e4de:	2a09      	cmp	r2, #9
 800e4e0:	d903      	bls.n	800e4ea <_svfiprintf_r+0x1a6>
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d0c6      	beq.n	800e474 <_svfiprintf_r+0x130>
 800e4e6:	9105      	str	r1, [sp, #20]
 800e4e8:	e7c4      	b.n	800e474 <_svfiprintf_r+0x130>
 800e4ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e7f0      	b.n	800e4d6 <_svfiprintf_r+0x192>
 800e4f4:	ab03      	add	r3, sp, #12
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	462a      	mov	r2, r5
 800e4fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e534 <_svfiprintf_r+0x1f0>)
 800e4fc:	a904      	add	r1, sp, #16
 800e4fe:	4638      	mov	r0, r7
 800e500:	f3af 8000 	nop.w
 800e504:	1c42      	adds	r2, r0, #1
 800e506:	4606      	mov	r6, r0
 800e508:	d1d6      	bne.n	800e4b8 <_svfiprintf_r+0x174>
 800e50a:	89ab      	ldrh	r3, [r5, #12]
 800e50c:	065b      	lsls	r3, r3, #25
 800e50e:	f53f af2d 	bmi.w	800e36c <_svfiprintf_r+0x28>
 800e512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e514:	e72c      	b.n	800e370 <_svfiprintf_r+0x2c>
 800e516:	ab03      	add	r3, sp, #12
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	462a      	mov	r2, r5
 800e51c:	4b05      	ldr	r3, [pc, #20]	@ (800e534 <_svfiprintf_r+0x1f0>)
 800e51e:	a904      	add	r1, sp, #16
 800e520:	4638      	mov	r0, r7
 800e522:	f000 f9bb 	bl	800e89c <_printf_i>
 800e526:	e7ed      	b.n	800e504 <_svfiprintf_r+0x1c0>
 800e528:	0800f650 	.word	0x0800f650
 800e52c:	0800f65a 	.word	0x0800f65a
 800e530:	00000000 	.word	0x00000000
 800e534:	0800e28d 	.word	0x0800e28d
 800e538:	0800f656 	.word	0x0800f656

0800e53c <__sfputc_r>:
 800e53c:	6893      	ldr	r3, [r2, #8]
 800e53e:	3b01      	subs	r3, #1
 800e540:	2b00      	cmp	r3, #0
 800e542:	b410      	push	{r4}
 800e544:	6093      	str	r3, [r2, #8]
 800e546:	da08      	bge.n	800e55a <__sfputc_r+0x1e>
 800e548:	6994      	ldr	r4, [r2, #24]
 800e54a:	42a3      	cmp	r3, r4
 800e54c:	db01      	blt.n	800e552 <__sfputc_r+0x16>
 800e54e:	290a      	cmp	r1, #10
 800e550:	d103      	bne.n	800e55a <__sfputc_r+0x1e>
 800e552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e556:	f000 bbcd 	b.w	800ecf4 <__swbuf_r>
 800e55a:	6813      	ldr	r3, [r2, #0]
 800e55c:	1c58      	adds	r0, r3, #1
 800e55e:	6010      	str	r0, [r2, #0]
 800e560:	7019      	strb	r1, [r3, #0]
 800e562:	4608      	mov	r0, r1
 800e564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e568:	4770      	bx	lr

0800e56a <__sfputs_r>:
 800e56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56c:	4606      	mov	r6, r0
 800e56e:	460f      	mov	r7, r1
 800e570:	4614      	mov	r4, r2
 800e572:	18d5      	adds	r5, r2, r3
 800e574:	42ac      	cmp	r4, r5
 800e576:	d101      	bne.n	800e57c <__sfputs_r+0x12>
 800e578:	2000      	movs	r0, #0
 800e57a:	e007      	b.n	800e58c <__sfputs_r+0x22>
 800e57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e580:	463a      	mov	r2, r7
 800e582:	4630      	mov	r0, r6
 800e584:	f7ff ffda 	bl	800e53c <__sfputc_r>
 800e588:	1c43      	adds	r3, r0, #1
 800e58a:	d1f3      	bne.n	800e574 <__sfputs_r+0xa>
 800e58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e590 <_vfiprintf_r>:
 800e590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e594:	460d      	mov	r5, r1
 800e596:	b09d      	sub	sp, #116	@ 0x74
 800e598:	4614      	mov	r4, r2
 800e59a:	4698      	mov	r8, r3
 800e59c:	4606      	mov	r6, r0
 800e59e:	b118      	cbz	r0, 800e5a8 <_vfiprintf_r+0x18>
 800e5a0:	6a03      	ldr	r3, [r0, #32]
 800e5a2:	b90b      	cbnz	r3, 800e5a8 <_vfiprintf_r+0x18>
 800e5a4:	f7ff fc12 	bl	800ddcc <__sinit>
 800e5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5aa:	07d9      	lsls	r1, r3, #31
 800e5ac:	d405      	bmi.n	800e5ba <_vfiprintf_r+0x2a>
 800e5ae:	89ab      	ldrh	r3, [r5, #12]
 800e5b0:	059a      	lsls	r2, r3, #22
 800e5b2:	d402      	bmi.n	800e5ba <_vfiprintf_r+0x2a>
 800e5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5b6:	f7ff fe0e 	bl	800e1d6 <__retarget_lock_acquire_recursive>
 800e5ba:	89ab      	ldrh	r3, [r5, #12]
 800e5bc:	071b      	lsls	r3, r3, #28
 800e5be:	d501      	bpl.n	800e5c4 <_vfiprintf_r+0x34>
 800e5c0:	692b      	ldr	r3, [r5, #16]
 800e5c2:	b99b      	cbnz	r3, 800e5ec <_vfiprintf_r+0x5c>
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f000 fbd2 	bl	800ed70 <__swsetup_r>
 800e5cc:	b170      	cbz	r0, 800e5ec <_vfiprintf_r+0x5c>
 800e5ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5d0:	07dc      	lsls	r4, r3, #31
 800e5d2:	d504      	bpl.n	800e5de <_vfiprintf_r+0x4e>
 800e5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d8:	b01d      	add	sp, #116	@ 0x74
 800e5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5de:	89ab      	ldrh	r3, [r5, #12]
 800e5e0:	0598      	lsls	r0, r3, #22
 800e5e2:	d4f7      	bmi.n	800e5d4 <_vfiprintf_r+0x44>
 800e5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5e6:	f7ff fdf7 	bl	800e1d8 <__retarget_lock_release_recursive>
 800e5ea:	e7f3      	b.n	800e5d4 <_vfiprintf_r+0x44>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5f0:	2320      	movs	r3, #32
 800e5f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5fa:	2330      	movs	r3, #48	@ 0x30
 800e5fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e7ac <_vfiprintf_r+0x21c>
 800e600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e604:	f04f 0901 	mov.w	r9, #1
 800e608:	4623      	mov	r3, r4
 800e60a:	469a      	mov	sl, r3
 800e60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e610:	b10a      	cbz	r2, 800e616 <_vfiprintf_r+0x86>
 800e612:	2a25      	cmp	r2, #37	@ 0x25
 800e614:	d1f9      	bne.n	800e60a <_vfiprintf_r+0x7a>
 800e616:	ebba 0b04 	subs.w	fp, sl, r4
 800e61a:	d00b      	beq.n	800e634 <_vfiprintf_r+0xa4>
 800e61c:	465b      	mov	r3, fp
 800e61e:	4622      	mov	r2, r4
 800e620:	4629      	mov	r1, r5
 800e622:	4630      	mov	r0, r6
 800e624:	f7ff ffa1 	bl	800e56a <__sfputs_r>
 800e628:	3001      	adds	r0, #1
 800e62a:	f000 80a7 	beq.w	800e77c <_vfiprintf_r+0x1ec>
 800e62e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e630:	445a      	add	r2, fp
 800e632:	9209      	str	r2, [sp, #36]	@ 0x24
 800e634:	f89a 3000 	ldrb.w	r3, [sl]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	f000 809f 	beq.w	800e77c <_vfiprintf_r+0x1ec>
 800e63e:	2300      	movs	r3, #0
 800e640:	f04f 32ff 	mov.w	r2, #4294967295
 800e644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e648:	f10a 0a01 	add.w	sl, sl, #1
 800e64c:	9304      	str	r3, [sp, #16]
 800e64e:	9307      	str	r3, [sp, #28]
 800e650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e654:	931a      	str	r3, [sp, #104]	@ 0x68
 800e656:	4654      	mov	r4, sl
 800e658:	2205      	movs	r2, #5
 800e65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e65e:	4853      	ldr	r0, [pc, #332]	@ (800e7ac <_vfiprintf_r+0x21c>)
 800e660:	f7f1 fdb6 	bl	80001d0 <memchr>
 800e664:	9a04      	ldr	r2, [sp, #16]
 800e666:	b9d8      	cbnz	r0, 800e6a0 <_vfiprintf_r+0x110>
 800e668:	06d1      	lsls	r1, r2, #27
 800e66a:	bf44      	itt	mi
 800e66c:	2320      	movmi	r3, #32
 800e66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e672:	0713      	lsls	r3, r2, #28
 800e674:	bf44      	itt	mi
 800e676:	232b      	movmi	r3, #43	@ 0x2b
 800e678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e67c:	f89a 3000 	ldrb.w	r3, [sl]
 800e680:	2b2a      	cmp	r3, #42	@ 0x2a
 800e682:	d015      	beq.n	800e6b0 <_vfiprintf_r+0x120>
 800e684:	9a07      	ldr	r2, [sp, #28]
 800e686:	4654      	mov	r4, sl
 800e688:	2000      	movs	r0, #0
 800e68a:	f04f 0c0a 	mov.w	ip, #10
 800e68e:	4621      	mov	r1, r4
 800e690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e694:	3b30      	subs	r3, #48	@ 0x30
 800e696:	2b09      	cmp	r3, #9
 800e698:	d94b      	bls.n	800e732 <_vfiprintf_r+0x1a2>
 800e69a:	b1b0      	cbz	r0, 800e6ca <_vfiprintf_r+0x13a>
 800e69c:	9207      	str	r2, [sp, #28]
 800e69e:	e014      	b.n	800e6ca <_vfiprintf_r+0x13a>
 800e6a0:	eba0 0308 	sub.w	r3, r0, r8
 800e6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	9304      	str	r3, [sp, #16]
 800e6ac:	46a2      	mov	sl, r4
 800e6ae:	e7d2      	b.n	800e656 <_vfiprintf_r+0xc6>
 800e6b0:	9b03      	ldr	r3, [sp, #12]
 800e6b2:	1d19      	adds	r1, r3, #4
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	9103      	str	r1, [sp, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	bfbb      	ittet	lt
 800e6bc:	425b      	neglt	r3, r3
 800e6be:	f042 0202 	orrlt.w	r2, r2, #2
 800e6c2:	9307      	strge	r3, [sp, #28]
 800e6c4:	9307      	strlt	r3, [sp, #28]
 800e6c6:	bfb8      	it	lt
 800e6c8:	9204      	strlt	r2, [sp, #16]
 800e6ca:	7823      	ldrb	r3, [r4, #0]
 800e6cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6ce:	d10a      	bne.n	800e6e6 <_vfiprintf_r+0x156>
 800e6d0:	7863      	ldrb	r3, [r4, #1]
 800e6d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6d4:	d132      	bne.n	800e73c <_vfiprintf_r+0x1ac>
 800e6d6:	9b03      	ldr	r3, [sp, #12]
 800e6d8:	1d1a      	adds	r2, r3, #4
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	9203      	str	r2, [sp, #12]
 800e6de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6e2:	3402      	adds	r4, #2
 800e6e4:	9305      	str	r3, [sp, #20]
 800e6e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e7bc <_vfiprintf_r+0x22c>
 800e6ea:	7821      	ldrb	r1, [r4, #0]
 800e6ec:	2203      	movs	r2, #3
 800e6ee:	4650      	mov	r0, sl
 800e6f0:	f7f1 fd6e 	bl	80001d0 <memchr>
 800e6f4:	b138      	cbz	r0, 800e706 <_vfiprintf_r+0x176>
 800e6f6:	9b04      	ldr	r3, [sp, #16]
 800e6f8:	eba0 000a 	sub.w	r0, r0, sl
 800e6fc:	2240      	movs	r2, #64	@ 0x40
 800e6fe:	4082      	lsls	r2, r0
 800e700:	4313      	orrs	r3, r2
 800e702:	3401      	adds	r4, #1
 800e704:	9304      	str	r3, [sp, #16]
 800e706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70a:	4829      	ldr	r0, [pc, #164]	@ (800e7b0 <_vfiprintf_r+0x220>)
 800e70c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e710:	2206      	movs	r2, #6
 800e712:	f7f1 fd5d 	bl	80001d0 <memchr>
 800e716:	2800      	cmp	r0, #0
 800e718:	d03f      	beq.n	800e79a <_vfiprintf_r+0x20a>
 800e71a:	4b26      	ldr	r3, [pc, #152]	@ (800e7b4 <_vfiprintf_r+0x224>)
 800e71c:	bb1b      	cbnz	r3, 800e766 <_vfiprintf_r+0x1d6>
 800e71e:	9b03      	ldr	r3, [sp, #12]
 800e720:	3307      	adds	r3, #7
 800e722:	f023 0307 	bic.w	r3, r3, #7
 800e726:	3308      	adds	r3, #8
 800e728:	9303      	str	r3, [sp, #12]
 800e72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e72c:	443b      	add	r3, r7
 800e72e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e730:	e76a      	b.n	800e608 <_vfiprintf_r+0x78>
 800e732:	fb0c 3202 	mla	r2, ip, r2, r3
 800e736:	460c      	mov	r4, r1
 800e738:	2001      	movs	r0, #1
 800e73a:	e7a8      	b.n	800e68e <_vfiprintf_r+0xfe>
 800e73c:	2300      	movs	r3, #0
 800e73e:	3401      	adds	r4, #1
 800e740:	9305      	str	r3, [sp, #20]
 800e742:	4619      	mov	r1, r3
 800e744:	f04f 0c0a 	mov.w	ip, #10
 800e748:	4620      	mov	r0, r4
 800e74a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e74e:	3a30      	subs	r2, #48	@ 0x30
 800e750:	2a09      	cmp	r2, #9
 800e752:	d903      	bls.n	800e75c <_vfiprintf_r+0x1cc>
 800e754:	2b00      	cmp	r3, #0
 800e756:	d0c6      	beq.n	800e6e6 <_vfiprintf_r+0x156>
 800e758:	9105      	str	r1, [sp, #20]
 800e75a:	e7c4      	b.n	800e6e6 <_vfiprintf_r+0x156>
 800e75c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e760:	4604      	mov	r4, r0
 800e762:	2301      	movs	r3, #1
 800e764:	e7f0      	b.n	800e748 <_vfiprintf_r+0x1b8>
 800e766:	ab03      	add	r3, sp, #12
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	462a      	mov	r2, r5
 800e76c:	4b12      	ldr	r3, [pc, #72]	@ (800e7b8 <_vfiprintf_r+0x228>)
 800e76e:	a904      	add	r1, sp, #16
 800e770:	4630      	mov	r0, r6
 800e772:	f3af 8000 	nop.w
 800e776:	4607      	mov	r7, r0
 800e778:	1c78      	adds	r0, r7, #1
 800e77a:	d1d6      	bne.n	800e72a <_vfiprintf_r+0x19a>
 800e77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e77e:	07d9      	lsls	r1, r3, #31
 800e780:	d405      	bmi.n	800e78e <_vfiprintf_r+0x1fe>
 800e782:	89ab      	ldrh	r3, [r5, #12]
 800e784:	059a      	lsls	r2, r3, #22
 800e786:	d402      	bmi.n	800e78e <_vfiprintf_r+0x1fe>
 800e788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e78a:	f7ff fd25 	bl	800e1d8 <__retarget_lock_release_recursive>
 800e78e:	89ab      	ldrh	r3, [r5, #12]
 800e790:	065b      	lsls	r3, r3, #25
 800e792:	f53f af1f 	bmi.w	800e5d4 <_vfiprintf_r+0x44>
 800e796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e798:	e71e      	b.n	800e5d8 <_vfiprintf_r+0x48>
 800e79a:	ab03      	add	r3, sp, #12
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	462a      	mov	r2, r5
 800e7a0:	4b05      	ldr	r3, [pc, #20]	@ (800e7b8 <_vfiprintf_r+0x228>)
 800e7a2:	a904      	add	r1, sp, #16
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	f000 f879 	bl	800e89c <_printf_i>
 800e7aa:	e7e4      	b.n	800e776 <_vfiprintf_r+0x1e6>
 800e7ac:	0800f650 	.word	0x0800f650
 800e7b0:	0800f65a 	.word	0x0800f65a
 800e7b4:	00000000 	.word	0x00000000
 800e7b8:	0800e56b 	.word	0x0800e56b
 800e7bc:	0800f656 	.word	0x0800f656

0800e7c0 <_printf_common>:
 800e7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	4698      	mov	r8, r3
 800e7c8:	688a      	ldr	r2, [r1, #8]
 800e7ca:	690b      	ldr	r3, [r1, #16]
 800e7cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	bfb8      	it	lt
 800e7d4:	4613      	movlt	r3, r2
 800e7d6:	6033      	str	r3, [r6, #0]
 800e7d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7dc:	4607      	mov	r7, r0
 800e7de:	460c      	mov	r4, r1
 800e7e0:	b10a      	cbz	r2, 800e7e6 <_printf_common+0x26>
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	6033      	str	r3, [r6, #0]
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	0699      	lsls	r1, r3, #26
 800e7ea:	bf42      	ittt	mi
 800e7ec:	6833      	ldrmi	r3, [r6, #0]
 800e7ee:	3302      	addmi	r3, #2
 800e7f0:	6033      	strmi	r3, [r6, #0]
 800e7f2:	6825      	ldr	r5, [r4, #0]
 800e7f4:	f015 0506 	ands.w	r5, r5, #6
 800e7f8:	d106      	bne.n	800e808 <_printf_common+0x48>
 800e7fa:	f104 0a19 	add.w	sl, r4, #25
 800e7fe:	68e3      	ldr	r3, [r4, #12]
 800e800:	6832      	ldr	r2, [r6, #0]
 800e802:	1a9b      	subs	r3, r3, r2
 800e804:	42ab      	cmp	r3, r5
 800e806:	dc26      	bgt.n	800e856 <_printf_common+0x96>
 800e808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e80c:	6822      	ldr	r2, [r4, #0]
 800e80e:	3b00      	subs	r3, #0
 800e810:	bf18      	it	ne
 800e812:	2301      	movne	r3, #1
 800e814:	0692      	lsls	r2, r2, #26
 800e816:	d42b      	bmi.n	800e870 <_printf_common+0xb0>
 800e818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e81c:	4641      	mov	r1, r8
 800e81e:	4638      	mov	r0, r7
 800e820:	47c8      	blx	r9
 800e822:	3001      	adds	r0, #1
 800e824:	d01e      	beq.n	800e864 <_printf_common+0xa4>
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	6922      	ldr	r2, [r4, #16]
 800e82a:	f003 0306 	and.w	r3, r3, #6
 800e82e:	2b04      	cmp	r3, #4
 800e830:	bf02      	ittt	eq
 800e832:	68e5      	ldreq	r5, [r4, #12]
 800e834:	6833      	ldreq	r3, [r6, #0]
 800e836:	1aed      	subeq	r5, r5, r3
 800e838:	68a3      	ldr	r3, [r4, #8]
 800e83a:	bf0c      	ite	eq
 800e83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e840:	2500      	movne	r5, #0
 800e842:	4293      	cmp	r3, r2
 800e844:	bfc4      	itt	gt
 800e846:	1a9b      	subgt	r3, r3, r2
 800e848:	18ed      	addgt	r5, r5, r3
 800e84a:	2600      	movs	r6, #0
 800e84c:	341a      	adds	r4, #26
 800e84e:	42b5      	cmp	r5, r6
 800e850:	d11a      	bne.n	800e888 <_printf_common+0xc8>
 800e852:	2000      	movs	r0, #0
 800e854:	e008      	b.n	800e868 <_printf_common+0xa8>
 800e856:	2301      	movs	r3, #1
 800e858:	4652      	mov	r2, sl
 800e85a:	4641      	mov	r1, r8
 800e85c:	4638      	mov	r0, r7
 800e85e:	47c8      	blx	r9
 800e860:	3001      	adds	r0, #1
 800e862:	d103      	bne.n	800e86c <_printf_common+0xac>
 800e864:	f04f 30ff 	mov.w	r0, #4294967295
 800e868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86c:	3501      	adds	r5, #1
 800e86e:	e7c6      	b.n	800e7fe <_printf_common+0x3e>
 800e870:	18e1      	adds	r1, r4, r3
 800e872:	1c5a      	adds	r2, r3, #1
 800e874:	2030      	movs	r0, #48	@ 0x30
 800e876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e87a:	4422      	add	r2, r4
 800e87c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e884:	3302      	adds	r3, #2
 800e886:	e7c7      	b.n	800e818 <_printf_common+0x58>
 800e888:	2301      	movs	r3, #1
 800e88a:	4622      	mov	r2, r4
 800e88c:	4641      	mov	r1, r8
 800e88e:	4638      	mov	r0, r7
 800e890:	47c8      	blx	r9
 800e892:	3001      	adds	r0, #1
 800e894:	d0e6      	beq.n	800e864 <_printf_common+0xa4>
 800e896:	3601      	adds	r6, #1
 800e898:	e7d9      	b.n	800e84e <_printf_common+0x8e>
	...

0800e89c <_printf_i>:
 800e89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a0:	7e0f      	ldrb	r7, [r1, #24]
 800e8a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e8a4:	2f78      	cmp	r7, #120	@ 0x78
 800e8a6:	4691      	mov	r9, r2
 800e8a8:	4680      	mov	r8, r0
 800e8aa:	460c      	mov	r4, r1
 800e8ac:	469a      	mov	sl, r3
 800e8ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e8b2:	d807      	bhi.n	800e8c4 <_printf_i+0x28>
 800e8b4:	2f62      	cmp	r7, #98	@ 0x62
 800e8b6:	d80a      	bhi.n	800e8ce <_printf_i+0x32>
 800e8b8:	2f00      	cmp	r7, #0
 800e8ba:	f000 80d1 	beq.w	800ea60 <_printf_i+0x1c4>
 800e8be:	2f58      	cmp	r7, #88	@ 0x58
 800e8c0:	f000 80b8 	beq.w	800ea34 <_printf_i+0x198>
 800e8c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8cc:	e03a      	b.n	800e944 <_printf_i+0xa8>
 800e8ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8d2:	2b15      	cmp	r3, #21
 800e8d4:	d8f6      	bhi.n	800e8c4 <_printf_i+0x28>
 800e8d6:	a101      	add	r1, pc, #4	@ (adr r1, 800e8dc <_printf_i+0x40>)
 800e8d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8dc:	0800e935 	.word	0x0800e935
 800e8e0:	0800e949 	.word	0x0800e949
 800e8e4:	0800e8c5 	.word	0x0800e8c5
 800e8e8:	0800e8c5 	.word	0x0800e8c5
 800e8ec:	0800e8c5 	.word	0x0800e8c5
 800e8f0:	0800e8c5 	.word	0x0800e8c5
 800e8f4:	0800e949 	.word	0x0800e949
 800e8f8:	0800e8c5 	.word	0x0800e8c5
 800e8fc:	0800e8c5 	.word	0x0800e8c5
 800e900:	0800e8c5 	.word	0x0800e8c5
 800e904:	0800e8c5 	.word	0x0800e8c5
 800e908:	0800ea47 	.word	0x0800ea47
 800e90c:	0800e973 	.word	0x0800e973
 800e910:	0800ea01 	.word	0x0800ea01
 800e914:	0800e8c5 	.word	0x0800e8c5
 800e918:	0800e8c5 	.word	0x0800e8c5
 800e91c:	0800ea69 	.word	0x0800ea69
 800e920:	0800e8c5 	.word	0x0800e8c5
 800e924:	0800e973 	.word	0x0800e973
 800e928:	0800e8c5 	.word	0x0800e8c5
 800e92c:	0800e8c5 	.word	0x0800e8c5
 800e930:	0800ea09 	.word	0x0800ea09
 800e934:	6833      	ldr	r3, [r6, #0]
 800e936:	1d1a      	adds	r2, r3, #4
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	6032      	str	r2, [r6, #0]
 800e93c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e944:	2301      	movs	r3, #1
 800e946:	e09c      	b.n	800ea82 <_printf_i+0x1e6>
 800e948:	6833      	ldr	r3, [r6, #0]
 800e94a:	6820      	ldr	r0, [r4, #0]
 800e94c:	1d19      	adds	r1, r3, #4
 800e94e:	6031      	str	r1, [r6, #0]
 800e950:	0606      	lsls	r6, r0, #24
 800e952:	d501      	bpl.n	800e958 <_printf_i+0xbc>
 800e954:	681d      	ldr	r5, [r3, #0]
 800e956:	e003      	b.n	800e960 <_printf_i+0xc4>
 800e958:	0645      	lsls	r5, r0, #25
 800e95a:	d5fb      	bpl.n	800e954 <_printf_i+0xb8>
 800e95c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e960:	2d00      	cmp	r5, #0
 800e962:	da03      	bge.n	800e96c <_printf_i+0xd0>
 800e964:	232d      	movs	r3, #45	@ 0x2d
 800e966:	426d      	negs	r5, r5
 800e968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e96c:	4858      	ldr	r0, [pc, #352]	@ (800ead0 <_printf_i+0x234>)
 800e96e:	230a      	movs	r3, #10
 800e970:	e011      	b.n	800e996 <_printf_i+0xfa>
 800e972:	6821      	ldr	r1, [r4, #0]
 800e974:	6833      	ldr	r3, [r6, #0]
 800e976:	0608      	lsls	r0, r1, #24
 800e978:	f853 5b04 	ldr.w	r5, [r3], #4
 800e97c:	d402      	bmi.n	800e984 <_printf_i+0xe8>
 800e97e:	0649      	lsls	r1, r1, #25
 800e980:	bf48      	it	mi
 800e982:	b2ad      	uxthmi	r5, r5
 800e984:	2f6f      	cmp	r7, #111	@ 0x6f
 800e986:	4852      	ldr	r0, [pc, #328]	@ (800ead0 <_printf_i+0x234>)
 800e988:	6033      	str	r3, [r6, #0]
 800e98a:	bf14      	ite	ne
 800e98c:	230a      	movne	r3, #10
 800e98e:	2308      	moveq	r3, #8
 800e990:	2100      	movs	r1, #0
 800e992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e996:	6866      	ldr	r6, [r4, #4]
 800e998:	60a6      	str	r6, [r4, #8]
 800e99a:	2e00      	cmp	r6, #0
 800e99c:	db05      	blt.n	800e9aa <_printf_i+0x10e>
 800e99e:	6821      	ldr	r1, [r4, #0]
 800e9a0:	432e      	orrs	r6, r5
 800e9a2:	f021 0104 	bic.w	r1, r1, #4
 800e9a6:	6021      	str	r1, [r4, #0]
 800e9a8:	d04b      	beq.n	800ea42 <_printf_i+0x1a6>
 800e9aa:	4616      	mov	r6, r2
 800e9ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9b0:	fb03 5711 	mls	r7, r3, r1, r5
 800e9b4:	5dc7      	ldrb	r7, [r0, r7]
 800e9b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9ba:	462f      	mov	r7, r5
 800e9bc:	42bb      	cmp	r3, r7
 800e9be:	460d      	mov	r5, r1
 800e9c0:	d9f4      	bls.n	800e9ac <_printf_i+0x110>
 800e9c2:	2b08      	cmp	r3, #8
 800e9c4:	d10b      	bne.n	800e9de <_printf_i+0x142>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	07df      	lsls	r7, r3, #31
 800e9ca:	d508      	bpl.n	800e9de <_printf_i+0x142>
 800e9cc:	6923      	ldr	r3, [r4, #16]
 800e9ce:	6861      	ldr	r1, [r4, #4]
 800e9d0:	4299      	cmp	r1, r3
 800e9d2:	bfde      	ittt	le
 800e9d4:	2330      	movle	r3, #48	@ 0x30
 800e9d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9de:	1b92      	subs	r2, r2, r6
 800e9e0:	6122      	str	r2, [r4, #16]
 800e9e2:	f8cd a000 	str.w	sl, [sp]
 800e9e6:	464b      	mov	r3, r9
 800e9e8:	aa03      	add	r2, sp, #12
 800e9ea:	4621      	mov	r1, r4
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	f7ff fee7 	bl	800e7c0 <_printf_common>
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	d14a      	bne.n	800ea8c <_printf_i+0x1f0>
 800e9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fa:	b004      	add	sp, #16
 800e9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	f043 0320 	orr.w	r3, r3, #32
 800ea06:	6023      	str	r3, [r4, #0]
 800ea08:	4832      	ldr	r0, [pc, #200]	@ (800ead4 <_printf_i+0x238>)
 800ea0a:	2778      	movs	r7, #120	@ 0x78
 800ea0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea10:	6823      	ldr	r3, [r4, #0]
 800ea12:	6831      	ldr	r1, [r6, #0]
 800ea14:	061f      	lsls	r7, r3, #24
 800ea16:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea1a:	d402      	bmi.n	800ea22 <_printf_i+0x186>
 800ea1c:	065f      	lsls	r7, r3, #25
 800ea1e:	bf48      	it	mi
 800ea20:	b2ad      	uxthmi	r5, r5
 800ea22:	6031      	str	r1, [r6, #0]
 800ea24:	07d9      	lsls	r1, r3, #31
 800ea26:	bf44      	itt	mi
 800ea28:	f043 0320 	orrmi.w	r3, r3, #32
 800ea2c:	6023      	strmi	r3, [r4, #0]
 800ea2e:	b11d      	cbz	r5, 800ea38 <_printf_i+0x19c>
 800ea30:	2310      	movs	r3, #16
 800ea32:	e7ad      	b.n	800e990 <_printf_i+0xf4>
 800ea34:	4826      	ldr	r0, [pc, #152]	@ (800ead0 <_printf_i+0x234>)
 800ea36:	e7e9      	b.n	800ea0c <_printf_i+0x170>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	f023 0320 	bic.w	r3, r3, #32
 800ea3e:	6023      	str	r3, [r4, #0]
 800ea40:	e7f6      	b.n	800ea30 <_printf_i+0x194>
 800ea42:	4616      	mov	r6, r2
 800ea44:	e7bd      	b.n	800e9c2 <_printf_i+0x126>
 800ea46:	6833      	ldr	r3, [r6, #0]
 800ea48:	6825      	ldr	r5, [r4, #0]
 800ea4a:	6961      	ldr	r1, [r4, #20]
 800ea4c:	1d18      	adds	r0, r3, #4
 800ea4e:	6030      	str	r0, [r6, #0]
 800ea50:	062e      	lsls	r6, r5, #24
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	d501      	bpl.n	800ea5a <_printf_i+0x1be>
 800ea56:	6019      	str	r1, [r3, #0]
 800ea58:	e002      	b.n	800ea60 <_printf_i+0x1c4>
 800ea5a:	0668      	lsls	r0, r5, #25
 800ea5c:	d5fb      	bpl.n	800ea56 <_printf_i+0x1ba>
 800ea5e:	8019      	strh	r1, [r3, #0]
 800ea60:	2300      	movs	r3, #0
 800ea62:	6123      	str	r3, [r4, #16]
 800ea64:	4616      	mov	r6, r2
 800ea66:	e7bc      	b.n	800e9e2 <_printf_i+0x146>
 800ea68:	6833      	ldr	r3, [r6, #0]
 800ea6a:	1d1a      	adds	r2, r3, #4
 800ea6c:	6032      	str	r2, [r6, #0]
 800ea6e:	681e      	ldr	r6, [r3, #0]
 800ea70:	6862      	ldr	r2, [r4, #4]
 800ea72:	2100      	movs	r1, #0
 800ea74:	4630      	mov	r0, r6
 800ea76:	f7f1 fbab 	bl	80001d0 <memchr>
 800ea7a:	b108      	cbz	r0, 800ea80 <_printf_i+0x1e4>
 800ea7c:	1b80      	subs	r0, r0, r6
 800ea7e:	6060      	str	r0, [r4, #4]
 800ea80:	6863      	ldr	r3, [r4, #4]
 800ea82:	6123      	str	r3, [r4, #16]
 800ea84:	2300      	movs	r3, #0
 800ea86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea8a:	e7aa      	b.n	800e9e2 <_printf_i+0x146>
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	4632      	mov	r2, r6
 800ea90:	4649      	mov	r1, r9
 800ea92:	4640      	mov	r0, r8
 800ea94:	47d0      	blx	sl
 800ea96:	3001      	adds	r0, #1
 800ea98:	d0ad      	beq.n	800e9f6 <_printf_i+0x15a>
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	079b      	lsls	r3, r3, #30
 800ea9e:	d413      	bmi.n	800eac8 <_printf_i+0x22c>
 800eaa0:	68e0      	ldr	r0, [r4, #12]
 800eaa2:	9b03      	ldr	r3, [sp, #12]
 800eaa4:	4298      	cmp	r0, r3
 800eaa6:	bfb8      	it	lt
 800eaa8:	4618      	movlt	r0, r3
 800eaaa:	e7a6      	b.n	800e9fa <_printf_i+0x15e>
 800eaac:	2301      	movs	r3, #1
 800eaae:	4632      	mov	r2, r6
 800eab0:	4649      	mov	r1, r9
 800eab2:	4640      	mov	r0, r8
 800eab4:	47d0      	blx	sl
 800eab6:	3001      	adds	r0, #1
 800eab8:	d09d      	beq.n	800e9f6 <_printf_i+0x15a>
 800eaba:	3501      	adds	r5, #1
 800eabc:	68e3      	ldr	r3, [r4, #12]
 800eabe:	9903      	ldr	r1, [sp, #12]
 800eac0:	1a5b      	subs	r3, r3, r1
 800eac2:	42ab      	cmp	r3, r5
 800eac4:	dcf2      	bgt.n	800eaac <_printf_i+0x210>
 800eac6:	e7eb      	b.n	800eaa0 <_printf_i+0x204>
 800eac8:	2500      	movs	r5, #0
 800eaca:	f104 0619 	add.w	r6, r4, #25
 800eace:	e7f5      	b.n	800eabc <_printf_i+0x220>
 800ead0:	0800f661 	.word	0x0800f661
 800ead4:	0800f672 	.word	0x0800f672

0800ead8 <__sflush_r>:
 800ead8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae0:	0716      	lsls	r6, r2, #28
 800eae2:	4605      	mov	r5, r0
 800eae4:	460c      	mov	r4, r1
 800eae6:	d454      	bmi.n	800eb92 <__sflush_r+0xba>
 800eae8:	684b      	ldr	r3, [r1, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dc02      	bgt.n	800eaf4 <__sflush_r+0x1c>
 800eaee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dd48      	ble.n	800eb86 <__sflush_r+0xae>
 800eaf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	d045      	beq.n	800eb86 <__sflush_r+0xae>
 800eafa:	2300      	movs	r3, #0
 800eafc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb00:	682f      	ldr	r7, [r5, #0]
 800eb02:	6a21      	ldr	r1, [r4, #32]
 800eb04:	602b      	str	r3, [r5, #0]
 800eb06:	d030      	beq.n	800eb6a <__sflush_r+0x92>
 800eb08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb0a:	89a3      	ldrh	r3, [r4, #12]
 800eb0c:	0759      	lsls	r1, r3, #29
 800eb0e:	d505      	bpl.n	800eb1c <__sflush_r+0x44>
 800eb10:	6863      	ldr	r3, [r4, #4]
 800eb12:	1ad2      	subs	r2, r2, r3
 800eb14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb16:	b10b      	cbz	r3, 800eb1c <__sflush_r+0x44>
 800eb18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb1a:	1ad2      	subs	r2, r2, r3
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb20:	6a21      	ldr	r1, [r4, #32]
 800eb22:	4628      	mov	r0, r5
 800eb24:	47b0      	blx	r6
 800eb26:	1c43      	adds	r3, r0, #1
 800eb28:	89a3      	ldrh	r3, [r4, #12]
 800eb2a:	d106      	bne.n	800eb3a <__sflush_r+0x62>
 800eb2c:	6829      	ldr	r1, [r5, #0]
 800eb2e:	291d      	cmp	r1, #29
 800eb30:	d82b      	bhi.n	800eb8a <__sflush_r+0xb2>
 800eb32:	4a2a      	ldr	r2, [pc, #168]	@ (800ebdc <__sflush_r+0x104>)
 800eb34:	40ca      	lsrs	r2, r1
 800eb36:	07d6      	lsls	r6, r2, #31
 800eb38:	d527      	bpl.n	800eb8a <__sflush_r+0xb2>
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	6062      	str	r2, [r4, #4]
 800eb3e:	04d9      	lsls	r1, r3, #19
 800eb40:	6922      	ldr	r2, [r4, #16]
 800eb42:	6022      	str	r2, [r4, #0]
 800eb44:	d504      	bpl.n	800eb50 <__sflush_r+0x78>
 800eb46:	1c42      	adds	r2, r0, #1
 800eb48:	d101      	bne.n	800eb4e <__sflush_r+0x76>
 800eb4a:	682b      	ldr	r3, [r5, #0]
 800eb4c:	b903      	cbnz	r3, 800eb50 <__sflush_r+0x78>
 800eb4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb52:	602f      	str	r7, [r5, #0]
 800eb54:	b1b9      	cbz	r1, 800eb86 <__sflush_r+0xae>
 800eb56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb5a:	4299      	cmp	r1, r3
 800eb5c:	d002      	beq.n	800eb64 <__sflush_r+0x8c>
 800eb5e:	4628      	mov	r0, r5
 800eb60:	f7ff fb4a 	bl	800e1f8 <_free_r>
 800eb64:	2300      	movs	r3, #0
 800eb66:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb68:	e00d      	b.n	800eb86 <__sflush_r+0xae>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	47b0      	blx	r6
 800eb70:	4602      	mov	r2, r0
 800eb72:	1c50      	adds	r0, r2, #1
 800eb74:	d1c9      	bne.n	800eb0a <__sflush_r+0x32>
 800eb76:	682b      	ldr	r3, [r5, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d0c6      	beq.n	800eb0a <__sflush_r+0x32>
 800eb7c:	2b1d      	cmp	r3, #29
 800eb7e:	d001      	beq.n	800eb84 <__sflush_r+0xac>
 800eb80:	2b16      	cmp	r3, #22
 800eb82:	d11e      	bne.n	800ebc2 <__sflush_r+0xea>
 800eb84:	602f      	str	r7, [r5, #0]
 800eb86:	2000      	movs	r0, #0
 800eb88:	e022      	b.n	800ebd0 <__sflush_r+0xf8>
 800eb8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb8e:	b21b      	sxth	r3, r3
 800eb90:	e01b      	b.n	800ebca <__sflush_r+0xf2>
 800eb92:	690f      	ldr	r7, [r1, #16]
 800eb94:	2f00      	cmp	r7, #0
 800eb96:	d0f6      	beq.n	800eb86 <__sflush_r+0xae>
 800eb98:	0793      	lsls	r3, r2, #30
 800eb9a:	680e      	ldr	r6, [r1, #0]
 800eb9c:	bf08      	it	eq
 800eb9e:	694b      	ldreq	r3, [r1, #20]
 800eba0:	600f      	str	r7, [r1, #0]
 800eba2:	bf18      	it	ne
 800eba4:	2300      	movne	r3, #0
 800eba6:	eba6 0807 	sub.w	r8, r6, r7
 800ebaa:	608b      	str	r3, [r1, #8]
 800ebac:	f1b8 0f00 	cmp.w	r8, #0
 800ebb0:	dde9      	ble.n	800eb86 <__sflush_r+0xae>
 800ebb2:	6a21      	ldr	r1, [r4, #32]
 800ebb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ebb6:	4643      	mov	r3, r8
 800ebb8:	463a      	mov	r2, r7
 800ebba:	4628      	mov	r0, r5
 800ebbc:	47b0      	blx	r6
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	dc08      	bgt.n	800ebd4 <__sflush_r+0xfc>
 800ebc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebca:	81a3      	strh	r3, [r4, #12]
 800ebcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd4:	4407      	add	r7, r0
 800ebd6:	eba8 0800 	sub.w	r8, r8, r0
 800ebda:	e7e7      	b.n	800ebac <__sflush_r+0xd4>
 800ebdc:	20400001 	.word	0x20400001

0800ebe0 <_fflush_r>:
 800ebe0:	b538      	push	{r3, r4, r5, lr}
 800ebe2:	690b      	ldr	r3, [r1, #16]
 800ebe4:	4605      	mov	r5, r0
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	b913      	cbnz	r3, 800ebf0 <_fflush_r+0x10>
 800ebea:	2500      	movs	r5, #0
 800ebec:	4628      	mov	r0, r5
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	b118      	cbz	r0, 800ebfa <_fflush_r+0x1a>
 800ebf2:	6a03      	ldr	r3, [r0, #32]
 800ebf4:	b90b      	cbnz	r3, 800ebfa <_fflush_r+0x1a>
 800ebf6:	f7ff f8e9 	bl	800ddcc <__sinit>
 800ebfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0f3      	beq.n	800ebea <_fflush_r+0xa>
 800ec02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec04:	07d0      	lsls	r0, r2, #31
 800ec06:	d404      	bmi.n	800ec12 <_fflush_r+0x32>
 800ec08:	0599      	lsls	r1, r3, #22
 800ec0a:	d402      	bmi.n	800ec12 <_fflush_r+0x32>
 800ec0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec0e:	f7ff fae2 	bl	800e1d6 <__retarget_lock_acquire_recursive>
 800ec12:	4628      	mov	r0, r5
 800ec14:	4621      	mov	r1, r4
 800ec16:	f7ff ff5f 	bl	800ead8 <__sflush_r>
 800ec1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec1c:	07da      	lsls	r2, r3, #31
 800ec1e:	4605      	mov	r5, r0
 800ec20:	d4e4      	bmi.n	800ebec <_fflush_r+0xc>
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	059b      	lsls	r3, r3, #22
 800ec26:	d4e1      	bmi.n	800ebec <_fflush_r+0xc>
 800ec28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec2a:	f7ff fad5 	bl	800e1d8 <__retarget_lock_release_recursive>
 800ec2e:	e7dd      	b.n	800ebec <_fflush_r+0xc>

0800ec30 <__swhatbuf_r>:
 800ec30:	b570      	push	{r4, r5, r6, lr}
 800ec32:	460c      	mov	r4, r1
 800ec34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec38:	2900      	cmp	r1, #0
 800ec3a:	b096      	sub	sp, #88	@ 0x58
 800ec3c:	4615      	mov	r5, r2
 800ec3e:	461e      	mov	r6, r3
 800ec40:	da0d      	bge.n	800ec5e <__swhatbuf_r+0x2e>
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec48:	f04f 0100 	mov.w	r1, #0
 800ec4c:	bf14      	ite	ne
 800ec4e:	2340      	movne	r3, #64	@ 0x40
 800ec50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec54:	2000      	movs	r0, #0
 800ec56:	6031      	str	r1, [r6, #0]
 800ec58:	602b      	str	r3, [r5, #0]
 800ec5a:	b016      	add	sp, #88	@ 0x58
 800ec5c:	bd70      	pop	{r4, r5, r6, pc}
 800ec5e:	466a      	mov	r2, sp
 800ec60:	f000 f8f6 	bl	800ee50 <_fstat_r>
 800ec64:	2800      	cmp	r0, #0
 800ec66:	dbec      	blt.n	800ec42 <__swhatbuf_r+0x12>
 800ec68:	9901      	ldr	r1, [sp, #4]
 800ec6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec72:	4259      	negs	r1, r3
 800ec74:	4159      	adcs	r1, r3
 800ec76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec7a:	e7eb      	b.n	800ec54 <__swhatbuf_r+0x24>

0800ec7c <__smakebuf_r>:
 800ec7c:	898b      	ldrh	r3, [r1, #12]
 800ec7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec80:	079d      	lsls	r5, r3, #30
 800ec82:	4606      	mov	r6, r0
 800ec84:	460c      	mov	r4, r1
 800ec86:	d507      	bpl.n	800ec98 <__smakebuf_r+0x1c>
 800ec88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec8c:	6023      	str	r3, [r4, #0]
 800ec8e:	6123      	str	r3, [r4, #16]
 800ec90:	2301      	movs	r3, #1
 800ec92:	6163      	str	r3, [r4, #20]
 800ec94:	b003      	add	sp, #12
 800ec96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec98:	ab01      	add	r3, sp, #4
 800ec9a:	466a      	mov	r2, sp
 800ec9c:	f7ff ffc8 	bl	800ec30 <__swhatbuf_r>
 800eca0:	9f00      	ldr	r7, [sp, #0]
 800eca2:	4605      	mov	r5, r0
 800eca4:	4639      	mov	r1, r7
 800eca6:	4630      	mov	r0, r6
 800eca8:	f7fe ff78 	bl	800db9c <_malloc_r>
 800ecac:	b948      	cbnz	r0, 800ecc2 <__smakebuf_r+0x46>
 800ecae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecb2:	059a      	lsls	r2, r3, #22
 800ecb4:	d4ee      	bmi.n	800ec94 <__smakebuf_r+0x18>
 800ecb6:	f023 0303 	bic.w	r3, r3, #3
 800ecba:	f043 0302 	orr.w	r3, r3, #2
 800ecbe:	81a3      	strh	r3, [r4, #12]
 800ecc0:	e7e2      	b.n	800ec88 <__smakebuf_r+0xc>
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	6020      	str	r0, [r4, #0]
 800ecc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecca:	81a3      	strh	r3, [r4, #12]
 800eccc:	9b01      	ldr	r3, [sp, #4]
 800ecce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ecd2:	b15b      	cbz	r3, 800ecec <__smakebuf_r+0x70>
 800ecd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecd8:	4630      	mov	r0, r6
 800ecda:	f000 f8cb 	bl	800ee74 <_isatty_r>
 800ecde:	b128      	cbz	r0, 800ecec <__smakebuf_r+0x70>
 800ece0:	89a3      	ldrh	r3, [r4, #12]
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	f043 0301 	orr.w	r3, r3, #1
 800ecea:	81a3      	strh	r3, [r4, #12]
 800ecec:	89a3      	ldrh	r3, [r4, #12]
 800ecee:	431d      	orrs	r5, r3
 800ecf0:	81a5      	strh	r5, [r4, #12]
 800ecf2:	e7cf      	b.n	800ec94 <__smakebuf_r+0x18>

0800ecf4 <__swbuf_r>:
 800ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf6:	460e      	mov	r6, r1
 800ecf8:	4614      	mov	r4, r2
 800ecfa:	4605      	mov	r5, r0
 800ecfc:	b118      	cbz	r0, 800ed06 <__swbuf_r+0x12>
 800ecfe:	6a03      	ldr	r3, [r0, #32]
 800ed00:	b90b      	cbnz	r3, 800ed06 <__swbuf_r+0x12>
 800ed02:	f7ff f863 	bl	800ddcc <__sinit>
 800ed06:	69a3      	ldr	r3, [r4, #24]
 800ed08:	60a3      	str	r3, [r4, #8]
 800ed0a:	89a3      	ldrh	r3, [r4, #12]
 800ed0c:	071a      	lsls	r2, r3, #28
 800ed0e:	d501      	bpl.n	800ed14 <__swbuf_r+0x20>
 800ed10:	6923      	ldr	r3, [r4, #16]
 800ed12:	b943      	cbnz	r3, 800ed26 <__swbuf_r+0x32>
 800ed14:	4621      	mov	r1, r4
 800ed16:	4628      	mov	r0, r5
 800ed18:	f000 f82a 	bl	800ed70 <__swsetup_r>
 800ed1c:	b118      	cbz	r0, 800ed26 <__swbuf_r+0x32>
 800ed1e:	f04f 37ff 	mov.w	r7, #4294967295
 800ed22:	4638      	mov	r0, r7
 800ed24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed26:	6823      	ldr	r3, [r4, #0]
 800ed28:	6922      	ldr	r2, [r4, #16]
 800ed2a:	1a98      	subs	r0, r3, r2
 800ed2c:	6963      	ldr	r3, [r4, #20]
 800ed2e:	b2f6      	uxtb	r6, r6
 800ed30:	4283      	cmp	r3, r0
 800ed32:	4637      	mov	r7, r6
 800ed34:	dc05      	bgt.n	800ed42 <__swbuf_r+0x4e>
 800ed36:	4621      	mov	r1, r4
 800ed38:	4628      	mov	r0, r5
 800ed3a:	f7ff ff51 	bl	800ebe0 <_fflush_r>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d1ed      	bne.n	800ed1e <__swbuf_r+0x2a>
 800ed42:	68a3      	ldr	r3, [r4, #8]
 800ed44:	3b01      	subs	r3, #1
 800ed46:	60a3      	str	r3, [r4, #8]
 800ed48:	6823      	ldr	r3, [r4, #0]
 800ed4a:	1c5a      	adds	r2, r3, #1
 800ed4c:	6022      	str	r2, [r4, #0]
 800ed4e:	701e      	strb	r6, [r3, #0]
 800ed50:	6962      	ldr	r2, [r4, #20]
 800ed52:	1c43      	adds	r3, r0, #1
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d004      	beq.n	800ed62 <__swbuf_r+0x6e>
 800ed58:	89a3      	ldrh	r3, [r4, #12]
 800ed5a:	07db      	lsls	r3, r3, #31
 800ed5c:	d5e1      	bpl.n	800ed22 <__swbuf_r+0x2e>
 800ed5e:	2e0a      	cmp	r6, #10
 800ed60:	d1df      	bne.n	800ed22 <__swbuf_r+0x2e>
 800ed62:	4621      	mov	r1, r4
 800ed64:	4628      	mov	r0, r5
 800ed66:	f7ff ff3b 	bl	800ebe0 <_fflush_r>
 800ed6a:	2800      	cmp	r0, #0
 800ed6c:	d0d9      	beq.n	800ed22 <__swbuf_r+0x2e>
 800ed6e:	e7d6      	b.n	800ed1e <__swbuf_r+0x2a>

0800ed70 <__swsetup_r>:
 800ed70:	b538      	push	{r3, r4, r5, lr}
 800ed72:	4b29      	ldr	r3, [pc, #164]	@ (800ee18 <__swsetup_r+0xa8>)
 800ed74:	4605      	mov	r5, r0
 800ed76:	6818      	ldr	r0, [r3, #0]
 800ed78:	460c      	mov	r4, r1
 800ed7a:	b118      	cbz	r0, 800ed84 <__swsetup_r+0x14>
 800ed7c:	6a03      	ldr	r3, [r0, #32]
 800ed7e:	b90b      	cbnz	r3, 800ed84 <__swsetup_r+0x14>
 800ed80:	f7ff f824 	bl	800ddcc <__sinit>
 800ed84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed88:	0719      	lsls	r1, r3, #28
 800ed8a:	d422      	bmi.n	800edd2 <__swsetup_r+0x62>
 800ed8c:	06da      	lsls	r2, r3, #27
 800ed8e:	d407      	bmi.n	800eda0 <__swsetup_r+0x30>
 800ed90:	2209      	movs	r2, #9
 800ed92:	602a      	str	r2, [r5, #0]
 800ed94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed98:	81a3      	strh	r3, [r4, #12]
 800ed9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed9e:	e033      	b.n	800ee08 <__swsetup_r+0x98>
 800eda0:	0758      	lsls	r0, r3, #29
 800eda2:	d512      	bpl.n	800edca <__swsetup_r+0x5a>
 800eda4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eda6:	b141      	cbz	r1, 800edba <__swsetup_r+0x4a>
 800eda8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edac:	4299      	cmp	r1, r3
 800edae:	d002      	beq.n	800edb6 <__swsetup_r+0x46>
 800edb0:	4628      	mov	r0, r5
 800edb2:	f7ff fa21 	bl	800e1f8 <_free_r>
 800edb6:	2300      	movs	r3, #0
 800edb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800edba:	89a3      	ldrh	r3, [r4, #12]
 800edbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800edc0:	81a3      	strh	r3, [r4, #12]
 800edc2:	2300      	movs	r3, #0
 800edc4:	6063      	str	r3, [r4, #4]
 800edc6:	6923      	ldr	r3, [r4, #16]
 800edc8:	6023      	str	r3, [r4, #0]
 800edca:	89a3      	ldrh	r3, [r4, #12]
 800edcc:	f043 0308 	orr.w	r3, r3, #8
 800edd0:	81a3      	strh	r3, [r4, #12]
 800edd2:	6923      	ldr	r3, [r4, #16]
 800edd4:	b94b      	cbnz	r3, 800edea <__swsetup_r+0x7a>
 800edd6:	89a3      	ldrh	r3, [r4, #12]
 800edd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ede0:	d003      	beq.n	800edea <__swsetup_r+0x7a>
 800ede2:	4621      	mov	r1, r4
 800ede4:	4628      	mov	r0, r5
 800ede6:	f7ff ff49 	bl	800ec7c <__smakebuf_r>
 800edea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edee:	f013 0201 	ands.w	r2, r3, #1
 800edf2:	d00a      	beq.n	800ee0a <__swsetup_r+0x9a>
 800edf4:	2200      	movs	r2, #0
 800edf6:	60a2      	str	r2, [r4, #8]
 800edf8:	6962      	ldr	r2, [r4, #20]
 800edfa:	4252      	negs	r2, r2
 800edfc:	61a2      	str	r2, [r4, #24]
 800edfe:	6922      	ldr	r2, [r4, #16]
 800ee00:	b942      	cbnz	r2, 800ee14 <__swsetup_r+0xa4>
 800ee02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ee06:	d1c5      	bne.n	800ed94 <__swsetup_r+0x24>
 800ee08:	bd38      	pop	{r3, r4, r5, pc}
 800ee0a:	0799      	lsls	r1, r3, #30
 800ee0c:	bf58      	it	pl
 800ee0e:	6962      	ldrpl	r2, [r4, #20]
 800ee10:	60a2      	str	r2, [r4, #8]
 800ee12:	e7f4      	b.n	800edfe <__swsetup_r+0x8e>
 800ee14:	2000      	movs	r0, #0
 800ee16:	e7f7      	b.n	800ee08 <__swsetup_r+0x98>
 800ee18:	2000002c 	.word	0x2000002c

0800ee1c <memmove>:
 800ee1c:	4288      	cmp	r0, r1
 800ee1e:	b510      	push	{r4, lr}
 800ee20:	eb01 0402 	add.w	r4, r1, r2
 800ee24:	d902      	bls.n	800ee2c <memmove+0x10>
 800ee26:	4284      	cmp	r4, r0
 800ee28:	4623      	mov	r3, r4
 800ee2a:	d807      	bhi.n	800ee3c <memmove+0x20>
 800ee2c:	1e43      	subs	r3, r0, #1
 800ee2e:	42a1      	cmp	r1, r4
 800ee30:	d008      	beq.n	800ee44 <memmove+0x28>
 800ee32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee3a:	e7f8      	b.n	800ee2e <memmove+0x12>
 800ee3c:	4402      	add	r2, r0
 800ee3e:	4601      	mov	r1, r0
 800ee40:	428a      	cmp	r2, r1
 800ee42:	d100      	bne.n	800ee46 <memmove+0x2a>
 800ee44:	bd10      	pop	{r4, pc}
 800ee46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee4e:	e7f7      	b.n	800ee40 <memmove+0x24>

0800ee50 <_fstat_r>:
 800ee50:	b538      	push	{r3, r4, r5, lr}
 800ee52:	4d07      	ldr	r5, [pc, #28]	@ (800ee70 <_fstat_r+0x20>)
 800ee54:	2300      	movs	r3, #0
 800ee56:	4604      	mov	r4, r0
 800ee58:	4608      	mov	r0, r1
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	602b      	str	r3, [r5, #0]
 800ee5e:	f7f5 ff05 	bl	8004c6c <_fstat>
 800ee62:	1c43      	adds	r3, r0, #1
 800ee64:	d102      	bne.n	800ee6c <_fstat_r+0x1c>
 800ee66:	682b      	ldr	r3, [r5, #0]
 800ee68:	b103      	cbz	r3, 800ee6c <_fstat_r+0x1c>
 800ee6a:	6023      	str	r3, [r4, #0]
 800ee6c:	bd38      	pop	{r3, r4, r5, pc}
 800ee6e:	bf00      	nop
 800ee70:	20001228 	.word	0x20001228

0800ee74 <_isatty_r>:
 800ee74:	b538      	push	{r3, r4, r5, lr}
 800ee76:	4d06      	ldr	r5, [pc, #24]	@ (800ee90 <_isatty_r+0x1c>)
 800ee78:	2300      	movs	r3, #0
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	4608      	mov	r0, r1
 800ee7e:	602b      	str	r3, [r5, #0]
 800ee80:	f7f5 ff04 	bl	8004c8c <_isatty>
 800ee84:	1c43      	adds	r3, r0, #1
 800ee86:	d102      	bne.n	800ee8e <_isatty_r+0x1a>
 800ee88:	682b      	ldr	r3, [r5, #0]
 800ee8a:	b103      	cbz	r3, 800ee8e <_isatty_r+0x1a>
 800ee8c:	6023      	str	r3, [r4, #0]
 800ee8e:	bd38      	pop	{r3, r4, r5, pc}
 800ee90:	20001228 	.word	0x20001228

0800ee94 <_realloc_r>:
 800ee94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee98:	4607      	mov	r7, r0
 800ee9a:	4614      	mov	r4, r2
 800ee9c:	460d      	mov	r5, r1
 800ee9e:	b921      	cbnz	r1, 800eeaa <_realloc_r+0x16>
 800eea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eea4:	4611      	mov	r1, r2
 800eea6:	f7fe be79 	b.w	800db9c <_malloc_r>
 800eeaa:	b92a      	cbnz	r2, 800eeb8 <_realloc_r+0x24>
 800eeac:	f7ff f9a4 	bl	800e1f8 <_free_r>
 800eeb0:	4625      	mov	r5, r4
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	f000 f81a 	bl	800eef0 <_malloc_usable_size_r>
 800eebc:	4284      	cmp	r4, r0
 800eebe:	4606      	mov	r6, r0
 800eec0:	d802      	bhi.n	800eec8 <_realloc_r+0x34>
 800eec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eec6:	d8f4      	bhi.n	800eeb2 <_realloc_r+0x1e>
 800eec8:	4621      	mov	r1, r4
 800eeca:	4638      	mov	r0, r7
 800eecc:	f7fe fe66 	bl	800db9c <_malloc_r>
 800eed0:	4680      	mov	r8, r0
 800eed2:	b908      	cbnz	r0, 800eed8 <_realloc_r+0x44>
 800eed4:	4645      	mov	r5, r8
 800eed6:	e7ec      	b.n	800eeb2 <_realloc_r+0x1e>
 800eed8:	42b4      	cmp	r4, r6
 800eeda:	4622      	mov	r2, r4
 800eedc:	4629      	mov	r1, r5
 800eede:	bf28      	it	cs
 800eee0:	4632      	movcs	r2, r6
 800eee2:	f7ff f97a 	bl	800e1da <memcpy>
 800eee6:	4629      	mov	r1, r5
 800eee8:	4638      	mov	r0, r7
 800eeea:	f7ff f985 	bl	800e1f8 <_free_r>
 800eeee:	e7f1      	b.n	800eed4 <_realloc_r+0x40>

0800eef0 <_malloc_usable_size_r>:
 800eef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eef4:	1f18      	subs	r0, r3, #4
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	bfbc      	itt	lt
 800eefa:	580b      	ldrlt	r3, [r1, r0]
 800eefc:	18c0      	addlt	r0, r0, r3
 800eefe:	4770      	bx	lr

0800ef00 <_init>:
 800ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef02:	bf00      	nop
 800ef04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef06:	bc08      	pop	{r3}
 800ef08:	469e      	mov	lr, r3
 800ef0a:	4770      	bx	lr

0800ef0c <_fini>:
 800ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0e:	bf00      	nop
 800ef10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef12:	bc08      	pop	{r3}
 800ef14:	469e      	mov	lr, r3
 800ef16:	4770      	bx	lr
