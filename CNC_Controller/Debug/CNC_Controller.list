
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08008eec  08008eec  00009eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009234  08009234  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009234  08009234  0000a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800923c  0800923c  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800923c  0800923c  0000a23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009240  08009240  0000a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009244  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000060  080092a4  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000acc  080092a4  0000bacc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b77  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aef  00000000  00000000  00021c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  000256f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001021  00000000  00000000  00026be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002792c  00000000  00000000  00027c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ede4  00000000  00000000  0004f535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f44f1  00000000  00000000  0006e319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016280a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a0c  00000000  00000000  00162850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0016825c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ed4 	.word	0x08008ed4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008ed4 	.word	0x08008ed4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <has_header_tail>:
	return 0;
}

// Generic header/tail validation
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4611      	mov	r1, r2
 80005b8:	461a      	mov	r2, r3
 80005ba:	460b      	mov	r3, r1
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4613      	mov	r3, r2
 80005c0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d011      	beq.n	80005ec <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d90e      	bls.n	80005ec <has_header_tail+0x40>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d109      	bne.n	80005ec <has_header_tail+0x40>
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3b01      	subs	r3, #1
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d101      	bne.n	80005ec <has_header_tail+0x40>
 80005e8:	2301      	movs	r3, #1
 80005ea:	e000      	b.n	80005ee <has_header_tail+0x42>
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <frame_expect_req>:
// =====================
// Frame validators
// =====================
// Ensure buffer has min length, proper header/tail, and expected type
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b084      	sub	sp, #16
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4613      	mov	r3, r2
 8000608:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <frame_expect_req+0x1e>
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d202      	bcs.n	800061e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	e012      	b.n	8000644 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800061e:	2355      	movs	r3, #85	@ 0x55
 8000620:	22aa      	movs	r2, #170	@ 0xaa
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f7ff ffc1 	bl	80005ac <has_header_tail>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	3301      	adds	r3, #1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	429a      	cmp	r2, r3
 800063a:	d002      	beq.n	8000642 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 800063c:	f06f 0301 	mvn.w	r3, #1
 8000640:	e000      	b.n	8000644 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <led_ctrl_req_decoder>:

// New LED_CTRL (RGB) request is 9 bytes total:
// [0]=0xAA, [1]=0x07, [2]=frameId, [3]=ledMask, [4]=R, [5]=G, [6]=B,
// [7]=parity(byte XOR over 1..6), [8]=0x55

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <led_ctrl_req_decoder+0x18>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	e025      	b.n	80006b6 <led_ctrl_req_decoder+0x6a>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, 9);
 800066a:	2309      	movs	r3, #9
 800066c:	2207      	movs	r2, #7
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffc2 	bl	80005fa <frame_expect_req>
 8000676:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <led_ctrl_req_decoder+0x36>
        return st;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	e019      	b.n	80006b6 <led_ctrl_req_decoder+0x6a>
    out->frameId = raw[2];
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3302      	adds	r3, #2
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3303      	adds	r3, #3
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	705a      	strb	r2, [r3, #1]
    out->r = raw[4];
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3304      	adds	r3, #4
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	709a      	strb	r2, [r3, #2]
    out->g = raw[5];
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3305      	adds	r3, #5
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	70da      	strb	r2, [r3, #3]
    out->b = raw[6];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3306      	adds	r3, #6
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	711a      	strb	r2, [r3, #4]
    return PROTO_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 80006cc:	2248      	movs	r2, #72	@ 0x48
 80006ce:	2100      	movs	r1, #0
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f008 f82f 	bl	8008734 <memset>
	r->resp = resp_fifo;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d009      	beq.n	80006f6 <router_init+0x36>
		handlers = *h;
 80006e2:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <router_init+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4614      	mov	r4, r2
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bdb0      	pop	{r4, r5, r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000007c 	.word	0x2000007c

08000704 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	if (n < 4)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d801      	bhi.n	8000718 <is_req_complete+0x14>
		return 0; // mínimo
 8000714:	2300      	movs	r3, #0
 8000716:	e01a      	b.n	800074e <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2baa      	cmp	r3, #170	@ 0xaa
 800071e:	d002      	beq.n	8000726 <is_req_complete+0x22>
		return -1; // inválido
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	e013      	b.n	800074e <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 8000726:	2303      	movs	r3, #3
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	e00b      	b.n	8000744 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b55      	cmp	r3, #85	@ 0x55
 8000736:	d102      	bne.n	800073e <is_req_complete+0x3a>
			return (int) (i + 1);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	e007      	b.n	800074e <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3ef      	bcc.n	800072c <is_req_complete+0x28>
	}
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	if (len < 4)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b03      	cmp	r3, #3
 800076c:	f240 80a4 	bls.w	80008b8 <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3301      	adds	r3, #1
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	3b01      	subs	r3, #1
 800077c:	2b1f      	cmp	r3, #31
 800077e:	f200 809d 	bhi.w	80008bc <dispatch+0x160>
 8000782:	a201      	add	r2, pc, #4	@ (adr r2, 8000788 <dispatch+0x2c>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	08000809 	.word	0x08000809
 800078c:	0800081f 	.word	0x0800081f
 8000790:	08000835 	.word	0x08000835
 8000794:	0800084b 	.word	0x0800084b
 8000798:	08000861 	.word	0x08000861
 800079c:	08000877 	.word	0x08000877
 80007a0:	0800088d 	.word	0x0800088d
 80007a4:	080008bd 	.word	0x080008bd
 80007a8:	080008bd 	.word	0x080008bd
 80007ac:	080008bd 	.word	0x080008bd
 80007b0:	080008bd 	.word	0x080008bd
 80007b4:	080008bd 	.word	0x080008bd
 80007b8:	080008bd 	.word	0x080008bd
 80007bc:	080008bd 	.word	0x080008bd
 80007c0:	080008bd 	.word	0x080008bd
 80007c4:	080008bd 	.word	0x080008bd
 80007c8:	080008bd 	.word	0x080008bd
 80007cc:	080008bd 	.word	0x080008bd
 80007d0:	080008bd 	.word	0x080008bd
 80007d4:	080008bd 	.word	0x080008bd
 80007d8:	080008bd 	.word	0x080008bd
 80007dc:	080008bd 	.word	0x080008bd
 80007e0:	080008bd 	.word	0x080008bd
 80007e4:	080008bd 	.word	0x080008bd
 80007e8:	080008bd 	.word	0x080008bd
 80007ec:	080008bd 	.word	0x080008bd
 80007f0:	080008bd 	.word	0x080008bd
 80007f4:	080008bd 	.word	0x080008bd
 80007f8:	080008bd 	.word	0x080008bd
 80007fc:	080008bd 	.word	0x080008bd
 8000800:	080008bd 	.word	0x080008bd
 8000804:	080008a3 	.word	0x080008a3
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 8000808:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <dispatch+0x188>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d057      	beq.n	80008c0 <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 8000810:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <dispatch+0x188>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	4798      	blx	r3
		break;
 800081c:	e050      	b.n	80008c0 <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <dispatch+0x188>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d04e      	beq.n	80008c4 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 8000826:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <dispatch+0x188>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	4798      	blx	r3
		break;
 8000832:	e047      	b.n	80008c4 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <dispatch+0x188>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d045      	beq.n	80008c8 <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <dispatch+0x188>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	4798      	blx	r3
		break;
 8000848:	e03e      	b.n	80008c8 <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <dispatch+0x188>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d03c      	beq.n	80008cc <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 8000852:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <dispatch+0x188>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	4798      	blx	r3
		break;
 800085e:	e035      	b.n	80008cc <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <dispatch+0x188>)
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d033      	beq.n	80008d0 <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <dispatch+0x188>)
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	68b9      	ldr	r1, [r7, #8]
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	4798      	blx	r3
		break;
 8000874:	e02c      	b.n	80008d0 <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <dispatch+0x188>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d02a      	beq.n	80008d4 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <dispatch+0x188>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	4798      	blx	r3
		break;
 800088a:	e023      	b.n	80008d4 <dispatch+0x178>
	case REQ_LED_CTRL:
		if (handlers.on_led_ctrl)
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <dispatch+0x188>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d021      	beq.n	80008d8 <dispatch+0x17c>
			handlers.on_led_ctrl(r, f, len);
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <dispatch+0x188>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	4798      	blx	r3
		break;
 80008a0:	e01a      	b.n	80008d8 <dispatch+0x17c>
	case REQ_FPGA_STATUS:
		if (handlers.on_fpga_status)
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <dispatch+0x188>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d018      	beq.n	80008dc <dispatch+0x180>
			handlers.on_fpga_status(r, f, len);
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <dispatch+0x188>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	4798      	blx	r3
		break;
 80008b6:	e011      	b.n	80008dc <dispatch+0x180>
		return;
 80008b8:	bf00      	nop
 80008ba:	e010      	b.n	80008de <dispatch+0x182>
	default:
		break; // desconhecido
 80008bc:	bf00      	nop
 80008be:	e00e      	b.n	80008de <dispatch+0x182>
		break;
 80008c0:	bf00      	nop
 80008c2:	e00c      	b.n	80008de <dispatch+0x182>
		break;
 80008c4:	bf00      	nop
 80008c6:	e00a      	b.n	80008de <dispatch+0x182>
		break;
 80008c8:	bf00      	nop
 80008ca:	e008      	b.n	80008de <dispatch+0x182>
		break;
 80008cc:	bf00      	nop
 80008ce:	e006      	b.n	80008de <dispatch+0x182>
		break;
 80008d0:	bf00      	nop
 80008d2:	e004      	b.n	80008de <dispatch+0x182>
		break;
 80008d4:	bf00      	nop
 80008d6:	e002      	b.n	80008de <dispatch+0x182>
		break;
 80008d8:	bf00      	nop
 80008da:	e000      	b.n	80008de <dispatch+0x182>
		break;
 80008dc:	bf00      	nop
	}
}
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000007c 	.word	0x2000007c

080008e8 <router_feed_bytes>:

void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < len; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e038      	b.n	800096c <router_feed_bytes+0x84>
		if (r->idx >= sizeof(r->acc))
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000900:	2b3f      	cmp	r3, #63	@ 0x3f
 8000902:	d903      	bls.n	800090c <router_feed_bytes+0x24>
			r->idx = 0; // evita overflow simples
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	441a      	add	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000918:	1c59      	adds	r1, r3, #1
 800091a:	b2c8      	uxtb	r0, r1
 800091c:	68f9      	ldr	r1, [r7, #12]
 800091e:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000922:	4619      	mov	r1, r3
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	545a      	strb	r2, [r3, r1]
		int comp = is_req_complete(r->acc, r->idx);
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000932:	4619      	mov	r1, r3
 8000934:	4610      	mov	r0, r2
 8000936:	f7ff fee5 	bl	8000704 <is_req_complete>
 800093a:	6138      	str	r0, [r7, #16]
		if (comp < 0) {
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da04      	bge.n	800094c <router_feed_bytes+0x64>
			r->idx = 0;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			continue;
 800094a:	e00c      	b.n	8000966 <router_feed_bytes+0x7e>
		} // descarta até header
		if (comp > 0) {
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	2b00      	cmp	r3, #0
 8000950:	dd09      	ble.n	8000966 <router_feed_bytes+0x7e>
			dispatch(r, r->acc, (uint32_t) comp);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4619      	mov	r1, r3
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff feff 	bl	800075c <dispatch>
			r->idx = 0;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	for (uint32_t i = 0; i < len; i++) {
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3c2      	bcc.n	80008fa <router_feed_bytes+0x12>
		}
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <resp_fifo_create>:

response_fifo_t* resp_fifo_create(void) {
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
	response_fifo_t *q = (response_fifo_t*) calloc(1, sizeof(*q));
 8000984:	210c      	movs	r1, #12
 8000986:	2001      	movs	r0, #1
 8000988:	f007 fdcc 	bl	8008524 <calloc>
 800098c:	4603      	mov	r3, r0
 800098e:	607b      	str	r3, [r7, #4]
	return q;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <resp_fifo_pop>:
		q->head = n;
	q->tail = n;
	q->count++;
	return PROTO_OK;
}
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
	if (!q || !q->head || !out)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <resp_fifo_pop+0x20>
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <resp_fifo_pop+0x20>
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <resp_fifo_pop+0x24>
		return 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e02e      	b.n	8000a1c <resp_fifo_pop+0x82>
	node_t *n = q->head;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	617b      	str	r3, [r7, #20]
	if (n->len > max_len)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d202      	bcs.n	80009d4 <resp_fifo_pop+0x3a>
		return PROTO_ERR_RANGE;
 80009ce:	f06f 0303 	mvn.w	r3, #3
 80009d2:	e023      	b.n	8000a1c <resp_fifo_pop+0x82>
	memcpy(out, n->buf, n->len);
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	461a      	mov	r2, r3
 80009de:	68b8      	ldr	r0, [r7, #8]
 80009e0:	f007 feec 	bl	80087bc <memcpy>
	int l = (int) n->len;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
	q->head = n->next;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	601a      	str	r2, [r3, #0]
	if (!q->head)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <resp_fifo_pop+0x66>
		q->tail = NULL;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
	q->count--;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	609a      	str	r2, [r3, #8]
	free(n->buf);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f007 fda4 	bl	800855c <free>
	free(n);
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f007 fda1 	bl	800855c <free>
	return l;
 8000a1a:	693b      	ldr	r3, [r7, #16]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <led_service_init>:
#include "gpio.h"
#include "Protocol/Requests/led_control_request.h"
#include "Services/Log/log_service.h"
#include <stdio.h>

void led_service_init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gi = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    // Configure RGB pins
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
    gi.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
    gi.Pin = LED_R_GPIO_PIN; HAL_GPIO_Init(LED_R_GPIO_PORT, &gi);
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <led_service_init+0x74>)
 8000a66:	f001 ffc1 	bl	80029ec <HAL_GPIO_Init>
    gi.Pin = LED_G_GPIO_PIN; HAL_GPIO_Init(LED_G_GPIO_PORT, &gi);
 8000a6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <led_service_init+0x74>)
 8000a76:	f001 ffb9 	bl	80029ec <HAL_GPIO_Init>
    gi.Pin = LED_B_GPIO_PIN; HAL_GPIO_Init(LED_B_GPIO_PORT, &gi);
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <led_service_init+0x74>)
 8000a84:	f001 ffb2 	bl	80029ec <HAL_GPIO_Init>
    // Default OFF
#if LED_ACTIVE_HIGH
    HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <led_service_init+0x74>)
 8000a8e:	f002 fa39 	bl	8002f04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <led_service_init+0x74>)
 8000a9a:	f002 fa33 	bl	8002f04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <led_service_init+0x74>)
 8000aa4:	f002 fa2e 	bl	8002f04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
#else
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
#endif
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <led_apply_rgb>:
    HAL_GPIO_WritePin(LED_GPIO_PORT, LED_GPIO_PIN, on ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}

#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
static inline void led_apply_rgb(uint8_t r, uint8_t g, uint8_t b, uint8_t mask) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71bb      	strb	r3, [r7, #6]
 8000aca:	460b      	mov	r3, r1
 8000acc:	717b      	strb	r3, [r7, #5]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	713b      	strb	r3, [r7, #4]
    // Treat non-zero as ON (binary per channel). For PWM, integrate TIM later.
    if (mask & LED_MASK_R) {
 8000ad2:	793b      	ldrb	r3, [r7, #4]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00a      	beq.n	8000af2 <led_apply_rgb+0x3e>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2102      	movs	r1, #2
 8000aec:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <led_apply_rgb+0x88>)
 8000aee:	f002 fa09 	bl	8002f04 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_R_GPIO_PORT, LED_R_GPIO_PIN, r ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_G) {
 8000af2:	793b      	ldrb	r3, [r7, #4]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <led_apply_rgb+0x60>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bf14      	ite	ne
 8000b02:	2301      	movne	r3, #1
 8000b04:	2300      	moveq	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0e:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <led_apply_rgb+0x88>)
 8000b10:	f002 f9f8 	bl	8002f04 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_G_GPIO_PORT, LED_G_GPIO_PIN, g ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
    if (mask & LED_MASK_B) {
 8000b14:	793b      	ldrb	r3, [r7, #4]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00a      	beq.n	8000b34 <led_apply_rgb+0x80>
#if LED_ACTIVE_HIGH
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b1e:	797b      	ldrb	r3, [r7, #5]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	bf14      	ite	ne
 8000b24:	2301      	movne	r3, #1
 8000b26:	2300      	moveq	r3, #0
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2180      	movs	r1, #128	@ 0x80
 8000b2e:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <led_apply_rgb+0x88>)
 8000b30:	f002 f9e8 	bl	8002f04 <HAL_GPIO_WritePin>
#else
        HAL_GPIO_WritePin(LED_B_GPIO_PORT, LED_B_GPIO_PIN, b ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
    }
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	48000400 	.word	0x48000400

08000b40 <led_on_led_ctrl>:
#endif

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b099      	sub	sp, #100	@ 0x64
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
    led_ctrl_req_t req;
    if (!frame)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d033      	beq.n	8000bb8 <led_on_led_ctrl+0x78>
        return;
    if (led_ctrl_req_decoder(frame, len, &req) != PROTO_OK)
 8000b50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b54:	461a      	mov	r2, r3
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fd77 	bl	800064c <led_ctrl_req_decoder>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d12b      	bne.n	8000bbc <led_on_led_ctrl+0x7c>
        return;
#if defined(LED_R_GPIO_PIN) && defined(LED_G_GPIO_PIN) && defined(LED_B_GPIO_PIN)
    led_apply_rgb(req.r, req.g, req.b, req.ledMask);
 8000b64:	f897 004a 	ldrb.w	r0, [r7, #74]	@ 0x4a
 8000b68:	f897 104b 	ldrb.w	r1, [r7, #75]	@ 0x4b
 8000b6c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000b70:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000b74:	f7ff ff9e 	bl	8000ab4 <led_apply_rgb>
#if LOG_ENABLE
    // Log concise and verbose (only active mode will emit)
    log_event_ids(1 /*svc:led*/, 1 /*state:applied*/, PROTO_OK);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 f8d5 	bl	8000d2c <log_event_ids>
    char status[64];
    snprintf(status, sizeof status, "mask=0x%02X rgb=%u,%u,%u", (unsigned)req.ledMask, req.r, req.g, req.b);
 8000b82:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000b86:	461c      	mov	r4, r3
 8000b88:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000b8c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8000b90:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 8000b94:	f107 0008 	add.w	r0, r7, #8
 8000b98:	9102      	str	r1, [sp, #8]
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <led_on_led_ctrl+0x84>)
 8000ba2:	2140      	movs	r1, #64	@ 0x40
 8000ba4:	f007 fd90 	bl	80086c8 <sniprintf>
    log_event_names("led", "applied", status);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	461a      	mov	r2, r3
 8000bae:	4906      	ldr	r1, [pc, #24]	@ (8000bc8 <led_on_led_ctrl+0x88>)
 8000bb0:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <led_on_led_ctrl+0x8c>)
 8000bb2:	f000 f8ef 	bl	8000d94 <log_event_names>
 8000bb6:	e002      	b.n	8000bbe <led_on_led_ctrl+0x7e>
        return;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <led_on_led_ctrl+0x7e>
        return;
 8000bbc:	bf00      	nop
#if LOG_ENABLE
    log_event_ids(1, 1, PROTO_OK);
    log_event_names("led", "applied", ((req.r | req.g | req.b) ? "on" : "off"));
#endif
#endif
}
 8000bbe:	3754      	adds	r7, #84	@ 0x54
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	08008eec 	.word	0x08008eec
 8000bc8:	08008f08 	.word	0x08008f08
 8000bcc:	08008f10 	.word	0x08008f10

08000bd0 <rb_count>:
static volatile uint16_t s_tail = 0; // read index
static volatile uint8_t s_tx_busy = 0;
static uint8_t s_tx_buf[LOG_CHUNK_MAX];
static uint16_t s_tx_len = 0;

static inline uint16_t rb_count(void){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
    uint16_t h = s_head, t = s_tail;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <rb_count+0x3c>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	80fb      	strh	r3, [r7, #6]
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <rb_count+0x40>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	80bb      	strh	r3, [r7, #4]
    return (uint16_t)((h >= t) ? (h - t) : (LOG_BUF_SZ - t + h));
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d304      	bcc.n	8000bf4 <rb_count+0x24>
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	e005      	b.n	8000c00 <rb_count+0x30>
 8000bf4:	88fa      	ldrh	r2, [r7, #6]
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000bfe:	b29b      	uxth	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	200004a0 	.word	0x200004a0
 8000c10:	200004a2 	.word	0x200004a2

08000c14 <rb_space>:
static inline uint16_t rb_space(void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
    return (uint16_t)(LOG_BUF_SZ - 1 - rb_count());
 8000c18:	f7ff ffda 	bl	8000bd0 <rb_count>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 8000c22:	3303      	adds	r3, #3
 8000c24:	b29b      	uxth	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <rb_push_bytes>:
static void rb_push_bytes(const uint8_t* data, uint16_t len){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
    if(!data || !len || !s_enabled) return;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d02e      	beq.n	8000c9c <rb_push_bytes+0x70>
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d02b      	beq.n	8000c9c <rb_push_bytes+0x70>
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <rb_push_bytes+0x78>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d027      	beq.n	8000c9c <rb_push_bytes+0x70>
    uint16_t space = rb_space();
 8000c4c:	f7ff ffe2 	bl	8000c14 <rb_space>
 8000c50:	4603      	mov	r3, r0
 8000c52:	81bb      	strh	r3, [r7, #12]
    if(len > space) len = space; // drop excess (lowest priority)
 8000c54:	887a      	ldrh	r2, [r7, #2]
 8000c56:	89bb      	ldrh	r3, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d901      	bls.n	8000c60 <rb_push_bytes+0x34>
 8000c5c:	89bb      	ldrh	r3, [r7, #12]
 8000c5e:	807b      	strh	r3, [r7, #2]
    for(uint16_t i=0;i<len;i++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	81fb      	strh	r3, [r7, #14]
 8000c64:	e015      	b.n	8000c92 <rb_push_bytes+0x66>
        s_buf[s_head] = data[i];
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c6e:	8812      	ldrh	r2, [r2, #0]
 8000c70:	b292      	uxth	r2, r2
 8000c72:	7819      	ldrb	r1, [r3, #0]
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <rb_push_bytes+0x80>)
 8000c76:	5499      	strb	r1, [r3, r2]
        s_head = (uint16_t)((s_head + 1) % LOG_BUF_SZ);
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <rb_push_bytes+0x7c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
    for(uint16_t i=0;i<len;i++){
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	81fb      	strh	r3, [r7, #14]
 8000c92:	89fa      	ldrh	r2, [r7, #14]
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3e5      	bcc.n	8000c66 <rb_push_bytes+0x3a>
 8000c9a:	e000      	b.n	8000c9e <rb_push_bytes+0x72>
    if(!data || !len || !s_enabled) return;
 8000c9c:	bf00      	nop
    }
}
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200004a0 	.word	0x200004a0
 8000cac:	200000a0 	.word	0x200000a0

08000cb0 <push_line>:

static void push_line(const char* line){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    if(!line) return;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <push_line+0x2e>
    size_t n = strlen(line);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fa86 	bl	80001d0 <strlen>
 8000cc4:	60f8      	str	r0, [r7, #12]
    if(n > 240) n = 240; // trim
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cca:	d901      	bls.n	8000cd0 <push_line+0x20>
 8000ccc:	23f0      	movs	r3, #240	@ 0xf0
 8000cce:	60fb      	str	r3, [r7, #12]
    rb_push_bytes((const uint8_t*)line, (uint16_t)n);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffa8 	bl	8000c2c <rb_push_bytes>
 8000cdc:	e000      	b.n	8000ce0 <push_line+0x30>
    if(!line) return;
 8000cde:	bf00      	nop
}
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <log_service_init>:

void log_service_init(void){
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
    s_enabled = LOG_DEFAULT_ENABLED;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <log_service_init+0x30>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
    s_mode = LOG_DEFAULT_MODE;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <log_service_init+0x34>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
    s_head = s_tail = 0;
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <log_service_init+0x38>)
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	801a      	strh	r2, [r3, #0]
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <log_service_init+0x3c>)
 8000d02:	460a      	mov	r2, r1
 8000d04:	801a      	strh	r2, [r3, #0]
    s_tx_busy = 0;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <log_service_init+0x40>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	2000009c 	.word	0x2000009c
 8000d20:	200004a2 	.word	0x200004a2
 8000d24:	200004a0 	.word	0x200004a0
 8000d28:	200004a4 	.word	0x200004a4

08000d2c <log_event_ids>:

void log_set_enabled(int enabled){ s_enabled = (enabled != 0); }
void log_set_mode(log_mode_t mode){ s_mode = mode; }

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b096      	sub	sp, #88	@ 0x58
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	4603      	mov	r3, r0
 8000d34:	603a      	str	r2, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	71bb      	strb	r3, [r7, #6]
    if(!s_enabled) return;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <log_event_ids+0x5c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d01a      	beq.n	8000d7a <log_event_ids+0x4e>
    if(s_mode != LOG_MODE_CONCISE) return;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <log_event_ids+0x60>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d117      	bne.n	8000d7e <log_event_ids+0x52>
    char line[64];
    // Format: L,svc=<id>,state=<id>,status=<num>\r\n
    int nn = snprintf(line, sizeof line, "L,svc=%u,state=%u,status=%ld\r\n",
 8000d4e:	79f9      	ldrb	r1, [r7, #7]
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	f107 000c 	add.w	r0, r7, #12
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <log_event_ids+0x64>)
 8000d60:	2140      	movs	r1, #64	@ 0x40
 8000d62:	f007 fcb1 	bl	80086c8 <sniprintf>
 8000d66:	64f8      	str	r0, [r7, #76]	@ 0x4c
                      (unsigned)service_id, (unsigned)state_id, (long)status);
    if(nn > 0) push_line(line);
 8000d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd08      	ble.n	8000d80 <log_event_ids+0x54>
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff9c 	bl	8000cb0 <push_line>
 8000d78:	e002      	b.n	8000d80 <log_event_ids+0x54>
    if(!s_enabled) return;
 8000d7a:	bf00      	nop
 8000d7c:	e000      	b.n	8000d80 <log_event_ids+0x54>
    if(s_mode != LOG_MODE_CONCISE) return;
 8000d7e:	bf00      	nop
}
 8000d80:	3750      	adds	r7, #80	@ 0x50
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	08008f14 	.word	0x08008f14

08000d94 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b0      	sub	sp, #192	@ 0xc0
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
    if(!s_enabled) return;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <log_event_names+0x78>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d02a      	beq.n	8000dfe <log_event_names+0x6a>
    if(s_mode != LOG_MODE_VERBOSE) return;
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <log_event_names+0x7c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d127      	bne.n	8000e02 <log_event_names+0x6e>
    if(!service_name) service_name = "?";
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <log_event_names+0x28>
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <log_event_names+0x80>)
 8000dba:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <log_event_names+0x32>
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <log_event_names+0x80>)
 8000dc4:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <log_event_names+0x3c>
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <log_event_names+0x80>)
 8000dce:	607b      	str	r3, [r7, #4]
    char line[160];
    // Format: LOG,service=<name>,state=<name>,status=<text>\r\n
    int nn = snprintf(line, sizeof line, "LOG,service=%s,state=%s,status=%s\r\n",
 8000dd0:	f107 0014 	add.w	r0, r7, #20
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <log_event_names+0x84>)
 8000de0:	21a0      	movs	r1, #160	@ 0xa0
 8000de2:	f007 fc71 	bl	80086c8 <sniprintf>
 8000de6:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
                      service_name, state_name, status_text);
    if(nn > 0) push_line(line);
 8000dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dd08      	ble.n	8000e04 <log_event_names+0x70>
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff5a 	bl	8000cb0 <push_line>
 8000dfc:	e002      	b.n	8000e04 <log_event_names+0x70>
    if(!s_enabled) return;
 8000dfe:	bf00      	nop
 8000e00:	e000      	b.n	8000e04 <log_event_names+0x70>
    if(s_mode != LOG_MODE_VERBOSE) return;
 8000e02:	bf00      	nop
}
 8000e04:	37b8      	adds	r7, #184	@ 0xb8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	2000009c 	.word	0x2000009c
 8000e14:	08008f34 	.word	0x08008f34
 8000e18:	08008f38 	.word	0x08008f38

08000e1c <log_poll>:

void log_poll(void){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
    if(!s_enabled) return;
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <log_poll+0xd8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d05b      	beq.n	8000ee2 <log_poll+0xc6>
    if(s_tx_busy) return; // wait for current IT transfer to complete
 8000e2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ef8 <log_poll+0xdc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d158      	bne.n	8000ee6 <log_poll+0xca>
    uint16_t cnt = rb_count();
 8000e34:	f7ff fecc 	bl	8000bd0 <rb_count>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	80bb      	strh	r3, [r7, #4]
    if(!cnt) return;
 8000e3c:	88bb      	ldrh	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d053      	beq.n	8000eea <log_poll+0xce>
    uint16_t n = (cnt > LOG_CHUNK_MAX) ? LOG_CHUNK_MAX : cnt;
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	2b60      	cmp	r3, #96	@ 0x60
 8000e46:	bf28      	it	cs
 8000e48:	2360      	movcs	r3, #96	@ 0x60
 8000e4a:	807b      	strh	r3, [r7, #2]
    uint16_t first = (uint16_t)((s_head >= s_tail) ? (n) : (uint16_t)(LOG_BUF_SZ - s_tail));
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <log_poll+0xe0>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <log_poll+0xe4>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d206      	bcs.n	8000e6a <log_poll+0x4e>
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <log_poll+0xe4>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	e000      	b.n	8000e6c <log_poll+0x50>
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	80fb      	strh	r3, [r7, #6]
    if(first > n) first = n;
 8000e6e:	88fa      	ldrh	r2, [r7, #6]
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d901      	bls.n	8000e7a <log_poll+0x5e>
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	80fb      	strh	r3, [r7, #6]
    memcpy(s_tx_buf, &s_buf[s_tail], first);
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <log_poll+0xe4>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b20      	ldr	r3, [pc, #128]	@ (8000f04 <log_poll+0xe8>)
 8000e84:	4413      	add	r3, r2
 8000e86:	88fa      	ldrh	r2, [r7, #6]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <log_poll+0xec>)
 8000e8c:	f007 fc96 	bl	80087bc <memcpy>
    if(first < n){
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d209      	bcs.n	8000eac <log_poll+0x90>
        memcpy(s_tx_buf + first, &s_buf[0], n - first);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <log_poll+0xec>)
 8000e9c:	1898      	adds	r0, r3, r2
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4917      	ldr	r1, [pc, #92]	@ (8000f04 <log_poll+0xe8>)
 8000ea8:	f007 fc88 	bl	80087bc <memcpy>
    }
    if(HAL_UART_Transmit_IT(&huart1, s_tx_buf, (uint16_t)n) == HAL_OK){
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4915      	ldr	r1, [pc, #84]	@ (8000f08 <log_poll+0xec>)
 8000eb2:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <log_poll+0xf0>)
 8000eb4:	f006 f880 	bl	8006fb8 <HAL_UART_Transmit_IT>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d116      	bne.n	8000eec <log_poll+0xd0>
        s_tail = (uint16_t)((s_tail + n) % LOG_BUF_SZ);
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <log_poll+0xe4>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <log_poll+0xe4>)
 8000ed2:	801a      	strh	r2, [r3, #0]
        s_tx_len = n;
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f10 <log_poll+0xf4>)
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	8013      	strh	r3, [r2, #0]
        s_tx_busy = 1;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <log_poll+0xdc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e004      	b.n	8000eec <log_poll+0xd0>
    if(!s_enabled) return;
 8000ee2:	bf00      	nop
 8000ee4:	e002      	b.n	8000eec <log_poll+0xd0>
    if(s_tx_busy) return; // wait for current IT transfer to complete
 8000ee6:	bf00      	nop
 8000ee8:	e000      	b.n	8000eec <log_poll+0xd0>
    if(!cnt) return;
 8000eea:	bf00      	nop
    }
}
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	200004a4 	.word	0x200004a4
 8000efc:	200004a0 	.word	0x200004a0
 8000f00:	200004a2 	.word	0x200004a2
 8000f04:	200000a0 	.word	0x200000a0
 8000f08:	200004a8 	.word	0x200004a8
 8000f0c:	200008f8 	.word	0x200008f8
 8000f10:	20000508 	.word	0x20000508

08000f14 <HAL_UART_TxCpltCallback>:

// Keep ISR work minimal; just clear busy so app can schedule next chunk.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    if(huart && huart->Instance == USART1){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_UART_TxCpltCallback+0x1e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <HAL_UART_TxCpltCallback+0x2c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d102      	bne.n	8000f32 <HAL_UART_TxCpltCallback+0x1e>
        s_tx_busy = 0;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_UART_TxCpltCallback+0x30>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40013800 	.word	0x40013800
 8000f44:	200004a4 	.word	0x200004a4

08000f48 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <motion_on_move_queue_add+0x34>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <motion_on_move_queue_add+0x34>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <motion_on_move_queue_add+0x34>)
 8000f64:	785b      	ldrb	r3, [r3, #1]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <motion_on_move_queue_add+0x34>)
 8000f6e:	705a      	strb	r2, [r3, #1]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	2000050c 	.word	0x2000050c

08000f80 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <motion_on_start_move+0x28>)
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <motion_on_start_move+0x28>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000050c 	.word	0x2000050c

08000fc4 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <motion_on_move_end+0x1c>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	701a      	strb	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	2000050c 	.word	0x2000050c

08000fe4 <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"

// Static adapter functions matching router callbacks
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f7ff ff9d 	bl	8000f48 <motion_on_move_queue_add>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	68b8      	ldr	r0, [r7, #8]
 8001026:	f7ff ffab 	bl	8000f80 <motion_on_move_queue_status>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f7ff ffa9 	bl	8000f98 <motion_on_start_move>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f7ff fce1 	bl	8000a24 <home_on_move_home>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f7ff ffb3 	bl	8000fe4 <probe_on_move_probe_level>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f7ff ff95 	bl	8000fc4 <motion_on_move_end>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	68b8      	ldr	r0, [r7, #8]
 80010b2:	f7ff fd45 	bl	8000b40 <led_on_led_ctrl>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	if (!h)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d018      	beq.n	8001118 <services_register_handlers+0x40>
		return;
	h->on_move_queue_add = h_move_queue_add;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <services_register_handlers+0x4c>)
 80010ea:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <services_register_handlers+0x50>)
 80010f0:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <services_register_handlers+0x54>)
 80010f6:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <services_register_handlers+0x58>)
 80010fc:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a0c      	ldr	r2, [pc, #48]	@ (8001134 <services_register_handlers+0x5c>)
 8001102:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <services_register_handlers+0x60>)
 8001108:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <services_register_handlers+0x64>)
 800110e:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <services_register_handlers+0x68>)
 8001114:	61da      	str	r2, [r3, #28]
 8001116:	e000      	b.n	800111a <services_register_handlers+0x42>
		return;
 8001118:	bf00      	nop
}
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	08000ffb 	.word	0x08000ffb
 8001128:	08001017 	.word	0x08001017
 800112c:	08001033 	.word	0x08001033
 8001130:	0800104f 	.word	0x0800104f
 8001134:	0800106b 	.word	0x0800106b
 8001138:	08001087 	.word	0x08001087
 800113c:	080010a3 	.word	0x080010a3
 8001140:	080010bf 	.word	0x080010bf

08001144 <app_init>:
#define APP_SPI_RX_BUF_SZ 256u
#endif
static uint8_t g_spi_rx_buf[APP_SPI_RX_BUF_SZ];
static volatile int g_spi_tx_busy = 0;

void app_init(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    // Init services (GPIO for LED etc.)
    led_service_init();
 8001148:	f7ff fc78 	bl	8000a3c <led_service_init>
    log_service_init();
 800114c:	f7ff fdcc 	bl	8000ce8 <log_service_init>
    #if LOG_ENABLE
    // Boot log (visible on USART1 VCP terminal)
    log_event_names("app", "start", "ready");
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <app_init+0x58>)
 8001152:	4913      	ldr	r1, [pc, #76]	@ (80011a0 <app_init+0x5c>)
 8001154:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <app_init+0x60>)
 8001156:	f7ff fe1d 	bl	8000d94 <log_event_names>
    log_event_ids(0 /*svc:app*/, 0 /*state:start*/, PROTO_OK);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fde4 	bl	8000d2c <log_event_ids>
    #endif

    // Prepare router and response FIFO
    g_resp_fifo = resp_fifo_create();
 8001164:	f7ff fc0b 	bl	800097e <resp_fifo_create>
 8001168:	4603      	mov	r3, r0
 800116a:	4a0f      	ldr	r2, [pc, #60]	@ (80011a8 <app_init+0x64>)
 800116c:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 800116e:	2220      	movs	r2, #32
 8001170:	2100      	movs	r1, #0
 8001172:	480e      	ldr	r0, [pc, #56]	@ (80011ac <app_init+0x68>)
 8001174:	f007 fade 	bl	8008734 <memset>
    services_register_handlers(&g_handlers);
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <app_init+0x68>)
 800117a:	f7ff ffad 	bl	80010d8 <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <app_init+0x64>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <app_init+0x68>)
 8001184:	4619      	mov	r1, r3
 8001186:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <app_init+0x6c>)
 8001188:	f7ff fa9a 	bl	80006c0 <router_init>

    // Start SPI RX DMA in circular mode to feed router from callbacks
    (void)HAL_SPI_Receive_DMA(&hspi1, g_spi_rx_buf, (uint16_t)APP_SPI_RX_BUF_SZ);
 800118c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001190:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <app_init+0x70>)
 8001192:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <app_init+0x74>)
 8001194:	f004 f924 	bl	80053e0 <HAL_SPI_Receive_DMA>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08008f5c 	.word	0x08008f5c
 80011a0:	08008f64 	.word	0x08008f64
 80011a4:	08008f6c 	.word	0x08008f6c
 80011a8:	2000057c 	.word	0x2000057c
 80011ac:	2000055c 	.word	0x2000055c
 80011b0:	20000514 	.word	0x20000514
 80011b4:	20000580 	.word	0x20000580
 80011b8:	20000684 	.word	0x20000684

080011bc <app_poll>:

void app_poll(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b092      	sub	sp, #72	@ 0x48
 80011c0:	af00      	add	r7, sp, #0
    // If TX is idle, try to pop one response frame from FIFO and transmit
    if (!g_spi_tx_busy && g_resp_fifo) {
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <app_poll+0x54>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d11b      	bne.n	8001202 <app_poll+0x46>
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <app_poll+0x58>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d017      	beq.n	8001202 <app_poll+0x46>
        uint8_t out[64];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <app_poll+0x58>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1d39      	adds	r1, r7, #4
 80011d8:	2240      	movs	r2, #64	@ 0x40
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fbdd 	bl	800099a <resp_fifo_pop>
 80011e0:	6478      	str	r0, [r7, #68]	@ 0x44
        if (n > 0) {
 80011e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	dd0c      	ble.n	8001202 <app_poll+0x46>
            // Use interrupt-driven TX to avoid DMA mode constraints
            if (HAL_SPI_Transmit_IT(&hspi1, out, (uint16_t)n) == HAL_OK) {
 80011e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <app_poll+0x5c>)
 80011f2:	f004 f85f 	bl	80052b4 <HAL_SPI_Transmit_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <app_poll+0x46>
                g_spi_tx_busy = 1;
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <app_poll+0x54>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Lowest priority: drain log output (non-blocking, only if USART idle)
    log_poll();
 8001202:	f7ff fe0b 	bl	8000e1c <log_poll>
}
 8001206:	bf00      	nop
 8001208:	3748      	adds	r7, #72	@ 0x48
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000680 	.word	0x20000680
 8001214:	2000057c 	.word	0x2000057c
 8001218:	20000684 	.word	0x20000684

0800121c <HAL_SPI_RxHalfCpltCallback>:

// HAL callbacks (override weak definitions) to feed the router
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *h) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <HAL_SPI_RxHalfCpltCallback+0x22>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <HAL_SPI_RxHalfCpltCallback+0x2c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d104      	bne.n	800123e <HAL_SPI_RxHalfCpltCallback+0x22>
        router_feed_bytes(&g_router, g_spi_rx_buf, APP_SPI_RX_BUF_SZ / 2);
 8001234:	2280      	movs	r2, #128	@ 0x80
 8001236:	4905      	ldr	r1, [pc, #20]	@ (800124c <HAL_SPI_RxHalfCpltCallback+0x30>)
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <HAL_SPI_RxHalfCpltCallback+0x34>)
 800123a:	f7ff fb55 	bl	80008e8 <router_feed_bytes>
    }
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40013000 	.word	0x40013000
 800124c:	20000580 	.word	0x20000580
 8001250:	20000514 	.word	0x20000514

08001254 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *h) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00a      	beq.n	8001278 <HAL_SPI_RxCpltCallback+0x24>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <HAL_SPI_RxCpltCallback+0x2c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d105      	bne.n	8001278 <HAL_SPI_RxCpltCallback+0x24>
        router_feed_bytes(&g_router, g_spi_rx_buf + (APP_SPI_RX_BUF_SZ / 2), APP_SPI_RX_BUF_SZ / 2);
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <HAL_SPI_RxCpltCallback+0x30>)
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <HAL_SPI_RxCpltCallback+0x34>)
 8001274:	f7ff fb38 	bl	80008e8 <router_feed_bytes>
    }
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40013000 	.word	0x40013000
 8001284:	20000600 	.word	0x20000600
 8001288:	20000514 	.word	0x20000514

0800128c <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *h) {
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_SPI_TxCpltCallback+0x1e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <HAL_SPI_TxCpltCallback+0x2c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d102      	bne.n	80012aa <HAL_SPI_TxCpltCallback+0x1e>
        g_spi_tx_busy = 0;
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <HAL_SPI_TxCpltCallback+0x30>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
    }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40013000 	.word	0x40013000
 80012bc:	20000680 	.word	0x20000680

080012c0 <MX_DMA_Init>:
/* USER CODE END 1 */

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <MX_DMA_Init+0x48>)
 80012c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <MX_DMA_Init+0x48>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <MX_DMA_Init+0x48>)
 80012d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	200c      	movs	r0, #12
 80012e4:	f000 ffae 	bl	8002244 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012e8:	200c      	movs	r0, #12
 80012ea:	f000 ffd7 	bl	800229c <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	200d      	movs	r0, #13
 80012f4:	f000 ffa6 	bl	8002244 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012f8:	200d      	movs	r0, #13
 80012fa:	f000 ffcf 	bl	800229c <HAL_NVIC_EnableIRQ>

}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <MX_GPIO_Init>:
 * EVENT_OUT
 * EXTI
 * Free pins are configured automatically as Analog (this feature is enabled through
 * the Code Generation settings)
 */
void MX_GPIO_Init(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	@ 0x30
 8001310:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a4c      	ldr	r2, [pc, #304]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b4a      	ldr	r3, [pc, #296]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b47      	ldr	r3, [pc, #284]	@ (8001458 <MX_GPIO_Init+0x14c>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a46      	ldr	r2, [pc, #280]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	4b41      	ldr	r3, [pc, #260]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a40      	ldr	r2, [pc, #256]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b3e      	ldr	r3, [pc, #248]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <MX_GPIO_Init+0x14c>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a3a      	ldr	r2, [pc, #232]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b38      	ldr	r3, [pc, #224]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a34      	ldr	r2, [pc, #208]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <MX_GPIO_Init+0x14c>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <MX_GPIO_Init+0x14c>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a2e      	ldr	r2, [pc, #184]	@ (8001458 <MX_GPIO_Init+0x14c>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <MX_GPIO_Init+0x14c>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PE2 PE5 PE6 PE7
	 PE8 PE9 PE10 PE11
	 PE12 PE14 PE15 PE0
	 PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 80013b2:	f64d 73e7 	movw	r3, #57319	@ 0xdfe7
 80013b6:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
			| GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4825      	ldr	r0, [pc, #148]	@ (800145c <MX_GPIO_Init+0x150>)
 80013c8:	f001 fb10 	bl	80029ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PC13 PC14 PC15 PC0
	 PC1 PC2 PC3 PC4
	 PC5 PC6 PC7 PC8
	 PC9 PC10 PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
 80013cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013d0:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
			| GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	481f      	ldr	r0, [pc, #124]	@ (8001460 <MX_GPIO_Init+0x154>)
 80013e2:	f001 fb03 	bl	80029ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PH0 PH1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	481a      	ldr	r0, [pc, #104]	@ (8001464 <MX_GPIO_Init+0x158>)
 80013fa:	f001 faf7 	bl	80029ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 PA8 PA11
	 PA12 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_11
 80013fe:	f649 130c 	movw	r3, #39180	@ 0x990c
 8001402:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001416:	f001 fae9 	bl	80029ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 PB11 PB12 PB13 PB14
	 PB15 PB4 PB5 PB6
	 PB7 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 800141a:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800141e:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
			| GPIO_PIN_15 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
			| GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	480e      	ldr	r0, [pc, #56]	@ (8001468 <MX_GPIO_Init+0x15c>)
 8001430:	f001 fadc 	bl	80029ec <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD15
	 PD0 PD1 PD2 PD3
	 PD4 PD5 PD6 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001438:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
			| GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143a:	2303      	movs	r3, #3
 800143c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4808      	ldr	r0, [pc, #32]	@ (800146c <MX_GPIO_Init+0x160>)
 800144a:	f001 facf 	bl	80029ec <HAL_GPIO_Init>

}
 800144e:	bf00      	nop
 8001450:	3730      	adds	r7, #48	@ 0x30
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	48001000 	.word	0x48001000
 8001460:	48000800 	.word	0x48000800
 8001464:	48001c00 	.word	0x48001c00
 8001468:	48000400 	.word	0x48000400
 800146c:	48000c00 	.word	0x48000c00

08001470 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001474:	f000 fd81 	bl	8001f7a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001478:	f000 f817 	bl	80014aa <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800147c:	f7ff ff46 	bl	800130c <MX_GPIO_Init>
	MX_DMA_Init();
 8001480:	f7ff ff1e 	bl	80012c0 <MX_DMA_Init>
	MX_SPI1_Init();
 8001484:	f000 f876 	bl	8001574 <MX_SPI1_Init>
	MX_TIM6_Init();
 8001488:	f000 fb48 	bl	8001b1c <MX_TIM6_Init>
	MX_TIM2_Init();
 800148c:	f000 fa46 	bl	800191c <MX_TIM2_Init>
	MX_TIM5_Init();
 8001490:	f000 faee 	bl	8001a70 <MX_TIM5_Init>
	MX_TIM7_Init();
 8001494:	f000 fb78 	bl	8001b88 <MX_TIM7_Init>
	MX_TIM3_Init();
 8001498:	f000 fa94 	bl	80019c4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 800149c:	f000 fcae 	bl	8001dfc <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    app_init();
 80014a0:	f7ff fe50 	bl	8001144 <app_init>
	/* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        app_poll();
 80014a4:	f7ff fe8a 	bl	80011bc <app_poll>
 80014a8:	e7fc      	b.n	80014a4 <main+0x34>

080014aa <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b096      	sub	sp, #88	@ 0x58
 80014ae:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2244      	movs	r2, #68	@ 0x44
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f007 f93b 	bl	8008734 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80014cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014d0:	f001 fd52 	bl	8002f78 <HAL_PWREx_ControlVoltageScaling>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80014da:	f000 f839 	bl	8001550 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014de:	2310      	movs	r3, #16
 80014e0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014e2:	2301      	movs	r3, #1
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014ea:	2360      	movs	r3, #96	@ 0x60
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014f2:	2301      	movs	r3, #1
 80014f4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80014fa:	2328      	movs	r3, #40	@ 0x28
 80014fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014fe:	2307      	movs	r3, #7
 8001500:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001502:	2302      	movs	r3, #2
 8001504:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fd94 	bl	800303c <HAL_RCC_OscConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x74>
		Error_Handler();
 800151a:	f000 f819 	bl	8001550 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800151e:	230f      	movs	r3, #15
 8001520:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	2303      	movs	r3, #3
 8001524:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001534:	463b      	mov	r3, r7
 8001536:	2104      	movs	r1, #4
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fa81 	bl	8003a40 <HAL_RCC_ClockConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x9e>
		Error_Handler();
 8001544:	f000 f804 	bl	8001550 <Error_Handler>
	}
}
 8001548:	bf00      	nop
 800154a:	3758      	adds	r7, #88	@ 0x58
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <Error_Handler+0x8>

0800155c <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	/* USER CODE END SPI1_Init 0 */

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	hspi1.Instance = SPI1;
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_SPI1_Init+0x68>)
 800157a:	4a19      	ldr	r2, [pc, #100]	@ (80015e0 <MX_SPI1_Init+0x6c>)
 800157c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_SPI1_Init+0x68>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_SPI1_Init+0x68>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_SPI1_Init+0x68>)
 800158c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001590:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_SPI1_Init+0x68>)
 8001594:	2202      	movs	r2, #2
 8001596:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_SPI1_Init+0x68>)
 800159a:	2201      	movs	r2, #1
 800159c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_SPI1_Init+0x68>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <MX_SPI1_Init+0x68>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_SPI1_Init+0x68>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_SPI1_Init+0x68>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_SPI1_Init+0x68>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <MX_SPI1_Init+0x68>)
 80015be:	2200      	movs	r2, #0
 80015c0:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_SPI1_Init+0x68>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_SPI1_Init+0x68>)
 80015ca:	f003 fc85 	bl	8004ed8 <HAL_SPI_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_SPI1_Init+0x64>
		Error_Handler();
 80015d4:	f7ff ffbc 	bl	8001550 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000684 	.word	0x20000684
 80015e0:	40013000 	.word	0x40013000

080015e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
	if (spiHandle->Instance == SPI1) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a53      	ldr	r2, [pc, #332]	@ (8001750 <HAL_SPI_MspInit+0x16c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	f040 80a0 	bne.w	8001748 <HAL_SPI_MspInit+0x164>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* SPI1 clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001608:	4b52      	ldr	r3, [pc, #328]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160c:	4a51      	ldr	r2, [pc, #324]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 800160e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001612:	6613      	str	r3, [r2, #96]	@ 0x60
 8001614:	4b4f      	ldr	r3, [pc, #316]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b4c      	ldr	r3, [pc, #304]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	4a4b      	ldr	r2, [pc, #300]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162c:	4b49      	ldr	r3, [pc, #292]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001638:	4b46      	ldr	r3, [pc, #280]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163c:	4a45      	ldr	r2, [pc, #276]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001644:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <HAL_SPI_MspInit+0x170>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
		 PA4     ------> SPI1_NSS
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 PE13     ------> SPI1_SCK
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_7;
 8001650:	23d0      	movs	r3, #208	@ 0xd0
 8001652:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001660:	2305      	movs	r3, #5
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166e:	f001 f9bd 	bl	80029ec <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001676:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001684:	2305      	movs	r3, #5
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4832      	ldr	r0, [pc, #200]	@ (8001758 <HAL_SPI_MspInit+0x174>)
 8001690:	f001 f9ac 	bl	80029ec <HAL_GPIO_Init>

		/* SPI1 DMA Init */
		/* SPI1_RX Init */
		hdma_spi1_rx.Instance = DMA1_Channel2;
 8001694:	4b31      	ldr	r3, [pc, #196]	@ (800175c <HAL_SPI_MspInit+0x178>)
 8001696:	4a32      	ldr	r2, [pc, #200]	@ (8001760 <HAL_SPI_MspInit+0x17c>)
 8001698:	601a      	str	r2, [r3, #0]
		hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800169a:	4b30      	ldr	r3, [pc, #192]	@ (800175c <HAL_SPI_MspInit+0x178>)
 800169c:	2201      	movs	r2, #1
 800169e:	605a      	str	r2, [r3, #4]
		hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	4b2e      	ldr	r3, [pc, #184]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
		hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
		hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016ae:	2280      	movs	r2, #128	@ 0x80
 80016b0:	611a      	str	r2, [r3, #16]
		hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
		hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b8:	4b28      	ldr	r3, [pc, #160]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
		hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80016be:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016c0:	2220      	movs	r2, #32
 80016c2:	61da      	str	r2, [r3, #28]
		hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016c4:	4b25      	ldr	r3, [pc, #148]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK) {
 80016ca:	4824      	ldr	r0, [pc, #144]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016cc:	f000 fe0a 	bl	80022e4 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_SPI_MspInit+0xf6>
			Error_Handler();
 80016d6:	f7ff ff3b 	bl	8001550 <Error_Handler>
		}

		__HAL_LINKDMA(spiHandle, hdmarx, hdma_spi1_rx);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1f      	ldr	r2, [pc, #124]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016de:	659a      	str	r2, [r3, #88]	@ 0x58
 80016e0:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <HAL_SPI_MspInit+0x178>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6293      	str	r3, [r2, #40]	@ 0x28

		/* SPI1_TX Init */
		hdma_spi1_tx.Instance = DMA1_Channel3;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 80016e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <HAL_SPI_MspInit+0x184>)
 80016ea:	601a      	str	r2, [r3, #0]
		hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	605a      	str	r2, [r3, #4]
		hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 80016f4:	2210      	movs	r2, #16
 80016f6:	609a      	str	r2, [r3, #8]
		hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
		hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 8001700:	2280      	movs	r2, #128	@ 0x80
 8001702:	611a      	str	r2, [r3, #16]
		hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
		hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
		hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 8001712:	2220      	movs	r2, #32
 8001714:	61da      	str	r2, [r3, #28]
		hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK) {
 800171c:	4811      	ldr	r0, [pc, #68]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 800171e:	f000 fde1 	bl	80022e4 <HAL_DMA_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_SPI_MspInit+0x148>
			Error_Handler();
 8001728:	f7ff ff12 	bl	8001550 <Error_Handler>
		}

		__HAL_LINKDMA(spiHandle, hdmatx, hdma_spi1_tx);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 8001730:	655a      	str	r2, [r3, #84]	@ 0x54
 8001732:	4a0c      	ldr	r2, [pc, #48]	@ (8001764 <HAL_SPI_MspInit+0x180>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6293      	str	r3, [r2, #40]	@ 0x28

		/* SPI1 interrupt Init */
		HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	2023      	movs	r0, #35	@ 0x23
 800173e:	f000 fd81 	bl	8002244 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001742:	2023      	movs	r0, #35	@ 0x23
 8001744:	f000 fdaa 	bl	800229c <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}
}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	@ 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013000 	.word	0x40013000
 8001754:	40021000 	.word	0x40021000
 8001758:	48001000 	.word	0x48001000
 800175c:	200006e8 	.word	0x200006e8
 8001760:	4002001c 	.word	0x4002001c
 8001764:	20000730 	.word	0x20000730
 8001768:	40020030 	.word	0x40020030

0800176c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <HAL_MspInit+0x44>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001776:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <HAL_MspInit+0x44>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6613      	str	r3, [r2, #96]	@ 0x60
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <HAL_MspInit+0x44>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <HAL_MspInit+0x44>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <HAL_MspInit+0x44>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_MspInit+0x44>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <NMI_Handler+0x4>

080017bc <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <MemManage_Handler+0x4>

080017cc <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <UsageFault_Handler+0x4>

080017dc <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800180a:	f000 fc0b 	bl	8002024 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <DMA1_Channel2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel2 global interrupt.
 */
void DMA1_Channel2_IRQHandler(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

	/* USER CODE END DMA1_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <DMA1_Channel2_IRQHandler+0x10>)
 800181a:	f001 f808 	bl	800282e <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

	/* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200006e8 	.word	0x200006e8

08001828 <DMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <DMA1_Channel3_IRQHandler+0x10>)
 800182e:	f000 fffe 	bl	800282e <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000730 	.word	0x20000730

0800183c <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <SPI1_IRQHandler+0x10>)
 8001842:	f004 f8a5 	bl	8005990 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000684 	.word	0x20000684

08001850 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM6_DAC_IRQHandler+0x10>)
 8001856:	f004 ffb3 	bl	80067c0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000860 	.word	0x20000860

08001864 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM7_IRQHandler+0x10>)
 800186a:	f004 ffa9 	bl	80067c0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200008ac 	.word	0x200008ac

08001878 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <USART1_IRQHandler+0x10>)
 800187e:	f005 fbf9 	bl	8007074 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200008f8 	.word	0x200008f8

0800188c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
		errno = ENOMEM;
 80018bc:	f006 ff52 	bl	8008764 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20018000 	.word	0x20018000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20000778 	.word	0x20000778
 80018f4:	20000ad0 	.word	0x20000ad0

080018f8 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	@ 0x30
 8001920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2224      	movs	r2, #36	@ 0x24
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f006 ff02 	bl	8008734 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800193a:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <MX_TIM2_Init+0xa4>)
 800193c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001940:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001942:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <MX_TIM2_Init+0xa4>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <MX_TIM2_Init+0xa4>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800194e:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <MX_TIM2_Init+0xa4>)
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001956:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <MX_TIM2_Init+0xa4>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <MX_TIM2_Init+0xa4>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001962:	2301      	movs	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800196a:	2301      	movs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800197a:	2301      	movs	r3, #1
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4619      	mov	r1, r3
 800198c:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <MX_TIM2_Init+0xa4>)
 800198e:	f004 fd55 	bl	800643c <HAL_TIM_Encoder_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0x80>
		Error_Handler();
 8001998:	f7ff fdda 	bl	8001550 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80019a4:	463b      	mov	r3, r7
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <MX_TIM2_Init+0xa4>)
 80019aa:	f005 f8e9 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80019b4:	f7ff fdcc 	bl	8001550 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	3730      	adds	r7, #48	@ 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000077c 	.word	0x2000077c

080019c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	@ 0x30
 80019c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2224      	movs	r2, #36	@ 0x24
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 feae 	bl	8008734 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019d8:	463b      	mov	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80019e2:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <MX_TIM3_Init+0xa4>)
 80019e4:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <MX_TIM3_Init+0xa8>)
 80019e6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <MX_TIM3_Init+0xa4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <MX_TIM3_Init+0xa4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <MX_TIM3_Init+0xa4>)
 80019f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019fa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <MX_TIM3_Init+0xa4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <MX_TIM3_Init+0xa4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a10:	2301      	movs	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a20:	2301      	movs	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <MX_TIM3_Init+0xa4>)
 8001a34:	f004 fd02 	bl	800643c <HAL_TIM_Encoder_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8001a3e:	f7ff fd87 	bl	8001550 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4806      	ldr	r0, [pc, #24]	@ (8001a68 <MX_TIM3_Init+0xa4>)
 8001a50:	f005 f896 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001a5a:	f7ff fd79 	bl	8001550 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	3730      	adds	r7, #48	@ 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200007c8 	.word	0x200007c8
 8001a6c:	40000400 	.word	0x40000400

08001a70 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2224      	movs	r2, #36	@ 0x24
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f006 fe58 	bl	8008734 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	@ (8001b14 <MX_TIM5_Init+0xa4>)
 8001a90:	4a21      	ldr	r2, [pc, #132]	@ (8001b18 <MX_TIM5_Init+0xa8>)
 8001a92:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <MX_TIM5_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b14 <MX_TIM5_Init+0xa4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <MX_TIM5_Init+0xa4>)
 8001aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <MX_TIM5_Init+0xa4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <MX_TIM5_Init+0xa4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001acc:	2301      	movs	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	480d      	ldr	r0, [pc, #52]	@ (8001b14 <MX_TIM5_Init+0xa4>)
 8001ae0:	f004 fcac 	bl	800643c <HAL_TIM_Encoder_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM5_Init+0x7e>
		Error_Handler();
 8001aea:	f7ff fd31 	bl	8001550 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	@ (8001b14 <MX_TIM5_Init+0xa4>)
 8001afc:	f005 f840 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM5_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001b06:	f7ff fd23 	bl	8001550 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	3730      	adds	r7, #48	@ 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000814 	.word	0x20000814
 8001b18:	40000c00 	.word	0x40000c00

08001b1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b2e:	4a15      	ldr	r2, [pc, #84]	@ (8001b84 <MX_TIM6_Init+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 79;
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b34:	224f      	movs	r2, #79	@ 0x4f
 8001b36:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 19;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b40:	2213      	movs	r2, #19
 8001b42:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b46:	2280      	movs	r2, #128	@ 0x80
 8001b48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001b4a:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b4c:	f004 fb6c 	bl	8006228 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM6_Init+0x3e>
		Error_Handler();
 8001b56:	f7ff fcfb 	bl	8001550 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b68:	f005 f80a 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8001b72:	f7ff fced 	bl	8001550 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000860 	.word	0x20000860
 8001b84:	40001000 	.word	0x40001000

08001b88 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <MX_TIM7_Init+0x64>)
 8001b9a:	4a15      	ldr	r2, [pc, #84]	@ (8001bf0 <MX_TIM7_Init+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 7999;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <MX_TIM7_Init+0x64>)
 8001ba0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001ba4:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <MX_TIM7_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 9;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <MX_TIM7_Init+0x64>)
 8001bae:	2209      	movs	r2, #9
 8001bb0:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_TIM7_Init+0x64>)
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8001bb8:	480c      	ldr	r0, [pc, #48]	@ (8001bec <MX_TIM7_Init+0x64>)
 8001bba:	f004 fb35 	bl	8006228 <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM7_Init+0x40>
		Error_Handler();
 8001bc4:	f7ff fcc4 	bl	8001550 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_TIM7_Init+0x64>)
 8001bd6:	f004 ffd3 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001be0:	f7ff fcb6 	bl	8001550 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200008ac 	.word	0x200008ac
 8001bf0:	40001400 	.word	0x40001400

08001bf4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *tim_encoderHandle) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08e      	sub	sp, #56	@ 0x38
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
	if (tim_encoderHandle->Instance == TIM2) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c14:	d145      	bne.n	8001ca2 <HAL_TIM_Encoder_MspInit+0xae>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001c16:	4b53      	ldr	r3, [pc, #332]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1a:	4a52      	ldr	r2, [pc, #328]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c22:	4b50      	ldr	r3, [pc, #320]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	6a3b      	ldr	r3, [r7, #32]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	4a4c      	ldr	r2, [pc, #304]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	4a46      	ldr	r2, [pc, #280]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c52:	4b44      	ldr	r3, [pc, #272]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
		/**TIM2 GPIO Configuration
		 PA5     ------> TIM2_CH1
		 PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c5e:	2320      	movs	r3, #32
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7c:	f000 feb6 	bl	80029ec <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c80:	2308      	movs	r3, #8
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c90:	2301      	movs	r3, #1
 8001c92:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4833      	ldr	r0, [pc, #204]	@ (8001d68 <HAL_TIM_Encoder_MspInit+0x174>)
 8001c9c:	f000 fea6 	bl	80029ec <HAL_GPIO_Init>

		/* USER CODE BEGIN TIM5_MspInit 1 */

		/* USER CODE END TIM5_MspInit 1 */
	}
}
 8001ca0:	e05b      	b.n	8001d5a <HAL_TIM_Encoder_MspInit+0x166>
	} else if (tim_encoderHandle->Instance == TIM3) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a31      	ldr	r2, [pc, #196]	@ (8001d6c <HAL_TIM_Encoder_MspInit+0x178>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d128      	bne.n	8001cfe <HAL_TIM_Encoder_MspInit+0x10a>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001cac:	4b2d      	ldr	r3, [pc, #180]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc4:	4b27      	ldr	r3, [pc, #156]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc8:	4a26      	ldr	r2, [pc, #152]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd0:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 8001cdc:	2318      	movs	r3, #24
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cec:	2302      	movs	r3, #2
 8001cee:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	481e      	ldr	r0, [pc, #120]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0x17c>)
 8001cf8:	f000 fe78 	bl	80029ec <HAL_GPIO_Init>
}
 8001cfc:	e02d      	b.n	8001d5a <HAL_TIM_Encoder_MspInit+0x166>
	} else if (tim_encoderHandle->Instance == TIM5) {
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1c      	ldr	r2, [pc, #112]	@ (8001d74 <HAL_TIM_Encoder_MspInit+0x180>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d128      	bne.n	8001d5a <HAL_TIM_Encoder_MspInit+0x166>
		__HAL_RCC_TIM5_CLK_ENABLE();
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0c:	4a15      	ldr	r2, [pc, #84]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d24:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <HAL_TIM_Encoder_MspInit+0x170>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d56:	f000 fe49 	bl	80029ec <HAL_GPIO_Init>
}
 8001d5a:	bf00      	nop
 8001d5c:	3738      	adds	r7, #56	@ 0x38
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	48001000 	.word	0x48001000
 8001d74:	40000c00 	.word	0x40000c00

08001d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM6) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <HAL_TIM_Base_MspInit+0x78>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d114      	bne.n	8001db4 <HAL_TIM_Base_MspInit+0x3c>
		/* USER CODE BEGIN TIM6_MspInit 0 */

		/* USER CODE END TIM6_MspInit 0 */
		/* TIM6 clock enable */
		__HAL_RCC_TIM6_CLK_ENABLE();
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_TIM_Base_MspInit+0x7c>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <HAL_TIM_Base_MspInit+0x7c>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d96:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <HAL_TIM_Base_MspInit+0x7c>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

		/* TIM6 interrupt Init */
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2036      	movs	r0, #54	@ 0x36
 8001da8:	f000 fa4c 	bl	8002244 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dac:	2036      	movs	r0, #54	@ 0x36
 8001dae:	f000 fa75 	bl	800229c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
		/* USER CODE BEGIN TIM7_MspInit 1 */

		/* USER CODE END TIM7_MspInit 1 */
	}
}
 8001db2:	e018      	b.n	8001de6 <HAL_TIM_Base_MspInit+0x6e>
	} else if (tim_baseHandle->Instance == TIM7) {
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <HAL_TIM_Base_MspInit+0x80>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d113      	bne.n	8001de6 <HAL_TIM_Base_MspInit+0x6e>
		__HAL_RCC_TIM7_CLK_ENABLE();
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <HAL_TIM_Base_MspInit+0x7c>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001df4 <HAL_TIM_Base_MspInit+0x7c>)
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dca:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <HAL_TIM_Base_MspInit+0x7c>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2037      	movs	r0, #55	@ 0x37
 8001ddc:	f000 fa32 	bl	8002244 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001de0:	2037      	movs	r0, #55	@ 0x37
 8001de2:	f000 fa5b 	bl	800229c <HAL_NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40001000 	.word	0x40001000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40001400 	.word	0x40001400

08001dfc <MX_USART1_UART_Init>:

UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e02:	4a15      	ldr	r2, [pc, #84]	@ (8001e58 <MX_USART1_UART_Init+0x5c>)
 8001e04:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001e06:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001e3e:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_USART1_UART_Init+0x58>)
 8001e40:	f005 f812 	bl	8006e68 <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001e4a:	f7ff fb81 	bl	8001550 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200008f8 	.word	0x200008f8
 8001e58:	40013800 	.word	0x40013800

08001e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0ac      	sub	sp, #176	@ 0xb0
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2288      	movs	r2, #136	@ 0x88
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f006 fc59 	bl	8008734 <memset>
	if (uartHandle->Instance == USART1) {
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <HAL_UART_MspInit+0xc0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d142      	bne.n	8001f12 <HAL_UART_MspInit+0xb6>

		/* USER CODE END USART1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
		PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 f895 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_UART_MspInit+0x4c>
			Error_Handler();
 8001ea4:	f7ff fb54 	bl	8001550 <Error_Handler>
		}

		/* USART1 clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <HAL_UART_MspInit+0xc4>)
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eac:	4a1c      	ldr	r2, [pc, #112]	@ (8001f20 <HAL_UART_MspInit+0xc4>)
 8001eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <HAL_UART_MspInit+0xc4>)
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <HAL_UART_MspInit+0xc4>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec4:	4a16      	ldr	r2, [pc, #88]	@ (8001f20 <HAL_UART_MspInit+0xc4>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <HAL_UART_MspInit+0xc4>)
 8001ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
     PB6     ------> USART1_TX
     PB7     ------> USART1_RX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001ed8:	23c0      	movs	r3, #192	@ 0xc0
 8001eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001efa:	4619      	mov	r1, r3
 8001efc:	4809      	ldr	r0, [pc, #36]	@ (8001f24 <HAL_UART_MspInit+0xc8>)
 8001efe:	f000 fd75 	bl	80029ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2103      	movs	r1, #3
 8001f06:	2025      	movs	r0, #37	@ 0x25
 8001f08:	f000 f99c 	bl	8002244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f0c:	2025      	movs	r0, #37	@ 0x25
 8001f0e:	f000 f9c5 	bl	800229c <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}
}
 8001f12:	bf00      	nop
 8001f14:	37b0      	adds	r7, #176	@ 0xb0
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000400 	.word	0x48000400

08001f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f2c:	f7ff fce4 	bl	80018f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f32:	490d      	ldr	r1, [pc, #52]	@ (8001f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f34:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <LoopForever+0xe>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f48:	4c0a      	ldr	r4, [pc, #40]	@ (8001f74 <LoopForever+0x16>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f56:	f006 fc0b 	bl	8008770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5a:	f7ff fa89 	bl	8001470 <main>

08001f5e <LoopForever>:

LoopForever:
    b LoopForever
 8001f5e:	e7fe      	b.n	8001f5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001f6c:	08009244 	.word	0x08009244
  ldr r2, =_sbss
 8001f70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f74:	20000acc 	.word	0x20000acc

08001f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC1_2_IRQHandler>

08001f7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 f93d 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f000 f80e 	bl	8001fac <HAL_InitTick>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	e001      	b.n	8001fa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f9c:	f7ff fbe6 	bl	800176c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fb8:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <HAL_InitTick+0x6c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d023      	beq.n	8002008 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fc0:	4b16      	ldr	r3, [pc, #88]	@ (800201c <HAL_InitTick+0x70>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <HAL_InitTick+0x6c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f978 	bl	80022cc <HAL_SYSTICK_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d809      	bhi.n	8001ffc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f000 f928 	bl	8002244 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <HAL_InitTick+0x74>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e007      	b.n	800200c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e004      	b.n	800200c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e001      	b.n	800200c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000000c 	.word	0x2000000c
 800201c:	20000004 	.word	0x20000004
 8002020:	20000008 	.word	0x20000008

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	2000000c 	.word	0x2000000c
 8002048:	20000980 	.word	0x20000980

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000980 	.word	0x20000980

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b07      	cmp	r3, #7
 8002210:	d00f      	beq.n	8002232 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d00c      	beq.n	8002232 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b05      	cmp	r3, #5
 800221c:	d009      	beq.n	8002232 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d006      	beq.n	8002232 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d003      	beq.n	8002232 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800222a:	21a6      	movs	r1, #166	@ 0xa6
 800222c:	4804      	ldr	r0, [pc, #16]	@ (8002240 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800222e:	f7ff f995 	bl	800155c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff16 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	08008f70 	.word	0x08008f70

08002244 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d903      	bls.n	8002264 <HAL_NVIC_SetPriority+0x20>
 800225c:	21be      	movs	r1, #190	@ 0xbe
 800225e:	480e      	ldr	r0, [pc, #56]	@ (8002298 <HAL_NVIC_SetPriority+0x54>)
 8002260:	f7ff f97c 	bl	800155c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	d903      	bls.n	8002272 <HAL_NVIC_SetPriority+0x2e>
 800226a:	21bf      	movs	r1, #191	@ 0xbf
 800226c:	480a      	ldr	r0, [pc, #40]	@ (8002298 <HAL_NVIC_SetPriority+0x54>)
 800226e:	f7ff f975 	bl	800155c <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002272:	f7ff ff1b 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002276:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	6978      	ldr	r0, [r7, #20]
 800227e:	f7ff ff6b 	bl	8002158 <NVIC_EncodePriority>
 8002282:	4602      	mov	r2, r0
 8002284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff3a 	bl	8002104 <__NVIC_SetPriority>
}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	08008f70 	.word	0x08008f70

0800229c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da03      	bge.n	80022b6 <HAL_NVIC_EnableIRQ+0x1a>
 80022ae:	21d2      	movs	r1, #210	@ 0xd2
 80022b0:	4805      	ldr	r0, [pc, #20]	@ (80022c8 <HAL_NVIC_EnableIRQ+0x2c>)
 80022b2:	f7ff f953 	bl	800155c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff04 	bl	80020c8 <__NVIC_EnableIRQ>
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	08008f70 	.word	0x08008f70

080022cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff73 	bl	80021c0 <SysTick_Config>
 80022da:	4603      	mov	r3, r0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e19d      	b.n	8002632 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a79      	ldr	r2, [pc, #484]	@ (80024e0 <HAL_DMA_Init+0x1fc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d044      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a77      	ldr	r2, [pc, #476]	@ (80024e4 <HAL_DMA_Init+0x200>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d03f      	beq.n	800238a <HAL_DMA_Init+0xa6>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a76      	ldr	r2, [pc, #472]	@ (80024e8 <HAL_DMA_Init+0x204>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d03a      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a74      	ldr	r2, [pc, #464]	@ (80024ec <HAL_DMA_Init+0x208>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d035      	beq.n	800238a <HAL_DMA_Init+0xa6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a73      	ldr	r2, [pc, #460]	@ (80024f0 <HAL_DMA_Init+0x20c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d030      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a71      	ldr	r2, [pc, #452]	@ (80024f4 <HAL_DMA_Init+0x210>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a70      	ldr	r2, [pc, #448]	@ (80024f8 <HAL_DMA_Init+0x214>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d026      	beq.n	800238a <HAL_DMA_Init+0xa6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6e      	ldr	r2, [pc, #440]	@ (80024fc <HAL_DMA_Init+0x218>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d021      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6d      	ldr	r2, [pc, #436]	@ (8002500 <HAL_DMA_Init+0x21c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01c      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a6b      	ldr	r2, [pc, #428]	@ (8002504 <HAL_DMA_Init+0x220>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d017      	beq.n	800238a <HAL_DMA_Init+0xa6>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6a      	ldr	r2, [pc, #424]	@ (8002508 <HAL_DMA_Init+0x224>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d012      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a68      	ldr	r2, [pc, #416]	@ (800250c <HAL_DMA_Init+0x228>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_DMA_Init+0xa6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a67      	ldr	r2, [pc, #412]	@ (8002510 <HAL_DMA_Init+0x22c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d008      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a65      	ldr	r2, [pc, #404]	@ (8002514 <HAL_DMA_Init+0x230>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <HAL_DMA_Init+0xa6>
 8002382:	21a5      	movs	r1, #165	@ 0xa5
 8002384:	4864      	ldr	r0, [pc, #400]	@ (8002518 <HAL_DMA_Init+0x234>)
 8002386:	f7ff f8e9 	bl	800155c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_DMA_Init+0xc8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b10      	cmp	r3, #16
 8002398:	d008      	beq.n	80023ac <HAL_DMA_Init+0xc8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023a2:	d003      	beq.n	80023ac <HAL_DMA_Init+0xc8>
 80023a4:	21a6      	movs	r1, #166	@ 0xa6
 80023a6:	485c      	ldr	r0, [pc, #368]	@ (8002518 <HAL_DMA_Init+0x234>)
 80023a8:	f7ff f8d8 	bl	800155c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b40      	cmp	r3, #64	@ 0x40
 80023b2:	d007      	beq.n	80023c4 <HAL_DMA_Init+0xe0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_DMA_Init+0xe0>
 80023bc:	21a7      	movs	r1, #167	@ 0xa7
 80023be:	4856      	ldr	r0, [pc, #344]	@ (8002518 <HAL_DMA_Init+0x234>)
 80023c0:	f7ff f8cc 	bl	800155c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b80      	cmp	r3, #128	@ 0x80
 80023ca:	d007      	beq.n	80023dc <HAL_DMA_Init+0xf8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_Init+0xf8>
 80023d4:	21a8      	movs	r1, #168	@ 0xa8
 80023d6:	4850      	ldr	r0, [pc, #320]	@ (8002518 <HAL_DMA_Init+0x234>)
 80023d8:	f7ff f8c0 	bl	800155c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <HAL_DMA_Init+0x11c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ec:	d008      	beq.n	8002400 <HAL_DMA_Init+0x11c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f6:	d003      	beq.n	8002400 <HAL_DMA_Init+0x11c>
 80023f8:	21a9      	movs	r1, #169	@ 0xa9
 80023fa:	4847      	ldr	r0, [pc, #284]	@ (8002518 <HAL_DMA_Init+0x234>)
 80023fc:	f7ff f8ae 	bl	800155c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00d      	beq.n	8002424 <HAL_DMA_Init+0x140>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002410:	d008      	beq.n	8002424 <HAL_DMA_Init+0x140>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800241a:	d003      	beq.n	8002424 <HAL_DMA_Init+0x140>
 800241c:	21aa      	movs	r1, #170	@ 0xaa
 800241e:	483e      	ldr	r0, [pc, #248]	@ (8002518 <HAL_DMA_Init+0x234>)
 8002420:	f7ff f89c 	bl	800155c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_DMA_Init+0x158>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b20      	cmp	r3, #32
 8002432:	d003      	beq.n	800243c <HAL_DMA_Init+0x158>
 8002434:	21ab      	movs	r1, #171	@ 0xab
 8002436:	4838      	ldr	r0, [pc, #224]	@ (8002518 <HAL_DMA_Init+0x234>)
 8002438:	f7ff f890 	bl	800155c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d012      	beq.n	800246a <HAL_DMA_Init+0x186>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800244c:	d00d      	beq.n	800246a <HAL_DMA_Init+0x186>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002456:	d008      	beq.n	800246a <HAL_DMA_Init+0x186>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002460:	d003      	beq.n	800246a <HAL_DMA_Init+0x186>
 8002462:	21ac      	movs	r1, #172	@ 0xac
 8002464:	482c      	ldr	r0, [pc, #176]	@ (8002518 <HAL_DMA_Init+0x234>)
 8002466:	f7ff f879 	bl	800155c <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01f      	beq.n	80024b2 <HAL_DMA_Init+0x1ce>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d01b      	beq.n	80024b2 <HAL_DMA_Init+0x1ce>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d017      	beq.n	80024b2 <HAL_DMA_Init+0x1ce>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d013      	beq.n	80024b2 <HAL_DMA_Init+0x1ce>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d00f      	beq.n	80024b2 <HAL_DMA_Init+0x1ce>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d00b      	beq.n	80024b2 <HAL_DMA_Init+0x1ce>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d007      	beq.n	80024b2 <HAL_DMA_Init+0x1ce>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b07      	cmp	r3, #7
 80024a8:	d003      	beq.n	80024b2 <HAL_DMA_Init+0x1ce>
 80024aa:	21ae      	movs	r1, #174	@ 0xae
 80024ac:	481a      	ldr	r0, [pc, #104]	@ (8002518 <HAL_DMA_Init+0x234>)
 80024ae:	f7ff f855 	bl	800155c <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b18      	ldr	r3, [pc, #96]	@ (800251c <HAL_DMA_Init+0x238>)
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d836      	bhi.n	800252c <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <HAL_DMA_Init+0x23c>)
 80024c6:	4413      	add	r3, r2
 80024c8:	4a16      	ldr	r2, [pc, #88]	@ (8002524 <HAL_DMA_Init+0x240>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	009a      	lsls	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a13      	ldr	r2, [pc, #76]	@ (8002528 <HAL_DMA_Init+0x244>)
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40
 80024dc:	e035      	b.n	800254a <HAL_DMA_Init+0x266>
 80024de:	bf00      	nop
 80024e0:	40020008 	.word	0x40020008
 80024e4:	4002001c 	.word	0x4002001c
 80024e8:	40020030 	.word	0x40020030
 80024ec:	40020044 	.word	0x40020044
 80024f0:	40020058 	.word	0x40020058
 80024f4:	4002006c 	.word	0x4002006c
 80024f8:	40020080 	.word	0x40020080
 80024fc:	40020408 	.word	0x40020408
 8002500:	4002041c 	.word	0x4002041c
 8002504:	40020430 	.word	0x40020430
 8002508:	40020444 	.word	0x40020444
 800250c:	40020458 	.word	0x40020458
 8002510:	4002046c 	.word	0x4002046c
 8002514:	40020480 	.word	0x40020480
 8002518:	08008fac 	.word	0x08008fac
 800251c:	40020407 	.word	0x40020407
 8002520:	bffdfff8 	.word	0xbffdfff8
 8002524:	cccccccd 	.word	0xcccccccd
 8002528:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b42      	ldr	r3, [pc, #264]	@ (800263c <HAL_DMA_Init+0x358>)
 8002534:	4413      	add	r3, r2
 8002536:	4a42      	ldr	r2, [pc, #264]	@ (8002640 <HAL_DMA_Init+0x35c>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	009a      	lsls	r2, r3, #2
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3f      	ldr	r2, [pc, #252]	@ (8002644 <HAL_DMA_Init+0x360>)
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002564:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800256e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025a4:	d039      	beq.n	800261a <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a27      	ldr	r2, [pc, #156]	@ (8002648 <HAL_DMA_Init+0x364>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d11a      	bne.n	80025e6 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025b0:	4b26      	ldr	r3, [pc, #152]	@ (800264c <HAL_DMA_Init+0x368>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b8:	f003 031c 	and.w	r3, r3, #28
 80025bc:	210f      	movs	r1, #15
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	4921      	ldr	r1, [pc, #132]	@ (800264c <HAL_DMA_Init+0x368>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_DMA_Init+0x368>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	f003 031c 	and.w	r3, r3, #28
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	491b      	ldr	r1, [pc, #108]	@ (800264c <HAL_DMA_Init+0x368>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e019      	b.n	800261a <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <HAL_DMA_Init+0x36c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f003 031c 	and.w	r3, r3, #28
 80025f2:	210f      	movs	r1, #15
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4915      	ldr	r1, [pc, #84]	@ (8002650 <HAL_DMA_Init+0x36c>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <HAL_DMA_Init+0x36c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	f003 031c 	and.w	r3, r3, #28
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	490e      	ldr	r1, [pc, #56]	@ (8002650 <HAL_DMA_Init+0x36c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	bffdfbf8 	.word	0xbffdfbf8
 8002640:	cccccccd 	.word	0xcccccccd
 8002644:	40020400 	.word	0x40020400
 8002648:	40020000 	.word	0x40020000
 800264c:	400200a8 	.word	0x400200a8
 8002650:	400204a8 	.word	0x400204a8

08002654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_DMA_Start_IT+0x20>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002672:	d304      	bcc.n	800267e <HAL_DMA_Start_IT+0x2a>
 8002674:	f240 11df 	movw	r1, #479	@ 0x1df
 8002678:	482c      	ldr	r0, [pc, #176]	@ (800272c <HAL_DMA_Start_IT+0xd8>)
 800267a:	f7fe ff6f 	bl	800155c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_DMA_Start_IT+0x38>
 8002688:	2302      	movs	r3, #2
 800268a:	e04b      	b.n	8002724 <HAL_DMA_Start_IT+0xd0>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d13a      	bne.n	8002716 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f961 	bl	800298c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 020e 	orr.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e00f      	b.n	8002704 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0204 	bic.w	r2, r2, #4
 80026f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 020a 	orr.w	r2, r2, #10
 8002702:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e005      	b.n	8002722 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	08008fac 	.word	0x08008fac

08002730 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d008      	beq.n	800275a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2204      	movs	r2, #4
 800274c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e022      	b.n	80027a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 020e 	bic.w	r2, r2, #14
 8002768:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	f003 021c 	and.w	r2, r3, #28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d005      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2204      	movs	r2, #4
 80027c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e029      	b.n	8002824 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020e 	bic.w	r2, r2, #14
 80027de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f4:	f003 021c 	and.w	r2, r3, #28
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
    }
  }
  return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	f003 031c 	and.w	r3, r3, #28
 800284e:	2204      	movs	r2, #4
 8002850:	409a      	lsls	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d026      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x7a>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d021      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0204 	bic.w	r2, r2, #4
 8002880:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f003 021c 	and.w	r2, r3, #28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	2104      	movs	r1, #4
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	2b00      	cmp	r3, #0
 800289c:	d071      	beq.n	8002982 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028a6:	e06c      	b.n	8002982 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	f003 031c 	and.w	r3, r3, #28
 80028b0:	2202      	movs	r2, #2
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02e      	beq.n	800291a <HAL_DMA_IRQHandler+0xec>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d029      	beq.n	800291a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 020a 	bic.w	r2, r2, #10
 80028e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	f003 021c 	and.w	r2, r3, #28
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	2102      	movs	r1, #2
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d038      	beq.n	8002982 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002918:	e033      	b.n	8002982 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f003 031c 	and.w	r3, r3, #28
 8002922:	2208      	movs	r2, #8
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d02a      	beq.n	8002984 <HAL_DMA_IRQHandler+0x156>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d025      	beq.n	8002984 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 020e 	bic.w	r2, r2, #14
 8002946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294c:	f003 021c 	and.w	r2, r3, #28
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002976:	2b00      	cmp	r3, #0
 8002978:	d004      	beq.n	8002984 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002982:	bf00      	nop
 8002984:	bf00      	nop
}
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f003 021c 	and.w	r2, r3, #28
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d108      	bne.n	80029d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029ce:	e007      	b.n	80029e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a00:	d01f      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a3c      	ldr	r2, [pc, #240]	@ (8002af8 <HAL_GPIO_Init+0x10c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01b      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002afc <HAL_GPIO_Init+0x110>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d017      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a3a      	ldr	r2, [pc, #232]	@ (8002b00 <HAL_GPIO_Init+0x114>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a39      	ldr	r2, [pc, #228]	@ (8002b04 <HAL_GPIO_Init+0x118>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00f      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a38      	ldr	r2, [pc, #224]	@ (8002b08 <HAL_GPIO_Init+0x11c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00b      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a37      	ldr	r2, [pc, #220]	@ (8002b0c <HAL_GPIO_Init+0x120>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a36      	ldr	r2, [pc, #216]	@ (8002b10 <HAL_GPIO_Init+0x124>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a3a:	21aa      	movs	r1, #170	@ 0xaa
 8002a3c:	4835      	ldr	r0, [pc, #212]	@ (8002b14 <HAL_GPIO_Init+0x128>)
 8002a3e:	f7fe fd8d 	bl	800155c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_GPIO_Init+0x6a>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a54:	d303      	bcc.n	8002a5e <HAL_GPIO_Init+0x72>
 8002a56:	21ab      	movs	r1, #171	@ 0xab
 8002a58:	482e      	ldr	r0, [pc, #184]	@ (8002b14 <HAL_GPIO_Init+0x128>)
 8002a5a:	f7fe fd7f 	bl	800155c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 823d 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f000 8238 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b11      	cmp	r3, #17
 8002a78:	f000 8233 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	f000 822e 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	f000 8229 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002a98:	f000 8223 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002aa4:	f000 821d 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002ab0:	f000 8217 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002abc:	f000 8211 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002ac8:	f000 820b 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002ad4:	f000 8205 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	f000 8200 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b0b      	cmp	r3, #11
 8002ae8:	f000 81fb 	beq.w	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002aec:	21ac      	movs	r1, #172	@ 0xac
 8002aee:	4809      	ldr	r0, [pc, #36]	@ (8002b14 <HAL_GPIO_Init+0x128>)
 8002af0:	f7fe fd34 	bl	800155c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af4:	e1f5      	b.n	8002ee2 <HAL_GPIO_Init+0x4f6>
 8002af6:	bf00      	nop
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	48001000 	.word	0x48001000
 8002b08:	48001400 	.word	0x48001400
 8002b0c:	48001800 	.word	0x48001800
 8002b10:	48001c00 	.word	0x48001c00
 8002b14:	08008fe4 	.word	0x08008fe4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 81d6 	beq.w	8002edc <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d005      	beq.n	8002b48 <HAL_GPIO_Init+0x15c>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d144      	bne.n	8002bd2 <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00f      	beq.n	8002b70 <HAL_GPIO_Init+0x184>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d00b      	beq.n	8002b70 <HAL_GPIO_Init+0x184>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d007      	beq.n	8002b70 <HAL_GPIO_Init+0x184>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x184>
 8002b68:	21bb      	movs	r1, #187	@ 0xbb
 8002b6a:	489c      	ldr	r0, [pc, #624]	@ (8002ddc <HAL_GPIO_Init+0x3f0>)
 8002b6c:	f7fe fcf6 	bl	800155c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0201 	and.w	r2, r3, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d118      	bne.n	8002c10 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002be4:	2201      	movs	r2, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	f003 0201 	and.w	r2, r3, #1
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d027      	beq.n	8002c6c <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_GPIO_Init+0x250>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d007      	beq.n	8002c3c <HAL_GPIO_Init+0x250>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x250>
 8002c34:	21dc      	movs	r1, #220	@ 0xdc
 8002c36:	4869      	ldr	r0, [pc, #420]	@ (8002ddc <HAL_GPIO_Init+0x3f0>)
 8002c38:	f7fe fc90 	bl	800155c <assert_failed>

        temp = GPIOx->PUPDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d14f      	bne.n	8002d18 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c7e:	d01f      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a57      	ldr	r2, [pc, #348]	@ (8002de0 <HAL_GPIO_Init+0x3f4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d01b      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a56      	ldr	r2, [pc, #344]	@ (8002de4 <HAL_GPIO_Init+0x3f8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d017      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a55      	ldr	r2, [pc, #340]	@ (8002de8 <HAL_GPIO_Init+0x3fc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a54      	ldr	r2, [pc, #336]	@ (8002dec <HAL_GPIO_Init+0x400>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00f      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a53      	ldr	r2, [pc, #332]	@ (8002df0 <HAL_GPIO_Init+0x404>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a52      	ldr	r2, [pc, #328]	@ (8002df4 <HAL_GPIO_Init+0x408>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a51      	ldr	r2, [pc, #324]	@ (8002df8 <HAL_GPIO_Init+0x40c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2d4>
 8002cb8:	21e8      	movs	r1, #232	@ 0xe8
 8002cba:	4848      	ldr	r0, [pc, #288]	@ (8002ddc <HAL_GPIO_Init+0x3f0>)
 8002cbc:	f7fe fc4e 	bl	800155c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d903      	bls.n	8002cd0 <HAL_GPIO_Init+0x2e4>
 8002cc8:	21e9      	movs	r1, #233	@ 0xe9
 8002cca:	4844      	ldr	r0, [pc, #272]	@ (8002ddc <HAL_GPIO_Init+0x3f0>)
 8002ccc:	f7fe fc46 	bl	800155c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	08da      	lsrs	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3208      	adds	r2, #8
 8002cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	6939      	ldr	r1, [r7, #16]
 8002d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	2203      	movs	r2, #3
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0203 	and.w	r2, r3, #3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80c1 	beq.w	8002edc <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_GPIO_Init+0x410>)
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5e:	4a27      	ldr	r2, [pc, #156]	@ (8002dfc <HAL_GPIO_Init+0x410>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d66:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_GPIO_Init+0x410>)
 8002d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d72:	4a23      	ldr	r2, [pc, #140]	@ (8002e00 <HAL_GPIO_Init+0x414>)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	3302      	adds	r3, #2
 8002d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	220f      	movs	r2, #15
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d9c:	d03a      	beq.n	8002e14 <HAL_GPIO_Init+0x428>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a0f      	ldr	r2, [pc, #60]	@ (8002de0 <HAL_GPIO_Init+0x3f4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d034      	beq.n	8002e10 <HAL_GPIO_Init+0x424>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a0e      	ldr	r2, [pc, #56]	@ (8002de4 <HAL_GPIO_Init+0x3f8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02e      	beq.n	8002e0c <HAL_GPIO_Init+0x420>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <HAL_GPIO_Init+0x3fc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d028      	beq.n	8002e08 <HAL_GPIO_Init+0x41c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <HAL_GPIO_Init+0x400>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_GPIO_Init+0x418>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002df0 <HAL_GPIO_Init+0x404>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x3ea>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <HAL_GPIO_Init+0x408>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_GPIO_Init+0x3e6>
 8002dce:	2306      	movs	r3, #6
 8002dd0:	e021      	b.n	8002e16 <HAL_GPIO_Init+0x42a>
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	e01f      	b.n	8002e16 <HAL_GPIO_Init+0x42a>
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	e01d      	b.n	8002e16 <HAL_GPIO_Init+0x42a>
 8002dda:	bf00      	nop
 8002ddc:	08008fe4 	.word	0x08008fe4
 8002de0:	48000400 	.word	0x48000400
 8002de4:	48000800 	.word	0x48000800
 8002de8:	48000c00 	.word	0x48000c00
 8002dec:	48001000 	.word	0x48001000
 8002df0:	48001400 	.word	0x48001400
 8002df4:	48001800 	.word	0x48001800
 8002df8:	48001c00 	.word	0x48001c00
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40010000 	.word	0x40010000
 8002e04:	2304      	movs	r3, #4
 8002e06:	e006      	b.n	8002e16 <HAL_GPIO_Init+0x42a>
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e004      	b.n	8002e16 <HAL_GPIO_Init+0x42a>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e002      	b.n	8002e16 <HAL_GPIO_Init+0x42a>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_GPIO_Init+0x42a>
 8002e14:	2300      	movs	r3, #0
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	f002 0203 	and.w	r2, r2, #3
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	4093      	lsls	r3, r2
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e26:	4935      	ldr	r1, [pc, #212]	@ (8002efc <HAL_GPIO_Init+0x510>)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e34:	4b32      	ldr	r3, [pc, #200]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e58:	4a29      	ldr	r2, [pc, #164]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e5e:	4b28      	ldr	r3, [pc, #160]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e82:	4a1f      	ldr	r2, [pc, #124]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e88:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eac:	4a14      	ldr	r2, [pc, #80]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eb2:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f00 <HAL_GPIO_Init+0x514>)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f ae13 	bne.w	8002b18 <HAL_GPIO_Init+0x12c>
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40010400 	.word	0x40010400

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <HAL_GPIO_WritePin+0x20>
 8002f1a:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8002f1e:	480e      	ldr	r0, [pc, #56]	@ (8002f58 <HAL_GPIO_WritePin+0x54>)
 8002f20:	f7fe fb1c 	bl	800155c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_WritePin+0x36>
 8002f2a:	787b      	ldrb	r3, [r7, #1]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d004      	beq.n	8002f3a <HAL_GPIO_WritePin+0x36>
 8002f30:	f240 11af 	movw	r1, #431	@ 0x1af
 8002f34:	4808      	ldr	r0, [pc, #32]	@ (8002f58 <HAL_GPIO_WritePin+0x54>)
 8002f36:	f7fe fb11 	bl	800155c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002f3a:	787b      	ldrb	r3, [r7, #1]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f40:	887a      	ldrh	r2, [r7, #2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f46:	e002      	b.n	8002f4e <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f48:	887a      	ldrh	r2, [r7, #2]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	08008fe4 	.word	0x08008fe4

08002f5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f60:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40007000 	.word	0x40007000

08002f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f86:	d007      	beq.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8e:	d003      	beq.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002f90:	21a7      	movs	r1, #167	@ 0xa7
 8002f92:	4826      	ldr	r0, [pc, #152]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002f94:	f7fe fae2 	bl	800155c <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f9e:	d130      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa0:	4b23      	ldr	r3, [pc, #140]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fac:	d038      	beq.n	8003020 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fae:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002fb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2232      	movs	r2, #50	@ 0x32
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0c9b      	lsrs	r3, r3, #18
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd4:	e002      	b.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fdc:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe8:	d102      	bne.n	8002ff0 <HAL_PWREx_ControlVoltageScaling+0x78>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f2      	bne.n	8002fd6 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffc:	d110      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e00f      	b.n	8003022 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d007      	beq.n	8003020 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003010:	4b07      	ldr	r3, [pc, #28]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003018:	4a05      	ldr	r2, [pc, #20]	@ (8003030 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800301a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800301e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	08009020 	.word	0x08009020
 8003030:	40007000 	.word	0x40007000
 8003034:	20000004 	.word	0x20000004
 8003038:	431bde83 	.word	0x431bde83

0800303c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f000 bcef 	b.w	8003a2e <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_OscConfig+0x2e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b1f      	cmp	r3, #31
 800305e:	d904      	bls.n	800306a <HAL_RCC_OscConfig+0x2e>
 8003060:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8003064:	489a      	ldr	r0, [pc, #616]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 8003066:	f7fe fa79 	bl	800155c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306a:	4b9a      	ldr	r3, [pc, #616]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003074:	4b97      	ldr	r3, [pc, #604]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 813d 	beq.w	8003306 <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_OscConfig+0x6a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d004      	beq.n	80030a6 <HAL_RCC_OscConfig+0x6a>
 800309c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 80030a0:	488b      	ldr	r0, [pc, #556]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80030a2:	f7fe fa5b 	bl	800155c <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	2bff      	cmp	r3, #255	@ 0xff
 80030ac:	d904      	bls.n	80030b8 <HAL_RCC_OscConfig+0x7c>
 80030ae:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 80030b2:	4887      	ldr	r0, [pc, #540]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 80030b4:	f7fe fa52 	bl	800155c <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d030      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d02c      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d028      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	2b30      	cmp	r3, #48	@ 0x30
 80030d6:	d024      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	2b40      	cmp	r3, #64	@ 0x40
 80030de:	d020      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	2b50      	cmp	r3, #80	@ 0x50
 80030e6:	d01c      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	2b60      	cmp	r3, #96	@ 0x60
 80030ee:	d018      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	2b70      	cmp	r3, #112	@ 0x70
 80030f6:	d014      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	2b80      	cmp	r3, #128	@ 0x80
 80030fe:	d010      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	2b90      	cmp	r3, #144	@ 0x90
 8003106:	d00c      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	2ba0      	cmp	r3, #160	@ 0xa0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	2bb0      	cmp	r3, #176	@ 0xb0
 8003116:	d004      	beq.n	8003122 <HAL_RCC_OscConfig+0xe6>
 8003118:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800311c:	486c      	ldr	r0, [pc, #432]	@ (80032d0 <HAL_RCC_OscConfig+0x294>)
 800311e:	f7fe fa1d 	bl	800155c <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_RCC_OscConfig+0xfc>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	f040 808e 	bne.w	800324c <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b01      	cmp	r3, #1
 8003134:	f040 808a 	bne.w	800324c <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003138:	4b66      	ldr	r3, [pc, #408]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <HAL_RCC_OscConfig+0x116>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f000 bc6e 	b.w	8003a2e <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	4b5f      	ldr	r3, [pc, #380]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <HAL_RCC_OscConfig+0x130>
 8003162:	4b5c      	ldr	r3, [pc, #368]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800316a:	e005      	b.n	8003178 <HAL_RCC_OscConfig+0x13c>
 800316c:	4b59      	ldr	r3, [pc, #356]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003178:	4293      	cmp	r3, r2
 800317a:	d224      	bcs.n	80031c6 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fec1 	bl	8003f08 <RCC_SetFlashLatencyFromMSIRange>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f000 bc4e 	b.w	8003a2e <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003192:	4b50      	ldr	r3, [pc, #320]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a4f      	ldr	r2, [pc, #316]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b4d      	ldr	r3, [pc, #308]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	494a      	ldr	r1, [pc, #296]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b0:	4b48      	ldr	r3, [pc, #288]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	4945      	ldr	r1, [pc, #276]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
 80031c4:	e026      	b.n	8003214 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c6:	4b43      	ldr	r3, [pc, #268]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a42      	ldr	r2, [pc, #264]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031cc:	f043 0308 	orr.w	r3, r3, #8
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b40      	ldr	r3, [pc, #256]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	493d      	ldr	r1, [pc, #244]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	4938      	ldr	r1, [pc, #224]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fe80 	bl	8003f08 <RCC_SetFlashLatencyFromMSIRange>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f000 bc0d 	b.w	8003a2e <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003214:	f000 fdb4 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b2e      	ldr	r3, [pc, #184]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	492c      	ldr	r1, [pc, #176]	@ (80032d8 <HAL_RCC_OscConfig+0x29c>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
 8003230:	4a2a      	ldr	r2, [pc, #168]	@ (80032dc <HAL_RCC_OscConfig+0x2a0>)
 8003232:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003234:	4b2a      	ldr	r3, [pc, #168]	@ (80032e0 <HAL_RCC_OscConfig+0x2a4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe feb7 	bl	8001fac <HAL_InitTick>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d05d      	beq.n	8003304 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	e3f0      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d032      	beq.n	80032ba <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003254:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1e      	ldr	r2, [pc, #120]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003260:	f7fe fef4 	bl	800204c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003268:	f7fe fef0 	bl	800204c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e3d9      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327a:	4b16      	ldr	r3, [pc, #88]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a12      	ldr	r2, [pc, #72]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	490d      	ldr	r1, [pc, #52]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	4908      	ldr	r1, [pc, #32]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
 80032b8:	e025      	b.n	8003306 <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a05      	ldr	r2, [pc, #20]	@ (80032d4 <HAL_RCC_OscConfig+0x298>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c6:	f7fe fec1 	bl	800204c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032cc:	e013      	b.n	80032f6 <HAL_RCC_OscConfig+0x2ba>
 80032ce:	bf00      	nop
 80032d0:	0800905c 	.word	0x0800905c
 80032d4:	40021000 	.word	0x40021000
 80032d8:	080091b8 	.word	0x080091b8
 80032dc:	20000004 	.word	0x20000004
 80032e0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e4:	f7fe feb2 	bl	800204c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e39b      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f6:	4b97      	ldr	r3, [pc, #604]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2a8>
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003304:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d07e      	beq.n	8003410 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00e      	beq.n	8003338 <HAL_RCC_OscConfig+0x2fc>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003322:	d009      	beq.n	8003338 <HAL_RCC_OscConfig+0x2fc>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800332c:	d004      	beq.n	8003338 <HAL_RCC_OscConfig+0x2fc>
 800332e:	f240 2119 	movw	r1, #537	@ 0x219
 8003332:	4889      	ldr	r0, [pc, #548]	@ (8003558 <HAL_RCC_OscConfig+0x51c>)
 8003334:	f7fe f912 	bl	800155c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b08      	cmp	r3, #8
 800333c:	d005      	beq.n	800334a <HAL_RCC_OscConfig+0x30e>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d10e      	bne.n	8003362 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d10b      	bne.n	8003362 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334a:	4b82      	ldr	r3, [pc, #520]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d05b      	beq.n	800340e <HAL_RCC_OscConfig+0x3d2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d157      	bne.n	800340e <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e365      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x33e>
 800336c:	4b79      	ldr	r3, [pc, #484]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a78      	ldr	r2, [pc, #480]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e01d      	b.n	80033b6 <HAL_RCC_OscConfig+0x37a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003382:	d10c      	bne.n	800339e <HAL_RCC_OscConfig+0x362>
 8003384:	4b73      	ldr	r3, [pc, #460]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a72      	ldr	r2, [pc, #456]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 800338a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b70      	ldr	r3, [pc, #448]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a6f      	ldr	r2, [pc, #444]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	e00b      	b.n	80033b6 <HAL_RCC_OscConfig+0x37a>
 800339e:	4b6d      	ldr	r3, [pc, #436]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a69      	ldr	r2, [pc, #420]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80033b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe fe45 	bl	800204c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c6:	f7fe fe41 	bl	800204c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	@ 0x64
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e32a      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x38a>
 80033e4:	e014      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe fe31 	bl	800204c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ee:	f7fe fe2d 	bl	800204c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	@ 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e316      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003400:	4b54      	ldr	r3, [pc, #336]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x3b2>
 800340c:	e000      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d077      	beq.n	800350c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <HAL_RCC_OscConfig+0x3fc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800342c:	d004      	beq.n	8003438 <HAL_RCC_OscConfig+0x3fc>
 800342e:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8003432:	4849      	ldr	r0, [pc, #292]	@ (8003558 <HAL_RCC_OscConfig+0x51c>)
 8003434:	f7fe f892 	bl	800155c <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b1f      	cmp	r3, #31
 800343e:	d904      	bls.n	800344a <HAL_RCC_OscConfig+0x40e>
 8003440:	f240 214d 	movw	r1, #589	@ 0x24d
 8003444:	4844      	ldr	r0, [pc, #272]	@ (8003558 <HAL_RCC_OscConfig+0x51c>)
 8003446:	f7fe f889 	bl	800155c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d005      	beq.n	800345c <HAL_RCC_OscConfig+0x420>
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d119      	bne.n	800348a <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d116      	bne.n	800348a <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345c:	4b3d      	ldr	r3, [pc, #244]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_OscConfig+0x438>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e2dc      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003474:	4b37      	ldr	r3, [pc, #220]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	4934      	ldr	r1, [pc, #208]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003488:	e040      	b.n	800350c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d023      	beq.n	80034da <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003492:	4b30      	ldr	r3, [pc, #192]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2f      	ldr	r2, [pc, #188]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe fdd5 	bl	800204c <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a6:	f7fe fdd1 	bl	800204c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e2ba      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b8:	4b26      	ldr	r3, [pc, #152]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b23      	ldr	r3, [pc, #140]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	4920      	ldr	r1, [pc, #128]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
 80034d8:	e018      	b.n	800350c <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034da:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1d      	ldr	r2, [pc, #116]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 80034e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe fdb1 	bl	800204c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fe fdad 	bl	800204c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e296      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003500:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d04e      	beq.n	80035b6 <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_OscConfig+0x4f6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d004      	beq.n	8003532 <HAL_RCC_OscConfig+0x4f6>
 8003528:	f240 218d 	movw	r1, #653	@ 0x28d
 800352c:	480a      	ldr	r0, [pc, #40]	@ (8003558 <HAL_RCC_OscConfig+0x51c>)
 800352e:	f7fe f815 	bl	800155c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d021      	beq.n	800357e <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 800353c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <HAL_RCC_OscConfig+0x518>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fe fd7f 	bl	800204c <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003550:	e00d      	b.n	800356e <HAL_RCC_OscConfig+0x532>
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	0800905c 	.word	0x0800905c
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fe fd76 	bl	800204c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e25f      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356e:	4b66      	ldr	r3, [pc, #408]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ef      	beq.n	800355c <HAL_RCC_OscConfig+0x520>
 800357c:	e01b      	b.n	80035b6 <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357e:	4b62      	ldr	r3, [pc, #392]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 8003580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003584:	4a60      	ldr	r2, [pc, #384]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fe fd5d 	bl	800204c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003596:	f7fe fd59 	bl	800204c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e242      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a8:	4b57      	ldr	r3, [pc, #348]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ef      	bne.n	8003596 <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80b8 	beq.w	8003734 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00c      	beq.n	80035ea <HAL_RCC_OscConfig+0x5ae>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_OscConfig+0x5ae>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d004      	beq.n	80035ea <HAL_RCC_OscConfig+0x5ae>
 80035e0:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80035e4:	4849      	ldr	r0, [pc, #292]	@ (800370c <HAL_RCC_OscConfig+0x6d0>)
 80035e6:	f7fd ffb9 	bl	800155c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4b44      	ldr	r3, [pc, #272]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	4a43      	ldr	r2, [pc, #268]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003600:	6593      	str	r3, [r2, #88]	@ 0x58
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 8003604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003612:	4b3f      	ldr	r3, [pc, #252]	@ (8003710 <HAL_RCC_OscConfig+0x6d4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800361e:	4b3c      	ldr	r3, [pc, #240]	@ (8003710 <HAL_RCC_OscConfig+0x6d4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a3b      	ldr	r2, [pc, #236]	@ (8003710 <HAL_RCC_OscConfig+0x6d4>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fe fd0f 	bl	800204c <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fe fd0b 	bl	800204c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1f4      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003644:	4b32      	ldr	r3, [pc, #200]	@ (8003710 <HAL_RCC_OscConfig+0x6d4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d108      	bne.n	800366a <HAL_RCC_OscConfig+0x62e>
 8003658:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	4a2a      	ldr	r2, [pc, #168]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003668:	e024      	b.n	80036b4 <HAL_RCC_OscConfig+0x678>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d110      	bne.n	8003694 <HAL_RCC_OscConfig+0x658>
 8003672:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003678:	4a23      	ldr	r2, [pc, #140]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003682:	4b21      	ldr	r3, [pc, #132]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003688:	4a1f      	ldr	r2, [pc, #124]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003692:	e00f      	b.n	80036b4 <HAL_RCC_OscConfig+0x678>
 8003694:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036a4:	4b18      	ldr	r3, [pc, #96]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036aa:	4a17      	ldr	r2, [pc, #92]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d016      	beq.n	80036ea <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fe fcc6 	bl	800204c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe fcc2 	bl	800204c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1a9      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036da:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_OscConfig+0x6cc>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ed      	beq.n	80036c4 <HAL_RCC_OscConfig+0x688>
 80036e8:	e01b      	b.n	8003722 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fcaf 	bl	800204c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f0:	e010      	b.n	8003714 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe fcab 	bl	800204c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d907      	bls.n	8003714 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e192      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
 8003708:	40021000 	.word	0x40021000
 800370c:	0800905c 	.word	0x0800905c
 8003710:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003714:	4b98      	ldr	r3, [pc, #608]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e7      	bne.n	80036f2 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003722:	7ffb      	ldrb	r3, [r7, #31]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b93      	ldr	r3, [pc, #588]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	4a92      	ldr	r2, [pc, #584]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 800372e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00c      	beq.n	8003756 <HAL_RCC_OscConfig+0x71a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003740:	2b01      	cmp	r3, #1
 8003742:	d008      	beq.n	8003756 <HAL_RCC_OscConfig+0x71a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	2b02      	cmp	r3, #2
 800374a:	d004      	beq.n	8003756 <HAL_RCC_OscConfig+0x71a>
 800374c:	f240 316e 	movw	r1, #878	@ 0x36e
 8003750:	488a      	ldr	r0, [pc, #552]	@ (800397c <HAL_RCC_OscConfig+0x940>)
 8003752:	f7fd ff03 	bl	800155c <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8166 	beq.w	8003a2c <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	2b02      	cmp	r3, #2
 8003766:	f040 813c 	bne.w	80039e2 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <HAL_RCC_OscConfig+0x758>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d00c      	beq.n	8003794 <HAL_RCC_OscConfig+0x758>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	2b02      	cmp	r3, #2
 8003780:	d008      	beq.n	8003794 <HAL_RCC_OscConfig+0x758>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	2b03      	cmp	r3, #3
 8003788:	d004      	beq.n	8003794 <HAL_RCC_OscConfig+0x758>
 800378a:	f240 3176 	movw	r1, #886	@ 0x376
 800378e:	487b      	ldr	r0, [pc, #492]	@ (800397c <HAL_RCC_OscConfig+0x940>)
 8003790:	f7fd fee4 	bl	800155c <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_RCC_OscConfig+0x768>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d904      	bls.n	80037ae <HAL_RCC_OscConfig+0x772>
 80037a4:	f240 3177 	movw	r1, #887	@ 0x377
 80037a8:	4874      	ldr	r0, [pc, #464]	@ (800397c <HAL_RCC_OscConfig+0x940>)
 80037aa:	f7fd fed7 	bl	800155c <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b2:	2b07      	cmp	r3, #7
 80037b4:	d903      	bls.n	80037be <HAL_RCC_OscConfig+0x782>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ba:	2b56      	cmp	r3, #86	@ 0x56
 80037bc:	d904      	bls.n	80037c8 <HAL_RCC_OscConfig+0x78c>
 80037be:	f44f 715e 	mov.w	r1, #888	@ 0x378
 80037c2:	486e      	ldr	r0, [pc, #440]	@ (800397c <HAL_RCC_OscConfig+0x940>)
 80037c4:	f7fd feca 	bl	800155c <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037cc:	2b07      	cmp	r3, #7
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_OscConfig+0x7a6>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	2b11      	cmp	r3, #17
 80037d6:	d004      	beq.n	80037e2 <HAL_RCC_OscConfig+0x7a6>
 80037d8:	f240 317a 	movw	r1, #890	@ 0x37a
 80037dc:	4867      	ldr	r0, [pc, #412]	@ (800397c <HAL_RCC_OscConfig+0x940>)
 80037de:	f7fd febd 	bl	800155c <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d010      	beq.n	800380c <HAL_RCC_OscConfig+0x7d0>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d00c      	beq.n	800380c <HAL_RCC_OscConfig+0x7d0>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d008      	beq.n	800380c <HAL_RCC_OscConfig+0x7d0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d004      	beq.n	800380c <HAL_RCC_OscConfig+0x7d0>
 8003802:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8003806:	485d      	ldr	r0, [pc, #372]	@ (800397c <HAL_RCC_OscConfig+0x940>)
 8003808:	f7fd fea8 	bl	800155c <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	2b02      	cmp	r3, #2
 8003812:	d010      	beq.n	8003836 <HAL_RCC_OscConfig+0x7fa>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	2b04      	cmp	r3, #4
 800381a:	d00c      	beq.n	8003836 <HAL_RCC_OscConfig+0x7fa>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	2b06      	cmp	r3, #6
 8003822:	d008      	beq.n	8003836 <HAL_RCC_OscConfig+0x7fa>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	2b08      	cmp	r3, #8
 800382a:	d004      	beq.n	8003836 <HAL_RCC_OscConfig+0x7fa>
 800382c:	f240 317d 	movw	r1, #893	@ 0x37d
 8003830:	4852      	ldr	r0, [pc, #328]	@ (800397c <HAL_RCC_OscConfig+0x940>)
 8003832:	f7fd fe93 	bl	800155c <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003836:	4b50      	ldr	r3, [pc, #320]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 0203 	and.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	429a      	cmp	r2, r3
 8003848:	d130      	bne.n	80038ac <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	3b01      	subs	r3, #1
 8003856:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d127      	bne.n	80038ac <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003866:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d11f      	bne.n	80038ac <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003876:	2a07      	cmp	r2, #7
 8003878:	bf14      	ite	ne
 800387a:	2201      	movne	r2, #1
 800387c:	2200      	moveq	r2, #0
 800387e:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003880:	4293      	cmp	r3, r2
 8003882:	d113      	bne.n	80038ac <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	3b01      	subs	r3, #1
 8003892:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d109      	bne.n	80038ac <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	3b01      	subs	r3, #1
 80038a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d074      	beq.n	8003996 <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	d06f      	beq.n	8003992 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038b2:	4b31      	ldr	r3, [pc, #196]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038be:	4b2e      	ldr	r3, [pc, #184]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0af      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a29      	ldr	r2, [pc, #164]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 80038d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038da:	f7fe fbb7 	bl	800204c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fe fbb3 	bl	800204c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e09c      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f4:	4b20      	ldr	r3, [pc, #128]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	4b1e      	ldr	r3, [pc, #120]	@ (8003980 <HAL_RCC_OscConfig+0x944>)
 8003906:	4013      	ands	r3, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003910:	3a01      	subs	r2, #1
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	4311      	orrs	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800391a:	0212      	lsls	r2, r2, #8
 800391c:	4311      	orrs	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003922:	0852      	lsrs	r2, r2, #1
 8003924:	3a01      	subs	r2, #1
 8003926:	0552      	lsls	r2, r2, #21
 8003928:	4311      	orrs	r1, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800392e:	0852      	lsrs	r2, r2, #1
 8003930:	3a01      	subs	r2, #1
 8003932:	0652      	lsls	r2, r2, #25
 8003934:	4311      	orrs	r1, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800393a:	0912      	lsrs	r2, r2, #4
 800393c:	0452      	lsls	r2, r2, #17
 800393e:	430a      	orrs	r2, r1
 8003940:	490d      	ldr	r1, [pc, #52]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003942:	4313      	orrs	r3, r2
 8003944:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003946:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a0b      	ldr	r2, [pc, #44]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 800394c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003950:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003952:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4a08      	ldr	r2, [pc, #32]	@ (8003978 <HAL_RCC_OscConfig+0x93c>)
 8003958:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800395c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800395e:	f7fe fb75 	bl	800204c <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003964:	e00e      	b.n	8003984 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003966:	f7fe fb71 	bl	800204c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d907      	bls.n	8003984 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e05a      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
 8003978:	40021000 	.word	0x40021000
 800397c:	0800905c 	.word	0x0800905c
 8003980:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003984:	4b2c      	ldr	r3, [pc, #176]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ea      	beq.n	8003966 <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003990:	e04c      	b.n	8003a2c <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e04b      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	4b28      	ldr	r3, [pc, #160]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d144      	bne.n	8003a2c <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039a2:	4b25      	ldr	r3, [pc, #148]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a24      	ldr	r2, [pc, #144]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 80039a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ac:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ae:	4b22      	ldr	r3, [pc, #136]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	4a21      	ldr	r2, [pc, #132]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 80039b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039b8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039ba:	f7fe fb47 	bl	800204c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fe fb43 	bl	800204c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e02c      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d4:	4b18      	ldr	r3, [pc, #96]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x986>
 80039e0:	e024      	b.n	8003a2c <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	d01f      	beq.n	8003a28 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e8:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a12      	ldr	r2, [pc, #72]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 80039ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fe fb2a 	bl	800204c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fe fb26 	bl	800204c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e00f      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a1a:	4b07      	ldr	r3, [pc, #28]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	4906      	ldr	r1, [pc, #24]	@ (8003a38 <HAL_RCC_OscConfig+0x9fc>)
 8003a20:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_RCC_OscConfig+0xa00>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	60cb      	str	r3, [r1, #12]
 8003a26:	e001      	b.n	8003a2c <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	feeefffc 	.word	0xfeeefffc

08003a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e186      	b.n	8003d62 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x24>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d904      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x2e>
 8003a64:	f240 4159 	movw	r1, #1113	@ 0x459
 8003a68:	4882      	ldr	r0, [pc, #520]	@ (8003c74 <HAL_RCC_ClockConfig+0x234>)
 8003a6a:	f7fd fd77 	bl	800155c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d010      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x56>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d00d      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x56>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x56>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d007      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x56>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d004      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x56>
 8003a8c:	f240 415a 	movw	r1, #1114	@ 0x45a
 8003a90:	4878      	ldr	r0, [pc, #480]	@ (8003c74 <HAL_RCC_ClockConfig+0x234>)
 8003a92:	f7fd fd63 	bl	800155c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a96:	4b78      	ldr	r3, [pc, #480]	@ (8003c78 <HAL_RCC_ClockConfig+0x238>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d910      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa4:	4b74      	ldr	r3, [pc, #464]	@ (8003c78 <HAL_RCC_ClockConfig+0x238>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 0207 	bic.w	r2, r3, #7
 8003aac:	4972      	ldr	r1, [pc, #456]	@ (8003c78 <HAL_RCC_ClockConfig+0x238>)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab4:	4b70      	ldr	r3, [pc, #448]	@ (8003c78 <HAL_RCC_ClockConfig+0x238>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e14d      	b.n	8003d62 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d039      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d024      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b80      	cmp	r3, #128	@ 0x80
 8003ae0:	d020      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b90      	cmp	r3, #144	@ 0x90
 8003ae8:	d01c      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2ba0      	cmp	r3, #160	@ 0xa0
 8003af0:	d018      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2bb0      	cmp	r3, #176	@ 0xb0
 8003af8:	d014      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b00:	d010      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2bd0      	cmp	r3, #208	@ 0xd0
 8003b08:	d00c      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2be0      	cmp	r3, #224	@ 0xe0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2bf0      	cmp	r3, #240	@ 0xf0
 8003b18:	d004      	beq.n	8003b24 <HAL_RCC_ClockConfig+0xe4>
 8003b1a:	f240 4172 	movw	r1, #1138	@ 0x472
 8003b1e:	4855      	ldr	r0, [pc, #340]	@ (8003c74 <HAL_RCC_ClockConfig+0x234>)
 8003b20:	f7fd fd1c 	bl	800155c <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	4b54      	ldr	r3, [pc, #336]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d908      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b51      	ldr	r3, [pc, #324]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494e      	ldr	r1, [pc, #312]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d061      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d010      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x13c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d00c      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x13c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d008      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x13c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d004      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x13c>
 8003b72:	f240 417d 	movw	r1, #1149	@ 0x47d
 8003b76:	483f      	ldr	r0, [pc, #252]	@ (8003c74 <HAL_RCC_ClockConfig+0x234>)
 8003b78:	f7fd fcf0 	bl	800155c <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b84:	4b3d      	ldr	r3, [pc, #244]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d121      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0e6      	b.n	8003d62 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9c:	4b37      	ldr	r3, [pc, #220]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d115      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0da      	b.n	8003d62 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bb4:	4b31      	ldr	r3, [pc, #196]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0ce      	b.n	8003d62 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0c6      	b.n	8003d62 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bd4:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 0203 	bic.w	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4926      	ldr	r1, [pc, #152]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be6:	f7fe fa31 	bl	800204c <HAL_GetTick>
 8003bea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bee:	f7fe fa2d 	bl	800204c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e0ae      	b.n	8003d62 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c04:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 020c 	and.w	r2, r3, #12
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d1eb      	bne.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d208      	bcs.n	8003c44 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c32:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	490f      	ldr	r1, [pc, #60]	@ (8003c7c <HAL_RCC_ClockConfig+0x23c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <HAL_RCC_ClockConfig+0x238>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d216      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_RCC_ClockConfig+0x238>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 0207 	bic.w	r2, r3, #7
 8003c5a:	4907      	ldr	r1, [pc, #28]	@ (8003c78 <HAL_RCC_ClockConfig+0x238>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_ClockConfig+0x238>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d007      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e076      	b.n	8003d62 <HAL_RCC_ClockConfig+0x322>
 8003c74:	0800905c 	.word	0x0800905c
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d025      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d018      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x286>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9c:	d013      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x286>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x286>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cb0:	d009      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x286>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cba:	d004      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x286>
 8003cbc:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8003cc0:	482a      	ldr	r0, [pc, #168]	@ (8003d6c <HAL_RCC_ClockConfig+0x32c>)
 8003cc2:	f7fd fc4b 	bl	800155c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d70 <HAL_RCC_ClockConfig+0x330>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4927      	ldr	r1, [pc, #156]	@ (8003d70 <HAL_RCC_ClockConfig+0x330>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d026      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d018      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf4:	d013      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003cfe:	d00e      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d12:	d004      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x2de>
 8003d14:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8003d18:	4814      	ldr	r0, [pc, #80]	@ (8003d6c <HAL_RCC_ClockConfig+0x32c>)
 8003d1a:	f7fd fc1f 	bl	800155c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1e:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <HAL_RCC_ClockConfig+0x330>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4910      	ldr	r1, [pc, #64]	@ (8003d70 <HAL_RCC_ClockConfig+0x330>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d32:	f000 f825 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <HAL_RCC_ClockConfig+0x330>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490c      	ldr	r1, [pc, #48]	@ (8003d74 <HAL_RCC_ClockConfig+0x334>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <HAL_RCC_ClockConfig+0x338>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d52:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <HAL_RCC_ClockConfig+0x33c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe f928 	bl	8001fac <HAL_InitTick>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d60:	7afb      	ldrb	r3, [r7, #11]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	0800905c 	.word	0x0800905c
 8003d70:	40021000 	.word	0x40021000
 8003d74:	080091b8 	.word	0x080091b8
 8003d78:	20000004 	.word	0x20000004
 8003d7c:	20000008 	.word	0x20000008

08003d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	@ 0x24
 8003d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d98:	4b3b      	ldr	r3, [pc, #236]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x34>
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d121      	bne.n	8003df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d11e      	bne.n	8003df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003db4:	4b34      	ldr	r3, [pc, #208]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dc0:	4b31      	ldr	r3, [pc, #196]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	e005      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10d      	bne.n	8003e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d102      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003df8:	4b25      	ldr	r3, [pc, #148]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	e004      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e04:	4b23      	ldr	r3, [pc, #140]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d134      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d003      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0xac>
 8003e24:	e005      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e28:	617b      	str	r3, [r7, #20]
      break;
 8003e2a:	e005      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e2e:	617b      	str	r3, [r7, #20]
      break;
 8003e30:	e002      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	617b      	str	r3, [r7, #20]
      break;
 8003e36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e38:	4b13      	ldr	r3, [pc, #76]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	3301      	adds	r3, #1
 8003e44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e46:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	fb03 f202 	mul.w	r2, r3, r2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	0e5b      	lsrs	r3, r3, #25
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e78:	69bb      	ldr	r3, [r7, #24]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	@ 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	080091d0 	.word	0x080091d0
 8003e90:	00f42400 	.word	0x00f42400
 8003e94:	007a1200 	.word	0x007a1200

08003e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e9c:	4b03      	ldr	r3, [pc, #12]	@ (8003eac <HAL_RCC_GetHCLKFreq+0x14>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000004 	.word	0x20000004

08003eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003eb4:	f7ff fff0 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4904      	ldr	r1, [pc, #16]	@ (8003ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	080091c8 	.word	0x080091c8

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ee0:	f7ff ffda 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0adb      	lsrs	r3, r3, #11
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4904      	ldr	r1, [pc, #16]	@ (8003f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	080091c8 	.word	0x080091c8

08003f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f14:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f20:	f7ff f81c 	bl	8002f5c <HAL_PWREx_GetVoltageRange>
 8003f24:	6178      	str	r0, [r7, #20]
 8003f26:	e014      	b.n	8003f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f28:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	4a24      	ldr	r2, [pc, #144]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f34:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f40:	f7ff f80c 	bl	8002f5c <HAL_PWREx_GetVoltageRange>
 8003f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f46:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f58:	d10b      	bne.n	8003f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b80      	cmp	r3, #128	@ 0x80
 8003f5e:	d919      	bls.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f64:	d902      	bls.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f66:	2302      	movs	r3, #2
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e013      	b.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	e010      	b.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b80      	cmp	r3, #128	@ 0x80
 8003f76:	d902      	bls.n	8003f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f78:	2303      	movs	r3, #3
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	e00a      	b.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b80      	cmp	r3, #128	@ 0x80
 8003f82:	d102      	bne.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f84:	2302      	movs	r3, #2
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e004      	b.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b70      	cmp	r3, #112	@ 0x70
 8003f8e:	d101      	bne.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f90:	2301      	movs	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f94:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f023 0207 	bic.w	r2, r3, #7
 8003f9c:	4909      	ldr	r1, [pc, #36]	@ (8003fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fa4:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d001      	beq.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40022000 	.word	0x40022000

08003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fec:	d303      	bcc.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003fee:	21c9      	movs	r1, #201	@ 0xc9
 8003ff0:	4889      	ldr	r0, [pc, #548]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003ff2:	f7fd fab3 	bl	800155c <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d058      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004006:	2b00      	cmp	r3, #0
 8004008:	d012      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800400e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004012:	d00d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004018:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800401c:	d008      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004022:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004026:	d003      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004028:	21d1      	movs	r1, #209	@ 0xd1
 800402a:	487b      	ldr	r0, [pc, #492]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800402c:	f7fd fa96 	bl	800155c <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004034:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004038:	d02a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800403a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800403e:	d824      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004040:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004046:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800404a:	d81e      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004054:	d010      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8004056:	e018      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004058:	4b70      	ldr	r3, [pc, #448]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a6f      	ldr	r2, [pc, #444]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800405e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004062:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004064:	e015      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3304      	adds	r3, #4
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fc69 	bl	8004944 <RCCEx_PLLSAI1_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004076:	e00c      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3320      	adds	r3, #32
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fde0 	bl	8004c44 <RCCEx_PLLSAI2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004088:	e003      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	74fb      	strb	r3, [r7, #19]
      break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8004090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004098:	4b60      	ldr	r3, [pc, #384]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040a6:	495d      	ldr	r1, [pc, #372]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040ae:	e001      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d059      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040d0:	d00e      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040da:	d009      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040e4:	d004      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80040e6:	f240 110f 	movw	r1, #271	@ 0x10f
 80040ea:	484b      	ldr	r0, [pc, #300]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80040ec:	f7fd fa36 	bl	800155c <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040f8:	d02a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80040fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040fe:	d824      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004104:	d008      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800410a:	d81e      	bhi.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004114:	d010      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004116:	e018      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004118:	4b40      	ldr	r3, [pc, #256]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a3f      	ldr	r2, [pc, #252]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800411e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004122:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004124:	e015      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fc09 	bl	8004944 <RCCEx_PLLSAI1_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004136:	e00c      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3320      	adds	r3, #32
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fd80 	bl	8004c44 <RCCEx_PLLSAI2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	74fb      	strb	r3, [r7, #19]
      break;
 800414e:	e000      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8004150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004158:	4b30      	ldr	r3, [pc, #192]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004166:	492d      	ldr	r1, [pc, #180]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800416e:	e001      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80c2 	beq.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418c:	2b00      	cmp	r3, #0
 800418e:	d016      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800419a:	d010      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041b2:	d004      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80041b4:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80041b8:	4817      	ldr	r0, [pc, #92]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80041ba:	f7fd f9cf 	bl	800155c <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041be:	4b17      	ldr	r3, [pc, #92]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d4:	4b11      	ldr	r3, [pc, #68]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d8:	4a10      	ldr	r2, [pc, #64]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041de:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e0:	4b0e      	ldr	r3, [pc, #56]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ec:	2301      	movs	r3, #1
 80041ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041fc:	f7fd ff26 	bl	800204c <HAL_GetTick>
 8004200:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004202:	e00f      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004204:	f7fd ff22 	bl	800204c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d908      	bls.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	74fb      	strb	r3, [r7, #19]
        break;
 8004216:	e00b      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8004218:	08009094 	.word	0x08009094
 800421c:	40021000 	.word	0x40021000
 8004220:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004224:	4b30      	ldr	r3, [pc, #192]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0e9      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d15c      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004236:	4b2d      	ldr	r3, [pc, #180]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004240:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01f      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	429a      	cmp	r2, r3
 8004252:	d019      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004254:	4b25      	ldr	r3, [pc, #148]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800425e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004260:	4b22      	ldr	r3, [pc, #136]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	4a21      	ldr	r2, [pc, #132]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004270:	4b1e      	ldr	r3, [pc, #120]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	4a1d      	ldr	r2, [pc, #116]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004280:	4a1a      	ldr	r2, [pc, #104]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd fedb 	bl	800204c <HAL_GetTick>
 8004296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004298:	e00b      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fd fed7 	bl	800204c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d902      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	74fb      	strb	r3, [r7, #19]
            break;
 80042b0:	e006      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b2:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ec      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c6:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d6:	4905      	ldr	r1, [pc, #20]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80042e6:	bf00      	nop
 80042e8:	40007000 	.word	0x40007000
 80042ec:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f4:	7c7b      	ldrb	r3, [r7, #17]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fe:	4a8c      	ldr	r2, [pc, #560]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004304:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01f      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	2b01      	cmp	r3, #1
 8004320:	d00c      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004326:	2b03      	cmp	r3, #3
 8004328:	d008      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432e:	2b02      	cmp	r3, #2
 8004330:	d004      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004332:	f240 1199 	movw	r1, #409	@ 0x199
 8004336:	487f      	ldr	r0, [pc, #508]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004338:	f7fd f910 	bl	800155c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433c:	4b7c      	ldr	r3, [pc, #496]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	4979      	ldr	r1, [pc, #484]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01f      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d010      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436a:	2b04      	cmp	r3, #4
 800436c:	d00c      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d008      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	2b08      	cmp	r3, #8
 800437c:	d004      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800437e:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8004382:	486c      	ldr	r0, [pc, #432]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004384:	f7fd f8ea 	bl	800155c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004388:	4b69      	ldr	r3, [pc, #420]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	f023 020c 	bic.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004396:	4966      	ldr	r1, [pc, #408]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01f      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d00c      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	2b30      	cmp	r3, #48	@ 0x30
 80043c0:	d008      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d004      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80043ce:	4859      	ldr	r0, [pc, #356]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80043d0:	f7fd f8c4 	bl	800155c <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043d4:	4b56      	ldr	r3, [pc, #344]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	4953      	ldr	r1, [pc, #332]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01f      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d010      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d00c      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	2bc0      	cmp	r3, #192	@ 0xc0
 800440c:	d008      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	2b80      	cmp	r3, #128	@ 0x80
 8004414:	d004      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8004416:	f240 11bd 	movw	r1, #445	@ 0x1bd
 800441a:	4846      	ldr	r0, [pc, #280]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800441c:	f7fd f89e 	bl	800155c <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004420:	4b43      	ldr	r3, [pc, #268]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	4940      	ldr	r1, [pc, #256]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	d022      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004446:	2b00      	cmp	r3, #0
 8004448:	d013      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004452:	d00e      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800445c:	d009      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004466:	d004      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004468:	f240 11cb 	movw	r1, #459	@ 0x1cb
 800446c:	4831      	ldr	r0, [pc, #196]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800446e:	f7fd f875 	bl	800155c <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004472:	4b2f      	ldr	r3, [pc, #188]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004480:	492b      	ldr	r1, [pc, #172]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d022      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a4:	d00e      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044ae:	d009      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b8:	d004      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80044ba:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80044be:	481d      	ldr	r0, [pc, #116]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80044c0:	f7fd f84c 	bl	800155c <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d2:	4917      	ldr	r1, [pc, #92]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d028      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d013      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044f6:	d00e      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004500:	d009      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004506:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800450a:	d004      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800450c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004510:	4808      	ldr	r0, [pc, #32]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8004512:	f7fd f823 	bl	800155c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004524:	4902      	ldr	r1, [pc, #8]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800452c:	e004      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000
 8004534:	08009094 	.word	0x08009094
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004540:	2b00      	cmp	r3, #0
 8004542:	d022      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004548:	2b00      	cmp	r3, #0
 800454a:	d013      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004554:	d00e      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800455e:	d009      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004564:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004568:	d004      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800456a:	f240 11e7 	movw	r1, #487	@ 0x1e7
 800456e:	489e      	ldr	r0, [pc, #632]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004570:	f7fc fff4 	bl	800155c <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004574:	4b9d      	ldr	r3, [pc, #628]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004582:	499a      	ldr	r1, [pc, #616]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01d      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00e      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a6:	d009      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b0:	d004      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80045b2:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80045b6:	488c      	ldr	r0, [pc, #560]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80045b8:	f7fc ffd0 	bl	800155c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045bc:	4b8b      	ldr	r3, [pc, #556]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ca:	4988      	ldr	r1, [pc, #544]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01d      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00e      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ee:	d009      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f8:	d004      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80045fa:	f240 11fb 	movw	r1, #507	@ 0x1fb
 80045fe:	487a      	ldr	r0, [pc, #488]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004600:	f7fc ffac 	bl	800155c <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004604:	4b79      	ldr	r3, [pc, #484]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004612:	4976      	ldr	r1, [pc, #472]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01d      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00e      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004636:	d009      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004640:	d004      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004642:	f240 2107 	movw	r1, #519	@ 0x207
 8004646:	4868      	ldr	r0, [pc, #416]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004648:	f7fc ff88 	bl	800155c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800464c:	4b67      	ldr	r3, [pc, #412]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004652:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	4964      	ldr	r1, [pc, #400]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d040      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d013      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800467e:	d00e      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004688:	d009      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800468e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004692:	d004      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004694:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8004698:	4853      	ldr	r0, [pc, #332]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800469a:	f7fc ff5f 	bl	800155c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800469e:	4b53      	ldr	r3, [pc, #332]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ac:	494f      	ldr	r1, [pc, #316]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046bc:	d106      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046be:	4b4b      	ldr	r3, [pc, #300]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4a4a      	ldr	r2, [pc, #296]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046c8:	60d3      	str	r3, [r2, #12]
 80046ca:	e011      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3304      	adds	r3, #4
 80046da:	2101      	movs	r1, #1
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 f931 	bl	8004944 <RCCEx_PLLSAI1_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d040      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800470c:	d00e      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x764>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004716:	d009      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004720:	d004      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x764>
 8004722:	f240 2141 	movw	r1, #577	@ 0x241
 8004726:	4830      	ldr	r0, [pc, #192]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8004728:	f7fc ff18 	bl	800155c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800472c:	4b2f      	ldr	r3, [pc, #188]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004732:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473a:	492c      	ldr	r1, [pc, #176]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800474a:	d106      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474c:	4b27      	ldr	r3, [pc, #156]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a26      	ldr	r2, [pc, #152]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004756:	60d3      	str	r3, [r2, #12]
 8004758:	e011      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004762:	d10c      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f8ea 	bl	8004944 <RCCEx_PLLSAI1_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d044      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004796:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800479a:	d00e      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047a4:	d009      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80047ae:	d004      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80047b0:	f240 2166 	movw	r1, #614	@ 0x266
 80047b4:	480c      	ldr	r0, [pc, #48]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80047b6:	f7fc fed1 	bl	800155c <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ba:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c8:	4908      	ldr	r1, [pc, #32]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047d8:	d10a      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047da:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4a03      	ldr	r2, [pc, #12]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80047e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047e4:	60d3      	str	r3, [r2, #12]
 80047e6:	e015      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80047e8:	08009094 	.word	0x08009094
 80047ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2101      	movs	r1, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f89f 	bl	8004944 <RCCEx_PLLSAI1_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d047      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004824:	2b00      	cmp	r3, #0
 8004826:	d013      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800482c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004830:	d00e      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800483a:	d009      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004840:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004844:	d004      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8004846:	f240 2186 	movw	r1, #646	@ 0x286
 800484a:	483c      	ldr	r0, [pc, #240]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800484c:	f7fc fe86 	bl	800155c <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004850:	4b3b      	ldr	r3, [pc, #236]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800485e:	4938      	ldr	r1, [pc, #224]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800486a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800486e:	d10d      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	2102      	movs	r1, #2
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f864 	bl	8004944 <RCCEx_PLLSAI1_Config>
 800487c:	4603      	mov	r3, r0
 800487e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d014      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8004886:	7cfb      	ldrb	r3, [r7, #19]
 8004888:	74bb      	strb	r3, [r7, #18]
 800488a:	e011      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004894:	d10c      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3320      	adds	r3, #32
 800489a:	2102      	movs	r1, #2
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f9d1 	bl	8004c44 <RCCEx_PLLSAI2_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d018      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048cc:	d004      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80048ce:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80048d2:	481a      	ldr	r0, [pc, #104]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80048d4:	f7fc fe42 	bl	800155c <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048d8:	4b19      	ldr	r3, [pc, #100]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048e6:	4916      	ldr	r1, [pc, #88]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01b      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800490a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800490e:	d004      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004910:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8004914:	4809      	ldr	r0, [pc, #36]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8004916:	f7fc fe21 	bl	800155c <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800491a:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004920:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800492a:	4905      	ldr	r1, [pc, #20]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004932:	7cbb      	ldrb	r3, [r7, #18]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	08009094 	.word	0x08009094
 8004940:	40021000 	.word	0x40021000

08004944 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d010      	beq.n	800497c <RCCEx_PLLSAI1_Config+0x38>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d00c      	beq.n	800497c <RCCEx_PLLSAI1_Config+0x38>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d008      	beq.n	800497c <RCCEx_PLLSAI1_Config+0x38>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b03      	cmp	r3, #3
 8004970:	d004      	beq.n	800497c <RCCEx_PLLSAI1_Config+0x38>
 8004972:	f640 3162 	movw	r1, #2914	@ 0xb62
 8004976:	4887      	ldr	r0, [pc, #540]	@ (8004b94 <RCCEx_PLLSAI1_Config+0x250>)
 8004978:	f7fc fdf0 	bl	800155c <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <RCCEx_PLLSAI1_Config+0x48>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d904      	bls.n	8004996 <RCCEx_PLLSAI1_Config+0x52>
 800498c:	f640 3163 	movw	r1, #2915	@ 0xb63
 8004990:	4880      	ldr	r0, [pc, #512]	@ (8004b94 <RCCEx_PLLSAI1_Config+0x250>)
 8004992:	f7fc fde3 	bl	800155c <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b07      	cmp	r3, #7
 800499c:	d903      	bls.n	80049a6 <RCCEx_PLLSAI1_Config+0x62>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b56      	cmp	r3, #86	@ 0x56
 80049a4:	d904      	bls.n	80049b0 <RCCEx_PLLSAI1_Config+0x6c>
 80049a6:	f640 3164 	movw	r1, #2916	@ 0xb64
 80049aa:	487a      	ldr	r0, [pc, #488]	@ (8004b94 <RCCEx_PLLSAI1_Config+0x250>)
 80049ac:	f7fc fdd6 	bl	800155c <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0x90>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0x90>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0xa0>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80049dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <RCCEx_PLLSAI1_Config+0xaa>
 80049e4:	f640 3165 	movw	r1, #2917	@ 0xb65
 80049e8:	486a      	ldr	r0, [pc, #424]	@ (8004b94 <RCCEx_PLLSAI1_Config+0x250>)
 80049ea:	f7fc fdb7 	bl	800155c <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d018      	beq.n	8004a2c <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049fa:	4b67      	ldr	r3, [pc, #412]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0203 	and.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d10d      	bne.n	8004a26 <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a12:	4b61      	ldr	r3, [pc, #388]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
       ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d047      	beq.n	8004ab6 <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
 8004a2a:	e044      	b.n	8004ab6 <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d018      	beq.n	8004a66 <RCCEx_PLLSAI1_Config+0x122>
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d825      	bhi.n	8004a84 <RCCEx_PLLSAI1_Config+0x140>
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d002      	beq.n	8004a42 <RCCEx_PLLSAI1_Config+0xfe>
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d009      	beq.n	8004a54 <RCCEx_PLLSAI1_Config+0x110>
 8004a40:	e020      	b.n	8004a84 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a42:	4b55      	ldr	r3, [pc, #340]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11d      	bne.n	8004a8a <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a52:	e01a      	b.n	8004a8a <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a54:	4b50      	ldr	r3, [pc, #320]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d116      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a64:	e013      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a66:	4b4c      	ldr	r3, [pc, #304]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a72:	4b49      	ldr	r3, [pc, #292]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a82:	e006      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      break;
 8004a88:	e004      	b.n	8004a94 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10d      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6819      	ldr	r1, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	4939      	ldr	r1, [pc, #228]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f040 80ba 	bne.w	8004c32 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004abe:	4b36      	ldr	r3, [pc, #216]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a35      	ldr	r2, [pc, #212]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004ac4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aca:	f7fd fabf 	bl	800204c <HAL_GetTick>
 8004ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ad0:	e009      	b.n	8004ae6 <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad2:	f7fd fabb 	bl	800204c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d902      	bls.n	8004ae6 <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae4:	e005      	b.n	8004af2 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1ef      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 809c 	bne.w	8004c32 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11e      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	2b07      	cmp	r3, #7
 8004b06:	d008      	beq.n	8004b1a <RCCEx_PLLSAI1_Config+0x1d6>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b11      	cmp	r3, #17
 8004b0e:	d004      	beq.n	8004b1a <RCCEx_PLLSAI1_Config+0x1d6>
 8004b10:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8004b14:	481f      	ldr	r0, [pc, #124]	@ (8004b94 <RCCEx_PLLSAI1_Config+0x250>)
 8004b16:	f7fc fd21 	bl	800155c <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6892      	ldr	r2, [r2, #8]
 8004b2a:	0211      	lsls	r1, r2, #8
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68d2      	ldr	r2, [r2, #12]
 8004b30:	0912      	lsrs	r2, r2, #4
 8004b32:	0452      	lsls	r2, r2, #17
 8004b34:	430a      	orrs	r2, r1
 8004b36:	4918      	ldr	r1, [pc, #96]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	610b      	str	r3, [r1, #16]
 8004b3c:	e055      	b.n	8004bea <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d12b      	bne.n	8004b9c <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d010      	beq.n	8004b6e <RCCEx_PLLSAI1_Config+0x22a>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d00c      	beq.n	8004b6e <RCCEx_PLLSAI1_Config+0x22a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b06      	cmp	r3, #6
 8004b5a:	d008      	beq.n	8004b6e <RCCEx_PLLSAI1_Config+0x22a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d004      	beq.n	8004b6e <RCCEx_PLLSAI1_Config+0x22a>
 8004b64:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8004b68:	480a      	ldr	r0, [pc, #40]	@ (8004b94 <RCCEx_PLLSAI1_Config+0x250>)
 8004b6a:	f7fc fcf7 	bl	800155c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b76:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6892      	ldr	r2, [r2, #8]
 8004b7e:	0211      	lsls	r1, r2, #8
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6912      	ldr	r2, [r2, #16]
 8004b84:	0852      	lsrs	r2, r2, #1
 8004b86:	3a01      	subs	r2, #1
 8004b88:	0552      	lsls	r2, r2, #21
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	4902      	ldr	r1, [pc, #8]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x254>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	610b      	str	r3, [r1, #16]
 8004b92:	e02a      	b.n	8004bea <RCCEx_PLLSAI1_Config+0x2a6>
 8004b94:	08009094 	.word	0x08009094
 8004b98:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d010      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0x282>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d00c      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0x282>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d008      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0x282>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d004      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0x282>
 8004bbc:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8004bc0:	481e      	ldr	r0, [pc, #120]	@ (8004c3c <RCCEx_PLLSAI1_Config+0x2f8>)
 8004bc2:	f7fc fccb 	bl	800155c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c40 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004bce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6892      	ldr	r2, [r2, #8]
 8004bd6:	0211      	lsls	r1, r2, #8
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6952      	ldr	r2, [r2, #20]
 8004bdc:	0852      	lsrs	r2, r2, #1
 8004bde:	3a01      	subs	r2, #1
 8004be0:	0652      	lsls	r2, r2, #25
 8004be2:	430a      	orrs	r2, r1
 8004be4:	4916      	ldr	r1, [pc, #88]	@ (8004c40 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bea:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a14      	ldr	r2, [pc, #80]	@ (8004c40 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004bf0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf6:	f7fd fa29 	bl	800204c <HAL_GetTick>
 8004bfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bfc:	e009      	b.n	8004c12 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bfe:	f7fd fa25 	bl	800204c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d902      	bls.n	8004c12 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	73fb      	strb	r3, [r7, #15]
          break;
 8004c10:	e005      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ef      	beq.n	8004bfe <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c24:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	4904      	ldr	r1, [pc, #16]	@ (8004c40 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	08009094 	.word	0x08009094
 8004c40:	40021000 	.word	0x40021000

08004c44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d010      	beq.n	8004c7c <RCCEx_PLLSAI2_Config+0x38>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d00c      	beq.n	8004c7c <RCCEx_PLLSAI2_Config+0x38>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d008      	beq.n	8004c7c <RCCEx_PLLSAI2_Config+0x38>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d004      	beq.n	8004c7c <RCCEx_PLLSAI2_Config+0x38>
 8004c72:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8004c76:	4896      	ldr	r0, [pc, #600]	@ (8004ed0 <RCCEx_PLLSAI2_Config+0x28c>)
 8004c78:	f7fc fc70 	bl	800155c <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <RCCEx_PLLSAI2_Config+0x48>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d904      	bls.n	8004c96 <RCCEx_PLLSAI2_Config+0x52>
 8004c8c:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8004c90:	488f      	ldr	r0, [pc, #572]	@ (8004ed0 <RCCEx_PLLSAI2_Config+0x28c>)
 8004c92:	f7fc fc63 	bl	800155c <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b07      	cmp	r3, #7
 8004c9c:	d903      	bls.n	8004ca6 <RCCEx_PLLSAI2_Config+0x62>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b56      	cmp	r3, #86	@ 0x56
 8004ca4:	d904      	bls.n	8004cb0 <RCCEx_PLLSAI2_Config+0x6c>
 8004ca6:	f640 4131 	movw	r1, #3121	@ 0xc31
 8004caa:	4889      	ldr	r0, [pc, #548]	@ (8004ed0 <RCCEx_PLLSAI2_Config+0x28c>)
 8004cac:	f7fc fc56 	bl	800155c <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d105      	bne.n	8004cc8 <RCCEx_PLLSAI2_Config+0x84>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <RCCEx_PLLSAI2_Config+0x94>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <RCCEx_PLLSAI2_Config+0x9e>
 8004cd8:	f640 4132 	movw	r1, #3122	@ 0xc32
 8004cdc:	487c      	ldr	r0, [pc, #496]	@ (8004ed0 <RCCEx_PLLSAI2_Config+0x28c>)
 8004cde:	f7fc fc3d 	bl	800155c <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d018      	beq.n	8004d20 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cee:	4b79      	ldr	r3, [pc, #484]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0203 	and.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d10d      	bne.n	8004d1a <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
       ||
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d06:	4b73      	ldr	r3, [pc, #460]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
       ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d047      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
 8004d1e:	e044      	b.n	8004daa <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d018      	beq.n	8004d5a <RCCEx_PLLSAI2_Config+0x116>
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d825      	bhi.n	8004d78 <RCCEx_PLLSAI2_Config+0x134>
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d002      	beq.n	8004d36 <RCCEx_PLLSAI2_Config+0xf2>
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d009      	beq.n	8004d48 <RCCEx_PLLSAI2_Config+0x104>
 8004d34:	e020      	b.n	8004d78 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d36:	4b67      	ldr	r3, [pc, #412]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11d      	bne.n	8004d7e <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d46:	e01a      	b.n	8004d7e <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d48:	4b62      	ldr	r3, [pc, #392]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d116      	bne.n	8004d82 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d58:	e013      	b.n	8004d82 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d5a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d66:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d76:	e006      	b.n	8004d86 <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e004      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004d86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d8e:	4b51      	ldr	r3, [pc, #324]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	430b      	orrs	r3, r1
 8004da4:	494b      	ldr	r1, [pc, #300]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f040 808a 	bne.w	8004ec6 <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004db2:	4b48      	ldr	r3, [pc, #288]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a47      	ldr	r2, [pc, #284]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbe:	f7fd f945 	bl	800204c <HAL_GetTick>
 8004dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dc4:	e009      	b.n	8004dda <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dc6:	f7fd f941 	bl	800204c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d902      	bls.n	8004dda <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	73fb      	strb	r3, [r7, #15]
        break;
 8004dd8:	e005      	b.n	8004de6 <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dda:	4b3e      	ldr	r3, [pc, #248]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ef      	bne.n	8004dc6 <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d16c      	bne.n	8004ec6 <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11e      	bne.n	8004e30 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b07      	cmp	r3, #7
 8004df8:	d008      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x1c8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b11      	cmp	r3, #17
 8004e00:	d004      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x1c8>
 8004e02:	f640 4185 	movw	r1, #3205	@ 0xc85
 8004e06:	4832      	ldr	r0, [pc, #200]	@ (8004ed0 <RCCEx_PLLSAI2_Config+0x28c>)
 8004e08:	f7fc fba8 	bl	800155c <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e0c:	4b31      	ldr	r3, [pc, #196]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6892      	ldr	r2, [r2, #8]
 8004e1c:	0211      	lsls	r1, r2, #8
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68d2      	ldr	r2, [r2, #12]
 8004e22:	0912      	lsrs	r2, r2, #4
 8004e24:	0452      	lsls	r2, r2, #17
 8004e26:	430a      	orrs	r2, r1
 8004e28:	492a      	ldr	r1, [pc, #168]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	614b      	str	r3, [r1, #20]
 8004e2e:	e026      	b.n	8004e7e <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d010      	beq.n	8004e5a <RCCEx_PLLSAI2_Config+0x216>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d00c      	beq.n	8004e5a <RCCEx_PLLSAI2_Config+0x216>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d008      	beq.n	8004e5a <RCCEx_PLLSAI2_Config+0x216>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d004      	beq.n	8004e5a <RCCEx_PLLSAI2_Config+0x216>
 8004e50:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8004e54:	481e      	ldr	r0, [pc, #120]	@ (8004ed0 <RCCEx_PLLSAI2_Config+0x28c>)
 8004e56:	f7fc fb81 	bl	800155c <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e62:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6892      	ldr	r2, [r2, #8]
 8004e6a:	0211      	lsls	r1, r2, #8
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6912      	ldr	r2, [r2, #16]
 8004e70:	0852      	lsrs	r2, r2, #1
 8004e72:	3a01      	subs	r2, #1
 8004e74:	0652      	lsls	r2, r2, #25
 8004e76:	430a      	orrs	r2, r1
 8004e78:	4916      	ldr	r1, [pc, #88]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a14      	ldr	r2, [pc, #80]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8a:	f7fd f8df 	bl	800204c <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e90:	e009      	b.n	8004ea6 <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e92:	f7fd f8db 	bl	800204c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d902      	bls.n	8004ea6 <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ea4:	e005      	b.n	8004eb2 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0ef      	beq.n	8004e92 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	4904      	ldr	r1, [pc, #16]	@ (8004ed4 <RCCEx_PLLSAI2_Config+0x290>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	08009094 	.word	0x08009094
 8004ed4:	40021000 	.word	0x40021000

08004ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1dd      	b.n	80052a6 <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7b      	ldr	r2, [pc, #492]	@ (80050dc <HAL_SPI_Init+0x204>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_SPI_Init+0x3a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a79      	ldr	r2, [pc, #484]	@ (80050e0 <HAL_SPI_Init+0x208>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_SPI_Init+0x3a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a78      	ldr	r2, [pc, #480]	@ (80050e4 <HAL_SPI_Init+0x20c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_SPI_Init+0x3a>
 8004f08:	f240 1147 	movw	r1, #327	@ 0x147
 8004f0c:	4876      	ldr	r0, [pc, #472]	@ (80050e8 <HAL_SPI_Init+0x210>)
 8004f0e:	f7fc fb25 	bl	800155c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_SPI_Init+0x56>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f22:	d004      	beq.n	8004f2e <HAL_SPI_Init+0x56>
 8004f24:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004f28:	486f      	ldr	r0, [pc, #444]	@ (80050e8 <HAL_SPI_Init+0x210>)
 8004f2a:	f7fc fb17 	bl	800155c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00e      	beq.n	8004f54 <HAL_SPI_Init+0x7c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f3e:	d009      	beq.n	8004f54 <HAL_SPI_Init+0x7c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f48:	d004      	beq.n	8004f54 <HAL_SPI_Init+0x7c>
 8004f4a:	f240 1149 	movw	r1, #329	@ 0x149
 8004f4e:	4866      	ldr	r0, [pc, #408]	@ (80050e8 <HAL_SPI_Init+0x210>)
 8004f50:	f7fc fb04 	bl	800155c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f5c:	d040      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004f66:	d03b      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8004f70:	d036      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f7a:	d031      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004f84:	d02c      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f8e:	d027      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004f98:	d022      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa2:	d01d      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fac:	d018      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fb6:	d013      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004fc0:	d00e      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fca:	d009      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fd4:	d004      	beq.n	8004fe0 <HAL_SPI_Init+0x108>
 8004fd6:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004fda:	4843      	ldr	r0, [pc, #268]	@ (80050e8 <HAL_SPI_Init+0x210>)
 8004fdc:	f7fc fabe 	bl	800155c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe8:	d00d      	beq.n	8005006 <HAL_SPI_Init+0x12e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_SPI_Init+0x12e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ffa:	d004      	beq.n	8005006 <HAL_SPI_Init+0x12e>
 8004ffc:	f240 114b 	movw	r1, #331	@ 0x14b
 8005000:	4839      	ldr	r0, [pc, #228]	@ (80050e8 <HAL_SPI_Init+0x210>)
 8005002:	f7fc faab 	bl	800155c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500a:	2b08      	cmp	r3, #8
 800500c:	d008      	beq.n	8005020 <HAL_SPI_Init+0x148>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005012:	2b00      	cmp	r3, #0
 8005014:	d004      	beq.n	8005020 <HAL_SPI_Init+0x148>
 8005016:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800501a:	4833      	ldr	r0, [pc, #204]	@ (80050e8 <HAL_SPI_Init+0x210>)
 800501c:	f7fc fa9e 	bl	800155c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d020      	beq.n	800506a <HAL_SPI_Init+0x192>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d01c      	beq.n	800506a <HAL_SPI_Init+0x192>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2b10      	cmp	r3, #16
 8005036:	d018      	beq.n	800506a <HAL_SPI_Init+0x192>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	2b18      	cmp	r3, #24
 800503e:	d014      	beq.n	800506a <HAL_SPI_Init+0x192>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	2b20      	cmp	r3, #32
 8005046:	d010      	beq.n	800506a <HAL_SPI_Init+0x192>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	2b28      	cmp	r3, #40	@ 0x28
 800504e:	d00c      	beq.n	800506a <HAL_SPI_Init+0x192>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	2b30      	cmp	r3, #48	@ 0x30
 8005056:	d008      	beq.n	800506a <HAL_SPI_Init+0x192>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	2b38      	cmp	r3, #56	@ 0x38
 800505e:	d004      	beq.n	800506a <HAL_SPI_Init+0x192>
 8005060:	f240 114d 	movw	r1, #333	@ 0x14d
 8005064:	4820      	ldr	r0, [pc, #128]	@ (80050e8 <HAL_SPI_Init+0x210>)
 8005066:	f7fc fa79 	bl	800155c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <HAL_SPI_Init+0x1ac>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	2b80      	cmp	r3, #128	@ 0x80
 8005078:	d004      	beq.n	8005084 <HAL_SPI_Init+0x1ac>
 800507a:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800507e:	481a      	ldr	r0, [pc, #104]	@ (80050e8 <HAL_SPI_Init+0x210>)
 8005080:	f7fc fa6c 	bl	800155c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_SPI_Init+0x1c6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	2b10      	cmp	r3, #16
 8005092:	d004      	beq.n	800509e <HAL_SPI_Init+0x1c6>
 8005094:	f240 114f 	movw	r1, #335	@ 0x14f
 8005098:	4813      	ldr	r0, [pc, #76]	@ (80050e8 <HAL_SPI_Init+0x210>)
 800509a:	f7fc fa5f 	bl	800155c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d151      	bne.n	800514a <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_SPI_Init+0x1e8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d004      	beq.n	80050c0 <HAL_SPI_Init+0x1e8>
 80050b6:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80050ba:	480b      	ldr	r0, [pc, #44]	@ (80050e8 <HAL_SPI_Init+0x210>)
 80050bc:	f7fc fa4e 	bl	800155c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d011      	beq.n	80050ec <HAL_SPI_Init+0x214>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d00d      	beq.n	80050ec <HAL_SPI_Init+0x214>
 80050d0:	f240 1153 	movw	r1, #339	@ 0x153
 80050d4:	4804      	ldr	r0, [pc, #16]	@ (80050e8 <HAL_SPI_Init+0x210>)
 80050d6:	f7fc fa41 	bl	800155c <assert_failed>
 80050da:	e007      	b.n	80050ec <HAL_SPI_Init+0x214>
 80050dc:	40013000 	.word	0x40013000
 80050e0:	40003800 	.word	0x40003800
 80050e4:	40003c00 	.word	0x40003c00
 80050e8:	080090d0 	.word	0x080090d0

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050f4:	d125      	bne.n	8005142 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d050      	beq.n	80051a0 <HAL_SPI_Init+0x2c8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d04c      	beq.n	80051a0 <HAL_SPI_Init+0x2c8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	2b10      	cmp	r3, #16
 800510c:	d048      	beq.n	80051a0 <HAL_SPI_Init+0x2c8>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b18      	cmp	r3, #24
 8005114:	d044      	beq.n	80051a0 <HAL_SPI_Init+0x2c8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	2b20      	cmp	r3, #32
 800511c:	d040      	beq.n	80051a0 <HAL_SPI_Init+0x2c8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b28      	cmp	r3, #40	@ 0x28
 8005124:	d03c      	beq.n	80051a0 <HAL_SPI_Init+0x2c8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b30      	cmp	r3, #48	@ 0x30
 800512c:	d038      	beq.n	80051a0 <HAL_SPI_Init+0x2c8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b38      	cmp	r3, #56	@ 0x38
 8005134:	d034      	beq.n	80051a0 <HAL_SPI_Init+0x2c8>
 8005136:	f240 1157 	movw	r1, #343	@ 0x157
 800513a:	485d      	ldr	r0, [pc, #372]	@ (80052b0 <HAL_SPI_Init+0x3d8>)
 800513c:	f7fc fa0e 	bl	800155c <assert_failed>
 8005140:	e02e      	b.n	80051a0 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	61da      	str	r2, [r3, #28]
 8005148:	e02a      	b.n	80051a0 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d020      	beq.n	8005194 <HAL_SPI_Init+0x2bc>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b08      	cmp	r3, #8
 8005158:	d01c      	beq.n	8005194 <HAL_SPI_Init+0x2bc>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	2b10      	cmp	r3, #16
 8005160:	d018      	beq.n	8005194 <HAL_SPI_Init+0x2bc>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	2b18      	cmp	r3, #24
 8005168:	d014      	beq.n	8005194 <HAL_SPI_Init+0x2bc>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	2b20      	cmp	r3, #32
 8005170:	d010      	beq.n	8005194 <HAL_SPI_Init+0x2bc>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	2b28      	cmp	r3, #40	@ 0x28
 8005178:	d00c      	beq.n	8005194 <HAL_SPI_Init+0x2bc>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b30      	cmp	r3, #48	@ 0x30
 8005180:	d008      	beq.n	8005194 <HAL_SPI_Init+0x2bc>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	2b38      	cmp	r3, #56	@ 0x38
 8005188:	d004      	beq.n	8005194 <HAL_SPI_Init+0x2bc>
 800518a:	f240 1161 	movw	r1, #353	@ 0x161
 800518e:	4848      	ldr	r0, [pc, #288]	@ (80052b0 <HAL_SPI_Init+0x3d8>)
 8005190:	f7fc f9e4 	bl	800155c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fc fa12 	bl	80015e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051e0:	d902      	bls.n	80051e8 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e002      	b.n	80051ee <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80051f6:	d007      	beq.n	8005208 <HAL_SPI_Init+0x330>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005200:	d002      	beq.n	8005208 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524a:	ea42 0103 	orr.w	r1, r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	0c1b      	lsrs	r3, r3, #16
 8005264:	f003 0204 	and.w	r2, r3, #4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005284:	ea42 0103 	orr.w	r1, r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	080090d0 	.word	0x080090d0

080052b4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <HAL_SPI_Transmit_IT+0x2a>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d2:	d004      	beq.n	80052de <HAL_SPI_Transmit_IT+0x2a>
 80052d4:	f240 6144 	movw	r1, #1604	@ 0x644
 80052d8:	483e      	ldr	r0, [pc, #248]	@ (80053d4 <HAL_SPI_Transmit_IT+0x120>)
 80052da:	f7fc f93f 	bl	800155c <assert_failed>


  if ((pData == NULL) || (Size == 0U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_SPI_Transmit_IT+0x36>
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_SPI_Transmit_IT+0x3a>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e06d      	b.n	80053ca <HAL_SPI_Transmit_IT+0x116>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d001      	beq.n	80052fe <HAL_SPI_Transmit_IT+0x4a>
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
 80052fc:	e065      	b.n	80053ca <HAL_SPI_Transmit_IT+0x116>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_SPI_Transmit_IT+0x58>
 8005308:	2302      	movs	r3, #2
 800530a:	e05e      	b.n	80053ca <HAL_SPI_Transmit_IT+0x116>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2203      	movs	r2, #3
 8005318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005358:	d903      	bls.n	8005362 <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a1e      	ldr	r2, [pc, #120]	@ (80053d8 <HAL_SPI_Transmit_IT+0x124>)
 800535e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005360:	e002      	b.n	8005368 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <HAL_SPI_Transmit_IT+0x128>)
 8005366:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005370:	d10f      	bne.n	8005392 <HAL_SPI_Transmit_IT+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005380:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005390:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b40      	cmp	r3, #64	@ 0x40
 800539e:	d007      	beq.n	80053b0 <HAL_SPI_Transmit_IT+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053ae:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80053c6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	080090d0 	.word	0x080090d0
 80053d8:	08005ded 	.word	0x08005ded
 80053dc:	08005da7 	.word	0x08005da7

080053e0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <HAL_SPI_Receive_DMA+0x20>
 80053f6:	f240 71e2 	movw	r1, #2018	@ 0x7e2
 80053fa:	488f      	ldr	r0, [pc, #572]	@ (8005638 <HAL_SPI_Receive_DMA+0x258>)
 80053fc:	f7fc f8ae 	bl	800155c <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <HAL_SPI_Receive_DMA+0x30>
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
 800540e:	e10e      	b.n	800562e <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d119      	bne.n	800544c <HAL_SPI_Receive_DMA+0x6c>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005420:	d114      	bne.n	800544c <HAL_SPI_Receive_DMA+0x6c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2204      	movs	r2, #4
 8005426:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <HAL_SPI_Receive_DMA+0x5c>
 8005432:	f240 71ee 	movw	r1, #2030	@ 0x7ee
 8005436:	4880      	ldr	r0, [pc, #512]	@ (8005638 <HAL_SPI_Receive_DMA+0x258>)
 8005438:	f7fc f890 	bl	800155c <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f900 	bl	8005648 <HAL_SPI_TransmitReceive_DMA>
 8005448:	4603      	mov	r3, r0
 800544a:	e0f0      	b.n	800562e <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_SPI_Receive_DMA+0x78>
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_SPI_Receive_DMA+0x7c>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0e8      	b.n	800562e <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_SPI_Receive_DMA+0x8a>
 8005466:	2302      	movs	r3, #2
 8005468:	e0e1      	b.n	800562e <HAL_SPI_Receive_DMA+0x24e>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2204      	movs	r2, #4
 8005476:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	88fa      	ldrh	r2, [r7, #6]
 800548a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	88fa      	ldrh	r2, [r7, #6]
 8005492:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b6:	d10f      	bne.n	80054d8 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054e6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054f0:	d908      	bls.n	8005504 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	e042      	b.n	800558a <HAL_SPI_Receive_DMA+0x1aa>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005512:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551e:	d134      	bne.n	800558a <HAL_SPI_Receive_DMA+0x1aa>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800552e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005536:	b29b      	uxth	r3, r3
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d111      	bne.n	8005564 <HAL_SPI_Receive_DMA+0x184>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800554e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005556:	b29b      	uxth	r3, r3
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005562:	e012      	b.n	800558a <HAL_SPI_Receive_DMA+0x1aa>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005572:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800557a:	b29b      	uxth	r3, r3
 800557c:	085b      	lsrs	r3, r3, #1
 800557e:	b29b      	uxth	r3, r3
 8005580:	3301      	adds	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	4a2b      	ldr	r2, [pc, #172]	@ (800563c <HAL_SPI_Receive_DMA+0x25c>)
 8005590:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005596:	4a2a      	ldr	r2, [pc, #168]	@ (8005640 <HAL_SPI_Receive_DMA+0x260>)
 8005598:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559e:	4a29      	ldr	r2, [pc, #164]	@ (8005644 <HAL_SPI_Receive_DMA+0x264>)
 80055a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a6:	2200      	movs	r2, #0
 80055a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	4619      	mov	r1, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80055c4:	f7fd f846 	bl	8002654 <HAL_DMA_Start_IT>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <HAL_SPI_Receive_DMA+0x206>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d2:	f043 0210 	orr.w	r2, r3, #16
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e023      	b.n	800562e <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f0:	2b40      	cmp	r3, #64	@ 0x40
 80055f2:	d007      	beq.n	8005604 <HAL_SPI_Receive_DMA+0x224>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005602:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0220 	orr.w	r2, r2, #32
 800561a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	080090d0 	.word	0x080090d0
 800563c:	08005d05 	.word	0x08005d05
 8005640:	08005bcd 	.word	0x08005bcd
 8005644:	08005d3d 	.word	0x08005d3d

08005648 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <HAL_SPI_TransmitReceive_DMA+0x20>
 800565e:	f640 0172 	movw	r1, #2162	@ 0x872
 8005662:	487f      	ldr	r0, [pc, #508]	@ (8005860 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8005664:	f7fb ff7a 	bl	800155c <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566c:	2b00      	cmp	r3, #0
 800566e:	d104      	bne.n	800567a <HAL_SPI_TransmitReceive_DMA+0x32>
 8005670:	f640 0173 	movw	r1, #2163	@ 0x873
 8005674:	487a      	ldr	r0, [pc, #488]	@ (8005860 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8005676:	f7fb ff71 	bl	800155c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <HAL_SPI_TransmitReceive_DMA+0x44>
 8005682:	f640 0176 	movw	r1, #2166	@ 0x876
 8005686:	4876      	ldr	r0, [pc, #472]	@ (8005860 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8005688:	f7fb ff68 	bl	800155c <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005692:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d00c      	beq.n	80056ba <HAL_SPI_TransmitReceive_DMA+0x72>
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056a6:	d106      	bne.n	80056b6 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <HAL_SPI_TransmitReceive_DMA+0x6e>
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d001      	beq.n	80056ba <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
 80056b8:	e15f      	b.n	800597a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <HAL_SPI_TransmitReceive_DMA+0x84>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_TransmitReceive_DMA+0x84>
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e154      	b.n	800597a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_SPI_TransmitReceive_DMA+0x96>
 80056da:	2302      	movs	r3, #2
 80056dc:	e14d      	b.n	800597a <HAL_SPI_TransmitReceive_DMA+0x332>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d003      	beq.n	80056fa <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2205      	movs	r2, #5
 80056f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	887a      	ldrh	r2, [r7, #2]
 800570a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	887a      	ldrh	r2, [r7, #2]
 800571c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	887a      	ldrh	r2, [r7, #2]
 8005724:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8005742:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800574c:	d908      	bls.n	8005760 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800575c:	605a      	str	r2, [r3, #4]
 800575e:	e06f      	b.n	8005840 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800576e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577a:	d126      	bne.n	80057ca <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10f      	bne.n	80057a8 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005796:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800579c:	b29b      	uxth	r3, r3
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057a6:	e010      	b.n	80057ca <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057b6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3301      	adds	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d4:	d134      	bne.n	8005840 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057e4:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d111      	bne.n	800581a <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005804:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800580c:	b29b      	uxth	r3, r3
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005818:	e012      	b.n	8005840 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005828:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005830:	b29b      	uxth	r3, r3
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	3301      	adds	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b04      	cmp	r3, #4
 800584a:	d10f      	bne.n	800586c <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005850:	4a04      	ldr	r2, [pc, #16]	@ (8005864 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8005852:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	4a03      	ldr	r2, [pc, #12]	@ (8005868 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800585a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800585c:	e00e      	b.n	800587c <HAL_SPI_TransmitReceive_DMA+0x234>
 800585e:	bf00      	nop
 8005860:	080090d0 	.word	0x080090d0
 8005864:	08005d05 	.word	0x08005d05
 8005868:	08005bcd 	.word	0x08005bcd
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005870:	4a44      	ldr	r2, [pc, #272]	@ (8005984 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8005872:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005878:	4a43      	ldr	r2, [pc, #268]	@ (8005988 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800587a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005880:	4a42      	ldr	r2, [pc, #264]	@ (800598c <HAL_SPI_TransmitReceive_DMA+0x344>)
 8005882:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005888:	2200      	movs	r2, #0
 800588a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	4619      	mov	r1, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80058a6:	f7fc fed5 	bl	8002654 <HAL_DMA_Start_IT>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b4:	f043 0210 	orr.w	r2, r3, #16
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e058      	b.n	800597a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e4:	2200      	movs	r2, #0
 80058e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ec:	2200      	movs	r2, #0
 80058ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f4:	2200      	movs	r2, #0
 80058f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005900:	4619      	mov	r1, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005910:	f7fc fea0 	bl	8002654 <HAL_DMA_Start_IT>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591e:	f043 0210 	orr.w	r2, r3, #16
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e023      	b.n	800597a <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593c:	2b40      	cmp	r3, #64	@ 0x40
 800593e:	d007      	beq.n	8005950 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800594e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0220 	orr.w	r2, r2, #32
 8005966:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0202 	orr.w	r2, r2, #2
 8005976:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	08005d21 	.word	0x08005d21
 8005988:	08005c75 	.word	0x08005c75
 800598c:	08005d3d 	.word	0x08005d3d

08005990 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	099b      	lsrs	r3, r3, #6
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10f      	bne.n	80059d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	099b      	lsrs	r3, r3, #6
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
    return;
 80059d2:	e0d7      	b.n	8005b84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	085b      	lsrs	r3, r3, #1
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_SPI_IRQHandler+0x66>
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	09db      	lsrs	r3, r3, #7
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d004      	beq.n	80059f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4798      	blx	r3
    return;
 80059f4:	e0c6      	b.n	8005b84 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10c      	bne.n	8005a1c <HAL_SPI_IRQHandler+0x8c>
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80b4 	beq.w	8005b84 <HAL_SPI_IRQHandler+0x1f4>
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80ad 	beq.w	8005b84 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	099b      	lsrs	r3, r3, #6
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d023      	beq.n	8005a7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	d011      	beq.n	8005a66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a46:	f043 0204 	orr.w	r2, r3, #4
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	e00b      	b.n	8005a7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	693b      	ldr	r3, [r7, #16]
        return;
 8005a7c:	e082      	b.n	8005b84 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d014      	beq.n	8005ab4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac4:	f043 0208 	orr.w	r2, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005acc:	2300      	movs	r3, #0
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60bb      	str	r3, [r7, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d04f      	beq.n	8005b82 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005af0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <HAL_SPI_IRQHandler+0x17e>
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d034      	beq.n	8005b78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0203 	bic.w	r2, r2, #3
 8005b1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d011      	beq.n	8005b4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	4a18      	ldr	r2, [pc, #96]	@ (8005b8c <HAL_SPI_IRQHandler+0x1fc>)
 8005b2c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fc fe3a 	bl	80027ac <HAL_DMA_Abort_IT>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b56:	4a0d      	ldr	r2, [pc, #52]	@ (8005b8c <HAL_SPI_IRQHandler+0x1fc>)
 8005b58:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fc fe24 	bl	80027ac <HAL_DMA_Abort_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005b76:	e003      	b.n	8005b80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f81d 	bl	8005bb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b7e:	e000      	b.n	8005b82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005b80:	bf00      	nop
    return;
 8005b82:	bf00      	nop
  }
}
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08005d7d 	.word	0x08005d7d

08005b90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bda:	f7fc fa37 	bl	800204c <HAL_GetTick>
 8005bde:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d03c      	beq.n	8005c68 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0220 	bic.w	r2, r2, #32
 8005bfc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10d      	bne.n	8005c22 <SPI_DMAReceiveCplt+0x56>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c0e:	d108      	bne.n	8005c22 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0203 	bic.w	r2, r2, #3
 8005c1e:	605a      	str	r2, [r3, #4]
 8005c20:	e007      	b.n	8005c32 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	2164      	movs	r1, #100	@ 0x64
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fa18 	bl	800606c <SPI_EndRxTransaction>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff ffa9 	bl	8005bb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c66:	e002      	b.n	8005c6e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7fb faf3 	bl	8001254 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c82:	f7fc f9e3 	bl	800204c <HAL_GetTick>
 8005c86:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d030      	beq.n	8005cf8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0220 	bic.w	r2, r2, #32
 8005ca4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	2164      	movs	r1, #100	@ 0x64
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 fa36 	bl	800611c <SPI_EndRxTxTransaction>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0203 	bic.w	r2, r2, #3
 8005cd0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff ff61 	bl	8005bb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005cf6:	e002      	b.n	8005cfe <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff ff49 	bl	8005b90 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7fb fa82 	bl	800121c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff ff38 	bl	8005ba4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0203 	bic.w	r2, r2, #3
 8005d58:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d5e:	f043 0210 	orr.w	r2, r3, #16
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff ff22 	bl	8005bb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ff0d 	bl	8005bb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	7812      	ldrb	r2, [r2, #0]
 8005dba:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9e2 	bl	80061a8 <SPI_CloseTx_ISR>
  }
}
 8005de4:	bf00      	nop
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f9c0 	bl	80061a8 <SPI_CloseTx_ISR>
  }
}
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e40:	f7fc f904 	bl	800204c <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e50:	f7fc f8fc 	bl	800204c <HAL_GetTick>
 8005e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e56:	4b39      	ldr	r3, [pc, #228]	@ (8005f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	015b      	lsls	r3, r3, #5
 8005e5c:	0d1b      	lsrs	r3, r3, #20
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
 8005e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e66:	e054      	b.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d050      	beq.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e70:	f7fc f8ec 	bl	800204c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d902      	bls.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d13d      	bne.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e9e:	d111      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea8:	d004      	beq.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb2:	d107      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ecc:	d10f      	bne.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e017      	b.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d19b      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000004 	.word	0x20000004

08005f40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	@ 0x28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f52:	f7fc f87b 	bl	800204c <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	4413      	add	r3, r2
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f62:	f7fc f873 	bl	800204c <HAL_GetTick>
 8005f66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f70:	4b3d      	ldr	r3, [pc, #244]	@ (8006068 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	00da      	lsls	r2, r3, #3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	0d1b      	lsrs	r3, r3, #20
 8005f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f82:	fb02 f303 	mul.w	r3, r2, r3
 8005f86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f88:	e060      	b.n	800604c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f90:	d107      	bne.n	8005fa2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d050      	beq.n	800604c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005faa:	f7fc f84f 	bl	800204c <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d902      	bls.n	8005fc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d13d      	bne.n	800603c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fd8:	d111      	bne.n	8005ffe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe2:	d004      	beq.n	8005fee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fec:	d107      	bne.n	8005ffe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ffc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006006:	d10f      	bne.n	8006028 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006026:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e010      	b.n	800605e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	3b01      	subs	r3, #1
 800604a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4013      	ands	r3, r2
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d196      	bne.n	8005f8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3728      	adds	r7, #40	@ 0x28
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000004 	.word	0x20000004

0800606c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006080:	d111      	bne.n	80060a6 <SPI_EndRxTransaction+0x3a>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800608a:	d004      	beq.n	8006096 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006094:	d107      	bne.n	80060a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2180      	movs	r1, #128	@ 0x80
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff febd 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e023      	b.n	8006114 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060d4:	d11d      	bne.n	8006112 <SPI_EndRxTransaction+0xa6>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060de:	d004      	beq.n	80060ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e8:	d113      	bne.n	8006112 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff ff22 	bl	8005f40 <SPI_WaitFifoStateUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006106:	f043 0220 	orr.w	r2, r3, #32
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e000      	b.n	8006114 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2200      	movs	r2, #0
 8006130:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff ff03 	bl	8005f40 <SPI_WaitFifoStateUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006144:	f043 0220 	orr.w	r2, r3, #32
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e027      	b.n	80061a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	2180      	movs	r1, #128	@ 0x80
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fe68 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800616a:	f043 0220 	orr.w	r2, r3, #32
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e014      	b.n	80061a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2200      	movs	r2, #0
 800617e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff fedc 	bl	8005f40 <SPI_WaitFifoStateUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e000      	b.n	80061a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b0:	f7fb ff4c 	bl	800204c <HAL_GetTick>
 80061b4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	2164      	movs	r1, #100	@ 0x64
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff ffa6 	bl	800611c <SPI_EndRxTxTransaction>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061da:	f043 0220 	orr.w	r2, r3, #32
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	60bb      	str	r3, [r7, #8]
 80061fe:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fcd1 	bl	8005bb8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006216:	e002      	b.n	800621e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fb f837 	bl	800128c <HAL_SPI_TxCpltCallback>
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e0e6      	b.n	8006408 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a74      	ldr	r2, [pc, #464]	@ (8006410 <HAL_TIM_Base_Init+0x1e8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d036      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800624c:	d031      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a70      	ldr	r2, [pc, #448]	@ (8006414 <HAL_TIM_Base_Init+0x1ec>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d02c      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a6e      	ldr	r2, [pc, #440]	@ (8006418 <HAL_TIM_Base_Init+0x1f0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d027      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a6d      	ldr	r2, [pc, #436]	@ (800641c <HAL_TIM_Base_Init+0x1f4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d022      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a6b      	ldr	r2, [pc, #428]	@ (8006420 <HAL_TIM_Base_Init+0x1f8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01d      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a6a      	ldr	r2, [pc, #424]	@ (8006424 <HAL_TIM_Base_Init+0x1fc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d018      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a68      	ldr	r2, [pc, #416]	@ (8006428 <HAL_TIM_Base_Init+0x200>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a67      	ldr	r2, [pc, #412]	@ (800642c <HAL_TIM_Base_Init+0x204>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a65      	ldr	r2, [pc, #404]	@ (8006430 <HAL_TIM_Base_Init+0x208>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a64      	ldr	r2, [pc, #400]	@ (8006434 <HAL_TIM_Base_Init+0x20c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_TIM_Base_Init+0x8a>
 80062a8:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80062ac:	4862      	ldr	r0, [pc, #392]	@ (8006438 <HAL_TIM_Base_Init+0x210>)
 80062ae:	f7fb f955 	bl	800155c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d014      	beq.n	80062e4 <HAL_TIM_Base_Init+0xbc>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d010      	beq.n	80062e4 <HAL_TIM_Base_Init+0xbc>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d00c      	beq.n	80062e4 <HAL_TIM_Base_Init+0xbc>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b40      	cmp	r3, #64	@ 0x40
 80062d0:	d008      	beq.n	80062e4 <HAL_TIM_Base_Init+0xbc>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b60      	cmp	r3, #96	@ 0x60
 80062d8:	d004      	beq.n	80062e4 <HAL_TIM_Base_Init+0xbc>
 80062da:	f240 1117 	movw	r1, #279	@ 0x117
 80062de:	4856      	ldr	r0, [pc, #344]	@ (8006438 <HAL_TIM_Base_Init+0x210>)
 80062e0:	f7fb f93c 	bl	800155c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00e      	beq.n	800630a <HAL_TIM_Base_Init+0xe2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f4:	d009      	beq.n	800630a <HAL_TIM_Base_Init+0xe2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062fe:	d004      	beq.n	800630a <HAL_TIM_Base_Init+0xe2>
 8006300:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006304:	484c      	ldr	r0, [pc, #304]	@ (8006438 <HAL_TIM_Base_Init+0x210>)
 8006306:	f7fb f929 	bl	800155c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006312:	d004      	beq.n	800631e <HAL_TIM_Base_Init+0xf6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a40      	ldr	r2, [pc, #256]	@ (800641c <HAL_TIM_Base_Init+0x1f4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d107      	bne.n	800632e <HAL_TIM_Base_Init+0x106>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	bf14      	ite	ne
 8006326:	2301      	movne	r3, #1
 8006328:	2300      	moveq	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	e00e      	b.n	800634c <HAL_TIM_Base_Init+0x124>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d006      	beq.n	8006344 <HAL_TIM_Base_Init+0x11c>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800633e:	d201      	bcs.n	8006344 <HAL_TIM_Base_Init+0x11c>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_TIM_Base_Init+0x11e>
 8006344:	2300      	movs	r3, #0
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d104      	bne.n	800635a <HAL_TIM_Base_Init+0x132>
 8006350:	f240 1119 	movw	r1, #281	@ 0x119
 8006354:	4838      	ldr	r0, [pc, #224]	@ (8006438 <HAL_TIM_Base_Init+0x210>)
 8006356:	f7fb f901 	bl	800155c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <HAL_TIM_Base_Init+0x14c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	2b80      	cmp	r3, #128	@ 0x80
 8006368:	d004      	beq.n	8006374 <HAL_TIM_Base_Init+0x14c>
 800636a:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800636e:	4832      	ldr	r0, [pc, #200]	@ (8006438 <HAL_TIM_Base_Init+0x210>)
 8006370:	f7fb f8f4 	bl	800155c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7fb fcf5 	bl	8001d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f000 fb47 	bl	8006a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40001000 	.word	0x40001000
 8006424:	40001400 	.word	0x40001400
 8006428:	40013400 	.word	0x40013400
 800642c:	40014000 	.word	0x40014000
 8006430:	40014400 	.word	0x40014400
 8006434:	40014800 	.word	0x40014800
 8006438:	08009108 	.word	0x08009108

0800643c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e1b0      	b.n	80067b2 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7f      	ldr	r2, [pc, #508]	@ (8006654 <HAL_TIM_Encoder_Init+0x218>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x5a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006462:	d018      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x5a>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a7b      	ldr	r2, [pc, #492]	@ (8006658 <HAL_TIM_Encoder_Init+0x21c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x5a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a7a      	ldr	r2, [pc, #488]	@ (800665c <HAL_TIM_Encoder_Init+0x220>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x5a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a78      	ldr	r2, [pc, #480]	@ (8006660 <HAL_TIM_Encoder_Init+0x224>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x5a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a77      	ldr	r2, [pc, #476]	@ (8006664 <HAL_TIM_Encoder_Init+0x228>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x5a>
 800648c:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8006490:	4875      	ldr	r0, [pc, #468]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 8006492:	f7fb f863 	bl	800155c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d014      	beq.n	80064c8 <HAL_TIM_Encoder_Init+0x8c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b10      	cmp	r3, #16
 80064a4:	d010      	beq.n	80064c8 <HAL_TIM_Encoder_Init+0x8c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d00c      	beq.n	80064c8 <HAL_TIM_Encoder_Init+0x8c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b40      	cmp	r3, #64	@ 0x40
 80064b4:	d008      	beq.n	80064c8 <HAL_TIM_Encoder_Init+0x8c>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b60      	cmp	r3, #96	@ 0x60
 80064bc:	d004      	beq.n	80064c8 <HAL_TIM_Encoder_Init+0x8c>
 80064be:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80064c2:	4869      	ldr	r0, [pc, #420]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 80064c4:	f7fb f84a 	bl	800155c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <HAL_TIM_Encoder_Init+0xb2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d8:	d009      	beq.n	80064ee <HAL_TIM_Encoder_Init+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064e2:	d004      	beq.n	80064ee <HAL_TIM_Encoder_Init+0xb2>
 80064e4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80064e8:	485f      	ldr	r0, [pc, #380]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 80064ea:	f7fb f837 	bl	800155c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_TIM_Encoder_Init+0xcc>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	2b80      	cmp	r3, #128	@ 0x80
 80064fc:	d004      	beq.n	8006508 <HAL_TIM_Encoder_Init+0xcc>
 80064fe:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8006502:	4859      	ldr	r0, [pc, #356]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 8006504:	f7fb f82a 	bl	800155c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d00c      	beq.n	800652a <HAL_TIM_Encoder_Init+0xee>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d008      	beq.n	800652a <HAL_TIM_Encoder_Init+0xee>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d004      	beq.n	800652a <HAL_TIM_Encoder_Init+0xee>
 8006520:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8006524:	4850      	ldr	r0, [pc, #320]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 8006526:	f7fb f819 	bl	800155c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d00c      	beq.n	800654c <HAL_TIM_Encoder_Init+0x110>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d008      	beq.n	800654c <HAL_TIM_Encoder_Init+0x110>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b03      	cmp	r3, #3
 8006540:	d004      	beq.n	800654c <HAL_TIM_Encoder_Init+0x110>
 8006542:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8006546:	4848      	ldr	r0, [pc, #288]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 8006548:	f7fb f808 	bl	800155c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d00c      	beq.n	800656e <HAL_TIM_Encoder_Init+0x132>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d008      	beq.n	800656e <HAL_TIM_Encoder_Init+0x132>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d004      	beq.n	800656e <HAL_TIM_Encoder_Init+0x132>
 8006564:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8006568:	483f      	ldr	r0, [pc, #252]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 800656a:	f7fa fff7 	bl	800155c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <HAL_TIM_Encoder_Init+0x14c>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d004      	beq.n	8006588 <HAL_TIM_Encoder_Init+0x14c>
 800657e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8006582:	4839      	ldr	r0, [pc, #228]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 8006584:	f7fa ffea 	bl	800155c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_TIM_Encoder_Init+0x166>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d004      	beq.n	80065a2 <HAL_TIM_Encoder_Init+0x166>
 8006598:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800659c:	4832      	ldr	r0, [pc, #200]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 800659e:	f7fa ffdd 	bl	800155c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d010      	beq.n	80065cc <HAL_TIM_Encoder_Init+0x190>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d00c      	beq.n	80065cc <HAL_TIM_Encoder_Init+0x190>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	d008      	beq.n	80065cc <HAL_TIM_Encoder_Init+0x190>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	d004      	beq.n	80065cc <HAL_TIM_Encoder_Init+0x190>
 80065c2:	f640 31ec 	movw	r1, #3052	@ 0xbec
 80065c6:	4828      	ldr	r0, [pc, #160]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 80065c8:	f7fa ffc8 	bl	800155c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d010      	beq.n	80065f6 <HAL_TIM_Encoder_Init+0x1ba>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d00c      	beq.n	80065f6 <HAL_TIM_Encoder_Init+0x1ba>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d008      	beq.n	80065f6 <HAL_TIM_Encoder_Init+0x1ba>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	2b0c      	cmp	r3, #12
 80065ea:	d004      	beq.n	80065f6 <HAL_TIM_Encoder_Init+0x1ba>
 80065ec:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80065f0:	481d      	ldr	r0, [pc, #116]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 80065f2:	f7fa ffb3 	bl	800155c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b0f      	cmp	r3, #15
 80065fc:	d904      	bls.n	8006608 <HAL_TIM_Encoder_Init+0x1cc>
 80065fe:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8006602:	4819      	ldr	r0, [pc, #100]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 8006604:	f7fa ffaa 	bl	800155c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	2b0f      	cmp	r3, #15
 800660e:	d904      	bls.n	800661a <HAL_TIM_Encoder_Init+0x1de>
 8006610:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8006614:	4814      	ldr	r0, [pc, #80]	@ (8006668 <HAL_TIM_Encoder_Init+0x22c>)
 8006616:	f7fa ffa1 	bl	800155c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006622:	d004      	beq.n	800662e <HAL_TIM_Encoder_Init+0x1f2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a0d      	ldr	r2, [pc, #52]	@ (8006660 <HAL_TIM_Encoder_Init+0x224>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d107      	bne.n	800663e <HAL_TIM_Encoder_Init+0x202>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	e01a      	b.n	8006674 <HAL_TIM_Encoder_Init+0x238>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d012      	beq.n	800666c <HAL_TIM_Encoder_Init+0x230>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800664e:	d20d      	bcs.n	800666c <HAL_TIM_Encoder_Init+0x230>
 8006650:	2301      	movs	r3, #1
 8006652:	e00c      	b.n	800666e <HAL_TIM_Encoder_Init+0x232>
 8006654:	40012c00 	.word	0x40012c00
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40013400 	.word	0x40013400
 8006668:	08009108 	.word	0x08009108
 800666c:	2300      	movs	r3, #0
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <HAL_TIM_Encoder_Init+0x246>
 8006678:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800667c:	484f      	ldr	r0, [pc, #316]	@ (80067bc <HAL_TIM_Encoder_Init+0x380>)
 800667e:	f7fa ff6d 	bl	800155c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fb faac 	bl	8001bf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80066b2:	f023 0307 	bic.w	r3, r3, #7
 80066b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f000 f9b6 	bl	8006a34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066f0:	f023 0303 	bic.w	r3, r3, #3
 80066f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	4313      	orrs	r3, r2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800670e:	f023 030c 	bic.w	r3, r3, #12
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800671a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	4313      	orrs	r3, r2
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	011a      	lsls	r2, r3, #4
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	031b      	lsls	r3, r3, #12
 800673e:	4313      	orrs	r3, r2
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800674c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006754:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	4313      	orrs	r3, r2
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	08009108 	.word	0x08009108

080067c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d020      	beq.n	8006824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01b      	beq.n	8006824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0202 	mvn.w	r2, #2
 80067f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f8f3 	bl	80069f6 <HAL_TIM_IC_CaptureCallback>
 8006810:	e005      	b.n	800681e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f8e5 	bl	80069e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f8f6 	bl	8006a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	d020      	beq.n	8006870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01b      	beq.n	8006870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0204 	mvn.w	r2, #4
 8006840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f8cd 	bl	80069f6 <HAL_TIM_IC_CaptureCallback>
 800685c:	e005      	b.n	800686a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f8bf 	bl	80069e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f8d0 	bl	8006a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d020      	beq.n	80068bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01b      	beq.n	80068bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0208 	mvn.w	r2, #8
 800688c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2204      	movs	r2, #4
 8006892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f8a7 	bl	80069f6 <HAL_TIM_IC_CaptureCallback>
 80068a8:	e005      	b.n	80068b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f899 	bl	80069e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f8aa 	bl	8006a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 0310 	and.w	r3, r3, #16
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d020      	beq.n	8006908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01b      	beq.n	8006908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0210 	mvn.w	r2, #16
 80068d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2208      	movs	r2, #8
 80068de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f881 	bl	80069f6 <HAL_TIM_IC_CaptureCallback>
 80068f4:	e005      	b.n	8006902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f873 	bl	80069e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f884 	bl	8006a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00c      	beq.n	800692c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d007      	beq.n	800692c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0201 	mvn.w	r2, #1
 8006924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f851 	bl	80069ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00c      	beq.n	800695a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa73 	bl	8006e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00c      	beq.n	800697e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696a:	2b00      	cmp	r3, #0
 800696c:	d007      	beq.n	800697e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa6b 	bl	8006e54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00c      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d007      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800699a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f83e 	bl	8006a1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00c      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f06f 0220 	mvn.w	r2, #32
 80069be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa33 	bl	8006e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c6:	bf00      	nop
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b083      	sub	sp, #12
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a46      	ldr	r2, [pc, #280]	@ (8006b60 <TIM_Base_SetConfig+0x12c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a52:	d00f      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a43      	ldr	r2, [pc, #268]	@ (8006b64 <TIM_Base_SetConfig+0x130>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00b      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a42      	ldr	r2, [pc, #264]	@ (8006b68 <TIM_Base_SetConfig+0x134>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d007      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a41      	ldr	r2, [pc, #260]	@ (8006b6c <TIM_Base_SetConfig+0x138>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a40      	ldr	r2, [pc, #256]	@ (8006b70 <TIM_Base_SetConfig+0x13c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d108      	bne.n	8006a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a35      	ldr	r2, [pc, #212]	@ (8006b60 <TIM_Base_SetConfig+0x12c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01f      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a94:	d01b      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a32      	ldr	r2, [pc, #200]	@ (8006b64 <TIM_Base_SetConfig+0x130>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d017      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a31      	ldr	r2, [pc, #196]	@ (8006b68 <TIM_Base_SetConfig+0x134>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a30      	ldr	r2, [pc, #192]	@ (8006b6c <TIM_Base_SetConfig+0x138>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00f      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8006b70 <TIM_Base_SetConfig+0x13c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8006b74 <TIM_Base_SetConfig+0x140>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b78 <TIM_Base_SetConfig+0x144>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8006b7c <TIM_Base_SetConfig+0x148>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <TIM_Base_SetConfig+0x12c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a18      	ldr	r2, [pc, #96]	@ (8006b70 <TIM_Base_SetConfig+0x13c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a17      	ldr	r2, [pc, #92]	@ (8006b74 <TIM_Base_SetConfig+0x140>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a16      	ldr	r2, [pc, #88]	@ (8006b78 <TIM_Base_SetConfig+0x144>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a15      	ldr	r2, [pc, #84]	@ (8006b7c <TIM_Base_SetConfig+0x148>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d103      	bne.n	8006b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d105      	bne.n	8006b52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f023 0201 	bic.w	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	611a      	str	r2, [r3, #16]
  }
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40000c00 	.word	0x40000c00
 8006b70:	40013400 	.word	0x40013400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800

08006b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a34      	ldr	r2, [pc, #208]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d02c      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9c:	d027      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a30      	ldr	r2, [pc, #192]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a2e      	ldr	r2, [pc, #184]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01d      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d018      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2a      	ldr	r2, [pc, #168]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a28      	ldr	r2, [pc, #160]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d009      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a27      	ldr	r2, [pc, #156]	@ (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006be4:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 8006be8:	4825      	ldr	r0, [pc, #148]	@ (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bea:	f7fa fcb7 	bl	800155c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d020      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b10      	cmp	r3, #16
 8006bfc:	d01c      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d018      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b30      	cmp	r3, #48	@ 0x30
 8006c0c:	d014      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b40      	cmp	r3, #64	@ 0x40
 8006c14:	d010      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b50      	cmp	r3, #80	@ 0x50
 8006c1c:	d00c      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b60      	cmp	r3, #96	@ 0x60
 8006c24:	d008      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b70      	cmp	r3, #112	@ 0x70
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c2e:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8006c32:	4813      	ldr	r0, [pc, #76]	@ (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c34:	f7fa fc92 	bl	800155c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b80      	cmp	r3, #128	@ 0x80
 8006c3e:	d008      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8006c48:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8006c4c:	480c      	ldr	r0, [pc, #48]	@ (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c4e:	f7fa fc85 	bl	800155c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d113      	bne.n	8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e0d3      	b.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8006c60:	40012c00 	.word	0x40012c00
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40001000 	.word	0x40001000
 8006c74:	40001400 	.word	0x40001400
 8006c78:	40013400 	.word	0x40013400
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	08009140 	.word	0x08009140
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a59      	ldr	r2, [pc, #356]	@ (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a58      	ldr	r2, [pc, #352]	@ (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d161      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d054      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cc8:	d04f      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cd2:	d04a      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cdc:	d045      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ce6:	d040      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006cf0:	d03b      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006cfa:	d036      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d04:	d031      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8006d0e:	d02c      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d18:	d027      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8006d22:	d022      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006d2c:	d01d      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8006d36:	d018      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d40:	d013      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8006d4a:	d00e      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8006d54:	d009      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8006d5e:	d004      	beq.n	8006d6a <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8006d60:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8006d64:	482c      	ldr	r0, [pc, #176]	@ (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8006d66:	f7fa fbf9 	bl	800155c <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d01d      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da8:	d018      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1b      	ldr	r2, [pc, #108]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d013      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a19      	ldr	r2, [pc, #100]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00e      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a18      	ldr	r2, [pc, #96]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d009      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a11      	ldr	r2, [pc, #68]	@ (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a14      	ldr	r2, [pc, #80]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d10c      	bne.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006de2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40013400 	.word	0x40013400
 8006e18:	08009140 	.word	0x08009140
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40014000 	.word	0x40014000

08006e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e08b      	b.n	8006f92 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d023      	beq.n	8006eca <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a45      	ldr	r2, [pc, #276]	@ (8006f9c <HAL_UART_Init+0x134>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d041      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a43      	ldr	r2, [pc, #268]	@ (8006fa0 <HAL_UART_Init+0x138>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d03c      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a42      	ldr	r2, [pc, #264]	@ (8006fa4 <HAL_UART_Init+0x13c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d037      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a40      	ldr	r2, [pc, #256]	@ (8006fa8 <HAL_UART_Init+0x140>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d032      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a3f      	ldr	r2, [pc, #252]	@ (8006fac <HAL_UART_Init+0x144>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d02d      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a3d      	ldr	r2, [pc, #244]	@ (8006fb0 <HAL_UART_Init+0x148>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d028      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006ebe:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8006ec2:	483c      	ldr	r0, [pc, #240]	@ (8006fb4 <HAL_UART_Init+0x14c>)
 8006ec4:	f7fa fb4a 	bl	800155c <assert_failed>
 8006ec8:	e022      	b.n	8006f10 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a33      	ldr	r2, [pc, #204]	@ (8006f9c <HAL_UART_Init+0x134>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d01d      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a31      	ldr	r2, [pc, #196]	@ (8006fa0 <HAL_UART_Init+0x138>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d018      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a30      	ldr	r2, [pc, #192]	@ (8006fa4 <HAL_UART_Init+0x13c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d013      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2e      	ldr	r2, [pc, #184]	@ (8006fa8 <HAL_UART_Init+0x140>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00e      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8006fac <HAL_UART_Init+0x144>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d009      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a2b      	ldr	r2, [pc, #172]	@ (8006fb0 <HAL_UART_Init+0x148>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d004      	beq.n	8006f10 <HAL_UART_Init+0xa8>
 8006f06:	f240 1157 	movw	r1, #343	@ 0x157
 8006f0a:	482a      	ldr	r0, [pc, #168]	@ (8006fb4 <HAL_UART_Init+0x14c>)
 8006f0c:	f7fa fb26 	bl	800155c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7fa ff9b 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2224      	movs	r2, #36	@ 0x24
 8006f2a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 ff0f 	bl	8007d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fbae 	bl	80076ac <UART_SetConfig>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e01b      	b.n	8006f92 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0201 	orr.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 f84c 	bl	8008028 <UART_CheckIdleState>
 8006f90:	4603      	mov	r3, r0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40013800 	.word	0x40013800
 8006fa0:	40004400 	.word	0x40004400
 8006fa4:	40004800 	.word	0x40004800
 8006fa8:	40004c00 	.word	0x40004c00
 8006fac:	40005000 	.word	0x40005000
 8006fb0:	40008000 	.word	0x40008000
 8006fb4:	0800917c 	.word	0x0800917c

08006fb8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b08b      	sub	sp, #44	@ 0x2c
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d147      	bne.n	800705e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_UART_Transmit_IT+0x22>
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e040      	b.n	8007060 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	88fa      	ldrh	r2, [r7, #6]
 8006fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2221      	movs	r2, #33	@ 0x21
 8007006:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007010:	d107      	bne.n	8007022 <HAL_UART_Transmit_IT+0x6a>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4a13      	ldr	r2, [pc, #76]	@ (800706c <HAL_UART_Transmit_IT+0xb4>)
 800701e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007020:	e002      	b.n	8007028 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4a12      	ldr	r2, [pc, #72]	@ (8007070 <HAL_UART_Transmit_IT+0xb8>)
 8007026:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	613b      	str	r3, [r7, #16]
   return(result);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	69f9      	ldr	r1, [r7, #28]
 800704c:	6a3a      	ldr	r2, [r7, #32]
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	61bb      	str	r3, [r7, #24]
   return(result);
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e6      	bne.n	8007028 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	e000      	b.n	8007060 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800705e:	2302      	movs	r3, #2
  }
}
 8007060:	4618      	mov	r0, r3
 8007062:	372c      	adds	r7, #44	@ 0x2c
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	080083fd 	.word	0x080083fd
 8007070:	08008347 	.word	0x08008347

08007074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b0ba      	sub	sp, #232	@ 0xe8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800709a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800709e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80070a2:	4013      	ands	r3, r2
 80070a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80070a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d115      	bne.n	80070dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00f      	beq.n	80070dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d009      	beq.n	80070dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 82ca 	beq.w	8007666 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
      }
      return;
 80070da:	e2c4      	b.n	8007666 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80070dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8117 	beq.w	8007314 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80070f6:	4b85      	ldr	r3, [pc, #532]	@ (800730c <HAL_UART_IRQHandler+0x298>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 810a 	beq.w	8007314 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d011      	beq.n	8007130 <HAL_UART_IRQHandler+0xbc>
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007126:	f043 0201 	orr.w	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d011      	beq.n	8007160 <HAL_UART_IRQHandler+0xec>
 800713c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2202      	movs	r2, #2
 800714e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007156:	f043 0204 	orr.w	r2, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d011      	beq.n	8007190 <HAL_UART_IRQHandler+0x11c>
 800716c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2204      	movs	r2, #4
 800717e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007186:	f043 0202 	orr.w	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d017      	beq.n	80071cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2208      	movs	r2, #8
 80071ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071c2:	f043 0208 	orr.w	r2, r3, #8
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d012      	beq.n	80071fe <HAL_UART_IRQHandler+0x18a>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00c      	beq.n	80071fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f4:	f043 0220 	orr.w	r2, r3, #32
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8230 	beq.w	800766a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007238:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007246:	2b40      	cmp	r3, #64	@ 0x40
 8007248:	d005      	beq.n	8007256 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800724a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800724e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007252:	2b00      	cmp	r3, #0
 8007254:	d04f      	beq.n	80072f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fffb 	bl	8008252 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007266:	2b40      	cmp	r3, #64	@ 0x40
 8007268:	d141      	bne.n	80072ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007296:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800729a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1d9      	bne.n	800726a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d013      	beq.n	80072e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c2:	4a13      	ldr	r2, [pc, #76]	@ (8007310 <HAL_UART_IRQHandler+0x29c>)
 80072c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fb fa6e 	bl	80027ac <HAL_DMA_Abort_IT>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80072e0:	4610      	mov	r0, r2
 80072e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	e00f      	b.n	8007306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9ca 	bl	8007680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	e00b      	b.n	8007306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f9c6 	bl	8007680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f4:	e007      	b.n	8007306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f9c2 	bl	8007680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007304:	e1b1      	b.n	800766a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007306:	bf00      	nop
    return;
 8007308:	e1af      	b.n	800766a <HAL_UART_IRQHandler+0x5f6>
 800730a:	bf00      	nop
 800730c:	04000120 	.word	0x04000120
 8007310:	0800831b 	.word	0x0800831b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007318:	2b01      	cmp	r3, #1
 800731a:	f040 816a 	bne.w	80075f2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800731e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007322:	f003 0310 	and.w	r3, r3, #16
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8163 	beq.w	80075f2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 815c 	beq.w	80075f2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2210      	movs	r2, #16
 8007340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734c:	2b40      	cmp	r3, #64	@ 0x40
 800734e:	f040 80d4 	bne.w	80074fa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800735e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 80ad 	beq.w	80074c2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800736e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007372:	429a      	cmp	r2, r3
 8007374:	f080 80a5 	bcs.w	80074c2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800737e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	f040 8086 	bne.w	80074a0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1da      	bne.n	8007394 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3308      	adds	r3, #8
 80073e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3308      	adds	r3, #8
 80073fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007402:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007406:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800740a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e1      	bne.n	80073de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800742a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800742c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800743e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007440:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007444:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800744c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e3      	bne.n	800741a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800746e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007470:	f023 0310 	bic.w	r3, r3, #16
 8007474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007482:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007484:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e4      	bne.n	8007460 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800749a:	4618      	mov	r0, r3
 800749c:	f7fb f948 	bl	8002730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8ea 	bl	8007694 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80074c0:	e0d5      	b.n	800766e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074cc:	429a      	cmp	r2, r3
 80074ce:	f040 80ce 	bne.w	800766e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b20      	cmp	r3, #32
 80074e0:	f040 80c5 	bne.w	800766e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f8ce 	bl	8007694 <HAL_UARTEx_RxEventCallback>
      return;
 80074f8:	e0b9      	b.n	800766e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007506:	b29b      	uxth	r3, r3
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 80ab 	beq.w	8007672 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800751c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 80a6 	beq.w	8007672 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800753a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007548:	647b      	str	r3, [r7, #68]	@ 0x44
 800754a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800754e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e4      	bne.n	8007526 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	623b      	str	r3, [r7, #32]
   return(result);
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3308      	adds	r3, #8
 800757c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007580:	633a      	str	r2, [r7, #48]	@ 0x30
 8007582:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e3      	bne.n	800755c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f023 0310 	bic.w	r3, r3, #16
 80075bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	69b9      	ldr	r1, [r7, #24]
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	617b      	str	r3, [r7, #20]
   return(result);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e4      	bne.n	80075a8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2202      	movs	r2, #2
 80075e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f852 	bl	8007694 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075f0:	e03f      	b.n	8007672 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00e      	beq.n	800761c <HAL_UART_IRQHandler+0x5a8>
 80075fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 ff7b 	bl	8008510 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800761a:	e02d      	b.n	8007678 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800761c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00e      	beq.n	8007646 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01c      	beq.n	8007676 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
    }
    return;
 8007644:	e017      	b.n	8007676 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d012      	beq.n	8007678 <HAL_UART_IRQHandler+0x604>
 8007652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 ff2c 	bl	80084bc <UART_EndTransmit_IT>
    return;
 8007664:	e008      	b.n	8007678 <HAL_UART_IRQHandler+0x604>
      return;
 8007666:	bf00      	nop
 8007668:	e006      	b.n	8007678 <HAL_UART_IRQHandler+0x604>
    return;
 800766a:	bf00      	nop
 800766c:	e004      	b.n	8007678 <HAL_UART_IRQHandler+0x604>
      return;
 800766e:	bf00      	nop
 8007670:	e002      	b.n	8007678 <HAL_UART_IRQHandler+0x604>
      return;
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <HAL_UART_IRQHandler+0x604>
    return;
 8007676:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007678:	37e8      	adds	r7, #232	@ 0xe8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop

08007680 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b0:	b08a      	sub	sp, #40	@ 0x28
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4a9e      	ldr	r2, [pc, #632]	@ (800793c <UART_SetConfig+0x290>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d904      	bls.n	80076d0 <UART_SetConfig+0x24>
 80076c6:	f640 4158 	movw	r1, #3160	@ 0xc58
 80076ca:	489d      	ldr	r0, [pc, #628]	@ (8007940 <UART_SetConfig+0x294>)
 80076cc:	f7f9 ff46 	bl	800155c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d8:	d00d      	beq.n	80076f6 <UART_SetConfig+0x4a>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <UART_SetConfig+0x4a>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ea:	d004      	beq.n	80076f6 <UART_SetConfig+0x4a>
 80076ec:	f640 4159 	movw	r1, #3161	@ 0xc59
 80076f0:	4893      	ldr	r0, [pc, #588]	@ (8007940 <UART_SetConfig+0x294>)
 80076f2:	f7f9 ff33 	bl	800155c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a92      	ldr	r2, [pc, #584]	@ (8007944 <UART_SetConfig+0x298>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10e      	bne.n	800771e <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d030      	beq.n	800776a <UART_SetConfig+0xbe>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007710:	d02b      	beq.n	800776a <UART_SetConfig+0xbe>
 8007712:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8007716:	488a      	ldr	r0, [pc, #552]	@ (8007940 <UART_SetConfig+0x294>)
 8007718:	f7f9 ff20 	bl	800155c <assert_failed>
 800771c:	e025      	b.n	800776a <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007726:	d012      	beq.n	800774e <UART_SetConfig+0xa2>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00e      	beq.n	800774e <UART_SetConfig+0xa2>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007738:	d009      	beq.n	800774e <UART_SetConfig+0xa2>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007742:	d004      	beq.n	800774e <UART_SetConfig+0xa2>
 8007744:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8007748:	487d      	ldr	r0, [pc, #500]	@ (8007940 <UART_SetConfig+0x294>)
 800774a:	f7f9 ff07 	bl	800155c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <UART_SetConfig+0xbe>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800775e:	d004      	beq.n	800776a <UART_SetConfig+0xbe>
 8007760:	f640 4161 	movw	r1, #3169	@ 0xc61
 8007764:	4876      	ldr	r0, [pc, #472]	@ (8007940 <UART_SetConfig+0x294>)
 8007766:	f7f9 fef9 	bl	800155c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00e      	beq.n	8007790 <UART_SetConfig+0xe4>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800777a:	d009      	beq.n	8007790 <UART_SetConfig+0xe4>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007784:	d004      	beq.n	8007790 <UART_SetConfig+0xe4>
 8007786:	f640 4164 	movw	r1, #3172	@ 0xc64
 800778a:	486d      	ldr	r0, [pc, #436]	@ (8007940 <UART_SetConfig+0x294>)
 800778c:	f7f9 fee6 	bl	800155c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	f023 030c 	bic.w	r3, r3, #12
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <UART_SetConfig+0xf8>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <UART_SetConfig+0x102>
 80077a4:	f640 4165 	movw	r1, #3173	@ 0xc65
 80077a8:	4865      	ldr	r0, [pc, #404]	@ (8007940 <UART_SetConfig+0x294>)
 80077aa:	f7f9 fed7 	bl	800155c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d013      	beq.n	80077de <UART_SetConfig+0x132>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077be:	d00e      	beq.n	80077de <UART_SetConfig+0x132>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c8:	d009      	beq.n	80077de <UART_SetConfig+0x132>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d2:	d004      	beq.n	80077de <UART_SetConfig+0x132>
 80077d4:	f640 4166 	movw	r1, #3174	@ 0xc66
 80077d8:	4859      	ldr	r0, [pc, #356]	@ (8007940 <UART_SetConfig+0x294>)
 80077da:	f7f9 febf 	bl	800155c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d009      	beq.n	80077fa <UART_SetConfig+0x14e>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ee:	d004      	beq.n	80077fa <UART_SetConfig+0x14e>
 80077f0:	f640 4167 	movw	r1, #3175	@ 0xc67
 80077f4:	4852      	ldr	r0, [pc, #328]	@ (8007940 <UART_SetConfig+0x294>)
 80077f6:	f7f9 feb1 	bl	800155c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	431a      	orrs	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	431a      	orrs	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	4313      	orrs	r3, r2
 8007810:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	4b4b      	ldr	r3, [pc, #300]	@ (8007948 <UART_SetConfig+0x29c>)
 800781a:	4013      	ands	r3, r2
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007822:	430b      	orrs	r3, r1
 8007824:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a3f      	ldr	r2, [pc, #252]	@ (8007944 <UART_SetConfig+0x298>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d004      	beq.n	8007856 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007852:	4313      	orrs	r3, r2
 8007854:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007866:	430a      	orrs	r2, r1
 8007868:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a37      	ldr	r2, [pc, #220]	@ (800794c <UART_SetConfig+0x2a0>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d125      	bne.n	80078c0 <UART_SetConfig+0x214>
 8007874:	4b36      	ldr	r3, [pc, #216]	@ (8007950 <UART_SetConfig+0x2a4>)
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	2b03      	cmp	r3, #3
 8007880:	d81a      	bhi.n	80078b8 <UART_SetConfig+0x20c>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <UART_SetConfig+0x1dc>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	08007899 	.word	0x08007899
 800788c:	080078a9 	.word	0x080078a9
 8007890:	080078a1 	.word	0x080078a1
 8007894:	080078b1 	.word	0x080078b1
 8007898:	2301      	movs	r3, #1
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800789e:	e114      	b.n	8007aca <UART_SetConfig+0x41e>
 80078a0:	2302      	movs	r3, #2
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078a6:	e110      	b.n	8007aca <UART_SetConfig+0x41e>
 80078a8:	2304      	movs	r3, #4
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ae:	e10c      	b.n	8007aca <UART_SetConfig+0x41e>
 80078b0:	2308      	movs	r3, #8
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b6:	e108      	b.n	8007aca <UART_SetConfig+0x41e>
 80078b8:	2310      	movs	r3, #16
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078be:	e104      	b.n	8007aca <UART_SetConfig+0x41e>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a23      	ldr	r2, [pc, #140]	@ (8007954 <UART_SetConfig+0x2a8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d146      	bne.n	8007958 <UART_SetConfig+0x2ac>
 80078ca:	4b21      	ldr	r3, [pc, #132]	@ (8007950 <UART_SetConfig+0x2a4>)
 80078cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d0:	f003 030c 	and.w	r3, r3, #12
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	d82d      	bhi.n	8007934 <UART_SetConfig+0x288>
 80078d8:	a201      	add	r2, pc, #4	@ (adr r2, 80078e0 <UART_SetConfig+0x234>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	08007915 	.word	0x08007915
 80078e4:	08007935 	.word	0x08007935
 80078e8:	08007935 	.word	0x08007935
 80078ec:	08007935 	.word	0x08007935
 80078f0:	08007925 	.word	0x08007925
 80078f4:	08007935 	.word	0x08007935
 80078f8:	08007935 	.word	0x08007935
 80078fc:	08007935 	.word	0x08007935
 8007900:	0800791d 	.word	0x0800791d
 8007904:	08007935 	.word	0x08007935
 8007908:	08007935 	.word	0x08007935
 800790c:	08007935 	.word	0x08007935
 8007910:	0800792d 	.word	0x0800792d
 8007914:	2300      	movs	r3, #0
 8007916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791a:	e0d6      	b.n	8007aca <UART_SetConfig+0x41e>
 800791c:	2302      	movs	r3, #2
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007922:	e0d2      	b.n	8007aca <UART_SetConfig+0x41e>
 8007924:	2304      	movs	r3, #4
 8007926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792a:	e0ce      	b.n	8007aca <UART_SetConfig+0x41e>
 800792c:	2308      	movs	r3, #8
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007932:	e0ca      	b.n	8007aca <UART_SetConfig+0x41e>
 8007934:	2310      	movs	r3, #16
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793a:	e0c6      	b.n	8007aca <UART_SetConfig+0x41e>
 800793c:	00989680 	.word	0x00989680
 8007940:	0800917c 	.word	0x0800917c
 8007944:	40008000 	.word	0x40008000
 8007948:	efff69f3 	.word	0xefff69f3
 800794c:	40013800 	.word	0x40013800
 8007950:	40021000 	.word	0x40021000
 8007954:	40004400 	.word	0x40004400
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4aae      	ldr	r2, [pc, #696]	@ (8007c18 <UART_SetConfig+0x56c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d125      	bne.n	80079ae <UART_SetConfig+0x302>
 8007962:	4bae      	ldr	r3, [pc, #696]	@ (8007c1c <UART_SetConfig+0x570>)
 8007964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007968:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800796c:	2b30      	cmp	r3, #48	@ 0x30
 800796e:	d016      	beq.n	800799e <UART_SetConfig+0x2f2>
 8007970:	2b30      	cmp	r3, #48	@ 0x30
 8007972:	d818      	bhi.n	80079a6 <UART_SetConfig+0x2fa>
 8007974:	2b20      	cmp	r3, #32
 8007976:	d00a      	beq.n	800798e <UART_SetConfig+0x2e2>
 8007978:	2b20      	cmp	r3, #32
 800797a:	d814      	bhi.n	80079a6 <UART_SetConfig+0x2fa>
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <UART_SetConfig+0x2da>
 8007980:	2b10      	cmp	r3, #16
 8007982:	d008      	beq.n	8007996 <UART_SetConfig+0x2ea>
 8007984:	e00f      	b.n	80079a6 <UART_SetConfig+0x2fa>
 8007986:	2300      	movs	r3, #0
 8007988:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800798c:	e09d      	b.n	8007aca <UART_SetConfig+0x41e>
 800798e:	2302      	movs	r3, #2
 8007990:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007994:	e099      	b.n	8007aca <UART_SetConfig+0x41e>
 8007996:	2304      	movs	r3, #4
 8007998:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800799c:	e095      	b.n	8007aca <UART_SetConfig+0x41e>
 800799e:	2308      	movs	r3, #8
 80079a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a4:	e091      	b.n	8007aca <UART_SetConfig+0x41e>
 80079a6:	2310      	movs	r3, #16
 80079a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ac:	e08d      	b.n	8007aca <UART_SetConfig+0x41e>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a9b      	ldr	r2, [pc, #620]	@ (8007c20 <UART_SetConfig+0x574>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d125      	bne.n	8007a04 <UART_SetConfig+0x358>
 80079b8:	4b98      	ldr	r3, [pc, #608]	@ (8007c1c <UART_SetConfig+0x570>)
 80079ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80079c4:	d016      	beq.n	80079f4 <UART_SetConfig+0x348>
 80079c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079c8:	d818      	bhi.n	80079fc <UART_SetConfig+0x350>
 80079ca:	2b80      	cmp	r3, #128	@ 0x80
 80079cc:	d00a      	beq.n	80079e4 <UART_SetConfig+0x338>
 80079ce:	2b80      	cmp	r3, #128	@ 0x80
 80079d0:	d814      	bhi.n	80079fc <UART_SetConfig+0x350>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <UART_SetConfig+0x330>
 80079d6:	2b40      	cmp	r3, #64	@ 0x40
 80079d8:	d008      	beq.n	80079ec <UART_SetConfig+0x340>
 80079da:	e00f      	b.n	80079fc <UART_SetConfig+0x350>
 80079dc:	2300      	movs	r3, #0
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e2:	e072      	b.n	8007aca <UART_SetConfig+0x41e>
 80079e4:	2302      	movs	r3, #2
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ea:	e06e      	b.n	8007aca <UART_SetConfig+0x41e>
 80079ec:	2304      	movs	r3, #4
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f2:	e06a      	b.n	8007aca <UART_SetConfig+0x41e>
 80079f4:	2308      	movs	r3, #8
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079fa:	e066      	b.n	8007aca <UART_SetConfig+0x41e>
 80079fc:	2310      	movs	r3, #16
 80079fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a02:	e062      	b.n	8007aca <UART_SetConfig+0x41e>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a86      	ldr	r2, [pc, #536]	@ (8007c24 <UART_SetConfig+0x578>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d12a      	bne.n	8007a64 <UART_SetConfig+0x3b8>
 8007a0e:	4b83      	ldr	r3, [pc, #524]	@ (8007c1c <UART_SetConfig+0x570>)
 8007a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a1c:	d01a      	beq.n	8007a54 <UART_SetConfig+0x3a8>
 8007a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a22:	d81b      	bhi.n	8007a5c <UART_SetConfig+0x3b0>
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a28:	d00c      	beq.n	8007a44 <UART_SetConfig+0x398>
 8007a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a2e:	d815      	bhi.n	8007a5c <UART_SetConfig+0x3b0>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <UART_SetConfig+0x390>
 8007a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a38:	d008      	beq.n	8007a4c <UART_SetConfig+0x3a0>
 8007a3a:	e00f      	b.n	8007a5c <UART_SetConfig+0x3b0>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a42:	e042      	b.n	8007aca <UART_SetConfig+0x41e>
 8007a44:	2302      	movs	r3, #2
 8007a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4a:	e03e      	b.n	8007aca <UART_SetConfig+0x41e>
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a52:	e03a      	b.n	8007aca <UART_SetConfig+0x41e>
 8007a54:	2308      	movs	r3, #8
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5a:	e036      	b.n	8007aca <UART_SetConfig+0x41e>
 8007a5c:	2310      	movs	r3, #16
 8007a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a62:	e032      	b.n	8007aca <UART_SetConfig+0x41e>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a6f      	ldr	r2, [pc, #444]	@ (8007c28 <UART_SetConfig+0x57c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d12a      	bne.n	8007ac4 <UART_SetConfig+0x418>
 8007a6e:	4b6b      	ldr	r3, [pc, #428]	@ (8007c1c <UART_SetConfig+0x570>)
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a7c:	d01a      	beq.n	8007ab4 <UART_SetConfig+0x408>
 8007a7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a82:	d81b      	bhi.n	8007abc <UART_SetConfig+0x410>
 8007a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a88:	d00c      	beq.n	8007aa4 <UART_SetConfig+0x3f8>
 8007a8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a8e:	d815      	bhi.n	8007abc <UART_SetConfig+0x410>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <UART_SetConfig+0x3f0>
 8007a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a98:	d008      	beq.n	8007aac <UART_SetConfig+0x400>
 8007a9a:	e00f      	b.n	8007abc <UART_SetConfig+0x410>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa2:	e012      	b.n	8007aca <UART_SetConfig+0x41e>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aaa:	e00e      	b.n	8007aca <UART_SetConfig+0x41e>
 8007aac:	2304      	movs	r3, #4
 8007aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab2:	e00a      	b.n	8007aca <UART_SetConfig+0x41e>
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aba:	e006      	b.n	8007aca <UART_SetConfig+0x41e>
 8007abc:	2310      	movs	r3, #16
 8007abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac2:	e002      	b.n	8007aca <UART_SetConfig+0x41e>
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a56      	ldr	r2, [pc, #344]	@ (8007c28 <UART_SetConfig+0x57c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d17a      	bne.n	8007bca <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d824      	bhi.n	8007b26 <UART_SetConfig+0x47a>
 8007adc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <UART_SetConfig+0x438>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b27 	.word	0x08007b27
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b27 	.word	0x08007b27
 8007af4:	08007b17 	.word	0x08007b17
 8007af8:	08007b27 	.word	0x08007b27
 8007afc:	08007b27 	.word	0x08007b27
 8007b00:	08007b27 	.word	0x08007b27
 8007b04:	08007b1f 	.word	0x08007b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fc f9d2 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	61f8      	str	r0, [r7, #28]
        break;
 8007b0e:	e010      	b.n	8007b32 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b10:	4b46      	ldr	r3, [pc, #280]	@ (8007c2c <UART_SetConfig+0x580>)
 8007b12:	61fb      	str	r3, [r7, #28]
        break;
 8007b14:	e00d      	b.n	8007b32 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b16:	f7fc f933 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8007b1a:	61f8      	str	r0, [r7, #28]
        break;
 8007b1c:	e009      	b.n	8007b32 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b22:	61fb      	str	r3, [r7, #28]
        break;
 8007b24:	e005      	b.n	8007b32 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8107 	beq.w	8007d48 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	4413      	add	r3, r2
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d305      	bcc.n	8007b56 <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d903      	bls.n	8007b5e <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b5c:	e0f4      	b.n	8007d48 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	2200      	movs	r2, #0
 8007b62:	461c      	mov	r4, r3
 8007b64:	4615      	mov	r5, r2
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	022b      	lsls	r3, r5, #8
 8007b70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007b74:	0222      	lsls	r2, r4, #8
 8007b76:	68f9      	ldr	r1, [r7, #12]
 8007b78:	6849      	ldr	r1, [r1, #4]
 8007b7a:	0849      	lsrs	r1, r1, #1
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	4688      	mov	r8, r1
 8007b80:	4681      	mov	r9, r0
 8007b82:	eb12 0a08 	adds.w	sl, r2, r8
 8007b86:	eb43 0b09 	adc.w	fp, r3, r9
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b98:	4650      	mov	r0, sl
 8007b9a:	4659      	mov	r1, fp
 8007b9c:	f7f8 fb70 	bl	8000280 <__aeabi_uldivmod>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bae:	d308      	bcc.n	8007bc2 <UART_SetConfig+0x516>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bb6:	d204      	bcs.n	8007bc2 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	60da      	str	r2, [r3, #12]
 8007bc0:	e0c2      	b.n	8007d48 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bc8:	e0be      	b.n	8007d48 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd2:	d16a      	bne.n	8007caa <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 8007bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d834      	bhi.n	8007c46 <UART_SetConfig+0x59a>
 8007bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <UART_SetConfig+0x538>)
 8007bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be2:	bf00      	nop
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c31 	.word	0x08007c31
 8007bf0:	08007c47 	.word	0x08007c47
 8007bf4:	08007c37 	.word	0x08007c37
 8007bf8:	08007c47 	.word	0x08007c47
 8007bfc:	08007c47 	.word	0x08007c47
 8007c00:	08007c47 	.word	0x08007c47
 8007c04:	08007c3f 	.word	0x08007c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c08:	f7fc f952 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 8007c0c:	61f8      	str	r0, [r7, #28]
        break;
 8007c0e:	e020      	b.n	8007c52 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7fc f964 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8007c14:	61f8      	str	r0, [r7, #28]
        break;
 8007c16:	e01c      	b.n	8007c52 <UART_SetConfig+0x5a6>
 8007c18:	40004800 	.word	0x40004800
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	40004c00 	.word	0x40004c00
 8007c24:	40005000 	.word	0x40005000
 8007c28:	40008000 	.word	0x40008000
 8007c2c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c30:	4b4c      	ldr	r3, [pc, #304]	@ (8007d64 <UART_SetConfig+0x6b8>)
 8007c32:	61fb      	str	r3, [r7, #28]
        break;
 8007c34:	e00d      	b.n	8007c52 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c36:	f7fc f8a3 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8007c3a:	61f8      	str	r0, [r7, #28]
        break;
 8007c3c:	e009      	b.n	8007c52 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c42:	61fb      	str	r3, [r7, #28]
        break;
 8007c44:	e005      	b.n	8007c52 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d077      	beq.n	8007d48 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	005a      	lsls	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	085b      	lsrs	r3, r3, #1
 8007c62:	441a      	add	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b0f      	cmp	r3, #15
 8007c72:	d916      	bls.n	8007ca2 <UART_SetConfig+0x5f6>
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c7a:	d212      	bcs.n	8007ca2 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f023 030f 	bic.w	r3, r3, #15
 8007c84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	085b      	lsrs	r3, r3, #1
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	8afb      	ldrh	r3, [r7, #22]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	8afa      	ldrh	r2, [r7, #22]
 8007c9e:	60da      	str	r2, [r3, #12]
 8007ca0:	e052      	b.n	8007d48 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ca8:	e04e      	b.n	8007d48 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007caa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d827      	bhi.n	8007d02 <UART_SetConfig+0x656>
 8007cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <UART_SetConfig+0x60c>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	08007d03 	.word	0x08007d03
 8007cc8:	08007cf3 	.word	0x08007cf3
 8007ccc:	08007d03 	.word	0x08007d03
 8007cd0:	08007d03 	.word	0x08007d03
 8007cd4:	08007d03 	.word	0x08007d03
 8007cd8:	08007cfb 	.word	0x08007cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cdc:	f7fc f8e8 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 8007ce0:	61f8      	str	r0, [r7, #28]
        break;
 8007ce2:	e014      	b.n	8007d0e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ce4:	f7fc f8fa 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8007ce8:	61f8      	str	r0, [r7, #28]
        break;
 8007cea:	e010      	b.n	8007d0e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cec:	4b1d      	ldr	r3, [pc, #116]	@ (8007d64 <UART_SetConfig+0x6b8>)
 8007cee:	61fb      	str	r3, [r7, #28]
        break;
 8007cf0:	e00d      	b.n	8007d0e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cf2:	f7fc f845 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8007cf6:	61f8      	str	r0, [r7, #28]
        break;
 8007cf8:	e009      	b.n	8007d0e <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cfe:	61fb      	str	r3, [r7, #28]
        break;
 8007d00:	e005      	b.n	8007d0e <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d019      	beq.n	8007d48 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	085a      	lsrs	r2, r3, #1
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	d909      	bls.n	8007d42 <UART_SetConfig+0x696>
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d34:	d205      	bcs.n	8007d42 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60da      	str	r2, [r3, #12]
 8007d40:	e002      	b.n	8007d48 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3728      	adds	r7, #40	@ 0x28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d62:	bf00      	nop
 8007d64:	00f42400 	.word	0x00f42400

08007d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d74:	2bff      	cmp	r3, #255	@ 0xff
 8007d76:	d904      	bls.n	8007d82 <UART_AdvFeatureConfig+0x1a>
 8007d78:	f640 514d 	movw	r1, #3405	@ 0xd4d
 8007d7c:	4891      	ldr	r0, [pc, #580]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007d7e:	f7f9 fbed 	bl	800155c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d018      	beq.n	8007dc0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <UART_AdvFeatureConfig+0x42>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9e:	d004      	beq.n	8007daa <UART_AdvFeatureConfig+0x42>
 8007da0:	f640 5152 	movw	r1, #3410	@ 0xd52
 8007da4:	4887      	ldr	r0, [pc, #540]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007da6:	f7f9 fbd9 	bl	800155c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d018      	beq.n	8007dfe <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d009      	beq.n	8007de8 <UART_AdvFeatureConfig+0x80>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ddc:	d004      	beq.n	8007de8 <UART_AdvFeatureConfig+0x80>
 8007dde:	f640 5159 	movw	r1, #3417	@ 0xd59
 8007de2:	4878      	ldr	r0, [pc, #480]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007de4:	f7f9 fbba 	bl	800155c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d018      	beq.n	8007e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <UART_AdvFeatureConfig+0xbe>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e1a:	d004      	beq.n	8007e26 <UART_AdvFeatureConfig+0xbe>
 8007e1c:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 8007e20:	4868      	ldr	r0, [pc, #416]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007e22:	f7f9 fb9b 	bl	800155c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d018      	beq.n	8007e7a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <UART_AdvFeatureConfig+0xfc>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e58:	d004      	beq.n	8007e64 <UART_AdvFeatureConfig+0xfc>
 8007e5a:	f640 5167 	movw	r1, #3431	@ 0xd67
 8007e5e:	4859      	ldr	r0, [pc, #356]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007e60:	f7f9 fb7c 	bl	800155c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	f003 0310 	and.w	r3, r3, #16
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d018      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d009      	beq.n	8007ea2 <UART_AdvFeatureConfig+0x13a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e96:	d004      	beq.n	8007ea2 <UART_AdvFeatureConfig+0x13a>
 8007e98:	f640 516e 	movw	r1, #3438	@ 0xd6e
 8007e9c:	4849      	ldr	r0, [pc, #292]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007e9e:	f7f9 fb5d 	bl	800155c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d018      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d009      	beq.n	8007ee0 <UART_AdvFeatureConfig+0x178>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ed4:	d004      	beq.n	8007ee0 <UART_AdvFeatureConfig+0x178>
 8007ed6:	f640 5175 	movw	r1, #3445	@ 0xd75
 8007eda:	483a      	ldr	r0, [pc, #232]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007edc:	f7f9 fb3e 	bl	800155c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d06c      	beq.n	8007fdc <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a30      	ldr	r2, [pc, #192]	@ (8007fc8 <UART_AdvFeatureConfig+0x260>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d018      	beq.n	8007f3e <UART_AdvFeatureConfig+0x1d6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a2e      	ldr	r2, [pc, #184]	@ (8007fcc <UART_AdvFeatureConfig+0x264>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <UART_AdvFeatureConfig+0x1d6>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8007fd0 <UART_AdvFeatureConfig+0x268>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00e      	beq.n	8007f3e <UART_AdvFeatureConfig+0x1d6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a2b      	ldr	r2, [pc, #172]	@ (8007fd4 <UART_AdvFeatureConfig+0x26c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <UART_AdvFeatureConfig+0x1d6>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007fd8 <UART_AdvFeatureConfig+0x270>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <UART_AdvFeatureConfig+0x1d6>
 8007f34:	f640 517c 	movw	r1, #3452	@ 0xd7c
 8007f38:	4822      	ldr	r0, [pc, #136]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007f3a:	f7f9 fb0f 	bl	800155c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <UART_AdvFeatureConfig+0x1f2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f4e:	d004      	beq.n	8007f5a <UART_AdvFeatureConfig+0x1f2>
 8007f50:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8007f54:	481b      	ldr	r0, [pc, #108]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007f56:	f7f9 fb01 	bl	800155c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f78:	d130      	bne.n	8007fdc <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d013      	beq.n	8007faa <UART_AdvFeatureConfig+0x242>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f8a:	d00e      	beq.n	8007faa <UART_AdvFeatureConfig+0x242>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f94:	d009      	beq.n	8007faa <UART_AdvFeatureConfig+0x242>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f9e:	d004      	beq.n	8007faa <UART_AdvFeatureConfig+0x242>
 8007fa0:	f640 5182 	movw	r1, #3458	@ 0xd82
 8007fa4:	4807      	ldr	r0, [pc, #28]	@ (8007fc4 <UART_AdvFeatureConfig+0x25c>)
 8007fa6:	f7f9 fad9 	bl	800155c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	605a      	str	r2, [r3, #4]
 8007fc0:	e00c      	b.n	8007fdc <UART_AdvFeatureConfig+0x274>
 8007fc2:	bf00      	nop
 8007fc4:	0800917c 	.word	0x0800917c
 8007fc8:	40013800 	.word	0x40013800
 8007fcc:	40004400 	.word	0x40004400
 8007fd0:	40004800 	.word	0x40004800
 8007fd4:	40004c00 	.word	0x40004c00
 8007fd8:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d018      	beq.n	800801a <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <UART_AdvFeatureConfig+0x29c>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ff8:	d004      	beq.n	8008004 <UART_AdvFeatureConfig+0x29c>
 8007ffa:	f640 518a 	movw	r1, #3466	@ 0xd8a
 8007ffe:	4809      	ldr	r0, [pc, #36]	@ (8008024 <UART_AdvFeatureConfig+0x2bc>)
 8008000:	f7f9 faac 	bl	800155c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	605a      	str	r2, [r3, #4]
  }
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	0800917c 	.word	0x0800917c

08008028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b098      	sub	sp, #96	@ 0x60
 800802c:	af02      	add	r7, sp, #8
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008038:	f7fa f808 	bl	800204c <HAL_GetTick>
 800803c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b08      	cmp	r3, #8
 800804a:	d12e      	bne.n	80080aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008054:	2200      	movs	r2, #0
 8008056:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f88c 	bl	8008178 <UART_WaitOnFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d021      	beq.n	80080aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800807a:	653b      	str	r3, [r7, #80]	@ 0x50
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008084:	647b      	str	r3, [r7, #68]	@ 0x44
 8008086:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800808a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800808c:	e841 2300 	strex	r3, r2, [r1]
 8008090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e6      	bne.n	8008066 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e062      	b.n	8008170 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d149      	bne.n	800814c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c0:	2200      	movs	r2, #0
 80080c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f856 	bl	8008178 <UART_WaitOnFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d03c      	beq.n	800814c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	623b      	str	r3, [r7, #32]
   return(result);
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80080f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e6      	bne.n	80080d2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	60fb      	str	r3, [r7, #12]
   return(result);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0301 	bic.w	r3, r3, #1
 800811a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008124:	61fa      	str	r2, [r7, #28]
 8008126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	69b9      	ldr	r1, [r7, #24]
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	617b      	str	r3, [r7, #20]
   return(result);
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e5      	bne.n	8008104 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e011      	b.n	8008170 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3758      	adds	r7, #88	@ 0x58
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008188:	e04f      	b.n	800822a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d04b      	beq.n	800822a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008192:	f7f9 ff5b 	bl	800204c <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d302      	bcc.n	80081a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e04e      	b.n	800824a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d037      	beq.n	800822a <UART_WaitOnFlagUntilTimeout+0xb2>
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b80      	cmp	r3, #128	@ 0x80
 80081be:	d034      	beq.n	800822a <UART_WaitOnFlagUntilTimeout+0xb2>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b40      	cmp	r3, #64	@ 0x40
 80081c4:	d031      	beq.n	800822a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	f003 0308 	and.w	r3, r3, #8
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d110      	bne.n	80081f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2208      	movs	r2, #8
 80081da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 f838 	bl	8008252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2208      	movs	r2, #8
 80081e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e029      	b.n	800824a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008204:	d111      	bne.n	800822a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800820e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 f81e 	bl	8008252 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2220      	movs	r2, #32
 800821a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e00f      	b.n	800824a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4013      	ands	r3, r2
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	429a      	cmp	r2, r3
 8008238:	bf0c      	ite	eq
 800823a:	2301      	moveq	r3, #1
 800823c:	2300      	movne	r3, #0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	461a      	mov	r2, r3
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	429a      	cmp	r2, r3
 8008246:	d0a0      	beq.n	800818a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008252:	b480      	push	{r7}
 8008254:	b095      	sub	sp, #84	@ 0x54
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800826e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008278:	643b      	str	r3, [r7, #64]	@ 0x40
 800827a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800827e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008280:	e841 2300 	strex	r3, r2, [r1]
 8008284:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e6      	bne.n	800825a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	61fb      	str	r3, [r7, #28]
   return(result);
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f023 0301 	bic.w	r3, r3, #1
 80082a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3308      	adds	r3, #8
 80082aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e5      	bne.n	800828c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d118      	bne.n	80082fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f023 0310 	bic.w	r3, r3, #16
 80082dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6979      	ldr	r1, [r7, #20]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	613b      	str	r3, [r7, #16]
   return(result);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e6      	bne.n	80082c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2220      	movs	r2, #32
 80082fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800830e:	bf00      	nop
 8008310:	3754      	adds	r7, #84	@ 0x54
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008326:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7ff f9a1 	bl	8007680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008346:	b480      	push	{r7}
 8008348:	b08f      	sub	sp, #60	@ 0x3c
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008352:	2b21      	cmp	r3, #33	@ 0x21
 8008354:	d14c      	bne.n	80083f0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800835c:	b29b      	uxth	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d132      	bne.n	80083c8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	e853 3f00 	ldrex	r3, [r3]
 800836e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008376:	637b      	str	r3, [r7, #52]	@ 0x34
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008382:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008388:	e841 2300 	strex	r3, r2, [r1]
 800838c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e6      	bne.n	8008362 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b2:	61bb      	str	r3, [r7, #24]
 80083b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6979      	ldr	r1, [r7, #20]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	613b      	str	r3, [r7, #16]
   return(result);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e6      	bne.n	8008394 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80083c6:	e013      	b.n	80083f0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083cc:	781a      	ldrb	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80083f0:	bf00      	nop
 80083f2:	373c      	adds	r7, #60	@ 0x3c
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b091      	sub	sp, #68	@ 0x44
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008408:	2b21      	cmp	r3, #33	@ 0x21
 800840a:	d151      	bne.n	80084b0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d132      	bne.n	800847e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	623b      	str	r3, [r7, #32]
   return(result);
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800842c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	633b      	str	r3, [r7, #48]	@ 0x30
 8008438:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800843c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e6      	bne.n	8008418 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	e853 3f00 	ldrex	r3, [r3]
 8008456:	60fb      	str	r3, [r7, #12]
   return(result);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	69b9      	ldr	r1, [r7, #24]
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	617b      	str	r3, [r7, #20]
   return(result);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e6      	bne.n	800844a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800847c:	e018      	b.n	80084b0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008482:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008486:	881a      	ldrh	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008490:	b292      	uxth	r2, r2
 8008492:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008498:	1c9a      	adds	r2, r3, #2
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80084b0:	bf00      	nop
 80084b2:	3744      	adds	r7, #68	@ 0x44
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b088      	sub	sp, #32
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	6979      	ldr	r1, [r7, #20]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	613b      	str	r3, [r7, #16]
   return(result);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e6      	bne.n	80084c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7f8 fd06 	bl	8000f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008508:	bf00      	nop
 800850a:	3720      	adds	r7, #32
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <calloc>:
 8008524:	4b02      	ldr	r3, [pc, #8]	@ (8008530 <calloc+0xc>)
 8008526:	460a      	mov	r2, r1
 8008528:	4601      	mov	r1, r0
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	f000 b802 	b.w	8008534 <_calloc_r>
 8008530:	20000010 	.word	0x20000010

08008534 <_calloc_r>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	fba1 5402 	umull	r5, r4, r1, r2
 800853a:	b934      	cbnz	r4, 800854a <_calloc_r+0x16>
 800853c:	4629      	mov	r1, r5
 800853e:	f000 f837 	bl	80085b0 <_malloc_r>
 8008542:	4606      	mov	r6, r0
 8008544:	b928      	cbnz	r0, 8008552 <_calloc_r+0x1e>
 8008546:	4630      	mov	r0, r6
 8008548:	bd70      	pop	{r4, r5, r6, pc}
 800854a:	220c      	movs	r2, #12
 800854c:	6002      	str	r2, [r0, #0]
 800854e:	2600      	movs	r6, #0
 8008550:	e7f9      	b.n	8008546 <_calloc_r+0x12>
 8008552:	462a      	mov	r2, r5
 8008554:	4621      	mov	r1, r4
 8008556:	f000 f8ed 	bl	8008734 <memset>
 800855a:	e7f4      	b.n	8008546 <_calloc_r+0x12>

0800855c <free>:
 800855c:	4b02      	ldr	r3, [pc, #8]	@ (8008568 <free+0xc>)
 800855e:	4601      	mov	r1, r0
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	f000 b939 	b.w	80087d8 <_free_r>
 8008566:	bf00      	nop
 8008568:	20000010 	.word	0x20000010

0800856c <sbrk_aligned>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4e0f      	ldr	r6, [pc, #60]	@ (80085ac <sbrk_aligned+0x40>)
 8008570:	460c      	mov	r4, r1
 8008572:	6831      	ldr	r1, [r6, #0]
 8008574:	4605      	mov	r5, r0
 8008576:	b911      	cbnz	r1, 800857e <sbrk_aligned+0x12>
 8008578:	f000 f8e4 	bl	8008744 <_sbrk_r>
 800857c:	6030      	str	r0, [r6, #0]
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f000 f8df 	bl	8008744 <_sbrk_r>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d103      	bne.n	8008592 <sbrk_aligned+0x26>
 800858a:	f04f 34ff 	mov.w	r4, #4294967295
 800858e:	4620      	mov	r0, r4
 8008590:	bd70      	pop	{r4, r5, r6, pc}
 8008592:	1cc4      	adds	r4, r0, #3
 8008594:	f024 0403 	bic.w	r4, r4, #3
 8008598:	42a0      	cmp	r0, r4
 800859a:	d0f8      	beq.n	800858e <sbrk_aligned+0x22>
 800859c:	1a21      	subs	r1, r4, r0
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 f8d0 	bl	8008744 <_sbrk_r>
 80085a4:	3001      	adds	r0, #1
 80085a6:	d1f2      	bne.n	800858e <sbrk_aligned+0x22>
 80085a8:	e7ef      	b.n	800858a <sbrk_aligned+0x1e>
 80085aa:	bf00      	nop
 80085ac:	20000984 	.word	0x20000984

080085b0 <_malloc_r>:
 80085b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b4:	1ccd      	adds	r5, r1, #3
 80085b6:	f025 0503 	bic.w	r5, r5, #3
 80085ba:	3508      	adds	r5, #8
 80085bc:	2d0c      	cmp	r5, #12
 80085be:	bf38      	it	cc
 80085c0:	250c      	movcc	r5, #12
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	4606      	mov	r6, r0
 80085c6:	db01      	blt.n	80085cc <_malloc_r+0x1c>
 80085c8:	42a9      	cmp	r1, r5
 80085ca:	d904      	bls.n	80085d6 <_malloc_r+0x26>
 80085cc:	230c      	movs	r3, #12
 80085ce:	6033      	str	r3, [r6, #0]
 80085d0:	2000      	movs	r0, #0
 80085d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086ac <_malloc_r+0xfc>
 80085da:	f000 f869 	bl	80086b0 <__malloc_lock>
 80085de:	f8d8 3000 	ldr.w	r3, [r8]
 80085e2:	461c      	mov	r4, r3
 80085e4:	bb44      	cbnz	r4, 8008638 <_malloc_r+0x88>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff ffbf 	bl	800856c <sbrk_aligned>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	4604      	mov	r4, r0
 80085f2:	d158      	bne.n	80086a6 <_malloc_r+0xf6>
 80085f4:	f8d8 4000 	ldr.w	r4, [r8]
 80085f8:	4627      	mov	r7, r4
 80085fa:	2f00      	cmp	r7, #0
 80085fc:	d143      	bne.n	8008686 <_malloc_r+0xd6>
 80085fe:	2c00      	cmp	r4, #0
 8008600:	d04b      	beq.n	800869a <_malloc_r+0xea>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	4639      	mov	r1, r7
 8008606:	4630      	mov	r0, r6
 8008608:	eb04 0903 	add.w	r9, r4, r3
 800860c:	f000 f89a 	bl	8008744 <_sbrk_r>
 8008610:	4581      	cmp	r9, r0
 8008612:	d142      	bne.n	800869a <_malloc_r+0xea>
 8008614:	6821      	ldr	r1, [r4, #0]
 8008616:	1a6d      	subs	r5, r5, r1
 8008618:	4629      	mov	r1, r5
 800861a:	4630      	mov	r0, r6
 800861c:	f7ff ffa6 	bl	800856c <sbrk_aligned>
 8008620:	3001      	adds	r0, #1
 8008622:	d03a      	beq.n	800869a <_malloc_r+0xea>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	442b      	add	r3, r5
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	f8d8 3000 	ldr.w	r3, [r8]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	bb62      	cbnz	r2, 800868c <_malloc_r+0xdc>
 8008632:	f8c8 7000 	str.w	r7, [r8]
 8008636:	e00f      	b.n	8008658 <_malloc_r+0xa8>
 8008638:	6822      	ldr	r2, [r4, #0]
 800863a:	1b52      	subs	r2, r2, r5
 800863c:	d420      	bmi.n	8008680 <_malloc_r+0xd0>
 800863e:	2a0b      	cmp	r2, #11
 8008640:	d917      	bls.n	8008672 <_malloc_r+0xc2>
 8008642:	1961      	adds	r1, r4, r5
 8008644:	42a3      	cmp	r3, r4
 8008646:	6025      	str	r5, [r4, #0]
 8008648:	bf18      	it	ne
 800864a:	6059      	strne	r1, [r3, #4]
 800864c:	6863      	ldr	r3, [r4, #4]
 800864e:	bf08      	it	eq
 8008650:	f8c8 1000 	streq.w	r1, [r8]
 8008654:	5162      	str	r2, [r4, r5]
 8008656:	604b      	str	r3, [r1, #4]
 8008658:	4630      	mov	r0, r6
 800865a:	f000 f82f 	bl	80086bc <__malloc_unlock>
 800865e:	f104 000b 	add.w	r0, r4, #11
 8008662:	1d23      	adds	r3, r4, #4
 8008664:	f020 0007 	bic.w	r0, r0, #7
 8008668:	1ac2      	subs	r2, r0, r3
 800866a:	bf1c      	itt	ne
 800866c:	1a1b      	subne	r3, r3, r0
 800866e:	50a3      	strne	r3, [r4, r2]
 8008670:	e7af      	b.n	80085d2 <_malloc_r+0x22>
 8008672:	6862      	ldr	r2, [r4, #4]
 8008674:	42a3      	cmp	r3, r4
 8008676:	bf0c      	ite	eq
 8008678:	f8c8 2000 	streq.w	r2, [r8]
 800867c:	605a      	strne	r2, [r3, #4]
 800867e:	e7eb      	b.n	8008658 <_malloc_r+0xa8>
 8008680:	4623      	mov	r3, r4
 8008682:	6864      	ldr	r4, [r4, #4]
 8008684:	e7ae      	b.n	80085e4 <_malloc_r+0x34>
 8008686:	463c      	mov	r4, r7
 8008688:	687f      	ldr	r7, [r7, #4]
 800868a:	e7b6      	b.n	80085fa <_malloc_r+0x4a>
 800868c:	461a      	mov	r2, r3
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	42a3      	cmp	r3, r4
 8008692:	d1fb      	bne.n	800868c <_malloc_r+0xdc>
 8008694:	2300      	movs	r3, #0
 8008696:	6053      	str	r3, [r2, #4]
 8008698:	e7de      	b.n	8008658 <_malloc_r+0xa8>
 800869a:	230c      	movs	r3, #12
 800869c:	6033      	str	r3, [r6, #0]
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 f80c 	bl	80086bc <__malloc_unlock>
 80086a4:	e794      	b.n	80085d0 <_malloc_r+0x20>
 80086a6:	6005      	str	r5, [r0, #0]
 80086a8:	e7d6      	b.n	8008658 <_malloc_r+0xa8>
 80086aa:	bf00      	nop
 80086ac:	20000988 	.word	0x20000988

080086b0 <__malloc_lock>:
 80086b0:	4801      	ldr	r0, [pc, #4]	@ (80086b8 <__malloc_lock+0x8>)
 80086b2:	f000 b881 	b.w	80087b8 <__retarget_lock_acquire_recursive>
 80086b6:	bf00      	nop
 80086b8:	20000ac8 	.word	0x20000ac8

080086bc <__malloc_unlock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	@ (80086c4 <__malloc_unlock+0x8>)
 80086be:	f000 b87c 	b.w	80087ba <__retarget_lock_release_recursive>
 80086c2:	bf00      	nop
 80086c4:	20000ac8 	.word	0x20000ac8

080086c8 <sniprintf>:
 80086c8:	b40c      	push	{r2, r3}
 80086ca:	b530      	push	{r4, r5, lr}
 80086cc:	4b18      	ldr	r3, [pc, #96]	@ (8008730 <sniprintf+0x68>)
 80086ce:	1e0c      	subs	r4, r1, #0
 80086d0:	681d      	ldr	r5, [r3, #0]
 80086d2:	b09d      	sub	sp, #116	@ 0x74
 80086d4:	da08      	bge.n	80086e8 <sniprintf+0x20>
 80086d6:	238b      	movs	r3, #139	@ 0x8b
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	b01d      	add	sp, #116	@ 0x74
 80086e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086e4:	b002      	add	sp, #8
 80086e6:	4770      	bx	lr
 80086e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80086ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80086f6:	bf14      	ite	ne
 80086f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086fc:	4623      	moveq	r3, r4
 80086fe:	9304      	str	r3, [sp, #16]
 8008700:	9307      	str	r3, [sp, #28]
 8008702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008706:	9002      	str	r0, [sp, #8]
 8008708:	9006      	str	r0, [sp, #24]
 800870a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800870e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008710:	ab21      	add	r3, sp, #132	@ 0x84
 8008712:	a902      	add	r1, sp, #8
 8008714:	4628      	mov	r0, r5
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	f000 f904 	bl	8008924 <_svfiprintf_r>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	bfbc      	itt	lt
 8008720:	238b      	movlt	r3, #139	@ 0x8b
 8008722:	602b      	strlt	r3, [r5, #0]
 8008724:	2c00      	cmp	r4, #0
 8008726:	d0da      	beq.n	80086de <sniprintf+0x16>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	e7d6      	b.n	80086de <sniprintf+0x16>
 8008730:	20000010 	.word	0x20000010

08008734 <memset>:
 8008734:	4402      	add	r2, r0
 8008736:	4603      	mov	r3, r0
 8008738:	4293      	cmp	r3, r2
 800873a:	d100      	bne.n	800873e <memset+0xa>
 800873c:	4770      	bx	lr
 800873e:	f803 1b01 	strb.w	r1, [r3], #1
 8008742:	e7f9      	b.n	8008738 <memset+0x4>

08008744 <_sbrk_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d06      	ldr	r5, [pc, #24]	@ (8008760 <_sbrk_r+0x1c>)
 8008748:	2300      	movs	r3, #0
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	602b      	str	r3, [r5, #0]
 8008750:	f7f9 f89c 	bl	800188c <_sbrk>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_sbrk_r+0x1a>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_sbrk_r+0x1a>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	20000ac4 	.word	0x20000ac4

08008764 <__errno>:
 8008764:	4b01      	ldr	r3, [pc, #4]	@ (800876c <__errno+0x8>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000010 	.word	0x20000010

08008770 <__libc_init_array>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4d0d      	ldr	r5, [pc, #52]	@ (80087a8 <__libc_init_array+0x38>)
 8008774:	4c0d      	ldr	r4, [pc, #52]	@ (80087ac <__libc_init_array+0x3c>)
 8008776:	1b64      	subs	r4, r4, r5
 8008778:	10a4      	asrs	r4, r4, #2
 800877a:	2600      	movs	r6, #0
 800877c:	42a6      	cmp	r6, r4
 800877e:	d109      	bne.n	8008794 <__libc_init_array+0x24>
 8008780:	4d0b      	ldr	r5, [pc, #44]	@ (80087b0 <__libc_init_array+0x40>)
 8008782:	4c0c      	ldr	r4, [pc, #48]	@ (80087b4 <__libc_init_array+0x44>)
 8008784:	f000 fba6 	bl	8008ed4 <_init>
 8008788:	1b64      	subs	r4, r4, r5
 800878a:	10a4      	asrs	r4, r4, #2
 800878c:	2600      	movs	r6, #0
 800878e:	42a6      	cmp	r6, r4
 8008790:	d105      	bne.n	800879e <__libc_init_array+0x2e>
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	f855 3b04 	ldr.w	r3, [r5], #4
 8008798:	4798      	blx	r3
 800879a:	3601      	adds	r6, #1
 800879c:	e7ee      	b.n	800877c <__libc_init_array+0xc>
 800879e:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a2:	4798      	blx	r3
 80087a4:	3601      	adds	r6, #1
 80087a6:	e7f2      	b.n	800878e <__libc_init_array+0x1e>
 80087a8:	0800923c 	.word	0x0800923c
 80087ac:	0800923c 	.word	0x0800923c
 80087b0:	0800923c 	.word	0x0800923c
 80087b4:	08009240 	.word	0x08009240

080087b8 <__retarget_lock_acquire_recursive>:
 80087b8:	4770      	bx	lr

080087ba <__retarget_lock_release_recursive>:
 80087ba:	4770      	bx	lr

080087bc <memcpy>:
 80087bc:	440a      	add	r2, r1
 80087be:	4291      	cmp	r1, r2
 80087c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c4:	d100      	bne.n	80087c8 <memcpy+0xc>
 80087c6:	4770      	bx	lr
 80087c8:	b510      	push	{r4, lr}
 80087ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d2:	4291      	cmp	r1, r2
 80087d4:	d1f9      	bne.n	80087ca <memcpy+0xe>
 80087d6:	bd10      	pop	{r4, pc}

080087d8 <_free_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4605      	mov	r5, r0
 80087dc:	2900      	cmp	r1, #0
 80087de:	d041      	beq.n	8008864 <_free_r+0x8c>
 80087e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e4:	1f0c      	subs	r4, r1, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bfb8      	it	lt
 80087ea:	18e4      	addlt	r4, r4, r3
 80087ec:	f7ff ff60 	bl	80086b0 <__malloc_lock>
 80087f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008868 <_free_r+0x90>)
 80087f2:	6813      	ldr	r3, [r2, #0]
 80087f4:	b933      	cbnz	r3, 8008804 <_free_r+0x2c>
 80087f6:	6063      	str	r3, [r4, #4]
 80087f8:	6014      	str	r4, [r2, #0]
 80087fa:	4628      	mov	r0, r5
 80087fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008800:	f7ff bf5c 	b.w	80086bc <__malloc_unlock>
 8008804:	42a3      	cmp	r3, r4
 8008806:	d908      	bls.n	800881a <_free_r+0x42>
 8008808:	6820      	ldr	r0, [r4, #0]
 800880a:	1821      	adds	r1, r4, r0
 800880c:	428b      	cmp	r3, r1
 800880e:	bf01      	itttt	eq
 8008810:	6819      	ldreq	r1, [r3, #0]
 8008812:	685b      	ldreq	r3, [r3, #4]
 8008814:	1809      	addeq	r1, r1, r0
 8008816:	6021      	streq	r1, [r4, #0]
 8008818:	e7ed      	b.n	80087f6 <_free_r+0x1e>
 800881a:	461a      	mov	r2, r3
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	b10b      	cbz	r3, 8008824 <_free_r+0x4c>
 8008820:	42a3      	cmp	r3, r4
 8008822:	d9fa      	bls.n	800881a <_free_r+0x42>
 8008824:	6811      	ldr	r1, [r2, #0]
 8008826:	1850      	adds	r0, r2, r1
 8008828:	42a0      	cmp	r0, r4
 800882a:	d10b      	bne.n	8008844 <_free_r+0x6c>
 800882c:	6820      	ldr	r0, [r4, #0]
 800882e:	4401      	add	r1, r0
 8008830:	1850      	adds	r0, r2, r1
 8008832:	4283      	cmp	r3, r0
 8008834:	6011      	str	r1, [r2, #0]
 8008836:	d1e0      	bne.n	80087fa <_free_r+0x22>
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	6053      	str	r3, [r2, #4]
 800883e:	4408      	add	r0, r1
 8008840:	6010      	str	r0, [r2, #0]
 8008842:	e7da      	b.n	80087fa <_free_r+0x22>
 8008844:	d902      	bls.n	800884c <_free_r+0x74>
 8008846:	230c      	movs	r3, #12
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	e7d6      	b.n	80087fa <_free_r+0x22>
 800884c:	6820      	ldr	r0, [r4, #0]
 800884e:	1821      	adds	r1, r4, r0
 8008850:	428b      	cmp	r3, r1
 8008852:	bf04      	itt	eq
 8008854:	6819      	ldreq	r1, [r3, #0]
 8008856:	685b      	ldreq	r3, [r3, #4]
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	bf04      	itt	eq
 800885c:	1809      	addeq	r1, r1, r0
 800885e:	6021      	streq	r1, [r4, #0]
 8008860:	6054      	str	r4, [r2, #4]
 8008862:	e7ca      	b.n	80087fa <_free_r+0x22>
 8008864:	bd38      	pop	{r3, r4, r5, pc}
 8008866:	bf00      	nop
 8008868:	20000988 	.word	0x20000988

0800886c <__ssputs_r>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	688e      	ldr	r6, [r1, #8]
 8008872:	461f      	mov	r7, r3
 8008874:	42be      	cmp	r6, r7
 8008876:	680b      	ldr	r3, [r1, #0]
 8008878:	4682      	mov	sl, r0
 800887a:	460c      	mov	r4, r1
 800887c:	4690      	mov	r8, r2
 800887e:	d82d      	bhi.n	80088dc <__ssputs_r+0x70>
 8008880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008884:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008888:	d026      	beq.n	80088d8 <__ssputs_r+0x6c>
 800888a:	6965      	ldr	r5, [r4, #20]
 800888c:	6909      	ldr	r1, [r1, #16]
 800888e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008892:	eba3 0901 	sub.w	r9, r3, r1
 8008896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800889a:	1c7b      	adds	r3, r7, #1
 800889c:	444b      	add	r3, r9
 800889e:	106d      	asrs	r5, r5, #1
 80088a0:	429d      	cmp	r5, r3
 80088a2:	bf38      	it	cc
 80088a4:	461d      	movcc	r5, r3
 80088a6:	0553      	lsls	r3, r2, #21
 80088a8:	d527      	bpl.n	80088fa <__ssputs_r+0x8e>
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7ff fe80 	bl	80085b0 <_malloc_r>
 80088b0:	4606      	mov	r6, r0
 80088b2:	b360      	cbz	r0, 800890e <__ssputs_r+0xa2>
 80088b4:	6921      	ldr	r1, [r4, #16]
 80088b6:	464a      	mov	r2, r9
 80088b8:	f7ff ff80 	bl	80087bc <memcpy>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	6126      	str	r6, [r4, #16]
 80088ca:	6165      	str	r5, [r4, #20]
 80088cc:	444e      	add	r6, r9
 80088ce:	eba5 0509 	sub.w	r5, r5, r9
 80088d2:	6026      	str	r6, [r4, #0]
 80088d4:	60a5      	str	r5, [r4, #8]
 80088d6:	463e      	mov	r6, r7
 80088d8:	42be      	cmp	r6, r7
 80088da:	d900      	bls.n	80088de <__ssputs_r+0x72>
 80088dc:	463e      	mov	r6, r7
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	4632      	mov	r2, r6
 80088e2:	4641      	mov	r1, r8
 80088e4:	f000 faa6 	bl	8008e34 <memmove>
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	1b9b      	subs	r3, r3, r6
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	4433      	add	r3, r6
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	2000      	movs	r0, #0
 80088f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fa:	462a      	mov	r2, r5
 80088fc:	f000 fab4 	bl	8008e68 <_realloc_r>
 8008900:	4606      	mov	r6, r0
 8008902:	2800      	cmp	r0, #0
 8008904:	d1e0      	bne.n	80088c8 <__ssputs_r+0x5c>
 8008906:	6921      	ldr	r1, [r4, #16]
 8008908:	4650      	mov	r0, sl
 800890a:	f7ff ff65 	bl	80087d8 <_free_r>
 800890e:	230c      	movs	r3, #12
 8008910:	f8ca 3000 	str.w	r3, [sl]
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	e7e9      	b.n	80088f6 <__ssputs_r+0x8a>
	...

08008924 <_svfiprintf_r>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	4698      	mov	r8, r3
 800892a:	898b      	ldrh	r3, [r1, #12]
 800892c:	061b      	lsls	r3, r3, #24
 800892e:	b09d      	sub	sp, #116	@ 0x74
 8008930:	4607      	mov	r7, r0
 8008932:	460d      	mov	r5, r1
 8008934:	4614      	mov	r4, r2
 8008936:	d510      	bpl.n	800895a <_svfiprintf_r+0x36>
 8008938:	690b      	ldr	r3, [r1, #16]
 800893a:	b973      	cbnz	r3, 800895a <_svfiprintf_r+0x36>
 800893c:	2140      	movs	r1, #64	@ 0x40
 800893e:	f7ff fe37 	bl	80085b0 <_malloc_r>
 8008942:	6028      	str	r0, [r5, #0]
 8008944:	6128      	str	r0, [r5, #16]
 8008946:	b930      	cbnz	r0, 8008956 <_svfiprintf_r+0x32>
 8008948:	230c      	movs	r3, #12
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	b01d      	add	sp, #116	@ 0x74
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008956:	2340      	movs	r3, #64	@ 0x40
 8008958:	616b      	str	r3, [r5, #20]
 800895a:	2300      	movs	r3, #0
 800895c:	9309      	str	r3, [sp, #36]	@ 0x24
 800895e:	2320      	movs	r3, #32
 8008960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008964:	f8cd 800c 	str.w	r8, [sp, #12]
 8008968:	2330      	movs	r3, #48	@ 0x30
 800896a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b08 <_svfiprintf_r+0x1e4>
 800896e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008972:	f04f 0901 	mov.w	r9, #1
 8008976:	4623      	mov	r3, r4
 8008978:	469a      	mov	sl, r3
 800897a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800897e:	b10a      	cbz	r2, 8008984 <_svfiprintf_r+0x60>
 8008980:	2a25      	cmp	r2, #37	@ 0x25
 8008982:	d1f9      	bne.n	8008978 <_svfiprintf_r+0x54>
 8008984:	ebba 0b04 	subs.w	fp, sl, r4
 8008988:	d00b      	beq.n	80089a2 <_svfiprintf_r+0x7e>
 800898a:	465b      	mov	r3, fp
 800898c:	4622      	mov	r2, r4
 800898e:	4629      	mov	r1, r5
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff ff6b 	bl	800886c <__ssputs_r>
 8008996:	3001      	adds	r0, #1
 8008998:	f000 80a7 	beq.w	8008aea <_svfiprintf_r+0x1c6>
 800899c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800899e:	445a      	add	r2, fp
 80089a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80089a2:	f89a 3000 	ldrb.w	r3, [sl]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 809f 	beq.w	8008aea <_svfiprintf_r+0x1c6>
 80089ac:	2300      	movs	r3, #0
 80089ae:	f04f 32ff 	mov.w	r2, #4294967295
 80089b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b6:	f10a 0a01 	add.w	sl, sl, #1
 80089ba:	9304      	str	r3, [sp, #16]
 80089bc:	9307      	str	r3, [sp, #28]
 80089be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80089c4:	4654      	mov	r4, sl
 80089c6:	2205      	movs	r2, #5
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	484e      	ldr	r0, [pc, #312]	@ (8008b08 <_svfiprintf_r+0x1e4>)
 80089ce:	f7f7 fc07 	bl	80001e0 <memchr>
 80089d2:	9a04      	ldr	r2, [sp, #16]
 80089d4:	b9d8      	cbnz	r0, 8008a0e <_svfiprintf_r+0xea>
 80089d6:	06d0      	lsls	r0, r2, #27
 80089d8:	bf44      	itt	mi
 80089da:	2320      	movmi	r3, #32
 80089dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089e0:	0711      	lsls	r1, r2, #28
 80089e2:	bf44      	itt	mi
 80089e4:	232b      	movmi	r3, #43	@ 0x2b
 80089e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ea:	f89a 3000 	ldrb.w	r3, [sl]
 80089ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80089f0:	d015      	beq.n	8008a1e <_svfiprintf_r+0xfa>
 80089f2:	9a07      	ldr	r2, [sp, #28]
 80089f4:	4654      	mov	r4, sl
 80089f6:	2000      	movs	r0, #0
 80089f8:	f04f 0c0a 	mov.w	ip, #10
 80089fc:	4621      	mov	r1, r4
 80089fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a02:	3b30      	subs	r3, #48	@ 0x30
 8008a04:	2b09      	cmp	r3, #9
 8008a06:	d94b      	bls.n	8008aa0 <_svfiprintf_r+0x17c>
 8008a08:	b1b0      	cbz	r0, 8008a38 <_svfiprintf_r+0x114>
 8008a0a:	9207      	str	r2, [sp, #28]
 8008a0c:	e014      	b.n	8008a38 <_svfiprintf_r+0x114>
 8008a0e:	eba0 0308 	sub.w	r3, r0, r8
 8008a12:	fa09 f303 	lsl.w	r3, r9, r3
 8008a16:	4313      	orrs	r3, r2
 8008a18:	9304      	str	r3, [sp, #16]
 8008a1a:	46a2      	mov	sl, r4
 8008a1c:	e7d2      	b.n	80089c4 <_svfiprintf_r+0xa0>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	1d19      	adds	r1, r3, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	9103      	str	r1, [sp, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfbb      	ittet	lt
 8008a2a:	425b      	neglt	r3, r3
 8008a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a30:	9307      	strge	r3, [sp, #28]
 8008a32:	9307      	strlt	r3, [sp, #28]
 8008a34:	bfb8      	it	lt
 8008a36:	9204      	strlt	r2, [sp, #16]
 8008a38:	7823      	ldrb	r3, [r4, #0]
 8008a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a3c:	d10a      	bne.n	8008a54 <_svfiprintf_r+0x130>
 8008a3e:	7863      	ldrb	r3, [r4, #1]
 8008a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a42:	d132      	bne.n	8008aaa <_svfiprintf_r+0x186>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	1d1a      	adds	r2, r3, #4
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	9203      	str	r2, [sp, #12]
 8008a4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a50:	3402      	adds	r4, #2
 8008a52:	9305      	str	r3, [sp, #20]
 8008a54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b18 <_svfiprintf_r+0x1f4>
 8008a58:	7821      	ldrb	r1, [r4, #0]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	4650      	mov	r0, sl
 8008a5e:	f7f7 fbbf 	bl	80001e0 <memchr>
 8008a62:	b138      	cbz	r0, 8008a74 <_svfiprintf_r+0x150>
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	eba0 000a 	sub.w	r0, r0, sl
 8008a6a:	2240      	movs	r2, #64	@ 0x40
 8008a6c:	4082      	lsls	r2, r0
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	3401      	adds	r4, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a78:	4824      	ldr	r0, [pc, #144]	@ (8008b0c <_svfiprintf_r+0x1e8>)
 8008a7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a7e:	2206      	movs	r2, #6
 8008a80:	f7f7 fbae 	bl	80001e0 <memchr>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d036      	beq.n	8008af6 <_svfiprintf_r+0x1d2>
 8008a88:	4b21      	ldr	r3, [pc, #132]	@ (8008b10 <_svfiprintf_r+0x1ec>)
 8008a8a:	bb1b      	cbnz	r3, 8008ad4 <_svfiprintf_r+0x1b0>
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	3307      	adds	r3, #7
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	3308      	adds	r3, #8
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9a:	4433      	add	r3, r6
 8008a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a9e:	e76a      	b.n	8008976 <_svfiprintf_r+0x52>
 8008aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	e7a8      	b.n	80089fc <_svfiprintf_r+0xd8>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	3401      	adds	r4, #1
 8008aae:	9305      	str	r3, [sp, #20]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	f04f 0c0a 	mov.w	ip, #10
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008abc:	3a30      	subs	r2, #48	@ 0x30
 8008abe:	2a09      	cmp	r2, #9
 8008ac0:	d903      	bls.n	8008aca <_svfiprintf_r+0x1a6>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0c6      	beq.n	8008a54 <_svfiprintf_r+0x130>
 8008ac6:	9105      	str	r1, [sp, #20]
 8008ac8:	e7c4      	b.n	8008a54 <_svfiprintf_r+0x130>
 8008aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ace:	4604      	mov	r4, r0
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e7f0      	b.n	8008ab6 <_svfiprintf_r+0x192>
 8008ad4:	ab03      	add	r3, sp, #12
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4b0e      	ldr	r3, [pc, #56]	@ (8008b14 <_svfiprintf_r+0x1f0>)
 8008adc:	a904      	add	r1, sp, #16
 8008ade:	4638      	mov	r0, r7
 8008ae0:	f3af 8000 	nop.w
 8008ae4:	1c42      	adds	r2, r0, #1
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	d1d6      	bne.n	8008a98 <_svfiprintf_r+0x174>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	065b      	lsls	r3, r3, #25
 8008aee:	f53f af2d 	bmi.w	800894c <_svfiprintf_r+0x28>
 8008af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008af4:	e72c      	b.n	8008950 <_svfiprintf_r+0x2c>
 8008af6:	ab03      	add	r3, sp, #12
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	462a      	mov	r2, r5
 8008afc:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <_svfiprintf_r+0x1f0>)
 8008afe:	a904      	add	r1, sp, #16
 8008b00:	4638      	mov	r0, r7
 8008b02:	f000 f879 	bl	8008bf8 <_printf_i>
 8008b06:	e7ed      	b.n	8008ae4 <_svfiprintf_r+0x1c0>
 8008b08:	08009200 	.word	0x08009200
 8008b0c:	0800920a 	.word	0x0800920a
 8008b10:	00000000 	.word	0x00000000
 8008b14:	0800886d 	.word	0x0800886d
 8008b18:	08009206 	.word	0x08009206

08008b1c <_printf_common>:
 8008b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	4616      	mov	r6, r2
 8008b22:	4698      	mov	r8, r3
 8008b24:	688a      	ldr	r2, [r1, #8]
 8008b26:	690b      	ldr	r3, [r1, #16]
 8008b28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bfb8      	it	lt
 8008b30:	4613      	movlt	r3, r2
 8008b32:	6033      	str	r3, [r6, #0]
 8008b34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b38:	4607      	mov	r7, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	b10a      	cbz	r2, 8008b42 <_printf_common+0x26>
 8008b3e:	3301      	adds	r3, #1
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	0699      	lsls	r1, r3, #26
 8008b46:	bf42      	ittt	mi
 8008b48:	6833      	ldrmi	r3, [r6, #0]
 8008b4a:	3302      	addmi	r3, #2
 8008b4c:	6033      	strmi	r3, [r6, #0]
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	f015 0506 	ands.w	r5, r5, #6
 8008b54:	d106      	bne.n	8008b64 <_printf_common+0x48>
 8008b56:	f104 0a19 	add.w	sl, r4, #25
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	6832      	ldr	r2, [r6, #0]
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	dc26      	bgt.n	8008bb2 <_printf_common+0x96>
 8008b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	3b00      	subs	r3, #0
 8008b6c:	bf18      	it	ne
 8008b6e:	2301      	movne	r3, #1
 8008b70:	0692      	lsls	r2, r2, #26
 8008b72:	d42b      	bmi.n	8008bcc <_printf_common+0xb0>
 8008b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b78:	4641      	mov	r1, r8
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	47c8      	blx	r9
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d01e      	beq.n	8008bc0 <_printf_common+0xa4>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	6922      	ldr	r2, [r4, #16]
 8008b86:	f003 0306 	and.w	r3, r3, #6
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	bf02      	ittt	eq
 8008b8e:	68e5      	ldreq	r5, [r4, #12]
 8008b90:	6833      	ldreq	r3, [r6, #0]
 8008b92:	1aed      	subeq	r5, r5, r3
 8008b94:	68a3      	ldr	r3, [r4, #8]
 8008b96:	bf0c      	ite	eq
 8008b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b9c:	2500      	movne	r5, #0
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bfc4      	itt	gt
 8008ba2:	1a9b      	subgt	r3, r3, r2
 8008ba4:	18ed      	addgt	r5, r5, r3
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	341a      	adds	r4, #26
 8008baa:	42b5      	cmp	r5, r6
 8008bac:	d11a      	bne.n	8008be4 <_printf_common+0xc8>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e008      	b.n	8008bc4 <_printf_common+0xa8>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	4641      	mov	r1, r8
 8008bb8:	4638      	mov	r0, r7
 8008bba:	47c8      	blx	r9
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d103      	bne.n	8008bc8 <_printf_common+0xac>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc8:	3501      	adds	r5, #1
 8008bca:	e7c6      	b.n	8008b5a <_printf_common+0x3e>
 8008bcc:	18e1      	adds	r1, r4, r3
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	2030      	movs	r0, #48	@ 0x30
 8008bd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bd6:	4422      	add	r2, r4
 8008bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008be0:	3302      	adds	r3, #2
 8008be2:	e7c7      	b.n	8008b74 <_printf_common+0x58>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4622      	mov	r2, r4
 8008be8:	4641      	mov	r1, r8
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c8      	blx	r9
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d0e6      	beq.n	8008bc0 <_printf_common+0xa4>
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	e7d9      	b.n	8008baa <_printf_common+0x8e>
	...

08008bf8 <_printf_i>:
 8008bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	7e0f      	ldrb	r7, [r1, #24]
 8008bfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c00:	2f78      	cmp	r7, #120	@ 0x78
 8008c02:	4691      	mov	r9, r2
 8008c04:	4680      	mov	r8, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	469a      	mov	sl, r3
 8008c0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c0e:	d807      	bhi.n	8008c20 <_printf_i+0x28>
 8008c10:	2f62      	cmp	r7, #98	@ 0x62
 8008c12:	d80a      	bhi.n	8008c2a <_printf_i+0x32>
 8008c14:	2f00      	cmp	r7, #0
 8008c16:	f000 80d1 	beq.w	8008dbc <_printf_i+0x1c4>
 8008c1a:	2f58      	cmp	r7, #88	@ 0x58
 8008c1c:	f000 80b8 	beq.w	8008d90 <_printf_i+0x198>
 8008c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c28:	e03a      	b.n	8008ca0 <_printf_i+0xa8>
 8008c2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c2e:	2b15      	cmp	r3, #21
 8008c30:	d8f6      	bhi.n	8008c20 <_printf_i+0x28>
 8008c32:	a101      	add	r1, pc, #4	@ (adr r1, 8008c38 <_printf_i+0x40>)
 8008c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c38:	08008c91 	.word	0x08008c91
 8008c3c:	08008ca5 	.word	0x08008ca5
 8008c40:	08008c21 	.word	0x08008c21
 8008c44:	08008c21 	.word	0x08008c21
 8008c48:	08008c21 	.word	0x08008c21
 8008c4c:	08008c21 	.word	0x08008c21
 8008c50:	08008ca5 	.word	0x08008ca5
 8008c54:	08008c21 	.word	0x08008c21
 8008c58:	08008c21 	.word	0x08008c21
 8008c5c:	08008c21 	.word	0x08008c21
 8008c60:	08008c21 	.word	0x08008c21
 8008c64:	08008da3 	.word	0x08008da3
 8008c68:	08008ccf 	.word	0x08008ccf
 8008c6c:	08008d5d 	.word	0x08008d5d
 8008c70:	08008c21 	.word	0x08008c21
 8008c74:	08008c21 	.word	0x08008c21
 8008c78:	08008dc5 	.word	0x08008dc5
 8008c7c:	08008c21 	.word	0x08008c21
 8008c80:	08008ccf 	.word	0x08008ccf
 8008c84:	08008c21 	.word	0x08008c21
 8008c88:	08008c21 	.word	0x08008c21
 8008c8c:	08008d65 	.word	0x08008d65
 8008c90:	6833      	ldr	r3, [r6, #0]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6032      	str	r2, [r6, #0]
 8008c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e09c      	b.n	8008dde <_printf_i+0x1e6>
 8008ca4:	6833      	ldr	r3, [r6, #0]
 8008ca6:	6820      	ldr	r0, [r4, #0]
 8008ca8:	1d19      	adds	r1, r3, #4
 8008caa:	6031      	str	r1, [r6, #0]
 8008cac:	0606      	lsls	r6, r0, #24
 8008cae:	d501      	bpl.n	8008cb4 <_printf_i+0xbc>
 8008cb0:	681d      	ldr	r5, [r3, #0]
 8008cb2:	e003      	b.n	8008cbc <_printf_i+0xc4>
 8008cb4:	0645      	lsls	r5, r0, #25
 8008cb6:	d5fb      	bpl.n	8008cb0 <_printf_i+0xb8>
 8008cb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	da03      	bge.n	8008cc8 <_printf_i+0xd0>
 8008cc0:	232d      	movs	r3, #45	@ 0x2d
 8008cc2:	426d      	negs	r5, r5
 8008cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cc8:	4858      	ldr	r0, [pc, #352]	@ (8008e2c <_printf_i+0x234>)
 8008cca:	230a      	movs	r3, #10
 8008ccc:	e011      	b.n	8008cf2 <_printf_i+0xfa>
 8008cce:	6821      	ldr	r1, [r4, #0]
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	0608      	lsls	r0, r1, #24
 8008cd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cd8:	d402      	bmi.n	8008ce0 <_printf_i+0xe8>
 8008cda:	0649      	lsls	r1, r1, #25
 8008cdc:	bf48      	it	mi
 8008cde:	b2ad      	uxthmi	r5, r5
 8008ce0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ce2:	4852      	ldr	r0, [pc, #328]	@ (8008e2c <_printf_i+0x234>)
 8008ce4:	6033      	str	r3, [r6, #0]
 8008ce6:	bf14      	ite	ne
 8008ce8:	230a      	movne	r3, #10
 8008cea:	2308      	moveq	r3, #8
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cf2:	6866      	ldr	r6, [r4, #4]
 8008cf4:	60a6      	str	r6, [r4, #8]
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	db05      	blt.n	8008d06 <_printf_i+0x10e>
 8008cfa:	6821      	ldr	r1, [r4, #0]
 8008cfc:	432e      	orrs	r6, r5
 8008cfe:	f021 0104 	bic.w	r1, r1, #4
 8008d02:	6021      	str	r1, [r4, #0]
 8008d04:	d04b      	beq.n	8008d9e <_printf_i+0x1a6>
 8008d06:	4616      	mov	r6, r2
 8008d08:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d0c:	fb03 5711 	mls	r7, r3, r1, r5
 8008d10:	5dc7      	ldrb	r7, [r0, r7]
 8008d12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d16:	462f      	mov	r7, r5
 8008d18:	42bb      	cmp	r3, r7
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	d9f4      	bls.n	8008d08 <_printf_i+0x110>
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d10b      	bne.n	8008d3a <_printf_i+0x142>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	07df      	lsls	r7, r3, #31
 8008d26:	d508      	bpl.n	8008d3a <_printf_i+0x142>
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	6861      	ldr	r1, [r4, #4]
 8008d2c:	4299      	cmp	r1, r3
 8008d2e:	bfde      	ittt	le
 8008d30:	2330      	movle	r3, #48	@ 0x30
 8008d32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d3a:	1b92      	subs	r2, r2, r6
 8008d3c:	6122      	str	r2, [r4, #16]
 8008d3e:	f8cd a000 	str.w	sl, [sp]
 8008d42:	464b      	mov	r3, r9
 8008d44:	aa03      	add	r2, sp, #12
 8008d46:	4621      	mov	r1, r4
 8008d48:	4640      	mov	r0, r8
 8008d4a:	f7ff fee7 	bl	8008b1c <_printf_common>
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d14a      	bne.n	8008de8 <_printf_i+0x1f0>
 8008d52:	f04f 30ff 	mov.w	r0, #4294967295
 8008d56:	b004      	add	sp, #16
 8008d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	f043 0320 	orr.w	r3, r3, #32
 8008d62:	6023      	str	r3, [r4, #0]
 8008d64:	4832      	ldr	r0, [pc, #200]	@ (8008e30 <_printf_i+0x238>)
 8008d66:	2778      	movs	r7, #120	@ 0x78
 8008d68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	6831      	ldr	r1, [r6, #0]
 8008d70:	061f      	lsls	r7, r3, #24
 8008d72:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d76:	d402      	bmi.n	8008d7e <_printf_i+0x186>
 8008d78:	065f      	lsls	r7, r3, #25
 8008d7a:	bf48      	it	mi
 8008d7c:	b2ad      	uxthmi	r5, r5
 8008d7e:	6031      	str	r1, [r6, #0]
 8008d80:	07d9      	lsls	r1, r3, #31
 8008d82:	bf44      	itt	mi
 8008d84:	f043 0320 	orrmi.w	r3, r3, #32
 8008d88:	6023      	strmi	r3, [r4, #0]
 8008d8a:	b11d      	cbz	r5, 8008d94 <_printf_i+0x19c>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	e7ad      	b.n	8008cec <_printf_i+0xf4>
 8008d90:	4826      	ldr	r0, [pc, #152]	@ (8008e2c <_printf_i+0x234>)
 8008d92:	e7e9      	b.n	8008d68 <_printf_i+0x170>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	f023 0320 	bic.w	r3, r3, #32
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	e7f6      	b.n	8008d8c <_printf_i+0x194>
 8008d9e:	4616      	mov	r6, r2
 8008da0:	e7bd      	b.n	8008d1e <_printf_i+0x126>
 8008da2:	6833      	ldr	r3, [r6, #0]
 8008da4:	6825      	ldr	r5, [r4, #0]
 8008da6:	6961      	ldr	r1, [r4, #20]
 8008da8:	1d18      	adds	r0, r3, #4
 8008daa:	6030      	str	r0, [r6, #0]
 8008dac:	062e      	lsls	r6, r5, #24
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	d501      	bpl.n	8008db6 <_printf_i+0x1be>
 8008db2:	6019      	str	r1, [r3, #0]
 8008db4:	e002      	b.n	8008dbc <_printf_i+0x1c4>
 8008db6:	0668      	lsls	r0, r5, #25
 8008db8:	d5fb      	bpl.n	8008db2 <_printf_i+0x1ba>
 8008dba:	8019      	strh	r1, [r3, #0]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	4616      	mov	r6, r2
 8008dc2:	e7bc      	b.n	8008d3e <_printf_i+0x146>
 8008dc4:	6833      	ldr	r3, [r6, #0]
 8008dc6:	1d1a      	adds	r2, r3, #4
 8008dc8:	6032      	str	r2, [r6, #0]
 8008dca:	681e      	ldr	r6, [r3, #0]
 8008dcc:	6862      	ldr	r2, [r4, #4]
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7f7 fa05 	bl	80001e0 <memchr>
 8008dd6:	b108      	cbz	r0, 8008ddc <_printf_i+0x1e4>
 8008dd8:	1b80      	subs	r0, r0, r6
 8008dda:	6060      	str	r0, [r4, #4]
 8008ddc:	6863      	ldr	r3, [r4, #4]
 8008dde:	6123      	str	r3, [r4, #16]
 8008de0:	2300      	movs	r3, #0
 8008de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008de6:	e7aa      	b.n	8008d3e <_printf_i+0x146>
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	4632      	mov	r2, r6
 8008dec:	4649      	mov	r1, r9
 8008dee:	4640      	mov	r0, r8
 8008df0:	47d0      	blx	sl
 8008df2:	3001      	adds	r0, #1
 8008df4:	d0ad      	beq.n	8008d52 <_printf_i+0x15a>
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	079b      	lsls	r3, r3, #30
 8008dfa:	d413      	bmi.n	8008e24 <_printf_i+0x22c>
 8008dfc:	68e0      	ldr	r0, [r4, #12]
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	4298      	cmp	r0, r3
 8008e02:	bfb8      	it	lt
 8008e04:	4618      	movlt	r0, r3
 8008e06:	e7a6      	b.n	8008d56 <_printf_i+0x15e>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4632      	mov	r2, r6
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	4640      	mov	r0, r8
 8008e10:	47d0      	blx	sl
 8008e12:	3001      	adds	r0, #1
 8008e14:	d09d      	beq.n	8008d52 <_printf_i+0x15a>
 8008e16:	3501      	adds	r5, #1
 8008e18:	68e3      	ldr	r3, [r4, #12]
 8008e1a:	9903      	ldr	r1, [sp, #12]
 8008e1c:	1a5b      	subs	r3, r3, r1
 8008e1e:	42ab      	cmp	r3, r5
 8008e20:	dcf2      	bgt.n	8008e08 <_printf_i+0x210>
 8008e22:	e7eb      	b.n	8008dfc <_printf_i+0x204>
 8008e24:	2500      	movs	r5, #0
 8008e26:	f104 0619 	add.w	r6, r4, #25
 8008e2a:	e7f5      	b.n	8008e18 <_printf_i+0x220>
 8008e2c:	08009211 	.word	0x08009211
 8008e30:	08009222 	.word	0x08009222

08008e34 <memmove>:
 8008e34:	4288      	cmp	r0, r1
 8008e36:	b510      	push	{r4, lr}
 8008e38:	eb01 0402 	add.w	r4, r1, r2
 8008e3c:	d902      	bls.n	8008e44 <memmove+0x10>
 8008e3e:	4284      	cmp	r4, r0
 8008e40:	4623      	mov	r3, r4
 8008e42:	d807      	bhi.n	8008e54 <memmove+0x20>
 8008e44:	1e43      	subs	r3, r0, #1
 8008e46:	42a1      	cmp	r1, r4
 8008e48:	d008      	beq.n	8008e5c <memmove+0x28>
 8008e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e52:	e7f8      	b.n	8008e46 <memmove+0x12>
 8008e54:	4402      	add	r2, r0
 8008e56:	4601      	mov	r1, r0
 8008e58:	428a      	cmp	r2, r1
 8008e5a:	d100      	bne.n	8008e5e <memmove+0x2a>
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e66:	e7f7      	b.n	8008e58 <memmove+0x24>

08008e68 <_realloc_r>:
 8008e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	4614      	mov	r4, r2
 8008e70:	460d      	mov	r5, r1
 8008e72:	b921      	cbnz	r1, 8008e7e <_realloc_r+0x16>
 8008e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e78:	4611      	mov	r1, r2
 8008e7a:	f7ff bb99 	b.w	80085b0 <_malloc_r>
 8008e7e:	b92a      	cbnz	r2, 8008e8c <_realloc_r+0x24>
 8008e80:	f7ff fcaa 	bl	80087d8 <_free_r>
 8008e84:	4625      	mov	r5, r4
 8008e86:	4628      	mov	r0, r5
 8008e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e8c:	f000 f81a 	bl	8008ec4 <_malloc_usable_size_r>
 8008e90:	4284      	cmp	r4, r0
 8008e92:	4606      	mov	r6, r0
 8008e94:	d802      	bhi.n	8008e9c <_realloc_r+0x34>
 8008e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e9a:	d8f4      	bhi.n	8008e86 <_realloc_r+0x1e>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f7ff fb86 	bl	80085b0 <_malloc_r>
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	b908      	cbnz	r0, 8008eac <_realloc_r+0x44>
 8008ea8:	4645      	mov	r5, r8
 8008eaa:	e7ec      	b.n	8008e86 <_realloc_r+0x1e>
 8008eac:	42b4      	cmp	r4, r6
 8008eae:	4622      	mov	r2, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	bf28      	it	cs
 8008eb4:	4632      	movcs	r2, r6
 8008eb6:	f7ff fc81 	bl	80087bc <memcpy>
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff fc8b 	bl	80087d8 <_free_r>
 8008ec2:	e7f1      	b.n	8008ea8 <_realloc_r+0x40>

08008ec4 <_malloc_usable_size_r>:
 8008ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ec8:	1f18      	subs	r0, r3, #4
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	bfbc      	itt	lt
 8008ece:	580b      	ldrlt	r3, [r1, r0]
 8008ed0:	18c0      	addlt	r0, r0, r3
 8008ed2:	4770      	bx	lr

08008ed4 <_init>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr

08008ee0 <_fini>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr
