
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800dbf8  0800dbf8  0000ebf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2a0  0800e2a0  00010078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e2a0  0800e2a0  0000f2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2a8  0800e2a8  00010078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2a8  0800e2a8  0000f2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e2ac  0800e2ac  0000f2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800e2b0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000078  0800e328  00010078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  0800e328  00010830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6ef  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe3  00000000  00000000  0002d797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  00032780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ec  00000000  00000000  00034300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029239  00000000  00000000  000357ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002548b  00000000  00000000  0005ea25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e3f  00000000  00000000  00083eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bcef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078e0  00000000  00000000  0017bd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00183614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dbe0 	.word	0x0800dbe0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800dbe0 	.word	0x0800dbe0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d011      	beq.n	8000724 <has_header_tail+0x40>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d90e      	bls.n	8000724 <has_header_tail+0x40>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	429a      	cmp	r2, r3
 800070e:	d109      	bne.n	8000724 <has_header_tail+0x40>
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3b01      	subs	r3, #1
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	79ba      	ldrb	r2, [r7, #6]
 800071c:	429a      	cmp	r2, r3
 800071e:	d101      	bne.n	8000724 <has_header_tail+0x40>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <has_header_tail+0x42>
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <frame_expect_req+0x1e>
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d202      	bcs.n	8000756 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	e012      	b.n	800077c <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000756:	2355      	movs	r3, #85	@ 0x55
 8000758:	22aa      	movs	r2, #170	@ 0xaa
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff ffc1 	bl	80006e4 <has_header_tail>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	429a      	cmp	r2, r3
 8000772:	d002      	beq.n	800077a <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000774:	f06f 0301 	mvn.w	r3, #1
 8000778:	e000      	b.n	800077c <frame_expect_req+0x4a>
	return PROTO_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <move_end_req_decoder>:
#include "Protocol/Requests/move_end_request.h"

int move_end_req_decoder(const uint8_t *raw, uint32_t len, move_end_req_t *out) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <move_end_req_decoder+0x18>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <move_end_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	e011      	b.n	80007c6 <move_end_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_END, 4);
 80007a2:	2304      	movs	r3, #4
 80007a4:	2206      	movs	r2, #6
 80007a6:	68b9      	ldr	r1, [r7, #8]
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff ffc2 	bl	8000732 <frame_expect_req>
 80007ae:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <move_end_req_decoder+0x36>
		return st;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	e005      	b.n	80007c6 <move_end_req_decoder+0x42>
	out->frameId = raw[2];
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3302      	adds	r3, #2
 80007be:	781a      	ldrb	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <has_header_tail>:
		uint8_t header, uint8_t tail) {
 80007ce:	b480      	push	{r7}
 80007d0:	b085      	sub	sp, #20
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	4611      	mov	r1, r2
 80007da:	461a      	mov	r2, r3
 80007dc:	460b      	mov	r3, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <has_header_tail+0x40>
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d90e      	bls.n	800080e <has_header_tail+0x40>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d109      	bne.n	800080e <has_header_tail+0x40>
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	429a      	cmp	r2, r3
 8000808:	d101      	bne.n	800080e <has_header_tail+0x40>
 800080a:	2301      	movs	r3, #1
 800080c:	e000      	b.n	8000810 <has_header_tail+0x42>
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b21b      	sxth	r3, r3
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	b21a      	sxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21b      	sxth	r3, r3
 800083a:	b29b      	uxth	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <be32_read>:
static inline uint32_t be32_read(const uint8_t *p) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	return (((uint32_t) p[0] << 24) | ((uint32_t) p[1] << 16)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	061a      	lsls	r2, r3, #24
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3301      	adds	r3, #1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	041b      	lsls	r3, r3, #16
 800085e:	431a      	orrs	r2, r3
			| ((uint32_t) p[2] << 8) | (uint32_t) p[3]);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3302      	adds	r3, #2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	4313      	orrs	r3, r2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	3203      	adds	r2, #3
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	4313      	orrs	r3, r2
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4613      	mov	r3, r2
 800088c:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <frame_expect_req+0x1e>
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d202      	bcs.n	80008a2 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	e012      	b.n	80008c8 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80008a2:	2355      	movs	r3, #85	@ 0x55
 80008a4:	22aa      	movs	r2, #170	@ 0xaa
 80008a6:	68b9      	ldr	r1, [r7, #8]
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff ff90 	bl	80007ce <has_header_tail>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d005      	beq.n	80008c0 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	3301      	adds	r3, #1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d002      	beq.n	80008c6 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80008c0:	f06f 0301 	mvn.w	r3, #1
 80008c4:	e000      	b.n	80008c8 <frame_expect_req+0x4a>
	return PROTO_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <move_queue_add_req_decoder>:
#include "Protocol/Requests/move_queue_add_request.h"

int move_queue_add_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_add_req_t *out) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <move_queue_add_req_decoder+0x18>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <move_queue_add_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	e09a      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_ADD, 42);
 80008ee:	232a      	movs	r3, #42	@ 0x2a
 80008f0:	2201      	movs	r2, #1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff ffc2 	bl	800087e <frame_expect_req>
 80008fa:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <move_queue_add_req_decoder+0x36>
		return st;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	e08e      	b.n	8000a24 <move_queue_add_req_decoder+0x154>
	out->frameId = raw[2];
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3302      	adds	r3, #2
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	701a      	strb	r2, [r3, #0]
	out->dirMask = raw[3];
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3303      	adds	r3, #3
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	705a      	strb	r2, [r3, #1]
	out->vx = be16_read(&raw[4]);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff7c 	bl	800081c <be16_read>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	805a      	strh	r2, [r3, #2]
	out->sx = be32_read(&raw[6]);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3306      	adds	r3, #6
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff89 	bl	8000848 <be32_read>
 8000936:	4602      	mov	r2, r0
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	out->vy = be16_read(&raw[10]);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	330a      	adds	r3, #10
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff6b 	bl	800081c <be16_read>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	811a      	strh	r2, [r3, #8]
	out->sy = be32_read(&raw[12]);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff78 	bl	8000848 <be32_read>
 8000958:	4602      	mov	r2, r0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60da      	str	r2, [r3, #12]
	out->vz = be16_read(&raw[16]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3310      	adds	r3, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff5a 	bl	800081c <be16_read>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	821a      	strh	r2, [r3, #16]
	out->sz = be32_read(&raw[18]);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3312      	adds	r3, #18
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff67 	bl	8000848 <be32_read>
 800097a:	4602      	mov	r2, r0
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	615a      	str	r2, [r3, #20]
	out->kp_x = be16_read(&raw[22]);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3316      	adds	r3, #22
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff49 	bl	800081c <be16_read>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	831a      	strh	r2, [r3, #24]
	out->ki_x = be16_read(&raw[24]);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3318      	adds	r3, #24
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff40 	bl	800081c <be16_read>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	835a      	strh	r2, [r3, #26]
	out->kd_x = be16_read(&raw[26]);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	331a      	adds	r3, #26
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff37 	bl	800081c <be16_read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	839a      	strh	r2, [r3, #28]
	out->kp_y = be16_read(&raw[28]);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	331c      	adds	r3, #28
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff2e 	bl	800081c <be16_read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	83da      	strh	r2, [r3, #30]
	out->ki_y = be16_read(&raw[30]);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	331e      	adds	r3, #30
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff25 	bl	800081c <be16_read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	841a      	strh	r2, [r3, #32]
	out->kd_y = be16_read(&raw[32]);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3320      	adds	r3, #32
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff1c 	bl	800081c <be16_read>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	845a      	strh	r2, [r3, #34]	@ 0x22
	out->kp_z = be16_read(&raw[34]);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3322      	adds	r3, #34	@ 0x22
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff13 	bl	800081c <be16_read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	849a      	strh	r2, [r3, #36]	@ 0x24
	out->ki_z = be16_read(&raw[36]);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3324      	adds	r3, #36	@ 0x24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff0a 	bl	800081c <be16_read>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
	out->kd_z = be16_read(&raw[38]);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3326      	adds	r3, #38	@ 0x26
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff01 	bl	800081c <be16_read>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	851a      	strh	r2, [r3, #40]	@ 0x28
	return PROTO_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d011      	beq.n	8000a6c <has_header_tail+0x40>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d90e      	bls.n	8000a6c <has_header_tail+0x40>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d109      	bne.n	8000a6c <has_header_tail+0x40>
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d101      	bne.n	8000a6c <has_header_tail+0x40>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <has_header_tail+0x42>
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <frame_expect_req+0x1e>
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d202      	bcs.n	8000a9e <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e012      	b.n	8000ac4 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000a9e:	2355      	movs	r3, #85	@ 0x55
 8000aa0:	22aa      	movs	r2, #170	@ 0xaa
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff ffc1 	bl	8000a2c <has_header_tail>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d002      	beq.n	8000ac2 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000abc:	f06f 0301 	mvn.w	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <move_queue_status_req_decoder>:
#include "Protocol/Requests/move_queue_status_request.h"

int move_queue_status_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_status_req_t *out) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <move_queue_status_req_decoder+0x18>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <move_queue_status_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	e011      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_STATUS, 4);
 8000aea:	2304      	movs	r3, #4
 8000aec:	2202      	movs	r2, #2
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff ffc2 	bl	8000a7a <frame_expect_req>
 8000af6:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <move_queue_status_req_decoder+0x36>
		return st;
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	e005      	b.n	8000b0e <move_queue_status_req_decoder+0x42>
	out->frameId = raw[2];
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3302      	adds	r3, #2
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4611      	mov	r1, r2
 8000b22:	461a      	mov	r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d011      	beq.n	8000b56 <has_header_tail+0x40>
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d90e      	bls.n	8000b56 <has_header_tail+0x40>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d109      	bne.n	8000b56 <has_header_tail+0x40>
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d101      	bne.n	8000b56 <has_header_tail+0x40>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <has_header_tail+0x42>
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <frame_expect_req+0x1e>
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d202      	bcs.n	8000b88 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e012      	b.n	8000bae <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000b88:	2355      	movs	r3, #85	@ 0x55
 8000b8a:	22aa      	movs	r2, #170	@ 0xaa
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ffc1 	bl	8000b16 <has_header_tail>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	79fa      	ldrb	r2, [r7, #7]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d002      	beq.n	8000bac <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000ba6:	f06f 0301 	mvn.w	r3, #1
 8000baa:	e000      	b.n	8000bae <frame_expect_req+0x4a>
	return PROTO_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <start_move_req_decoder>:
#include "Protocol/Requests/start_move_request.h"

int start_move_req_decoder(const uint8_t *raw, uint32_t len,
		start_move_req_t *out) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <start_move_req_decoder+0x18>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <start_move_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e011      	b.n	8000bf8 <start_move_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_START_MOVE, 4);
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff ffc2 	bl	8000b64 <frame_expect_req>
 8000be0:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <start_move_req_decoder+0x36>
		return st;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	e005      	b.n	8000bf8 <start_move_req_decoder+0x42>
	out->frameId = raw[2];
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <xor_reduce_bytes>:
// =====================
// Conjunto genérico de auxiliares
// =====================

// XOR sobre bytes (paridade byte a byte)
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	e009      	b.n	8000c28 <xor_reduce_bytes+0x28>
		x ^= p[i];
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3f1      	bcc.n	8000c14 <xor_reduce_bytes+0x14>
	return x;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <set_parity_byte>:
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
		uint32_t parity_index) {
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <set_parity_byte+0x1a>
		return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e00b      	b.n	8000c70 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	18d0      	adds	r0, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	18d4      	adds	r4, r2, r3
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	f7ff ffcb 	bl	8000c00 <xor_reduce_bytes>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	7023      	strb	r3, [r4, #0]
	return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}

08000c78 <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	22ab      	movs	r2, #171	@ 0xab
 8000c88:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	78fa      	ldrb	r2, [r7, #3]
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	2254      	movs	r2, #84	@ 0x54
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	2101      	movs	r1, #1
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f7ff ffb4 	bl	8000c3e <set_parity_byte>
 8000cd6:	4603      	mov	r3, r0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <led_ctrl_resp_encoder+0x1e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d802      	bhi.n	8000d04 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e01c      	b.n	8000d3e <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 8000d04:	2107      	movs	r1, #7
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f7ff ffb6 	bl	8000c78 <resp_init>
	raw[2] = in->frameId;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3302      	adds	r3, #2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3303      	adds	r3, #3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	7852      	ldrb	r2, [r2, #1]
 8000d1e:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3304      	adds	r3, #4
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	7892      	ldrb	r2, [r2, #2]
 8000d28:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f7ff ffc5 	bl	8000cbe <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000d34:	2106      	movs	r1, #6
 8000d36:	68b8      	ldr	r0, [r7, #8]
 8000d38:	f7ff ffb1 	bl	8000c9e <resp_set_tail>
	return PROTO_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	22ab      	movs	r2, #171	@ 0xab
 8000d56:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2254      	movs	r2, #84	@ 0x54
 8000d7e:	701a      	strb	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <move_end_resp_encoder>:
	if (st != PROTO_OK)
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int move_end_resp_encoder(const move_end_resp_t *in, uint8_t *raw, uint32_t len) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <move_end_resp_encoder+0x1e>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d802      	bhi.n	8000db0 <move_end_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e00d      	b.n	8000dcc <move_end_resp_encoder+0x40>
	resp_init(raw, RESP_MOVE_END);
 8000db0:	2106      	movs	r1, #6
 8000db2:	68b8      	ldr	r0, [r7, #8]
 8000db4:	f7ff ffc7 	bl	8000d46 <resp_init>
	raw[2] = in->frameId;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	7812      	ldrb	r2, [r2, #0]
 8000dc0:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	68b8      	ldr	r0, [r7, #8]
 8000dc6:	f7ff ffd1 	bl	8000d6c <resp_set_tail>
	return PROTO_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e009      	b.n	8000dfc <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	4413      	add	r3, r2
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	4053      	eors	r3, r2
 8000df4:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3f1      	bcc.n	8000de8 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4053      	eors	r3, r2
 8000e0e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	4053      	eors	r3, r2
 8000e1a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4053      	eors	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <set_parity_bit>:
		uint32_t parity_index) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <set_parity_bit+0x1a>
		return -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	e010      	b.n	8000e78 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffb8 	bl	8000dd4 <xor_bit_reduce_bytes>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4619      	mov	r1, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f001 0201 	and.w	r2, r1, #1
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]
	return 0;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	22ab      	movs	r2, #171	@ 0xab
 8000e90:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2254      	movs	r2, #84	@ 0x54
 8000eb8:	701a      	strb	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <parity_set_bit_1N>:
static inline int parity_check_byte_1N(const uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
	return check_parity_byte(raw, 1, last_index, parity_index);
}
static inline int parity_set_bit_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ffaf 	bl	8000e3c <set_parity_bit>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <move_queue_add_ack_resp_encoder>:
	uint8_t b[3] = { RESP_MOVE_QUEUE_ADD_ACK, in ? in->frameId : 0,
			in ? in->status : 0 };
	return xor_bit_reduce_bytes(b, 3);
}
int move_queue_add_ack_resp_encoder(const move_queue_add_ack_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <move_queue_add_ack_resp_encoder+0x1e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d802      	bhi.n	8000f0c <move_queue_add_ack_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e017      	b.n	8000f3c <move_queue_add_ack_resp_encoder+0x54>
	resp_init(raw, RESP_MOVE_QUEUE_ADD_ACK);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	68b8      	ldr	r0, [r7, #8]
 8000f10:	f7ff ffb6 	bl	8000e80 <resp_init>
	raw[2] = in->frameId;
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3302      	adds	r3, #2
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3303      	adds	r3, #3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	7852      	ldrb	r2, [r2, #1]
 8000f26:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 3, 4);
 8000f28:	2204      	movs	r2, #4
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	68b8      	ldr	r0, [r7, #8]
 8000f2e:	f7ff ffca 	bl	8000ec6 <parity_set_bit_1N>
	resp_set_tail(raw, 5);
 8000f32:	2105      	movs	r1, #5
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f7ff ffb6 	bl	8000ea6 <resp_set_tail>
	return PROTO_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e009      	b.n	8000f6c <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4053      	eors	r3, r2
 8000f64:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f1      	bcc.n	8000f58 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4053      	eors	r3, r2
 8000f8a:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4053      	eors	r3, r2
 8000f96:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <set_parity_bit>:
		uint32_t parity_index) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
	if (!raw)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <set_parity_bit+0x1a>
		return -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	e010      	b.n	8000fe8 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffb8 	bl	8000f44 <xor_bit_reduce_bytes>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f001 0201 	and.w	r2, r1, #1
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	22ab      	movs	r2, #171	@ 0xab
 8001000:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	78fa      	ldrb	r2, [r7, #3]
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	4413      	add	r3, r2
 8001026:	2254      	movs	r2, #84	@ 0x54
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <parity_set_bit_1N>:
		uint32_t parity_index) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	2101      	movs	r1, #1
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ffaf 	bl	8000fac <set_parity_bit>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <move_queue_status_resp_encoder>:
			in ? in->pidErrZ : 0, in ? in->pctX : 0, in ? in->pctY : 0,
			in ? in->pctZ : 0 };
	return xor_bit_reduce_bytes(b, 9);
}
int move_queue_status_resp_encoder(const move_queue_status_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 12)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <move_queue_status_resp_encoder+0x1e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b0b      	cmp	r3, #11
 8001074:	d802      	bhi.n	800107c <move_queue_status_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e035      	b.n	80010e8 <move_queue_status_resp_encoder+0x90>
	resp_init(raw, RESP_MOVE_QUEUE_STATUS);
 800107c:	2102      	movs	r1, #2
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff ffb6 	bl	8000ff0 <resp_init>
	raw[2] = in->frameId;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3302      	adds	r3, #2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3303      	adds	r3, #3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	7852      	ldrb	r2, [r2, #1]
 8001096:	701a      	strb	r2, [r3, #0]
	raw[4] = in->pidErrX;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3304      	adds	r3, #4
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	7892      	ldrb	r2, [r2, #2]
 80010a0:	701a      	strb	r2, [r3, #0]
	raw[5] = in->pidErrY;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3305      	adds	r3, #5
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	78d2      	ldrb	r2, [r2, #3]
 80010aa:	701a      	strb	r2, [r3, #0]
	raw[6] = in->pidErrZ;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3306      	adds	r3, #6
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	7912      	ldrb	r2, [r2, #4]
 80010b4:	701a      	strb	r2, [r3, #0]
	raw[7] = in->pctX;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3307      	adds	r3, #7
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	7952      	ldrb	r2, [r2, #5]
 80010be:	701a      	strb	r2, [r3, #0]
	raw[8] = in->pctY;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3308      	adds	r3, #8
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	7992      	ldrb	r2, [r2, #6]
 80010c8:	701a      	strb	r2, [r3, #0]
	raw[9] = in->pctZ;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3309      	adds	r3, #9
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	79d2      	ldrb	r2, [r2, #7]
 80010d2:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 9, 10);
 80010d4:	220a      	movs	r2, #10
 80010d6:	2109      	movs	r1, #9
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f7ff ffac 	bl	8001036 <parity_set_bit_1N>
	resp_set_tail(raw, 11);
 80010de:	210b      	movs	r1, #11
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	f7ff ff98 	bl	8001016 <resp_set_tail>
	return PROTO_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	22ab      	movs	r2, #171	@ 0xab
 8001100:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	2254      	movs	r2, #84	@ 0x54
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <start_move_resp_encoder>:
		return st;
	out->frameId = raw[2];
	return PROTO_OK;
}
int start_move_resp_encoder(const start_move_resp_t *in, uint8_t *raw,
		uint32_t len) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 4)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <start_move_resp_encoder+0x1e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d802      	bhi.n	800115a <start_move_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	e00d      	b.n	8001176 <start_move_resp_encoder+0x40>
	resp_init(raw, RESP_START_MOVE);
 800115a:	2103      	movs	r1, #3
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff ffc7 	bl	80010f0 <resp_init>
	raw[2] = in->frameId;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3302      	adds	r3, #2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 3);
 800116c:	2103      	movs	r1, #3
 800116e:	68b8      	ldr	r0, [r7, #8]
 8001170:	f7ff ffd1 	bl	8001116 <resp_set_tail>
	return PROTO_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 8001182:	210c      	movs	r1, #12
 8001184:	2001      	movs	r0, #1
 8001186:	f00b fb2b 	bl	800c7e0 <calloc>
 800118a:	4603      	mov	r3, r0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <resp_fifo_push+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <resp_fifo_push+0x24>
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e03d      	b.n	8001230 <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 80011b4:	200c      	movs	r0, #12
 80011b6:	f00b fb2f 	bl	800c818 <malloc>
 80011ba:	4603      	mov	r3, r0
 80011bc:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <resp_fifo_push+0x3a>
 80011c4:	f06f 0302 	mvn.w	r3, #2
 80011c8:	e032      	b.n	8001230 <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f00b fb24 	bl	800c818 <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <resp_fifo_push+0x5c>
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f00b fb21 	bl	800c828 <free>
 80011e6:	f06f 0302 	mvn.w	r3, #2
 80011ea:	e021      	b.n	8001230 <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00b fe60 	bl	800ceba <memcpy>
    n->len = len;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <resp_fifo_push+0x88>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	e002      	b.n	800121e <resp_fifo_push+0x8e>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]
    q->tail = n;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	605a      	str	r2, [r3, #4]
    q->count++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <resp_fifo_pop+0x20>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <resp_fifo_pop+0x20>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <resp_fifo_pop+0x24>
 8001258:	2300      	movs	r3, #0
 800125a:	e02e      	b.n	80012ba <resp_fifo_pop+0x82>
    node_t *n = q->head;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d202      	bcs.n	8001272 <resp_fifo_pop+0x3a>
 800126c:	f06f 0303 	mvn.w	r3, #3
 8001270:	e023      	b.n	80012ba <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f00b fe1c 	bl	800ceba <memcpy>
    int ret = (int)n->len;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <resp_fifo_pop+0x66>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
    q->count--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
    free(n->buf);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00b fabb 	bl	800c828 <free>
    free(n);
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f00b fab8 	bl	800c828 <free>
    return ret;
 80012b8:	693b      	ldr	r3, [r7, #16]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    if (!r) return;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01a      	beq.n	800130c <router_init+0x48>
    memset(r, 0, sizeof(*r));
 80012d6:	2248      	movs	r2, #72	@ 0x48
 80012d8:	2100      	movs	r1, #0
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f00b fd62 	bl	800cda4 <memset>
    r->resp = resp_fifo;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 80012e6:	2224      	movs	r2, #36	@ 0x24
 80012e8:	2100      	movs	r1, #0
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <router_init+0x50>)
 80012ec:	f00b fd5a 	bl	800cda4 <memset>
    if (h) g_handlers = *h;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <router_init+0x4a>
 80012f6:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <router_init+0x50>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4614      	mov	r4, r2
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	e000      	b.n	800130e <router_init+0x4a>
    if (!r) return;
 800130c:	bf00      	nop
}
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	20000094 	.word	0x20000094

08001318 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80c0 	beq.w	80014ac <dispatch+0x194>
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80bc 	beq.w	80014ac <dispatch+0x194>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b03      	cmp	r3, #3
 8001338:	f240 80b8 	bls.w	80014ac <dispatch+0x194>
    uint8_t type = f[1];
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b20      	cmp	r3, #32
 8001348:	dc4a      	bgt.n	80013e0 <dispatch+0xc8>
 800134a:	2b00      	cmp	r3, #0
 800134c:	f340 80b0 	ble.w	80014b0 <dispatch+0x198>
 8001350:	3b01      	subs	r3, #1
 8001352:	2b1f      	cmp	r3, #31
 8001354:	f200 80ac 	bhi.w	80014b0 <dispatch+0x198>
 8001358:	a201      	add	r2, pc, #4	@ (adr r2, 8001360 <dispatch+0x48>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013fd 	.word	0x080013fd
 8001368:	08001413 	.word	0x08001413
 800136c:	08001429 	.word	0x08001429
 8001370:	0800143f 	.word	0x0800143f
 8001374:	08001455 	.word	0x08001455
 8001378:	0800146b 	.word	0x0800146b
 800137c:	080014b1 	.word	0x080014b1
 8001380:	080014b1 	.word	0x080014b1
 8001384:	080014b1 	.word	0x080014b1
 8001388:	080014b1 	.word	0x080014b1
 800138c:	080014b1 	.word	0x080014b1
 8001390:	080014b1 	.word	0x080014b1
 8001394:	080014b1 	.word	0x080014b1
 8001398:	080014b1 	.word	0x080014b1
 800139c:	080014b1 	.word	0x080014b1
 80013a0:	080014b1 	.word	0x080014b1
 80013a4:	080014b1 	.word	0x080014b1
 80013a8:	080014b1 	.word	0x080014b1
 80013ac:	080014b1 	.word	0x080014b1
 80013b0:	080014b1 	.word	0x080014b1
 80013b4:	080014b1 	.word	0x080014b1
 80013b8:	080014b1 	.word	0x080014b1
 80013bc:	080014b1 	.word	0x080014b1
 80013c0:	080014b1 	.word	0x080014b1
 80013c4:	080014b1 	.word	0x080014b1
 80013c8:	080014b1 	.word	0x080014b1
 80013cc:	080014b1 	.word	0x080014b1
 80013d0:	080014b1 	.word	0x080014b1
 80013d4:	080014b1 	.word	0x080014b1
 80013d8:	080014b1 	.word	0x080014b1
 80013dc:	08001481 	.word	0x08001481
 80013e0:	2b68      	cmp	r3, #104	@ 0x68
 80013e2:	d058      	beq.n	8001496 <dispatch+0x17e>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
        case REQ_MOVE_END:           CALL(on_move_end);           break;
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 80013e4:	e064      	b.n	80014b0 <dispatch+0x198>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80013e6:	4b3d      	ldr	r3, [pc, #244]	@ (80014dc <dispatch+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d062      	beq.n	80014b4 <dispatch+0x19c>
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <dispatch+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	4798      	blx	r3
 80013fa:	e05b      	b.n	80014b4 <dispatch+0x19c>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80013fc:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <dispatch+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d059      	beq.n	80014b8 <dispatch+0x1a0>
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <dispatch+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	4798      	blx	r3
 8001410:	e052      	b.n	80014b8 <dispatch+0x1a0>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <dispatch+0x1c4>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d050      	beq.n	80014bc <dispatch+0x1a4>
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <dispatch+0x1c4>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	4798      	blx	r3
 8001426:	e049      	b.n	80014bc <dispatch+0x1a4>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <dispatch+0x1c4>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d047      	beq.n	80014c0 <dispatch+0x1a8>
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <dispatch+0x1c4>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	4798      	blx	r3
 800143c:	e040      	b.n	80014c0 <dispatch+0x1a8>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <dispatch+0x1c4>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d03e      	beq.n	80014c4 <dispatch+0x1ac>
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <dispatch+0x1c4>)
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	4798      	blx	r3
 8001452:	e037      	b.n	80014c4 <dispatch+0x1ac>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <dispatch+0x1c4>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d035      	beq.n	80014c8 <dispatch+0x1b0>
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <dispatch+0x1c4>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	4798      	blx	r3
 8001468:	e02e      	b.n	80014c8 <dispatch+0x1b0>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <dispatch+0x1c4>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d02c      	beq.n	80014cc <dispatch+0x1b4>
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <dispatch+0x1c4>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	4798      	blx	r3
 800147e:	e025      	b.n	80014cc <dispatch+0x1b4>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <dispatch+0x1c4>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <dispatch+0x1b8>
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <dispatch+0x1c4>)
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	4798      	blx	r3
 8001494:	e01c      	b.n	80014d0 <dispatch+0x1b8>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <dispatch+0x1c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <dispatch+0x1bc>
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <dispatch+0x1c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	4798      	blx	r3
 80014aa:	e013      	b.n	80014d4 <dispatch+0x1bc>
    if (!r || !f || len < 4) return;
 80014ac:	bf00      	nop
 80014ae:	e012      	b.n	80014d6 <dispatch+0x1be>
        default: /* desconhecido */  break;
 80014b0:	bf00      	nop
 80014b2:	e010      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80014b4:	bf00      	nop
 80014b6:	e00e      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80014b8:	bf00      	nop
 80014ba:	e00c      	b.n	80014d6 <dispatch+0x1be>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 80014bc:	bf00      	nop
 80014be:	e00a      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 80014c0:	bf00      	nop
 80014c2:	e008      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 80014c4:	bf00      	nop
 80014c6:	e006      	b.n	80014d6 <dispatch+0x1be>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 80014c8:	bf00      	nop
 80014ca:	e004      	b.n	80014d6 <dispatch+0x1be>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <dispatch+0x1be>
        case REQ_FPGA_STATUS:        CALL(on_fpga_status);        break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <dispatch+0x1be>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 80014d4:	bf00      	nop
    }
    #undef CALL
}
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000094 	.word	0x20000094

080014e0 <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d016      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <router_feed_bytes+0x40>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d910      	bls.n	8001520 <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2baa      	cmp	r3, #170	@ 0xaa
 8001504:	d10e      	bne.n	8001524 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3b01      	subs	r3, #1
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b55      	cmp	r3, #85	@ 0x55
 8001512:	d109      	bne.n	8001528 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fefd 	bl	8001318 <dispatch>
 800151e:	e004      	b.n	800152a <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8001520:	bf00      	nop
 8001522:	e002      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8001524:	bf00      	nop
 8001526:	e000      	b.n	800152a <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8001528:	bf00      	nop
}
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <home_service_init>:

LOG_SVC_DEFINE(LOG_SVC_HOME, "home");

static home_status_t g_home;

void home_service_init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af04      	add	r7, sp, #16
	g_home.axis_done_mask = 0;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <home_service_init+0x34>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	g_home.error_flags = 0;
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <home_service_init+0x34>)
 800153e:	2200      	movs	r2, #0
 8001540:	705a      	strb	r2, [r3, #1]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8001542:	4a09      	ldr	r2, [pc, #36]	@ (8001568 <home_service_init+0x38>)
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <home_service_init+0x3c>)
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <home_service_init+0x40>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <home_service_init+0x44>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2003      	movs	r0, #3
 8001558:	f000 fcd2 	bl	8001f00 <log_event_auto>
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000b8 	.word	0x200000b8
 8001568:	0800dbf8 	.word	0x0800dbf8
 800156c:	0800dc00 	.word	0x0800dc00
 8001570:	0800dc04 	.word	0x0800dc04
 8001574:	0800dc08 	.word	0x0800dc08

08001578 <home_on_move_home>:
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af04      	add	r7, sp, #16
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <home_on_move_home+0x2c>)
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <home_on_move_home+0x30>)
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <home_on_move_home+0x34>)
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <home_on_move_home+0x38>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	2200      	movs	r2, #0
 8001594:	2101      	movs	r1, #1
 8001596:	2003      	movs	r0, #3
 8001598:	f000 fcb2 	bl	8001f00 <log_event_auto>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0800dbf8 	.word	0x0800dbf8
 80015a8:	0800dc10 	.word	0x0800dc10
 80015ac:	0800dc04 	.word	0x0800dc04
 80015b0:	0800dc20 	.word	0x0800dc20

080015b4 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    if (!led)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f107 020c 	add.w	r2, r7, #12
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 ff10 	bl	8005414 <HAL_GPIO_Init>
 80015f4:	e000      	b.n	80015f8 <led_gpio_config_output+0x44>
        return;
 80015f6:	bf00      	nop
}
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 80015fe:	b580      	push	{r7, lr}
 8001600:	b088      	sub	sp, #32
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
    if (!led)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	889b      	ldrh	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f003 fee8 	bl	8005414 <HAL_GPIO_Init>
 8001644:	e000      	b.n	8001648 <led_gpio_config_pwm+0x4a>
        return;
 8001646:	bf00      	nop
}
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	460b      	mov	r3, r1
 800165c:	71bb      	strb	r3, [r7, #6]
 800165e:	4613      	mov	r3, r2
 8001660:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	733b      	strb	r3, [r7, #12]
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	737b      	strb	r3, [r7, #13]
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 800166e:	f107 0110 	add.w	r1, r7, #16
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2207      	movs	r2, #7
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb31 	bl	8000ce0 <led_ctrl_resp_encoder>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8001684:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <led_push_response+0x80>)
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <led_push_response+0x84>)
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <led_push_response+0x88>)
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	2164      	movs	r1, #100	@ 0x64
 8001696:	2001      	movs	r0, #1
 8001698:	f000 fc32 	bl	8001f00 <log_event_auto>
 800169c:	e014      	b.n	80016c8 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	2107      	movs	r1, #7
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 f865 	bl	8003774 <app_resp_push>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <led_push_response+0x80>)
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <led_push_response+0x8c>)
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <led_push_response+0x88>)
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	f06f 0203 	mvn.w	r2, #3
 80016c0:	2164      	movs	r1, #100	@ 0x64
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 fc1c 	bl	8001f00 <log_event_auto>
    }
}
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0800dc2c 	.word	0x0800dc2c
 80016d4:	0800dc30 	.word	0x0800dc30
 80016d8:	0800dc4c 	.word	0x0800dc4c
 80016dc:	0800dc54 	.word	0x0800dc54

080016e0 <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 80016e6:	f005 fa5b 	bl	8006ba0 <HAL_RCC_GetPCLK2Freq>
 80016ea:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <led_timer_get_clock+0x34>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80016f4:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <led_timer_get_clock+0x28>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <led_timer_get_clock+0x28>
        clk *= 2u;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000

08001718 <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b094      	sub	sp, #80	@ 0x50
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8001724:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <led_compute_period_ticks+0x16>
        return 0u;
 800172a:	2300      	movs	r3, #0
 800172c:	e066      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 800172e:	f7ff ffd7 	bl	80016e0 <led_timer_get_clock>
 8001732:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <led_compute_period_ticks+0xf0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	3301      	adds	r3, #1
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 800173c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <led_compute_period_ticks+0x2e>
        return 0u;
 8001742:	2300      	movs	r3, #0
 8001744:	e05a      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8001746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8001750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <led_compute_period_ticks+0x42>
        return 0u;
 8001756:	2300      	movs	r3, #0
 8001758:	e050      	b.n	80017fc <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 800175a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175c:	2200      	movs	r2, #0
 800175e:	4698      	mov	r8, r3
 8001760:	4691      	mov	r9, r2
 8001762:	4642      	mov	r2, r8
 8001764:	464b      	mov	r3, r9
 8001766:	1891      	adds	r1, r2, r2
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	415b      	adcs	r3, r3
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001772:	eb12 0408 	adds.w	r4, r2, r8
 8001776:	eb43 0509 	adc.w	r5, r3, r9
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	016b      	lsls	r3, r5, #5
 8001784:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001788:	0162      	lsls	r2, r4, #5
 800178a:	eb14 0a02 	adds.w	sl, r4, r2
 800178e:	eb45 0b03 	adc.w	fp, r5, r3
 8001792:	eb1a 0308 	adds.w	r3, sl, r8
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	eb4b 0309 	adc.w	r3, fp, r9
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 80017a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017b8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017bc:	4621      	mov	r1, r4
 80017be:	1889      	adds	r1, r1, r2
 80017c0:	61b9      	str	r1, [r7, #24]
 80017c2:	4629      	mov	r1, r5
 80017c4:	eb43 0101 	adc.w	r1, r3, r1
 80017c8:	61f9      	str	r1, [r7, #28]
 80017ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80017cc:	2200      	movs	r2, #0
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	617a      	str	r2, [r7, #20]
 80017d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017da:	f7fe fd49 	bl	8000270 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 80017e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d305      	bcc.n	80017fa <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 80017fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3750      	adds	r7, #80	@ 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001806:	bf00      	nop
 8001808:	2000060c 	.word	0x2000060c

0800180c <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <led_apply_pwm+0x14>
        period_ticks = 1u;
 800181c:	2301      	movs	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	d901      	bls.n	800182c <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <led_apply_pwm+0x2c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3b01      	subs	r3, #1
 8001836:	e000      	b.n	800183a <led_apply_pwm+0x2e>
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <led_apply_pwm+0x5c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001844:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <led_apply_pwm+0x5c>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <led_apply_pwm+0x5c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8001852:	2101      	movs	r1, #1
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <led_apply_pwm+0x5c>)
 8001856:	f008 fc9f 	bl	800a198 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 800185a:	4a03      	ldr	r2, [pc, #12]	@ (8001868 <led_apply_pwm+0x5c>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000060c 	.word	0x2000060c

0800186c <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
    if (!led)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d029      	beq.n	80018ce <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 800187a:	f000 f913 	bl	8001aa4 <led_pwm_stop>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00d      	beq.n	80018a4 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001888:	4a13      	ldr	r2, [pc, #76]	@ (80018d8 <led_force_off+0x6c>)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <led_force_off+0x70>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <led_force_off+0x74>)
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	f06f 0203 	mvn.w	r2, #3
 800189c:	2164      	movs	r1, #100	@ 0x64
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fb2e 	bl	8001f00 <log_event_auto>
    }
    led_gpio_config_output(led);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fe85 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	f004 f963 	bl	8005b80 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	735a      	strb	r2, [r3, #13]
 80018cc:	e000      	b.n	80018d0 <led_force_off+0x64>
        return;
 80018ce:	bf00      	nop
}
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800dc2c 	.word	0x0800dc2c
 80018dc:	0800dc6c 	.word	0x0800dc6c
 80018e0:	0800dc90 	.word	0x0800dc90

080018e4 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af04      	add	r7, sp, #16
 80018ea:	6078      	str	r0, [r7, #4]
    if (!led)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d029      	beq.n	8001946 <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 80018f2:	f000 f8d7 	bl	8001aa4 <led_pwm_stop>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00d      	beq.n	800191c <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001900:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <led_force_on+0x6c>)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <led_force_on+0x70>)
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <led_force_on+0x74>)
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	f06f 0203 	mvn.w	r2, #3
 8001914:	2164      	movs	r1, #100	@ 0x64
 8001916:	2001      	movs	r0, #1
 8001918:	f000 faf2 	bl	8001f00 <log_event_auto>
    }
    led_gpio_config_output(led);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fe49 	bl	80015b4 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f004 f927 	bl	8005b80 <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	735a      	strb	r2, [r3, #13]
 8001944:	e000      	b.n	8001948 <led_force_on+0x64>
        return;
 8001946:	bf00      	nop
}
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800dc2c 	.word	0x0800dc2c
 8001954:	0800dc6c 	.word	0x0800dc6c
 8001958:	0800dc90 	.word	0x0800dc90

0800195c <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03c      	beq.n	80019e8 <led_force_blink+0x8c>
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d039      	beq.n	80019e8 <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fece 	bl	8001718 <led_compute_period_ticks>
 800197c:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d801      	bhi.n	8001988 <led_force_blink+0x2c>
        period_ticks = 2u;
 8001984:	2302      	movs	r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198e:	d902      	bls.n	8001996 <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8001990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001994:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fe2e 	bl	80015fe <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff ff31 	bl	800180c <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 80019aa:	f000 f85d 	bl	8001a68 <led_pwm_start>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00f      	beq.n	80019d4 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 80019b4:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <led_force_blink+0x94>)
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <led_force_blink+0x98>)
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <led_force_blink+0x9c>)
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	f06f 0203 	mvn.w	r2, #3
 80019c4:	2164      	movs	r1, #100	@ 0x64
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fa9a 	bl	8001f00 <log_event_auto>
        led_force_off(led);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff4d 	bl	800186c <led_force_off>
        return;
 80019d2:	e00a      	b.n	80019ea <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	735a      	strb	r2, [r3, #13]
 80019e6:	e000      	b.n	80019ea <led_force_blink+0x8e>
        return;
 80019e8:	bf00      	nop
}
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	0800dc2c 	.word	0x0800dc2c
 80019f4:	0800dc98 	.word	0x0800dc98
 80019f8:	0800dc90 	.word	0x0800dc90

080019fc <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	803b      	strh	r3, [r7, #0]
    if (!led)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d026      	beq.n	8001a60 <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a22:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8001a24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d103      	bne.n	8001a38 <led_apply_config+0x3c>
        led_force_on(led);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff57 	bl	80018e4 <led_force_on>
 8001a36:	e00e      	b.n	8001a56 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d108      	bne.n	8001a50 <led_apply_config+0x54>
 8001a3e:	883b      	ldrh	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 8001a44:	883b      	ldrh	r3, [r7, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff87 	bl	800195c <led_force_blink>
 8001a4e:	e002      	b.n	8001a56 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff0b 	bl	800186c <led_force_off>
    }

    if (primask == 0u) {
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5c:	b662      	cpsie	i
}
 8001a5e:	e000      	b.n	8001a62 <led_apply_config+0x66>
        return;
 8001a60:	bf00      	nop
        __enable_irq();
    }
}
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <led_pwm_start+0x34>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <led_pwm_start+0x12>
        return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e00c      	b.n	8001a94 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4808      	ldr	r0, [pc, #32]	@ (8001aa0 <led_pwm_start+0x38>)
 8001a7e:	f007 fad1 	bl	8009024 <HAL_TIM_PWM_Start>
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <led_pwm_start+0x34>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000ba 	.word	0x200000ba
 8001aa0:	2000060c 	.word	0x2000060c

08001aa4 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 8001aaa:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <led_pwm_stop+0x64>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <led_pwm_stop+0x12>
        return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e024      	b.n	8001b00 <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aba:	f007 fc63 	bl	8009384 <HAL_TIM_PWM_Stop>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11a      	bne.n	8001afe <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10f      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <led_pwm_stop+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	f240 4344 	movw	r3, #1092	@ 0x444
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <led_pwm_stop+0x54>
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <led_pwm_stop+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <led_pwm_stop+0x68>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 8001af8:	4b03      	ldr	r3, [pc, #12]	@ (8001b08 <led_pwm_stop+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
    }
    return st;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000ba 	.word	0x200000ba
 8001b0c:	2000060c 	.word	0x2000060c

08001b10 <led_service_init>:

void led_service_init(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af02      	add	r7, sp, #8
    g_pwm_running = 0u;
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <led_service_init+0x110>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e02d      	b.n	8001b7e <led_service_init+0x6e>
        led_gpio_config_output(&g_leds[i]);
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	4a3f      	ldr	r2, [pc, #252]	@ (8001c24 <led_service_init+0x114>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fd42 	bl	80015b4 <led_gpio_config_output>
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 8001b30:	4a3c      	ldr	r2, [pc, #240]	@ (8001c24 <led_service_init+0x114>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <led_service_init+0x114>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f004 f819 	bl	8005b80 <HAL_GPIO_WritePin>
        g_leds[i].mode = LED_MODE_OFF;
 8001b4e:	4a35      	ldr	r2, [pc, #212]	@ (8001c24 <led_service_init+0x114>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	330c      	adds	r3, #12
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_centi_hz = 0u;
 8001b5c:	4a31      	ldr	r2, [pc, #196]	@ (8001c24 <led_service_init+0x114>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	330e      	adds	r3, #14
 8001b66:	2200      	movs	r2, #0
 8001b68:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 8001b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c24 <led_service_init+0x114>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	330d      	adds	r3, #13
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ce      	beq.n	8001b22 <led_service_init+0x12>
    }

    if (htim15.Instance != TIM15) {
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <led_service_init+0x118>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <led_service_init+0x11c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d001      	beq.n	8001b92 <led_service_init+0x82>
        MX_TIM15_Init();
 8001b8e:	f002 fc7f 	bl	8004490 <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8001b92:	4825      	ldr	r0, [pc, #148]	@ (8001c28 <led_service_init+0x118>)
 8001b94:	f007 f932 	bl	8008dfc <HAL_TIM_PWM_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <led_service_init+0xa8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 8001b9e:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <led_service_init+0x120>)
 8001ba0:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <led_service_init+0x124>)
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <led_service_init+0x128>)
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	f06f 0203 	mvn.w	r2, #3
 8001bae:	2164      	movs	r1, #100	@ 0x64
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 f9a5 	bl	8001f00 <log_event_auto>
        return;
 8001bb6:	e02f      	b.n	8001c18 <led_service_init+0x108>
    }

    TIM_OC_InitTypeDef oc = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	@ 0x60
 8001bcc:	603b      	str	r3, [r7, #0]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    oc.Pulse = 0u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	4619      	mov	r1, r3
 8001bec:	480e      	ldr	r0, [pc, #56]	@ (8001c28 <led_service_init+0x118>)
 8001bee:	f008 f885 	bl	8009cfc <HAL_TIM_PWM_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00c      	beq.n	8001c12 <led_service_init+0x102>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <led_service_init+0x120>)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <led_service_init+0x12c>)
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <led_service_init+0x128>)
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	f06f 0203 	mvn.w	r2, #3
 8001c08:	2164      	movs	r1, #100	@ 0x64
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 f978 	bl	8001f00 <log_event_auto>
        return;
 8001c10:	e002      	b.n	8001c18 <led_service_init+0x108>
    }

    led_force_off(&g_leds[0]);
 8001c12:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <led_service_init+0x114>)
 8001c14:	f7ff fe2a 	bl	800186c <led_force_off>
}
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200000ba 	.word	0x200000ba
 8001c24:	20000000 	.word	0x20000000
 8001c28:	2000060c 	.word	0x2000060c
 8001c2c:	40014000 	.word	0x40014000
 8001c30:	0800dc2c 	.word	0x0800dc2c
 8001c34:	0800dcb8 	.word	0x0800dcb8
 8001c38:	0800dc90 	.word	0x0800dc90
 8001c3c:	0800dcdc 	.word	0x0800dcdc

08001c40 <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b097      	sub	sp, #92	@ 0x5c
 8001c44:	af0a      	add	r7, sp, #40	@ 0x28
 8001c46:	6178      	str	r0, [r7, #20]
 8001c48:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80d2 	beq.w	8001df6 <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d902      	bls.n	8001c5e <led_on_led_ctrl+0x1e>
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c5c:	d90e      	bls.n	8001c7c <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 8001c5e:	4a68      	ldr	r2, [pc, #416]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	4b67      	ldr	r3, [pc, #412]	@ (8001e04 <led_on_led_ctrl+0x1c4>)
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	4b67      	ldr	r3, [pc, #412]	@ (8001e08 <led_on_led_ctrl+0x1c8>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	f06f 0203 	mvn.w	r2, #3
 8001c72:	2164      	movs	r1, #100	@ 0x64
 8001c74:	2001      	movs	r0, #1
 8001c76:	f000 f943 	bl	8001f00 <log_event_auto>
        return;
 8001c7a:	e0bd      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	461a      	mov	r2, r3
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7fe fcef 	bl	8000668 <led_ctrl_req_decoder>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 8001c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00f      	beq.n	8001cb8 <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 8001c98:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8001c9c:	4958      	ldr	r1, [pc, #352]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001c9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	4b59      	ldr	r3, [pc, #356]	@ (8001e0c <led_on_led_ctrl+0x1cc>)
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <led_on_led_ctrl+0x1d0>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	2164      	movs	r1, #100	@ 0x64
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 f925 	bl	8001f00 <log_event_auto>
        return;
 8001cb6:	e09f      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 8001cb8:	7f7b      	ldrb	r3, [r7, #29]
 8001cba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd4:	e02d      	b.n	8001d32 <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 8001cdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01e      	beq.n	8001d2a <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8001cec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8001cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4a45      	ldr	r2, [pc, #276]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d00:	1898      	adds	r0, r3, r2
 8001d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3320      	adds	r3, #32
 8001d08:	f107 0210 	add.w	r2, r7, #16
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	3320      	adds	r3, #32
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f7ff fe6a 	bl	80019fc <led_apply_config>
 8001d28:	e000      	b.n	8001d2c <led_on_led_ctrl+0xec>
            continue;
 8001d2a:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8001d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2e:	3301      	adds	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ce      	beq.n	8001cd6 <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8001d38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d44:	4013      	ands	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001d52:	e00a      	b.n	8001d6a <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8001d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <led_on_led_ctrl+0x12a>
 8001d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 8001d64:	2301      	movs	r3, #1
 8001d66:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 8001d6a:	7f3b      	ldrb	r3, [r7, #28]
 8001d6c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001d70:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fc6b 	bl	8001650 <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 8001d7a:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001d7e:	4e20      	ldr	r6, [pc, #128]	@ (8001e00 <led_on_led_ctrl+0x1c0>)
 8001d80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001d84:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001d88:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001d90:	89db      	ldrh	r3, [r3, #14]
 8001d92:	4821      	ldr	r0, [pc, #132]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001d94:	fba0 0303 	umull	r0, r3, r0, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001da0:	89db      	ldrh	r3, [r3, #14]
 8001da2:	481d      	ldr	r0, [pc, #116]	@ (8001e18 <led_on_led_ctrl+0x1d8>)
 8001da4:	fba0 5003 	umull	r5, r0, r0, r3
 8001da8:	0940      	lsrs	r0, r0, #5
 8001daa:	2564      	movs	r5, #100	@ 0x64
 8001dac:	fb05 f000 	mul.w	r0, r5, r0
 8001db0:	1a1b      	subs	r3, r3, r0
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461d      	mov	r5, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <led_on_led_ctrl+0x1d4>)
 8001db8:	7b5b      	ldrb	r3, [r3, #13]
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4815      	ldr	r0, [pc, #84]	@ (8001e1c <led_on_led_ctrl+0x1dc>)
 8001dc6:	6800      	ldr	r0, [r0, #0]
 8001dc8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001dca:	9009      	str	r0, [sp, #36]	@ 0x24
 8001dcc:	9308      	str	r3, [sp, #32]
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	9007      	str	r0, [sp, #28]
 8001dd2:	9506      	str	r5, [sp, #24]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	9005      	str	r0, [sp, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	9103      	str	r1, [sp, #12]
 8001dde:	9202      	str	r2, [sp, #8]
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <led_on_led_ctrl+0x1e0>)
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <led_on_led_ctrl+0x1e4>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4633      	mov	r3, r6
 8001dea:	4622      	mov	r2, r4
 8001dec:	2102      	movs	r1, #2
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 f886 	bl	8001f00 <log_event_auto>
 8001df4:	e000      	b.n	8001df8 <led_on_led_ctrl+0x1b8>
        return;
 8001df6:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
}
 8001df8:	3734      	adds	r7, #52	@ 0x34
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	0800dc2c 	.word	0x0800dc2c
 8001e04:	0800dd04 	.word	0x0800dd04
 8001e08:	0800dd20 	.word	0x0800dd20
 8001e0c:	0800dd24 	.word	0x0800dd24
 8001e10:	0800dd48 	.word	0x0800dd48
 8001e14:	20000000 	.word	0x20000000
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	2000060c 	.word	0x2000060c
 8001e20:	0800dd50 	.word	0x0800dd50
 8001e24:	0800dda0 	.word	0x0800dda0

08001e28 <log_service_init>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "usart.h"

void log_service_init(void){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <log_service_init+0x18>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6898      	ldr	r0, [r3, #8]
 8001e32:	2300      	movs	r3, #0
 8001e34:	2202      	movs	r2, #2
 8001e36:	2100      	movs	r1, #0
 8001e38:	f00a fe80 	bl	800cb3c <setvbuf>
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000028 	.word	0x20000028

08001e44 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	603a      	str	r2, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	460b      	mov	r3, r1
 8001e52:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 8001e54:	79f9      	ldrb	r1, [r7, #7]
 8001e56:	79ba      	ldrb	r2, [r7, #6]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <log_event_ids+0x24>)
 8001e5c:	f00a fe5c 	bl	800cb18 <iprintf>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	0800dda8 	.word	0x0800dda8

08001e6c <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <log_event_names+0x16>
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <log_event_names+0x40>)
 8001e80:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <log_event_names+0x20>
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <log_event_names+0x40>)
 8001e8a:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <log_event_names+0x2a>
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <log_event_names+0x40>)
 8001e94:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <log_event_names+0x44>)
 8001e9e:	f00a fe3b 	bl	800cb18 <iprintf>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	0800ddc8 	.word	0x0800ddc8
 8001eb0:	0800ddcc 	.word	0x0800ddcc

08001eb4 <_write>:

// Mantém _write exatamente igual: utilizado pelo printf para enviar à USART1.
int _write(int fd, char *ptr, int len) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d002      	beq.n	8001ecc <_write+0x18>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d111      	bne.n	8001ef0 <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	4809      	ldr	r0, [pc, #36]	@ (8001efc <_write+0x48>)
 8001ed8:	f009 fdc0 	bl	800ba5c <HAL_UART_Transmit>
 8001edc:	4603      	mov	r3, r0
 8001ede:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <_write+0x36>
        return len;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e004      	b.n	8001ef4 <_write+0x40>
      else
        return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e001      	b.n	8001ef4 <_write+0x40>
    }
    return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000658 	.word	0x20000658

08001f00 <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0a8      	sub	sp, #160	@ 0xa0
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60ba      	str	r2, [r7, #8]
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 8001f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <log_event_auto+0x3c>
 8001f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8001f24:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001f28:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001f2a:	f107 0018 	add.w	r0, r7, #24
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	f00a ff27 	bl	800cd88 <vsniprintf>
    if(fmt && fmt[0]){
 8001f3a:	e003      	b.n	8001f44 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001f3c:	233f      	movs	r3, #63	@ 0x3f
 8001f3e:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 8001f40:	2300      	movs	r3, #0
 8001f42:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <log_event_auto+0x4e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e000      	b.n	8001f50 <log_event_auto+0x50>
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <log_event_auto+0x84>)
 8001f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8001f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <log_event_auto+0x62>
 8001f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f60:	e000      	b.n	8001f64 <log_event_auto+0x64>
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <log_event_auto+0x84>)
 8001f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001f70:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <log_event_auto+0x88>)
 8001f76:	f00a fdcf 	bl	800cb18 <iprintf>
}
 8001f7a:	bf00      	nop
 8001f7c:	37a0      	adds	r7, #160	@ 0xa0
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	0800ddc8 	.word	0x0800ddc8
 8001f88:	0800ddcc 	.word	0x0800ddcc

08001f8c <gpio_set_high>:
static int64_t g_encoder_position[MOTION_AXIS_COUNT];
static uint32_t g_encoder_last_raw[MOTION_AXIS_COUNT];
static int64_t g_encoder_origin[MOTION_AXIS_COUNT];
// Demo flags
static volatile uint8_t g_demo_continuous = 0u;
static inline void gpio_set_high(GPIO_TypeDef *port, uint16_t pin) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
	if (!port)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <gpio_set_high+0x1a>
		return;
	port->BSRR = pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	e000      	b.n	8001fa8 <gpio_set_high+0x1c>
		return;
 8001fa6:	bf00      	nop
}
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <gpio_set_low>:
static inline void gpio_set_low(GPIO_TypeDef *port, uint16_t pin) {
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	807b      	strh	r3, [r7, #2]
	if (!port)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <gpio_set_low+0x1c>
		return;
	port->BSRR = ((uint32_t) pin) << 16u;
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	041a      	lsls	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
 8001fcc:	e000      	b.n	8001fd0 <gpio_set_low+0x1e>
		return;
 8001fce:	bf00      	nop
}
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <motion_lock>:
static inline uint32_t motion_lock(void) {
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe4:	603b      	str	r3, [r7, #0]
  return(result);
 8001fe6:	683b      	ldr	r3, [r7, #0]
	uint32_t primask = __get_PRIMASK();
 8001fe8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fea:	b672      	cpsid	i
}
 8001fec:	bf00      	nop
	__disable_irq();
	return primask;
 8001fee:	687b      	ldr	r3, [r7, #4]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <motion_unlock>:
static inline void motion_unlock(uint32_t primask) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f383 8810 	msr	PRIMASK, r3
}
 800200e:	bf00      	nop
	__set_PRIMASK(primask);
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <motion_total_for_axis>:
static inline uint32_t motion_total_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <motion_total_for_axis+0x18>
 800202e:	2b01      	cmp	r3, #1
 8002030:	d003      	beq.n	800203a <motion_total_for_axis+0x1e>
 8002032:	e005      	b.n	8002040 <motion_total_for_axis+0x24>
	case AXIS_X:
		return req->sx;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	e004      	b.n	8002044 <motion_total_for_axis+0x28>
	case AXIS_Y:
		return req->sy;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	e001      	b.n	8002044 <motion_total_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->sz;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
	}
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <motion_velocity_for_axis>:
static inline uint16_t motion_velocity_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <motion_velocity_for_axis+0x18>
 8002062:	2b01      	cmp	r3, #1
 8002064:	d003      	beq.n	800206e <motion_velocity_for_axis+0x1e>
 8002066:	e005      	b.n	8002074 <motion_velocity_for_axis+0x24>
	case AXIS_X:
		return req->vx;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	885b      	ldrh	r3, [r3, #2]
 800206c:	e004      	b.n	8002078 <motion_velocity_for_axis+0x28>
	case AXIS_Y:
		return req->vy;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	891b      	ldrh	r3, [r3, #8]
 8002072:	e001      	b.n	8002078 <motion_velocity_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->vz;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8a1b      	ldrh	r3, [r3, #16]
	}
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <motion_kp_for_axis>:
static inline uint16_t motion_kp_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <motion_kp_for_axis+0x18>
 8002096:	2b01      	cmp	r3, #1
 8002098:	d003      	beq.n	80020a2 <motion_kp_for_axis+0x1e>
 800209a:	e005      	b.n	80020a8 <motion_kp_for_axis+0x24>
	case AXIS_X:
		return req->kp_x;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8b1b      	ldrh	r3, [r3, #24]
 80020a0:	e004      	b.n	80020ac <motion_kp_for_axis+0x28>
	case AXIS_Y:
		return req->kp_y;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8bdb      	ldrh	r3, [r3, #30]
 80020a6:	e001      	b.n	80020ac <motion_kp_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->kp_z;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
	}
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <motion_ki_for_axis>:
static inline uint16_t motion_ki_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <motion_ki_for_axis+0x18>
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d003      	beq.n	80020d6 <motion_ki_for_axis+0x1e>
 80020ce:	e005      	b.n	80020dc <motion_ki_for_axis+0x24>
	case AXIS_X:
		return req->ki_x;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8b5b      	ldrh	r3, [r3, #26]
 80020d4:	e004      	b.n	80020e0 <motion_ki_for_axis+0x28>
	case AXIS_Y:
		return req->ki_y;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8c1b      	ldrh	r3, [r3, #32]
 80020da:	e001      	b.n	80020e0 <motion_ki_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->ki_z;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
	}
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <motion_kd_for_axis>:
static inline uint16_t motion_kd_for_axis(const move_queue_add_req_t *req,
		uint8_t axis) {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
	switch (axis) {
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <motion_kd_for_axis+0x18>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d003      	beq.n	800210a <motion_kd_for_axis+0x1e>
 8002102:	e005      	b.n	8002110 <motion_kd_for_axis+0x24>
	case AXIS_X:
		return req->kd_x;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8b9b      	ldrh	r3, [r3, #28]
 8002108:	e004      	b.n	8002114 <motion_kd_for_axis+0x28>
	case AXIS_Y:
		return req->kd_y;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800210e:	e001      	b.n	8002114 <motion_kd_for_axis+0x28>
	case AXIS_Z:
	default:
		return req->kd_z;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
	}
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <motion_clamp_error>:
static inline int8_t motion_clamp_error(int32_t value) {
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if (value > 127)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b7f      	cmp	r3, #127	@ 0x7f
 800212c:	dd01      	ble.n	8002132 <motion_clamp_error+0x12>
		return 127;
 800212e:	237f      	movs	r3, #127	@ 0x7f
 8002130:	e008      	b.n	8002144 <motion_clamp_error+0x24>
	if (value < -128)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002138:	da02      	bge.n	8002140 <motion_clamp_error+0x20>
		return -128;
 800213a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800213e:	e001      	b.n	8002144 <motion_clamp_error+0x24>
	return (int8_t) value;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	b25b      	sxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <motion_refresh_status_locked>:
static void motion_refresh_status_locked(void) {
 8002150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002154:	b0a3      	sub	sp, #140	@ 0x8c
 8002156:	af00      	add	r7, sp, #0
	g_status.queue_depth = (uint8_t) (g_queue_count
			+ (g_has_active_segment ? 1u : 0u));
 8002158:	4b9a      	ldr	r3, [pc, #616]	@ (80023c4 <motion_refresh_status_locked+0x274>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
	g_status.queue_depth = (uint8_t) (g_queue_count
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <motion_refresh_status_locked+0x16>
 8002162:	2201      	movs	r2, #1
 8002164:	e000      	b.n	8002168 <motion_refresh_status_locked+0x18>
 8002166:	2200      	movs	r2, #0
 8002168:	4b97      	ldr	r3, [pc, #604]	@ (80023c8 <motion_refresh_status_locked+0x278>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4413      	add	r3, r2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4a96      	ldr	r2, [pc, #600]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002172:	7053      	strb	r3, [r2, #1]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800217a:	e118      	b.n	80023ae <motion_refresh_status_locked+0x25e>
		const motion_axis_state_t *ax = &g_axis_state[axis];
 800217c:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4a91      	ldr	r2, [pc, #580]	@ (80023d0 <motion_refresh_status_locked+0x280>)
 800218a:	4413      	add	r3, r2
 800218c:	677b      	str	r3, [r7, #116]	@ 0x74
		uint32_t total = ax->total_steps;
 800218e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	673b      	str	r3, [r7, #112]	@ 0x70
		uint32_t emitted = ax->emitted_steps;
 8002194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	66fb      	str	r3, [r7, #108]	@ 0x6c
		uint8_t pct = 0u;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		if (g_has_active_segment && total > 0u) {
 80021a0:	4b88      	ldr	r3, [pc, #544]	@ (80023c4 <motion_refresh_status_locked+0x274>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d049      	beq.n	800223e <motion_refresh_status_locked+0xee>
 80021aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d046      	beq.n	800223e <motion_refresh_status_locked+0xee>
			uint64_t scaled = (uint64_t) emitted * 100u;
 80021b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b2:	2200      	movs	r2, #0
 80021b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80021b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021bc:	1891      	adds	r1, r2, r2
 80021be:	6239      	str	r1, [r7, #32]
 80021c0:	415b      	adcs	r3, r3
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021c8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80021ca:	eb12 0801 	adds.w	r8, r2, r1
 80021ce:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80021d0:	eb43 0901 	adc.w	r9, r3, r1
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80021e0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80021e4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80021e8:	eb18 0102 	adds.w	r1, r8, r2
 80021ec:	6439      	str	r1, [r7, #64]	@ 0x40
 80021ee:	eb49 0303 	adc.w	r3, r9, r3
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80021fa:	4602      	mov	r2, r0
 80021fc:	189b      	adds	r3, r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002202:	460a      	mov	r2, r1
 8002204:	4153      	adcs	r3, r2
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			pct = (uint8_t) (scaled / total);
 8002210:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002212:	2200      	movs	r2, #0
 8002214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002216:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800221c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002220:	f7fe f826 	bl	8000270 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			if (pct > 100u)
 800222e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002232:	2b64      	cmp	r3, #100	@ 0x64
 8002234:	d954      	bls.n	80022e0 <motion_refresh_status_locked+0x190>
				pct = 100u;
 8002236:	2364      	movs	r3, #100	@ 0x64
 8002238:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		if (g_has_active_segment && total > 0u) {
 800223c:	e050      	b.n	80022e0 <motion_refresh_status_locked+0x190>
		} else if (total == 0u && g_has_active_segment) {
 800223e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002240:	2b00      	cmp	r3, #0
 8002242:	d108      	bne.n	8002256 <motion_refresh_status_locked+0x106>
 8002244:	4b5f      	ldr	r3, [pc, #380]	@ (80023c4 <motion_refresh_status_locked+0x274>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <motion_refresh_status_locked+0x106>
			pct = 100u;
 800224e:	2364      	movs	r3, #100	@ 0x64
 8002250:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002254:	e045      	b.n	80022e2 <motion_refresh_status_locked+0x192>
		} else if (!g_has_active_segment && total > 0u) {
 8002256:	4b5b      	ldr	r3, [pc, #364]	@ (80023c4 <motion_refresh_status_locked+0x274>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d140      	bne.n	80022e2 <motion_refresh_status_locked+0x192>
 8002260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002262:	2b00      	cmp	r3, #0
 8002264:	d03d      	beq.n	80022e2 <motion_refresh_status_locked+0x192>
			pct = (emitted >= total) ?
 8002266:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002268:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800226a:	429a      	cmp	r2, r3
 800226c:	d234      	bcs.n	80022d8 <motion_refresh_status_locked+0x188>
					100u : (uint8_t) (((uint64_t) emitted * 100u) / total);
 800226e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002270:	2200      	movs	r2, #0
 8002272:	469a      	mov	sl, r3
 8002274:	4693      	mov	fp, r2
 8002276:	4652      	mov	r2, sl
 8002278:	465b      	mov	r3, fp
 800227a:	1891      	adds	r1, r2, r2
 800227c:	6139      	str	r1, [r7, #16]
 800227e:	415b      	adcs	r3, r3
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002286:	eb12 040a 	adds.w	r4, r2, sl
 800228a:	eb43 050b 	adc.w	r5, r3, fp
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	016b      	lsls	r3, r5, #5
 8002298:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800229c:	0162      	lsls	r2, r4, #5
 800229e:	18a1      	adds	r1, r4, r2
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	eb45 0303 	adc.w	r3, r5, r3
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80022ac:	460b      	mov	r3, r1
 80022ae:	eb13 030a 	adds.w	r3, r3, sl
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b4:	4613      	mov	r3, r2
 80022b6:	eb43 030b 	adc.w	r3, r3, fp
 80022ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80022bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022be:	2200      	movs	r2, #0
 80022c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022cc:	f7fd ffd0 	bl	8000270 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
			pct = (emitted >= total) ?
 80022d4:	b2d3      	uxtb	r3, r2
 80022d6:	e000      	b.n	80022da <motion_refresh_status_locked+0x18a>
 80022d8:	2364      	movs	r3, #100	@ 0x64
 80022da:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80022de:	e000      	b.n	80022e2 <motion_refresh_status_locked+0x192>
		if (g_has_active_segment && total > 0u) {
 80022e0:	bf00      	nop
		}
		int64_t actual_counts = g_encoder_position[axis]
 80022e2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80022e6:	4a3b      	ldr	r2, [pc, #236]	@ (80023d4 <motion_refresh_status_locked+0x284>)
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	e9d3 0100 	ldrd	r0, r1, [r3]
				- g_encoder_origin[axis];
 80022f0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80022f4:	4a38      	ldr	r2, [pc, #224]	@ (80023d8 <motion_refresh_status_locked+0x288>)
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
		int64_t actual_counts = g_encoder_position[axis]
 80022fe:	1a86      	subs	r6, r0, r2
 8002300:	603e      	str	r6, [r7, #0]
 8002302:	eb61 0303 	sbc.w	r3, r1, r3
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800230c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		if (actual_counts > (int64_t) INT32_MAX)
 8002310:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002314:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002318:	f173 0300 	sbcs.w	r3, r3, #0
 800231c:	db06      	blt.n	800232c <motion_refresh_status_locked+0x1dc>
			actual_counts = INT32_MAX;
 800231e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 800232a:	e00c      	b.n	8002346 <motion_refresh_status_locked+0x1f6>
		else if (actual_counts < (int64_t) INT32_MIN)
 800232c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002330:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002334:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002338:	da05      	bge.n	8002346 <motion_refresh_status_locked+0x1f6>
			actual_counts = INT32_MIN;
 800233a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
 8002342:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		int32_t desired_counts = (int32_t) ax->target_steps;
 8002346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		int32_t err = desired_counts - (int32_t) actual_counts;
 800234c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800234e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	65bb      	str	r3, [r7, #88]	@ 0x58
		int8_t err8 = motion_clamp_error(err);
 8002354:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002356:	f7ff fee3 	bl	8002120 <motion_clamp_error>
 800235a:	4603      	mov	r3, r0
 800235c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		switch (axis) {
 8002360:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <motion_refresh_status_locked+0x21e>
 8002368:	2b01      	cmp	r3, #1
 800236a:	d009      	beq.n	8002380 <motion_refresh_status_locked+0x230>
 800236c:	e011      	b.n	8002392 <motion_refresh_status_locked+0x242>
		case AXIS_X:
			g_status.pctX = pct;
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002370:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002374:	7093      	strb	r3, [r2, #2]
			g_status.pidErrX = err8;
 8002376:	4a15      	ldr	r2, [pc, #84]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002378:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800237c:	7153      	strb	r3, [r2, #5]
			break;
 800237e:	e011      	b.n	80023a4 <motion_refresh_status_locked+0x254>
		case AXIS_Y:
			g_status.pctY = pct;
 8002380:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002382:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002386:	70d3      	strb	r3, [r2, #3]
			g_status.pidErrY = err8;
 8002388:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 800238a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800238e:	7193      	strb	r3, [r2, #6]
			break;
 8002390:	e008      	b.n	80023a4 <motion_refresh_status_locked+0x254>
		case AXIS_Z:
		default:
			g_status.pctZ = pct;
 8002392:	4a0e      	ldr	r2, [pc, #56]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 8002394:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002398:	7113      	strb	r3, [r2, #4]
			g_status.pidErrZ = err8;
 800239a:	4a0c      	ldr	r2, [pc, #48]	@ (80023cc <motion_refresh_status_locked+0x27c>)
 800239c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023a0:	71d3      	strb	r3, [r2, #7]
			break;
 80023a2:	bf00      	nop
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80023a4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80023a8:	3301      	adds	r3, #1
 80023aa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80023ae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	f67f aee2 	bls.w	800217c <motion_refresh_status_locked+0x2c>
		}
	}
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	378c      	adds	r7, #140	@ 0x8c
 80023be:	46bd      	mov	sp, r7
 80023c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c4:	2000010c 	.word	0x2000010c
 80023c8:	20000272 	.word	0x20000272
 80023cc:	200000bc 	.word	0x200000bc
 80023d0:	200000c4 	.word	0x200000c4
 80023d4:	20000278 	.word	0x20000278
 80023d8:	200002a0 	.word	0x200002a0

080023dc <motion_hw_set_direction>:
static void motion_hw_set_direction(uint8_t axis, uint8_t dir) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	460a      	mov	r2, r1
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71bb      	strb	r3, [r7, #6]
	const motion_axis_hw_t *hw = &g_axis_hw[axis];
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	015b      	lsls	r3, r3, #5
 80023f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002428 <motion_hw_set_direction+0x4c>)
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
	if (dir)
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <motion_hw_set_direction+0x32>
		gpio_set_high(hw->dir_port, hw->dir_pin);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	899b      	ldrh	r3, [r3, #12]
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f7ff fdc0 	bl	8001f8c <gpio_set_high>
	else
		gpio_set_low(hw->dir_port, hw->dir_pin);
}
 800240c:	e007      	b.n	800241e <motion_hw_set_direction+0x42>
		gpio_set_low(hw->dir_port, hw->dir_pin);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	899b      	ldrh	r3, [r3, #12]
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7ff fdca 	bl	8001fb2 <gpio_set_low>
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	0800e1c4 	.word	0x0800e1c4

0800242c <motion_hw_enable_axis>:
static void motion_hw_enable_axis(uint8_t axis, uint8_t enable) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	460a      	mov	r2, r1
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	4613      	mov	r3, r2
 800243a:	71bb      	strb	r3, [r7, #6]
	const motion_axis_hw_t *hw = &g_axis_hw[axis];
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	015b      	lsls	r3, r3, #5
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <motion_hw_enable_axis+0x4c>)
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
	if (enable)
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <motion_hw_enable_axis+0x32>
		gpio_set_low(hw->ena_port, hw->ena_pin);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8a9b      	ldrh	r3, [r3, #20]
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f7ff fdab 	bl	8001fb2 <gpio_set_low>
	else
		gpio_set_high(hw->ena_port, hw->ena_pin);
}
 800245c:	e007      	b.n	800246e <motion_hw_enable_axis+0x42>
		gpio_set_high(hw->ena_port, hw->ena_pin);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8a9b      	ldrh	r3, [r3, #20]
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f7ff fd8f 	bl	8001f8c <gpio_set_high>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	0800e1c4 	.word	0x0800e1c4

0800247c <motion_hw_reset_step>:
static void motion_hw_reset_step(uint8_t axis) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	const motion_axis_hw_t *hw = &g_axis_hw[axis];
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	015b      	lsls	r3, r3, #5
 800248a:	4a07      	ldr	r2, [pc, #28]	@ (80024a8 <motion_hw_reset_step+0x2c>)
 800248c:	4413      	add	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
	gpio_set_low(hw->step_port, hw->step_pin);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7ff fd89 	bl	8001fb2 <gpio_set_low>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	0800e1c4 	.word	0x0800e1c4

080024ac <motion_stop_all_axes_locked>:
static void motion_stop_all_axes_locked(void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	71fb      	strb	r3, [r7, #7]
 80024b6:	e05a      	b.n	800256e <motion_stop_all_axes_locked+0xc2>
		motion_hw_reset_step(axis);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ffde 	bl	800247c <motion_hw_reset_step>
		motion_hw_enable_axis(axis, 0u);
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ffb1 	bl	800242c <motion_hw_enable_axis>
		g_axis_state[axis].total_steps = 0u;
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	492c      	ldr	r1, [pc, #176]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
		g_axis_state[axis].target_steps = 0u;
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	4928      	ldr	r1, [pc, #160]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	3304      	adds	r3, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
		g_axis_state[axis].emitted_steps = 0u;
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	4923      	ldr	r1, [pc, #140]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3308      	adds	r3, #8
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
		g_axis_state[axis].velocity_per_tick = 0u;
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	491e      	ldr	r1, [pc, #120]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	330c      	adds	r3, #12
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].kp = 0u;
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	4919      	ldr	r1, [pc, #100]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	330e      	adds	r3, #14
 8002528:	2200      	movs	r2, #0
 800252a:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].ki = 0u;
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	4914      	ldr	r1, [pc, #80]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	3310      	adds	r3, #16
 800253c:	2200      	movs	r2, #0
 800253e:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].kd = 0u;
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	490f      	ldr	r1, [pc, #60]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3312      	adds	r3, #18
 8002550:	2200      	movs	r2, #0
 8002552:	801a      	strh	r2, [r3, #0]
		g_axis_state[axis].step_high = 0u;
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	490a      	ldr	r1, [pc, #40]	@ (8002580 <motion_stop_all_axes_locked+0xd4>)
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	3314      	adds	r3, #20
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	3301      	adds	r3, #1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d9a1      	bls.n	80024b8 <motion_stop_all_axes_locked+0xc>
	}
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200000c4 	.word	0x200000c4

08002584 <motion_queue_clear_locked>:
static void motion_queue_clear_locked(void) {
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
	g_queue_head = 0u;
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <motion_queue_clear_locked+0x20>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
	g_queue_tail = 0u;
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <motion_queue_clear_locked+0x24>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
	g_queue_count = 0u;
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <motion_queue_clear_locked+0x28>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000270 	.word	0x20000270
 80025a8:	20000271 	.word	0x20000271
 80025ac:	20000272 	.word	0x20000272

080025b0 <motion_queue_push_locked>:
static proto_result_t motion_queue_push_locked(const move_queue_add_req_t *req) {
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	if (g_queue_count >= MOTION_QUEUE_CAPACITY)
 80025b8:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <motion_queue_push_locked+0x68>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b07      	cmp	r3, #7
 80025be:	d902      	bls.n	80025c6 <motion_queue_push_locked+0x16>
		return PROTO_ERR_RANGE;
 80025c0:	f06f 0303 	mvn.w	r3, #3
 80025c4:	e024      	b.n	8002610 <motion_queue_push_locked+0x60>
	g_queue[g_queue_tail].req = *req;
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <motion_queue_push_locked+0x6c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <motion_queue_push_locked+0x70>)
 80025ce:	232c      	movs	r3, #44	@ 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	441a      	add	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	g_queue_tail = (uint8_t) ((g_queue_tail + 1u) % MOTION_QUEUE_CAPACITY);
 80025ec:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <motion_queue_push_locked+0x6c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <motion_queue_push_locked+0x6c>)
 80025fc:	701a      	strb	r2, [r3, #0]
	++g_queue_count;
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <motion_queue_push_locked+0x68>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <motion_queue_push_locked+0x68>)
 8002608:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 800260a:	f7ff fda1 	bl	8002150 <motion_refresh_status_locked>
	return PROTO_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bdb0      	pop	{r4, r5, r7, pc}
 8002618:	20000272 	.word	0x20000272
 800261c:	20000271 	.word	0x20000271
 8002620:	20000110 	.word	0x20000110

08002624 <motion_queue_pop_locked>:
static int motion_queue_pop_locked(move_queue_add_req_t *out) {
 8002624:	b4b0      	push	{r4, r5, r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	if (g_queue_count == 0u)
 800262c:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <motion_queue_pop_locked+0x6c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <motion_queue_pop_locked+0x14>
		return 0;
 8002634:	2300      	movs	r3, #0
 8002636:	e025      	b.n	8002684 <motion_queue_pop_locked+0x60>
	if (out)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <motion_queue_pop_locked+0x40>
		*out = g_queue[g_queue_head].req;
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <motion_queue_pop_locked+0x70>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4a14      	ldr	r2, [pc, #80]	@ (8002698 <motion_queue_pop_locked+0x74>)
 8002648:	232c      	movs	r3, #44	@ 0x2c
 800264a:	fb00 f303 	mul.w	r3, r0, r3
 800264e:	4413      	add	r3, r2
 8002650:	460c      	mov	r4, r1
 8002652:	461d      	mov	r5, r3
 8002654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	g_queue_head = (uint8_t) ((g_queue_head + 1u) % MOTION_QUEUE_CAPACITY);
 8002664:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <motion_queue_pop_locked+0x70>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <motion_queue_pop_locked+0x70>)
 8002674:	701a      	strb	r2, [r3, #0]
	--g_queue_count;
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <motion_queue_pop_locked+0x6c>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <motion_queue_pop_locked+0x6c>)
 8002680:	701a      	strb	r2, [r3, #0]
	return 1;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bcb0      	pop	{r4, r5, r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000272 	.word	0x20000272
 8002694:	20000270 	.word	0x20000270
 8002698:	20000110 	.word	0x20000110

0800269c <motion_begin_segment_locked>:
static void motion_begin_segment_locked(const move_queue_add_req_t *seg) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	if (!seg)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d078      	beq.n	800279c <motion_begin_segment_locked+0x100>
		return;
	g_has_active_segment = 1u;
 80026aa:	4b3e      	ldr	r3, [pc, #248]	@ (80027a4 <motion_begin_segment_locked+0x108>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
 80026b4:	e06e      	b.n	8002794 <motion_begin_segment_locked+0xf8>
		motion_axis_state_t *ax = &g_axis_state[axis];
 80026b6:	7dfa      	ldrb	r2, [r7, #23]
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4a39      	ldr	r2, [pc, #228]	@ (80027a8 <motion_begin_segment_locked+0x10c>)
 80026c2:	4413      	add	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
		uint32_t total = motion_total_for_axis(seg, axis);
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fca6 	bl	800201c <motion_total_for_axis>
 80026d0:	60f8      	str	r0, [r7, #12]
		uint16_t velocity = motion_velocity_for_axis(seg, axis);
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fcba 	bl	8002050 <motion_velocity_for_axis>
 80026dc:	4603      	mov	r3, r0
 80026de:	817b      	strh	r3, [r7, #10]
		ax->total_steps = total;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]
		ax->target_steps = 0u;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
		ax->emitted_steps = 0u;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
		ax->velocity_per_tick = velocity;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	897a      	ldrh	r2, [r7, #10]
 80026f6:	819a      	strh	r2, [r3, #12]
		ax->kp = motion_kp_for_axis(seg, axis);
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fcc1 	bl	8002084 <motion_kp_for_axis>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	81da      	strh	r2, [r3, #14]
		ax->ki = motion_ki_for_axis(seg, axis);
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff fcd2 	bl	80020b8 <motion_ki_for_axis>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	821a      	strh	r2, [r3, #16]
		ax->kd = motion_kd_for_axis(seg, axis);
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fce3 	bl	80020ec <motion_kd_for_axis>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	825a      	strh	r2, [r3, #18]
		ax->step_high = 0u;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2200      	movs	r2, #0
 8002732:	751a      	strb	r2, [r3, #20]
		motion_hw_reset_step(axis);
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fea0 	bl	800247c <motion_hw_reset_step>
		motion_hw_set_direction(axis,
				(uint8_t) ((seg->dirMask >> axis) & 0x1u));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	785b      	ldrb	r3, [r3, #1]
 8002740:	461a      	mov	r2, r3
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	fa42 f303 	asr.w	r3, r2, r3
		motion_hw_set_direction(axis,
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fe41 	bl	80023dc <motion_hw_set_direction>
		if (total > 0u)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <motion_begin_segment_locked+0xd0>
			motion_hw_enable_axis(axis, 1u);
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fe61 	bl	800242c <motion_hw_enable_axis>
 800276a:	e004      	b.n	8002776 <motion_begin_segment_locked+0xda>
		else
			motion_hw_enable_axis(axis, 0u);
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fe5b 	bl	800242c <motion_hw_enable_axis>
		g_encoder_origin[axis] = g_encoder_position[axis];
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	7df9      	ldrb	r1, [r7, #23]
 800277a:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <motion_begin_segment_locked+0x110>)
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	480a      	ldr	r0, [pc, #40]	@ (80027b0 <motion_begin_segment_locked+0x114>)
 8002786:	00c9      	lsls	r1, r1, #3
 8002788:	4401      	add	r1, r0
 800278a:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	3301      	adds	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d98d      	bls.n	80026b6 <motion_begin_segment_locked+0x1a>
 800279a:	e000      	b.n	800279e <motion_begin_segment_locked+0x102>
		return;
 800279c:	bf00      	nop
	}
}
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	2000010c 	.word	0x2000010c
 80027a8:	200000c4 	.word	0x200000c4
 80027ac:	20000278 	.word	0x20000278
 80027b0:	200002a0 	.word	0x200002a0

080027b4 <motion_try_start_next_locked>:
static uint8_t motion_try_start_next_locked(void) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	@ 0x30
 80027b8:	af00      	add	r7, sp, #0
	move_queue_add_req_t next;
	if (!motion_queue_pop_locked(&next))
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff31 	bl	8002624 <motion_queue_pop_locked>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <motion_try_start_next_locked+0x18>
		return 0u;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e004      	b.n	80027d6 <motion_try_start_next_locked+0x22>
	motion_begin_segment_locked(&next);
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff64 	bl	800269c <motion_begin_segment_locked>
	return 1u;
 80027d4:	2301      	movs	r3, #1
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3730      	adds	r7, #48	@ 0x30
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <motion_update_encoders>:
static void motion_update_encoders(void) {
 80027e0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027e4:	b08d      	sub	sp, #52	@ 0x34
 80027e6:	af00      	add	r7, sp, #0
	uint32_t now_x = __HAL_TIM_GET_COUNTER(g_axis_hw[AXIS_X].encoder);
 80027e8:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <motion_update_encoders+0xd0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t delta_x = (int32_t) (now_x - g_encoder_last_raw[AXIS_X]);
 80027f0:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <motion_update_encoders+0xd4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	g_encoder_last_raw[AXIS_X] = now_x;
 80027fa:	4a2e      	ldr	r2, [pc, #184]	@ (80028b4 <motion_update_encoders+0xd4>)
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	6013      	str	r3, [r2, #0]
	g_encoder_position[AXIS_X] += delta_x;
 8002800:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <motion_update_encoders+0xd8>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002808:	17c8      	asrs	r0, r1, #31
 800280a:	468a      	mov	sl, r1
 800280c:	4683      	mov	fp, r0
 800280e:	eb12 010a 	adds.w	r1, r2, sl
 8002812:	6139      	str	r1, [r7, #16]
 8002814:	eb43 030b 	adc.w	r3, r3, fp
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <motion_update_encoders+0xd8>)
 800281c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002820:	e9c3 1200 	strd	r1, r2, [r3]
	uint32_t now_y = __HAL_TIM_GET_COUNTER(g_axis_hw[AXIS_Y].encoder);
 8002824:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <motion_update_encoders+0xdc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t delta_y = (int32_t) (now_y - g_encoder_last_raw[AXIS_Y]);
 800282c:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <motion_update_encoders+0xd4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	623b      	str	r3, [r7, #32]
	g_encoder_last_raw[AXIS_Y] = now_y;
 8002836:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <motion_update_encoders+0xd4>)
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	6053      	str	r3, [r2, #4]
	g_encoder_position[AXIS_Y] += delta_y;
 800283c:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <motion_update_encoders+0xd8>)
 800283e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002842:	6a39      	ldr	r1, [r7, #32]
 8002844:	17c8      	asrs	r0, r1, #31
 8002846:	4688      	mov	r8, r1
 8002848:	4681      	mov	r9, r0
 800284a:	eb12 0108 	adds.w	r1, r2, r8
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	eb43 0309 	adc.w	r3, r3, r9
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <motion_update_encoders+0xd8>)
 8002858:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800285c:	e9c3 1202 	strd	r1, r2, [r3, #8]
	uint32_t now_z = __HAL_TIM_GET_COUNTER(g_axis_hw[AXIS_Z].encoder) & 0xFFFFu;
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <motion_update_encoders+0xe0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	b29b      	uxth	r3, r3
 8002868:	61fb      	str	r3, [r7, #28]
	int16_t delta_z = (int16_t) ((uint16_t) now_z
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	b29a      	uxth	r2, r3
			- (uint16_t) g_encoder_last_raw[AXIS_Z]);
 800286e:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <motion_update_encoders+0xd4>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	b29b      	uxth	r3, r3
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	b29b      	uxth	r3, r3
	int16_t delta_z = (int16_t) ((uint16_t) now_z
 8002878:	837b      	strh	r3, [r7, #26]
	g_encoder_last_raw[AXIS_Z] = now_z & 0xFFFFu;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	b29b      	uxth	r3, r3
 800287e:	4a0d      	ldr	r2, [pc, #52]	@ (80028b4 <motion_update_encoders+0xd4>)
 8002880:	6093      	str	r3, [r2, #8]
	g_encoder_position[AXIS_Z] += delta_z;
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <motion_update_encoders+0xd8>)
 8002884:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002888:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800288c:	17c8      	asrs	r0, r1, #31
 800288e:	460c      	mov	r4, r1
 8002890:	4605      	mov	r5, r0
 8002892:	1911      	adds	r1, r2, r4
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	416b      	adcs	r3, r5
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <motion_update_encoders+0xd8>)
 800289c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028a0:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 80028a4:	bf00      	nop
 80028a6:	3734      	adds	r7, #52	@ 0x34
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80028ae:	4770      	bx	lr
 80028b0:	20000490 	.word	0x20000490
 80028b4:	20000290 	.word	0x20000290
 80028b8:	20000278 	.word	0x20000278
 80028bc:	20000528 	.word	0x20000528
 80028c0:	200004dc 	.word	0x200004dc

080028c4 <motion_send_queue_add_ack>:
static void motion_send_queue_add_ack(uint8_t frame_id, uint8_t status) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	4603      	mov	r3, r0
 80028cc:	460a      	mov	r2, r1
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71bb      	strb	r3, [r7, #6]
	uint8_t raw[6];
	move_queue_add_ack_resp_t resp = { frame_id, status };
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	733b      	strb	r3, [r7, #12]
 80028d8:	79bb      	ldrb	r3, [r7, #6]
 80028da:	737b      	strb	r3, [r7, #13]
	if (move_queue_add_ack_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 80028dc:	f107 0110 	add.w	r1, r7, #16
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	2206      	movs	r2, #6
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fafe 	bl	8000ee8 <move_queue_add_ack_resp_encoder>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <motion_send_queue_add_ack+0x48>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "ack", "encode_fail");
 80028f2:	4a12      	ldr	r2, [pc, #72]	@ (800293c <motion_send_queue_add_ack+0x78>)
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <motion_send_queue_add_ack+0x7c>)
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <motion_send_queue_add_ack+0x80>)
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	f06f 0201 	mvn.w	r2, #1
 8002902:	2164      	movs	r1, #100	@ 0x64
 8002904:	2002      	movs	r0, #2
 8002906:	f7ff fafb 	bl	8001f00 <log_event_auto>
 800290a:	e014      	b.n	8002936 <motion_send_queue_add_ack+0x72>
		return;
	}
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	2106      	movs	r1, #6
 8002912:	4618      	mov	r0, r3
 8002914:	f000 ff2e 	bl	8003774 <app_resp_push>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <motion_send_queue_add_ack+0x72>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "ack", "queue_full");
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <motion_send_queue_add_ack+0x78>)
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <motion_send_queue_add_ack+0x84>)
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <motion_send_queue_add_ack+0x80>)
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	f06f 0203 	mvn.w	r2, #3
 800292e:	2164      	movs	r1, #100	@ 0x64
 8002930:	2002      	movs	r0, #2
 8002932:	f7ff fae5 	bl	8001f00 <log_event_auto>
	}
}
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	0800ddf0 	.word	0x0800ddf0
 8002940:	0800ddf8 	.word	0x0800ddf8
 8002944:	0800de04 	.word	0x0800de04
 8002948:	0800de08 	.word	0x0800de08

0800294c <motion_send_queue_status_response>:
static void motion_send_queue_status_response(uint8_t frame_id) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[12];
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	733b      	strb	r3, [r7, #12]
			(uint8_t) g_status.state, .pidErrX = (uint8_t) g_status.pidErrX,
 800295a:	4b27      	ldr	r3, [pc, #156]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002960:	737b      	strb	r3, [r7, #13]
			(uint8_t) g_status.state, .pidErrX = (uint8_t) g_status.pidErrX,
 8002962:	4b25      	ldr	r3, [pc, #148]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 8002964:	795b      	ldrb	r3, [r3, #5]
 8002966:	b25b      	sxtb	r3, r3
 8002968:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 800296a:	73bb      	strb	r3, [r7, #14]
			.pidErrY = (uint8_t) g_status.pidErrY, .pidErrZ =
 800296c:	4b22      	ldr	r3, [pc, #136]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 800296e:	799b      	ldrb	r3, [r3, #6]
 8002970:	b25b      	sxtb	r3, r3
 8002972:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002974:	73fb      	strb	r3, [r7, #15]
					(uint8_t) g_status.pidErrZ, .pctX = g_status.pctX, .pctY =
 8002976:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 8002978:	79db      	ldrb	r3, [r3, #7]
 800297a:	b25b      	sxtb	r3, r3
 800297c:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 800297e:	743b      	strb	r3, [r7, #16]
					(uint8_t) g_status.pidErrZ, .pctX = g_status.pctX, .pctY =
 8002980:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 8002982:	789b      	ldrb	r3, [r3, #2]
 8002984:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002986:	747b      	strb	r3, [r7, #17]
					g_status.pctY, .pctZ = g_status.pctZ, };
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 800298a:	78db      	ldrb	r3, [r3, #3]
 800298c:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 800298e:	74bb      	strb	r3, [r7, #18]
					g_status.pctY, .pctZ = g_status.pctZ, };
 8002990:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <motion_send_queue_status_response+0xac>)
 8002992:	791b      	ldrb	r3, [r3, #4]
 8002994:	b2db      	uxtb	r3, r3
	move_queue_status_resp_t resp = { .frameId = frame_id, .status =
 8002996:	74fb      	strb	r3, [r7, #19]
	if (move_queue_status_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8002998:	f107 0114 	add.w	r1, r7, #20
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	220c      	movs	r2, #12
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fb58 	bl	8001058 <move_queue_status_resp_encoder>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <motion_send_queue_status_response+0x7c>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "status", "encode_fail");
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <motion_send_queue_status_response+0xb0>)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <motion_send_queue_status_response+0xb4>)
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <motion_send_queue_status_response+0xb8>)
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	f06f 0201 	mvn.w	r2, #1
 80029be:	2164      	movs	r1, #100	@ 0x64
 80029c0:	2002      	movs	r0, #2
 80029c2:	f7ff fa9d 	bl	8001f00 <log_event_auto>
 80029c6:	e014      	b.n	80029f2 <motion_send_queue_status_response+0xa6>
		return;
	}
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	210c      	movs	r1, #12
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fed0 	bl	8003774 <app_resp_push>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <motion_send_queue_status_response+0xa6>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "status", "queue_full");
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <motion_send_queue_status_response+0xb0>)
 80029dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <motion_send_queue_status_response+0xbc>)
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <motion_send_queue_status_response+0xb8>)
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	f06f 0203 	mvn.w	r2, #3
 80029ea:	2164      	movs	r1, #100	@ 0x64
 80029ec:	2002      	movs	r0, #2
 80029ee:	f7ff fa87 	bl	8001f00 <log_event_auto>
	}
}
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200000bc 	.word	0x200000bc
 80029fc:	0800ddf0 	.word	0x0800ddf0
 8002a00:	0800ddf8 	.word	0x0800ddf8
 8002a04:	0800de14 	.word	0x0800de14
 8002a08:	0800de08 	.word	0x0800de08

08002a0c <motion_send_start_response>:
static void motion_send_start_response(uint8_t frame_id) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[4];
	start_move_resp_t resp = { frame_id };
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	723b      	strb	r3, [r7, #8]
	if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK)
 8002a1a:	f107 010c 	add.w	r1, r7, #12
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	2204      	movs	r2, #4
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fb86 	bl	8001136 <start_move_resp_encoder>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d115      	bne.n	8002a5c <motion_send_start_response+0x50>
		return;
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	2104      	movs	r1, #4
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fe9c 	bl	8003774 <app_resp_push>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <motion_send_start_response+0x52>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "start", "resp_queue_full");
 8002a42:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <motion_send_start_response+0x58>)
 8002a44:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <motion_send_start_response+0x5c>)
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <motion_send_start_response+0x60>)
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	f06f 0203 	mvn.w	r2, #3
 8002a52:	2164      	movs	r1, #100	@ 0x64
 8002a54:	2002      	movs	r0, #2
 8002a56:	f7ff fa53 	bl	8001f00 <log_event_auto>
 8002a5a:	e000      	b.n	8002a5e <motion_send_start_response+0x52>
		return;
 8002a5c:	bf00      	nop
	}
}
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0800ddf0 	.word	0x0800ddf0
 8002a68:	0800de1c 	.word	0x0800de1c
 8002a6c:	0800de2c 	.word	0x0800de2c

08002a70 <motion_send_move_end_response>:
static void motion_send_move_end_response(uint8_t frame_id) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
	uint8_t raw[4];
	move_end_resp_t resp = { frame_id };
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	723b      	strb	r3, [r7, #8]
	if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK)
 8002a7e:	f107 010c 	add.w	r1, r7, #12
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	2204      	movs	r2, #4
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe f97f 	bl	8000d8c <move_end_resp_encoder>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d115      	bne.n	8002ac0 <motion_send_move_end_response+0x50>
		return;
	if (app_resp_push(raw, (uint32_t) sizeof raw) != PROTO_OK) {
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	2104      	movs	r1, #4
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fe6a 	bl	8003774 <app_resp_push>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <motion_send_move_end_response+0x52>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "move_end",
 8002aa6:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <motion_send_move_end_response+0x58>)
 8002aa8:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <motion_send_move_end_response+0x5c>)
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <motion_send_move_end_response+0x60>)
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	f06f 0203 	mvn.w	r2, #3
 8002ab6:	2164      	movs	r1, #100	@ 0x64
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f7ff fa21 	bl	8001f00 <log_event_auto>
 8002abe:	e000      	b.n	8002ac2 <motion_send_move_end_response+0x52>
		return;
 8002ac0:	bf00      	nop
				"resp_queue_full");
	}
}
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	0800ddf0 	.word	0x0800ddf0
 8002acc:	0800de1c 	.word	0x0800de1c
 8002ad0:	0800de34 	.word	0x0800de34

08002ad4 <motion_service_init>:
void motion_service_init(void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af04      	add	r7, sp, #16
	uint32_t primask = motion_lock();
 8002ada:	f7ff fa7e 	bl	8001fda <motion_lock>
 8002ade:	6078      	str	r0, [r7, #4]
	memset(&g_status, 0, sizeof g_status);
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4846      	ldr	r0, [pc, #280]	@ (8002c00 <motion_service_init+0x12c>)
 8002ae6:	f00a f95d 	bl	800cda4 <memset>
	memset(g_axis_state, 0, sizeof g_axis_state);
 8002aea:	2248      	movs	r2, #72	@ 0x48
 8002aec:	2100      	movs	r1, #0
 8002aee:	4845      	ldr	r0, [pc, #276]	@ (8002c04 <motion_service_init+0x130>)
 8002af0:	f00a f958 	bl	800cda4 <memset>
	memset(g_queue, 0, sizeof g_queue);
 8002af4:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8002af8:	2100      	movs	r1, #0
 8002afa:	4843      	ldr	r0, [pc, #268]	@ (8002c08 <motion_service_init+0x134>)
 8002afc:	f00a f952 	bl	800cda4 <memset>
	memset(g_encoder_position, 0, sizeof g_encoder_position);
 8002b00:	2218      	movs	r2, #24
 8002b02:	2100      	movs	r1, #0
 8002b04:	4841      	ldr	r0, [pc, #260]	@ (8002c0c <motion_service_init+0x138>)
 8002b06:	f00a f94d 	bl	800cda4 <memset>
	memset(g_encoder_last_raw, 0, sizeof g_encoder_last_raw);
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4840      	ldr	r0, [pc, #256]	@ (8002c10 <motion_service_init+0x13c>)
 8002b10:	f00a f948 	bl	800cda4 <memset>
	memset(g_encoder_origin, 0, sizeof g_encoder_origin);
 8002b14:	2218      	movs	r2, #24
 8002b16:	2100      	movs	r1, #0
 8002b18:	483e      	ldr	r0, [pc, #248]	@ (8002c14 <motion_service_init+0x140>)
 8002b1a:	f00a f943 	bl	800cda4 <memset>
	g_status.state = MOTION_IDLE;
 8002b1e:	4b38      	ldr	r3, [pc, #224]	@ (8002c00 <motion_service_init+0x12c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
	g_queue_head = g_queue_tail = g_queue_count = 0u;
 8002b24:	4b3c      	ldr	r3, [pc, #240]	@ (8002c18 <motion_service_init+0x144>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c18 <motion_service_init+0x144>)
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <motion_service_init+0x148>)
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <motion_service_init+0x148>)
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	4b3a      	ldr	r3, [pc, #232]	@ (8002c20 <motion_service_init+0x14c>)
 8002b38:	701a      	strb	r2, [r3, #0]
	g_has_active_segment = 0u;
 8002b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c24 <motion_service_init+0x150>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
	motion_stop_all_axes_locked();
 8002b40:	f7ff fcb4 	bl	80024ac <motion_stop_all_axes_locked>
	motion_refresh_status_locked();
 8002b44:	f7ff fb04 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fa57 	bl	8001ffc <motion_unlock>
	__HAL_TIM_SET_COUNTER(&htim2, 0u);
 8002b4e:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <motion_service_init+0x154>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim5, 0u);
 8002b56:	4b35      	ldr	r3, [pc, #212]	@ (8002c2c <motion_service_init+0x158>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0u);
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <motion_service_init+0x15c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL) != HAL_OK)
 8002b66:	213c      	movs	r1, #60	@ 0x3c
 8002b68:	482f      	ldr	r0, [pc, #188]	@ (8002c28 <motion_service_init+0x154>)
 8002b6a:	f006 ff01 	bl	8009970 <HAL_TIM_Encoder_Start>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <motion_service_init+0xa4>
		Error_Handler();
 8002b74:	f001 f8e2 	bl	8003d3c <Error_Handler>
	if (HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL) != HAL_OK)
 8002b78:	213c      	movs	r1, #60	@ 0x3c
 8002b7a:	482c      	ldr	r0, [pc, #176]	@ (8002c2c <motion_service_init+0x158>)
 8002b7c:	f006 fef8 	bl	8009970 <HAL_TIM_Encoder_Start>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <motion_service_init+0xb6>
		Error_Handler();
 8002b86:	f001 f8d9 	bl	8003d3c <Error_Handler>
	if (HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
 8002b8a:	213c      	movs	r1, #60	@ 0x3c
 8002b8c:	4828      	ldr	r0, [pc, #160]	@ (8002c30 <motion_service_init+0x15c>)
 8002b8e:	f006 feef 	bl	8009970 <HAL_TIM_Encoder_Start>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <motion_service_init+0xc8>
		Error_Handler();
 8002b98:	f001 f8d0 	bl	8003d3c <Error_Handler>
	g_encoder_last_raw[AXIS_X] = __HAL_TIM_GET_COUNTER(&htim2);
 8002b9c:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <motion_service_init+0x154>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <motion_service_init+0x13c>)
 8002ba4:	6013      	str	r3, [r2, #0]
	g_encoder_last_raw[AXIS_Y] = __HAL_TIM_GET_COUNTER(&htim5);
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <motion_service_init+0x158>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <motion_service_init+0x13c>)
 8002bae:	6053      	str	r3, [r2, #4]
	g_encoder_last_raw[AXIS_Z] = __HAL_TIM_GET_COUNTER(&htim3) & 0xFFFFu;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <motion_service_init+0x15c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <motion_service_init+0x13c>)
 8002bba:	6093      	str	r3, [r2, #8]
	if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8002bbc:	481d      	ldr	r0, [pc, #116]	@ (8002c34 <motion_service_init+0x160>)
 8002bbe:	f006 f869 	bl	8008c94 <HAL_TIM_Base_Start_IT>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <motion_service_init+0xf8>
		Error_Handler();
 8002bc8:	f001 f8b8 	bl	8003d3c <Error_Handler>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8002bcc:	481a      	ldr	r0, [pc, #104]	@ (8002c38 <motion_service_init+0x164>)
 8002bce:	f006 f861 	bl	8008c94 <HAL_TIM_Base_Start_IT>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <motion_service_init+0x108>
		Error_Handler();
 8002bd8:	f001 f8b0 	bl	8003d3c <Error_Handler>
	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "timers_ready");
 8002bdc:	4a17      	ldr	r2, [pc, #92]	@ (8002c3c <motion_service_init+0x168>)
 8002bde:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <motion_service_init+0x16c>)
 8002be0:	9302      	str	r3, [sp, #8]
 8002be2:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <motion_service_init+0x170>)
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <motion_service_init+0x174>)
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f7ff f985 	bl	8001f00 <log_event_auto>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200000bc 	.word	0x200000bc
 8002c04:	200000c4 	.word	0x200000c4
 8002c08:	20000110 	.word	0x20000110
 8002c0c:	20000278 	.word	0x20000278
 8002c10:	20000290 	.word	0x20000290
 8002c14:	200002a0 	.word	0x200002a0
 8002c18:	20000272 	.word	0x20000272
 8002c1c:	20000271 	.word	0x20000271
 8002c20:	20000270 	.word	0x20000270
 8002c24:	2000010c 	.word	0x2000010c
 8002c28:	20000490 	.word	0x20000490
 8002c2c:	20000528 	.word	0x20000528
 8002c30:	200004dc 	.word	0x200004dc
 8002c34:	20000574 	.word	0x20000574
 8002c38:	200005c0 	.word	0x200005c0
 8002c3c:	0800ddf0 	.word	0x0800ddf0
 8002c40:	0800de40 	.word	0x0800de40
 8002c44:	0800de50 	.word	0x0800de50
 8002c48:	0800de54 	.word	0x0800de54

08002c4c <motion_on_tim6_tick>:
const motion_status_t* motion_status_get(void) {
	return &g_status;
}
void motion_on_tim6_tick(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
	if (g_status.state != MOTION_RUNNING || !g_has_active_segment)
 8002c52:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc8 <motion_on_tim6_tick+0x17c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f040 80af 	bne.w	8002dbc <motion_on_tim6_tick+0x170>
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dcc <motion_on_tim6_tick+0x180>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a9 	beq.w	8002dbc <motion_on_tim6_tick+0x170>
		return;
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	77fb      	strb	r3, [r7, #31]
 8002c6e:	e03d      	b.n	8002cec <motion_on_tim6_tick+0xa0>
		motion_axis_state_t *ax = &g_axis_state[axis];
 8002c70:	7ffa      	ldrb	r2, [r7, #31]
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4a55      	ldr	r2, [pc, #340]	@ (8002dd0 <motion_on_tim6_tick+0x184>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
		const motion_axis_hw_t *hw = &g_axis_hw[axis];
 8002c80:	7ffb      	ldrb	r3, [r7, #31]
 8002c82:	015b      	lsls	r3, r3, #5
 8002c84:	4a53      	ldr	r2, [pc, #332]	@ (8002dd4 <motion_on_tim6_tick+0x188>)
 8002c86:	4413      	add	r3, r2
 8002c88:	607b      	str	r3, [r7, #4]
		if (ax->step_high) {
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	7d1b      	ldrb	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <motion_on_tim6_tick+0x5e>
			gpio_set_low(hw->step_port, hw->step_pin);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	889b      	ldrh	r3, [r3, #4]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff f988 	bl	8001fb2 <gpio_set_low>
			ax->step_high = 0u;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	751a      	strb	r2, [r3, #20]
			continue;
 8002ca8:	e01d      	b.n	8002ce6 <motion_on_tim6_tick+0x9a>
		}
		if (ax->emitted_steps >= ax->total_steps)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d216      	bcs.n	8002ce4 <motion_on_tim6_tick+0x98>
			continue;
		if (ax->emitted_steps < ax->target_steps) {
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d211      	bcs.n	8002ce6 <motion_on_tim6_tick+0x9a>
			gpio_set_high(hw->step_port, hw->step_pin);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	889b      	ldrh	r3, [r3, #4]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7ff f95d 	bl	8001f8c <gpio_set_high>
			ax->step_high = 1u;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	751a      	strb	r2, [r3, #20]
			++ax->emitted_steps;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	e000      	b.n	8002ce6 <motion_on_tim6_tick+0x9a>
			continue;
 8002ce4:	bf00      	nop
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002ce6:	7ffb      	ldrb	r3, [r7, #31]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d9be      	bls.n	8002c70 <motion_on_tim6_tick+0x24>
		}
	}
	uint8_t finished = 1u;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	77bb      	strb	r3, [r7, #30]
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	777b      	strb	r3, [r7, #29]
 8002cfa:	e017      	b.n	8002d2c <motion_on_tim6_tick+0xe0>
		const motion_axis_state_t *ax = &g_axis_state[axis];
 8002cfc:	7f7a      	ldrb	r2, [r7, #29]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4a32      	ldr	r2, [pc, #200]	@ (8002dd0 <motion_on_tim6_tick+0x184>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
		if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d303      	bcc.n	8002d20 <motion_on_tim6_tick+0xd4>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	7d1b      	ldrb	r3, [r3, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <motion_on_tim6_tick+0xda>
			finished = 0u;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77bb      	strb	r3, [r7, #30]
			break;
 8002d24:	e005      	b.n	8002d32 <motion_on_tim6_tick+0xe6>
	for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002d26:	7f7b      	ldrb	r3, [r7, #29]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	777b      	strb	r3, [r7, #29]
 8002d2c:	7f7b      	ldrb	r3, [r7, #29]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d9e4      	bls.n	8002cfc <motion_on_tim6_tick+0xb0>
		}
	}
	if (!finished)
 8002d32:	7fbb      	ldrb	r3, [r7, #30]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d043      	beq.n	8002dc0 <motion_on_tim6_tick+0x174>
		return;
	uint32_t primask = motion_lock();
 8002d38:	f7ff f94f 	bl	8001fda <motion_lock>
 8002d3c:	6138      	str	r0, [r7, #16]
	if (g_has_active_segment) {
 8002d3e:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <motion_on_tim6_tick+0x180>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d035      	beq.n	8002db4 <motion_on_tim6_tick+0x168>
		uint8_t confirm = 1u;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	773b      	strb	r3, [r7, #28]
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	76fb      	strb	r3, [r7, #27]
 8002d50:	e017      	b.n	8002d82 <motion_on_tim6_tick+0x136>
			const motion_axis_state_t *ax = &g_axis_state[axis];
 8002d52:	7efa      	ldrb	r2, [r7, #27]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd0 <motion_on_tim6_tick+0x184>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
			if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d303      	bcc.n	8002d76 <motion_on_tim6_tick+0x12a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	7d1b      	ldrb	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <motion_on_tim6_tick+0x130>
				confirm = 0u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	773b      	strb	r3, [r7, #28]
				break;
 8002d7a:	e005      	b.n	8002d88 <motion_on_tim6_tick+0x13c>
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002d7c:	7efb      	ldrb	r3, [r7, #27]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	76fb      	strb	r3, [r7, #27]
 8002d82:	7efb      	ldrb	r3, [r7, #27]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d9e4      	bls.n	8002d52 <motion_on_tim6_tick+0x106>
			}
		}
		if (confirm) {
 8002d88:	7f3b      	ldrb	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d012      	beq.n	8002db4 <motion_on_tim6_tick+0x168>
			if (motion_try_start_next_locked()) {
 8002d8e:	f7ff fd11 	bl	80027b4 <motion_try_start_next_locked>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <motion_on_tim6_tick+0x154>
				g_status.state = MOTION_RUNNING;
 8002d98:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <motion_on_tim6_tick+0x17c>)
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e007      	b.n	8002db0 <motion_on_tim6_tick+0x164>
			} else {
				g_has_active_segment = 0u;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <motion_on_tim6_tick+0x180>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
				motion_stop_all_axes_locked();
 8002da6:	f7ff fb81 	bl	80024ac <motion_stop_all_axes_locked>
				g_status.state = MOTION_DONE;
 8002daa:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <motion_on_tim6_tick+0x17c>)
 8002dac:	2205      	movs	r2, #5
 8002dae:	701a      	strb	r2, [r3, #0]
			}
			motion_refresh_status_locked();
 8002db0:	f7ff f9ce 	bl	8002150 <motion_refresh_status_locked>
		}
	}
	motion_unlock(primask);
 8002db4:	6938      	ldr	r0, [r7, #16]
 8002db6:	f7ff f921 	bl	8001ffc <motion_unlock>
 8002dba:	e002      	b.n	8002dc2 <motion_on_tim6_tick+0x176>
		return;
 8002dbc:	bf00      	nop
 8002dbe:	e000      	b.n	8002dc2 <motion_on_tim6_tick+0x176>
		return;
 8002dc0:	bf00      	nop
}
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200000bc 	.word	0x200000bc
 8002dcc:	2000010c 	.word	0x2000010c
 8002dd0:	200000c4 	.word	0x200000c4
 8002dd4:	0800e1c4 	.word	0x0800e1c4

08002dd8 <motion_on_tim7_tick>:
void motion_on_tim7_tick(void) {
 8002dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ddc:	b08c      	sub	sp, #48	@ 0x30
 8002dde:	af00      	add	r7, sp, #0
	motion_update_encoders();
 8002de0:	f7ff fcfe 	bl	80027e0 <motion_update_encoders>
	if (g_status.state == MOTION_RUNNING && g_has_active_segment) {
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <motion_on_tim7_tick+0xe8>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d15a      	bne.n	8002ea4 <motion_on_tim7_tick+0xcc>
 8002dee:	4b35      	ldr	r3, [pc, #212]	@ (8002ec4 <motion_on_tim7_tick+0xec>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d055      	beq.n	8002ea4 <motion_on_tim7_tick+0xcc>
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002dfe:	e04d      	b.n	8002e9c <motion_on_tim7_tick+0xc4>
			motion_axis_state_t *ax = &g_axis_state[axis];
 8002e00:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec8 <motion_on_tim7_tick+0xf0>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	61fb      	str	r3, [r7, #28]
			if (ax->emitted_steps >= ax->total_steps)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d238      	bcs.n	8002e90 <motion_on_tim7_tick+0xb8>
				continue;
			uint32_t total = ax->total_steps;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61bb      	str	r3, [r7, #24]
			uint32_t target = ax->target_steps;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
			uint32_t velocity = ax->velocity_per_tick;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	899b      	ldrh	r3, [r3, #12]
 8002e2e:	617b      	str	r3, [r7, #20]
			if (velocity == 0u) {
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <motion_on_tim7_tick+0x64>
				target = total;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3a:	e025      	b.n	8002e88 <motion_on_tim7_tick+0xb0>
			} else {
				uint64_t next = (uint64_t) target + (uint64_t) velocity;
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	2200      	movs	r2, #0
 8002e40:	461c      	mov	r4, r3
 8002e42:	4615      	mov	r5, r2
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2200      	movs	r2, #0
 8002e48:	4698      	mov	r8, r3
 8002e4a:	4691      	mov	r9, r2
 8002e4c:	eb14 0308 	adds.w	r3, r4, r8
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	eb45 0309 	adc.w	r3, r5, r9
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
				if (next > total)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2200      	movs	r2, #0
 8002e64:	469a      	mov	sl, r3
 8002e66:	4693      	mov	fp, r2
 8002e68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e6c:	4592      	cmp	sl, r2
 8002e6e:	eb7b 0303 	sbcs.w	r3, fp, r3
 8002e72:	d207      	bcs.n	8002e84 <motion_on_tim7_tick+0xac>
					next = total;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2200      	movs	r2, #0
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e80:	e9c7 2308 	strd	r2, r3, [r7, #32]
				target = (uint32_t) next;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	62bb      	str	r3, [r7, #40]	@ 0x28
			}
			ax->target_steps = target;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e000      	b.n	8002e92 <motion_on_tim7_tick+0xba>
				continue;
 8002e90:	bf00      	nop
		for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002e92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e96:	3301      	adds	r3, #1
 8002e98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d9ad      	bls.n	8002e00 <motion_on_tim7_tick+0x28>
		}
	}
	uint32_t primask = motion_lock();
 8002ea4:	f7ff f899 	bl	8001fda <motion_lock>
 8002ea8:	6138      	str	r0, [r7, #16]
	motion_refresh_status_locked();
 8002eaa:	f7ff f951 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 8002eae:	6938      	ldr	r0, [r7, #16]
 8002eb0:	f7ff f8a4 	bl	8001ffc <motion_unlock>
}
 8002eb4:	bf00      	nop
 8002eb6:	3730      	adds	r7, #48	@ 0x30
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200000bc 	.word	0x200000bc
 8002ec4:	2000010c 	.word	0x2000010c
 8002ec8:	200000c4 	.word	0x200000c4

08002ecc <motion_on_move_queue_add>:
void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b097      	sub	sp, #92	@ 0x5c
 8002ed0:	af06      	add	r7, sp, #24
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
	move_queue_add_req_t req;
	uint8_t ack_status = MOTION_ACK_INVALID;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t frame_id = 0u;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (!frame)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d06c      	beq.n	8002fc2 <motion_on_move_queue_add+0xf6>
		return;
	proto_result_t decode_status = move_queue_add_req_decoder(frame, len, &req);
 8002ee8:	f107 0308 	add.w	r3, r7, #8
 8002eec:	461a      	mov	r2, r3
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7fd fced 	bl	80008d0 <move_queue_add_req_decoder>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	if (decode_status != PROTO_OK) {
 8002efc:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d014      	beq.n	8002f2e <motion_on_move_queue_add+0x62>
		motion_send_queue_add_ack(frame_id, ack_status);
 8002f04:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002f08:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fcd8 	bl	80028c4 <motion_send_queue_add_ack>
		LOGA_THIS(LOG_STATE_ERROR, decode_status, "queue_add", "decode_fail");
 8002f14:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8002f18:	492c      	ldr	r1, [pc, #176]	@ (8002fcc <motion_on_move_queue_add+0x100>)
 8002f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd0 <motion_on_move_queue_add+0x104>)
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd4 <motion_on_move_queue_add+0x108>)
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	460b      	mov	r3, r1
 8002f24:	2164      	movs	r1, #100	@ 0x64
 8002f26:	2002      	movs	r0, #2
 8002f28:	f7fe ffea 	bl	8001f00 <log_event_auto>
		return;
 8002f2c:	e04a      	b.n	8002fc4 <motion_on_move_queue_add+0xf8>
	}
	frame_id = req.frameId;
 8002f2e:	7a3b      	ldrb	r3, [r7, #8]
 8002f30:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	uint32_t primask = motion_lock();
 8002f34:	f7ff f851 	bl	8001fda <motion_lock>
 8002f38:	63b8      	str	r0, [r7, #56]	@ 0x38
	proto_result_t push_status = motion_queue_push_locked(&req);
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fb36 	bl	80025b0 <motion_queue_push_locked>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (push_status == PROTO_OK) {
 8002f4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d112      	bne.n	8002f78 <motion_on_move_queue_add+0xac>
		ack_status = MOTION_ACK_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (g_status.state == MOTION_IDLE || g_status.state == MOTION_DONE)
 8002f58:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <motion_on_move_queue_add+0x10c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <motion_on_move_queue_add+0xa0>
 8002f62:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <motion_on_move_queue_add+0x10c>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d102      	bne.n	8002f72 <motion_on_move_queue_add+0xa6>
			g_status.state = MOTION_QUEUED;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <motion_on_move_queue_add+0x10c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
		motion_refresh_status_locked();
 8002f72:	f7ff f8ed 	bl	8002150 <motion_refresh_status_locked>
 8002f76:	e002      	b.n	8002f7e <motion_on_move_queue_add+0xb2>
	} else {
		ack_status = MOTION_ACK_QUEUE_FULL;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
	motion_unlock(primask);
 8002f7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f80:	f7ff f83c 	bl	8001ffc <motion_unlock>
	motion_send_queue_add_ack(frame_id, ack_status);
 8002f84:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002f88:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fc98 	bl	80028c4 <motion_send_queue_add_ack>
	LOGA_THIS(LOG_STATE_RECEIVED, ack_status, "queue_add",
 8002f94:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002f98:	480c      	ldr	r0, [pc, #48]	@ (8002fcc <motion_on_move_queue_add+0x100>)
 8002f9a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002f9e:	7a79      	ldrb	r1, [r7, #9]
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	490d      	ldr	r1, [pc, #52]	@ (8002fd8 <motion_on_move_queue_add+0x10c>)
 8002fa4:	7849      	ldrb	r1, [r1, #1]
 8002fa6:	b2c9      	uxtb	r1, r1
 8002fa8:	9104      	str	r1, [sp, #16]
 8002faa:	9403      	str	r4, [sp, #12]
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <motion_on_move_queue_add+0x110>)
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <motion_on_move_queue_add+0x108>)
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f7fe ffa0 	bl	8001f00 <log_event_auto>
 8002fc0:	e000      	b.n	8002fc4 <motion_on_move_queue_add+0xf8>
		return;
 8002fc2:	bf00      	nop
			"frame=%u dirMask=0x%02X queue=%u", (unsigned )frame_id,
			(unsigned )req.dirMask, (unsigned )g_status.queue_depth);
}
 8002fc4:	3744      	adds	r7, #68	@ 0x44
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	0800ddf0 	.word	0x0800ddf0
 8002fd0:	0800de5c 	.word	0x0800de5c
 8002fd4:	0800de68 	.word	0x0800de68
 8002fd8:	200000bc 	.word	0x200000bc
 8002fdc:	0800de74 	.word	0x0800de74

08002fe0 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b08c      	sub	sp, #48	@ 0x30
 8002fe4:	af08      	add	r7, sp, #32
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
	move_queue_status_req_t req;
	if (move_queue_status_req_decoder(frame, len, &req) != PROTO_OK) {
 8002fea:	f107 0308 	add.w	r3, r7, #8
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fd6a 	bl	8000acc <move_queue_status_req_decoder>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <motion_on_move_queue_status+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "queue_status",
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <motion_on_move_queue_status+0x9c>)
 8003000:	4b1f      	ldr	r3, [pc, #124]	@ (8003080 <motion_on_move_queue_status+0xa0>)
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <motion_on_move_queue_status+0xa4>)
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	f06f 0201 	mvn.w	r2, #1
 800300e:	2164      	movs	r1, #100	@ 0x64
 8003010:	2002      	movs	r0, #2
 8003012:	f7fe ff75 	bl	8001f00 <log_event_auto>
 8003016:	e02e      	b.n	8003076 <motion_on_move_queue_status+0x96>
				"decode_fail");
		return;
	}
	uint32_t primask = motion_lock();
 8003018:	f7fe ffdf 	bl	8001fda <motion_lock>
 800301c:	60f8      	str	r0, [r7, #12]
	motion_refresh_status_locked();
 800301e:	f7ff f897 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7fe ffea 	bl	8001ffc <motion_unlock>
	motion_send_queue_status_response(req.frameId);
 8003028:	7a3b      	ldrb	r3, [r7, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fc8e 	bl	800294c <motion_send_queue_status_response>
	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status",
 8003030:	4a12      	ldr	r2, [pc, #72]	@ (800307c <motion_on_move_queue_status+0x9c>)
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	4b13      	ldr	r3, [pc, #76]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 8003044:	789b      	ldrb	r3, [r3, #2]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461c      	mov	r4, r3
 800304a:	4b0f      	ldr	r3, [pc, #60]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 800304c:	78db      	ldrb	r3, [r3, #3]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461d      	mov	r5, r3
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <motion_on_move_queue_status+0xa8>)
 8003054:	791b      	ldrb	r3, [r3, #4]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	9306      	str	r3, [sp, #24]
 800305a:	9505      	str	r5, [sp, #20]
 800305c:	9404      	str	r4, [sp, #16]
 800305e:	9003      	str	r0, [sp, #12]
 8003060:	9102      	str	r1, [sp, #8]
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <motion_on_move_queue_status+0xac>)
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <motion_on_move_queue_status+0xa4>)
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	2200      	movs	r2, #0
 800306e:	2101      	movs	r1, #1
 8003070:	2002      	movs	r0, #2
 8003072:	f7fe ff45 	bl	8001f00 <log_event_auto>
			"state=%u depth=%u pct=(%u,%u,%u)", (unsigned )g_status.state,
			(unsigned )g_status.queue_depth, (unsigned )g_status.pctX,
			(unsigned )g_status.pctY, (unsigned )g_status.pctZ);
}
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bdb0      	pop	{r4, r5, r7, pc}
 800307c:	0800ddf0 	.word	0x0800ddf0
 8003080:	0800de5c 	.word	0x0800de5c
 8003084:	0800de98 	.word	0x0800de98
 8003088:	200000bc 	.word	0x200000bc
 800308c:	0800dea8 	.word	0x0800dea8

08003090 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af02      	add	r7, sp, #8
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	start_move_req_t req;
	if (start_move_req_decoder(frame, len, &req) != PROTO_OK) {
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	461a      	mov	r2, r3
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fd87 	bl	8000bb6 <start_move_req_decoder>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <motion_on_start_move+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "start_move",
 80030ae:	4a21      	ldr	r2, [pc, #132]	@ (8003134 <motion_on_start_move+0xa4>)
 80030b0:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <motion_on_start_move+0xa8>)
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <motion_on_start_move+0xac>)
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	f06f 0201 	mvn.w	r2, #1
 80030be:	2164      	movs	r1, #100	@ 0x64
 80030c0:	2002      	movs	r0, #2
 80030c2:	f7fe ff1d 	bl	8001f00 <log_event_auto>
 80030c6:	e032      	b.n	800312e <motion_on_start_move+0x9e>
				"decode_fail");
		return;
	}
	uint8_t started = 0u;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75fb      	strb	r3, [r7, #23]
	uint32_t primask = motion_lock();
 80030cc:	f7fe ff85 	bl	8001fda <motion_lock>
 80030d0:	6138      	str	r0, [r7, #16]
	if (!g_has_active_segment) {
 80030d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <motion_on_start_move+0xb0>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <motion_on_start_move+0x62>
		if (motion_try_start_next_locked()) {
 80030dc:	f7ff fb6a 	bl	80027b4 <motion_try_start_next_locked>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <motion_on_start_move+0x6c>
			g_status.state = MOTION_RUNNING;
 80030e6:	4b17      	ldr	r3, [pc, #92]	@ (8003144 <motion_on_start_move+0xb4>)
 80030e8:	2202      	movs	r2, #2
 80030ea:	701a      	strb	r2, [r3, #0]
			started = 1u;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75fb      	strb	r3, [r7, #23]
 80030f0:	e004      	b.n	80030fc <motion_on_start_move+0x6c>
		}
	} else {
		g_status.state = MOTION_RUNNING;
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <motion_on_start_move+0xb4>)
 80030f4:	2202      	movs	r2, #2
 80030f6:	701a      	strb	r2, [r3, #0]
		started = 1u;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
	}
	motion_refresh_status_locked();
 80030fc:	f7ff f828 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 8003100:	6938      	ldr	r0, [r7, #16]
 8003102:	f7fe ff7b 	bl	8001ffc <motion_unlock>
	motion_send_start_response(req.frameId);
 8003106:	7b3b      	ldrb	r3, [r7, #12]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fc7f 	bl	8002a0c <motion_send_start_response>
	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move",
 800310e:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <motion_on_start_move+0xa4>)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <motion_on_start_move+0x8a>
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <motion_on_start_move+0xb8>)
 8003118:	e000      	b.n	800311c <motion_on_start_move+0x8c>
 800311a:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <motion_on_start_move+0xbc>)
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	4b07      	ldr	r3, [pc, #28]	@ (800313c <motion_on_start_move+0xac>)
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	2200      	movs	r2, #0
 8003126:	2102      	movs	r1, #2
 8003128:	2002      	movs	r0, #2
 800312a:	f7fe fee9 	bl	8001f00 <log_event_auto>
			started ? "running" : "ignored");
}
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	0800ddf0 	.word	0x0800ddf0
 8003138:	0800de5c 	.word	0x0800de5c
 800313c:	0800decc 	.word	0x0800decc
 8003140:	2000010c 	.word	0x2000010c
 8003144:	200000bc 	.word	0x200000bc
 8003148:	0800ded8 	.word	0x0800ded8
 800314c:	0800dee0 	.word	0x0800dee0

08003150 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af04      	add	r7, sp, #16
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	move_end_req_t req;
	if (move_end_req_decoder(frame, len, &req) != PROTO_OK) {
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	461a      	mov	r2, r3
 8003160:	6839      	ldr	r1, [r7, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fb0e 	bl	8000784 <move_end_req_decoder>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <motion_on_move_end+0x38>
		LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "move_end", "decode_fail");
 800316e:	4a1f      	ldr	r2, [pc, #124]	@ (80031ec <motion_on_move_end+0x9c>)
 8003170:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <motion_on_move_end+0xa0>)
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	4b1f      	ldr	r3, [pc, #124]	@ (80031f4 <motion_on_move_end+0xa4>)
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	f06f 0201 	mvn.w	r2, #1
 800317e:	2164      	movs	r1, #100	@ 0x64
 8003180:	2002      	movs	r0, #2
 8003182:	f7fe febd 	bl	8001f00 <log_event_auto>
 8003186:	e02d      	b.n	80031e4 <motion_on_move_end+0x94>
		return;
	}
	uint32_t primask = motion_lock();
 8003188:	f7fe ff27 	bl	8001fda <motion_lock>
 800318c:	60f8      	str	r0, [r7, #12]
	motion_stop_all_axes_locked();
 800318e:	f7ff f98d 	bl	80024ac <motion_stop_all_axes_locked>
	motion_queue_clear_locked();
 8003192:	f7ff f9f7 	bl	8002584 <motion_queue_clear_locked>
	g_has_active_segment = 0u;
 8003196:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <motion_on_move_end+0xa8>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
	g_status.state = MOTION_STOPPING;
 800319c:	4b17      	ldr	r3, [pc, #92]	@ (80031fc <motion_on_move_end+0xac>)
 800319e:	2204      	movs	r2, #4
 80031a0:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 80031a2:	f7fe ffd5 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7fe ff28 	bl	8001ffc <motion_unlock>
	motion_send_move_end_response(req.frameId);
 80031ac:	7a3b      	ldrb	r3, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fc5e 	bl	8002a70 <motion_send_move_end_response>
	primask = motion_lock();
 80031b4:	f7fe ff11 	bl	8001fda <motion_lock>
 80031b8:	60f8      	str	r0, [r7, #12]
	g_status.state = MOTION_IDLE;
 80031ba:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <motion_on_move_end+0xac>)
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
	motion_refresh_status_locked();
 80031c0:	f7fe ffc6 	bl	8002150 <motion_refresh_status_locked>
	motion_unlock(primask);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7fe ff19 	bl	8001ffc <motion_unlock>
	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopped");
 80031ca:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <motion_on_move_end+0x9c>)
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <motion_on_move_end+0xb0>)
 80031ce:	9302      	str	r3, [sp, #8]
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <motion_on_move_end+0xb4>)
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	4b07      	ldr	r3, [pc, #28]	@ (80031f4 <motion_on_move_end+0xa4>)
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	2102      	movs	r1, #2
 80031de:	2002      	movs	r0, #2
 80031e0:	f7fe fe8e 	bl	8001f00 <log_event_auto>
}
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	0800ddf0 	.word	0x0800ddf0
 80031f0:	0800de5c 	.word	0x0800de5c
 80031f4:	0800de34 	.word	0x0800de34
 80031f8:	2000010c 	.word	0x2000010c
 80031fc:	200000bc 	.word	0x200000bc
 8003200:	0800dee8 	.word	0x0800dee8
 8003204:	0800de50 	.word	0x0800de50

08003208 <HAL_TIM_PeriodElapsedCallback>:
        g_status.state = MOTION_IDLE;
        motion_refresh_status_locked();
    }
    motion_unlock(primask);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	if (!htim)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00f      	beq.n	8003236 <HAL_TIM_PeriodElapsedCallback+0x2e>
		return;
	if (htim->Instance == TIM6) {
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a09      	ldr	r2, [pc, #36]	@ (8003240 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d102      	bne.n	8003226 <HAL_TIM_PeriodElapsedCallback+0x1e>
		motion_on_tim6_tick();
 8003220:	f7ff fd14 	bl	8002c4c <motion_on_tim6_tick>
 8003224:	e008      	b.n	8003238 <HAL_TIM_PeriodElapsedCallback+0x30>
	} else if (htim->Instance == TIM7) {
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a06      	ldr	r2, [pc, #24]	@ (8003244 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d103      	bne.n	8003238 <HAL_TIM_PeriodElapsedCallback+0x30>
		motion_on_tim7_tick();
 8003230:	f7ff fdd2 	bl	8002dd8 <motion_on_tim7_tick>
 8003234:	e000      	b.n	8003238 <HAL_TIM_PeriodElapsedCallback+0x30>
		return;
 8003236:	bf00      	nop
	} else {
		(void) htim;
	}
}
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40001000 	.word	0x40001000
 8003244:	40001400 	.word	0x40001400

08003248 <probe_service_init>:

LOG_SVC_DEFINE(LOG_SVC_PROBE, "probe");

static probe_status_t g_probe;

void probe_service_init(void) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af04      	add	r7, sp, #16
	g_probe.axis_done_mask = 0;
 800324e:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <probe_service_init+0x40>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
	g_probe.error_flags = 0;
 8003254:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <probe_service_init+0x40>)
 8003256:	2200      	movs	r2, #0
 8003258:	705a      	strb	r2, [r3, #1]
	g_probe.latched_pos_x = g_probe.latched_pos_y = g_probe.latched_pos_z = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <probe_service_init+0x40>)
 800325e:	60d3      	str	r3, [r2, #12]
 8003260:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <probe_service_init+0x40>)
 8003262:	6093      	str	r3, [r2, #8]
 8003264:	4a08      	ldr	r2, [pc, #32]	@ (8003288 <probe_service_init+0x40>)
 8003266:	6053      	str	r3, [r2, #4]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8003268:	4a08      	ldr	r2, [pc, #32]	@ (800328c <probe_service_init+0x44>)
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <probe_service_init+0x48>)
 800326c:	9302      	str	r3, [sp, #8]
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <probe_service_init+0x4c>)
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <probe_service_init+0x50>)
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	2200      	movs	r2, #0
 800327a:	2100      	movs	r1, #0
 800327c:	2004      	movs	r0, #4
 800327e:	f7fe fe3f 	bl	8001f00 <log_event_auto>
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200002b8 	.word	0x200002b8
 800328c:	0800def0 	.word	0x0800def0
 8003290:	0800def8 	.word	0x0800def8
 8003294:	0800defc 	.word	0x0800defc
 8003298:	0800df00 	.word	0x0800df00

0800329c <probe_on_move_probe_level>:
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af04      	add	r7, sp, #16
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 80032a6:	4a08      	ldr	r2, [pc, #32]	@ (80032c8 <probe_on_move_probe_level+0x2c>)
 80032a8:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <probe_on_move_probe_level+0x30>)
 80032aa:	9302      	str	r3, [sp, #8]
 80032ac:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <probe_on_move_probe_level+0x34>)
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <probe_on_move_probe_level+0x38>)
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	2200      	movs	r2, #0
 80032b8:	2101      	movs	r1, #1
 80032ba:	2004      	movs	r0, #4
 80032bc:	f7fe fe20 	bl	8001f00 <log_event_auto>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	0800def0 	.word	0x0800def0
 80032cc:	0800df08 	.word	0x0800df08
 80032d0:	0800defc 	.word	0x0800defc
 80032d4:	0800df18 	.word	0x0800df18

080032d8 <safety_service_init>:

LOG_SVC_DEFINE(LOG_SVC_SAFETY, "safety");

static volatile safety_state_t g_state = SAFETY_NORMAL;

void safety_service_init(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af04      	add	r7, sp, #16
	g_state = SAFETY_NORMAL;
 80032de:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <safety_service_init+0x2c>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "normal");
 80032e4:	4a08      	ldr	r2, [pc, #32]	@ (8003308 <safety_service_init+0x30>)
 80032e6:	4b09      	ldr	r3, [pc, #36]	@ (800330c <safety_service_init+0x34>)
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <safety_service_init+0x38>)
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <safety_service_init+0x3c>)
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	2200      	movs	r2, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	2005      	movs	r0, #5
 80032fa:	f7fe fe01 	bl	8001f00 <log_event_auto>
}
 80032fe:	bf00      	nop
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200002c8 	.word	0x200002c8
 8003308:	0800df2c 	.word	0x0800df2c
 800330c:	0800df34 	.word	0x0800df34
 8003310:	0800df3c 	.word	0x0800df3c
 8003314:	0800df40 	.word	0x0800df40

08003318 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	68b8      	ldr	r0, [r7, #8]
 8003328:	f7ff fdd0 	bl	8002ecc <motion_on_move_queue_add>
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68b8      	ldr	r0, [r7, #8]
 8003344:	f7ff fe4c 	bl	8002fe0 <motion_on_move_queue_status>
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	68b8      	ldr	r0, [r7, #8]
 8003360:	f7ff fe96 	bl	8003090 <motion_on_start_move>
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	f7fe f8fc 	bl	8001578 <home_on_move_home>
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	68b8      	ldr	r0, [r7, #8]
 8003398:	f7ff ff80 	bl	800329c <probe_on_move_probe_level>
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	f7ff fecc 	bl	8003150 <motion_on_move_end>
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	68b8      	ldr	r0, [r7, #8]
 80033d0:	f7fe fc36 	bl	8001c40 <led_on_led_ctrl>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
	(void) r;
	(void) f;
	(void) l; /* opcional */
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	if (!h)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01b      	beq.n	8003452 <services_register_handlers+0x46>
		return;
	h->on_move_queue_add = h_move_queue_add;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a10      	ldr	r2, [pc, #64]	@ (8003460 <services_register_handlers+0x54>)
 800341e:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a10      	ldr	r2, [pc, #64]	@ (8003464 <services_register_handlers+0x58>)
 8003424:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a0f      	ldr	r2, [pc, #60]	@ (8003468 <services_register_handlers+0x5c>)
 800342a:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a0f      	ldr	r2, [pc, #60]	@ (800346c <services_register_handlers+0x60>)
 8003430:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a0e      	ldr	r2, [pc, #56]	@ (8003470 <services_register_handlers+0x64>)
 8003436:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0e      	ldr	r2, [pc, #56]	@ (8003474 <services_register_handlers+0x68>)
 800343c:	615a      	str	r2, [r3, #20]
	h->on_led_ctrl = h_led_ctrl;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <services_register_handlers+0x6c>)
 8003442:	619a      	str	r2, [r3, #24]
	h->on_fpga_status = h_fpga_status;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0d      	ldr	r2, [pc, #52]	@ (800347c <services_register_handlers+0x70>)
 8003448:	61da      	str	r2, [r3, #28]
	h->on_test_hello = h_test_hello;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a0c      	ldr	r2, [pc, #48]	@ (8003480 <services_register_handlers+0x74>)
 800344e:	621a      	str	r2, [r3, #32]
 8003450:	e000      	b.n	8003454 <services_register_handlers+0x48>
		return;
 8003452:	bf00      	nop
}
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	08003319 	.word	0x08003319
 8003464:	08003335 	.word	0x08003335
 8003468:	08003351 	.word	0x08003351
 800346c:	0800336d 	.word	0x0800336d
 8003470:	08003389 	.word	0x08003389
 8003474:	080033a5 	.word	0x080033a5
 8003478:	080033c1 	.word	0x080033c1
 800347c:	080033dd 	.word	0x080033dd
 8003480:	080033f5 	.word	0x080033f5

08003484 <tx_fill_left_zero_right_filler>:
/**
 * @brief Preenche o buffer de TX com 22×0x00 à esquerda e 20×SPI_FILL_BYTE à direita.
 * @param dst Ponteiro para o buffer de TX (tamanho = 42).
 */
static inline void tx_fill_left_zero_right_filler(uint8_t *dst)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    memset(&dst[0],                 0x00,           RESP_LEFT_PAD_LEN); /* 22×0x00  */
 800348c:	2216      	movs	r2, #22
 800348e:	2100      	movs	r1, #0
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f009 fc87 	bl	800cda4 <memset>
    memset(&dst[RESP_LEFT_PAD_LEN], SPI_FILL_BYTE,  RESP_RIGHT_LEN);    /* 20×filler */
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3316      	adds	r3, #22
 800349a:	2214      	movs	r2, #20
 800349c:	21a5      	movs	r1, #165	@ 0xa5
 800349e:	4618      	mov	r0, r3
 80034a0:	f009 fc80 	bl	800cda4 <memset>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <is_fill42>:
 * @param buf Buffer de entrada (tamanho = 42).
 * @param val Valor esperado em todos os bytes.
 * @return 1 se todos os bytes são 'val', 0 caso contrário.
 */
static int is_fill42(const uint8_t *buf, uint8_t val)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e00b      	b.n	80034d6 <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <is_fill42+0x24>
 80034cc:	2300      	movs	r3, #0
 80034ce:	e006      	b.n	80034de <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b29      	cmp	r3, #41	@ 0x29
 80034da:	d9f0      	bls.n	80034be <is_fill42+0x12>
    return 1;
 80034dc:	2301      	movs	r3, #1
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <find_frame>:
 * @param off  (out) Offset de início do quadro (REQ_HEADER).
 * @param len  (out) Comprimento do quadro (inclui REQ_TAIL).
 * @return 1 se encontrou, 0 caso contrário.
 */
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 80034fa:	e002      	b.n	8003502 <find_frame+0x18>
 80034fc:	8afb      	ldrh	r3, [r7, #22]
 80034fe:	3301      	adds	r3, #1
 8003500:	82fb      	strh	r3, [r7, #22]
 8003502:	8afb      	ldrh	r3, [r7, #22]
 8003504:	2b29      	cmp	r3, #41	@ 0x29
 8003506:	d805      	bhi.n	8003514 <find_frame+0x2a>
 8003508:	8afb      	ldrh	r3, [r7, #22]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4413      	add	r3, r2
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2baa      	cmp	r3, #170	@ 0xaa
 8003512:	d1f3      	bne.n	80034fc <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 8003514:	8afb      	ldrh	r3, [r7, #22]
 8003516:	2b29      	cmp	r3, #41	@ 0x29
 8003518:	d901      	bls.n	800351e <find_frame+0x34>
 800351a:	2300      	movs	r3, #0
 800351c:	e01d      	b.n	800355a <find_frame+0x70>

    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 800351e:	8afb      	ldrh	r3, [r7, #22]
 8003520:	3301      	adds	r3, #1
 8003522:	82bb      	strh	r3, [r7, #20]
 8003524:	e015      	b.n	8003552 <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 8003526:	8abb      	ldrh	r3, [r7, #20]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b55      	cmp	r3, #85	@ 0x55
 8003530:	d10c      	bne.n	800354c <find_frame+0x62>
            *off = i;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	8afa      	ldrh	r2, [r7, #22]
 8003536:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8003538:	8aba      	ldrh	r2, [r7, #20]
 800353a:	8afb      	ldrh	r3, [r7, #22]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	b29b      	uxth	r3, r3
 8003540:	3301      	adds	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	801a      	strh	r2, [r3, #0]
            return 1;
 8003548:	2301      	movs	r3, #1
 800354a:	e006      	b.n	800355a <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 800354c:	8abb      	ldrh	r3, [r7, #20]
 800354e:	3301      	adds	r3, #1
 8003550:	82bb      	strh	r3, [r7, #20]
 8003552:	8abb      	ldrh	r3, [r7, #20]
 8003554:	2b29      	cmp	r3, #41	@ 0x29
 8003556:	d9e6      	bls.n	8003526 <find_frame+0x3c>
        }
    }
    return 0;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <prepare_next_tx>:
 *      * Se n > 20, trunca para os 20 últimos bytes.
 *  - SEM resposta:
 *      * 22×0x00 + 20×SPI_FILL_BYTE (poll).
 */
static void prepare_next_tx(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	@ 0x38
 800356c:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	637b      	str	r3, [r7, #52]	@ 0x34

    if (!g_resp_fifo) {
 8003572:	4b21      	ldr	r3, [pc, #132]	@ (80035f8 <prepare_next_tx+0x90>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <prepare_next_tx+0x20>
        /* Sem fila -> 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 800357a:	4820      	ldr	r0, [pc, #128]	@ (80035fc <prepare_next_tx+0x94>)
 800357c:	f7ff ff82 	bl	8003484 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 8003580:	4b1f      	ldr	r3, [pc, #124]	@ (8003600 <prepare_next_tx+0x98>)
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e034      	b.n	80035f2 <prepare_next_tx+0x8a>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 8003588:	4b1b      	ldr	r3, [pc, #108]	@ (80035f8 <prepare_next_tx+0x90>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1d39      	adds	r1, r7, #4
 800358e:	222a      	movs	r2, #42	@ 0x2a
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd fe51 	bl	8001238 <resp_fifo_pop>
 8003596:	6378      	str	r0, [r7, #52]	@ 0x34
    if (n > 0) {
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	dd23      	ble.n	80035e6 <prepare_next_tx+0x7e>
        /* Zera TODO o frame para evitar A5 antes do payload */
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 800359e:	222a      	movs	r2, #42	@ 0x2a
 80035a0:	2100      	movs	r1, #0
 80035a2:	4816      	ldr	r0, [pc, #88]	@ (80035fc <prepare_next_tx+0x94>)
 80035a4:	f009 fbfe 	bl	800cda4 <memset>

        /* Copia o payload alinhado à direita (trunca se necessário) */
        uint16_t to_copy = (uint16_t)((n > (int)RESP_RIGHT_LEN) ? RESP_RIGHT_LEN : n);
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	2b14      	cmp	r3, #20
 80035ac:	dc02      	bgt.n	80035b4 <prepare_next_tx+0x4c>
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	e000      	b.n	80035b6 <prepare_next_tx+0x4e>
 80035b4:	2314      	movs	r3, #20
 80035b6:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint16_t dst_off = (uint16_t)(APP_SPI_DMA_BUF_LEN - to_copy); /* 42 - to_copy */
 80035b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80035ba:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80035be:	863b      	strh	r3, [r7, #48]	@ 0x30
        uint16_t src_off = (uint16_t)(n - to_copy);                   /* últimos 'to_copy' bytes */
 80035c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        memcpy(&g_spi_tx_dma_buf[dst_off], &tmp[src_off], to_copy);
 80035ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80035cc:	4a0b      	ldr	r2, [pc, #44]	@ (80035fc <prepare_next_tx+0x94>)
 80035ce:	1898      	adds	r0, r3, r2
 80035d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80035d2:	1d3a      	adds	r2, r7, #4
 80035d4:	4413      	add	r3, r2
 80035d6:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80035d8:	4619      	mov	r1, r3
 80035da:	f009 fc6e 	bl	800ceba <memcpy>
        g_state = APP_SPI_PENDING;
 80035de:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <prepare_next_tx+0x98>)
 80035e0:	2202      	movs	r2, #2
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e005      	b.n	80035f2 <prepare_next_tx+0x8a>
    } else {
        /* Sem resposta -> mantém contrato visual: 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80035e6:	4805      	ldr	r0, [pc, #20]	@ (80035fc <prepare_next_tx+0x94>)
 80035e8:	f7ff ff4c 	bl	8003484 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 80035ec:	4b04      	ldr	r3, [pc, #16]	@ (8003600 <prepare_next_tx+0x98>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
    }
}
 80035f2:	3738      	adds	r7, #56	@ 0x38
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000338 	.word	0x20000338
 80035fc:	20000368 	.word	0x20000368
 8003600:	20000394 	.word	0x20000394

08003604 <restart_spi_dma>:
/**
 * @brief Reinicia uma transação SPI por DMA (não bloqueante).
 * Seta g_state=BUSY em caso de sucesso; seta g_spi_error_flag em erro.
 */
static void restart_spi_dma(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8003608:	480d      	ldr	r0, [pc, #52]	@ (8003640 <restart_spi_dma+0x3c>)
 800360a:	f004 ff81 	bl	8008510 <HAL_SPI_GetState>
 800360e:	4603      	mov	r3, r0
 8003610:	2b01      	cmp	r3, #1
 8003612:	d003      	beq.n	800361c <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 8003614:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <restart_spi_dma+0x40>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
        return;
 800361a:	e00f      	b.n	800363c <restart_spi_dma+0x38>
    }

    if (HAL_SPI_TransmitReceive_DMA(&hspi1,
 800361c:	232a      	movs	r3, #42	@ 0x2a
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <restart_spi_dma+0x44>)
 8003620:	490a      	ldr	r1, [pc, #40]	@ (800364c <restart_spi_dma+0x48>)
 8003622:	4807      	ldr	r0, [pc, #28]	@ (8003640 <restart_spi_dma+0x3c>)
 8003624:	f004 fca8 	bl	8007f78 <HAL_SPI_TransmitReceive_DMA>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 800362e:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <restart_spi_dma+0x40>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
        return;
 8003634:	e002      	b.n	800363c <restart_spi_dma+0x38>
    }

    g_state = APP_SPI_BUSY;
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <restart_spi_dma+0x4c>)
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
}
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000398 	.word	0x20000398
 8003644:	20000393 	.word	0x20000393
 8003648:	2000033c 	.word	0x2000033c
 800364c:	20000368 	.word	0x20000368
 8003650:	20000394 	.word	0x20000394

08003654 <app_init>:
/**
 * @brief Inicializa roteador, fila de respostas e a primeira rodada DMA.
 * Preenche o primeiro TX como 22×0x00 + 20×filler.
 */
void app_init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
    /* Registra serviços no router (o projeto deve prover os handlers) */
    memset(&g_handlers, 0, sizeof g_handlers);
 8003658:	2224      	movs	r2, #36	@ 0x24
 800365a:	2100      	movs	r1, #0
 800365c:	4813      	ldr	r0, [pc, #76]	@ (80036ac <app_init+0x58>)
 800365e:	f009 fba1 	bl	800cda4 <memset>
    services_register_handlers(&g_handlers);
 8003662:	4812      	ldr	r0, [pc, #72]	@ (80036ac <app_init+0x58>)
 8003664:	f7ff fed2 	bl	800340c <services_register_handlers>

    /* Inicializa serviços (ordem: log/diag, safety, periféricos simples, motion) */
#if LOG_ENABLE
    log_service_init();
 8003668:	f7fe fbde 	bl	8001e28 <log_service_init>
#endif
    safety_service_init();
 800366c:	f7ff fe34 	bl	80032d8 <safety_service_init>
    led_service_init();
 8003670:	f7fe fa4e 	bl	8001b10 <led_service_init>
    home_service_init();
 8003674:	f7fd ff5c 	bl	8001530 <home_service_init>
    probe_service_init();
 8003678:	f7ff fde6 	bl	8003248 <probe_service_init>
    motion_service_init();
 800367c:	f7ff fa2a 	bl	8002ad4 <motion_service_init>

    g_resp_fifo = resp_fifo_create();
 8003680:	f7fd fd7d 	bl	800117e <resp_fifo_create>
 8003684:	4603      	mov	r3, r0
 8003686:	4a0a      	ldr	r2, [pc, #40]	@ (80036b0 <app_init+0x5c>)
 8003688:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 800368a:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <app_init+0x5c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a07      	ldr	r2, [pc, #28]	@ (80036ac <app_init+0x58>)
 8003690:	4619      	mov	r1, r3
 8003692:	4808      	ldr	r0, [pc, #32]	@ (80036b4 <app_init+0x60>)
 8003694:	f7fd fe16 	bl	80012c4 <router_init>

    /* Primeiro frame: 22×0x00 + 20×filler (evita A5 no início quando não há resposta) */
    tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8003698:	4807      	ldr	r0, [pc, #28]	@ (80036b8 <app_init+0x64>)
 800369a:	f7ff fef3 	bl	8003484 <tx_fill_left_zero_right_filler>

    restart_spi_dma();
 800369e:	f7ff ffb1 	bl	8003604 <restart_spi_dma>
    g_state = APP_SPI_READY;
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <app_init+0x68>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000314 	.word	0x20000314
 80036b0:	20000338 	.word	0x20000338
 80036b4:	200002cc 	.word	0x200002cc
 80036b8:	20000368 	.word	0x20000368
 80036bc:	20000394 	.word	0x20000394

080036c0 <app_poll>:
/**
 * @brief Loop de serviço: processa RX (quando há rodada concluída),
 *        prepara o próximo TX e rearma o DMA.
 */
void app_poll(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
    /* Só processa quando um round DMA foi concluído pelo HAL */
    if (!g_spi_round_done) return;
 80036c6:	4b19      	ldr	r3, [pc, #100]	@ (800372c <app_poll+0x6c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d028      	beq.n	8003722 <app_poll+0x62>
    g_spi_round_done = 0u;
 80036d0:	4b16      	ldr	r3, [pc, #88]	@ (800372c <app_poll+0x6c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]

    /* 1) Interpretar o RX atual */
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 80036d6:	213c      	movs	r1, #60	@ 0x3c
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <app_poll+0x70>)
 80036da:	f7ff fee7 	bl	80034ac <is_fill42>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d119      	bne.n	8003718 <app_poll+0x58>
        /* 42×0x3C => cliente apenas leu respostas; não alimenta router */
    } else {
        /* Tenta extrair [REQ_HEADER ... REQ_TAIL] e empurra para o router */
        uint16_t off = 0, len = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	80fb      	strh	r3, [r7, #6]
 80036e8:	2300      	movs	r3, #0
 80036ea:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 80036ec:	1d3a      	adds	r2, r7, #4
 80036ee:	1dbb      	adds	r3, r7, #6
 80036f0:	4619      	mov	r1, r3
 80036f2:	480f      	ldr	r0, [pc, #60]	@ (8003730 <app_poll+0x70>)
 80036f4:	f7ff fef9 	bl	80034ea <find_frame>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	461a      	mov	r2, r3
 8003702:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <app_poll+0x70>)
 8003704:	4413      	add	r3, r2
 8003706:	88ba      	ldrh	r2, [r7, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	480a      	ldr	r0, [pc, #40]	@ (8003734 <app_poll+0x74>)
 800370c:	f7fd fee8 	bl	80014e0 <router_feed_bytes>
 8003710:	e002      	b.n	8003718 <app_poll+0x58>
        } else {
            /* Quadro inválido/parcial ou outro padrão -> marca erro leve */
            g_spi_error_flag = 1u;
 8003712:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <app_poll+0x78>)
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
        }
    }

    /* 2) Preparar TX (resposta à direita ou 22×0x00 + 20×filler) */
    prepare_next_tx();
 8003718:	f7ff ff26 	bl	8003568 <prepare_next_tx>

    /* 3) Reiniciar DMA para o próximo round */
    restart_spi_dma();
 800371c:	f7ff ff72 	bl	8003604 <restart_spi_dma>
 8003720:	e000      	b.n	8003724 <app_poll+0x64>
    if (!g_spi_round_done) return;
 8003722:	bf00      	nop
}
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000392 	.word	0x20000392
 8003730:	2000033c 	.word	0x2000033c
 8003734:	200002cc 	.word	0x200002cc
 8003738:	20000393 	.word	0x20000393

0800373c <app_spi_isr_txrx_done>:
/**
 * @brief Callback para “transfer complete” do SPI+DMA.
 * Apenas sinaliza o loop principal (app_poll) via g_spi_round_done.
 */
void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a07      	ldr	r2, [pc, #28]	@ (800376c <app_spi_isr_txrx_done+0x30>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d105      	bne.n	8003760 <app_spi_isr_txrx_done+0x24>
    g_spi_round_done = 1u;
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <app_spi_isr_txrx_done+0x34>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e002      	b.n	8003762 <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 800375c:	bf00      	nop
 800375e:	e000      	b.n	8003762 <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8003760:	bf00      	nop
}
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40013000 	.word	0x40013000
 8003770:	20000392 	.word	0x20000392

08003774 <app_resp_push>:
 * @param frame Buffer com a resposta (número de bytes = len).
 * @param len   Tamanho da resposta (até 20 bytes). >20 retorna erro.
 * @return 0 em sucesso; PROTO_ERR_ARG ou PROTO_ERR_RANGE em erro.
 */
int app_resp_push(const uint8_t *frame, uint32_t len)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 800377e:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <app_resp_push+0x48>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <app_resp_push+0x1e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <app_resp_push+0x1e>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	e00d      	b.n	80037b4 <app_resp_push+0x40>
    }
    if (len > RESP_RIGHT_LEN) {
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b14      	cmp	r3, #20
 800379c:	d902      	bls.n	80037a4 <app_resp_push+0x30>
        return PROTO_ERR_RANGE; /* impede >20 bytes */
 800379e:	f06f 0303 	mvn.w	r3, #3
 80037a2:	e007      	b.n	80037b4 <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <app_resp_push+0x48>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd fcef 	bl	8001190 <resp_fifo_push>
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000338 	.word	0x20000338

080037c0 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	@ 0x38
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	2224      	movs	r2, #36	@ 0x24
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f009 fae7 	bl	800cda4 <memset>
    TIM_MasterConfigTypeDef master = {0};
 80037d6:	f107 0308 	add.w	r3, r7, #8
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 80037e2:	2303      	movs	r3, #3
 80037e4:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037ea:	2301      	movs	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037fa:	2301      	movs	r3, #1
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 80037fe:	2300      	movs	r3, #0
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f005 feed 	bl	80095ec <HAL_TIM_Encoder_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 8003818:	f000 fa90 	bl	8003d3c <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8003824:	f107 0308 	add.w	r3, r7, #8
 8003828:	4619      	mov	r1, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f007 fdc2 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 8003836:	f000 fa81 	bl	8003d3c <Error_Handler>
    }
}
 800383a:	bf00      	nop
 800383c:	3738      	adds	r7, #56	@ 0x38
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b08a      	sub	sp, #40	@ 0x28
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 800384e:	f107 0314 	add.w	r3, r7, #20
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8003862:	2301      	movs	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 800386e:	f107 0314 	add.w	r3, r7, #20
 8003872:	4619      	mov	r1, r3
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f001 fdcd 	bl	8005414 <HAL_GPIO_Init>
}
 800387a:	bf00      	nop
 800387c:	3728      	adds	r7, #40	@ 0x28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8003898:	2203      	movs	r2, #3
 800389a:	2113      	movs	r1, #19
 800389c:	4824      	ldr	r0, [pc, #144]	@ (8003930 <board_config_apply_motion_gpio+0xac>)
 800389e:	f7ff ffd0 	bl	8003842 <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80038a2:	2203      	movs	r2, #3
 80038a4:	2104      	movs	r1, #4
 80038a6:	4822      	ldr	r0, [pc, #136]	@ (8003930 <board_config_apply_motion_gpio+0xac>)
 80038a8:	f7ff ffcb 	bl	8003842 <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80038ac:	2203      	movs	r2, #3
 80038ae:	210c      	movs	r1, #12
 80038b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038b4:	f7ff ffc5 	bl	8003842 <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2130      	movs	r1, #48	@ 0x30
 80038bc:	481d      	ldr	r0, [pc, #116]	@ (8003934 <board_config_apply_motion_gpio+0xb0>)
 80038be:	f7ff ffc0 	bl	8003842 <configure_output>
    configure_output(GPIOA, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 80038c2:	2200      	movs	r2, #0
 80038c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038cc:	f7ff ffb9 	bl	8003842 <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2117      	movs	r1, #23
 80038d4:	4816      	ldr	r0, [pc, #88]	@ (8003930 <board_config_apply_motion_gpio+0xac>)
 80038d6:	f002 f953 	bl	8005b80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 80038da:	2200      	movs	r2, #0
 80038dc:	210c      	movs	r1, #12
 80038de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038e2:	f002 f94d 	bl	8005b80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 80038e6:	2201      	movs	r2, #1
 80038e8:	2130      	movs	r1, #48	@ 0x30
 80038ea:	4812      	ldr	r0, [pc, #72]	@ (8003934 <board_config_apply_motion_gpio+0xb0>)
 80038ec:	f002 f948 	bl	8005b80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80038f0:	2201      	movs	r2, #1
 80038f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038fa:	f002 f941 	bl	8005b80 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 80038fe:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003902:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 8003904:	2301      	movs	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8003908:	2307      	movs	r3, #7
 800390a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4808      	ldr	r0, [pc, #32]	@ (8003934 <board_config_apply_motion_gpio+0xb0>)
 8003912:	f001 fd7f 	bl	8005414 <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 8003916:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800391a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4804      	ldr	r0, [pc, #16]	@ (8003934 <board_config_apply_motion_gpio+0xb0>)
 8003922:	f001 fd77 	bl	8005414 <HAL_GPIO_Init>
}
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	48000400 	.word	0x48000400
 8003934:	48000800 	.word	0x48000800

08003938 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim2);
 800393c:	4805      	ldr	r0, [pc, #20]	@ (8003954 <board_config_force_encoder_quadrature+0x1c>)
 800393e:	f7ff ff3f 	bl	80037c0 <configure_encoder_timer>
    configure_encoder_timer(&htim3);
 8003942:	4805      	ldr	r0, [pc, #20]	@ (8003958 <board_config_force_encoder_quadrature+0x20>)
 8003944:	f7ff ff3c 	bl	80037c0 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 8003948:	4804      	ldr	r0, [pc, #16]	@ (800395c <board_config_force_encoder_quadrature+0x24>)
 800394a:	f7ff ff39 	bl	80037c0 <configure_encoder_timer>
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000490 	.word	0x20000490
 8003958:	200004dc 	.word	0x200004dc
 800395c:	20000528 	.word	0x20000528

08003960 <board_config_remap_tim3_encoder_pins>:

void board_config_remap_tim3_encoder_pins(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	611a      	str	r2, [r3, #16]

    /* Libera a configuração padrão do CubeMX e migra o encoder para PC6/PC7 */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3 | GPIO_PIN_4);
 8003974:	2118      	movs	r1, #24
 8003976:	4811      	ldr	r0, [pc, #68]	@ (80039bc <board_config_remap_tim3_encoder_pins+0x5c>)
 8003978:	f001 ffd8 	bl	800592c <HAL_GPIO_DeInit>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800397c:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <board_config_remap_tim3_encoder_pins+0x60>)
 800397e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003980:	4a0f      	ldr	r2, [pc, #60]	@ (80039c0 <board_config_remap_tim3_encoder_pins+0x60>)
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003988:	4b0d      	ldr	r3, [pc, #52]	@ (80039c0 <board_config_remap_tim3_encoder_pins+0x60>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	683b      	ldr	r3, [r7, #0]

    init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003994:	23c0      	movs	r3, #192	@ 0xc0
 8003996:	607b      	str	r3, [r7, #4]
    init.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
    init.Speed = GPIO_SPEED_FREQ_LOW;
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
    init.Alternate = GPIO_AF2_TIM3;
 80039a4:	2302      	movs	r3, #2
 80039a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &init);
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4805      	ldr	r0, [pc, #20]	@ (80039c4 <board_config_remap_tim3_encoder_pins+0x64>)
 80039ae:	f001 fd31 	bl	8005414 <HAL_GPIO_Init>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	48001000 	.word	0x48001000
 80039c0:	40021000 	.word	0x40021000
 80039c4:	48000800 	.word	0x48000800

080039c8 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80039cc:	2200      	movs	r2, #0
 80039ce:	2100      	movs	r1, #0
 80039d0:	2006      	movs	r0, #6
 80039d2:	f001 f989 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80039d6:	2006      	movs	r0, #6
 80039d8:	f001 f9b2 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	2007      	movs	r0, #7
 80039e2:	f001 f981 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80039e6:	2007      	movs	r0, #7
 80039e8:	f001 f9aa 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2100      	movs	r1, #0
 80039f0:	2008      	movs	r0, #8
 80039f2:	f001 f979 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80039f6:	2008      	movs	r0, #8
 80039f8:	f001 f9a2 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80039fc:	2200      	movs	r2, #0
 80039fe:	2100      	movs	r1, #0
 8003a00:	2028      	movs	r0, #40	@ 0x28
 8003a02:	f001 f971 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a06:	2028      	movs	r0, #40	@ 0x28
 8003a08:	f001 f99a 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2101      	movs	r1, #1
 8003a10:	2036      	movs	r0, #54	@ 0x36
 8003a12:	f001 f969 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a16:	2036      	movs	r0, #54	@ 0x36
 8003a18:	f001 f992 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2102      	movs	r1, #2
 8003a20:	200c      	movs	r0, #12
 8003a22:	f001 f961 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003a26:	200c      	movs	r0, #12
 8003a28:	f001 f98a 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2102      	movs	r1, #2
 8003a30:	200d      	movs	r0, #13
 8003a32:	f001 f959 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003a36:	200d      	movs	r0, #13
 8003a38:	f001 f982 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2103      	movs	r1, #3
 8003a40:	2037      	movs	r0, #55	@ 0x37
 8003a42:	f001 f951 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a46:	2037      	movs	r0, #55	@ 0x37
 8003a48:	f001 f97a 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2104      	movs	r1, #4
 8003a50:	2025      	movs	r0, #37	@ 0x25
 8003a52:	f001 f949 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a56:	2025      	movs	r0, #37	@ 0x25
 8003a58:	f001 f972 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2105      	movs	r1, #5
 8003a60:	2023      	movs	r0, #35	@ 0x23
 8003a62:	f001 f941 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003a66:	2023      	movs	r0, #35	@ 0x23
 8003a68:	f001 f96a 	bl	8004d40 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2106      	movs	r1, #6
 8003a70:	2018      	movs	r0, #24
 8003a72:	f001 f939 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003a76:	2018      	movs	r0, #24
 8003a78:	f001 f962 	bl	8004d40 <HAL_NVIC_EnableIRQ>
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a86:	4b10      	ldr	r3, [pc, #64]	@ (8003ac8 <MX_DMA_Init+0x48>)
 8003a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac8 <MX_DMA_Init+0x48>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <MX_DMA_Init+0x48>)
 8003a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	200c      	movs	r0, #12
 8003aa4:	f001 f920 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003aa8:	200c      	movs	r0, #12
 8003aaa:	f001 f949 	bl	8004d40 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	200d      	movs	r0, #13
 8003ab4:	f001 f918 	bl	8004ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003ab8:	200d      	movs	r0, #13
 8003aba:	f001 f941 	bl	8004d40 <HAL_NVIC_EnableIRQ>

}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000

08003acc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	@ 0x30
 8003ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003ae8:	f043 0310 	orr.w	r3, r3, #16
 8003aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aee:	4b4a      	ldr	r3, [pc, #296]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003afa:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afe:	4a46      	ldr	r2, [pc, #280]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b06:	4b44      	ldr	r3, [pc, #272]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b12:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	4a40      	ldr	r2, [pc, #256]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b36:	4b38      	ldr	r3, [pc, #224]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b42:	4b35      	ldr	r3, [pc, #212]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	4a34      	ldr	r2, [pc, #208]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4e:	4b32      	ldr	r3, [pc, #200]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b66:	4b2c      	ldr	r3, [pc, #176]	@ (8003c18 <MX_GPIO_Init+0x14c>)
 8003b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8003b72:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 8003b76:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b80:	f107 031c 	add.w	r3, r7, #28
 8003b84:	4619      	mov	r1, r3
 8003b86:	4825      	ldr	r0, [pc, #148]	@ (8003c1c <MX_GPIO_Init+0x150>)
 8003b88:	f001 fc44 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003b8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b90:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b92:	2303      	movs	r3, #3
 8003b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b9a:	f107 031c 	add.w	r3, r7, #28
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	481f      	ldr	r0, [pc, #124]	@ (8003c20 <MX_GPIO_Init+0x154>)
 8003ba2:	f001 fc37 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003baa:	2303      	movs	r3, #3
 8003bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003bb2:	f107 031c 	add.w	r3, r7, #28
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	481a      	ldr	r0, [pc, #104]	@ (8003c24 <MX_GPIO_Init+0x158>)
 8003bba:	f001 fc2b 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003bbe:	f641 7308 	movw	r3, #7944	@ 0x1f08
 8003bc2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bcc:	f107 031c 	add.w	r3, r7, #28
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bd6:	f001 fc1d 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003bda:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 8003bde:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003be0:	2303      	movs	r3, #3
 8003be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be8:	f107 031c 	add.w	r3, r7, #28
 8003bec:	4619      	mov	r1, r3
 8003bee:	480e      	ldr	r0, [pc, #56]	@ (8003c28 <MX_GPIO_Init+0x15c>)
 8003bf0:	f001 fc10 	bl	8005414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003bf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bf8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c02:	f107 031c 	add.w	r3, r7, #28
 8003c06:	4619      	mov	r1, r3
 8003c08:	4808      	ldr	r0, [pc, #32]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003c0a:	f001 fc03 	bl	8005414 <HAL_GPIO_Init>

}
 8003c0e:	bf00      	nop
 8003c10:	3730      	adds	r7, #48	@ 0x30
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	48001000 	.word	0x48001000
 8003c20:	48000800 	.word	0x48000800
 8003c24:	48001c00 	.word	0x48001c00
 8003c28:	48000400 	.word	0x48000400
 8003c2c:	48000c00 	.word	0x48000c00

08003c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c34:	f000 fef3 	bl	8004a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c38:	f000 f821 	bl	8003c7e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c3c:	f7ff ff46 	bl	8003acc <MX_GPIO_Init>
  MX_DMA_Init();
 8003c40:	f7ff ff1e 	bl	8003a80 <MX_DMA_Init>
  MX_SPI1_Init();
 8003c44:	f000 f89e 	bl	8003d84 <MX_SPI1_Init>
  MX_TIM6_Init();
 8003c48:	f000 fbb6 	bl	80043b8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8003c4c:	f000 fab4 	bl	80041b8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8003c50:	f000 fb5c 	bl	800430c <MX_TIM5_Init>
  MX_TIM7_Init();
 8003c54:	f000 fbe6 	bl	8004424 <MX_TIM7_Init>
  MX_TIM3_Init();
 8003c58:	f000 fb02 	bl	8004260 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003c5c:	f000 fe28 	bl	80048b0 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8003c60:	f000 fc16 	bl	8004490 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8003c64:	f7ff fe0e 	bl	8003884 <board_config_apply_motion_gpio>
    board_config_remap_tim3_encoder_pins();
 8003c68:	f7ff fe7a 	bl	8003960 <board_config_remap_tim3_encoder_pins>
    board_config_force_encoder_quadrature();
 8003c6c:	f7ff fe64 	bl	8003938 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 8003c70:	f7ff feaa 	bl	80039c8 <board_config_apply_interrupt_priorities>
    //board_config_apply_spi_dma_profile();
    app_init();
 8003c74:	f7ff fcee 	bl	8003654 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8003c78:	f7ff fd22 	bl	80036c0 <app_poll>
 8003c7c:	e7fc      	b.n	8003c78 <main+0x48>

08003c7e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b096      	sub	sp, #88	@ 0x58
 8003c82:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	2244      	movs	r2, #68	@ 0x44
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f009 f889 	bl	800cda4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c92:	463b      	mov	r3, r7
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ca0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003ca4:	f001 ffca 	bl	8005c3c <HAL_PWREx_ControlVoltageScaling>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003cae:	f000 f845 	bl	8003d3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003cbe:	2360      	movs	r3, #96	@ 0x60
 8003cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003cce:	2328      	movs	r3, #40	@ 0x28
 8003cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003cd2:	2307      	movs	r3, #7
 8003cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cde:	f107 0314 	add.w	r3, r7, #20
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f002 f80c 	bl	8005d00 <HAL_RCC_OscConfig>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003cee:	f000 f825 	bl	8003d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cf2:	230f      	movs	r3, #15
 8003cf4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003d08:	463b      	mov	r3, r7
 8003d0a:	2104      	movs	r1, #4
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f002 fcf9 	bl	8006704 <HAL_RCC_ClockConfig>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003d18:	f000 f810 	bl	8003d3c <Error_Handler>
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3758      	adds	r7, #88	@ 0x58
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fd05 	bl	800373c <app_spi_isr_txrx_done>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	2164      	movs	r1, #100	@ 0x64
 8003d46:	2000      	movs	r0, #0
 8003d48:	f7fe f87c 	bl	8001e44 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8003d4c:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <Error_Handler+0x24>)
 8003d4e:	4905      	ldr	r1, [pc, #20]	@ (8003d64 <Error_Handler+0x28>)
 8003d50:	4805      	ldr	r0, [pc, #20]	@ (8003d68 <Error_Handler+0x2c>)
 8003d52:	f7fe f88b 	bl	8001e6c <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8003d56:	b672      	cpsid	i
}
 8003d58:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8003d5a:	bf00      	nop
 8003d5c:	e7fd      	b.n	8003d5a <Error_Handler+0x1e>
 8003d5e:	bf00      	nop
 8003d60:	0800df60 	.word	0x0800df60
 8003d64:	0800df70 	.word	0x0800df70
 8003d68:	0800df78 	.word	0x0800df78

08003d6c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003d88:	4b18      	ldr	r3, [pc, #96]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003d8a:	4a19      	ldr	r2, [pc, #100]	@ (8003df0 <MX_SPI1_Init+0x6c>)
 8003d8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8003d8e:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d94:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d9a:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003d9c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003da0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003da2:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003da4:	2202      	movs	r2, #2
 8003da6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003da8:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003dae:	4b0f      	ldr	r3, [pc, #60]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003db4:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dba:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003dc6:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003dc8:	2207      	movs	r2, #7
 8003dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003dcc:	4b07      	ldr	r3, [pc, #28]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003dd8:	4804      	ldr	r0, [pc, #16]	@ (8003dec <MX_SPI1_Init+0x68>)
 8003dda:	f003 fedf 	bl	8007b9c <HAL_SPI_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003de4:	f7ff ffaa 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000398 	.word	0x20000398
 8003df0:	40013000 	.word	0x40013000

08003df4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	@ 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a45      	ldr	r2, [pc, #276]	@ (8003f28 <HAL_SPI_MspInit+0x134>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f040 8083 	bne.w	8003f1e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e18:	4b44      	ldr	r3, [pc, #272]	@ (8003f2c <HAL_SPI_MspInit+0x138>)
 8003e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1c:	4a43      	ldr	r2, [pc, #268]	@ (8003f2c <HAL_SPI_MspInit+0x138>)
 8003e1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e22:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e24:	4b41      	ldr	r3, [pc, #260]	@ (8003f2c <HAL_SPI_MspInit+0x138>)
 8003e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e30:	4b3e      	ldr	r3, [pc, #248]	@ (8003f2c <HAL_SPI_MspInit+0x138>)
 8003e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e34:	4a3d      	ldr	r2, [pc, #244]	@ (8003f2c <HAL_SPI_MspInit+0x138>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <HAL_SPI_MspInit+0x138>)
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e48:	23f0      	movs	r3, #240	@ 0xf0
 8003e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e54:	2303      	movs	r3, #3
 8003e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e58:	2305      	movs	r3, #5
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4619      	mov	r1, r3
 8003e62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e66:	f001 fad5 	bl	8005414 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8003e6a:	4b31      	ldr	r3, [pc, #196]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e6c:	4a31      	ldr	r2, [pc, #196]	@ (8003f34 <HAL_SPI_MspInit+0x140>)
 8003e6e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8003e70:	4b2f      	ldr	r3, [pc, #188]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e76:	4b2e      	ldr	r3, [pc, #184]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e82:	4b2b      	ldr	r3, [pc, #172]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e84:	2280      	movs	r2, #128	@ 0x80
 8003e86:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e88:	4b29      	ldr	r3, [pc, #164]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e8e:	4b28      	ldr	r3, [pc, #160]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8003e94:	4b26      	ldr	r3, [pc, #152]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e96:	2220      	movs	r2, #32
 8003e98:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e9a:	4b25      	ldr	r3, [pc, #148]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003ea0:	4823      	ldr	r0, [pc, #140]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003ea2:	f000 ff71 	bl	8004d88 <HAL_DMA_Init>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8003eac:	f7ff ff46 	bl	8003d3c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003eb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <HAL_SPI_MspInit+0x13c>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <HAL_SPI_MspInit+0x148>)
 8003ec0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003eca:	2210      	movs	r2, #16
 8003ecc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ed4:	4b18      	ldr	r3, [pc, #96]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003ed6:	2280      	movs	r2, #128	@ 0x80
 8003ed8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eda:	4b17      	ldr	r3, [pc, #92]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ee0:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003ee8:	2220      	movs	r2, #32
 8003eea:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003ef2:	4811      	ldr	r0, [pc, #68]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003ef4:	f000 ff48 	bl	8004d88 <HAL_DMA_Init>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8003efe:	f7ff ff1d 	bl	8003d3c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a0c      	ldr	r2, [pc, #48]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003f06:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f08:	4a0b      	ldr	r2, [pc, #44]	@ (8003f38 <HAL_SPI_MspInit+0x144>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2100      	movs	r1, #0
 8003f12:	2023      	movs	r0, #35	@ 0x23
 8003f14:	f000 fee8 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003f18:	2023      	movs	r0, #35	@ 0x23
 8003f1a:	f000 ff11 	bl	8004d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3728      	adds	r7, #40	@ 0x28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40013000 	.word	0x40013000
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	200003fc 	.word	0x200003fc
 8003f34:	4002001c 	.word	0x4002001c
 8003f38:	20000444 	.word	0x20000444
 8003f3c:	40020030 	.word	0x40020030

08003f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f46:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <HAL_MspInit+0x44>)
 8003f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003f84 <HAL_MspInit+0x44>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f52:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <HAL_MspInit+0x44>)
 8003f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	607b      	str	r3, [r7, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_MspInit+0x44>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	4a08      	ldr	r2, [pc, #32]	@ (8003f84 <HAL_MspInit+0x44>)
 8003f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_MspInit+0x44>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000

08003f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <NMI_Handler+0x4>

08003f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f94:	bf00      	nop
 8003f96:	e7fd      	b.n	8003f94 <HardFault_Handler+0x4>

08003f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f9c:	bf00      	nop
 8003f9e:	e7fd      	b.n	8003f9c <MemManage_Handler+0x4>

08003fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fa4:	bf00      	nop
 8003fa6:	e7fd      	b.n	8003fa4 <BusFault_Handler+0x4>

08003fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <UsageFault_Handler+0x4>

08003fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fde:	f000 fd73 	bl	8004ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003fec:	4802      	ldr	r0, [pc, #8]	@ (8003ff8 <DMA1_Channel2_IRQHandler+0x10>)
 8003fee:	f001 f932 	bl	8005256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200003fc 	.word	0x200003fc

08003ffc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004000:	4802      	ldr	r0, [pc, #8]	@ (800400c <DMA1_Channel3_IRQHandler+0x10>)
 8004002:	f001 f928 	bl	8005256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000444 	.word	0x20000444

08004010 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004014:	4802      	ldr	r0, [pc, #8]	@ (8004020 <SPI1_IRQHandler+0x10>)
 8004016:	f004 f953 	bl	80082c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800401a:	bf00      	nop
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000398 	.word	0x20000398

08004024 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004028:	4802      	ldr	r0, [pc, #8]	@ (8004034 <TIM6_DAC_IRQHandler+0x10>)
 800402a:	f005 fd5f 	bl	8009aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000574 	.word	0x20000574

08004038 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800403c:	4802      	ldr	r0, [pc, #8]	@ (8004048 <TIM7_IRQHandler+0x10>)
 800403e:	f005 fd55 	bl	8009aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200005c0 	.word	0x200005c0

0800404c <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004050:	2001      	movs	r0, #1
 8004052:	f001 fdc1 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}

0800405a <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800405e:	2002      	movs	r0, #2
 8004060:	f001 fdba 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004064:	bf00      	nop
 8004066:	bd80      	pop	{r7, pc}

08004068 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800406c:	2004      	movs	r0, #4
 800406e:	f001 fdb3 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}

08004076 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800407a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800407e:	f001 fdab 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}

08004086 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004086:	b580      	push	{r7, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e00a      	b.n	80040ae <_read+0x28>
		*ptr++ = __io_getchar();
 8004098:	f3af 8000 	nop.w
 800409c:	4601      	mov	r1, r0
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	60ba      	str	r2, [r7, #8]
 80040a4:	b2ca      	uxtb	r2, r1
 80040a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3301      	adds	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	dbf0      	blt.n	8004098 <_read+0x12>
	}

	return len;
 80040b6:	687b      	ldr	r3, [r7, #4]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80040c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <_fstat>:

int _fstat(int file, struct stat *st) {
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040e8:	605a      	str	r2, [r3, #4]
	return 0;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <_isatty>:

int _isatty(int file) {
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004100:	2301      	movs	r3, #1
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004130:	4a14      	ldr	r2, [pc, #80]	@ (8004184 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004132:	4b15      	ldr	r3, [pc, #84]	@ (8004188 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800413c:	4b13      	ldr	r3, [pc, #76]	@ (800418c <_sbrk+0x64>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004144:	4b11      	ldr	r3, [pc, #68]	@ (800418c <_sbrk+0x64>)
 8004146:	4a12      	ldr	r2, [pc, #72]	@ (8004190 <_sbrk+0x68>)
 8004148:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800414a:	4b10      	ldr	r3, [pc, #64]	@ (800418c <_sbrk+0x64>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	429a      	cmp	r2, r3
 8004156:	d207      	bcs.n	8004168 <_sbrk+0x40>
		errno = ENOMEM;
 8004158:	f008 fe82 	bl	800ce60 <__errno>
 800415c:	4603      	mov	r3, r0
 800415e:	220c      	movs	r2, #12
 8004160:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
 8004166:	e009      	b.n	800417c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004168:	4b08      	ldr	r3, [pc, #32]	@ (800418c <_sbrk+0x64>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800416e:	4b07      	ldr	r3, [pc, #28]	@ (800418c <_sbrk+0x64>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	4a05      	ldr	r2, [pc, #20]	@ (800418c <_sbrk+0x64>)
 8004178:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800417a:	68fb      	ldr	r3, [r7, #12]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20018000 	.word	0x20018000
 8004188:	00000400 	.word	0x00000400
 800418c:	2000048c 	.word	0x2000048c
 8004190:	20000830 	.word	0x20000830

08004194 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8004198:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <SystemInit+0x20>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419e:	4a05      	ldr	r2, [pc, #20]	@ (80041b4 <SystemInit+0x20>)
 80041a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	@ 0x30
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041be:	f107 030c 	add.w	r3, r7, #12
 80041c2:	2224      	movs	r2, #36	@ 0x24
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f008 fdec 	bl	800cda4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041cc:	463b      	mov	r3, r7
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	605a      	str	r2, [r3, #4]
 80041d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041d6:	4b21      	ldr	r3, [pc, #132]	@ (800425c <MX_TIM2_Init+0xa4>)
 80041d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80041dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80041de:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <MX_TIM2_Init+0xa4>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e4:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <MX_TIM2_Init+0xa4>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80041ea:	4b1c      	ldr	r3, [pc, #112]	@ (800425c <MX_TIM2_Init+0xa4>)
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041f2:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <MX_TIM2_Init+0xa4>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f8:	4b18      	ldr	r3, [pc, #96]	@ (800425c <MX_TIM2_Init+0xa4>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80041fe:	2301      	movs	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004206:	2301      	movs	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004216:	2301      	movs	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800421a:	2300      	movs	r3, #0
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004222:	f107 030c 	add.w	r3, r7, #12
 8004226:	4619      	mov	r1, r3
 8004228:	480c      	ldr	r0, [pc, #48]	@ (800425c <MX_TIM2_Init+0xa4>)
 800422a:	f005 f9df 	bl	80095ec <HAL_TIM_Encoder_Init>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004234:	f7ff fd82 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004238:	2300      	movs	r3, #0
 800423a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800423c:	2300      	movs	r3, #0
 800423e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004240:	463b      	mov	r3, r7
 8004242:	4619      	mov	r1, r3
 8004244:	4805      	ldr	r0, [pc, #20]	@ (800425c <MX_TIM2_Init+0xa4>)
 8004246:	f007 f8b5 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004250:	f7ff fd74 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004254:	bf00      	nop
 8004256:	3730      	adds	r7, #48	@ 0x30
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000490 	.word	0x20000490

08004260 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08c      	sub	sp, #48	@ 0x30
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	2224      	movs	r2, #36	@ 0x24
 800426c:	2100      	movs	r1, #0
 800426e:	4618      	mov	r0, r3
 8004270:	f008 fd98 	bl	800cda4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004274:	463b      	mov	r3, r7
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800427e:	4b21      	ldr	r3, [pc, #132]	@ (8004304 <MX_TIM3_Init+0xa4>)
 8004280:	4a21      	ldr	r2, [pc, #132]	@ (8004308 <MX_TIM3_Init+0xa8>)
 8004282:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004284:	4b1f      	ldr	r3, [pc, #124]	@ (8004304 <MX_TIM3_Init+0xa4>)
 8004286:	2200      	movs	r2, #0
 8004288:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800428a:	4b1e      	ldr	r3, [pc, #120]	@ (8004304 <MX_TIM3_Init+0xa4>)
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004290:	4b1c      	ldr	r3, [pc, #112]	@ (8004304 <MX_TIM3_Init+0xa4>)
 8004292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004296:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <MX_TIM3_Init+0xa4>)
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800429e:	4b19      	ldr	r3, [pc, #100]	@ (8004304 <MX_TIM3_Init+0xa4>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80042a4:	2301      	movs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80042ac:	2301      	movs	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80042b8:	2300      	movs	r3, #0
 80042ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80042bc:	2301      	movs	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80042c0:	2300      	movs	r3, #0
 80042c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80042c8:	f107 030c 	add.w	r3, r7, #12
 80042cc:	4619      	mov	r1, r3
 80042ce:	480d      	ldr	r0, [pc, #52]	@ (8004304 <MX_TIM3_Init+0xa4>)
 80042d0:	f005 f98c 	bl	80095ec <HAL_TIM_Encoder_Init>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80042da:	f7ff fd2f 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042de:	2300      	movs	r3, #0
 80042e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042e6:	463b      	mov	r3, r7
 80042e8:	4619      	mov	r1, r3
 80042ea:	4806      	ldr	r0, [pc, #24]	@ (8004304 <MX_TIM3_Init+0xa4>)
 80042ec:	f007 f862 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80042f6:	f7ff fd21 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	3730      	adds	r7, #48	@ 0x30
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200004dc 	.word	0x200004dc
 8004308:	40000400 	.word	0x40000400

0800430c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08c      	sub	sp, #48	@ 0x30
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004312:	f107 030c 	add.w	r3, r7, #12
 8004316:	2224      	movs	r2, #36	@ 0x24
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f008 fd42 	bl	800cda4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004320:	463b      	mov	r3, r7
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800432a:	4b21      	ldr	r3, [pc, #132]	@ (80043b0 <MX_TIM5_Init+0xa4>)
 800432c:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <MX_TIM5_Init+0xa8>)
 800432e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004330:	4b1f      	ldr	r3, [pc, #124]	@ (80043b0 <MX_TIM5_Init+0xa4>)
 8004332:	2200      	movs	r2, #0
 8004334:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004336:	4b1e      	ldr	r3, [pc, #120]	@ (80043b0 <MX_TIM5_Init+0xa4>)
 8004338:	2200      	movs	r2, #0
 800433a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800433c:	4b1c      	ldr	r3, [pc, #112]	@ (80043b0 <MX_TIM5_Init+0xa4>)
 800433e:	f04f 32ff 	mov.w	r2, #4294967295
 8004342:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004344:	4b1a      	ldr	r3, [pc, #104]	@ (80043b0 <MX_TIM5_Init+0xa4>)
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800434a:	4b19      	ldr	r3, [pc, #100]	@ (80043b0 <MX_TIM5_Init+0xa4>)
 800434c:	2200      	movs	r2, #0
 800434e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004350:	2301      	movs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004358:	2301      	movs	r3, #1
 800435a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004364:	2300      	movs	r3, #0
 8004366:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004368:	2301      	movs	r3, #1
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800436c:	2300      	movs	r3, #0
 800436e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004374:	f107 030c 	add.w	r3, r7, #12
 8004378:	4619      	mov	r1, r3
 800437a:	480d      	ldr	r0, [pc, #52]	@ (80043b0 <MX_TIM5_Init+0xa4>)
 800437c:	f005 f936 	bl	80095ec <HAL_TIM_Encoder_Init>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8004386:	f7ff fcd9 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800438a:	2300      	movs	r3, #0
 800438c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004392:	463b      	mov	r3, r7
 8004394:	4619      	mov	r1, r3
 8004396:	4806      	ldr	r0, [pc, #24]	@ (80043b0 <MX_TIM5_Init+0xa4>)
 8004398:	f007 f80c 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80043a2:	f7ff fccb 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80043a6:	bf00      	nop
 80043a8:	3730      	adds	r7, #48	@ 0x30
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000528 	.word	0x20000528
 80043b4:	40000c00 	.word	0x40000c00

080043b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043c8:	4b14      	ldr	r3, [pc, #80]	@ (800441c <MX_TIM6_Init+0x64>)
 80043ca:	4a15      	ldr	r2, [pc, #84]	@ (8004420 <MX_TIM6_Init+0x68>)
 80043cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80043ce:	4b13      	ldr	r3, [pc, #76]	@ (800441c <MX_TIM6_Init+0x64>)
 80043d0:	224f      	movs	r2, #79	@ 0x4f
 80043d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d4:	4b11      	ldr	r3, [pc, #68]	@ (800441c <MX_TIM6_Init+0x64>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 80043da:	4b10      	ldr	r3, [pc, #64]	@ (800441c <MX_TIM6_Init+0x64>)
 80043dc:	2213      	movs	r2, #19
 80043de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043e0:	4b0e      	ldr	r3, [pc, #56]	@ (800441c <MX_TIM6_Init+0x64>)
 80043e2:	2280      	movs	r2, #128	@ 0x80
 80043e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043e6:	480d      	ldr	r0, [pc, #52]	@ (800441c <MX_TIM6_Init+0x64>)
 80043e8:	f004 fb4a 	bl	8008a80 <HAL_TIM_Base_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80043f2:	f7ff fca3 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80043f6:	2320      	movs	r3, #32
 80043f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4806      	ldr	r0, [pc, #24]	@ (800441c <MX_TIM6_Init+0x64>)
 8004404:	f006 ffd6 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800440e:	f7ff fc95 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000574 	.word	0x20000574
 8004420:	40001000 	.word	0x40001000

08004424 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004434:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <MX_TIM7_Init+0x64>)
 8004436:	4a15      	ldr	r2, [pc, #84]	@ (800448c <MX_TIM7_Init+0x68>)
 8004438:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800443a:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <MX_TIM7_Init+0x64>)
 800443c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8004440:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004442:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <MX_TIM7_Init+0x64>)
 8004444:	2200      	movs	r2, #0
 8004446:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004448:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <MX_TIM7_Init+0x64>)
 800444a:	2209      	movs	r2, #9
 800444c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800444e:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <MX_TIM7_Init+0x64>)
 8004450:	2280      	movs	r2, #128	@ 0x80
 8004452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004454:	480c      	ldr	r0, [pc, #48]	@ (8004488 <MX_TIM7_Init+0x64>)
 8004456:	f004 fb13 	bl	8008a80 <HAL_TIM_Base_Init>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004460:	f7ff fc6c 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004464:	2300      	movs	r3, #0
 8004466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4805      	ldr	r0, [pc, #20]	@ (8004488 <MX_TIM7_Init+0x64>)
 8004472:	f006 ff9f 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800447c:	f7ff fc5e 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200005c0 	.word	0x200005c0
 800448c:	40001400 	.word	0x40001400

08004490 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b09a      	sub	sp, #104	@ 0x68
 8004494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004496:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	609a      	str	r2, [r3, #8]
 80044a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	611a      	str	r2, [r3, #16]
 80044c0:	615a      	str	r2, [r3, #20]
 80044c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	222c      	movs	r2, #44	@ 0x2c
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f008 fc6a 	bl	800cda4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80044d0:	4b3e      	ldr	r3, [pc, #248]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80044d2:	4a3f      	ldr	r2, [pc, #252]	@ (80045d0 <MX_TIM15_Init+0x140>)
 80044d4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 80044d6:	4b3d      	ldr	r3, [pc, #244]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80044d8:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80044dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044de:	4b3b      	ldr	r3, [pc, #236]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80044e4:	4b39      	ldr	r3, [pc, #228]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80044e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ec:	4b37      	ldr	r3, [pc, #220]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80044f2:	4b36      	ldr	r3, [pc, #216]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044f8:	4b34      	ldr	r3, [pc, #208]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80044fe:	4833      	ldr	r0, [pc, #204]	@ (80045cc <MX_TIM15_Init+0x13c>)
 8004500:	f004 fabe 	bl	8008a80 <HAL_TIM_Base_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800450a:	f7ff fc17 	bl	8003d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800450e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004512:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004514:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004518:	4619      	mov	r1, r3
 800451a:	482c      	ldr	r0, [pc, #176]	@ (80045cc <MX_TIM15_Init+0x13c>)
 800451c:	f005 fec0 	bl	800a2a0 <HAL_TIM_ConfigClockSource>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 8004526:	f7ff fc09 	bl	8003d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800452a:	4828      	ldr	r0, [pc, #160]	@ (80045cc <MX_TIM15_Init+0x13c>)
 800452c:	f004 fc66 	bl	8008dfc <HAL_TIM_PWM_Init>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8004536:	f7ff fc01 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800453a:	2300      	movs	r3, #0
 800453c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800453e:	2300      	movs	r3, #0
 8004540:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004542:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004546:	4619      	mov	r1, r3
 8004548:	4820      	ldr	r0, [pc, #128]	@ (80045cc <MX_TIM15_Init+0x13c>)
 800454a:	f006 ff33 	bl	800b3b4 <HAL_TIMEx_MasterConfigSynchronization>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8004554:	f7ff fbf2 	bl	8003d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004558:	2360      	movs	r3, #96	@ 0x60
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004560:	2300      	movs	r3, #0
 8004562:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004564:	2300      	movs	r3, #0
 8004566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004568:	2300      	movs	r3, #0
 800456a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800456c:	2300      	movs	r3, #0
 800456e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004570:	2300      	movs	r3, #0
 8004572:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004574:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004578:	2200      	movs	r2, #0
 800457a:	4619      	mov	r1, r3
 800457c:	4813      	ldr	r0, [pc, #76]	@ (80045cc <MX_TIM15_Init+0x13c>)
 800457e:	f005 fbbd 	bl	8009cfc <HAL_TIM_PWM_ConfigChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004588:	f7ff fbd8 	bl	8003d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4807      	ldr	r0, [pc, #28]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80045b0:	f007 f856 	bl	800b660 <HAL_TIMEx_ConfigBreakDeadTime>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80045ba:	f7ff fbbf 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80045be:	4803      	ldr	r0, [pc, #12]	@ (80045cc <MX_TIM15_Init+0x13c>)
 80045c0:	f000 f920 	bl	8004804 <HAL_TIM_MspPostInit>

}
 80045c4:	bf00      	nop
 80045c6:	3768      	adds	r7, #104	@ 0x68
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	2000060c 	.word	0x2000060c
 80045d0:	40014000 	.word	0x40014000

080045d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	@ 0x38
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f4:	d146      	bne.n	8004684 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045f6:	4b53      	ldr	r3, [pc, #332]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fa:	4a52      	ldr	r2, [pc, #328]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6593      	str	r3, [r2, #88]	@ 0x58
 8004602:	4b50      	ldr	r3, [pc, #320]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	623b      	str	r3, [r7, #32]
 800460c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800460e:	4b4d      	ldr	r3, [pc, #308]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004612:	4a4c      	ldr	r2, [pc, #304]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800461a:	4b4a      	ldr	r3, [pc, #296]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004626:	4b47      	ldr	r3, [pc, #284]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462a:	4a46      	ldr	r2, [pc, #280]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004632:	4b44      	ldr	r3, [pc, #272]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800463e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	2302      	movs	r3, #2
 8004646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464c:	2300      	movs	r3, #0
 800464e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004650:	2301      	movs	r3, #1
 8004652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800465e:	f000 fed9 	bl	8005414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004662:	2308      	movs	r3, #8
 8004664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004666:	2302      	movs	r3, #2
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466a:	2300      	movs	r3, #0
 800466c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466e:	2300      	movs	r3, #0
 8004670:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004672:	2301      	movs	r3, #1
 8004674:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800467a:	4619      	mov	r1, r3
 800467c:	4832      	ldr	r0, [pc, #200]	@ (8004748 <HAL_TIM_Encoder_MspInit+0x174>)
 800467e:	f000 fec9 	bl	8005414 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004682:	e05b      	b.n	800473c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a30      	ldr	r2, [pc, #192]	@ (800474c <HAL_TIM_Encoder_MspInit+0x178>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d128      	bne.n	80046e0 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800468e:	4b2d      	ldr	r3, [pc, #180]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004692:	4a2c      	ldr	r2, [pc, #176]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	6593      	str	r3, [r2, #88]	@ 0x58
 800469a:	4b2a      	ldr	r3, [pc, #168]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80046a6:	4b27      	ldr	r3, [pc, #156]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 80046a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046aa:	4a26      	ldr	r2, [pc, #152]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 80046ac:	f043 0310 	orr.w	r3, r3, #16
 80046b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046b2:	4b24      	ldr	r3, [pc, #144]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 80046b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80046be:	2318      	movs	r3, #24
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ca:	2300      	movs	r3, #0
 80046cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046ce:	2302      	movs	r3, #2
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046d6:	4619      	mov	r1, r3
 80046d8:	481d      	ldr	r0, [pc, #116]	@ (8004750 <HAL_TIM_Encoder_MspInit+0x17c>)
 80046da:	f000 fe9b 	bl	8005414 <HAL_GPIO_Init>
}
 80046de:	e02d      	b.n	800473c <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <HAL_TIM_Encoder_MspInit+0x180>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d128      	bne.n	800473c <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80046ea:	4b16      	ldr	r3, [pc, #88]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	4a15      	ldr	r2, [pc, #84]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 80046f0:	f043 0308 	orr.w	r3, r3, #8
 80046f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f6:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004702:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004706:	4a0f      	ldr	r2, [pc, #60]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <HAL_TIM_Encoder_MspInit+0x170>)
 8004710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800471a:	2303      	movs	r3, #3
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004726:	2300      	movs	r3, #0
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800472a:	2302      	movs	r3, #2
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800472e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004732:	4619      	mov	r1, r3
 8004734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004738:	f000 fe6c 	bl	8005414 <HAL_GPIO_Init>
}
 800473c:	bf00      	nop
 800473e:	3738      	adds	r7, #56	@ 0x38
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000
 8004748:	48000400 	.word	0x48000400
 800474c:	40000400 	.word	0x40000400
 8004750:	48001000 	.word	0x48001000
 8004754:	40000c00 	.word	0x40000c00

08004758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a23      	ldr	r2, [pc, #140]	@ (80047f4 <HAL_TIM_Base_MspInit+0x9c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d114      	bne.n	8004794 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800476a:	4b23      	ldr	r3, [pc, #140]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 800476c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476e:	4a22      	ldr	r2, [pc, #136]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 8004770:	f043 0310 	orr.w	r3, r3, #16
 8004774:	6593      	str	r3, [r2, #88]	@ 0x58
 8004776:	4b20      	ldr	r3, [pc, #128]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	2100      	movs	r1, #0
 8004786:	2036      	movs	r0, #54	@ 0x36
 8004788:	f000 faae 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800478c:	2036      	movs	r0, #54	@ 0x36
 800478e:	f000 fad7 	bl	8004d40 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004792:	e02a      	b.n	80047ea <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_TIM_Base_MspInit+0xa4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d114      	bne.n	80047c8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800479e:	4b16      	ldr	r3, [pc, #88]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a2:	4a15      	ldr	r2, [pc, #84]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 80047a4:	f043 0320 	orr.w	r3, r3, #32
 80047a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80047aa:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	2100      	movs	r1, #0
 80047ba:	2037      	movs	r0, #55	@ 0x37
 80047bc:	f000 fa94 	bl	8004ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80047c0:	2037      	movs	r0, #55	@ 0x37
 80047c2:	f000 fabd 	bl	8004d40 <HAL_NVIC_EnableIRQ>
}
 80047c6:	e010      	b.n	80047ea <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004800 <HAL_TIM_Base_MspInit+0xa8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10b      	bne.n	80047ea <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80047d2:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 80047d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d6:	4a08      	ldr	r2, [pc, #32]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_TIM_Base_MspInit+0xa0>)
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40001000 	.word	0x40001000
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40001400 	.word	0x40001400
 8004800:	40014000 	.word	0x40014000

08004804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	@ 0x28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480c:	f107 0314 	add.w	r3, r7, #20
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a20      	ldr	r2, [pc, #128]	@ (80048a4 <HAL_TIM_MspPostInit+0xa0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d139      	bne.n	800489a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004826:	4b20      	ldr	r3, [pc, #128]	@ (80048a8 <HAL_TIM_MspPostInit+0xa4>)
 8004828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482a:	4a1f      	ldr	r2, [pc, #124]	@ (80048a8 <HAL_TIM_MspPostInit+0xa4>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004832:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <HAL_TIM_MspPostInit+0xa4>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483e:	4b1a      	ldr	r3, [pc, #104]	@ (80048a8 <HAL_TIM_MspPostInit+0xa4>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	4a19      	ldr	r2, [pc, #100]	@ (80048a8 <HAL_TIM_MspPostInit+0xa4>)
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800484a:	4b17      	ldr	r3, [pc, #92]	@ (80048a8 <HAL_TIM_MspPostInit+0xa4>)
 800484c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004856:	2304      	movs	r3, #4
 8004858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485a:	2302      	movs	r3, #2
 800485c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8004866:	230e      	movs	r3, #14
 8004868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800486a:	f107 0314 	add.w	r3, r7, #20
 800486e:	4619      	mov	r1, r3
 8004870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004874:	f000 fdce 	bl	8005414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800487c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487e:	2302      	movs	r3, #2
 8004880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800488a:	230e      	movs	r3, #14
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800488e:	f107 0314 	add.w	r3, r7, #20
 8004892:	4619      	mov	r1, r3
 8004894:	4805      	ldr	r0, [pc, #20]	@ (80048ac <HAL_TIM_MspPostInit+0xa8>)
 8004896:	f000 fdbd 	bl	8005414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800489a:	bf00      	nop
 800489c:	3728      	adds	r7, #40	@ 0x28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40021000 	.word	0x40021000
 80048ac:	48000400 	.word	0x48000400

080048b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048b4:	4b14      	ldr	r3, [pc, #80]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048b6:	4a15      	ldr	r2, [pc, #84]	@ (800490c <MX_USART1_UART_Init+0x5c>)
 80048b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048ba:	4b13      	ldr	r3, [pc, #76]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048c2:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048d6:	220c      	movs	r2, #12
 80048d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048da:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048dc:	2200      	movs	r2, #0
 80048de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e0:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048e6:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048f2:	4805      	ldr	r0, [pc, #20]	@ (8004908 <MX_USART1_UART_Init+0x58>)
 80048f4:	f007 f80a 	bl	800b90c <HAL_UART_Init>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80048fe:	f7ff fa1d 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000658 	.word	0x20000658
 800490c:	40013800 	.word	0x40013800

08004910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b0ac      	sub	sp, #176	@ 0xb0
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004928:	f107 0314 	add.w	r3, r7, #20
 800492c:	2288      	movs	r2, #136	@ 0x88
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f008 fa37 	bl	800cda4 <memset>
  if(uartHandle->Instance==USART1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a21      	ldr	r2, [pc, #132]	@ (80049c0 <HAL_UART_MspInit+0xb0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d13a      	bne.n	80049b6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004944:	2300      	movs	r3, #0
 8004946:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	4618      	mov	r0, r3
 800494e:	f002 f99d 	bl	8006c8c <HAL_RCCEx_PeriphCLKConfig>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004958:	f7ff f9f0 	bl	8003d3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800495c:	4b19      	ldr	r3, [pc, #100]	@ (80049c4 <HAL_UART_MspInit+0xb4>)
 800495e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004960:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <HAL_UART_MspInit+0xb4>)
 8004962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004966:	6613      	str	r3, [r2, #96]	@ 0x60
 8004968:	4b16      	ldr	r3, [pc, #88]	@ (80049c4 <HAL_UART_MspInit+0xb4>)
 800496a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004974:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <HAL_UART_MspInit+0xb4>)
 8004976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004978:	4a12      	ldr	r2, [pc, #72]	@ (80049c4 <HAL_UART_MspInit+0xb4>)
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004980:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <HAL_UART_MspInit+0xb4>)
 8004982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800498c:	23c0      	movs	r3, #192	@ 0xc0
 800498e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004992:	2302      	movs	r3, #2
 8004994:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499e:	2303      	movs	r3, #3
 80049a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049a4:	2307      	movs	r3, #7
 80049a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80049ae:	4619      	mov	r1, r3
 80049b0:	4805      	ldr	r0, [pc, #20]	@ (80049c8 <HAL_UART_MspInit+0xb8>)
 80049b2:	f000 fd2f 	bl	8005414 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80049b6:	bf00      	nop
 80049b8:	37b0      	adds	r7, #176	@ 0xb0
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40013800 	.word	0x40013800
 80049c4:	40021000 	.word	0x40021000
 80049c8:	48000400 	.word	0x48000400

080049cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80049cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049d0:	f7ff fbe0 	bl	8004194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049d4:	480c      	ldr	r0, [pc, #48]	@ (8004a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80049d6:	490d      	ldr	r1, [pc, #52]	@ (8004a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80049d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a10 <LoopForever+0xe>)
  movs r3, #0
 80049da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049dc:	e002      	b.n	80049e4 <LoopCopyDataInit>

080049de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049e2:	3304      	adds	r3, #4

080049e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049e8:	d3f9      	bcc.n	80049de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004a18 <LoopForever+0x16>)
  movs r3, #0
 80049ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049f0:	e001      	b.n	80049f6 <LoopFillZerobss>

080049f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049f4:	3204      	adds	r2, #4

080049f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049f8:	d3fb      	bcc.n	80049f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049fa:	f008 fa37 	bl	800ce6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049fe:	f7ff f917 	bl	8003c30 <main>

08004a02 <LoopForever>:

LoopForever:
    b LoopForever
 8004a02:	e7fe      	b.n	8004a02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004a10:	0800e2b0 	.word	0x0800e2b0
  ldr r2, =_sbss
 8004a14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004a18:	20000830 	.word	0x20000830

08004a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a1c:	e7fe      	b.n	8004a1c <ADC1_2_IRQHandler>

08004a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a28:	2003      	movs	r0, #3
 8004a2a:	f000 f93d 	bl	8004ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a2e:	200f      	movs	r0, #15
 8004a30:	f000 f80e 	bl	8004a50 <HAL_InitTick>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	71fb      	strb	r3, [r7, #7]
 8004a3e:	e001      	b.n	8004a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a40:	f7ff fa7e 	bl	8003f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a44:	79fb      	ldrb	r3, [r7, #7]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004a5c:	4b17      	ldr	r3, [pc, #92]	@ (8004abc <HAL_InitTick+0x6c>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d023      	beq.n	8004aac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004a64:	4b16      	ldr	r3, [pc, #88]	@ (8004ac0 <HAL_InitTick+0x70>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b14      	ldr	r3, [pc, #80]	@ (8004abc <HAL_InitTick+0x6c>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f978 	bl	8004d70 <HAL_SYSTICK_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b0f      	cmp	r3, #15
 8004a8a:	d809      	bhi.n	8004aa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	f000 f928 	bl	8004ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a98:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <HAL_InitTick+0x74>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e007      	b.n	8004ab0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	e004      	b.n	8004ab0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	e001      	b.n	8004ab0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000018 	.word	0x20000018
 8004ac0:	20000010 	.word	0x20000010
 8004ac4:	20000014 	.word	0x20000014

08004ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <HAL_IncTick+0x20>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <HAL_IncTick+0x24>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	4a04      	ldr	r2, [pc, #16]	@ (8004aec <HAL_IncTick+0x24>)
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000018 	.word	0x20000018
 8004aec:	200006e0 	.word	0x200006e0

08004af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return uwTick;
 8004af4:	4b03      	ldr	r3, [pc, #12]	@ (8004b04 <HAL_GetTick+0x14>)
 8004af6:	681b      	ldr	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	200006e0 	.word	0x200006e0

08004b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b18:	4b0c      	ldr	r3, [pc, #48]	@ (8004b4c <__NVIC_SetPriorityGrouping+0x44>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b24:	4013      	ands	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b3a:	4a04      	ldr	r2, [pc, #16]	@ (8004b4c <__NVIC_SetPriorityGrouping+0x44>)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	60d3      	str	r3, [r2, #12]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b54:	4b04      	ldr	r3, [pc, #16]	@ (8004b68 <__NVIC_GetPriorityGrouping+0x18>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	f003 0307 	and.w	r3, r3, #7
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	db0b      	blt.n	8004b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	f003 021f 	and.w	r2, r3, #31
 8004b84:	4907      	ldr	r1, [pc, #28]	@ (8004ba4 <__NVIC_EnableIRQ+0x38>)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	e000e100 	.word	0xe000e100

08004ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	db0a      	blt.n	8004bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	490c      	ldr	r1, [pc, #48]	@ (8004bf4 <__NVIC_SetPriority+0x4c>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bd0:	e00a      	b.n	8004be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4908      	ldr	r1, [pc, #32]	@ (8004bf8 <__NVIC_SetPriority+0x50>)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	3b04      	subs	r3, #4
 8004be0:	0112      	lsls	r2, r2, #4
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	440b      	add	r3, r1
 8004be6:	761a      	strb	r2, [r3, #24]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000e100 	.word	0xe000e100
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b089      	sub	sp, #36	@ 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f1c3 0307 	rsb	r3, r3, #7
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	bf28      	it	cs
 8004c1a:	2304      	movcs	r3, #4
 8004c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3304      	adds	r3, #4
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d902      	bls.n	8004c2c <NVIC_EncodePriority+0x30>
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3b03      	subs	r3, #3
 8004c2a:	e000      	b.n	8004c2e <NVIC_EncodePriority+0x32>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c30:	f04f 32ff 	mov.w	r2, #4294967295
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	401a      	ands	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c44:	f04f 31ff 	mov.w	r1, #4294967295
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	43d9      	mvns	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c54:	4313      	orrs	r3, r2
         );
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3724      	adds	r7, #36	@ 0x24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c74:	d301      	bcc.n	8004c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c76:	2301      	movs	r3, #1
 8004c78:	e00f      	b.n	8004c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <SysTick_Config+0x40>)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c82:	210f      	movs	r1, #15
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	f7ff ff8e 	bl	8004ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <SysTick_Config+0x40>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c92:	4b04      	ldr	r3, [pc, #16]	@ (8004ca4 <SysTick_Config+0x40>)
 8004c94:	2207      	movs	r2, #7
 8004c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	e000e010 	.word	0xe000e010

08004ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b07      	cmp	r3, #7
 8004cb4:	d00f      	beq.n	8004cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b06      	cmp	r3, #6
 8004cba:	d00c      	beq.n	8004cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	d009      	beq.n	8004cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d006      	beq.n	8004cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d003      	beq.n	8004cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cce:	21a6      	movs	r1, #166	@ 0xa6
 8004cd0:	4804      	ldr	r0, [pc, #16]	@ (8004ce4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004cd2:	f7ff f84b 	bl	8003d6c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff ff16 	bl	8004b08 <__NVIC_SetPriorityGrouping>
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	0800df7c 	.word	0x0800df7c

08004ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b0f      	cmp	r3, #15
 8004cfe:	d903      	bls.n	8004d08 <HAL_NVIC_SetPriority+0x20>
 8004d00:	21be      	movs	r1, #190	@ 0xbe
 8004d02:	480e      	ldr	r0, [pc, #56]	@ (8004d3c <HAL_NVIC_SetPriority+0x54>)
 8004d04:	f7ff f832 	bl	8003d6c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b0f      	cmp	r3, #15
 8004d0c:	d903      	bls.n	8004d16 <HAL_NVIC_SetPriority+0x2e>
 8004d0e:	21bf      	movs	r1, #191	@ 0xbf
 8004d10:	480a      	ldr	r0, [pc, #40]	@ (8004d3c <HAL_NVIC_SetPriority+0x54>)
 8004d12:	f7ff f82b 	bl	8003d6c <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d16:	f7ff ff1b 	bl	8004b50 <__NVIC_GetPriorityGrouping>
 8004d1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	6978      	ldr	r0, [r7, #20]
 8004d22:	f7ff ff6b 	bl	8004bfc <NVIC_EncodePriority>
 8004d26:	4602      	mov	r2, r0
 8004d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff ff3a 	bl	8004ba8 <__NVIC_SetPriority>
}
 8004d34:	bf00      	nop
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	0800df7c 	.word	0x0800df7c

08004d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da03      	bge.n	8004d5a <HAL_NVIC_EnableIRQ+0x1a>
 8004d52:	21d2      	movs	r1, #210	@ 0xd2
 8004d54:	4805      	ldr	r0, [pc, #20]	@ (8004d6c <HAL_NVIC_EnableIRQ+0x2c>)
 8004d56:	f7ff f809 	bl	8003d6c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff04 	bl	8004b6c <__NVIC_EnableIRQ>
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	0800df7c 	.word	0x0800df7c

08004d70 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff73 	bl	8004c64 <SysTick_Config>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e19d      	b.n	80050d6 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a79      	ldr	r2, [pc, #484]	@ (8004f84 <HAL_DMA_Init+0x1fc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d044      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a77      	ldr	r2, [pc, #476]	@ (8004f88 <HAL_DMA_Init+0x200>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d03f      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a76      	ldr	r2, [pc, #472]	@ (8004f8c <HAL_DMA_Init+0x204>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d03a      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a74      	ldr	r2, [pc, #464]	@ (8004f90 <HAL_DMA_Init+0x208>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d035      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a73      	ldr	r2, [pc, #460]	@ (8004f94 <HAL_DMA_Init+0x20c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d030      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a71      	ldr	r2, [pc, #452]	@ (8004f98 <HAL_DMA_Init+0x210>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d02b      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a70      	ldr	r2, [pc, #448]	@ (8004f9c <HAL_DMA_Init+0x214>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d026      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa0 <HAL_DMA_Init+0x218>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d021      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6d      	ldr	r2, [pc, #436]	@ (8004fa4 <HAL_DMA_Init+0x21c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d01c      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a6b      	ldr	r2, [pc, #428]	@ (8004fa8 <HAL_DMA_Init+0x220>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d017      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a6a      	ldr	r2, [pc, #424]	@ (8004fac <HAL_DMA_Init+0x224>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d012      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a68      	ldr	r2, [pc, #416]	@ (8004fb0 <HAL_DMA_Init+0x228>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00d      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a67      	ldr	r2, [pc, #412]	@ (8004fb4 <HAL_DMA_Init+0x22c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d008      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a65      	ldr	r2, [pc, #404]	@ (8004fb8 <HAL_DMA_Init+0x230>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <HAL_DMA_Init+0xa6>
 8004e26:	21a5      	movs	r1, #165	@ 0xa5
 8004e28:	4864      	ldr	r0, [pc, #400]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004e2a:	f7fe ff9f 	bl	8003d6c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_DMA_Init+0xc8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d008      	beq.n	8004e50 <HAL_DMA_Init+0xc8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e46:	d003      	beq.n	8004e50 <HAL_DMA_Init+0xc8>
 8004e48:	21a6      	movs	r1, #166	@ 0xa6
 8004e4a:	485c      	ldr	r0, [pc, #368]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004e4c:	f7fe ff8e 	bl	8003d6c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b40      	cmp	r3, #64	@ 0x40
 8004e56:	d007      	beq.n	8004e68 <HAL_DMA_Init+0xe0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_DMA_Init+0xe0>
 8004e60:	21a7      	movs	r1, #167	@ 0xa7
 8004e62:	4856      	ldr	r0, [pc, #344]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004e64:	f7fe ff82 	bl	8003d6c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b80      	cmp	r3, #128	@ 0x80
 8004e6e:	d007      	beq.n	8004e80 <HAL_DMA_Init+0xf8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_DMA_Init+0xf8>
 8004e78:	21a8      	movs	r1, #168	@ 0xa8
 8004e7a:	4850      	ldr	r0, [pc, #320]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004e7c:	f7fe ff76 	bl	8003d6c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <HAL_DMA_Init+0x11c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e90:	d008      	beq.n	8004ea4 <HAL_DMA_Init+0x11c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e9a:	d003      	beq.n	8004ea4 <HAL_DMA_Init+0x11c>
 8004e9c:	21a9      	movs	r1, #169	@ 0xa9
 8004e9e:	4847      	ldr	r0, [pc, #284]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004ea0:	f7fe ff64 	bl	8003d6c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00d      	beq.n	8004ec8 <HAL_DMA_Init+0x140>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb4:	d008      	beq.n	8004ec8 <HAL_DMA_Init+0x140>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ebe:	d003      	beq.n	8004ec8 <HAL_DMA_Init+0x140>
 8004ec0:	21aa      	movs	r1, #170	@ 0xaa
 8004ec2:	483e      	ldr	r0, [pc, #248]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004ec4:	f7fe ff52 	bl	8003d6c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_DMA_Init+0x158>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d003      	beq.n	8004ee0 <HAL_DMA_Init+0x158>
 8004ed8:	21ab      	movs	r1, #171	@ 0xab
 8004eda:	4838      	ldr	r0, [pc, #224]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004edc:	f7fe ff46 	bl	8003d6c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d012      	beq.n	8004f0e <HAL_DMA_Init+0x186>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef0:	d00d      	beq.n	8004f0e <HAL_DMA_Init+0x186>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004efa:	d008      	beq.n	8004f0e <HAL_DMA_Init+0x186>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f04:	d003      	beq.n	8004f0e <HAL_DMA_Init+0x186>
 8004f06:	21ac      	movs	r1, #172	@ 0xac
 8004f08:	482c      	ldr	r0, [pc, #176]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004f0a:	f7fe ff2f 	bl	8003d6c <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01f      	beq.n	8004f56 <HAL_DMA_Init+0x1ce>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d01b      	beq.n	8004f56 <HAL_DMA_Init+0x1ce>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d017      	beq.n	8004f56 <HAL_DMA_Init+0x1ce>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d013      	beq.n	8004f56 <HAL_DMA_Init+0x1ce>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d00f      	beq.n	8004f56 <HAL_DMA_Init+0x1ce>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d00b      	beq.n	8004f56 <HAL_DMA_Init+0x1ce>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b06      	cmp	r3, #6
 8004f44:	d007      	beq.n	8004f56 <HAL_DMA_Init+0x1ce>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b07      	cmp	r3, #7
 8004f4c:	d003      	beq.n	8004f56 <HAL_DMA_Init+0x1ce>
 8004f4e:	21ae      	movs	r1, #174	@ 0xae
 8004f50:	481a      	ldr	r0, [pc, #104]	@ (8004fbc <HAL_DMA_Init+0x234>)
 8004f52:	f7fe ff0b 	bl	8003d6c <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4b18      	ldr	r3, [pc, #96]	@ (8004fc0 <HAL_DMA_Init+0x238>)
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d836      	bhi.n	8004fd0 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	4b16      	ldr	r3, [pc, #88]	@ (8004fc4 <HAL_DMA_Init+0x23c>)
 8004f6a:	4413      	add	r3, r2
 8004f6c:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <HAL_DMA_Init+0x240>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	009a      	lsls	r2, r3, #2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a13      	ldr	r2, [pc, #76]	@ (8004fcc <HAL_DMA_Init+0x244>)
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f80:	e035      	b.n	8004fee <HAL_DMA_Init+0x266>
 8004f82:	bf00      	nop
 8004f84:	40020008 	.word	0x40020008
 8004f88:	4002001c 	.word	0x4002001c
 8004f8c:	40020030 	.word	0x40020030
 8004f90:	40020044 	.word	0x40020044
 8004f94:	40020058 	.word	0x40020058
 8004f98:	4002006c 	.word	0x4002006c
 8004f9c:	40020080 	.word	0x40020080
 8004fa0:	40020408 	.word	0x40020408
 8004fa4:	4002041c 	.word	0x4002041c
 8004fa8:	40020430 	.word	0x40020430
 8004fac:	40020444 	.word	0x40020444
 8004fb0:	40020458 	.word	0x40020458
 8004fb4:	4002046c 	.word	0x4002046c
 8004fb8:	40020480 	.word	0x40020480
 8004fbc:	0800dfb8 	.word	0x0800dfb8
 8004fc0:	40020407 	.word	0x40020407
 8004fc4:	bffdfff8 	.word	0xbffdfff8
 8004fc8:	cccccccd 	.word	0xcccccccd
 8004fcc:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b42      	ldr	r3, [pc, #264]	@ (80050e0 <HAL_DMA_Init+0x358>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	4a42      	ldr	r2, [pc, #264]	@ (80050e4 <HAL_DMA_Init+0x35c>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	009a      	lsls	r2, r3, #2
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3f      	ldr	r2, [pc, #252]	@ (80050e8 <HAL_DMA_Init+0x360>)
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005008:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800501e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800502a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005048:	d039      	beq.n	80050be <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	4a27      	ldr	r2, [pc, #156]	@ (80050ec <HAL_DMA_Init+0x364>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d11a      	bne.n	800508a <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005054:	4b26      	ldr	r3, [pc, #152]	@ (80050f0 <HAL_DMA_Init+0x368>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505c:	f003 031c 	and.w	r3, r3, #28
 8005060:	210f      	movs	r1, #15
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	4921      	ldr	r1, [pc, #132]	@ (80050f0 <HAL_DMA_Init+0x368>)
 800506a:	4013      	ands	r3, r2
 800506c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800506e:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <HAL_DMA_Init+0x368>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6859      	ldr	r1, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	f003 031c 	and.w	r3, r3, #28
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	491b      	ldr	r1, [pc, #108]	@ (80050f0 <HAL_DMA_Init+0x368>)
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]
 8005088:	e019      	b.n	80050be <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800508a:	4b1a      	ldr	r3, [pc, #104]	@ (80050f4 <HAL_DMA_Init+0x36c>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005092:	f003 031c 	and.w	r3, r3, #28
 8005096:	210f      	movs	r1, #15
 8005098:	fa01 f303 	lsl.w	r3, r1, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	4915      	ldr	r1, [pc, #84]	@ (80050f4 <HAL_DMA_Init+0x36c>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80050a4:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <HAL_DMA_Init+0x36c>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6859      	ldr	r1, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b0:	f003 031c 	and.w	r3, r3, #28
 80050b4:	fa01 f303 	lsl.w	r3, r1, r3
 80050b8:	490e      	ldr	r1, [pc, #56]	@ (80050f4 <HAL_DMA_Init+0x36c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	bffdfbf8 	.word	0xbffdfbf8
 80050e4:	cccccccd 	.word	0xcccccccd
 80050e8:	40020400 	.word	0x40020400
 80050ec:	40020000 	.word	0x40020000
 80050f0:	400200a8 	.word	0x400200a8
 80050f4:	400204a8 	.word	0x400204a8

080050f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_DMA_Start_IT+0x20>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005116:	d304      	bcc.n	8005122 <HAL_DMA_Start_IT+0x2a>
 8005118:	f240 11df 	movw	r1, #479	@ 0x1df
 800511c:	482c      	ldr	r0, [pc, #176]	@ (80051d0 <HAL_DMA_Start_IT+0xd8>)
 800511e:	f7fe fe25 	bl	8003d6c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_DMA_Start_IT+0x38>
 800512c:	2302      	movs	r3, #2
 800512e:	e04b      	b.n	80051c8 <HAL_DMA_Start_IT+0xd0>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d13a      	bne.n	80051ba <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f923 	bl	80053b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 020e 	orr.w	r2, r2, #14
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e00f      	b.n	80051a8 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0204 	bic.w	r2, r2, #4
 8005196:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 020a 	orr.w	r2, r2, #10
 80051a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e005      	b.n	80051c6 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
 80051c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	0800dfb8 	.word	0x0800dfb8

080051d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d005      	beq.n	80051f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2204      	movs	r2, #4
 80051f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
 80051f6:	e029      	b.n	800524c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 020e 	bic.w	r2, r2, #14
 8005206:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521c:	f003 021c 	and.w	r2, r3, #28
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f202 	lsl.w	r2, r1, r2
 800522a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4798      	blx	r3
    }
  }
  return status;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f003 031c 	and.w	r3, r3, #28
 8005276:	2204      	movs	r2, #4
 8005278:	409a      	lsls	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d026      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x7a>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d021      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d107      	bne.n	80052aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0204 	bic.w	r2, r2, #4
 80052a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	f003 021c 	and.w	r2, r3, #28
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	2104      	movs	r1, #4
 80052b8:	fa01 f202 	lsl.w	r2, r1, r2
 80052bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d071      	beq.n	80053aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80052ce:	e06c      	b.n	80053aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d4:	f003 031c 	and.w	r3, r3, #28
 80052d8:	2202      	movs	r2, #2
 80052da:	409a      	lsls	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02e      	beq.n	8005342 <HAL_DMA_IRQHandler+0xec>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d029      	beq.n	8005342 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 020a 	bic.w	r2, r2, #10
 800530a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005318:	f003 021c 	and.w	r2, r3, #28
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	2102      	movs	r1, #2
 8005322:	fa01 f202 	lsl.w	r2, r1, r2
 8005326:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d038      	beq.n	80053aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005340:	e033      	b.n	80053aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	f003 031c 	and.w	r3, r3, #28
 800534a:	2208      	movs	r2, #8
 800534c:	409a      	lsls	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4013      	ands	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02a      	beq.n	80053ac <HAL_DMA_IRQHandler+0x156>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d025      	beq.n	80053ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 020e 	bic.w	r2, r2, #14
 800536e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005374:	f003 021c 	and.w	r2, r3, #28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	2101      	movs	r1, #1
 800537e:	fa01 f202 	lsl.w	r2, r1, r2
 8005382:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
}
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c6:	f003 021c 	and.w	r2, r3, #28
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	2101      	movs	r1, #1
 80053d0:	fa01 f202 	lsl.w	r2, r1, r2
 80053d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d108      	bne.n	80053f8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053f6:	e007      	b.n	8005408 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005428:	d01f      	beq.n	800546a <HAL_GPIO_Init+0x56>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a3c      	ldr	r2, [pc, #240]	@ (8005520 <HAL_GPIO_Init+0x10c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01b      	beq.n	800546a <HAL_GPIO_Init+0x56>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a3b      	ldr	r2, [pc, #236]	@ (8005524 <HAL_GPIO_Init+0x110>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d017      	beq.n	800546a <HAL_GPIO_Init+0x56>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a3a      	ldr	r2, [pc, #232]	@ (8005528 <HAL_GPIO_Init+0x114>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <HAL_GPIO_Init+0x56>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a39      	ldr	r2, [pc, #228]	@ (800552c <HAL_GPIO_Init+0x118>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00f      	beq.n	800546a <HAL_GPIO_Init+0x56>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a38      	ldr	r2, [pc, #224]	@ (8005530 <HAL_GPIO_Init+0x11c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00b      	beq.n	800546a <HAL_GPIO_Init+0x56>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a37      	ldr	r2, [pc, #220]	@ (8005534 <HAL_GPIO_Init+0x120>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <HAL_GPIO_Init+0x56>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a36      	ldr	r2, [pc, #216]	@ (8005538 <HAL_GPIO_Init+0x124>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <HAL_GPIO_Init+0x56>
 8005462:	21aa      	movs	r1, #170	@ 0xaa
 8005464:	4835      	ldr	r0, [pc, #212]	@ (800553c <HAL_GPIO_Init+0x128>)
 8005466:	f7fe fc81 	bl	8003d6c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <HAL_GPIO_Init+0x6a>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547c:	d303      	bcc.n	8005486 <HAL_GPIO_Init+0x72>
 800547e:	21ab      	movs	r1, #171	@ 0xab
 8005480:	482e      	ldr	r0, [pc, #184]	@ (800553c <HAL_GPIO_Init+0x128>)
 8005482:	f7fe fc73 	bl	8003d6c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 823d 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b01      	cmp	r3, #1
 8005496:	f000 8238 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b11      	cmp	r3, #17
 80054a0:	f000 8233 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	f000 822e 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b12      	cmp	r3, #18
 80054b4:	f000 8229 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80054c0:	f000 8223 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80054cc:	f000 821d 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80054d8:	f000 8217 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80054e4:	f000 8211 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80054f0:	f000 820b 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80054fc:	f000 8205 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b03      	cmp	r3, #3
 8005506:	f000 8200 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b0b      	cmp	r3, #11
 8005510:	f000 81fb 	beq.w	800590a <HAL_GPIO_Init+0x4f6>
 8005514:	21ac      	movs	r1, #172	@ 0xac
 8005516:	4809      	ldr	r0, [pc, #36]	@ (800553c <HAL_GPIO_Init+0x128>)
 8005518:	f7fe fc28 	bl	8003d6c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800551c:	e1f5      	b.n	800590a <HAL_GPIO_Init+0x4f6>
 800551e:	bf00      	nop
 8005520:	48000400 	.word	0x48000400
 8005524:	48000800 	.word	0x48000800
 8005528:	48000c00 	.word	0x48000c00
 800552c:	48001000 	.word	0x48001000
 8005530:	48001400 	.word	0x48001400
 8005534:	48001800 	.word	0x48001800
 8005538:	48001c00 	.word	0x48001c00
 800553c:	0800dff0 	.word	0x0800dff0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	2101      	movs	r1, #1
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	4013      	ands	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 81d6 	beq.w	8005904 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d005      	beq.n	8005570 <HAL_GPIO_Init+0x15c>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d144      	bne.n	80055fa <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00f      	beq.n	8005598 <HAL_GPIO_Init+0x184>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d00b      	beq.n	8005598 <HAL_GPIO_Init+0x184>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d007      	beq.n	8005598 <HAL_GPIO_Init+0x184>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b03      	cmp	r3, #3
 800558e:	d003      	beq.n	8005598 <HAL_GPIO_Init+0x184>
 8005590:	21bb      	movs	r1, #187	@ 0xbb
 8005592:	489c      	ldr	r0, [pc, #624]	@ (8005804 <HAL_GPIO_Init+0x3f0>)
 8005594:	f7fe fbea 	bl	8003d6c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	2203      	movs	r2, #3
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4013      	ands	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055ce:	2201      	movs	r2, #1
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	f003 0201 	and.w	r2, r3, #1
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b03      	cmp	r3, #3
 8005604:	d118      	bne.n	8005638 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800560c:	2201      	movs	r2, #1
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4013      	ands	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	08db      	lsrs	r3, r3, #3
 8005622:	f003 0201 	and.w	r2, r3, #1
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f003 0303 	and.w	r3, r3, #3
 8005640:	2b03      	cmp	r3, #3
 8005642:	d027      	beq.n	8005694 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_GPIO_Init+0x250>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d007      	beq.n	8005664 <HAL_GPIO_Init+0x250>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x250>
 800565c:	21dc      	movs	r1, #220	@ 0xdc
 800565e:	4869      	ldr	r0, [pc, #420]	@ (8005804 <HAL_GPIO_Init+0x3f0>)
 8005660:	f7fe fb84 	bl	8003d6c <assert_failed>

        temp = GPIOx->PUPDR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4013      	ands	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d14f      	bne.n	8005740 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80056a6:	d01f      	beq.n	80056e8 <HAL_GPIO_Init+0x2d4>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a57      	ldr	r2, [pc, #348]	@ (8005808 <HAL_GPIO_Init+0x3f4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d01b      	beq.n	80056e8 <HAL_GPIO_Init+0x2d4>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a56      	ldr	r2, [pc, #344]	@ (800580c <HAL_GPIO_Init+0x3f8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d017      	beq.n	80056e8 <HAL_GPIO_Init+0x2d4>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a55      	ldr	r2, [pc, #340]	@ (8005810 <HAL_GPIO_Init+0x3fc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <HAL_GPIO_Init+0x2d4>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a54      	ldr	r2, [pc, #336]	@ (8005814 <HAL_GPIO_Init+0x400>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00f      	beq.n	80056e8 <HAL_GPIO_Init+0x2d4>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a53      	ldr	r2, [pc, #332]	@ (8005818 <HAL_GPIO_Init+0x404>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <HAL_GPIO_Init+0x2d4>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a52      	ldr	r2, [pc, #328]	@ (800581c <HAL_GPIO_Init+0x408>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <HAL_GPIO_Init+0x2d4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a51      	ldr	r2, [pc, #324]	@ (8005820 <HAL_GPIO_Init+0x40c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0x2d4>
 80056e0:	21e8      	movs	r1, #232	@ 0xe8
 80056e2:	4848      	ldr	r0, [pc, #288]	@ (8005804 <HAL_GPIO_Init+0x3f0>)
 80056e4:	f7fe fb42 	bl	8003d6c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b0f      	cmp	r3, #15
 80056ee:	d903      	bls.n	80056f8 <HAL_GPIO_Init+0x2e4>
 80056f0:	21e9      	movs	r1, #233	@ 0xe9
 80056f2:	4844      	ldr	r0, [pc, #272]	@ (8005804 <HAL_GPIO_Init+0x3f0>)
 80056f4:	f7fe fb3a 	bl	8003d6c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	08da      	lsrs	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3208      	adds	r2, #8
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	220f      	movs	r2, #15
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4013      	ands	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	08da      	lsrs	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3208      	adds	r2, #8
 800573a:	6939      	ldr	r1, [r7, #16]
 800573c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2203      	movs	r2, #3
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0203 	and.w	r2, r3, #3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80c1 	beq.w	8005904 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005782:	4b28      	ldr	r3, [pc, #160]	@ (8005824 <HAL_GPIO_Init+0x410>)
 8005784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005786:	4a27      	ldr	r2, [pc, #156]	@ (8005824 <HAL_GPIO_Init+0x410>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6613      	str	r3, [r2, #96]	@ 0x60
 800578e:	4b25      	ldr	r3, [pc, #148]	@ (8005824 <HAL_GPIO_Init+0x410>)
 8005790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800579a:	4a23      	ldr	r2, [pc, #140]	@ (8005828 <HAL_GPIO_Init+0x414>)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	3302      	adds	r3, #2
 80057a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	220f      	movs	r2, #15
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4013      	ands	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057c4:	d03a      	beq.n	800583c <HAL_GPIO_Init+0x428>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005808 <HAL_GPIO_Init+0x3f4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d034      	beq.n	8005838 <HAL_GPIO_Init+0x424>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a0e      	ldr	r2, [pc, #56]	@ (800580c <HAL_GPIO_Init+0x3f8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d02e      	beq.n	8005834 <HAL_GPIO_Init+0x420>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005810 <HAL_GPIO_Init+0x3fc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d028      	beq.n	8005830 <HAL_GPIO_Init+0x41c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005814 <HAL_GPIO_Init+0x400>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d022      	beq.n	800582c <HAL_GPIO_Init+0x418>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005818 <HAL_GPIO_Init+0x404>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <HAL_GPIO_Init+0x3ea>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <HAL_GPIO_Init+0x408>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d101      	bne.n	80057fa <HAL_GPIO_Init+0x3e6>
 80057f6:	2306      	movs	r3, #6
 80057f8:	e021      	b.n	800583e <HAL_GPIO_Init+0x42a>
 80057fa:	2307      	movs	r3, #7
 80057fc:	e01f      	b.n	800583e <HAL_GPIO_Init+0x42a>
 80057fe:	2305      	movs	r3, #5
 8005800:	e01d      	b.n	800583e <HAL_GPIO_Init+0x42a>
 8005802:	bf00      	nop
 8005804:	0800dff0 	.word	0x0800dff0
 8005808:	48000400 	.word	0x48000400
 800580c:	48000800 	.word	0x48000800
 8005810:	48000c00 	.word	0x48000c00
 8005814:	48001000 	.word	0x48001000
 8005818:	48001400 	.word	0x48001400
 800581c:	48001800 	.word	0x48001800
 8005820:	48001c00 	.word	0x48001c00
 8005824:	40021000 	.word	0x40021000
 8005828:	40010000 	.word	0x40010000
 800582c:	2304      	movs	r3, #4
 800582e:	e006      	b.n	800583e <HAL_GPIO_Init+0x42a>
 8005830:	2303      	movs	r3, #3
 8005832:	e004      	b.n	800583e <HAL_GPIO_Init+0x42a>
 8005834:	2302      	movs	r3, #2
 8005836:	e002      	b.n	800583e <HAL_GPIO_Init+0x42a>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <HAL_GPIO_Init+0x42a>
 800583c:	2300      	movs	r3, #0
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	f002 0203 	and.w	r2, r2, #3
 8005844:	0092      	lsls	r2, r2, #2
 8005846:	4093      	lsls	r3, r2
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800584e:	4935      	ldr	r1, [pc, #212]	@ (8005924 <HAL_GPIO_Init+0x510>)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	089b      	lsrs	r3, r3, #2
 8005854:	3302      	adds	r3, #2
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800585c:	4b32      	ldr	r3, [pc, #200]	@ (8005928 <HAL_GPIO_Init+0x514>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	43db      	mvns	r3, r3
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4013      	ands	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005880:	4a29      	ldr	r2, [pc, #164]	@ (8005928 <HAL_GPIO_Init+0x514>)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005886:	4b28      	ldr	r3, [pc, #160]	@ (8005928 <HAL_GPIO_Init+0x514>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	43db      	mvns	r3, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005928 <HAL_GPIO_Init+0x514>)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80058b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <HAL_GPIO_Init+0x514>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058d4:	4a14      	ldr	r2, [pc, #80]	@ (8005928 <HAL_GPIO_Init+0x514>)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80058da:	4b13      	ldr	r3, [pc, #76]	@ (8005928 <HAL_GPIO_Init+0x514>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	43db      	mvns	r3, r3
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4013      	ands	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005928 <HAL_GPIO_Init+0x514>)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	3301      	adds	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	f47f ae13 	bne.w	8005540 <HAL_GPIO_Init+0x12c>
  }
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40010000 	.word	0x40010000
 8005928:	40010400 	.word	0x40010400

0800592c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005940:	d020      	beq.n	8005984 <HAL_GPIO_DeInit+0x58>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a84      	ldr	r2, [pc, #528]	@ (8005b58 <HAL_GPIO_DeInit+0x22c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01c      	beq.n	8005984 <HAL_GPIO_DeInit+0x58>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a83      	ldr	r2, [pc, #524]	@ (8005b5c <HAL_GPIO_DeInit+0x230>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d018      	beq.n	8005984 <HAL_GPIO_DeInit+0x58>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a82      	ldr	r2, [pc, #520]	@ (8005b60 <HAL_GPIO_DeInit+0x234>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d014      	beq.n	8005984 <HAL_GPIO_DeInit+0x58>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a81      	ldr	r2, [pc, #516]	@ (8005b64 <HAL_GPIO_DeInit+0x238>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d010      	beq.n	8005984 <HAL_GPIO_DeInit+0x58>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a80      	ldr	r2, [pc, #512]	@ (8005b68 <HAL_GPIO_DeInit+0x23c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00c      	beq.n	8005984 <HAL_GPIO_DeInit+0x58>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a7f      	ldr	r2, [pc, #508]	@ (8005b6c <HAL_GPIO_DeInit+0x240>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d008      	beq.n	8005984 <HAL_GPIO_DeInit+0x58>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a7e      	ldr	r2, [pc, #504]	@ (8005b70 <HAL_GPIO_DeInit+0x244>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_GPIO_DeInit+0x58>
 800597a:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 800597e:	487d      	ldr	r0, [pc, #500]	@ (8005b74 <HAL_GPIO_DeInit+0x248>)
 8005980:	f7fe f9f4 	bl	8003d6c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <HAL_GPIO_DeInit+0x6a>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005992:	f0c0 80d4 	bcc.w	8005b3e <HAL_GPIO_DeInit+0x212>
 8005996:	f240 113b 	movw	r1, #315	@ 0x13b
 800599a:	4876      	ldr	r0, [pc, #472]	@ (8005b74 <HAL_GPIO_DeInit+0x248>)
 800599c:	f7fe f9e6 	bl	8003d6c <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80059a0:	e0cd      	b.n	8005b3e <HAL_GPIO_DeInit+0x212>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80059a2:	2201      	movs	r2, #1
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	4013      	ands	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 80c0 	beq.w	8005b38 <HAL_GPIO_DeInit+0x20c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80059b8:	4a6f      	ldr	r2, [pc, #444]	@ (8005b78 <HAL_GPIO_DeInit+0x24c>)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	3302      	adds	r3, #2
 80059c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	220f      	movs	r2, #15
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4013      	ands	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80059e0:	d025      	beq.n	8005a2e <HAL_GPIO_DeInit+0x102>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a5c      	ldr	r2, [pc, #368]	@ (8005b58 <HAL_GPIO_DeInit+0x22c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <HAL_GPIO_DeInit+0xfe>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a5b      	ldr	r2, [pc, #364]	@ (8005b5c <HAL_GPIO_DeInit+0x230>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d019      	beq.n	8005a26 <HAL_GPIO_DeInit+0xfa>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005b60 <HAL_GPIO_DeInit+0x234>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_GPIO_DeInit+0xf6>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a59      	ldr	r2, [pc, #356]	@ (8005b64 <HAL_GPIO_DeInit+0x238>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00d      	beq.n	8005a1e <HAL_GPIO_DeInit+0xf2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a58      	ldr	r2, [pc, #352]	@ (8005b68 <HAL_GPIO_DeInit+0x23c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <HAL_GPIO_DeInit+0xee>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a57      	ldr	r2, [pc, #348]	@ (8005b6c <HAL_GPIO_DeInit+0x240>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <HAL_GPIO_DeInit+0xea>
 8005a12:	2306      	movs	r3, #6
 8005a14:	e00c      	b.n	8005a30 <HAL_GPIO_DeInit+0x104>
 8005a16:	2307      	movs	r3, #7
 8005a18:	e00a      	b.n	8005a30 <HAL_GPIO_DeInit+0x104>
 8005a1a:	2305      	movs	r3, #5
 8005a1c:	e008      	b.n	8005a30 <HAL_GPIO_DeInit+0x104>
 8005a1e:	2304      	movs	r3, #4
 8005a20:	e006      	b.n	8005a30 <HAL_GPIO_DeInit+0x104>
 8005a22:	2303      	movs	r3, #3
 8005a24:	e004      	b.n	8005a30 <HAL_GPIO_DeInit+0x104>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e002      	b.n	8005a30 <HAL_GPIO_DeInit+0x104>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_GPIO_DeInit+0x104>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	f002 0203 	and.w	r2, r2, #3
 8005a36:	0092      	lsls	r2, r2, #2
 8005a38:	4093      	lsls	r3, r2
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d132      	bne.n	8005aa6 <HAL_GPIO_DeInit+0x17a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005a40:	4b4e      	ldr	r3, [pc, #312]	@ (8005b7c <HAL_GPIO_DeInit+0x250>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	43db      	mvns	r3, r3
 8005a48:	494c      	ldr	r1, [pc, #304]	@ (8005b7c <HAL_GPIO_DeInit+0x250>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b7c <HAL_GPIO_DeInit+0x250>)
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	4949      	ldr	r1, [pc, #292]	@ (8005b7c <HAL_GPIO_DeInit+0x250>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005a5c:	4b47      	ldr	r3, [pc, #284]	@ (8005b7c <HAL_GPIO_DeInit+0x250>)
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	4945      	ldr	r1, [pc, #276]	@ (8005b7c <HAL_GPIO_DeInit+0x250>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005a6a:	4b44      	ldr	r3, [pc, #272]	@ (8005b7c <HAL_GPIO_DeInit+0x250>)
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	4942      	ldr	r1, [pc, #264]	@ (8005b7c <HAL_GPIO_DeInit+0x250>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	220f      	movs	r2, #15
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005a88:	4a3b      	ldr	r2, [pc, #236]	@ (8005b78 <HAL_GPIO_DeInit+0x24c>)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	3302      	adds	r3, #2
 8005a90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	43da      	mvns	r2, r3
 8005a98:	4837      	ldr	r0, [pc, #220]	@ (8005b78 <HAL_GPIO_DeInit+0x24c>)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	400a      	ands	r2, r1
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2103      	movs	r1, #3
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	08da      	lsrs	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3208      	adds	r2, #8
 8005ac2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	220f      	movs	r2, #15
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	08d2      	lsrs	r2, r2, #3
 8005ada:	4019      	ands	r1, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3208      	adds	r2, #8
 8005ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	2103      	movs	r1, #3
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	43db      	mvns	r3, r3
 8005af4:	401a      	ands	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	2101      	movs	r1, #1
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	401a      	ands	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	2103      	movs	r1, #3
 8005b18:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	401a      	ands	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b28:	2101      	movs	r1, #1
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	401a      	ands	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	fa22 f303 	lsr.w	r3, r2, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f47f af2b 	bne.w	80059a2 <HAL_GPIO_DeInit+0x76>
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	48000400 	.word	0x48000400
 8005b5c:	48000800 	.word	0x48000800
 8005b60:	48000c00 	.word	0x48000c00
 8005b64:	48001000 	.word	0x48001000
 8005b68:	48001400 	.word	0x48001400
 8005b6c:	48001800 	.word	0x48001800
 8005b70:	48001c00 	.word	0x48001c00
 8005b74:	0800dff0 	.word	0x0800dff0
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400

08005b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <HAL_GPIO_WritePin+0x20>
 8005b96:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8005b9a:	480e      	ldr	r0, [pc, #56]	@ (8005bd4 <HAL_GPIO_WritePin+0x54>)
 8005b9c:	f7fe f8e6 	bl	8003d6c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005ba0:	787b      	ldrb	r3, [r7, #1]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_GPIO_WritePin+0x36>
 8005ba6:	787b      	ldrb	r3, [r7, #1]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d004      	beq.n	8005bb6 <HAL_GPIO_WritePin+0x36>
 8005bac:	f240 11af 	movw	r1, #431	@ 0x1af
 8005bb0:	4808      	ldr	r0, [pc, #32]	@ (8005bd4 <HAL_GPIO_WritePin+0x54>)
 8005bb2:	f7fe f8db 	bl	8003d6c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005bb6:	787b      	ldrb	r3, [r7, #1]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bbc:	887a      	ldrh	r2, [r7, #2]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bc2:	e002      	b.n	8005bca <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bc4:	887a      	ldrh	r2, [r7, #2]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	0800dff0 	.word	0x0800dff0

08005bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005be2:	4b08      	ldr	r3, [pc, #32]	@ (8005c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bee:	4a05      	ldr	r2, [pc, #20]	@ (8005c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f806 	bl	8005c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40010400 	.word	0x40010400

08005c08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005c24:	4b04      	ldr	r3, [pc, #16]	@ (8005c38 <HAL_PWREx_GetVoltageRange+0x18>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40007000 	.word	0x40007000

08005c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c4a:	d007      	beq.n	8005c5c <HAL_PWREx_ControlVoltageScaling+0x20>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c52:	d003      	beq.n	8005c5c <HAL_PWREx_ControlVoltageScaling+0x20>
 8005c54:	21a7      	movs	r1, #167	@ 0xa7
 8005c56:	4826      	ldr	r0, [pc, #152]	@ (8005cf0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005c58:	f7fe f888 	bl	8003d6c <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c62:	d130      	bne.n	8005cc6 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c64:	4b23      	ldr	r3, [pc, #140]	@ (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c70:	d038      	beq.n	8005ce4 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c72:	4b20      	ldr	r3, [pc, #128]	@ (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005c7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c82:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf8 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2232      	movs	r2, #50	@ 0x32
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cfc <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	0c9b      	lsrs	r3, r3, #18
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c98:	e002      	b.n	8005ca0 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ca0:	4b14      	ldr	r3, [pc, #80]	@ (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cac:	d102      	bne.n	8005cb4 <HAL_PWREx_ControlVoltageScaling+0x78>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f2      	bne.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc0:	d110      	bne.n	8005ce4 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e00f      	b.n	8005ce6 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd2:	d007      	beq.n	8005ce4 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005cd4:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cdc:	4a05      	ldr	r2, [pc, #20]	@ (8005cf4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8005cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ce2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	0800e02c 	.word	0x0800e02c
 8005cf4:	40007000 	.word	0x40007000
 8005cf8:	20000010 	.word	0x20000010
 8005cfc:	431bde83 	.word	0x431bde83

08005d00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d102      	bne.n	8005d14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f000 bcef 	b.w	80066f2 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_OscConfig+0x2e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b1f      	cmp	r3, #31
 8005d22:	d904      	bls.n	8005d2e <HAL_RCC_OscConfig+0x2e>
 8005d24:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8005d28:	489a      	ldr	r0, [pc, #616]	@ (8005f94 <HAL_RCC_OscConfig+0x294>)
 8005d2a:	f7fe f81f 	bl	8003d6c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d2e:	4b9a      	ldr	r3, [pc, #616]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d38:	4b97      	ldr	r3, [pc, #604]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 813d 	beq.w	8005fca <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_RCC_OscConfig+0x6a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d004      	beq.n	8005d6a <HAL_RCC_OscConfig+0x6a>
 8005d60:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8005d64:	488b      	ldr	r0, [pc, #556]	@ (8005f94 <HAL_RCC_OscConfig+0x294>)
 8005d66:	f7fe f801 	bl	8003d6c <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	2bff      	cmp	r3, #255	@ 0xff
 8005d70:	d904      	bls.n	8005d7c <HAL_RCC_OscConfig+0x7c>
 8005d72:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8005d76:	4887      	ldr	r0, [pc, #540]	@ (8005f94 <HAL_RCC_OscConfig+0x294>)
 8005d78:	f7fd fff8 	bl	8003d6c <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d030      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d02c      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	d028      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	2b30      	cmp	r3, #48	@ 0x30
 8005d9a:	d024      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	2b40      	cmp	r3, #64	@ 0x40
 8005da2:	d020      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	2b50      	cmp	r3, #80	@ 0x50
 8005daa:	d01c      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	2b60      	cmp	r3, #96	@ 0x60
 8005db2:	d018      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	2b70      	cmp	r3, #112	@ 0x70
 8005dba:	d014      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	2b80      	cmp	r3, #128	@ 0x80
 8005dc2:	d010      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	2b90      	cmp	r3, #144	@ 0x90
 8005dca:	d00c      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	2ba0      	cmp	r3, #160	@ 0xa0
 8005dd2:	d008      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	2bb0      	cmp	r3, #176	@ 0xb0
 8005dda:	d004      	beq.n	8005de6 <HAL_RCC_OscConfig+0xe6>
 8005ddc:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8005de0:	486c      	ldr	r0, [pc, #432]	@ (8005f94 <HAL_RCC_OscConfig+0x294>)
 8005de2:	f7fd ffc3 	bl	8003d6c <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_RCC_OscConfig+0xfc>
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	f040 808e 	bne.w	8005f10 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	f040 808a 	bne.w	8005f10 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dfc:	4b66      	ldr	r3, [pc, #408]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <HAL_RCC_OscConfig+0x116>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f000 bc6e 	b.w	80066f2 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1a      	ldr	r2, [r3, #32]
 8005e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d004      	beq.n	8005e30 <HAL_RCC_OscConfig+0x130>
 8005e26:	4b5c      	ldr	r3, [pc, #368]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e2e:	e005      	b.n	8005e3c <HAL_RCC_OscConfig+0x13c>
 8005e30:	4b59      	ldr	r3, [pc, #356]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e36:	091b      	lsrs	r3, r3, #4
 8005e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d224      	bcs.n	8005e8a <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fec1 	bl	8006bcc <RCC_SetFlashLatencyFromMSIRange>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f000 bc4e 	b.w	80066f2 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e56:	4b50      	ldr	r3, [pc, #320]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a4f      	ldr	r2, [pc, #316]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e5c:	f043 0308 	orr.w	r3, r3, #8
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b4d      	ldr	r3, [pc, #308]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	494a      	ldr	r1, [pc, #296]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e74:	4b48      	ldr	r3, [pc, #288]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	4945      	ldr	r1, [pc, #276]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	604b      	str	r3, [r1, #4]
 8005e88:	e026      	b.n	8005ed8 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e8a:	4b43      	ldr	r3, [pc, #268]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a42      	ldr	r2, [pc, #264]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e90:	f043 0308 	orr.w	r3, r3, #8
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b40      	ldr	r3, [pc, #256]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	493d      	ldr	r1, [pc, #244]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	4938      	ldr	r1, [pc, #224]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fe80 	bl	8006bcc <RCC_SetFlashLatencyFromMSIRange>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f000 bc0d 	b.w	80066f2 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ed8:	f000 fdb4 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8005edc:	4602      	mov	r2, r0
 8005ede:	4b2e      	ldr	r3, [pc, #184]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	492c      	ldr	r1, [pc, #176]	@ (8005f9c <HAL_RCC_OscConfig+0x29c>)
 8005eea:	5ccb      	ldrb	r3, [r1, r3]
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa0 <HAL_RCC_OscConfig+0x2a0>)
 8005ef6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa4 <HAL_RCC_OscConfig+0x2a4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe fda7 	bl	8004a50 <HAL_InitTick>
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d05d      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	e3f0      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d032      	beq.n	8005f7e <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f18:	4b1f      	ldr	r3, [pc, #124]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f24:	f7fe fde4 	bl	8004af0 <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f2c:	f7fe fde0 	bl	8004af0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e3d9      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f3e:	4b16      	ldr	r3, [pc, #88]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f4a:	4b13      	ldr	r3, [pc, #76]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a12      	ldr	r2, [pc, #72]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f50:	f043 0308 	orr.w	r3, r3, #8
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	490d      	ldr	r1, [pc, #52]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f68:	4b0b      	ldr	r3, [pc, #44]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	4908      	ldr	r1, [pc, #32]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
 8005f7c:	e025      	b.n	8005fca <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f7e:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a05      	ldr	r2, [pc, #20]	@ (8005f98 <HAL_RCC_OscConfig+0x298>)
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f8a:	f7fe fdb1 	bl	8004af0 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f90:	e013      	b.n	8005fba <HAL_RCC_OscConfig+0x2ba>
 8005f92:	bf00      	nop
 8005f94:	0800e068 	.word	0x0800e068
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	0800e224 	.word	0x0800e224
 8005fa0:	20000010 	.word	0x20000010
 8005fa4:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fa8:	f7fe fda2 	bl	8004af0 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e39b      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fba:	4b97      	ldr	r3, [pc, #604]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x2a8>
 8005fc6:	e000      	b.n	8005fca <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d07e      	beq.n	80060d4 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00e      	beq.n	8005ffc <HAL_RCC_OscConfig+0x2fc>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe6:	d009      	beq.n	8005ffc <HAL_RCC_OscConfig+0x2fc>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ff0:	d004      	beq.n	8005ffc <HAL_RCC_OscConfig+0x2fc>
 8005ff2:	f240 2119 	movw	r1, #537	@ 0x219
 8005ff6:	4889      	ldr	r0, [pc, #548]	@ (800621c <HAL_RCC_OscConfig+0x51c>)
 8005ff8:	f7fd feb8 	bl	8003d6c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d005      	beq.n	800600e <HAL_RCC_OscConfig+0x30e>
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b0c      	cmp	r3, #12
 8006006:	d10e      	bne.n	8006026 <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d10b      	bne.n	8006026 <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800600e:	4b82      	ldr	r3, [pc, #520]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d05b      	beq.n	80060d2 <HAL_RCC_OscConfig+0x3d2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d157      	bne.n	80060d2 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e365      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602e:	d106      	bne.n	800603e <HAL_RCC_OscConfig+0x33e>
 8006030:	4b79      	ldr	r3, [pc, #484]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a78      	ldr	r2, [pc, #480]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e01d      	b.n	800607a <HAL_RCC_OscConfig+0x37a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006046:	d10c      	bne.n	8006062 <HAL_RCC_OscConfig+0x362>
 8006048:	4b73      	ldr	r3, [pc, #460]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a72      	ldr	r2, [pc, #456]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 800604e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	4b70      	ldr	r3, [pc, #448]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a6f      	ldr	r2, [pc, #444]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 800605a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e00b      	b.n	800607a <HAL_RCC_OscConfig+0x37a>
 8006062:	4b6d      	ldr	r3, [pc, #436]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6c      	ldr	r2, [pc, #432]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b6a      	ldr	r3, [pc, #424]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a69      	ldr	r2, [pc, #420]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006074:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006078:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d013      	beq.n	80060aa <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006082:	f7fe fd35 	bl	8004af0 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800608a:	f7fe fd31 	bl	8004af0 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b64      	cmp	r3, #100	@ 0x64
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e32a      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800609c:	4b5e      	ldr	r3, [pc, #376]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <HAL_RCC_OscConfig+0x38a>
 80060a8:	e014      	b.n	80060d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060aa:	f7fe fd21 	bl	8004af0 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b2:	f7fe fd1d 	bl	8004af0 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b64      	cmp	r3, #100	@ 0x64
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e316      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060c4:	4b54      	ldr	r3, [pc, #336]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1f0      	bne.n	80060b2 <HAL_RCC_OscConfig+0x3b2>
 80060d0:	e000      	b.n	80060d4 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d077      	beq.n	80061d0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d009      	beq.n	80060fc <HAL_RCC_OscConfig+0x3fc>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f0:	d004      	beq.n	80060fc <HAL_RCC_OscConfig+0x3fc>
 80060f2:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80060f6:	4849      	ldr	r0, [pc, #292]	@ (800621c <HAL_RCC_OscConfig+0x51c>)
 80060f8:	f7fd fe38 	bl	8003d6c <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b1f      	cmp	r3, #31
 8006102:	d904      	bls.n	800610e <HAL_RCC_OscConfig+0x40e>
 8006104:	f240 214d 	movw	r1, #589	@ 0x24d
 8006108:	4844      	ldr	r0, [pc, #272]	@ (800621c <HAL_RCC_OscConfig+0x51c>)
 800610a:	f7fd fe2f 	bl	8003d6c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d005      	beq.n	8006120 <HAL_RCC_OscConfig+0x420>
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b0c      	cmp	r3, #12
 8006118:	d119      	bne.n	800614e <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d116      	bne.n	800614e <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006120:	4b3d      	ldr	r3, [pc, #244]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <HAL_RCC_OscConfig+0x438>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e2dc      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006138:	4b37      	ldr	r3, [pc, #220]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	061b      	lsls	r3, r3, #24
 8006146:	4934      	ldr	r1, [pc, #208]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800614c:	e040      	b.n	80061d0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d023      	beq.n	800619e <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006156:	4b30      	ldr	r3, [pc, #192]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2f      	ldr	r2, [pc, #188]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fe fcc5 	bl	8004af0 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800616a:	f7fe fcc1 	bl	8004af0 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e2ba      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800617c:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006188:	4b23      	ldr	r3, [pc, #140]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	061b      	lsls	r3, r3, #24
 8006196:	4920      	ldr	r1, [pc, #128]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006198:	4313      	orrs	r3, r2
 800619a:	604b      	str	r3, [r1, #4]
 800619c:	e018      	b.n	80061d0 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619e:	4b1e      	ldr	r3, [pc, #120]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 80061a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fe fca1 	bl	8004af0 <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061b2:	f7fe fc9d 	bl	8004af0 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e296      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061c4:	4b14      	ldr	r3, [pc, #80]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f0      	bne.n	80061b2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d04e      	beq.n	800627a <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_RCC_OscConfig+0x4f6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d004      	beq.n	80061f6 <HAL_RCC_OscConfig+0x4f6>
 80061ec:	f240 218d 	movw	r1, #653	@ 0x28d
 80061f0:	480a      	ldr	r0, [pc, #40]	@ (800621c <HAL_RCC_OscConfig+0x51c>)
 80061f2:	f7fd fdbb 	bl	8003d6c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d021      	beq.n	8006242 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061fe:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006204:	4a04      	ldr	r2, [pc, #16]	@ (8006218 <HAL_RCC_OscConfig+0x518>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620e:	f7fe fc6f 	bl	8004af0 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006214:	e00d      	b.n	8006232 <HAL_RCC_OscConfig+0x532>
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	0800e068 	.word	0x0800e068
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006220:	f7fe fc66 	bl	8004af0 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e25f      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006232:	4b66      	ldr	r3, [pc, #408]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 8006234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0ef      	beq.n	8006220 <HAL_RCC_OscConfig+0x520>
 8006240:	e01b      	b.n	800627a <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006242:	4b62      	ldr	r3, [pc, #392]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 8006244:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006248:	4a60      	ldr	r2, [pc, #384]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006252:	f7fe fc4d 	bl	8004af0 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800625a:	f7fe fc49 	bl	8004af0 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e242      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800626c:	4b57      	ldr	r3, [pc, #348]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 800626e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1ef      	bne.n	800625a <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80b8 	beq.w	80063f8 <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006288:	2300      	movs	r3, #0
 800628a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00c      	beq.n	80062ae <HAL_RCC_OscConfig+0x5ae>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d008      	beq.n	80062ae <HAL_RCC_OscConfig+0x5ae>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b05      	cmp	r3, #5
 80062a2:	d004      	beq.n	80062ae <HAL_RCC_OscConfig+0x5ae>
 80062a4:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80062a8:	4849      	ldr	r0, [pc, #292]	@ (80063d0 <HAL_RCC_OscConfig+0x6d0>)
 80062aa:	f7fd fd5f 	bl	8003d6c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80062ae:	4b47      	ldr	r3, [pc, #284]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 80062b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10d      	bne.n	80062d6 <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ba:	4b44      	ldr	r3, [pc, #272]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 80062bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062be:	4a43      	ldr	r2, [pc, #268]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 80062c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c6:	4b41      	ldr	r3, [pc, #260]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 80062c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ce:	60bb      	str	r3, [r7, #8]
 80062d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d2:	2301      	movs	r3, #1
 80062d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062d6:	4b3f      	ldr	r3, [pc, #252]	@ (80063d4 <HAL_RCC_OscConfig+0x6d4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d118      	bne.n	8006314 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062e2:	4b3c      	ldr	r3, [pc, #240]	@ (80063d4 <HAL_RCC_OscConfig+0x6d4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a3b      	ldr	r2, [pc, #236]	@ (80063d4 <HAL_RCC_OscConfig+0x6d4>)
 80062e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ee:	f7fe fbff 	bl	8004af0 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f6:	f7fe fbfb 	bl	8004af0 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e1f4      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006308:	4b32      	ldr	r3, [pc, #200]	@ (80063d4 <HAL_RCC_OscConfig+0x6d4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d108      	bne.n	800632e <HAL_RCC_OscConfig+0x62e>
 800631c:	4b2b      	ldr	r3, [pc, #172]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 800631e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006322:	4a2a      	ldr	r2, [pc, #168]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800632c:	e024      	b.n	8006378 <HAL_RCC_OscConfig+0x678>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b05      	cmp	r3, #5
 8006334:	d110      	bne.n	8006358 <HAL_RCC_OscConfig+0x658>
 8006336:	4b25      	ldr	r3, [pc, #148]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633c:	4a23      	ldr	r2, [pc, #140]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 800633e:	f043 0304 	orr.w	r3, r3, #4
 8006342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006346:	4b21      	ldr	r3, [pc, #132]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634c:	4a1f      	ldr	r2, [pc, #124]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006356:	e00f      	b.n	8006378 <HAL_RCC_OscConfig+0x678>
 8006358:	4b1c      	ldr	r3, [pc, #112]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635e:	4a1b      	ldr	r2, [pc, #108]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006368:	4b18      	ldr	r3, [pc, #96]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636e:	4a17      	ldr	r2, [pc, #92]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 8006370:	f023 0304 	bic.w	r3, r3, #4
 8006374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d016      	beq.n	80063ae <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006380:	f7fe fbb6 	bl	8004af0 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006386:	e00a      	b.n	800639e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006388:	f7fe fbb2 	bl	8004af0 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006396:	4293      	cmp	r3, r2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e1a9      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800639e:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <HAL_RCC_OscConfig+0x6cc>)
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0ed      	beq.n	8006388 <HAL_RCC_OscConfig+0x688>
 80063ac:	e01b      	b.n	80063e6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ae:	f7fe fb9f 	bl	8004af0 <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063b4:	e010      	b.n	80063d8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b6:	f7fe fb9b 	bl	8004af0 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d907      	bls.n	80063d8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e192      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
 80063cc:	40021000 	.word	0x40021000
 80063d0:	0800e068 	.word	0x0800e068
 80063d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063d8:	4b98      	ldr	r3, [pc, #608]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e7      	bne.n	80063b6 <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e6:	7ffb      	ldrb	r3, [r7, #31]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d105      	bne.n	80063f8 <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ec:	4b93      	ldr	r3, [pc, #588]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f0:	4a92      	ldr	r2, [pc, #584]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 80063f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <HAL_RCC_OscConfig+0x71a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	2b01      	cmp	r3, #1
 8006406:	d008      	beq.n	800641a <HAL_RCC_OscConfig+0x71a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	2b02      	cmp	r3, #2
 800640e:	d004      	beq.n	800641a <HAL_RCC_OscConfig+0x71a>
 8006410:	f240 316e 	movw	r1, #878	@ 0x36e
 8006414:	488a      	ldr	r0, [pc, #552]	@ (8006640 <HAL_RCC_OscConfig+0x940>)
 8006416:	f7fd fca9 	bl	8003d6c <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 8166 	beq.w	80066f0 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006428:	2b02      	cmp	r3, #2
 800642a:	f040 813c 	bne.w	80066a6 <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d010      	beq.n	8006458 <HAL_RCC_OscConfig+0x758>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643a:	2b01      	cmp	r3, #1
 800643c:	d00c      	beq.n	8006458 <HAL_RCC_OscConfig+0x758>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	2b02      	cmp	r3, #2
 8006444:	d008      	beq.n	8006458 <HAL_RCC_OscConfig+0x758>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644a:	2b03      	cmp	r3, #3
 800644c:	d004      	beq.n	8006458 <HAL_RCC_OscConfig+0x758>
 800644e:	f240 3176 	movw	r1, #886	@ 0x376
 8006452:	487b      	ldr	r0, [pc, #492]	@ (8006640 <HAL_RCC_OscConfig+0x940>)
 8006454:	f7fd fc8a 	bl	8003d6c <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_RCC_OscConfig+0x768>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006464:	2b08      	cmp	r3, #8
 8006466:	d904      	bls.n	8006472 <HAL_RCC_OscConfig+0x772>
 8006468:	f240 3177 	movw	r1, #887	@ 0x377
 800646c:	4874      	ldr	r0, [pc, #464]	@ (8006640 <HAL_RCC_OscConfig+0x940>)
 800646e:	f7fd fc7d 	bl	8003d6c <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006476:	2b07      	cmp	r3, #7
 8006478:	d903      	bls.n	8006482 <HAL_RCC_OscConfig+0x782>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647e:	2b56      	cmp	r3, #86	@ 0x56
 8006480:	d904      	bls.n	800648c <HAL_RCC_OscConfig+0x78c>
 8006482:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8006486:	486e      	ldr	r0, [pc, #440]	@ (8006640 <HAL_RCC_OscConfig+0x940>)
 8006488:	f7fd fc70 	bl	8003d6c <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	2b07      	cmp	r3, #7
 8006492:	d008      	beq.n	80064a6 <HAL_RCC_OscConfig+0x7a6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	2b11      	cmp	r3, #17
 800649a:	d004      	beq.n	80064a6 <HAL_RCC_OscConfig+0x7a6>
 800649c:	f240 317a 	movw	r1, #890	@ 0x37a
 80064a0:	4867      	ldr	r0, [pc, #412]	@ (8006640 <HAL_RCC_OscConfig+0x940>)
 80064a2:	f7fd fc63 	bl	8003d6c <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d010      	beq.n	80064d0 <HAL_RCC_OscConfig+0x7d0>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d00c      	beq.n	80064d0 <HAL_RCC_OscConfig+0x7d0>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d008      	beq.n	80064d0 <HAL_RCC_OscConfig+0x7d0>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d004      	beq.n	80064d0 <HAL_RCC_OscConfig+0x7d0>
 80064c6:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 80064ca:	485d      	ldr	r0, [pc, #372]	@ (8006640 <HAL_RCC_OscConfig+0x940>)
 80064cc:	f7fd fc4e 	bl	8003d6c <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d010      	beq.n	80064fa <HAL_RCC_OscConfig+0x7fa>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d00c      	beq.n	80064fa <HAL_RCC_OscConfig+0x7fa>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e4:	2b06      	cmp	r3, #6
 80064e6:	d008      	beq.n	80064fa <HAL_RCC_OscConfig+0x7fa>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d004      	beq.n	80064fa <HAL_RCC_OscConfig+0x7fa>
 80064f0:	f240 317d 	movw	r1, #893	@ 0x37d
 80064f4:	4852      	ldr	r0, [pc, #328]	@ (8006640 <HAL_RCC_OscConfig+0x940>)
 80064f6:	f7fd fc39 	bl	8003d6c <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80064fa:	4b50      	ldr	r3, [pc, #320]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f003 0203 	and.w	r2, r3, #3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650a:	429a      	cmp	r2, r3
 800650c:	d130      	bne.n	8006570 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006518:	3b01      	subs	r3, #1
 800651a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800651c:	429a      	cmp	r2, r3
 800651e:	d127      	bne.n	8006570 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800652c:	429a      	cmp	r2, r3
 800652e:	d11f      	bne.n	8006570 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800653a:	2a07      	cmp	r2, #7
 800653c:	bf14      	ite	ne
 800653e:	2201      	movne	r2, #1
 8006540:	2200      	moveq	r2, #0
 8006542:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006544:	4293      	cmp	r3, r2
 8006546:	d113      	bne.n	8006570 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	3b01      	subs	r3, #1
 8006556:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d109      	bne.n	8006570 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	3b01      	subs	r3, #1
 800656a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800656c:	429a      	cmp	r2, r3
 800656e:	d074      	beq.n	800665a <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b0c      	cmp	r3, #12
 8006574:	d06f      	beq.n	8006656 <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006576:	4b31      	ldr	r3, [pc, #196]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d105      	bne.n	800658e <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006582:	4b2e      	ldr	r3, [pc, #184]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e0af      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006592:	4b2a      	ldr	r3, [pc, #168]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a29      	ldr	r2, [pc, #164]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 8006598:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800659c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800659e:	f7fe faa7 	bl	8004af0 <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a6:	f7fe faa3 	bl	8004af0 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e09c      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065b8:	4b20      	ldr	r3, [pc, #128]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065c4:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006644 <HAL_RCC_OscConfig+0x944>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065d4:	3a01      	subs	r2, #1
 80065d6:	0112      	lsls	r2, r2, #4
 80065d8:	4311      	orrs	r1, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065de:	0212      	lsls	r2, r2, #8
 80065e0:	4311      	orrs	r1, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065e6:	0852      	lsrs	r2, r2, #1
 80065e8:	3a01      	subs	r2, #1
 80065ea:	0552      	lsls	r2, r2, #21
 80065ec:	4311      	orrs	r1, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80065f2:	0852      	lsrs	r2, r2, #1
 80065f4:	3a01      	subs	r2, #1
 80065f6:	0652      	lsls	r2, r2, #25
 80065f8:	4311      	orrs	r1, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80065fe:	0912      	lsrs	r2, r2, #4
 8006600:	0452      	lsls	r2, r2, #17
 8006602:	430a      	orrs	r2, r1
 8006604:	490d      	ldr	r1, [pc, #52]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 8006606:	4313      	orrs	r3, r2
 8006608:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800660a:	4b0c      	ldr	r3, [pc, #48]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a0b      	ldr	r2, [pc, #44]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 8006610:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006614:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006616:	4b09      	ldr	r3, [pc, #36]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	4a08      	ldr	r2, [pc, #32]	@ (800663c <HAL_RCC_OscConfig+0x93c>)
 800661c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006620:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006622:	f7fe fa65 	bl	8004af0 <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006628:	e00e      	b.n	8006648 <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800662a:	f7fe fa61 	bl	8004af0 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d907      	bls.n	8006648 <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e05a      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
 800663c:	40021000 	.word	0x40021000
 8006640:	0800e068 	.word	0x0800e068
 8006644:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006648:	4b2c      	ldr	r3, [pc, #176]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0ea      	beq.n	800662a <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006654:	e04c      	b.n	80066f0 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e04b      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800665a:	4b28      	ldr	r3, [pc, #160]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d144      	bne.n	80066f0 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006666:	4b25      	ldr	r3, [pc, #148]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a24      	ldr	r2, [pc, #144]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 800666c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006670:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006672:	4b22      	ldr	r3, [pc, #136]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4a21      	ldr	r2, [pc, #132]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 8006678:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800667c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800667e:	f7fe fa37 	bl	8004af0 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006686:	f7fe fa33 	bl	8004af0 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e02c      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006698:	4b18      	ldr	r3, [pc, #96]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x986>
 80066a4:	e024      	b.n	80066f0 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d01f      	beq.n	80066ec <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ac:	4b13      	ldr	r3, [pc, #76]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a12      	ldr	r2, [pc, #72]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 80066b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fe fa1a 	bl	8004af0 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c0:	f7fe fa16 	bl	8004af0 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e00f      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066d2:	4b0a      	ldr	r3, [pc, #40]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80066de:	4b07      	ldr	r3, [pc, #28]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	4906      	ldr	r1, [pc, #24]	@ (80066fc <HAL_RCC_OscConfig+0x9fc>)
 80066e4:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <HAL_RCC_OscConfig+0xa00>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	60cb      	str	r3, [r1, #12]
 80066ea:	e001      	b.n	80066f0 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40021000 	.word	0x40021000
 8006700:	feeefffc 	.word	0xfeeefffc

08006704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e186      	b.n	8006a26 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_RCC_ClockConfig+0x24>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b0f      	cmp	r3, #15
 8006726:	d904      	bls.n	8006732 <HAL_RCC_ClockConfig+0x2e>
 8006728:	f240 4159 	movw	r1, #1113	@ 0x459
 800672c:	4882      	ldr	r0, [pc, #520]	@ (8006938 <HAL_RCC_ClockConfig+0x234>)
 800672e:	f7fd fb1d 	bl	8003d6c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d010      	beq.n	800675a <HAL_RCC_ClockConfig+0x56>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d00d      	beq.n	800675a <HAL_RCC_ClockConfig+0x56>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d00a      	beq.n	800675a <HAL_RCC_ClockConfig+0x56>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d007      	beq.n	800675a <HAL_RCC_ClockConfig+0x56>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b04      	cmp	r3, #4
 800674e:	d004      	beq.n	800675a <HAL_RCC_ClockConfig+0x56>
 8006750:	f240 415a 	movw	r1, #1114	@ 0x45a
 8006754:	4878      	ldr	r0, [pc, #480]	@ (8006938 <HAL_RCC_ClockConfig+0x234>)
 8006756:	f7fd fb09 	bl	8003d6c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800675a:	4b78      	ldr	r3, [pc, #480]	@ (800693c <HAL_RCC_ClockConfig+0x238>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d910      	bls.n	800678a <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006768:	4b74      	ldr	r3, [pc, #464]	@ (800693c <HAL_RCC_ClockConfig+0x238>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f023 0207 	bic.w	r2, r3, #7
 8006770:	4972      	ldr	r1, [pc, #456]	@ (800693c <HAL_RCC_ClockConfig+0x238>)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	4313      	orrs	r3, r2
 8006776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006778:	4b70      	ldr	r3, [pc, #448]	@ (800693c <HAL_RCC_ClockConfig+0x238>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d001      	beq.n	800678a <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e14d      	b.n	8006a26 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d039      	beq.n	800680a <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d024      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b80      	cmp	r3, #128	@ 0x80
 80067a4:	d020      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b90      	cmp	r3, #144	@ 0x90
 80067ac:	d01c      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80067b4:	d018      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2bb0      	cmp	r3, #176	@ 0xb0
 80067bc:	d014      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067c4:	d010      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2bd0      	cmp	r3, #208	@ 0xd0
 80067cc:	d00c      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2be0      	cmp	r3, #224	@ 0xe0
 80067d4:	d008      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2bf0      	cmp	r3, #240	@ 0xf0
 80067dc:	d004      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xe4>
 80067de:	f240 4172 	movw	r1, #1138	@ 0x472
 80067e2:	4855      	ldr	r0, [pc, #340]	@ (8006938 <HAL_RCC_ClockConfig+0x234>)
 80067e4:	f7fd fac2 	bl	8003d6c <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	4b54      	ldr	r3, [pc, #336]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d908      	bls.n	800680a <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f8:	4b51      	ldr	r3, [pc, #324]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	494e      	ldr	r1, [pc, #312]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 8006806:	4313      	orrs	r3, r2
 8006808:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d061      	beq.n	80068da <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d010      	beq.n	8006840 <HAL_RCC_ClockConfig+0x13c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d00c      	beq.n	8006840 <HAL_RCC_ClockConfig+0x13c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d008      	beq.n	8006840 <HAL_RCC_ClockConfig+0x13c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d004      	beq.n	8006840 <HAL_RCC_ClockConfig+0x13c>
 8006836:	f240 417d 	movw	r1, #1149	@ 0x47d
 800683a:	483f      	ldr	r0, [pc, #252]	@ (8006938 <HAL_RCC_ClockConfig+0x234>)
 800683c:	f7fd fa96 	bl	8003d6c <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d107      	bne.n	8006858 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006848:	4b3d      	ldr	r3, [pc, #244]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d121      	bne.n	8006898 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0e6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d107      	bne.n	8006870 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006860:	4b37      	ldr	r3, [pc, #220]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d115      	bne.n	8006898 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0da      	b.n	8006a26 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006878:	4b31      	ldr	r3, [pc, #196]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0ce      	b.n	8006a26 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006888:	4b2d      	ldr	r3, [pc, #180]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0c6      	b.n	8006a26 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006898:	4b29      	ldr	r3, [pc, #164]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f023 0203 	bic.w	r2, r3, #3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4926      	ldr	r1, [pc, #152]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068aa:	f7fe f921 	bl	8004af0 <HAL_GetTick>
 80068ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b0:	e00a      	b.n	80068c8 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b2:	f7fe f91d 	bl	8004af0 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e0ae      	b.n	8006a26 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 020c 	and.w	r2, r3, #12
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d1eb      	bne.n	80068b2 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d010      	beq.n	8006908 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	4b15      	ldr	r3, [pc, #84]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d208      	bcs.n	8006908 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f6:	4b12      	ldr	r3, [pc, #72]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	490f      	ldr	r1, [pc, #60]	@ (8006940 <HAL_RCC_ClockConfig+0x23c>)
 8006904:	4313      	orrs	r3, r2
 8006906:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006908:	4b0c      	ldr	r3, [pc, #48]	@ (800693c <HAL_RCC_ClockConfig+0x238>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d216      	bcs.n	8006944 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006916:	4b09      	ldr	r3, [pc, #36]	@ (800693c <HAL_RCC_ClockConfig+0x238>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f023 0207 	bic.w	r2, r3, #7
 800691e:	4907      	ldr	r1, [pc, #28]	@ (800693c <HAL_RCC_ClockConfig+0x238>)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	4313      	orrs	r3, r2
 8006924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006926:	4b05      	ldr	r3, [pc, #20]	@ (800693c <HAL_RCC_ClockConfig+0x238>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d007      	beq.n	8006944 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e076      	b.n	8006a26 <HAL_RCC_ClockConfig+0x322>
 8006938:	0800e068 	.word	0x0800e068
 800693c:	40022000 	.word	0x40022000
 8006940:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d025      	beq.n	800699c <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d018      	beq.n	800698a <HAL_RCC_ClockConfig+0x286>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006960:	d013      	beq.n	800698a <HAL_RCC_ClockConfig+0x286>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800696a:	d00e      	beq.n	800698a <HAL_RCC_ClockConfig+0x286>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006974:	d009      	beq.n	800698a <HAL_RCC_ClockConfig+0x286>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800697e:	d004      	beq.n	800698a <HAL_RCC_ClockConfig+0x286>
 8006980:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8006984:	482a      	ldr	r0, [pc, #168]	@ (8006a30 <HAL_RCC_ClockConfig+0x32c>)
 8006986:	f7fd f9f1 	bl	8003d6c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800698a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a34 <HAL_RCC_ClockConfig+0x330>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	4927      	ldr	r1, [pc, #156]	@ (8006a34 <HAL_RCC_ClockConfig+0x330>)
 8006998:	4313      	orrs	r3, r2
 800699a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d026      	beq.n	80069f6 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d018      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x2de>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b8:	d013      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x2de>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80069c2:	d00e      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x2de>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80069cc:	d009      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x2de>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069d6:	d004      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x2de>
 80069d8:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 80069dc:	4814      	ldr	r0, [pc, #80]	@ (8006a30 <HAL_RCC_ClockConfig+0x32c>)
 80069de:	f7fd f9c5 	bl	8003d6c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069e2:	4b14      	ldr	r3, [pc, #80]	@ (8006a34 <HAL_RCC_ClockConfig+0x330>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4910      	ldr	r1, [pc, #64]	@ (8006a34 <HAL_RCC_ClockConfig+0x330>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069f6:	f000 f825 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <HAL_RCC_ClockConfig+0x330>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	490c      	ldr	r1, [pc, #48]	@ (8006a38 <HAL_RCC_ClockConfig+0x334>)
 8006a08:	5ccb      	ldrb	r3, [r1, r3]
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a12:	4a0a      	ldr	r2, [pc, #40]	@ (8006a3c <HAL_RCC_ClockConfig+0x338>)
 8006a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a16:	4b0a      	ldr	r3, [pc, #40]	@ (8006a40 <HAL_RCC_ClockConfig+0x33c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe f818 	bl	8004a50 <HAL_InitTick>
 8006a20:	4603      	mov	r3, r0
 8006a22:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a24:	7afb      	ldrb	r3, [r7, #11]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	0800e068 	.word	0x0800e068
 8006a34:	40021000 	.word	0x40021000
 8006a38:	0800e224 	.word	0x0800e224
 8006a3c:	20000010 	.word	0x20000010
 8006a40:	20000014 	.word	0x20000014

08006a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	@ 0x24
 8006a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a52:	4b3e      	ldr	r3, [pc, #248]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 030c 	and.w	r3, r3, #12
 8006a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_GetSysClockFreq+0x34>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b0c      	cmp	r3, #12
 8006a70:	d121      	bne.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d11e      	bne.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a78:	4b34      	ldr	r3, [pc, #208]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d107      	bne.n	8006a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a84:	4b31      	ldr	r3, [pc, #196]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	e005      	b.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a94:	4b2d      	ldr	r3, [pc, #180]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10d      	bne.n	8006acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ab4:	e00a      	b.n	8006acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d102      	bne.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006abc:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e004      	b.n	8006acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d101      	bne.n	8006acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ac8:	4b23      	ldr	r3, [pc, #140]	@ (8006b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8006aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	d134      	bne.n	8006b3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d003      	beq.n	8006aea <HAL_RCC_GetSysClockFreq+0xa6>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d003      	beq.n	8006af0 <HAL_RCC_GetSysClockFreq+0xac>
 8006ae8:	e005      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006aea:	4b1a      	ldr	r3, [pc, #104]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8006aec:	617b      	str	r3, [r7, #20]
      break;
 8006aee:	e005      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006af0:	4b19      	ldr	r3, [pc, #100]	@ (8006b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8006af2:	617b      	str	r3, [r7, #20]
      break;
 8006af4:	e002      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	617b      	str	r3, [r7, #20]
      break;
 8006afa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006afc:	4b13      	ldr	r3, [pc, #76]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	3301      	adds	r3, #1
 8006b08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b0a:	4b10      	ldr	r3, [pc, #64]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	0a1b      	lsrs	r3, r3, #8
 8006b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	fb03 f202 	mul.w	r2, r3, r2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b22:	4b0a      	ldr	r3, [pc, #40]	@ (8006b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	0e5b      	lsrs	r3, r3, #25
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3724      	adds	r7, #36	@ 0x24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	0800e23c 	.word	0x0800e23c
 8006b54:	00f42400 	.word	0x00f42400
 8006b58:	007a1200 	.word	0x007a1200

08006b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b60:	4b03      	ldr	r3, [pc, #12]	@ (8006b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b62:	681b      	ldr	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000010 	.word	0x20000010

08006b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b78:	f7ff fff0 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4b06      	ldr	r3, [pc, #24]	@ (8006b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	4904      	ldr	r1, [pc, #16]	@ (8006b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b8a:	5ccb      	ldrb	r3, [r1, r3]
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	0800e234 	.word	0x0800e234

08006ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ba4:	f7ff ffda 	bl	8006b5c <HAL_RCC_GetHCLKFreq>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	0adb      	lsrs	r3, r3, #11
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	4904      	ldr	r1, [pc, #16]	@ (8006bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bb6:	5ccb      	ldrb	r3, [r1, r3]
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	0800e234 	.word	0x0800e234

08006bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006be4:	f7ff f81c 	bl	8005c20 <HAL_PWREx_GetVoltageRange>
 8006be8:	6178      	str	r0, [r7, #20]
 8006bea:	e014      	b.n	8006c16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bec:	4b25      	ldr	r3, [pc, #148]	@ (8006c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf0:	4a24      	ldr	r2, [pc, #144]	@ (8006c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bf8:	4b22      	ldr	r3, [pc, #136]	@ (8006c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c04:	f7ff f80c 	bl	8005c20 <HAL_PWREx_GetVoltageRange>
 8006c08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006c84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c1c:	d10b      	bne.n	8006c36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b80      	cmp	r3, #128	@ 0x80
 8006c22:	d919      	bls.n	8006c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2ba0      	cmp	r3, #160	@ 0xa0
 8006c28:	d902      	bls.n	8006c30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	e013      	b.n	8006c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c30:	2301      	movs	r3, #1
 8006c32:	613b      	str	r3, [r7, #16]
 8006c34:	e010      	b.n	8006c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b80      	cmp	r3, #128	@ 0x80
 8006c3a:	d902      	bls.n	8006c42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	e00a      	b.n	8006c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b80      	cmp	r3, #128	@ 0x80
 8006c46:	d102      	bne.n	8006c4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c48:	2302      	movs	r3, #2
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	e004      	b.n	8006c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b70      	cmp	r3, #112	@ 0x70
 8006c52:	d101      	bne.n	8006c58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c54:	2301      	movs	r3, #1
 8006c56:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c58:	4b0b      	ldr	r3, [pc, #44]	@ (8006c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f023 0207 	bic.w	r2, r3, #7
 8006c60:	4909      	ldr	r1, [pc, #36]	@ (8006c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c68:	4b07      	ldr	r3, [pc, #28]	@ (8006c88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d001      	beq.n	8006c7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40021000 	.word	0x40021000
 8006c88:	40022000 	.word	0x40022000

08006c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c94:	2300      	movs	r3, #0
 8006c96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c98:	2300      	movs	r3, #0
 8006c9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cb0:	d303      	bcc.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8006cb2:	21c9      	movs	r1, #201	@ 0xc9
 8006cb4:	4889      	ldr	r0, [pc, #548]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006cb6:	f7fd f859 	bl	8003d6c <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d058      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d012      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cd6:	d00d      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ce0:	d008      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006cea:	d003      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8006cec:	21d1      	movs	r1, #209	@ 0xd1
 8006cee:	487b      	ldr	r0, [pc, #492]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006cf0:	f7fd f83c 	bl	8003d6c <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006cfc:	d02a      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8006cfe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d02:	d824      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8006d04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d08:	d008      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d0e:	d81e      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006d14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d18:	d010      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8006d1a:	e018      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d1c:	4b70      	ldr	r3, [pc, #448]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	4a6f      	ldr	r2, [pc, #444]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d28:	e015      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fc69 	bl	8007608 <RCCEx_PLLSAI1_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d3a:	e00c      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	3320      	adds	r3, #32
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fde0 	bl	8007908 <RCCEx_PLLSAI2_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d4c:	e003      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	74fb      	strb	r3, [r7, #19]
      break;
 8006d52:	e000      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8006d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d56:	7cfb      	ldrb	r3, [r7, #19]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d5c:	4b60      	ldr	r3, [pc, #384]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d6a:	495d      	ldr	r1, [pc, #372]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006d72:	e001      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d74:	7cfb      	ldrb	r3, [r7, #19]
 8006d76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d059      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d013      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d94:	d00e      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d9e:	d009      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006da4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006da8:	d004      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006daa:	f240 110f 	movw	r1, #271	@ 0x10f
 8006dae:	484b      	ldr	r0, [pc, #300]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006db0:	f7fc ffdc 	bl	8003d6c <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006db8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dbc:	d02a      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006dbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dc2:	d824      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006dc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dc8:	d008      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x150>
 8006dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dce:	d81e      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dd8:	d010      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x170>
 8006dda:	e018      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ddc:	4b40      	ldr	r3, [pc, #256]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	4a3f      	ldr	r2, [pc, #252]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006de8:	e015      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3304      	adds	r3, #4
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fc09 	bl	8007608 <RCCEx_PLLSAI1_Config>
 8006df6:	4603      	mov	r3, r0
 8006df8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006dfa:	e00c      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3320      	adds	r3, #32
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fd80 	bl	8007908 <RCCEx_PLLSAI2_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	74fb      	strb	r3, [r7, #19]
      break;
 8006e12:	e000      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8006e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e16:	7cfb      	ldrb	r3, [r7, #19]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e1c:	4b30      	ldr	r3, [pc, #192]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e2a:	492d      	ldr	r1, [pc, #180]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006e32:	e001      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
 8006e36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80c2 	beq.w	8006fca <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e46:	2300      	movs	r3, #0
 8006e48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d016      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5e:	d010      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e6a:	d00a      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e76:	d004      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006e78:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8006e7c:	4817      	ldr	r0, [pc, #92]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006e7e:	f7fc ff75 	bl	8003d6c <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e82:	4b17      	ldr	r3, [pc, #92]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00d      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e98:	4b11      	ldr	r3, [pc, #68]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9c:	4a10      	ldr	r2, [pc, #64]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eac:	60bb      	str	r3, [r7, #8]
 8006eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ec0:	f7fd fe16 	bl	8004af0 <HAL_GetTick>
 8006ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ec6:	e00f      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec8:	f7fd fe12 	bl	8004af0 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d908      	bls.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8006eda:	e00b      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8006edc:	0800e0a0 	.word	0x0800e0a0
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ee8:	4b30      	ldr	r3, [pc, #192]	@ (8006fac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d0e9      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 8006ef4:	7cfb      	ldrb	r3, [r7, #19]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d15c      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006efa:	4b2d      	ldr	r3, [pc, #180]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01f      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d019      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f18:	4b25      	ldr	r3, [pc, #148]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f24:	4b22      	ldr	r3, [pc, #136]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f2a:	4a21      	ldr	r2, [pc, #132]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f34:	4b1e      	ldr	r3, [pc, #120]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f44:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f56:	f7fd fdcb 	bl	8004af0 <HAL_GetTick>
 8006f5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f5c:	e00b      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f5e:	f7fd fdc7 	bl	8004af0 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d902      	bls.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	74fb      	strb	r3, [r7, #19]
            break;
 8006f74:	e006      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f76:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0ec      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8006f84:	7cfb      	ldrb	r3, [r7, #19]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10c      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f8a:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f9a:	4905      	ldr	r1, [pc, #20]	@ (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006fa2:	e009      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fa4:	7cfb      	ldrb	r3, [r7, #19]
 8006fa6:	74bb      	strb	r3, [r7, #18]
 8006fa8:	e006      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8006faa:	bf00      	nop
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb4:	7cfb      	ldrb	r3, [r7, #19]
 8006fb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fb8:	7c7b      	ldrb	r3, [r7, #17]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d105      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc2:	4a8c      	ldr	r2, [pc, #560]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8006fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01f      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d010      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d00c      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d008      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d004      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006ff6:	f240 1199 	movw	r1, #409	@ 0x199
 8006ffa:	487f      	ldr	r0, [pc, #508]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8006ffc:	f7fc feb6 	bl	8003d6c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007000:	4b7c      	ldr	r3, [pc, #496]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007006:	f023 0203 	bic.w	r2, r3, #3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	4979      	ldr	r1, [pc, #484]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007010:	4313      	orrs	r3, r2
 8007012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01f      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d010      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702e:	2b04      	cmp	r3, #4
 8007030:	d00c      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007036:	2b0c      	cmp	r3, #12
 8007038:	d008      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703e:	2b08      	cmp	r3, #8
 8007040:	d004      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007042:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8007046:	486c      	ldr	r0, [pc, #432]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007048:	f7fc fe90 	bl	8003d6c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800704c:	4b69      	ldr	r3, [pc, #420]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007052:	f023 020c 	bic.w	r2, r3, #12
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705a:	4966      	ldr	r1, [pc, #408]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800705c:	4313      	orrs	r3, r2
 800705e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d01f      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d010      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707a:	2b10      	cmp	r3, #16
 800707c:	d00c      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007082:	2b30      	cmp	r3, #48	@ 0x30
 8007084:	d008      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708a:	2b20      	cmp	r3, #32
 800708c:	d004      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800708e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007092:	4859      	ldr	r0, [pc, #356]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007094:	f7fc fe6a 	bl	8003d6c <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007098:	4b56      	ldr	r3, [pc, #344]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800709a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	4953      	ldr	r1, [pc, #332]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01f      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d010      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c6:	2b40      	cmp	r3, #64	@ 0x40
 80070c8:	d00c      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80070d0:	d008      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d6:	2b80      	cmp	r3, #128	@ 0x80
 80070d8:	d004      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80070da:	f240 11bd 	movw	r1, #445	@ 0x1bd
 80070de:	4846      	ldr	r0, [pc, #280]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80070e0:	f7fc fe44 	bl	8003d6c <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070e4:	4b43      	ldr	r3, [pc, #268]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f2:	4940      	ldr	r1, [pc, #256]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b00      	cmp	r3, #0
 8007104:	d022      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710a:	2b00      	cmp	r3, #0
 800710c:	d013      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007116:	d00e      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800711c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007120:	d009      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800712a:	d004      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800712c:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8007130:	4831      	ldr	r0, [pc, #196]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007132:	f7fc fe1b 	bl	8003d6c <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007136:	4b2f      	ldr	r3, [pc, #188]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007144:	492b      	ldr	r1, [pc, #172]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b00      	cmp	r3, #0
 8007156:	d022      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d013      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007168:	d00e      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007172:	d009      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800717c:	d004      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800717e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8007182:	481d      	ldr	r0, [pc, #116]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007184:	f7fc fdf2 	bl	8003d6c <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007188:	4b1a      	ldr	r3, [pc, #104]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007196:	4917      	ldr	r1, [pc, #92]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d028      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d013      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071ba:	d00e      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071c4:	d009      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80071ce:	d004      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80071d0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80071d4:	4808      	ldr	r0, [pc, #32]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80071d6:	f7fc fdc9 	bl	8003d6c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071da:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e8:	4902      	ldr	r1, [pc, #8]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80071f0:	e004      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x570>
 80071f2:	bf00      	nop
 80071f4:	40021000 	.word	0x40021000
 80071f8:	0800e0a0 	.word	0x0800e0a0
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007204:	2b00      	cmp	r3, #0
 8007206:	d022      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800720c:	2b00      	cmp	r3, #0
 800720e:	d013      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007214:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007218:	d00e      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800721e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007222:	d009      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007228:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800722c:	d004      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800722e:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8007232:	489e      	ldr	r0, [pc, #632]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007234:	f7fc fd9a 	bl	8003d6c <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007238:	4b9d      	ldr	r3, [pc, #628]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800723a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007246:	499a      	ldr	r1, [pc, #616]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d01d      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800726a:	d009      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007274:	d004      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8007276:	f240 11ef 	movw	r1, #495	@ 0x1ef
 800727a:	488c      	ldr	r0, [pc, #560]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800727c:	f7fc fd76 	bl	8003d6c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007280:	4b8b      	ldr	r3, [pc, #556]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007286:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728e:	4988      	ldr	r1, [pc, #544]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d01d      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00e      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072b2:	d009      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072bc:	d004      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 80072be:	f240 11fb 	movw	r1, #507	@ 0x1fb
 80072c2:	487a      	ldr	r0, [pc, #488]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80072c4:	f7fc fd52 	bl	8003d6c <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072c8:	4b79      	ldr	r3, [pc, #484]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d6:	4976      	ldr	r1, [pc, #472]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d01d      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072fa:	d009      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007300:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007304:	d004      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007306:	f240 2107 	movw	r1, #519	@ 0x207
 800730a:	4868      	ldr	r0, [pc, #416]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800730c:	f7fc fd2e 	bl	8003d6c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007310:	4b67      	ldr	r3, [pc, #412]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007316:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731e:	4964      	ldr	r1, [pc, #400]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d040      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800733e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007342:	d00e      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800734c:	d009      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007352:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007356:	d004      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007358:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800735c:	4853      	ldr	r0, [pc, #332]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800735e:	f7fc fd05 	bl	8003d6c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007362:	4b53      	ldr	r3, [pc, #332]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007368:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007370:	494f      	ldr	r1, [pc, #316]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007372:	4313      	orrs	r3, r2
 8007374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800737c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007380:	d106      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007382:	4b4b      	ldr	r3, [pc, #300]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	4a4a      	ldr	r2, [pc, #296]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007388:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800738c:	60d3      	str	r3, [r2, #12]
 800738e:	e011      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007394:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007398:	d10c      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3304      	adds	r3, #4
 800739e:	2101      	movs	r1, #1
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 f931 	bl	8007608 <RCCEx_PLLSAI1_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073aa:	7cfb      	ldrb	r3, [r7, #19]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 80073b0:	7cfb      	ldrb	r3, [r7, #19]
 80073b2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d040      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d013      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073d0:	d00e      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073da:	d009      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80073e4:	d004      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x764>
 80073e6:	f240 2141 	movw	r1, #577	@ 0x241
 80073ea:	4830      	ldr	r0, [pc, #192]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80073ec:	f7fc fcbe 	bl	8003d6c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073f0:	4b2f      	ldr	r3, [pc, #188]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fe:	492c      	ldr	r1, [pc, #176]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800740e:	d106      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007410:	4b27      	ldr	r3, [pc, #156]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	4a26      	ldr	r2, [pc, #152]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800741a:	60d3      	str	r3, [r2, #12]
 800741c:	e011      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007422:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007426:	d10c      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	2101      	movs	r1, #1
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f8ea 	bl	8007608 <RCCEx_PLLSAI1_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007438:	7cfb      	ldrb	r3, [r7, #19]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 800743e:	7cfb      	ldrb	r3, [r7, #19]
 8007440:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d044      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007452:	2b00      	cmp	r3, #0
 8007454:	d013      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800745a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800745e:	d00e      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007468:	d009      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800746e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007472:	d004      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8007474:	f240 2166 	movw	r1, #614	@ 0x266
 8007478:	480c      	ldr	r0, [pc, #48]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x820>)
 800747a:	f7fc fc77 	bl	8003d6c <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800747e:	4b0c      	ldr	r3, [pc, #48]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007484:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800748c:	4908      	ldr	r1, [pc, #32]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800749c:	d10a      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800749e:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	4a03      	ldr	r2, [pc, #12]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80074a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074a8:	60d3      	str	r3, [r2, #12]
 80074aa:	e015      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80074ac:	0800e0a0 	.word	0x0800e0a0
 80074b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074bc:	d10c      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3304      	adds	r3, #4
 80074c2:	2101      	movs	r1, #1
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f89f 	bl	8007608 <RCCEx_PLLSAI1_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074ce:	7cfb      	ldrb	r3, [r7, #19]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d047      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d013      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074f4:	d00e      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074fe:	d009      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007508:	d004      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800750a:	f240 2186 	movw	r1, #646	@ 0x286
 800750e:	483c      	ldr	r0, [pc, #240]	@ (8007600 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8007510:	f7fc fc2c 	bl	8003d6c <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007514:	4b3b      	ldr	r3, [pc, #236]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007522:	4938      	ldr	r1, [pc, #224]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800752e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007532:	d10d      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	2102      	movs	r1, #2
 800753a:	4618      	mov	r0, r3
 800753c:	f000 f864 	bl	8007608 <RCCEx_PLLSAI1_Config>
 8007540:	4603      	mov	r3, r0
 8007542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007544:	7cfb      	ldrb	r3, [r7, #19]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d014      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 800754a:	7cfb      	ldrb	r3, [r7, #19]
 800754c:	74bb      	strb	r3, [r7, #18]
 800754e:	e011      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007558:	d10c      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3320      	adds	r3, #32
 800755e:	2102      	movs	r1, #2
 8007560:	4618      	mov	r0, r3
 8007562:	f000 f9d1 	bl	8007908 <RCCEx_PLLSAI2_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800756a:	7cfb      	ldrb	r3, [r7, #19]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8007570:	7cfb      	ldrb	r3, [r7, #19]
 8007572:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d018      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800758c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007590:	d004      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007592:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8007596:	481a      	ldr	r0, [pc, #104]	@ (8007600 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8007598:	f7fc fbe8 	bl	8003d6c <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800759c:	4b19      	ldr	r3, [pc, #100]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075aa:	4916      	ldr	r1, [pc, #88]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01b      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x952>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d2:	d004      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x952>
 80075d4:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 80075d8:	4809      	ldr	r0, [pc, #36]	@ (8007600 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80075da:	f7fc fbc7 	bl	8003d6c <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075de:	4b09      	ldr	r3, [pc, #36]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80075e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ee:	4905      	ldr	r1, [pc, #20]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80075f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	0800e0a0 	.word	0x0800e0a0
 8007604:	40021000 	.word	0x40021000

08007608 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <RCCEx_PLLSAI1_Config+0x38>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d00c      	beq.n	8007640 <RCCEx_PLLSAI1_Config+0x38>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d008      	beq.n	8007640 <RCCEx_PLLSAI1_Config+0x38>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d004      	beq.n	8007640 <RCCEx_PLLSAI1_Config+0x38>
 8007636:	f640 3162 	movw	r1, #2914	@ 0xb62
 800763a:	4887      	ldr	r0, [pc, #540]	@ (8007858 <RCCEx_PLLSAI1_Config+0x250>)
 800763c:	f7fc fb96 	bl	8003d6c <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <RCCEx_PLLSAI1_Config+0x48>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b08      	cmp	r3, #8
 800764e:	d904      	bls.n	800765a <RCCEx_PLLSAI1_Config+0x52>
 8007650:	f640 3163 	movw	r1, #2915	@ 0xb63
 8007654:	4880      	ldr	r0, [pc, #512]	@ (8007858 <RCCEx_PLLSAI1_Config+0x250>)
 8007656:	f7fc fb89 	bl	8003d6c <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	2b07      	cmp	r3, #7
 8007660:	d903      	bls.n	800766a <RCCEx_PLLSAI1_Config+0x62>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	2b56      	cmp	r3, #86	@ 0x56
 8007668:	d904      	bls.n	8007674 <RCCEx_PLLSAI1_Config+0x6c>
 800766a:	f640 3164 	movw	r1, #2916	@ 0xb64
 800766e:	487a      	ldr	r0, [pc, #488]	@ (8007858 <RCCEx_PLLSAI1_Config+0x250>)
 8007670:	f7fc fb7c 	bl	8003d6c <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10b      	bne.n	8007698 <RCCEx_PLLSAI1_Config+0x90>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d105      	bne.n	8007698 <RCCEx_PLLSAI1_Config+0x90>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d007      	beq.n	80076a8 <RCCEx_PLLSAI1_Config+0xa0>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80076a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d004      	beq.n	80076b2 <RCCEx_PLLSAI1_Config+0xaa>
 80076a8:	f640 3165 	movw	r1, #2917	@ 0xb65
 80076ac:	486a      	ldr	r0, [pc, #424]	@ (8007858 <RCCEx_PLLSAI1_Config+0x250>)
 80076ae:	f7fc fb5d 	bl	8003d6c <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80076b2:	4b6a      	ldr	r3, [pc, #424]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d018      	beq.n	80076f0 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80076be:	4b67      	ldr	r3, [pc, #412]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f003 0203 	and.w	r2, r3, #3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d10d      	bne.n	80076ea <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
       ||
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80076d6:	4b61      	ldr	r3, [pc, #388]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	091b      	lsrs	r3, r3, #4
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
       ||
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d047      	beq.n	800777a <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	73fb      	strb	r3, [r7, #15]
 80076ee:	e044      	b.n	800777a <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d018      	beq.n	800772a <RCCEx_PLLSAI1_Config+0x122>
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d825      	bhi.n	8007748 <RCCEx_PLLSAI1_Config+0x140>
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d002      	beq.n	8007706 <RCCEx_PLLSAI1_Config+0xfe>
 8007700:	2b02      	cmp	r3, #2
 8007702:	d009      	beq.n	8007718 <RCCEx_PLLSAI1_Config+0x110>
 8007704:	e020      	b.n	8007748 <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007706:	4b55      	ldr	r3, [pc, #340]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d11d      	bne.n	800774e <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007716:	e01a      	b.n	800774e <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007718:	4b50      	ldr	r3, [pc, #320]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007720:	2b00      	cmp	r3, #0
 8007722:	d116      	bne.n	8007752 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007728:	e013      	b.n	8007752 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800772a:	4b4c      	ldr	r3, [pc, #304]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10f      	bne.n	8007756 <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007736:	4b49      	ldr	r3, [pc, #292]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d109      	bne.n	8007756 <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007746:	e006      	b.n	8007756 <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
      break;
 800774c:	e004      	b.n	8007758 <RCCEx_PLLSAI1_Config+0x150>
      break;
 800774e:	bf00      	nop
 8007750:	e002      	b.n	8007758 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <RCCEx_PLLSAI1_Config+0x150>
      break;
 8007756:	bf00      	nop
    }

    if(status == HAL_OK)
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10d      	bne.n	800777a <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800775e:	4b3f      	ldr	r3, [pc, #252]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6819      	ldr	r1, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	3b01      	subs	r3, #1
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	430b      	orrs	r3, r1
 8007774:	4939      	ldr	r1, [pc, #228]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 8007776:	4313      	orrs	r3, r2
 8007778:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f040 80ba 	bne.w	80078f6 <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007782:	4b36      	ldr	r3, [pc, #216]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a35      	ldr	r2, [pc, #212]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 8007788:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800778c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800778e:	f7fd f9af 	bl	8004af0 <HAL_GetTick>
 8007792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007794:	e009      	b.n	80077aa <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007796:	f7fd f9ab 	bl	8004af0 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d902      	bls.n	80077aa <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	73fb      	strb	r3, [r7, #15]
        break;
 80077a8:	e005      	b.n	80077b6 <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077aa:	4b2c      	ldr	r3, [pc, #176]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1ef      	bne.n	8007796 <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f040 809c 	bne.w	80078f6 <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d11e      	bne.n	8007802 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	2b07      	cmp	r3, #7
 80077ca:	d008      	beq.n	80077de <RCCEx_PLLSAI1_Config+0x1d6>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b11      	cmp	r3, #17
 80077d2:	d004      	beq.n	80077de <RCCEx_PLLSAI1_Config+0x1d6>
 80077d4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80077d8:	481f      	ldr	r0, [pc, #124]	@ (8007858 <RCCEx_PLLSAI1_Config+0x250>)
 80077da:	f7fc fac7 	bl	8003d6c <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077de:	4b1f      	ldr	r3, [pc, #124]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80077e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6892      	ldr	r2, [r2, #8]
 80077ee:	0211      	lsls	r1, r2, #8
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	68d2      	ldr	r2, [r2, #12]
 80077f4:	0912      	lsrs	r2, r2, #4
 80077f6:	0452      	lsls	r2, r2, #17
 80077f8:	430a      	orrs	r2, r1
 80077fa:	4918      	ldr	r1, [pc, #96]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	610b      	str	r3, [r1, #16]
 8007800:	e055      	b.n	80078ae <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d12b      	bne.n	8007860 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d010      	beq.n	8007832 <RCCEx_PLLSAI1_Config+0x22a>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b04      	cmp	r3, #4
 8007816:	d00c      	beq.n	8007832 <RCCEx_PLLSAI1_Config+0x22a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b06      	cmp	r3, #6
 800781e:	d008      	beq.n	8007832 <RCCEx_PLLSAI1_Config+0x22a>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d004      	beq.n	8007832 <RCCEx_PLLSAI1_Config+0x22a>
 8007828:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 800782c:	480a      	ldr	r0, [pc, #40]	@ (8007858 <RCCEx_PLLSAI1_Config+0x250>)
 800782e:	f7fc fa9d 	bl	8003d6c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007832:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800783a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6892      	ldr	r2, [r2, #8]
 8007842:	0211      	lsls	r1, r2, #8
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6912      	ldr	r2, [r2, #16]
 8007848:	0852      	lsrs	r2, r2, #1
 800784a:	3a01      	subs	r2, #1
 800784c:	0552      	lsls	r2, r2, #21
 800784e:	430a      	orrs	r2, r1
 8007850:	4902      	ldr	r1, [pc, #8]	@ (800785c <RCCEx_PLLSAI1_Config+0x254>)
 8007852:	4313      	orrs	r3, r2
 8007854:	610b      	str	r3, [r1, #16]
 8007856:	e02a      	b.n	80078ae <RCCEx_PLLSAI1_Config+0x2a6>
 8007858:	0800e0a0 	.word	0x0800e0a0
 800785c:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d010      	beq.n	800788a <RCCEx_PLLSAI1_Config+0x282>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	2b04      	cmp	r3, #4
 800786e:	d00c      	beq.n	800788a <RCCEx_PLLSAI1_Config+0x282>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	2b06      	cmp	r3, #6
 8007876:	d008      	beq.n	800788a <RCCEx_PLLSAI1_Config+0x282>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d004      	beq.n	800788a <RCCEx_PLLSAI1_Config+0x282>
 8007880:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8007884:	481e      	ldr	r0, [pc, #120]	@ (8007900 <RCCEx_PLLSAI1_Config+0x2f8>)
 8007886:	f7fc fa71 	bl	8003d6c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800788a:	4b1e      	ldr	r3, [pc, #120]	@ (8007904 <RCCEx_PLLSAI1_Config+0x2fc>)
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007892:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6892      	ldr	r2, [r2, #8]
 800789a:	0211      	lsls	r1, r2, #8
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6952      	ldr	r2, [r2, #20]
 80078a0:	0852      	lsrs	r2, r2, #1
 80078a2:	3a01      	subs	r2, #1
 80078a4:	0652      	lsls	r2, r2, #25
 80078a6:	430a      	orrs	r2, r1
 80078a8:	4916      	ldr	r1, [pc, #88]	@ (8007904 <RCCEx_PLLSAI1_Config+0x2fc>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80078ae:	4b15      	ldr	r3, [pc, #84]	@ (8007904 <RCCEx_PLLSAI1_Config+0x2fc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a14      	ldr	r2, [pc, #80]	@ (8007904 <RCCEx_PLLSAI1_Config+0x2fc>)
 80078b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ba:	f7fd f919 	bl	8004af0 <HAL_GetTick>
 80078be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078c0:	e009      	b.n	80078d6 <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078c2:	f7fd f915 	bl	8004af0 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d902      	bls.n	80078d6 <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	73fb      	strb	r3, [r7, #15]
          break;
 80078d4:	e005      	b.n	80078e2 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007904 <RCCEx_PLLSAI1_Config+0x2fc>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0ef      	beq.n	80078c2 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d106      	bne.n	80078f6 <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80078e8:	4b06      	ldr	r3, [pc, #24]	@ (8007904 <RCCEx_PLLSAI1_Config+0x2fc>)
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	4904      	ldr	r1, [pc, #16]	@ (8007904 <RCCEx_PLLSAI1_Config+0x2fc>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	0800e0a0 	.word	0x0800e0a0
 8007904:	40021000 	.word	0x40021000

08007908 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d010      	beq.n	8007940 <RCCEx_PLLSAI2_Config+0x38>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d00c      	beq.n	8007940 <RCCEx_PLLSAI2_Config+0x38>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b02      	cmp	r3, #2
 800792c:	d008      	beq.n	8007940 <RCCEx_PLLSAI2_Config+0x38>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b03      	cmp	r3, #3
 8007934:	d004      	beq.n	8007940 <RCCEx_PLLSAI2_Config+0x38>
 8007936:	f640 412f 	movw	r1, #3119	@ 0xc2f
 800793a:	4896      	ldr	r0, [pc, #600]	@ (8007b94 <RCCEx_PLLSAI2_Config+0x28c>)
 800793c:	f7fc fa16 	bl	8003d6c <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <RCCEx_PLLSAI2_Config+0x48>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b08      	cmp	r3, #8
 800794e:	d904      	bls.n	800795a <RCCEx_PLLSAI2_Config+0x52>
 8007950:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8007954:	488f      	ldr	r0, [pc, #572]	@ (8007b94 <RCCEx_PLLSAI2_Config+0x28c>)
 8007956:	f7fc fa09 	bl	8003d6c <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	2b07      	cmp	r3, #7
 8007960:	d903      	bls.n	800796a <RCCEx_PLLSAI2_Config+0x62>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b56      	cmp	r3, #86	@ 0x56
 8007968:	d904      	bls.n	8007974 <RCCEx_PLLSAI2_Config+0x6c>
 800796a:	f640 4131 	movw	r1, #3121	@ 0xc31
 800796e:	4889      	ldr	r0, [pc, #548]	@ (8007b94 <RCCEx_PLLSAI2_Config+0x28c>)
 8007970:	f7fc f9fc 	bl	8003d6c <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d105      	bne.n	800798c <RCCEx_PLLSAI2_Config+0x84>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <RCCEx_PLLSAI2_Config+0x94>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <RCCEx_PLLSAI2_Config+0x9e>
 800799c:	f640 4132 	movw	r1, #3122	@ 0xc32
 80079a0:	487c      	ldr	r0, [pc, #496]	@ (8007b94 <RCCEx_PLLSAI2_Config+0x28c>)
 80079a2:	f7fc f9e3 	bl	8003d6c <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d018      	beq.n	80079e4 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80079b2:	4b79      	ldr	r3, [pc, #484]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f003 0203 	and.w	r2, r3, #3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d10d      	bne.n	80079de <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
       ||
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80079ca:	4b73      	ldr	r3, [pc, #460]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
       ||
 80079da:	429a      	cmp	r2, r3
 80079dc:	d047      	beq.n	8007a6e <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
 80079e2:	e044      	b.n	8007a6e <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d018      	beq.n	8007a1e <RCCEx_PLLSAI2_Config+0x116>
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d825      	bhi.n	8007a3c <RCCEx_PLLSAI2_Config+0x134>
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d002      	beq.n	80079fa <RCCEx_PLLSAI2_Config+0xf2>
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d009      	beq.n	8007a0c <RCCEx_PLLSAI2_Config+0x104>
 80079f8:	e020      	b.n	8007a3c <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80079fa:	4b67      	ldr	r3, [pc, #412]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d11d      	bne.n	8007a42 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a0a:	e01a      	b.n	8007a42 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a0c:	4b62      	ldr	r3, [pc, #392]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d116      	bne.n	8007a46 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a1c:	e013      	b.n	8007a46 <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10f      	bne.n	8007a4a <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d109      	bne.n	8007a4a <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a3a:	e006      	b.n	8007a4a <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a40:	e004      	b.n	8007a4c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8007a42:	bf00      	nop
 8007a44:	e002      	b.n	8007a4c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8007a46:	bf00      	nop
 8007a48:	e000      	b.n	8007a4c <RCCEx_PLLSAI2_Config+0x144>
      break;
 8007a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10d      	bne.n	8007a6e <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a52:	4b51      	ldr	r3, [pc, #324]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6819      	ldr	r1, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	430b      	orrs	r3, r1
 8007a68:	494b      	ldr	r1, [pc, #300]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 808a 	bne.w	8007b8a <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007a76:	4b48      	ldr	r3, [pc, #288]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a47      	ldr	r2, [pc, #284]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007a7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a82:	f7fd f835 	bl	8004af0 <HAL_GetTick>
 8007a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007a88:	e009      	b.n	8007a9e <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007a8a:	f7fd f831 	bl	8004af0 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d902      	bls.n	8007a9e <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	73fb      	strb	r3, [r7, #15]
        break;
 8007a9c:	e005      	b.n	8007aaa <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1ef      	bne.n	8007a8a <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d16c      	bne.n	8007b8a <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d11e      	bne.n	8007af4 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	2b07      	cmp	r3, #7
 8007abc:	d008      	beq.n	8007ad0 <RCCEx_PLLSAI2_Config+0x1c8>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	2b11      	cmp	r3, #17
 8007ac4:	d004      	beq.n	8007ad0 <RCCEx_PLLSAI2_Config+0x1c8>
 8007ac6:	f640 4185 	movw	r1, #3205	@ 0xc85
 8007aca:	4832      	ldr	r0, [pc, #200]	@ (8007b94 <RCCEx_PLLSAI2_Config+0x28c>)
 8007acc:	f7fc f94e 	bl	8003d6c <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ad0:	4b31      	ldr	r3, [pc, #196]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6892      	ldr	r2, [r2, #8]
 8007ae0:	0211      	lsls	r1, r2, #8
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68d2      	ldr	r2, [r2, #12]
 8007ae6:	0912      	lsrs	r2, r2, #4
 8007ae8:	0452      	lsls	r2, r2, #17
 8007aea:	430a      	orrs	r2, r1
 8007aec:	492a      	ldr	r1, [pc, #168]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	614b      	str	r3, [r1, #20]
 8007af2:	e026      	b.n	8007b42 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d010      	beq.n	8007b1e <RCCEx_PLLSAI2_Config+0x216>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d00c      	beq.n	8007b1e <RCCEx_PLLSAI2_Config+0x216>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	2b06      	cmp	r3, #6
 8007b0a:	d008      	beq.n	8007b1e <RCCEx_PLLSAI2_Config+0x216>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d004      	beq.n	8007b1e <RCCEx_PLLSAI2_Config+0x216>
 8007b14:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 8007b18:	481e      	ldr	r0, [pc, #120]	@ (8007b94 <RCCEx_PLLSAI2_Config+0x28c>)
 8007b1a:	f7fc f927 	bl	8003d6c <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007b26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6892      	ldr	r2, [r2, #8]
 8007b2e:	0211      	lsls	r1, r2, #8
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6912      	ldr	r2, [r2, #16]
 8007b34:	0852      	lsrs	r2, r2, #1
 8007b36:	3a01      	subs	r2, #1
 8007b38:	0652      	lsls	r2, r2, #25
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	4916      	ldr	r1, [pc, #88]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b42:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a14      	ldr	r2, [pc, #80]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4e:	f7fc ffcf 	bl	8004af0 <HAL_GetTick>
 8007b52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b54:	e009      	b.n	8007b6a <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b56:	f7fc ffcb 	bl	8004af0 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d902      	bls.n	8007b6a <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	73fb      	strb	r3, [r7, #15]
          break;
 8007b68:	e005      	b.n	8007b76 <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0ef      	beq.n	8007b56 <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007b7c:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007b7e:	695a      	ldr	r2, [r3, #20]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	4904      	ldr	r1, [pc, #16]	@ (8007b98 <RCCEx_PLLSAI2_Config+0x290>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	0800e0a0 	.word	0x0800e0a0
 8007b98:	40021000 	.word	0x40021000

08007b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e1dd      	b.n	8007f6a <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a7b      	ldr	r2, [pc, #492]	@ (8007da0 <HAL_SPI_Init+0x204>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00e      	beq.n	8007bd6 <HAL_SPI_Init+0x3a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a79      	ldr	r2, [pc, #484]	@ (8007da4 <HAL_SPI_Init+0x208>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d009      	beq.n	8007bd6 <HAL_SPI_Init+0x3a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a78      	ldr	r2, [pc, #480]	@ (8007da8 <HAL_SPI_Init+0x20c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d004      	beq.n	8007bd6 <HAL_SPI_Init+0x3a>
 8007bcc:	f240 1147 	movw	r1, #327	@ 0x147
 8007bd0:	4876      	ldr	r0, [pc, #472]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007bd2:	f7fc f8cb 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <HAL_SPI_Init+0x56>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007be6:	d004      	beq.n	8007bf2 <HAL_SPI_Init+0x56>
 8007be8:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8007bec:	486f      	ldr	r0, [pc, #444]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007bee:	f7fc f8bd 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00e      	beq.n	8007c18 <HAL_SPI_Init+0x7c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c02:	d009      	beq.n	8007c18 <HAL_SPI_Init+0x7c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c0c:	d004      	beq.n	8007c18 <HAL_SPI_Init+0x7c>
 8007c0e:	f240 1149 	movw	r1, #329	@ 0x149
 8007c12:	4866      	ldr	r0, [pc, #408]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007c14:	f7fc f8aa 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007c20:	d040      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8007c2a:	d03b      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8007c34:	d036      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c3e:	d031      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8007c48:	d02c      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007c52:	d027      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8007c5c:	d022      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c66:	d01d      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c70:	d018      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c7a:	d013      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007c84:	d00e      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c8e:	d009      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c98:	d004      	beq.n	8007ca4 <HAL_SPI_Init+0x108>
 8007c9a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8007c9e:	4843      	ldr	r0, [pc, #268]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007ca0:	f7fc f864 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cac:	d00d      	beq.n	8007cca <HAL_SPI_Init+0x12e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <HAL_SPI_Init+0x12e>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cbe:	d004      	beq.n	8007cca <HAL_SPI_Init+0x12e>
 8007cc0:	f240 114b 	movw	r1, #331	@ 0x14b
 8007cc4:	4839      	ldr	r0, [pc, #228]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007cc6:	f7fc f851 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d008      	beq.n	8007ce4 <HAL_SPI_Init+0x148>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <HAL_SPI_Init+0x148>
 8007cda:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8007cde:	4833      	ldr	r0, [pc, #204]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007ce0:	f7fc f844 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d020      	beq.n	8007d2e <HAL_SPI_Init+0x192>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d01c      	beq.n	8007d2e <HAL_SPI_Init+0x192>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d018      	beq.n	8007d2e <HAL_SPI_Init+0x192>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	2b18      	cmp	r3, #24
 8007d02:	d014      	beq.n	8007d2e <HAL_SPI_Init+0x192>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d010      	beq.n	8007d2e <HAL_SPI_Init+0x192>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	2b28      	cmp	r3, #40	@ 0x28
 8007d12:	d00c      	beq.n	8007d2e <HAL_SPI_Init+0x192>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	2b30      	cmp	r3, #48	@ 0x30
 8007d1a:	d008      	beq.n	8007d2e <HAL_SPI_Init+0x192>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	2b38      	cmp	r3, #56	@ 0x38
 8007d22:	d004      	beq.n	8007d2e <HAL_SPI_Init+0x192>
 8007d24:	f240 114d 	movw	r1, #333	@ 0x14d
 8007d28:	4820      	ldr	r0, [pc, #128]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007d2a:	f7fc f81f 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d008      	beq.n	8007d48 <HAL_SPI_Init+0x1ac>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	2b80      	cmp	r3, #128	@ 0x80
 8007d3c:	d004      	beq.n	8007d48 <HAL_SPI_Init+0x1ac>
 8007d3e:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8007d42:	481a      	ldr	r0, [pc, #104]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007d44:	f7fc f812 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <HAL_SPI_Init+0x1c6>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	2b10      	cmp	r3, #16
 8007d56:	d004      	beq.n	8007d62 <HAL_SPI_Init+0x1c6>
 8007d58:	f240 114f 	movw	r1, #335	@ 0x14f
 8007d5c:	4813      	ldr	r0, [pc, #76]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007d5e:	f7fc f805 	bl	8003d6c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d151      	bne.n	8007e0e <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d008      	beq.n	8007d84 <HAL_SPI_Init+0x1e8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d004      	beq.n	8007d84 <HAL_SPI_Init+0x1e8>
 8007d7a:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8007d7e:	480b      	ldr	r0, [pc, #44]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007d80:	f7fb fff4 	bl	8003d6c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d011      	beq.n	8007db0 <HAL_SPI_Init+0x214>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d00d      	beq.n	8007db0 <HAL_SPI_Init+0x214>
 8007d94:	f240 1153 	movw	r1, #339	@ 0x153
 8007d98:	4804      	ldr	r0, [pc, #16]	@ (8007dac <HAL_SPI_Init+0x210>)
 8007d9a:	f7fb ffe7 	bl	8003d6c <assert_failed>
 8007d9e:	e007      	b.n	8007db0 <HAL_SPI_Init+0x214>
 8007da0:	40013000 	.word	0x40013000
 8007da4:	40003800 	.word	0x40003800
 8007da8:	40003c00 	.word	0x40003c00
 8007dac:	0800e0dc 	.word	0x0800e0dc

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007db8:	d125      	bne.n	8007e06 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d050      	beq.n	8007e64 <HAL_SPI_Init+0x2c8>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	2b08      	cmp	r3, #8
 8007dc8:	d04c      	beq.n	8007e64 <HAL_SPI_Init+0x2c8>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	2b10      	cmp	r3, #16
 8007dd0:	d048      	beq.n	8007e64 <HAL_SPI_Init+0x2c8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	2b18      	cmp	r3, #24
 8007dd8:	d044      	beq.n	8007e64 <HAL_SPI_Init+0x2c8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	d040      	beq.n	8007e64 <HAL_SPI_Init+0x2c8>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	2b28      	cmp	r3, #40	@ 0x28
 8007de8:	d03c      	beq.n	8007e64 <HAL_SPI_Init+0x2c8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	2b30      	cmp	r3, #48	@ 0x30
 8007df0:	d038      	beq.n	8007e64 <HAL_SPI_Init+0x2c8>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	2b38      	cmp	r3, #56	@ 0x38
 8007df8:	d034      	beq.n	8007e64 <HAL_SPI_Init+0x2c8>
 8007dfa:	f240 1157 	movw	r1, #343	@ 0x157
 8007dfe:	485d      	ldr	r0, [pc, #372]	@ (8007f74 <HAL_SPI_Init+0x3d8>)
 8007e00:	f7fb ffb4 	bl	8003d6c <assert_failed>
 8007e04:	e02e      	b.n	8007e64 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	61da      	str	r2, [r3, #28]
 8007e0c:	e02a      	b.n	8007e64 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d020      	beq.n	8007e58 <HAL_SPI_Init+0x2bc>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d01c      	beq.n	8007e58 <HAL_SPI_Init+0x2bc>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d018      	beq.n	8007e58 <HAL_SPI_Init+0x2bc>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	2b18      	cmp	r3, #24
 8007e2c:	d014      	beq.n	8007e58 <HAL_SPI_Init+0x2bc>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d010      	beq.n	8007e58 <HAL_SPI_Init+0x2bc>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	2b28      	cmp	r3, #40	@ 0x28
 8007e3c:	d00c      	beq.n	8007e58 <HAL_SPI_Init+0x2bc>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	2b30      	cmp	r3, #48	@ 0x30
 8007e44:	d008      	beq.n	8007e58 <HAL_SPI_Init+0x2bc>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	69db      	ldr	r3, [r3, #28]
 8007e4a:	2b38      	cmp	r3, #56	@ 0x38
 8007e4c:	d004      	beq.n	8007e58 <HAL_SPI_Init+0x2bc>
 8007e4e:	f240 1161 	movw	r1, #353	@ 0x161
 8007e52:	4848      	ldr	r0, [pc, #288]	@ (8007f74 <HAL_SPI_Init+0x3d8>)
 8007e54:	f7fb ff8a 	bl	8003d6c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fb ffb8 	bl	8003df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ea4:	d902      	bls.n	8007eac <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e002      	b.n	8007eb2 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007eb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007eba:	d007      	beq.n	8007ecc <HAL_SPI_Init+0x330>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ec4:	d002      	beq.n	8007ecc <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f04:	431a      	orrs	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0e:	ea42 0103 	orr.w	r1, r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	0c1b      	lsrs	r3, r3, #16
 8007f28:	f003 0204 	and.w	r2, r3, #4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	431a      	orrs	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f3a:	f003 0308 	and.w	r3, r3, #8
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f48:	ea42 0103 	orr.w	r1, r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	0800e0dc 	.word	0x0800e0dc

08007f78 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d104      	bne.n	8007f98 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007f8e:	f640 0172 	movw	r1, #2162	@ 0x872
 8007f92:	487f      	ldr	r0, [pc, #508]	@ (8008190 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8007f94:	f7fb feea 	bl	8003d6c <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <HAL_SPI_TransmitReceive_DMA+0x32>
 8007fa0:	f640 0173 	movw	r1, #2163	@ 0x873
 8007fa4:	487a      	ldr	r0, [pc, #488]	@ (8008190 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8007fa6:	f7fb fee1 	bl	8003d6c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <HAL_SPI_TransmitReceive_DMA+0x44>
 8007fb2:	f640 0176 	movw	r1, #2166	@ 0x876
 8007fb6:	4876      	ldr	r0, [pc, #472]	@ (8008190 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8007fb8:	f7fb fed8 	bl	8003d6c <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fc2:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d00c      	beq.n	8007fea <HAL_SPI_TransmitReceive_DMA+0x72>
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fd6:	d106      	bne.n	8007fe6 <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <HAL_SPI_TransmitReceive_DMA+0x6e>
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d001      	beq.n	8007fea <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e15f      	b.n	80082aa <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d005      	beq.n	8007ffc <HAL_SPI_TransmitReceive_DMA+0x84>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <HAL_SPI_TransmitReceive_DMA+0x84>
 8007ff6:	887b      	ldrh	r3, [r7, #2]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e154      	b.n	80082aa <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <HAL_SPI_TransmitReceive_DMA+0x96>
 800800a:	2302      	movs	r3, #2
 800800c:	e14d      	b.n	80082aa <HAL_SPI_TransmitReceive_DMA+0x332>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b04      	cmp	r3, #4
 8008020:	d003      	beq.n	800802a <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2205      	movs	r2, #5
 8008026:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	887a      	ldrh	r2, [r7, #2]
 800803a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	887a      	ldrh	r2, [r7, #2]
 8008040:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	887a      	ldrh	r2, [r7, #2]
 800804c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	887a      	ldrh	r2, [r7, #2]
 8008054:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8008072:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800807c:	d908      	bls.n	8008090 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	e06f      	b.n	8008170 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800809e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080aa:	d126      	bne.n	80080fa <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10f      	bne.n	80080d8 <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080c6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080d6:	e010      	b.n	80080fa <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080e6:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	085b      	lsrs	r3, r3, #1
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3301      	adds	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008104:	d134      	bne.n	8008170 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008114:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800811c:	b29b      	uxth	r3, r3
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	d111      	bne.n	800814a <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008134:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800813c:	b29b      	uxth	r3, r3
 800813e:	085b      	lsrs	r3, r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008148:	e012      	b.n	8008170 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008158:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008160:	b29b      	uxth	r3, r3
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	b29b      	uxth	r3, r3
 8008166:	3301      	adds	r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b04      	cmp	r3, #4
 800817a:	d10f      	bne.n	800819c <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008180:	4a04      	ldr	r2, [pc, #16]	@ (8008194 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8008182:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008188:	4a03      	ldr	r2, [pc, #12]	@ (8008198 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800818a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800818c:	e00e      	b.n	80081ac <HAL_SPI_TransmitReceive_DMA+0x234>
 800818e:	bf00      	nop
 8008190:	0800e0dc 	.word	0x0800e0dc
 8008194:	08008665 	.word	0x08008665
 8008198:	0800852d 	.word	0x0800852d
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a0:	4a44      	ldr	r2, [pc, #272]	@ (80082b4 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 80081a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a8:	4a43      	ldr	r2, [pc, #268]	@ (80082b8 <HAL_SPI_TransmitReceive_DMA+0x340>)
 80081aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b0:	4a42      	ldr	r2, [pc, #264]	@ (80082bc <HAL_SPI_TransmitReceive_DMA+0x344>)
 80081b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081b8:	2200      	movs	r2, #0
 80081ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	330c      	adds	r3, #12
 80081c6:	4619      	mov	r1, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80081d6:	f7fc ff8f 	bl	80050f8 <HAL_DMA_Start_IT>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081e4:	f043 0210 	orr.w	r2, r3, #16
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e058      	b.n	80082aa <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800820c:	2200      	movs	r2, #0
 800820e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008214:	2200      	movs	r2, #0
 8008216:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821c:	2200      	movs	r2, #0
 800821e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008224:	2200      	movs	r2, #0
 8008226:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008230:	4619      	mov	r1, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	330c      	adds	r3, #12
 8008238:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800823e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008240:	f7fc ff5a 	bl	80050f8 <HAL_DMA_Start_IT>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800824e:	f043 0210 	orr.w	r2, r3, #16
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e023      	b.n	80082aa <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826c:	2b40      	cmp	r3, #64	@ 0x40
 800826e:	d007      	beq.n	8008280 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800827e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0220 	orr.w	r2, r2, #32
 8008296:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0202 	orr.w	r2, r2, #2
 80082a6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	08008681 	.word	0x08008681
 80082b8:	080085d5 	.word	0x080085d5
 80082bc:	0800869d 	.word	0x0800869d

080082c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	099b      	lsrs	r3, r3, #6
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10f      	bne.n	8008304 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	099b      	lsrs	r3, r3, #6
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d004      	beq.n	8008304 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
    return;
 8008302:	e0d7      	b.n	80084b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	085b      	lsrs	r3, r3, #1
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <HAL_SPI_IRQHandler+0x66>
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	09db      	lsrs	r3, r3, #7
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d004      	beq.n	8008326 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
    return;
 8008324:	e0c6      	b.n	80084b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	095b      	lsrs	r3, r3, #5
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10c      	bne.n	800834c <HAL_SPI_IRQHandler+0x8c>
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	099b      	lsrs	r3, r3, #6
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 80b4 	beq.w	80084b4 <HAL_SPI_IRQHandler+0x1f4>
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80ad 	beq.w	80084b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	099b      	lsrs	r3, r3, #6
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d023      	beq.n	80083ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b03      	cmp	r3, #3
 8008370:	d011      	beq.n	8008396 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008376:	f043 0204 	orr.w	r2, r3, #4
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	e00b      	b.n	80083ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008396:	2300      	movs	r3, #0
 8008398:	613b      	str	r3, [r7, #16]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	613b      	str	r3, [r7, #16]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	613b      	str	r3, [r7, #16]
 80083aa:	693b      	ldr	r3, [r7, #16]
        return;
 80083ac:	e082      	b.n	80084b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	095b      	lsrs	r3, r3, #5
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d014      	beq.n	80083e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083be:	f043 0201 	orr.w	r2, r3, #1
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	60fb      	str	r3, [r7, #12]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	0a1b      	lsrs	r3, r3, #8
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00c      	beq.n	800840a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f4:	f043 0208 	orr.w	r2, r3, #8
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80083fc:	2300      	movs	r3, #0
 80083fe:	60bb      	str	r3, [r7, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	60bb      	str	r3, [r7, #8]
 8008408:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04f      	beq.n	80084b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008420:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <HAL_SPI_IRQHandler+0x17e>
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d034      	beq.n	80084a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0203 	bic.w	r2, r2, #3
 800844c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008452:	2b00      	cmp	r3, #0
 8008454:	d011      	beq.n	800847a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800845a:	4a18      	ldr	r2, [pc, #96]	@ (80084bc <HAL_SPI_IRQHandler+0x1fc>)
 800845c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008462:	4618      	mov	r0, r3
 8008464:	f7fc feb6 	bl	80051d4 <HAL_DMA_Abort_IT>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800847e:	2b00      	cmp	r3, #0
 8008480:	d016      	beq.n	80084b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008486:	4a0d      	ldr	r2, [pc, #52]	@ (80084bc <HAL_SPI_IRQHandler+0x1fc>)
 8008488:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800848e:	4618      	mov	r0, r3
 8008490:	f7fc fea0 	bl	80051d4 <HAL_DMA_Abort_IT>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800849e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80084a6:	e003      	b.n	80084b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f827 	bl	80084fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80084ae:	e000      	b.n	80084b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80084b0:	bf00      	nop
    return;
 80084b2:	bf00      	nop
  }
}
 80084b4:	3720      	adds	r7, #32
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	080086dd 	.word	0x080086dd

080084c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800851e:	b2db      	uxtb	r3, r3
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800853a:	f7fc fad9 	bl	8004af0 <HAL_GetTick>
 800853e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b20      	cmp	r3, #32
 800854c:	d03c      	beq.n	80085c8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 0220 	bic.w	r2, r2, #32
 800855c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10d      	bne.n	8008582 <SPI_DMAReceiveCplt+0x56>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800856e:	d108      	bne.n	8008582 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0203 	bic.w	r2, r2, #3
 800857e:	605a      	str	r2, [r3, #4]
 8008580:	e007      	b.n	8008592 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0201 	bic.w	r2, r2, #1
 8008590:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	2164      	movs	r1, #100	@ 0x64
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 f9d4 	bl	8008944 <SPI_EndRxTransaction>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2220      	movs	r2, #32
 80085a6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff ff9b 	bl	80084fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80085c6:	e002      	b.n	80085ce <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff ff79 	bl	80084c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085e2:	f7fc fa85 	bl	8004af0 <HAL_GetTick>
 80085e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	d030      	beq.n	8008658 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0220 	bic.w	r2, r2, #32
 8008604:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	2164      	movs	r1, #100	@ 0x64
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 f9f2 	bl	80089f4 <SPI_EndRxTxTransaction>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800861a:	f043 0220 	orr.w	r2, r3, #32
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0203 	bic.w	r2, r2, #3
 8008630:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff ff53 	bl	80084fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008656:	e002      	b.n	800865e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f7fb fb63 	bl	8003d24 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008670:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f7ff ff2e 	bl	80084d4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008678:	bf00      	nop
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff ff2a 	bl	80084e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008694:	bf00      	nop
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0203 	bic.w	r2, r2, #3
 80086b8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086be:	f043 0210 	orr.w	r2, r3, #16
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff ff14 	bl	80084fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7ff feff 	bl	80084fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	4613      	mov	r3, r2
 8008716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008718:	f7fc f9ea 	bl	8004af0 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	4413      	add	r3, r2
 8008726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008728:	f7fc f9e2 	bl	8004af0 <HAL_GetTick>
 800872c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800872e:	4b39      	ldr	r3, [pc, #228]	@ (8008814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	015b      	lsls	r3, r3, #5
 8008734:	0d1b      	lsrs	r3, r3, #20
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	fb02 f303 	mul.w	r3, r2, r3
 800873c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800873e:	e054      	b.n	80087ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008746:	d050      	beq.n	80087ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008748:	f7fc f9d2 	bl	8004af0 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	429a      	cmp	r2, r3
 8008756:	d902      	bls.n	800875e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d13d      	bne.n	80087da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800876c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008776:	d111      	bne.n	800879c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008780:	d004      	beq.n	800878c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800878a:	d107      	bne.n	800879c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800879a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087a4:	d10f      	bne.n	80087c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e017      	b.n	800880a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4013      	ands	r3, r2
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	bf0c      	ite	eq
 80087fa:	2301      	moveq	r3, #1
 80087fc:	2300      	movne	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	429a      	cmp	r2, r3
 8008806:	d19b      	bne.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000010 	.word	0x20000010

08008818 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	@ 0x28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800882a:	f7fc f961 	bl	8004af0 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	4413      	add	r3, r2
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800883a:	f7fc f959 	bl	8004af0 <HAL_GetTick>
 800883e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	330c      	adds	r3, #12
 8008846:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008848:	4b3d      	ldr	r3, [pc, #244]	@ (8008940 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	00da      	lsls	r2, r3, #3
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	0d1b      	lsrs	r3, r3, #20
 8008858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800885a:	fb02 f303 	mul.w	r3, r2, r3
 800885e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008860:	e060      	b.n	8008924 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008868:	d107      	bne.n	800887a <SPI_WaitFifoStateUntilTimeout+0x62>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d104      	bne.n	800887a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008878:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d050      	beq.n	8008924 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008882:	f7fc f935 	bl	8004af0 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800888e:	429a      	cmp	r2, r3
 8008890:	d902      	bls.n	8008898 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d13d      	bne.n	8008914 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80088a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088b0:	d111      	bne.n	80088d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088ba:	d004      	beq.n	80088c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088c4:	d107      	bne.n	80088d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088de:	d10f      	bne.n	8008900 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e010      	b.n	8008936 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	3b01      	subs	r3, #1
 8008922:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	4013      	ands	r3, r2
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d196      	bne.n	8008862 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3728      	adds	r7, #40	@ 0x28
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000010 	.word	0x20000010

08008944 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008958:	d111      	bne.n	800897e <SPI_EndRxTransaction+0x3a>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008962:	d004      	beq.n	800896e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800896c:	d107      	bne.n	800897e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800897c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	2180      	movs	r1, #128	@ 0x80
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff febd 	bl	8008708 <SPI_WaitFlagStateUntilTimeout>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d007      	beq.n	80089a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008998:	f043 0220 	orr.w	r2, r3, #32
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e023      	b.n	80089ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089ac:	d11d      	bne.n	80089ea <SPI_EndRxTransaction+0xa6>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089b6:	d004      	beq.n	80089c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c0:	d113      	bne.n	80089ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff ff22 	bl	8008818 <SPI_WaitFifoStateUntilTimeout>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089de:	f043 0220 	orr.w	r2, r3, #32
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e000      	b.n	80089ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af02      	add	r7, sp, #8
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7ff ff03 	bl	8008818 <SPI_WaitFifoStateUntilTimeout>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a1c:	f043 0220 	orr.w	r2, r3, #32
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e027      	b.n	8008a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2180      	movs	r1, #128	@ 0x80
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f7ff fe68 	bl	8008708 <SPI_WaitFlagStateUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d007      	beq.n	8008a4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a42:	f043 0220 	orr.w	r2, r3, #32
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e014      	b.n	8008a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fedc 	bl	8008818 <SPI_WaitFifoStateUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a6a:	f043 0220 	orr.w	r2, r3, #32
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e000      	b.n	8008a78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e0e6      	b.n	8008c60 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a74      	ldr	r2, [pc, #464]	@ (8008c68 <HAL_TIM_Base_Init+0x1e8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d036      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa4:	d031      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a70      	ldr	r2, [pc, #448]	@ (8008c6c <HAL_TIM_Base_Init+0x1ec>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d02c      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a6e      	ldr	r2, [pc, #440]	@ (8008c70 <HAL_TIM_Base_Init+0x1f0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d027      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a6d      	ldr	r2, [pc, #436]	@ (8008c74 <HAL_TIM_Base_Init+0x1f4>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d022      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8008c78 <HAL_TIM_Base_Init+0x1f8>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d01d      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a6a      	ldr	r2, [pc, #424]	@ (8008c7c <HAL_TIM_Base_Init+0x1fc>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d018      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a68      	ldr	r2, [pc, #416]	@ (8008c80 <HAL_TIM_Base_Init+0x200>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d013      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a67      	ldr	r2, [pc, #412]	@ (8008c84 <HAL_TIM_Base_Init+0x204>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00e      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a65      	ldr	r2, [pc, #404]	@ (8008c88 <HAL_TIM_Base_Init+0x208>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d009      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a64      	ldr	r2, [pc, #400]	@ (8008c8c <HAL_TIM_Base_Init+0x20c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d004      	beq.n	8008b0a <HAL_TIM_Base_Init+0x8a>
 8008b00:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8008b04:	4862      	ldr	r0, [pc, #392]	@ (8008c90 <HAL_TIM_Base_Init+0x210>)
 8008b06:	f7fb f931 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d014      	beq.n	8008b3c <HAL_TIM_Base_Init+0xbc>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d010      	beq.n	8008b3c <HAL_TIM_Base_Init+0xbc>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d00c      	beq.n	8008b3c <HAL_TIM_Base_Init+0xbc>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	2b40      	cmp	r3, #64	@ 0x40
 8008b28:	d008      	beq.n	8008b3c <HAL_TIM_Base_Init+0xbc>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b60      	cmp	r3, #96	@ 0x60
 8008b30:	d004      	beq.n	8008b3c <HAL_TIM_Base_Init+0xbc>
 8008b32:	f240 1117 	movw	r1, #279	@ 0x117
 8008b36:	4856      	ldr	r0, [pc, #344]	@ (8008c90 <HAL_TIM_Base_Init+0x210>)
 8008b38:	f7fb f918 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00e      	beq.n	8008b62 <HAL_TIM_Base_Init+0xe2>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b4c:	d009      	beq.n	8008b62 <HAL_TIM_Base_Init+0xe2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b56:	d004      	beq.n	8008b62 <HAL_TIM_Base_Init+0xe2>
 8008b58:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8008b5c:	484c      	ldr	r0, [pc, #304]	@ (8008c90 <HAL_TIM_Base_Init+0x210>)
 8008b5e:	f7fb f905 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b6a:	d004      	beq.n	8008b76 <HAL_TIM_Base_Init+0xf6>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a40      	ldr	r2, [pc, #256]	@ (8008c74 <HAL_TIM_Base_Init+0x1f4>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d107      	bne.n	8008b86 <HAL_TIM_Base_Init+0x106>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bf14      	ite	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	2300      	moveq	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	e00e      	b.n	8008ba4 <HAL_TIM_Base_Init+0x124>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d006      	beq.n	8008b9c <HAL_TIM_Base_Init+0x11c>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b96:	d201      	bcs.n	8008b9c <HAL_TIM_Base_Init+0x11c>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <HAL_TIM_Base_Init+0x11e>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <HAL_TIM_Base_Init+0x132>
 8008ba8:	f240 1119 	movw	r1, #281	@ 0x119
 8008bac:	4838      	ldr	r0, [pc, #224]	@ (8008c90 <HAL_TIM_Base_Init+0x210>)
 8008bae:	f7fb f8dd 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d008      	beq.n	8008bcc <HAL_TIM_Base_Init+0x14c>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	2b80      	cmp	r3, #128	@ 0x80
 8008bc0:	d004      	beq.n	8008bcc <HAL_TIM_Base_Init+0x14c>
 8008bc2:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8008bc6:	4832      	ldr	r0, [pc, #200]	@ (8008c90 <HAL_TIM_Base_Init+0x210>)
 8008bc8:	f7fb f8d0 	bl	8003d6c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fb fdb9 	bl	8004758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f001 fec3 	bl	800a984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40012c00 	.word	0x40012c00
 8008c6c:	40000400 	.word	0x40000400
 8008c70:	40000800 	.word	0x40000800
 8008c74:	40000c00 	.word	0x40000c00
 8008c78:	40001000 	.word	0x40001000
 8008c7c:	40001400 	.word	0x40001400
 8008c80:	40013400 	.word	0x40013400
 8008c84:	40014000 	.word	0x40014000
 8008c88:	40014400 	.word	0x40014400
 8008c8c:	40014800 	.word	0x40014800
 8008c90:	0800e114 	.word	0x0800e114

08008c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a4a      	ldr	r2, [pc, #296]	@ (8008dcc <HAL_TIM_Base_Start_IT+0x138>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d036      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cae:	d031      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a46      	ldr	r2, [pc, #280]	@ (8008dd0 <HAL_TIM_Base_Start_IT+0x13c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d02c      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a45      	ldr	r2, [pc, #276]	@ (8008dd4 <HAL_TIM_Base_Start_IT+0x140>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d027      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a43      	ldr	r2, [pc, #268]	@ (8008dd8 <HAL_TIM_Base_Start_IT+0x144>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d022      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a42      	ldr	r2, [pc, #264]	@ (8008ddc <HAL_TIM_Base_Start_IT+0x148>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d01d      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a40      	ldr	r2, [pc, #256]	@ (8008de0 <HAL_TIM_Base_Start_IT+0x14c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d018      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a3f      	ldr	r2, [pc, #252]	@ (8008de4 <HAL_TIM_Base_Start_IT+0x150>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d013      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a3d      	ldr	r2, [pc, #244]	@ (8008de8 <HAL_TIM_Base_Start_IT+0x154>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00e      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8008dec <HAL_TIM_Base_Start_IT+0x158>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d009      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a3a      	ldr	r2, [pc, #232]	@ (8008df0 <HAL_TIM_Base_Start_IT+0x15c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d004      	beq.n	8008d14 <HAL_TIM_Base_Start_IT+0x80>
 8008d0a:	f240 11d3 	movw	r1, #467	@ 0x1d3
 8008d0e:	4839      	ldr	r0, [pc, #228]	@ (8008df4 <HAL_TIM_Base_Start_IT+0x160>)
 8008d10:	f7fb f82c 	bl	8003d6c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d001      	beq.n	8008d24 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e04f      	b.n	8008dc4 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0201 	orr.w	r2, r2, #1
 8008d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a22      	ldr	r2, [pc, #136]	@ (8008dcc <HAL_TIM_Base_Start_IT+0x138>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d01d      	beq.n	8008d82 <HAL_TIM_Base_Start_IT+0xee>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d4e:	d018      	beq.n	8008d82 <HAL_TIM_Base_Start_IT+0xee>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1e      	ldr	r2, [pc, #120]	@ (8008dd0 <HAL_TIM_Base_Start_IT+0x13c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d013      	beq.n	8008d82 <HAL_TIM_Base_Start_IT+0xee>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd4 <HAL_TIM_Base_Start_IT+0x140>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00e      	beq.n	8008d82 <HAL_TIM_Base_Start_IT+0xee>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd8 <HAL_TIM_Base_Start_IT+0x144>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d009      	beq.n	8008d82 <HAL_TIM_Base_Start_IT+0xee>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1c      	ldr	r2, [pc, #112]	@ (8008de4 <HAL_TIM_Base_Start_IT+0x150>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d004      	beq.n	8008d82 <HAL_TIM_Base_Start_IT+0xee>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8008de8 <HAL_TIM_Base_Start_IT+0x154>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d115      	bne.n	8008dae <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689a      	ldr	r2, [r3, #8]
 8008d88:	4b1b      	ldr	r3, [pc, #108]	@ (8008df8 <HAL_TIM_Base_Start_IT+0x164>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b06      	cmp	r3, #6
 8008d92:	d015      	beq.n	8008dc0 <HAL_TIM_Base_Start_IT+0x12c>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d9a:	d011      	beq.n	8008dc0 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dac:	e008      	b.n	8008dc0 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0201 	orr.w	r2, r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e000      	b.n	8008dc2 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	40012c00 	.word	0x40012c00
 8008dd0:	40000400 	.word	0x40000400
 8008dd4:	40000800 	.word	0x40000800
 8008dd8:	40000c00 	.word	0x40000c00
 8008ddc:	40001000 	.word	0x40001000
 8008de0:	40001400 	.word	0x40001400
 8008de4:	40013400 	.word	0x40013400
 8008de8:	40014000 	.word	0x40014000
 8008dec:	40014400 	.word	0x40014400
 8008df0:	40014800 	.word	0x40014800
 8008df4:	0800e114 	.word	0x0800e114
 8008df8:	00010007 	.word	0x00010007

08008dfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e0e6      	b.n	8008fdc <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a74      	ldr	r2, [pc, #464]	@ (8008fe4 <HAL_TIM_PWM_Init+0x1e8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d036      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e20:	d031      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a70      	ldr	r2, [pc, #448]	@ (8008fe8 <HAL_TIM_PWM_Init+0x1ec>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d02c      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a6e      	ldr	r2, [pc, #440]	@ (8008fec <HAL_TIM_PWM_Init+0x1f0>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d027      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a6d      	ldr	r2, [pc, #436]	@ (8008ff0 <HAL_TIM_PWM_Init+0x1f4>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d022      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a6b      	ldr	r2, [pc, #428]	@ (8008ff4 <HAL_TIM_PWM_Init+0x1f8>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01d      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8008ff8 <HAL_TIM_PWM_Init+0x1fc>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d018      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a68      	ldr	r2, [pc, #416]	@ (8008ffc <HAL_TIM_PWM_Init+0x200>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d013      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a67      	ldr	r2, [pc, #412]	@ (8009000 <HAL_TIM_PWM_Init+0x204>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00e      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a65      	ldr	r2, [pc, #404]	@ (8009004 <HAL_TIM_PWM_Init+0x208>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d009      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a64      	ldr	r2, [pc, #400]	@ (8009008 <HAL_TIM_PWM_Init+0x20c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d004      	beq.n	8008e86 <HAL_TIM_PWM_Init+0x8a>
 8008e7c:	f240 5133 	movw	r1, #1331	@ 0x533
 8008e80:	4862      	ldr	r0, [pc, #392]	@ (800900c <HAL_TIM_PWM_Init+0x210>)
 8008e82:	f7fa ff73 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d014      	beq.n	8008eb8 <HAL_TIM_PWM_Init+0xbc>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	2b10      	cmp	r3, #16
 8008e94:	d010      	beq.n	8008eb8 <HAL_TIM_PWM_Init+0xbc>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d00c      	beq.n	8008eb8 <HAL_TIM_PWM_Init+0xbc>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	2b40      	cmp	r3, #64	@ 0x40
 8008ea4:	d008      	beq.n	8008eb8 <HAL_TIM_PWM_Init+0xbc>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	2b60      	cmp	r3, #96	@ 0x60
 8008eac:	d004      	beq.n	8008eb8 <HAL_TIM_PWM_Init+0xbc>
 8008eae:	f240 5134 	movw	r1, #1332	@ 0x534
 8008eb2:	4856      	ldr	r0, [pc, #344]	@ (800900c <HAL_TIM_PWM_Init+0x210>)
 8008eb4:	f7fa ff5a 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00e      	beq.n	8008ede <HAL_TIM_PWM_Init+0xe2>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ec8:	d009      	beq.n	8008ede <HAL_TIM_PWM_Init+0xe2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ed2:	d004      	beq.n	8008ede <HAL_TIM_PWM_Init+0xe2>
 8008ed4:	f240 5135 	movw	r1, #1333	@ 0x535
 8008ed8:	484c      	ldr	r0, [pc, #304]	@ (800900c <HAL_TIM_PWM_Init+0x210>)
 8008eda:	f7fa ff47 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ee6:	d004      	beq.n	8008ef2 <HAL_TIM_PWM_Init+0xf6>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a40      	ldr	r2, [pc, #256]	@ (8008ff0 <HAL_TIM_PWM_Init+0x1f4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d107      	bne.n	8008f02 <HAL_TIM_PWM_Init+0x106>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bf14      	ite	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	2300      	moveq	r3, #0
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	e00e      	b.n	8008f20 <HAL_TIM_PWM_Init+0x124>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d006      	beq.n	8008f18 <HAL_TIM_PWM_Init+0x11c>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f12:	d201      	bcs.n	8008f18 <HAL_TIM_PWM_Init+0x11c>
 8008f14:	2301      	movs	r3, #1
 8008f16:	e000      	b.n	8008f1a <HAL_TIM_PWM_Init+0x11e>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d104      	bne.n	8008f2e <HAL_TIM_PWM_Init+0x132>
 8008f24:	f240 5136 	movw	r1, #1334	@ 0x536
 8008f28:	4838      	ldr	r0, [pc, #224]	@ (800900c <HAL_TIM_PWM_Init+0x210>)
 8008f2a:	f7fa ff1f 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d008      	beq.n	8008f48 <HAL_TIM_PWM_Init+0x14c>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	2b80      	cmp	r3, #128	@ 0x80
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIM_PWM_Init+0x14c>
 8008f3e:	f240 5137 	movw	r1, #1335	@ 0x537
 8008f42:	4832      	ldr	r0, [pc, #200]	@ (800900c <HAL_TIM_PWM_Init+0x210>)
 8008f44:	f7fa ff12 	bl	8003d6c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d106      	bne.n	8008f62 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f857 	bl	8009010 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2202      	movs	r2, #2
 8008f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f001 fd05 	bl	800a984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	40012c00 	.word	0x40012c00
 8008fe8:	40000400 	.word	0x40000400
 8008fec:	40000800 	.word	0x40000800
 8008ff0:	40000c00 	.word	0x40000c00
 8008ff4:	40001000 	.word	0x40001000
 8008ff8:	40001400 	.word	0x40001400
 8008ffc:	40013400 	.word	0x40013400
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400
 8009008:	40014800 	.word	0x40014800
 800900c:	0800e114 	.word	0x0800e114

08009010 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a85      	ldr	r2, [pc, #532]	@ (8009248 <HAL_TIM_PWM_Start+0x224>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d115      	bne.n	8009064 <HAL_TIM_PWM_Start+0x40>
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 808d 	beq.w	800915a <HAL_TIM_PWM_Start+0x136>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b04      	cmp	r3, #4
 8009044:	f000 8089 	beq.w	800915a <HAL_TIM_PWM_Start+0x136>
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b08      	cmp	r3, #8
 800904c:	f000 8085 	beq.w	800915a <HAL_TIM_PWM_Start+0x136>
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b0c      	cmp	r3, #12
 8009054:	f000 8081 	beq.w	800915a <HAL_TIM_PWM_Start+0x136>
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	2b10      	cmp	r3, #16
 800905c:	d07d      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b14      	cmp	r3, #20
 8009062:	d07a      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800906c:	d10b      	bne.n	8009086 <HAL_TIM_PWM_Start+0x62>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d072      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	2b04      	cmp	r3, #4
 8009078:	d06f      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b08      	cmp	r3, #8
 800907e:	d06c      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b0c      	cmp	r3, #12
 8009084:	d069      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a70      	ldr	r2, [pc, #448]	@ (800924c <HAL_TIM_PWM_Start+0x228>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d10b      	bne.n	80090a8 <HAL_TIM_PWM_Start+0x84>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d061      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b04      	cmp	r3, #4
 800909a:	d05e      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b08      	cmp	r3, #8
 80090a0:	d05b      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b0c      	cmp	r3, #12
 80090a6:	d058      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a68      	ldr	r2, [pc, #416]	@ (8009250 <HAL_TIM_PWM_Start+0x22c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d10b      	bne.n	80090ca <HAL_TIM_PWM_Start+0xa6>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d050      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d04d      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b08      	cmp	r3, #8
 80090c2:	d04a      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b0c      	cmp	r3, #12
 80090c8:	d047      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a61      	ldr	r2, [pc, #388]	@ (8009254 <HAL_TIM_PWM_Start+0x230>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d10b      	bne.n	80090ec <HAL_TIM_PWM_Start+0xc8>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d03f      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d03c      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	d039      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b0c      	cmp	r3, #12
 80090ea:	d036      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a59      	ldr	r2, [pc, #356]	@ (8009258 <HAL_TIM_PWM_Start+0x234>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d111      	bne.n	800911a <HAL_TIM_PWM_Start+0xf6>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d02e      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d02b      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b08      	cmp	r3, #8
 8009106:	d028      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2b0c      	cmp	r3, #12
 800910c:	d025      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b10      	cmp	r3, #16
 8009112:	d022      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b14      	cmp	r3, #20
 8009118:	d01f      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a4f      	ldr	r2, [pc, #316]	@ (800925c <HAL_TIM_PWM_Start+0x238>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d105      	bne.n	8009130 <HAL_TIM_PWM_Start+0x10c>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d017      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b04      	cmp	r3, #4
 800912e:	d014      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a4a      	ldr	r2, [pc, #296]	@ (8009260 <HAL_TIM_PWM_Start+0x23c>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d102      	bne.n	8009140 <HAL_TIM_PWM_Start+0x11c>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00c      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a47      	ldr	r2, [pc, #284]	@ (8009264 <HAL_TIM_PWM_Start+0x240>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d102      	bne.n	8009150 <HAL_TIM_PWM_Start+0x12c>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <HAL_TIM_PWM_Start+0x136>
 8009150:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 8009154:	4844      	ldr	r0, [pc, #272]	@ (8009268 <HAL_TIM_PWM_Start+0x244>)
 8009156:	f7fa fe09 	bl	8003d6c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d109      	bne.n	8009174 <HAL_TIM_PWM_Start+0x150>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b01      	cmp	r3, #1
 800916a:	bf14      	ite	ne
 800916c:	2301      	movne	r3, #1
 800916e:	2300      	moveq	r3, #0
 8009170:	b2db      	uxtb	r3, r3
 8009172:	e03c      	b.n	80091ee <HAL_TIM_PWM_Start+0x1ca>
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b04      	cmp	r3, #4
 8009178:	d109      	bne.n	800918e <HAL_TIM_PWM_Start+0x16a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b01      	cmp	r3, #1
 8009184:	bf14      	ite	ne
 8009186:	2301      	movne	r3, #1
 8009188:	2300      	moveq	r3, #0
 800918a:	b2db      	uxtb	r3, r3
 800918c:	e02f      	b.n	80091ee <HAL_TIM_PWM_Start+0x1ca>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b08      	cmp	r3, #8
 8009192:	d109      	bne.n	80091a8 <HAL_TIM_PWM_Start+0x184>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b01      	cmp	r3, #1
 800919e:	bf14      	ite	ne
 80091a0:	2301      	movne	r3, #1
 80091a2:	2300      	moveq	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	e022      	b.n	80091ee <HAL_TIM_PWM_Start+0x1ca>
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	2b0c      	cmp	r3, #12
 80091ac:	d109      	bne.n	80091c2 <HAL_TIM_PWM_Start+0x19e>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	bf14      	ite	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	2300      	moveq	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	e015      	b.n	80091ee <HAL_TIM_PWM_Start+0x1ca>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d109      	bne.n	80091dc <HAL_TIM_PWM_Start+0x1b8>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	bf14      	ite	ne
 80091d4:	2301      	movne	r3, #1
 80091d6:	2300      	moveq	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	e008      	b.n	80091ee <HAL_TIM_PWM_Start+0x1ca>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	bf14      	ite	ne
 80091e8:	2301      	movne	r3, #1
 80091ea:	2300      	moveq	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e0af      	b.n	8009356 <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <HAL_TIM_PWM_Start+0x1e2>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009204:	e036      	b.n	8009274 <HAL_TIM_PWM_Start+0x250>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b04      	cmp	r3, #4
 800920a:	d104      	bne.n	8009216 <HAL_TIM_PWM_Start+0x1f2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009214:	e02e      	b.n	8009274 <HAL_TIM_PWM_Start+0x250>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b08      	cmp	r3, #8
 800921a:	d104      	bne.n	8009226 <HAL_TIM_PWM_Start+0x202>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009224:	e026      	b.n	8009274 <HAL_TIM_PWM_Start+0x250>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b0c      	cmp	r3, #12
 800922a:	d104      	bne.n	8009236 <HAL_TIM_PWM_Start+0x212>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009234:	e01e      	b.n	8009274 <HAL_TIM_PWM_Start+0x250>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b10      	cmp	r3, #16
 800923a:	d117      	bne.n	800926c <HAL_TIM_PWM_Start+0x248>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2202      	movs	r2, #2
 8009240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009244:	e016      	b.n	8009274 <HAL_TIM_PWM_Start+0x250>
 8009246:	bf00      	nop
 8009248:	40012c00 	.word	0x40012c00
 800924c:	40000400 	.word	0x40000400
 8009250:	40000800 	.word	0x40000800
 8009254:	40000c00 	.word	0x40000c00
 8009258:	40013400 	.word	0x40013400
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400
 8009264:	40014800 	.word	0x40014800
 8009268:	0800e114 	.word	0x0800e114
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2201      	movs	r2, #1
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	4618      	mov	r0, r3
 800927e:	f002 f821 	bl	800b2c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a36      	ldr	r2, [pc, #216]	@ (8009360 <HAL_TIM_PWM_Start+0x33c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d013      	beq.n	80092b4 <HAL_TIM_PWM_Start+0x290>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a34      	ldr	r2, [pc, #208]	@ (8009364 <HAL_TIM_PWM_Start+0x340>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d00e      	beq.n	80092b4 <HAL_TIM_PWM_Start+0x290>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a33      	ldr	r2, [pc, #204]	@ (8009368 <HAL_TIM_PWM_Start+0x344>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d009      	beq.n	80092b4 <HAL_TIM_PWM_Start+0x290>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a31      	ldr	r2, [pc, #196]	@ (800936c <HAL_TIM_PWM_Start+0x348>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d004      	beq.n	80092b4 <HAL_TIM_PWM_Start+0x290>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a30      	ldr	r2, [pc, #192]	@ (8009370 <HAL_TIM_PWM_Start+0x34c>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d101      	bne.n	80092b8 <HAL_TIM_PWM_Start+0x294>
 80092b4:	2301      	movs	r3, #1
 80092b6:	e000      	b.n	80092ba <HAL_TIM_PWM_Start+0x296>
 80092b8:	2300      	movs	r3, #0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d007      	beq.n	80092ce <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a23      	ldr	r2, [pc, #140]	@ (8009360 <HAL_TIM_PWM_Start+0x33c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d01d      	beq.n	8009314 <HAL_TIM_PWM_Start+0x2f0>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e0:	d018      	beq.n	8009314 <HAL_TIM_PWM_Start+0x2f0>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a23      	ldr	r2, [pc, #140]	@ (8009374 <HAL_TIM_PWM_Start+0x350>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d013      	beq.n	8009314 <HAL_TIM_PWM_Start+0x2f0>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a21      	ldr	r2, [pc, #132]	@ (8009378 <HAL_TIM_PWM_Start+0x354>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00e      	beq.n	8009314 <HAL_TIM_PWM_Start+0x2f0>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a20      	ldr	r2, [pc, #128]	@ (800937c <HAL_TIM_PWM_Start+0x358>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d009      	beq.n	8009314 <HAL_TIM_PWM_Start+0x2f0>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a17      	ldr	r2, [pc, #92]	@ (8009364 <HAL_TIM_PWM_Start+0x340>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_TIM_PWM_Start+0x2f0>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a16      	ldr	r2, [pc, #88]	@ (8009368 <HAL_TIM_PWM_Start+0x344>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d115      	bne.n	8009340 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	4b19      	ldr	r3, [pc, #100]	@ (8009380 <HAL_TIM_PWM_Start+0x35c>)
 800931c:	4013      	ands	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b06      	cmp	r3, #6
 8009324:	d015      	beq.n	8009352 <HAL_TIM_PWM_Start+0x32e>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800932c:	d011      	beq.n	8009352 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f042 0201 	orr.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933e:	e008      	b.n	8009352 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	e000      	b.n	8009354 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40012c00 	.word	0x40012c00
 8009364:	40013400 	.word	0x40013400
 8009368:	40014000 	.word	0x40014000
 800936c:	40014400 	.word	0x40014400
 8009370:	40014800 	.word	0x40014800
 8009374:	40000400 	.word	0x40000400
 8009378:	40000800 	.word	0x40000800
 800937c:	40000c00 	.word	0x40000c00
 8009380:	00010007 	.word	0x00010007

08009384 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a8d      	ldr	r2, [pc, #564]	@ (80095c8 <HAL_TIM_PWM_Stop+0x244>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d115      	bne.n	80093c4 <HAL_TIM_PWM_Stop+0x40>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 808d 	beq.w	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	f000 8089 	beq.w	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	f000 8085 	beq.w	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b0c      	cmp	r3, #12
 80093b4:	f000 8081 	beq.w	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b10      	cmp	r3, #16
 80093bc:	d07d      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b14      	cmp	r3, #20
 80093c2:	d07a      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093cc:	d10b      	bne.n	80093e6 <HAL_TIM_PWM_Stop+0x62>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d072      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d06f      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d06c      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	2b0c      	cmp	r3, #12
 80093e4:	d069      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a78      	ldr	r2, [pc, #480]	@ (80095cc <HAL_TIM_PWM_Stop+0x248>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10b      	bne.n	8009408 <HAL_TIM_PWM_Stop+0x84>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d061      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d05e      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b08      	cmp	r3, #8
 8009400:	d05b      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b0c      	cmp	r3, #12
 8009406:	d058      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a70      	ldr	r2, [pc, #448]	@ (80095d0 <HAL_TIM_PWM_Stop+0x24c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d10b      	bne.n	800942a <HAL_TIM_PWM_Stop+0xa6>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d050      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2b04      	cmp	r3, #4
 800941c:	d04d      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b08      	cmp	r3, #8
 8009422:	d04a      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b0c      	cmp	r3, #12
 8009428:	d047      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a69      	ldr	r2, [pc, #420]	@ (80095d4 <HAL_TIM_PWM_Stop+0x250>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d10b      	bne.n	800944c <HAL_TIM_PWM_Stop+0xc8>
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d03f      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b04      	cmp	r3, #4
 800943e:	d03c      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b08      	cmp	r3, #8
 8009444:	d039      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b0c      	cmp	r3, #12
 800944a:	d036      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a61      	ldr	r2, [pc, #388]	@ (80095d8 <HAL_TIM_PWM_Stop+0x254>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d111      	bne.n	800947a <HAL_TIM_PWM_Stop+0xf6>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d02e      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b04      	cmp	r3, #4
 8009460:	d02b      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b08      	cmp	r3, #8
 8009466:	d028      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b0c      	cmp	r3, #12
 800946c:	d025      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b10      	cmp	r3, #16
 8009472:	d022      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b14      	cmp	r3, #20
 8009478:	d01f      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a57      	ldr	r2, [pc, #348]	@ (80095dc <HAL_TIM_PWM_Stop+0x258>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d105      	bne.n	8009490 <HAL_TIM_PWM_Stop+0x10c>
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d017      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b04      	cmp	r3, #4
 800948e:	d014      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a52      	ldr	r2, [pc, #328]	@ (80095e0 <HAL_TIM_PWM_Stop+0x25c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d102      	bne.n	80094a0 <HAL_TIM_PWM_Stop+0x11c>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00c      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a4f      	ldr	r2, [pc, #316]	@ (80095e4 <HAL_TIM_PWM_Stop+0x260>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d102      	bne.n	80094b0 <HAL_TIM_PWM_Stop+0x12c>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d004      	beq.n	80094ba <HAL_TIM_PWM_Stop+0x136>
 80094b0:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 80094b4:	484c      	ldr	r0, [pc, #304]	@ (80095e8 <HAL_TIM_PWM_Stop+0x264>)
 80094b6:	f7fa fc59 	bl	8003d6c <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2200      	movs	r2, #0
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fefe 	bl	800b2c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a3e      	ldr	r2, [pc, #248]	@ (80095c8 <HAL_TIM_PWM_Stop+0x244>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <HAL_TIM_PWM_Stop+0x176>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a40      	ldr	r2, [pc, #256]	@ (80095d8 <HAL_TIM_PWM_Stop+0x254>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00e      	beq.n	80094fa <HAL_TIM_PWM_Stop+0x176>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a3e      	ldr	r2, [pc, #248]	@ (80095dc <HAL_TIM_PWM_Stop+0x258>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d009      	beq.n	80094fa <HAL_TIM_PWM_Stop+0x176>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a3d      	ldr	r2, [pc, #244]	@ (80095e0 <HAL_TIM_PWM_Stop+0x25c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <HAL_TIM_PWM_Stop+0x176>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a3b      	ldr	r2, [pc, #236]	@ (80095e4 <HAL_TIM_PWM_Stop+0x260>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d101      	bne.n	80094fe <HAL_TIM_PWM_Stop+0x17a>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <HAL_TIM_PWM_Stop+0x17c>
 80094fe:	2300      	movs	r3, #0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d017      	beq.n	8009534 <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6a1a      	ldr	r2, [r3, #32]
 800950a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800950e:	4013      	ands	r3, r2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10f      	bne.n	8009534 <HAL_TIM_PWM_Stop+0x1b0>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6a1a      	ldr	r2, [r3, #32]
 800951a:	f240 4344 	movw	r3, #1092	@ 0x444
 800951e:	4013      	ands	r3, r2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d107      	bne.n	8009534 <HAL_TIM_PWM_Stop+0x1b0>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009532:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a1a      	ldr	r2, [r3, #32]
 800953a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800953e:	4013      	ands	r3, r2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10f      	bne.n	8009564 <HAL_TIM_PWM_Stop+0x1e0>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6a1a      	ldr	r2, [r3, #32]
 800954a:	f240 4344 	movw	r3, #1092	@ 0x444
 800954e:	4013      	ands	r3, r2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d107      	bne.n	8009564 <HAL_TIM_PWM_Stop+0x1e0>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0201 	bic.w	r2, r2, #1
 8009562:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d104      	bne.n	8009574 <HAL_TIM_PWM_Stop+0x1f0>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009572:	e023      	b.n	80095bc <HAL_TIM_PWM_Stop+0x238>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b04      	cmp	r3, #4
 8009578:	d104      	bne.n	8009584 <HAL_TIM_PWM_Stop+0x200>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009582:	e01b      	b.n	80095bc <HAL_TIM_PWM_Stop+0x238>
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b08      	cmp	r3, #8
 8009588:	d104      	bne.n	8009594 <HAL_TIM_PWM_Stop+0x210>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009592:	e013      	b.n	80095bc <HAL_TIM_PWM_Stop+0x238>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b0c      	cmp	r3, #12
 8009598:	d104      	bne.n	80095a4 <HAL_TIM_PWM_Stop+0x220>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80095a2:	e00b      	b.n	80095bc <HAL_TIM_PWM_Stop+0x238>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b10      	cmp	r3, #16
 80095a8:	d104      	bne.n	80095b4 <HAL_TIM_PWM_Stop+0x230>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095b2:	e003      	b.n	80095bc <HAL_TIM_PWM_Stop+0x238>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	40012c00 	.word	0x40012c00
 80095cc:	40000400 	.word	0x40000400
 80095d0:	40000800 	.word	0x40000800
 80095d4:	40000c00 	.word	0x40000c00
 80095d8:	40013400 	.word	0x40013400
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40014400 	.word	0x40014400
 80095e4:	40014800 	.word	0x40014800
 80095e8:	0800e114 	.word	0x0800e114

080095ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d101      	bne.n	8009600 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e1b0      	b.n	8009962 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a7f      	ldr	r2, [pc, #508]	@ (8009804 <HAL_TIM_Encoder_Init+0x218>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d01d      	beq.n	8009646 <HAL_TIM_Encoder_Init+0x5a>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009612:	d018      	beq.n	8009646 <HAL_TIM_Encoder_Init+0x5a>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a7b      	ldr	r2, [pc, #492]	@ (8009808 <HAL_TIM_Encoder_Init+0x21c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d013      	beq.n	8009646 <HAL_TIM_Encoder_Init+0x5a>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a7a      	ldr	r2, [pc, #488]	@ (800980c <HAL_TIM_Encoder_Init+0x220>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00e      	beq.n	8009646 <HAL_TIM_Encoder_Init+0x5a>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a78      	ldr	r2, [pc, #480]	@ (8009810 <HAL_TIM_Encoder_Init+0x224>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d009      	beq.n	8009646 <HAL_TIM_Encoder_Init+0x5a>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a77      	ldr	r2, [pc, #476]	@ (8009814 <HAL_TIM_Encoder_Init+0x228>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d004      	beq.n	8009646 <HAL_TIM_Encoder_Init+0x5a>
 800963c:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8009640:	4875      	ldr	r0, [pc, #468]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 8009642:	f7fa fb93 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d014      	beq.n	8009678 <HAL_TIM_Encoder_Init+0x8c>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2b10      	cmp	r3, #16
 8009654:	d010      	beq.n	8009678 <HAL_TIM_Encoder_Init+0x8c>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b20      	cmp	r3, #32
 800965c:	d00c      	beq.n	8009678 <HAL_TIM_Encoder_Init+0x8c>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	2b40      	cmp	r3, #64	@ 0x40
 8009664:	d008      	beq.n	8009678 <HAL_TIM_Encoder_Init+0x8c>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	2b60      	cmp	r3, #96	@ 0x60
 800966c:	d004      	beq.n	8009678 <HAL_TIM_Encoder_Init+0x8c>
 800966e:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8009672:	4869      	ldr	r0, [pc, #420]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 8009674:	f7fa fb7a 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00e      	beq.n	800969e <HAL_TIM_Encoder_Init+0xb2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009688:	d009      	beq.n	800969e <HAL_TIM_Encoder_Init+0xb2>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009692:	d004      	beq.n	800969e <HAL_TIM_Encoder_Init+0xb2>
 8009694:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8009698:	485f      	ldr	r0, [pc, #380]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 800969a:	f7fa fb67 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d008      	beq.n	80096b8 <HAL_TIM_Encoder_Init+0xcc>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	2b80      	cmp	r3, #128	@ 0x80
 80096ac:	d004      	beq.n	80096b8 <HAL_TIM_Encoder_Init+0xcc>
 80096ae:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 80096b2:	4859      	ldr	r0, [pc, #356]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 80096b4:	f7fa fb5a 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d00c      	beq.n	80096da <HAL_TIM_Encoder_Init+0xee>
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d008      	beq.n	80096da <HAL_TIM_Encoder_Init+0xee>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d004      	beq.n	80096da <HAL_TIM_Encoder_Init+0xee>
 80096d0:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 80096d4:	4850      	ldr	r0, [pc, #320]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 80096d6:	f7fa fb49 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d00c      	beq.n	80096fc <HAL_TIM_Encoder_Init+0x110>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d008      	beq.n	80096fc <HAL_TIM_Encoder_Init+0x110>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	d004      	beq.n	80096fc <HAL_TIM_Encoder_Init+0x110>
 80096f2:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 80096f6:	4848      	ldr	r0, [pc, #288]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 80096f8:	f7fa fb38 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d00c      	beq.n	800971e <HAL_TIM_Encoder_Init+0x132>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	2b02      	cmp	r3, #2
 800970a:	d008      	beq.n	800971e <HAL_TIM_Encoder_Init+0x132>
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	2b03      	cmp	r3, #3
 8009712:	d004      	beq.n	800971e <HAL_TIM_Encoder_Init+0x132>
 8009714:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8009718:	483f      	ldr	r0, [pc, #252]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 800971a:	f7fa fb27 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d008      	beq.n	8009738 <HAL_TIM_Encoder_Init+0x14c>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	2b02      	cmp	r3, #2
 800972c:	d004      	beq.n	8009738 <HAL_TIM_Encoder_Init+0x14c>
 800972e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8009732:	4839      	ldr	r0, [pc, #228]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 8009734:	f7fa fb1a 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d008      	beq.n	8009752 <HAL_TIM_Encoder_Init+0x166>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	2b02      	cmp	r3, #2
 8009746:	d004      	beq.n	8009752 <HAL_TIM_Encoder_Init+0x166>
 8009748:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800974c:	4832      	ldr	r0, [pc, #200]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 800974e:	f7fa fb0d 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d010      	beq.n	800977c <HAL_TIM_Encoder_Init+0x190>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d00c      	beq.n	800977c <HAL_TIM_Encoder_Init+0x190>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	2b08      	cmp	r3, #8
 8009768:	d008      	beq.n	800977c <HAL_TIM_Encoder_Init+0x190>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	2b0c      	cmp	r3, #12
 8009770:	d004      	beq.n	800977c <HAL_TIM_Encoder_Init+0x190>
 8009772:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8009776:	4828      	ldr	r0, [pc, #160]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 8009778:	f7fa faf8 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d010      	beq.n	80097a6 <HAL_TIM_Encoder_Init+0x1ba>
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	2b04      	cmp	r3, #4
 800978a:	d00c      	beq.n	80097a6 <HAL_TIM_Encoder_Init+0x1ba>
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	2b08      	cmp	r3, #8
 8009792:	d008      	beq.n	80097a6 <HAL_TIM_Encoder_Init+0x1ba>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	2b0c      	cmp	r3, #12
 800979a:	d004      	beq.n	80097a6 <HAL_TIM_Encoder_Init+0x1ba>
 800979c:	f640 31ed 	movw	r1, #3053	@ 0xbed
 80097a0:	481d      	ldr	r0, [pc, #116]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 80097a2:	f7fa fae3 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	2b0f      	cmp	r3, #15
 80097ac:	d904      	bls.n	80097b8 <HAL_TIM_Encoder_Init+0x1cc>
 80097ae:	f640 31ee 	movw	r1, #3054	@ 0xbee
 80097b2:	4819      	ldr	r0, [pc, #100]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 80097b4:	f7fa fada 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	2b0f      	cmp	r3, #15
 80097be:	d904      	bls.n	80097ca <HAL_TIM_Encoder_Init+0x1de>
 80097c0:	f640 31ef 	movw	r1, #3055	@ 0xbef
 80097c4:	4814      	ldr	r0, [pc, #80]	@ (8009818 <HAL_TIM_Encoder_Init+0x22c>)
 80097c6:	f7fa fad1 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d2:	d004      	beq.n	80097de <HAL_TIM_Encoder_Init+0x1f2>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009810 <HAL_TIM_Encoder_Init+0x224>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d107      	bne.n	80097ee <HAL_TIM_Encoder_Init+0x202>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bf14      	ite	ne
 80097e6:	2301      	movne	r3, #1
 80097e8:	2300      	moveq	r3, #0
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	e01a      	b.n	8009824 <HAL_TIM_Encoder_Init+0x238>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d012      	beq.n	800981c <HAL_TIM_Encoder_Init+0x230>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097fe:	d20d      	bcs.n	800981c <HAL_TIM_Encoder_Init+0x230>
 8009800:	2301      	movs	r3, #1
 8009802:	e00c      	b.n	800981e <HAL_TIM_Encoder_Init+0x232>
 8009804:	40012c00 	.word	0x40012c00
 8009808:	40000400 	.word	0x40000400
 800980c:	40000800 	.word	0x40000800
 8009810:	40000c00 	.word	0x40000c00
 8009814:	40013400 	.word	0x40013400
 8009818:	0800e114 	.word	0x0800e114
 800981c:	2300      	movs	r3, #0
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d104      	bne.n	8009832 <HAL_TIM_Encoder_Init+0x246>
 8009828:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800982c:	484f      	ldr	r0, [pc, #316]	@ (800996c <HAL_TIM_Encoder_Init+0x380>)
 800982e:	f7fa fa9d 	bl	8003d6c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7fa fec4 	bl	80045d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	6812      	ldr	r2, [r2, #0]
 800985e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009862:	f023 0307 	bic.w	r3, r3, #7
 8009866:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3304      	adds	r3, #4
 8009870:	4619      	mov	r1, r3
 8009872:	4610      	mov	r0, r2
 8009874:	f001 f886 	bl	800a984 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098a0:	f023 0303 	bic.w	r3, r3, #3
 80098a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	689a      	ldr	r2, [r3, #8]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	021b      	lsls	r3, r3, #8
 80098b0:	4313      	orrs	r3, r2
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80098be:	f023 030c 	bic.w	r3, r3, #12
 80098c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	4313      	orrs	r3, r2
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	4313      	orrs	r3, r2
 80098e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	011a      	lsls	r2, r3, #4
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	031b      	lsls	r3, r3, #12
 80098ee:	4313      	orrs	r3, r2
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80098fc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009904:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	4313      	orrs	r3, r2
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	4313      	orrs	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	0800e114 	.word	0x0800e114

08009970 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009980:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009988:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009990:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009998:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a4d      	ldr	r2, [pc, #308]	@ (8009ad4 <HAL_TIM_Encoder_Start+0x164>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d01d      	beq.n	80099e0 <HAL_TIM_Encoder_Start+0x70>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ac:	d018      	beq.n	80099e0 <HAL_TIM_Encoder_Start+0x70>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a49      	ldr	r2, [pc, #292]	@ (8009ad8 <HAL_TIM_Encoder_Start+0x168>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d013      	beq.n	80099e0 <HAL_TIM_Encoder_Start+0x70>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a47      	ldr	r2, [pc, #284]	@ (8009adc <HAL_TIM_Encoder_Start+0x16c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00e      	beq.n	80099e0 <HAL_TIM_Encoder_Start+0x70>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a46      	ldr	r2, [pc, #280]	@ (8009ae0 <HAL_TIM_Encoder_Start+0x170>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d009      	beq.n	80099e0 <HAL_TIM_Encoder_Start+0x70>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a44      	ldr	r2, [pc, #272]	@ (8009ae4 <HAL_TIM_Encoder_Start+0x174>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d004      	beq.n	80099e0 <HAL_TIM_Encoder_Start+0x70>
 80099d6:	f640 41a1 	movw	r1, #3233	@ 0xca1
 80099da:	4843      	ldr	r0, [pc, #268]	@ (8009ae8 <HAL_TIM_Encoder_Start+0x178>)
 80099dc:	f7fa f9c6 	bl	8003d6c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d110      	bne.n	8009a08 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d102      	bne.n	80099f2 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80099ec:	7b7b      	ldrb	r3, [r7, #13]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d001      	beq.n	80099f6 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e069      	b.n	8009aca <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2202      	movs	r2, #2
 80099fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2202      	movs	r2, #2
 8009a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a06:	e031      	b.n	8009a6c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d110      	bne.n	8009a30 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d102      	bne.n	8009a1a <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a14:	7b3b      	ldrb	r3, [r7, #12]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d001      	beq.n	8009a1e <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e055      	b.n	8009aca <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2202      	movs	r2, #2
 8009a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a2e:	e01d      	b.n	8009a6c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d108      	bne.n	8009a48 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d105      	bne.n	8009a48 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a3c:	7b7b      	ldrb	r3, [r7, #13]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d102      	bne.n	8009a48 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a42:	7b3b      	ldrb	r3, [r7, #12]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d001      	beq.n	8009a4c <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e03e      	b.n	8009aca <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <HAL_TIM_Encoder_Start+0x10a>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d008      	beq.n	8009a8a <HAL_TIM_Encoder_Start+0x11a>
 8009a78:	e00f      	b.n	8009a9a <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	2100      	movs	r1, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 fc1e 	bl	800b2c4 <TIM_CCxChannelCmd>
      break;
 8009a88:	e016      	b.n	8009ab8 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	2104      	movs	r1, #4
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 fc16 	bl	800b2c4 <TIM_CCxChannelCmd>
      break;
 8009a98:	e00e      	b.n	8009ab8 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 fc0e 	bl	800b2c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2201      	movs	r2, #1
 8009aae:	2104      	movs	r1, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 fc07 	bl	800b2c4 <TIM_CCxChannelCmd>
      break;
 8009ab6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40012c00 	.word	0x40012c00
 8009ad8:	40000400 	.word	0x40000400
 8009adc:	40000800 	.word	0x40000800
 8009ae0:	40000c00 	.word	0x40000c00
 8009ae4:	40013400 	.word	0x40013400
 8009ae8:	0800e114 	.word	0x0800e114

08009aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d020      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d01b      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0202 	mvn.w	r2, #2
 8009b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 ff06 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 8009b3c:	e005      	b.n	8009b4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fef8 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 ff09 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f003 0304 	and.w	r3, r3, #4
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d020      	beq.n	8009b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d01b      	beq.n	8009b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f06f 0204 	mvn.w	r2, #4
 8009b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fee0 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 8009b88:	e005      	b.n	8009b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fed2 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fee3 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f003 0308 	and.w	r3, r3, #8
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d020      	beq.n	8009be8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01b      	beq.n	8009be8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f06f 0208 	mvn.w	r2, #8
 8009bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 feba 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 8009bd4:	e005      	b.n	8009be2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 feac 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 febd 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f003 0310 	and.w	r3, r3, #16
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d020      	beq.n	8009c34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01b      	beq.n	8009c34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f06f 0210 	mvn.w	r2, #16
 8009c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2208      	movs	r2, #8
 8009c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fe94 	bl	800a948 <HAL_TIM_IC_CaptureCallback>
 8009c20:	e005      	b.n	8009c2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fe86 	bl	800a934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fe97 	bl	800a95c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00c      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d007      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f06f 0201 	mvn.w	r2, #1
 8009c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7f9 fad8 	bl	8003208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d104      	bne.n	8009c6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00c      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d007      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f001 fe2f 	bl	800b8e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 fe27 	bl	800b8f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00c      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fe51 	bl	800a970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00c      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f06f 0220 	mvn.w	r2, #32
 8009cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 fdef 	bl	800b8d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d016      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d013      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b08      	cmp	r3, #8
 8009d1c:	d010      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b0c      	cmp	r3, #12
 8009d22:	d00d      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b10      	cmp	r3, #16
 8009d28:	d00a      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b14      	cmp	r3, #20
 8009d2e:	d007      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b3c      	cmp	r3, #60	@ 0x3c
 8009d34:	d004      	beq.n	8009d40 <HAL_TIM_PWM_ConfigChannel+0x44>
 8009d36:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8009d3a:	488b      	ldr	r0, [pc, #556]	@ (8009f68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009d3c:	f7fa f816 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b60      	cmp	r3, #96	@ 0x60
 8009d46:	d01c      	beq.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b70      	cmp	r3, #112	@ 0x70
 8009d4e:	d018      	beq.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a85      	ldr	r2, [pc, #532]	@ (8009f6c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d013      	beq.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a84      	ldr	r2, [pc, #528]	@ (8009f70 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d00e      	beq.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a82      	ldr	r2, [pc, #520]	@ (8009f74 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d009      	beq.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a81      	ldr	r2, [pc, #516]	@ (8009f78 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d004      	beq.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x86>
 8009d78:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8009d7c:	487a      	ldr	r0, [pc, #488]	@ (8009f68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009d7e:	f7f9 fff5 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d008      	beq.n	8009d9c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d004      	beq.n	8009d9c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8009d92:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8009d96:	4874      	ldr	r0, [pc, #464]	@ (8009f68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009d98:	f7f9 ffe8 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d008      	beq.n	8009db6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d004      	beq.n	8009db6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8009dac:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8009db0:	486d      	ldr	r0, [pc, #436]	@ (8009f68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009db2:	f7f9 ffdb 	bl	8003d6c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e1d9      	b.n	800a178 <HAL_TIM_PWM_ConfigChannel+0x47c>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b14      	cmp	r3, #20
 8009dd0:	f200 81ca 	bhi.w	800a168 <HAL_TIM_PWM_ConfigChannel+0x46c>
 8009dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ddc <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8009dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dda:	bf00      	nop
 8009ddc:	08009e31 	.word	0x08009e31
 8009de0:	0800a169 	.word	0x0800a169
 8009de4:	0800a169 	.word	0x0800a169
 8009de8:	0800a169 	.word	0x0800a169
 8009dec:	08009ed5 	.word	0x08009ed5
 8009df0:	0800a169 	.word	0x0800a169
 8009df4:	0800a169 	.word	0x0800a169
 8009df8:	0800a169 	.word	0x0800a169
 8009dfc:	08009f9d 	.word	0x08009f9d
 8009e00:	0800a169 	.word	0x0800a169
 8009e04:	0800a169 	.word	0x0800a169
 8009e08:	0800a169 	.word	0x0800a169
 8009e0c:	0800a023 	.word	0x0800a023
 8009e10:	0800a169 	.word	0x0800a169
 8009e14:	0800a169 	.word	0x0800a169
 8009e18:	0800a169 	.word	0x0800a169
 8009e1c:	0800a0ab 	.word	0x0800a0ab
 8009e20:	0800a169 	.word	0x0800a169
 8009e24:	0800a169 	.word	0x0800a169
 8009e28:	0800a169 	.word	0x0800a169
 8009e2c:	0800a109 	.word	0x0800a109
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a51      	ldr	r2, [pc, #324]	@ (8009f7c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d02c      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e42:	d027      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a4d      	ldr	r2, [pc, #308]	@ (8009f80 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d022      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a4c      	ldr	r2, [pc, #304]	@ (8009f84 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d01d      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8009f88 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d018      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a49      	ldr	r2, [pc, #292]	@ (8009f8c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d013      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a47      	ldr	r2, [pc, #284]	@ (8009f90 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d00e      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a46      	ldr	r2, [pc, #280]	@ (8009f94 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d009      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a44      	ldr	r2, [pc, #272]	@ (8009f98 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d004      	beq.n	8009e94 <HAL_TIM_PWM_ConfigChannel+0x198>
 8009e8a:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8009e8e:	4836      	ldr	r0, [pc, #216]	@ (8009f68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009e90:	f7f9 ff6c 	bl	8003d6c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68b9      	ldr	r1, [r7, #8]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fe18 	bl	800aad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	699a      	ldr	r2, [r3, #24]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f042 0208 	orr.w	r2, r2, #8
 8009eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	699a      	ldr	r2, [r3, #24]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0204 	bic.w	r2, r2, #4
 8009ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6999      	ldr	r1, [r3, #24]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	691a      	ldr	r2, [r3, #16]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	619a      	str	r2, [r3, #24]
      break;
 8009ed2:	e14c      	b.n	800a16e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a28      	ldr	r2, [pc, #160]	@ (8009f7c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d022      	beq.n	8009f24 <HAL_TIM_PWM_ConfigChannel+0x228>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee6:	d01d      	beq.n	8009f24 <HAL_TIM_PWM_ConfigChannel+0x228>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a24      	ldr	r2, [pc, #144]	@ (8009f80 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d018      	beq.n	8009f24 <HAL_TIM_PWM_ConfigChannel+0x228>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a23      	ldr	r2, [pc, #140]	@ (8009f84 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d013      	beq.n	8009f24 <HAL_TIM_PWM_ConfigChannel+0x228>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a21      	ldr	r2, [pc, #132]	@ (8009f88 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00e      	beq.n	8009f24 <HAL_TIM_PWM_ConfigChannel+0x228>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a20      	ldr	r2, [pc, #128]	@ (8009f8c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d009      	beq.n	8009f24 <HAL_TIM_PWM_ConfigChannel+0x228>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1e      	ldr	r2, [pc, #120]	@ (8009f90 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d004      	beq.n	8009f24 <HAL_TIM_PWM_ConfigChannel+0x228>
 8009f1a:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8009f1e:	4812      	ldr	r0, [pc, #72]	@ (8009f68 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009f20:	f7f9 ff24 	bl	8003d6c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fe8a 	bl	800ac44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	699a      	ldr	r2, [r3, #24]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6999      	ldr	r1, [r3, #24]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	021a      	lsls	r2, r3, #8
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	619a      	str	r2, [r3, #24]
      break;
 8009f64:	e103      	b.n	800a16e <HAL_TIM_PWM_ConfigChannel+0x472>
 8009f66:	bf00      	nop
 8009f68:	0800e114 	.word	0x0800e114
 8009f6c:	00010040 	.word	0x00010040
 8009f70:	00010050 	.word	0x00010050
 8009f74:	00010060 	.word	0x00010060
 8009f78:	00010070 	.word	0x00010070
 8009f7c:	40012c00 	.word	0x40012c00
 8009f80:	40000400 	.word	0x40000400
 8009f84:	40000800 	.word	0x40000800
 8009f88:	40000c00 	.word	0x40000c00
 8009f8c:	40013400 	.word	0x40013400
 8009f90:	40014000 	.word	0x40014000
 8009f94:	40014400 	.word	0x40014400
 8009f98:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a77      	ldr	r2, [pc, #476]	@ (800a180 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d01d      	beq.n	8009fe2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fae:	d018      	beq.n	8009fe2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a73      	ldr	r2, [pc, #460]	@ (800a184 <HAL_TIM_PWM_ConfigChannel+0x488>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d013      	beq.n	8009fe2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a72      	ldr	r2, [pc, #456]	@ (800a188 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00e      	beq.n	8009fe2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a70      	ldr	r2, [pc, #448]	@ (800a18c <HAL_TIM_PWM_ConfigChannel+0x490>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d009      	beq.n	8009fe2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a6f      	ldr	r2, [pc, #444]	@ (800a190 <HAL_TIM_PWM_ConfigChannel+0x494>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d004      	beq.n	8009fe2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8009fd8:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8009fdc:	486d      	ldr	r0, [pc, #436]	@ (800a194 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8009fde:	f7f9 fec5 	bl	8003d6c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 fedd 	bl	800ada8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69da      	ldr	r2, [r3, #28]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0208 	orr.w	r2, r2, #8
 8009ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69da      	ldr	r2, [r3, #28]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0204 	bic.w	r2, r2, #4
 800a00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69d9      	ldr	r1, [r3, #28]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	691a      	ldr	r2, [r3, #16]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	61da      	str	r2, [r3, #28]
      break;
 800a020:	e0a5      	b.n	800a16e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a56      	ldr	r2, [pc, #344]	@ (800a180 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d01d      	beq.n	800a068 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a034:	d018      	beq.n	800a068 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a52      	ldr	r2, [pc, #328]	@ (800a184 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d013      	beq.n	800a068 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a50      	ldr	r2, [pc, #320]	@ (800a188 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00e      	beq.n	800a068 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a4f      	ldr	r2, [pc, #316]	@ (800a18c <HAL_TIM_PWM_ConfigChannel+0x490>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d009      	beq.n	800a068 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a4d      	ldr	r2, [pc, #308]	@ (800a190 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d004      	beq.n	800a068 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800a05e:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800a062:	484c      	ldr	r0, [pc, #304]	@ (800a194 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800a064:	f7f9 fe82 	bl	8003d6c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 ff4c 	bl	800af0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	69da      	ldr	r2, [r3, #28]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a082:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	69da      	ldr	r2, [r3, #28]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a092:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69d9      	ldr	r1, [r3, #28]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	021a      	lsls	r2, r3, #8
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	61da      	str	r2, [r3, #28]
      break;
 800a0a8:	e061      	b.n	800a16e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a34      	ldr	r2, [pc, #208]	@ (800a180 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d009      	beq.n	800a0c8 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a35      	ldr	r2, [pc, #212]	@ (800a190 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d004      	beq.n	800a0c8 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800a0be:	f241 1104 	movw	r1, #4356	@ 0x1104
 800a0c2:	4834      	ldr	r0, [pc, #208]	@ (800a194 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800a0c4:	f7f9 fe52 	bl	8003d6c <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68b9      	ldr	r1, [r7, #8]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 ff94 	bl	800affc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0208 	orr.w	r2, r2, #8
 800a0e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0204 	bic.w	r2, r2, #4
 800a0f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	691a      	ldr	r2, [r3, #16]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a106:	e032      	b.n	800a16e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a1c      	ldr	r2, [pc, #112]	@ (800a180 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d009      	beq.n	800a126 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a1e      	ldr	r2, [pc, #120]	@ (800a190 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d004      	beq.n	800a126 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800a11c:	f241 1115 	movw	r1, #4373	@ 0x1115
 800a120:	481c      	ldr	r0, [pc, #112]	@ (800a194 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800a122:	f7f9 fe23 	bl	8003d6c <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68b9      	ldr	r1, [r7, #8]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 ffc9 	bl	800b0c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a140:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a150:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	021a      	lsls	r2, r3, #8
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a166:	e002      	b.n	800a16e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	75fb      	strb	r3, [r7, #23]
      break;
 800a16c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a176:	7dfb      	ldrb	r3, [r7, #23]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	40012c00 	.word	0x40012c00
 800a184:	40000400 	.word	0x40000400
 800a188:	40000800 	.word	0x40000800
 800a18c:	40000c00 	.word	0x40000c00
 800a190:	40013400 	.word	0x40013400
 800a194:	0800e114 	.word	0x0800e114

0800a198 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a33      	ldr	r2, [pc, #204]	@ (800a274 <HAL_TIM_GenerateEvent+0xdc>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d036      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1b4:	d031      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a2f      	ldr	r2, [pc, #188]	@ (800a278 <HAL_TIM_GenerateEvent+0xe0>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d02c      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a2d      	ldr	r2, [pc, #180]	@ (800a27c <HAL_TIM_GenerateEvent+0xe4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d027      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a2c      	ldr	r2, [pc, #176]	@ (800a280 <HAL_TIM_GenerateEvent+0xe8>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d022      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a2a      	ldr	r2, [pc, #168]	@ (800a284 <HAL_TIM_GenerateEvent+0xec>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d01d      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a29      	ldr	r2, [pc, #164]	@ (800a288 <HAL_TIM_GenerateEvent+0xf0>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d018      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a27      	ldr	r2, [pc, #156]	@ (800a28c <HAL_TIM_GenerateEvent+0xf4>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d013      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a26      	ldr	r2, [pc, #152]	@ (800a290 <HAL_TIM_GenerateEvent+0xf8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00e      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a24      	ldr	r2, [pc, #144]	@ (800a294 <HAL_TIM_GenerateEvent+0xfc>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d009      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a23      	ldr	r2, [pc, #140]	@ (800a298 <HAL_TIM_GenerateEvent+0x100>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d004      	beq.n	800a21a <HAL_TIM_GenerateEvent+0x82>
 800a210:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800a214:	4821      	ldr	r0, [pc, #132]	@ (800a29c <HAL_TIM_GenerateEvent+0x104>)
 800a216:	f7f9 fda9 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a220:	d202      	bcs.n	800a228 <HAL_TIM_GenerateEvent+0x90>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <HAL_TIM_GenerateEvent+0x9a>
 800a228:	f241 4181 	movw	r1, #5249	@ 0x1481
 800a22c:	481b      	ldr	r0, [pc, #108]	@ (800a29c <HAL_TIM_GenerateEvent+0x104>)
 800a22e:	f7f9 fd9d 	bl	8003d6c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d101      	bne.n	800a240 <HAL_TIM_GenerateEvent+0xa8>
 800a23c:	2302      	movs	r3, #2
 800a23e:	e014      	b.n	800a26a <HAL_TIM_GenerateEvent+0xd2>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	40012c00 	.word	0x40012c00
 800a278:	40000400 	.word	0x40000400
 800a27c:	40000800 	.word	0x40000800
 800a280:	40000c00 	.word	0x40000c00
 800a284:	40001000 	.word	0x40001000
 800a288:	40001400 	.word	0x40001400
 800a28c:	40013400 	.word	0x40013400
 800a290:	40014000 	.word	0x40014000
 800a294:	40014400 	.word	0x40014400
 800a298:	40014800 	.word	0x40014800
 800a29c:	0800e114 	.word	0x0800e114

0800a2a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d101      	bne.n	800a2bc <HAL_TIM_ConfigClockSource+0x1c>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e329      	b.n	800a910 <HAL_TIM_ConfigClockSource+0x670>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2d4:	d029      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b70      	cmp	r3, #112	@ 0x70
 800a2dc:	d025      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2e6:	d020      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b40      	cmp	r3, #64	@ 0x40
 800a2ee:	d01c      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b50      	cmp	r3, #80	@ 0x50
 800a2f6:	d018      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b60      	cmp	r3, #96	@ 0x60
 800a2fe:	d014      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d010      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b10      	cmp	r3, #16
 800a30e:	d00c      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b20      	cmp	r3, #32
 800a316:	d008      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b30      	cmp	r3, #48	@ 0x30
 800a31e:	d004      	beq.n	800a32a <HAL_TIM_ConfigClockSource+0x8a>
 800a320:	f241 5156 	movw	r1, #5462	@ 0x1556
 800a324:	4888      	ldr	r0, [pc, #544]	@ (800a548 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a326:	f7f9 fd21 	bl	8003d6c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a338:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a33c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a344:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a356:	f000 810d 	beq.w	800a574 <HAL_TIM_ConfigClockSource+0x2d4>
 800a35a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a35e:	f200 82ca 	bhi.w	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
 800a362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a366:	d02d      	beq.n	800a3c4 <HAL_TIM_ConfigClockSource+0x124>
 800a368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a36c:	f200 82c3 	bhi.w	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
 800a370:	2b70      	cmp	r3, #112	@ 0x70
 800a372:	d06f      	beq.n	800a454 <HAL_TIM_ConfigClockSource+0x1b4>
 800a374:	2b70      	cmp	r3, #112	@ 0x70
 800a376:	f200 82be 	bhi.w	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
 800a37a:	2b60      	cmp	r3, #96	@ 0x60
 800a37c:	f000 81d4 	beq.w	800a728 <HAL_TIM_ConfigClockSource+0x488>
 800a380:	2b60      	cmp	r3, #96	@ 0x60
 800a382:	f200 82b8 	bhi.w	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
 800a386:	2b50      	cmp	r3, #80	@ 0x50
 800a388:	f000 8165 	beq.w	800a656 <HAL_TIM_ConfigClockSource+0x3b6>
 800a38c:	2b50      	cmp	r3, #80	@ 0x50
 800a38e:	f200 82b2 	bhi.w	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
 800a392:	2b40      	cmp	r3, #64	@ 0x40
 800a394:	f000 8223 	beq.w	800a7de <HAL_TIM_ConfigClockSource+0x53e>
 800a398:	2b40      	cmp	r3, #64	@ 0x40
 800a39a:	f200 82ac 	bhi.w	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
 800a39e:	2b30      	cmp	r3, #48	@ 0x30
 800a3a0:	f000 8278 	beq.w	800a894 <HAL_TIM_ConfigClockSource+0x5f4>
 800a3a4:	2b30      	cmp	r3, #48	@ 0x30
 800a3a6:	f200 82a6 	bhi.w	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
 800a3aa:	2b20      	cmp	r3, #32
 800a3ac:	f000 8272 	beq.w	800a894 <HAL_TIM_ConfigClockSource+0x5f4>
 800a3b0:	2b20      	cmp	r3, #32
 800a3b2:	f200 82a0 	bhi.w	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 826c 	beq.w	800a894 <HAL_TIM_ConfigClockSource+0x5f4>
 800a3bc:	2b10      	cmp	r3, #16
 800a3be:	f000 8269 	beq.w	800a894 <HAL_TIM_ConfigClockSource+0x5f4>
 800a3c2:	e298      	b.n	800a8f6 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a60      	ldr	r2, [pc, #384]	@ (800a54c <HAL_TIM_ConfigClockSource+0x2ac>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	f000 8296 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3d8:	f000 8290 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a5b      	ldr	r2, [pc, #364]	@ (800a550 <HAL_TIM_ConfigClockSource+0x2b0>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	f000 828a 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a59      	ldr	r2, [pc, #356]	@ (800a554 <HAL_TIM_ConfigClockSource+0x2b4>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	f000 8284 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a57      	ldr	r2, [pc, #348]	@ (800a558 <HAL_TIM_ConfigClockSource+0x2b8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	f000 827e 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a55      	ldr	r2, [pc, #340]	@ (800a55c <HAL_TIM_ConfigClockSource+0x2bc>)
 800a406:	4293      	cmp	r3, r2
 800a408:	f000 8278 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a53      	ldr	r2, [pc, #332]	@ (800a560 <HAL_TIM_ConfigClockSource+0x2c0>)
 800a412:	4293      	cmp	r3, r2
 800a414:	f000 8272 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a51      	ldr	r2, [pc, #324]	@ (800a564 <HAL_TIM_ConfigClockSource+0x2c4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	f000 826c 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a4f      	ldr	r2, [pc, #316]	@ (800a568 <HAL_TIM_ConfigClockSource+0x2c8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	f000 8266 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a4d      	ldr	r2, [pc, #308]	@ (800a56c <HAL_TIM_ConfigClockSource+0x2cc>)
 800a436:	4293      	cmp	r3, r2
 800a438:	f000 8260 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a4b      	ldr	r2, [pc, #300]	@ (800a570 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	f000 825a 	beq.w	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
 800a448:	f241 5162 	movw	r1, #5474	@ 0x1562
 800a44c:	483e      	ldr	r0, [pc, #248]	@ (800a548 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a44e:	f7f9 fc8d 	bl	8003d6c <assert_failed>
      break;
 800a452:	e253      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a3c      	ldr	r2, [pc, #240]	@ (800a54c <HAL_TIM_ConfigClockSource+0x2ac>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d022      	beq.n	800a4a4 <HAL_TIM_ConfigClockSource+0x204>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a466:	d01d      	beq.n	800a4a4 <HAL_TIM_ConfigClockSource+0x204>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a38      	ldr	r2, [pc, #224]	@ (800a550 <HAL_TIM_ConfigClockSource+0x2b0>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d018      	beq.n	800a4a4 <HAL_TIM_ConfigClockSource+0x204>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a37      	ldr	r2, [pc, #220]	@ (800a554 <HAL_TIM_ConfigClockSource+0x2b4>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d013      	beq.n	800a4a4 <HAL_TIM_ConfigClockSource+0x204>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a35      	ldr	r2, [pc, #212]	@ (800a558 <HAL_TIM_ConfigClockSource+0x2b8>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00e      	beq.n	800a4a4 <HAL_TIM_ConfigClockSource+0x204>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a36      	ldr	r2, [pc, #216]	@ (800a564 <HAL_TIM_ConfigClockSource+0x2c4>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d009      	beq.n	800a4a4 <HAL_TIM_ConfigClockSource+0x204>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a34      	ldr	r2, [pc, #208]	@ (800a568 <HAL_TIM_ConfigClockSource+0x2c8>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d004      	beq.n	800a4a4 <HAL_TIM_ConfigClockSource+0x204>
 800a49a:	f241 5169 	movw	r1, #5481	@ 0x1569
 800a49e:	482a      	ldr	r0, [pc, #168]	@ (800a548 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a4a0:	f7f9 fc64 	bl	8003d6c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d013      	beq.n	800a4d4 <HAL_TIM_ConfigClockSource+0x234>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4b4:	d00e      	beq.n	800a4d4 <HAL_TIM_ConfigClockSource+0x234>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4be:	d009      	beq.n	800a4d4 <HAL_TIM_ConfigClockSource+0x234>
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a4c8:	d004      	beq.n	800a4d4 <HAL_TIM_ConfigClockSource+0x234>
 800a4ca:	f241 516c 	movw	r1, #5484	@ 0x156c
 800a4ce:	481e      	ldr	r0, [pc, #120]	@ (800a548 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a4d0:	f7f9 fc4c 	bl	8003d6c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4dc:	d014      	beq.n	800a508 <HAL_TIM_ConfigClockSource+0x268>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d010      	beq.n	800a508 <HAL_TIM_ConfigClockSource+0x268>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00c      	beq.n	800a508 <HAL_TIM_ConfigClockSource+0x268>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d008      	beq.n	800a508 <HAL_TIM_ConfigClockSource+0x268>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	2b0a      	cmp	r3, #10
 800a4fc:	d004      	beq.n	800a508 <HAL_TIM_ConfigClockSource+0x268>
 800a4fe:	f241 516d 	movw	r1, #5485	@ 0x156d
 800a502:	4811      	ldr	r0, [pc, #68]	@ (800a548 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a504:	f7f9 fc32 	bl	8003d6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	2b0f      	cmp	r3, #15
 800a50e:	d904      	bls.n	800a51a <HAL_TIM_ConfigClockSource+0x27a>
 800a510:	f241 516e 	movw	r1, #5486	@ 0x156e
 800a514:	480c      	ldr	r0, [pc, #48]	@ (800a548 <HAL_TIM_ConfigClockSource+0x2a8>)
 800a516:	f7f9 fc29 	bl	8003d6c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a52a:	f000 feab 	bl	800b284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a53c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	609a      	str	r2, [r3, #8]
      break;
 800a546:	e1da      	b.n	800a8fe <HAL_TIM_ConfigClockSource+0x65e>
 800a548:	0800e114 	.word	0x0800e114
 800a54c:	40012c00 	.word	0x40012c00
 800a550:	40000400 	.word	0x40000400
 800a554:	40000800 	.word	0x40000800
 800a558:	40000c00 	.word	0x40000c00
 800a55c:	40001000 	.word	0x40001000
 800a560:	40001400 	.word	0x40001400
 800a564:	40013400 	.word	0x40013400
 800a568:	40014000 	.word	0x40014000
 800a56c:	40014400 	.word	0x40014400
 800a570:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a64      	ldr	r2, [pc, #400]	@ (800a70c <HAL_TIM_ConfigClockSource+0x46c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d01d      	beq.n	800a5ba <HAL_TIM_ConfigClockSource+0x31a>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a586:	d018      	beq.n	800a5ba <HAL_TIM_ConfigClockSource+0x31a>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a60      	ldr	r2, [pc, #384]	@ (800a710 <HAL_TIM_ConfigClockSource+0x470>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d013      	beq.n	800a5ba <HAL_TIM_ConfigClockSource+0x31a>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a5f      	ldr	r2, [pc, #380]	@ (800a714 <HAL_TIM_ConfigClockSource+0x474>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d00e      	beq.n	800a5ba <HAL_TIM_ConfigClockSource+0x31a>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a5d      	ldr	r2, [pc, #372]	@ (800a718 <HAL_TIM_ConfigClockSource+0x478>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d009      	beq.n	800a5ba <HAL_TIM_ConfigClockSource+0x31a>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a5c      	ldr	r2, [pc, #368]	@ (800a71c <HAL_TIM_ConfigClockSource+0x47c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d004      	beq.n	800a5ba <HAL_TIM_ConfigClockSource+0x31a>
 800a5b0:	f241 5181 	movw	r1, #5505	@ 0x1581
 800a5b4:	485a      	ldr	r0, [pc, #360]	@ (800a720 <HAL_TIM_ConfigClockSource+0x480>)
 800a5b6:	f7f9 fbd9 	bl	8003d6c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d013      	beq.n	800a5ea <HAL_TIM_ConfigClockSource+0x34a>
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5ca:	d00e      	beq.n	800a5ea <HAL_TIM_ConfigClockSource+0x34a>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5d4:	d009      	beq.n	800a5ea <HAL_TIM_ConfigClockSource+0x34a>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5de:	d004      	beq.n	800a5ea <HAL_TIM_ConfigClockSource+0x34a>
 800a5e0:	f241 5184 	movw	r1, #5508	@ 0x1584
 800a5e4:	484e      	ldr	r0, [pc, #312]	@ (800a720 <HAL_TIM_ConfigClockSource+0x480>)
 800a5e6:	f7f9 fbc1 	bl	8003d6c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5f2:	d014      	beq.n	800a61e <HAL_TIM_ConfigClockSource+0x37e>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d010      	beq.n	800a61e <HAL_TIM_ConfigClockSource+0x37e>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00c      	beq.n	800a61e <HAL_TIM_ConfigClockSource+0x37e>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d008      	beq.n	800a61e <HAL_TIM_ConfigClockSource+0x37e>
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	2b0a      	cmp	r3, #10
 800a612:	d004      	beq.n	800a61e <HAL_TIM_ConfigClockSource+0x37e>
 800a614:	f241 5185 	movw	r1, #5509	@ 0x1585
 800a618:	4841      	ldr	r0, [pc, #260]	@ (800a720 <HAL_TIM_ConfigClockSource+0x480>)
 800a61a:	f7f9 fba7 	bl	8003d6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	2b0f      	cmp	r3, #15
 800a624:	d904      	bls.n	800a630 <HAL_TIM_ConfigClockSource+0x390>
 800a626:	f241 5186 	movw	r1, #5510	@ 0x1586
 800a62a:	483d      	ldr	r0, [pc, #244]	@ (800a720 <HAL_TIM_ConfigClockSource+0x480>)
 800a62c:	f7f9 fb9e 	bl	8003d6c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a640:	f000 fe20 	bl	800b284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a652:	609a      	str	r2, [r3, #8]
      break;
 800a654:	e153      	b.n	800a8fe <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a2c      	ldr	r2, [pc, #176]	@ (800a70c <HAL_TIM_ConfigClockSource+0x46c>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d022      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x406>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a668:	d01d      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x406>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a28      	ldr	r2, [pc, #160]	@ (800a710 <HAL_TIM_ConfigClockSource+0x470>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d018      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x406>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a26      	ldr	r2, [pc, #152]	@ (800a714 <HAL_TIM_ConfigClockSource+0x474>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d013      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x406>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a25      	ldr	r2, [pc, #148]	@ (800a718 <HAL_TIM_ConfigClockSource+0x478>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d00e      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x406>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a23      	ldr	r2, [pc, #140]	@ (800a71c <HAL_TIM_ConfigClockSource+0x47c>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d009      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x406>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a23      	ldr	r2, [pc, #140]	@ (800a724 <HAL_TIM_ConfigClockSource+0x484>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d004      	beq.n	800a6a6 <HAL_TIM_ConfigClockSource+0x406>
 800a69c:	f241 5195 	movw	r1, #5525	@ 0x1595
 800a6a0:	481f      	ldr	r0, [pc, #124]	@ (800a720 <HAL_TIM_ConfigClockSource+0x480>)
 800a6a2:	f7f9 fb63 	bl	8003d6c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6ae:	d014      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x43a>
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d010      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x43a>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00c      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x43a>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d008      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x43a>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	2b0a      	cmp	r3, #10
 800a6ce:	d004      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x43a>
 800a6d0:	f241 5198 	movw	r1, #5528	@ 0x1598
 800a6d4:	4812      	ldr	r0, [pc, #72]	@ (800a720 <HAL_TIM_ConfigClockSource+0x480>)
 800a6d6:	f7f9 fb49 	bl	8003d6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	2b0f      	cmp	r3, #15
 800a6e0:	d904      	bls.n	800a6ec <HAL_TIM_ConfigClockSource+0x44c>
 800a6e2:	f241 5199 	movw	r1, #5529	@ 0x1599
 800a6e6:	480e      	ldr	r0, [pc, #56]	@ (800a720 <HAL_TIM_ConfigClockSource+0x480>)
 800a6e8:	f7f9 fb40 	bl	8003d6c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	f000 fd49 	bl	800b190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2150      	movs	r1, #80	@ 0x50
 800a704:	4618      	mov	r0, r3
 800a706:	f000 fda2 	bl	800b24e <TIM_ITRx_SetConfig>
      break;
 800a70a:	e0f8      	b.n	800a8fe <HAL_TIM_ConfigClockSource+0x65e>
 800a70c:	40012c00 	.word	0x40012c00
 800a710:	40000400 	.word	0x40000400
 800a714:	40000800 	.word	0x40000800
 800a718:	40000c00 	.word	0x40000c00
 800a71c:	40013400 	.word	0x40013400
 800a720:	0800e114 	.word	0x0800e114
 800a724:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a7a      	ldr	r2, [pc, #488]	@ (800a918 <HAL_TIM_ConfigClockSource+0x678>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d022      	beq.n	800a778 <HAL_TIM_ConfigClockSource+0x4d8>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a73a:	d01d      	beq.n	800a778 <HAL_TIM_ConfigClockSource+0x4d8>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a76      	ldr	r2, [pc, #472]	@ (800a91c <HAL_TIM_ConfigClockSource+0x67c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d018      	beq.n	800a778 <HAL_TIM_ConfigClockSource+0x4d8>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a75      	ldr	r2, [pc, #468]	@ (800a920 <HAL_TIM_ConfigClockSource+0x680>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d013      	beq.n	800a778 <HAL_TIM_ConfigClockSource+0x4d8>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a73      	ldr	r2, [pc, #460]	@ (800a924 <HAL_TIM_ConfigClockSource+0x684>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00e      	beq.n	800a778 <HAL_TIM_ConfigClockSource+0x4d8>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a72      	ldr	r2, [pc, #456]	@ (800a928 <HAL_TIM_ConfigClockSource+0x688>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d009      	beq.n	800a778 <HAL_TIM_ConfigClockSource+0x4d8>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a70      	ldr	r2, [pc, #448]	@ (800a92c <HAL_TIM_ConfigClockSource+0x68c>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d004      	beq.n	800a778 <HAL_TIM_ConfigClockSource+0x4d8>
 800a76e:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800a772:	486f      	ldr	r0, [pc, #444]	@ (800a930 <HAL_TIM_ConfigClockSource+0x690>)
 800a774:	f7f9 fafa 	bl	8003d6c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a780:	d014      	beq.n	800a7ac <HAL_TIM_ConfigClockSource+0x50c>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d010      	beq.n	800a7ac <HAL_TIM_ConfigClockSource+0x50c>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00c      	beq.n	800a7ac <HAL_TIM_ConfigClockSource+0x50c>
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	2b02      	cmp	r3, #2
 800a798:	d008      	beq.n	800a7ac <HAL_TIM_ConfigClockSource+0x50c>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	2b0a      	cmp	r3, #10
 800a7a0:	d004      	beq.n	800a7ac <HAL_TIM_ConfigClockSource+0x50c>
 800a7a2:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800a7a6:	4862      	ldr	r0, [pc, #392]	@ (800a930 <HAL_TIM_ConfigClockSource+0x690>)
 800a7a8:	f7f9 fae0 	bl	8003d6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2b0f      	cmp	r3, #15
 800a7b2:	d904      	bls.n	800a7be <HAL_TIM_ConfigClockSource+0x51e>
 800a7b4:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800a7b8:	485d      	ldr	r0, [pc, #372]	@ (800a930 <HAL_TIM_ConfigClockSource+0x690>)
 800a7ba:	f7f9 fad7 	bl	8003d6c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f000 fd0f 	bl	800b1ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2160      	movs	r1, #96	@ 0x60
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 fd39 	bl	800b24e <TIM_ITRx_SetConfig>
      break;
 800a7dc:	e08f      	b.n	800a8fe <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a4d      	ldr	r2, [pc, #308]	@ (800a918 <HAL_TIM_ConfigClockSource+0x678>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d022      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x58e>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7f0:	d01d      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x58e>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a49      	ldr	r2, [pc, #292]	@ (800a91c <HAL_TIM_ConfigClockSource+0x67c>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d018      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x58e>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a47      	ldr	r2, [pc, #284]	@ (800a920 <HAL_TIM_ConfigClockSource+0x680>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d013      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x58e>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a46      	ldr	r2, [pc, #280]	@ (800a924 <HAL_TIM_ConfigClockSource+0x684>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d00e      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x58e>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a44      	ldr	r2, [pc, #272]	@ (800a928 <HAL_TIM_ConfigClockSource+0x688>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d009      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x58e>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a43      	ldr	r2, [pc, #268]	@ (800a92c <HAL_TIM_ConfigClockSource+0x68c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d004      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x58e>
 800a824:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800a828:	4841      	ldr	r0, [pc, #260]	@ (800a930 <HAL_TIM_ConfigClockSource+0x690>)
 800a82a:	f7f9 fa9f 	bl	8003d6c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a836:	d014      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x5c2>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d010      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x5c2>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00c      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x5c2>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d008      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x5c2>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b0a      	cmp	r3, #10
 800a856:	d004      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x5c2>
 800a858:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 800a85c:	4834      	ldr	r0, [pc, #208]	@ (800a930 <HAL_TIM_ConfigClockSource+0x690>)
 800a85e:	f7f9 fa85 	bl	8003d6c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	2b0f      	cmp	r3, #15
 800a868:	d904      	bls.n	800a874 <HAL_TIM_ConfigClockSource+0x5d4>
 800a86a:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800a86e:	4830      	ldr	r0, [pc, #192]	@ (800a930 <HAL_TIM_ConfigClockSource+0x690>)
 800a870:	f7f9 fa7c 	bl	8003d6c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a880:	461a      	mov	r2, r3
 800a882:	f000 fc85 	bl	800b190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2140      	movs	r1, #64	@ 0x40
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fcde 	bl	800b24e <TIM_ITRx_SetConfig>
      break;
 800a892:	e034      	b.n	800a8fe <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a1f      	ldr	r2, [pc, #124]	@ (800a918 <HAL_TIM_ConfigClockSource+0x678>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d022      	beq.n	800a8e4 <HAL_TIM_ConfigClockSource+0x644>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8a6:	d01d      	beq.n	800a8e4 <HAL_TIM_ConfigClockSource+0x644>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a1b      	ldr	r2, [pc, #108]	@ (800a91c <HAL_TIM_ConfigClockSource+0x67c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d018      	beq.n	800a8e4 <HAL_TIM_ConfigClockSource+0x644>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a920 <HAL_TIM_ConfigClockSource+0x680>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d013      	beq.n	800a8e4 <HAL_TIM_ConfigClockSource+0x644>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a18      	ldr	r2, [pc, #96]	@ (800a924 <HAL_TIM_ConfigClockSource+0x684>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00e      	beq.n	800a8e4 <HAL_TIM_ConfigClockSource+0x644>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a17      	ldr	r2, [pc, #92]	@ (800a928 <HAL_TIM_ConfigClockSource+0x688>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d009      	beq.n	800a8e4 <HAL_TIM_ConfigClockSource+0x644>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a15      	ldr	r2, [pc, #84]	@ (800a92c <HAL_TIM_ConfigClockSource+0x68c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d004      	beq.n	800a8e4 <HAL_TIM_ConfigClockSource+0x644>
 800a8da:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 800a8de:	4814      	ldr	r0, [pc, #80]	@ (800a930 <HAL_TIM_ConfigClockSource+0x690>)
 800a8e0:	f7f9 fa44 	bl	8003d6c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f000 fcad 	bl	800b24e <TIM_ITRx_SetConfig>
      break;
 800a8f4:	e003      	b.n	800a8fe <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8fa:	e000      	b.n	800a8fe <HAL_TIM_ConfigClockSource+0x65e>
      break;
 800a8fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	40012c00 	.word	0x40012c00
 800a91c:	40000400 	.word	0x40000400
 800a920:	40000800 	.word	0x40000800
 800a924:	40000c00 	.word	0x40000c00
 800a928:	40013400 	.word	0x40013400
 800a92c:	40014000 	.word	0x40014000
 800a930:	0800e114 	.word	0x0800e114

0800a934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a46      	ldr	r2, [pc, #280]	@ (800aab0 <TIM_Base_SetConfig+0x12c>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d013      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9a2:	d00f      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a43      	ldr	r2, [pc, #268]	@ (800aab4 <TIM_Base_SetConfig+0x130>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d00b      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a42      	ldr	r2, [pc, #264]	@ (800aab8 <TIM_Base_SetConfig+0x134>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d007      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a41      	ldr	r2, [pc, #260]	@ (800aabc <TIM_Base_SetConfig+0x138>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d003      	beq.n	800a9c4 <TIM_Base_SetConfig+0x40>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a40      	ldr	r2, [pc, #256]	@ (800aac0 <TIM_Base_SetConfig+0x13c>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d108      	bne.n	800a9d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a35      	ldr	r2, [pc, #212]	@ (800aab0 <TIM_Base_SetConfig+0x12c>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d01f      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e4:	d01b      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a32      	ldr	r2, [pc, #200]	@ (800aab4 <TIM_Base_SetConfig+0x130>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d017      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a31      	ldr	r2, [pc, #196]	@ (800aab8 <TIM_Base_SetConfig+0x134>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d013      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a30      	ldr	r2, [pc, #192]	@ (800aabc <TIM_Base_SetConfig+0x138>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00f      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a2f      	ldr	r2, [pc, #188]	@ (800aac0 <TIM_Base_SetConfig+0x13c>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00b      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a2e      	ldr	r2, [pc, #184]	@ (800aac4 <TIM_Base_SetConfig+0x140>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d007      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a2d      	ldr	r2, [pc, #180]	@ (800aac8 <TIM_Base_SetConfig+0x144>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_Base_SetConfig+0x9a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a2c      	ldr	r2, [pc, #176]	@ (800aacc <TIM_Base_SetConfig+0x148>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d108      	bne.n	800aa30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a16      	ldr	r2, [pc, #88]	@ (800aab0 <TIM_Base_SetConfig+0x12c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d00f      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a18      	ldr	r2, [pc, #96]	@ (800aac0 <TIM_Base_SetConfig+0x13c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00b      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a17      	ldr	r2, [pc, #92]	@ (800aac4 <TIM_Base_SetConfig+0x140>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d007      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a16      	ldr	r2, [pc, #88]	@ (800aac8 <TIM_Base_SetConfig+0x144>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d003      	beq.n	800aa7c <TIM_Base_SetConfig+0xf8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a15      	ldr	r2, [pc, #84]	@ (800aacc <TIM_Base_SetConfig+0x148>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d103      	bne.n	800aa84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	691a      	ldr	r2, [r3, #16]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d105      	bne.n	800aaa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	f023 0201 	bic.w	r2, r3, #1
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	611a      	str	r2, [r3, #16]
  }
}
 800aaa2:	bf00      	nop
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	40012c00 	.word	0x40012c00
 800aab4:	40000400 	.word	0x40000400
 800aab8:	40000800 	.word	0x40000800
 800aabc:	40000c00 	.word	0x40000c00
 800aac0:	40013400 	.word	0x40013400
 800aac4:	40014000 	.word	0x40014000
 800aac8:	40014400 	.word	0x40014400
 800aacc:	40014800 	.word	0x40014800

0800aad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	f023 0201 	bic.w	r2, r3, #1
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aafe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f023 0303 	bic.w	r3, r3, #3
 800ab0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f023 0302 	bic.w	r3, r3, #2
 800ab1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a40      	ldr	r2, [pc, #256]	@ (800ac2c <TIM_OC1_SetConfig+0x15c>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d00f      	beq.n	800ab50 <TIM_OC1_SetConfig+0x80>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a3f      	ldr	r2, [pc, #252]	@ (800ac30 <TIM_OC1_SetConfig+0x160>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d00b      	beq.n	800ab50 <TIM_OC1_SetConfig+0x80>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a3e      	ldr	r2, [pc, #248]	@ (800ac34 <TIM_OC1_SetConfig+0x164>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d007      	beq.n	800ab50 <TIM_OC1_SetConfig+0x80>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a3d      	ldr	r2, [pc, #244]	@ (800ac38 <TIM_OC1_SetConfig+0x168>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d003      	beq.n	800ab50 <TIM_OC1_SetConfig+0x80>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a3c      	ldr	r2, [pc, #240]	@ (800ac3c <TIM_OC1_SetConfig+0x16c>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d119      	bne.n	800ab84 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d008      	beq.n	800ab6a <TIM_OC1_SetConfig+0x9a>
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	2b08      	cmp	r3, #8
 800ab5e:	d004      	beq.n	800ab6a <TIM_OC1_SetConfig+0x9a>
 800ab60:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800ab64:	4836      	ldr	r0, [pc, #216]	@ (800ac40 <TIM_OC1_SetConfig+0x170>)
 800ab66:	f7f9 f901 	bl	8003d6c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f023 0308 	bic.w	r3, r3, #8
 800ab70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	f023 0304 	bic.w	r3, r3, #4
 800ab82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a29      	ldr	r2, [pc, #164]	@ (800ac2c <TIM_OC1_SetConfig+0x15c>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00f      	beq.n	800abac <TIM_OC1_SetConfig+0xdc>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a28      	ldr	r2, [pc, #160]	@ (800ac30 <TIM_OC1_SetConfig+0x160>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d00b      	beq.n	800abac <TIM_OC1_SetConfig+0xdc>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a27      	ldr	r2, [pc, #156]	@ (800ac34 <TIM_OC1_SetConfig+0x164>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d007      	beq.n	800abac <TIM_OC1_SetConfig+0xdc>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a26      	ldr	r2, [pc, #152]	@ (800ac38 <TIM_OC1_SetConfig+0x168>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d003      	beq.n	800abac <TIM_OC1_SetConfig+0xdc>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a25      	ldr	r2, [pc, #148]	@ (800ac3c <TIM_OC1_SetConfig+0x16c>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d12d      	bne.n	800ac08 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abb4:	d008      	beq.n	800abc8 <TIM_OC1_SetConfig+0xf8>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <TIM_OC1_SetConfig+0xf8>
 800abbe:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800abc2:	481f      	ldr	r0, [pc, #124]	@ (800ac40 <TIM_OC1_SetConfig+0x170>)
 800abc4:	f7f9 f8d2 	bl	8003d6c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abd0:	d008      	beq.n	800abe4 <TIM_OC1_SetConfig+0x114>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d004      	beq.n	800abe4 <TIM_OC1_SetConfig+0x114>
 800abda:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800abde:	4818      	ldr	r0, [pc, #96]	@ (800ac40 <TIM_OC1_SetConfig+0x170>)
 800abe0:	f7f9 f8c4 	bl	8003d6c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	621a      	str	r2, [r3, #32]
}
 800ac22:	bf00      	nop
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	40012c00 	.word	0x40012c00
 800ac30:	40013400 	.word	0x40013400
 800ac34:	40014000 	.word	0x40014000
 800ac38:	40014400 	.word	0x40014400
 800ac3c:	40014800 	.word	0x40014800
 800ac40:	0800e114 	.word	0x0800e114

0800ac44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	f023 0210 	bic.w	r2, r3, #16
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	021b      	lsls	r3, r3, #8
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f023 0320 	bic.w	r3, r3, #32
 800ac92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a3b      	ldr	r2, [pc, #236]	@ (800ad90 <TIM_OC2_SetConfig+0x14c>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_OC2_SetConfig+0x6c>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a3a      	ldr	r2, [pc, #232]	@ (800ad94 <TIM_OC2_SetConfig+0x150>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d11a      	bne.n	800ace6 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d008      	beq.n	800acca <TIM_OC2_SetConfig+0x86>
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	2b08      	cmp	r3, #8
 800acbe:	d004      	beq.n	800acca <TIM_OC2_SetConfig+0x86>
 800acc0:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800acc4:	4834      	ldr	r0, [pc, #208]	@ (800ad98 <TIM_OC2_SetConfig+0x154>)
 800acc6:	f7f9 f851 	bl	8003d6c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	011b      	lsls	r3, r3, #4
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	4313      	orrs	r3, r2
 800acdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ace4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a29      	ldr	r2, [pc, #164]	@ (800ad90 <TIM_OC2_SetConfig+0x14c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d00f      	beq.n	800ad0e <TIM_OC2_SetConfig+0xca>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a28      	ldr	r2, [pc, #160]	@ (800ad94 <TIM_OC2_SetConfig+0x150>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d00b      	beq.n	800ad0e <TIM_OC2_SetConfig+0xca>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a28      	ldr	r2, [pc, #160]	@ (800ad9c <TIM_OC2_SetConfig+0x158>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d007      	beq.n	800ad0e <TIM_OC2_SetConfig+0xca>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a27      	ldr	r2, [pc, #156]	@ (800ada0 <TIM_OC2_SetConfig+0x15c>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d003      	beq.n	800ad0e <TIM_OC2_SetConfig+0xca>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a26      	ldr	r2, [pc, #152]	@ (800ada4 <TIM_OC2_SetConfig+0x160>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d12f      	bne.n	800ad6e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad16:	d008      	beq.n	800ad2a <TIM_OC2_SetConfig+0xe6>
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d004      	beq.n	800ad2a <TIM_OC2_SetConfig+0xe6>
 800ad20:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 800ad24:	481c      	ldr	r0, [pc, #112]	@ (800ad98 <TIM_OC2_SetConfig+0x154>)
 800ad26:	f7f9 f821 	bl	8003d6c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad32:	d008      	beq.n	800ad46 <TIM_OC2_SetConfig+0x102>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <TIM_OC2_SetConfig+0x102>
 800ad3c:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 800ad40:	4815      	ldr	r0, [pc, #84]	@ (800ad98 <TIM_OC2_SetConfig+0x154>)
 800ad42:	f7f9 f813 	bl	8003d6c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	621a      	str	r2, [r3, #32]
}
 800ad88:	bf00      	nop
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	40012c00 	.word	0x40012c00
 800ad94:	40013400 	.word	0x40013400
 800ad98:	0800e114 	.word	0x0800e114
 800ad9c:	40014000 	.word	0x40014000
 800ada0:	40014400 	.word	0x40014400
 800ada4:	40014800 	.word	0x40014800

0800ada8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800add6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f023 0303 	bic.w	r3, r3, #3
 800ade2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	4313      	orrs	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800adf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	021b      	lsls	r3, r3, #8
 800adfc:	697a      	ldr	r2, [r7, #20]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a3b      	ldr	r2, [pc, #236]	@ (800aef4 <TIM_OC3_SetConfig+0x14c>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d003      	beq.n	800ae12 <TIM_OC3_SetConfig+0x6a>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a3a      	ldr	r2, [pc, #232]	@ (800aef8 <TIM_OC3_SetConfig+0x150>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d11a      	bne.n	800ae48 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d008      	beq.n	800ae2c <TIM_OC3_SetConfig+0x84>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	d004      	beq.n	800ae2c <TIM_OC3_SetConfig+0x84>
 800ae22:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800ae26:	4835      	ldr	r0, [pc, #212]	@ (800aefc <TIM_OC3_SetConfig+0x154>)
 800ae28:	f7f8 ffa0 	bl	8003d6c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	021b      	lsls	r3, r3, #8
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a2a      	ldr	r2, [pc, #168]	@ (800aef4 <TIM_OC3_SetConfig+0x14c>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d00f      	beq.n	800ae70 <TIM_OC3_SetConfig+0xc8>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a29      	ldr	r2, [pc, #164]	@ (800aef8 <TIM_OC3_SetConfig+0x150>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d00b      	beq.n	800ae70 <TIM_OC3_SetConfig+0xc8>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a29      	ldr	r2, [pc, #164]	@ (800af00 <TIM_OC3_SetConfig+0x158>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d007      	beq.n	800ae70 <TIM_OC3_SetConfig+0xc8>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a28      	ldr	r2, [pc, #160]	@ (800af04 <TIM_OC3_SetConfig+0x15c>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d003      	beq.n	800ae70 <TIM_OC3_SetConfig+0xc8>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a27      	ldr	r2, [pc, #156]	@ (800af08 <TIM_OC3_SetConfig+0x160>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d12f      	bne.n	800aed0 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae78:	d008      	beq.n	800ae8c <TIM_OC3_SetConfig+0xe4>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <TIM_OC3_SetConfig+0xe4>
 800ae82:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800ae86:	481d      	ldr	r0, [pc, #116]	@ (800aefc <TIM_OC3_SetConfig+0x154>)
 800ae88:	f7f8 ff70 	bl	8003d6c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae94:	d008      	beq.n	800aea8 <TIM_OC3_SetConfig+0x100>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d004      	beq.n	800aea8 <TIM_OC3_SetConfig+0x100>
 800ae9e:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800aea2:	4816      	ldr	r0, [pc, #88]	@ (800aefc <TIM_OC3_SetConfig+0x154>)
 800aea4:	f7f8 ff62 	bl	8003d6c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aeae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aeb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	011b      	lsls	r3, r3, #4
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	4313      	orrs	r3, r2
 800aece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	621a      	str	r2, [r3, #32]
}
 800aeea:	bf00      	nop
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	40012c00 	.word	0x40012c00
 800aef8:	40013400 	.word	0x40013400
 800aefc:	0800e114 	.word	0x0800e114
 800af00:	40014000 	.word	0x40014000
 800af04:	40014400 	.word	0x40014400
 800af08:	40014800 	.word	0x40014800

0800af0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	021b      	lsls	r3, r3, #8
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	4313      	orrs	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	031b      	lsls	r3, r3, #12
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	4313      	orrs	r3, r2
 800af66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a1e      	ldr	r2, [pc, #120]	@ (800afe4 <TIM_OC4_SetConfig+0xd8>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d00f      	beq.n	800af90 <TIM_OC4_SetConfig+0x84>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a1d      	ldr	r2, [pc, #116]	@ (800afe8 <TIM_OC4_SetConfig+0xdc>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00b      	beq.n	800af90 <TIM_OC4_SetConfig+0x84>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a1c      	ldr	r2, [pc, #112]	@ (800afec <TIM_OC4_SetConfig+0xe0>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d007      	beq.n	800af90 <TIM_OC4_SetConfig+0x84>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a1b      	ldr	r2, [pc, #108]	@ (800aff0 <TIM_OC4_SetConfig+0xe4>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <TIM_OC4_SetConfig+0x84>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a1a      	ldr	r2, [pc, #104]	@ (800aff4 <TIM_OC4_SetConfig+0xe8>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d117      	bne.n	800afc0 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af98:	d008      	beq.n	800afac <TIM_OC4_SetConfig+0xa0>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d004      	beq.n	800afac <TIM_OC4_SetConfig+0xa0>
 800afa2:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800afa6:	4814      	ldr	r0, [pc, #80]	@ (800aff8 <TIM_OC4_SetConfig+0xec>)
 800afa8:	f7f8 fee0 	bl	8003d6c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	019b      	lsls	r3, r3, #6
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	621a      	str	r2, [r3, #32]
}
 800afda:	bf00      	nop
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	40012c00 	.word	0x40012c00
 800afe8:	40013400 	.word	0x40013400
 800afec:	40014000 	.word	0x40014000
 800aff0:	40014400 	.word	0x40014400
 800aff4:	40014800 	.word	0x40014800
 800aff8:	0800e114 	.word	0x0800e114

0800affc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800affc:	b480      	push	{r7}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a1b      	ldr	r3, [r3, #32]
 800b010:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b02a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b02e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b040:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	041b      	lsls	r3, r3, #16
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a17      	ldr	r2, [pc, #92]	@ (800b0b0 <TIM_OC5_SetConfig+0xb4>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d00f      	beq.n	800b076 <TIM_OC5_SetConfig+0x7a>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a16      	ldr	r2, [pc, #88]	@ (800b0b4 <TIM_OC5_SetConfig+0xb8>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d00b      	beq.n	800b076 <TIM_OC5_SetConfig+0x7a>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a15      	ldr	r2, [pc, #84]	@ (800b0b8 <TIM_OC5_SetConfig+0xbc>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d007      	beq.n	800b076 <TIM_OC5_SetConfig+0x7a>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a14      	ldr	r2, [pc, #80]	@ (800b0bc <TIM_OC5_SetConfig+0xc0>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d003      	beq.n	800b076 <TIM_OC5_SetConfig+0x7a>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a13      	ldr	r2, [pc, #76]	@ (800b0c0 <TIM_OC5_SetConfig+0xc4>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d109      	bne.n	800b08a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b07c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	695b      	ldr	r3, [r3, #20]
 800b082:	021b      	lsls	r3, r3, #8
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	685a      	ldr	r2, [r3, #4]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	621a      	str	r2, [r3, #32]
}
 800b0a4:	bf00      	nop
 800b0a6:	371c      	adds	r7, #28
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	40012c00 	.word	0x40012c00
 800b0b4:	40013400 	.word	0x40013400
 800b0b8:	40014000 	.word	0x40014000
 800b0bc:	40014400 	.word	0x40014400
 800b0c0:	40014800 	.word	0x40014800

0800b0c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	021b      	lsls	r3, r3, #8
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	4313      	orrs	r3, r2
 800b102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b10a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	051b      	lsls	r3, r3, #20
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	4313      	orrs	r3, r2
 800b116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a18      	ldr	r2, [pc, #96]	@ (800b17c <TIM_OC6_SetConfig+0xb8>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d00f      	beq.n	800b140 <TIM_OC6_SetConfig+0x7c>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a17      	ldr	r2, [pc, #92]	@ (800b180 <TIM_OC6_SetConfig+0xbc>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d00b      	beq.n	800b140 <TIM_OC6_SetConfig+0x7c>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a16      	ldr	r2, [pc, #88]	@ (800b184 <TIM_OC6_SetConfig+0xc0>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d007      	beq.n	800b140 <TIM_OC6_SetConfig+0x7c>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a15      	ldr	r2, [pc, #84]	@ (800b188 <TIM_OC6_SetConfig+0xc4>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d003      	beq.n	800b140 <TIM_OC6_SetConfig+0x7c>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a14      	ldr	r2, [pc, #80]	@ (800b18c <TIM_OC6_SetConfig+0xc8>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d109      	bne.n	800b154 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	029b      	lsls	r3, r3, #10
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	4313      	orrs	r3, r2
 800b152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	621a      	str	r2, [r3, #32]
}
 800b16e:	bf00      	nop
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	40012c00 	.word	0x40012c00
 800b180:	40013400 	.word	0x40013400
 800b184:	40014000 	.word	0x40014000
 800b188:	40014400 	.word	0x40014400
 800b18c:	40014800 	.word	0x40014800

0800b190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b190:	b480      	push	{r7}
 800b192:	b087      	sub	sp, #28
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	f023 0201 	bic.w	r2, r3, #1
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b1ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	011b      	lsls	r3, r3, #4
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f023 030a 	bic.w	r3, r3, #10
 800b1cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	621a      	str	r2, [r3, #32]
}
 800b1e2:	bf00      	nop
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b087      	sub	sp, #28
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6a1b      	ldr	r3, [r3, #32]
 800b204:	f023 0210 	bic.w	r2, r3, #16
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	031b      	lsls	r3, r3, #12
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	4313      	orrs	r3, r2
 800b222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b22a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	011b      	lsls	r3, r3, #4
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	4313      	orrs	r3, r2
 800b234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	621a      	str	r2, [r3, #32]
}
 800b242:	bf00      	nop
 800b244:	371c      	adds	r7, #28
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b24e:	b480      	push	{r7}
 800b250:	b085      	sub	sp, #20
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	f043 0307 	orr.w	r3, r3, #7
 800b270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	609a      	str	r2, [r3, #8]
}
 800b278:	bf00      	nop
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
 800b290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b29e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	021a      	lsls	r2, r3, #8
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	609a      	str	r2, [r3, #8]
}
 800b2b8:	bf00      	nop
 800b2ba:	371c      	adds	r7, #28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4a2f      	ldr	r2, [pc, #188]	@ (800b390 <TIM_CCxChannelCmd+0xcc>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d024      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2de:	d020      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4a2c      	ldr	r2, [pc, #176]	@ (800b394 <TIM_CCxChannelCmd+0xd0>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d01c      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4a2b      	ldr	r2, [pc, #172]	@ (800b398 <TIM_CCxChannelCmd+0xd4>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d018      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b39c <TIM_CCxChannelCmd+0xd8>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d014      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4a29      	ldr	r2, [pc, #164]	@ (800b3a0 <TIM_CCxChannelCmd+0xdc>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d010      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4a28      	ldr	r2, [pc, #160]	@ (800b3a4 <TIM_CCxChannelCmd+0xe0>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d00c      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4a27      	ldr	r2, [pc, #156]	@ (800b3a8 <TIM_CCxChannelCmd+0xe4>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d008      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	4a26      	ldr	r2, [pc, #152]	@ (800b3ac <TIM_CCxChannelCmd+0xe8>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d004      	beq.n	800b322 <TIM_CCxChannelCmd+0x5e>
 800b318:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800b31c:	4824      	ldr	r0, [pc, #144]	@ (800b3b0 <TIM_CCxChannelCmd+0xec>)
 800b31e:	f7f8 fd25 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d016      	beq.n	800b356 <TIM_CCxChannelCmd+0x92>
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	d013      	beq.n	800b356 <TIM_CCxChannelCmd+0x92>
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2b08      	cmp	r3, #8
 800b332:	d010      	beq.n	800b356 <TIM_CCxChannelCmd+0x92>
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b0c      	cmp	r3, #12
 800b338:	d00d      	beq.n	800b356 <TIM_CCxChannelCmd+0x92>
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b10      	cmp	r3, #16
 800b33e:	d00a      	beq.n	800b356 <TIM_CCxChannelCmd+0x92>
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b14      	cmp	r3, #20
 800b344:	d007      	beq.n	800b356 <TIM_CCxChannelCmd+0x92>
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2b3c      	cmp	r3, #60	@ 0x3c
 800b34a:	d004      	beq.n	800b356 <TIM_CCxChannelCmd+0x92>
 800b34c:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 800b350:	4817      	ldr	r0, [pc, #92]	@ (800b3b0 <TIM_CCxChannelCmd+0xec>)
 800b352:	f7f8 fd0b 	bl	8003d6c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	f003 031f 	and.w	r3, r3, #31
 800b35c:	2201      	movs	r2, #1
 800b35e:	fa02 f303 	lsl.w	r3, r2, r3
 800b362:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6a1a      	ldr	r2, [r3, #32]
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	43db      	mvns	r3, r3
 800b36c:	401a      	ands	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6a1a      	ldr	r2, [r3, #32]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	f003 031f 	and.w	r3, r3, #31
 800b37c:	6879      	ldr	r1, [r7, #4]
 800b37e:	fa01 f303 	lsl.w	r3, r1, r3
 800b382:	431a      	orrs	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	621a      	str	r2, [r3, #32]
}
 800b388:	bf00      	nop
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	40012c00 	.word	0x40012c00
 800b394:	40000400 	.word	0x40000400
 800b398:	40000800 	.word	0x40000800
 800b39c:	40000c00 	.word	0x40000c00
 800b3a0:	40013400 	.word	0x40013400
 800b3a4:	40014000 	.word	0x40014000
 800b3a8:	40014400 	.word	0x40014400
 800b3ac:	40014800 	.word	0x40014800
 800b3b0:	0800e114 	.word	0x0800e114

0800b3b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a34      	ldr	r2, [pc, #208]	@ (800b494 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d02c      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3d0:	d027      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a30      	ldr	r2, [pc, #192]	@ (800b498 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d022      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a2e      	ldr	r2, [pc, #184]	@ (800b49c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d01d      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a2d      	ldr	r2, [pc, #180]	@ (800b4a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d018      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a2b      	ldr	r2, [pc, #172]	@ (800b4a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d013      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a2a      	ldr	r2, [pc, #168]	@ (800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d00e      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a28      	ldr	r2, [pc, #160]	@ (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d009      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a27      	ldr	r2, [pc, #156]	@ (800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d004      	beq.n	800b422 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800b418:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800b41c:	4825      	ldr	r0, [pc, #148]	@ (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b41e:	f7f8 fca5 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d020      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b10      	cmp	r3, #16
 800b430:	d01c      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b20      	cmp	r3, #32
 800b438:	d018      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b30      	cmp	r3, #48	@ 0x30
 800b440:	d014      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b40      	cmp	r3, #64	@ 0x40
 800b448:	d010      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b50      	cmp	r3, #80	@ 0x50
 800b450:	d00c      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b60      	cmp	r3, #96	@ 0x60
 800b458:	d008      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b70      	cmp	r3, #112	@ 0x70
 800b460:	d004      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b462:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800b466:	4813      	ldr	r0, [pc, #76]	@ (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b468:	f7f8 fc80 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	2b80      	cmp	r3, #128	@ 0x80
 800b472:	d008      	beq.n	800b486 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d004      	beq.n	800b486 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800b47c:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800b480:	480c      	ldr	r0, [pc, #48]	@ (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b482:	f7f8 fc73 	bl	8003d6c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d113      	bne.n	800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800b490:	2302      	movs	r3, #2
 800b492:	e0d3      	b.n	800b63c <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800b494:	40012c00 	.word	0x40012c00
 800b498:	40000400 	.word	0x40000400
 800b49c:	40000800 	.word	0x40000800
 800b4a0:	40000c00 	.word	0x40000c00
 800b4a4:	40001000 	.word	0x40001000
 800b4a8:	40001400 	.word	0x40001400
 800b4ac:	40013400 	.word	0x40013400
 800b4b0:	40014000 	.word	0x40014000
 800b4b4:	0800e14c 	.word	0x0800e14c
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a59      	ldr	r2, [pc, #356]	@ (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d004      	beq.n	800b4ec <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a58      	ldr	r2, [pc, #352]	@ (800b648 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d161      	bne.n	800b5b0 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d054      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4fc:	d04f      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b506:	d04a      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b510:	d045      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b51a:	d040      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b524:	d03b      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b52e:	d036      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b538:	d031      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800b542:	d02c      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b54c:	d027      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800b556:	d022      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b560:	d01d      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800b56a:	d018      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b574:	d013      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800b57e:	d00e      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800b588:	d009      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800b592:	d004      	beq.n	800b59e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800b594:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800b598:	482c      	ldr	r0, [pc, #176]	@ (800b64c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800b59a:	f7f8 fbe7 	bl	8003d6c <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b5a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a1d      	ldr	r2, [pc, #116]	@ (800b644 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d01d      	beq.n	800b610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5dc:	d018      	beq.n	800b610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a1b      	ldr	r2, [pc, #108]	@ (800b650 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d013      	beq.n	800b610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a19      	ldr	r2, [pc, #100]	@ (800b654 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d00e      	beq.n	800b610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a18      	ldr	r2, [pc, #96]	@ (800b658 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d009      	beq.n	800b610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a11      	ldr	r2, [pc, #68]	@ (800b648 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d004      	beq.n	800b610 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a14      	ldr	r2, [pc, #80]	@ (800b65c <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d10c      	bne.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b616:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	40012c00 	.word	0x40012c00
 800b648:	40013400 	.word	0x40013400
 800b64c:	0800e14c 	.word	0x0800e14c
 800b650:	40000400 	.word	0x40000400
 800b654:	40000800 	.word	0x40000800
 800b658:	40000c00 	.word	0x40000c00
 800b65c:	40014000 	.word	0x40014000

0800b660 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a91      	ldr	r2, [pc, #580]	@ (800b8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d018      	beq.n	800b6aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a8f      	ldr	r2, [pc, #572]	@ (800b8bc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d013      	beq.n	800b6aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a8e      	ldr	r2, [pc, #568]	@ (800b8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d00e      	beq.n	800b6aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a8c      	ldr	r2, [pc, #560]	@ (800b8c4 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d009      	beq.n	800b6aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a8b      	ldr	r2, [pc, #556]	@ (800b8c8 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d004      	beq.n	800b6aa <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800b6a0:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800b6a4:	4889      	ldr	r0, [pc, #548]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b6a6:	f7f8 fb61 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6b2:	d008      	beq.n	800b6c6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800b6bc:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800b6c0:	4882      	ldr	r0, [pc, #520]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b6c2:	f7f8 fb53 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6ce:	d008      	beq.n	800b6e2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d004      	beq.n	800b6e2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800b6d8:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800b6dc:	487b      	ldr	r0, [pc, #492]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b6de:	f7f8 fb45 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d013      	beq.n	800b712 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6f2:	d00e      	beq.n	800b712 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6fc:	d009      	beq.n	800b712 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b706:	d004      	beq.n	800b712 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800b708:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800b70c:	486f      	ldr	r0, [pc, #444]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b70e:	f7f8 fb2d 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	2bff      	cmp	r3, #255	@ 0xff
 800b718:	d904      	bls.n	800b724 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800b71a:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800b71e:	486b      	ldr	r0, [pc, #428]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b720:	f7f8 fb24 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b72c:	d008      	beq.n	800b740 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d004      	beq.n	800b740 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b736:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800b73a:	4864      	ldr	r0, [pc, #400]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b73c:	f7f8 fb16 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	695b      	ldr	r3, [r3, #20]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d009      	beq.n	800b75c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b750:	d004      	beq.n	800b75c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b752:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800b756:	485d      	ldr	r0, [pc, #372]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b758:	f7f8 fb08 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	2b0f      	cmp	r3, #15
 800b762:	d904      	bls.n	800b76e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b764:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800b768:	4858      	ldr	r0, [pc, #352]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b76a:	f7f8 faff 	bl	8003d6c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b776:	d008      	beq.n	800b78a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d004      	beq.n	800b78a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b780:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800b784:	4851      	ldr	r0, [pc, #324]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b786:	f7f8 faf1 	bl	8003d6c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800b794:	2302      	movs	r3, #2
 800b796:	e08a      	b.n	800b8ae <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7fe:	4313      	orrs	r3, r2
 800b800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	041b      	lsls	r3, r3, #16
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a28      	ldr	r2, [pc, #160]	@ (800b8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d004      	beq.n	800b826 <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a26      	ldr	r2, [pc, #152]	@ (800b8bc <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d13a      	bne.n	800b89c <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b82e:	d008      	beq.n	800b842 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d004      	beq.n	800b842 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800b838:	f640 0112 	movw	r1, #2066	@ 0x812
 800b83c:	4823      	ldr	r0, [pc, #140]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b83e:	f7f8 fa95 	bl	8003d6c <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d009      	beq.n	800b85e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b852:	d004      	beq.n	800b85e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800b854:	f640 0113 	movw	r1, #2067	@ 0x813
 800b858:	481c      	ldr	r0, [pc, #112]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b85a:	f7f8 fa87 	bl	8003d6c <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b862:	2b0f      	cmp	r3, #15
 800b864:	d904      	bls.n	800b870 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800b866:	f640 0114 	movw	r1, #2068	@ 0x814
 800b86a:	4818      	ldr	r0, [pc, #96]	@ (800b8cc <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800b86c:	f7f8 fa7e 	bl	8003d6c <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87a:	051b      	lsls	r3, r3, #20
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	40012c00 	.word	0x40012c00
 800b8bc:	40013400 	.word	0x40013400
 800b8c0:	40014000 	.word	0x40014000
 800b8c4:	40014400 	.word	0x40014400
 800b8c8:	40014800 	.word	0x40014800
 800b8cc:	0800e14c 	.word	0x0800e14c

0800b8d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e08b      	b.n	800ba36 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	699b      	ldr	r3, [r3, #24]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d023      	beq.n	800b96e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a45      	ldr	r2, [pc, #276]	@ (800ba40 <HAL_UART_Init+0x134>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d041      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a43      	ldr	r2, [pc, #268]	@ (800ba44 <HAL_UART_Init+0x138>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d03c      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a42      	ldr	r2, [pc, #264]	@ (800ba48 <HAL_UART_Init+0x13c>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d037      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a40      	ldr	r2, [pc, #256]	@ (800ba4c <HAL_UART_Init+0x140>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d032      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a3f      	ldr	r2, [pc, #252]	@ (800ba50 <HAL_UART_Init+0x144>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d02d      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a3d      	ldr	r2, [pc, #244]	@ (800ba54 <HAL_UART_Init+0x148>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d028      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b962:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800b966:	483c      	ldr	r0, [pc, #240]	@ (800ba58 <HAL_UART_Init+0x14c>)
 800b968:	f7f8 fa00 	bl	8003d6c <assert_failed>
 800b96c:	e022      	b.n	800b9b4 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a33      	ldr	r2, [pc, #204]	@ (800ba40 <HAL_UART_Init+0x134>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d01d      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a31      	ldr	r2, [pc, #196]	@ (800ba44 <HAL_UART_Init+0x138>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d018      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a30      	ldr	r2, [pc, #192]	@ (800ba48 <HAL_UART_Init+0x13c>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d013      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a2e      	ldr	r2, [pc, #184]	@ (800ba4c <HAL_UART_Init+0x140>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d00e      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a2d      	ldr	r2, [pc, #180]	@ (800ba50 <HAL_UART_Init+0x144>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d009      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a2b      	ldr	r2, [pc, #172]	@ (800ba54 <HAL_UART_Init+0x148>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d004      	beq.n	800b9b4 <HAL_UART_Init+0xa8>
 800b9aa:	f240 1157 	movw	r1, #343	@ 0x157
 800b9ae:	482a      	ldr	r0, [pc, #168]	@ (800ba58 <HAL_UART_Init+0x14c>)
 800b9b0:	f7f8 f9dc 	bl	8003d6c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d106      	bne.n	800b9ca <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7f8 ffa3 	bl	8004910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2224      	movs	r2, #36	@ 0x24
 800b9ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f022 0201 	bic.w	r2, r2, #1
 800b9de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fc1f 	bl	800c22c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f8be 	bl	800bb70 <UART_SetConfig>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d101      	bne.n	800b9fe <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e01b      	b.n	800ba36 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	689a      	ldr	r2, [r3, #8]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f042 0201 	orr.w	r2, r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fd5c 	bl	800c4ec <UART_CheckIdleState>
 800ba34:	4603      	mov	r3, r0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	40013800 	.word	0x40013800
 800ba44:	40004400 	.word	0x40004400
 800ba48:	40004800 	.word	0x40004800
 800ba4c:	40004c00 	.word	0x40004c00
 800ba50:	40005000 	.word	0x40005000
 800ba54:	40008000 	.word	0x40008000
 800ba58:	0800e188 	.word	0x0800e188

0800ba5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b08a      	sub	sp, #40	@ 0x28
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	603b      	str	r3, [r7, #0]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba70:	2b20      	cmp	r3, #32
 800ba72:	d177      	bne.n	800bb64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <HAL_UART_Transmit+0x24>
 800ba7a:	88fb      	ldrh	r3, [r7, #6]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d101      	bne.n	800ba84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e070      	b.n	800bb66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2221      	movs	r2, #33	@ 0x21
 800ba90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba92:	f7f9 f82d 	bl	8004af0 <HAL_GetTick>
 800ba96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	88fa      	ldrh	r2, [r7, #6]
 800ba9c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	88fa      	ldrh	r2, [r7, #6]
 800baa4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bab0:	d108      	bne.n	800bac4 <HAL_UART_Transmit+0x68>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800baba:	2300      	movs	r3, #0
 800babc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	61bb      	str	r3, [r7, #24]
 800bac2:	e003      	b.n	800bacc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bac8:	2300      	movs	r3, #0
 800baca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bacc:	e02f      	b.n	800bb2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2200      	movs	r2, #0
 800bad6:	2180      	movs	r1, #128	@ 0x80
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f000 fdaf 	bl	800c63c <UART_WaitOnFlagUntilTimeout>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2220      	movs	r2, #32
 800bae8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800baea:	2303      	movs	r3, #3
 800baec:	e03b      	b.n	800bb66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10b      	bne.n	800bb0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	881a      	ldrh	r2, [r3, #0]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb00:	b292      	uxth	r2, r2
 800bb02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	3302      	adds	r3, #2
 800bb08:	61bb      	str	r3, [r7, #24]
 800bb0a:	e007      	b.n	800bb1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	781a      	ldrb	r2, [r3, #0]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	3b01      	subs	r3, #1
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1c9      	bne.n	800bace <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2200      	movs	r2, #0
 800bb42:	2140      	movs	r1, #64	@ 0x40
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f000 fd79 	bl	800c63c <UART_WaitOnFlagUntilTimeout>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d004      	beq.n	800bb5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2220      	movs	r2, #32
 800bb54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e005      	b.n	800bb66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	e000      	b.n	800bb66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800bb64:	2302      	movs	r3, #2
  }
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3720      	adds	r7, #32
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
	...

0800bb70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb74:	b08a      	sub	sp, #40	@ 0x28
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	4a9e      	ldr	r2, [pc, #632]	@ (800be00 <UART_SetConfig+0x290>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d904      	bls.n	800bb94 <UART_SetConfig+0x24>
 800bb8a:	f640 4158 	movw	r1, #3160	@ 0xc58
 800bb8e:	489d      	ldr	r0, [pc, #628]	@ (800be04 <UART_SetConfig+0x294>)
 800bb90:	f7f8 f8ec 	bl	8003d6c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb9c:	d00d      	beq.n	800bbba <UART_SetConfig+0x4a>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d009      	beq.n	800bbba <UART_SetConfig+0x4a>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbae:	d004      	beq.n	800bbba <UART_SetConfig+0x4a>
 800bbb0:	f640 4159 	movw	r1, #3161	@ 0xc59
 800bbb4:	4893      	ldr	r0, [pc, #588]	@ (800be04 <UART_SetConfig+0x294>)
 800bbb6:	f7f8 f8d9 	bl	8003d6c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a92      	ldr	r2, [pc, #584]	@ (800be08 <UART_SetConfig+0x298>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d10e      	bne.n	800bbe2 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d030      	beq.n	800bc2e <UART_SetConfig+0xbe>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbd4:	d02b      	beq.n	800bc2e <UART_SetConfig+0xbe>
 800bbd6:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800bbda:	488a      	ldr	r0, [pc, #552]	@ (800be04 <UART_SetConfig+0x294>)
 800bbdc:	f7f8 f8c6 	bl	8003d6c <assert_failed>
 800bbe0:	e025      	b.n	800bc2e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbea:	d012      	beq.n	800bc12 <UART_SetConfig+0xa2>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00e      	beq.n	800bc12 <UART_SetConfig+0xa2>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bbfc:	d009      	beq.n	800bc12 <UART_SetConfig+0xa2>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc06:	d004      	beq.n	800bc12 <UART_SetConfig+0xa2>
 800bc08:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800bc0c:	487d      	ldr	r0, [pc, #500]	@ (800be04 <UART_SetConfig+0x294>)
 800bc0e:	f7f8 f8ad 	bl	8003d6c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d009      	beq.n	800bc2e <UART_SetConfig+0xbe>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc22:	d004      	beq.n	800bc2e <UART_SetConfig+0xbe>
 800bc24:	f640 4161 	movw	r1, #3169	@ 0xc61
 800bc28:	4876      	ldr	r0, [pc, #472]	@ (800be04 <UART_SetConfig+0x294>)
 800bc2a:	f7f8 f89f 	bl	8003d6c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00e      	beq.n	800bc54 <UART_SetConfig+0xe4>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc3e:	d009      	beq.n	800bc54 <UART_SetConfig+0xe4>
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800bc48:	d004      	beq.n	800bc54 <UART_SetConfig+0xe4>
 800bc4a:	f640 4164 	movw	r1, #3172	@ 0xc64
 800bc4e:	486d      	ldr	r0, [pc, #436]	@ (800be04 <UART_SetConfig+0x294>)
 800bc50:	f7f8 f88c 	bl	8003d6c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	695b      	ldr	r3, [r3, #20]
 800bc58:	f023 030c 	bic.w	r3, r3, #12
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d103      	bne.n	800bc68 <UART_SetConfig+0xf8>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d104      	bne.n	800bc72 <UART_SetConfig+0x102>
 800bc68:	f640 4165 	movw	r1, #3173	@ 0xc65
 800bc6c:	4865      	ldr	r0, [pc, #404]	@ (800be04 <UART_SetConfig+0x294>)
 800bc6e:	f7f8 f87d 	bl	8003d6c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d013      	beq.n	800bca2 <UART_SetConfig+0x132>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc82:	d00e      	beq.n	800bca2 <UART_SetConfig+0x132>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	699b      	ldr	r3, [r3, #24]
 800bc88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc8c:	d009      	beq.n	800bca2 <UART_SetConfig+0x132>
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc96:	d004      	beq.n	800bca2 <UART_SetConfig+0x132>
 800bc98:	f640 4166 	movw	r1, #3174	@ 0xc66
 800bc9c:	4859      	ldr	r0, [pc, #356]	@ (800be04 <UART_SetConfig+0x294>)
 800bc9e:	f7f8 f865 	bl	8003d6c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	69db      	ldr	r3, [r3, #28]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d009      	beq.n	800bcbe <UART_SetConfig+0x14e>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	69db      	ldr	r3, [r3, #28]
 800bcae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcb2:	d004      	beq.n	800bcbe <UART_SetConfig+0x14e>
 800bcb4:	f640 4167 	movw	r1, #3175	@ 0xc67
 800bcb8:	4852      	ldr	r0, [pc, #328]	@ (800be04 <UART_SetConfig+0x294>)
 800bcba:	f7f8 f857 	bl	8003d6c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	689a      	ldr	r2, [r3, #8]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	431a      	orrs	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	4b4b      	ldr	r3, [pc, #300]	@ (800be0c <UART_SetConfig+0x29c>)
 800bcde:	4013      	ands	r3, r2
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	6812      	ldr	r2, [r2, #0]
 800bce4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bce6:	430b      	orrs	r3, r1
 800bce8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	68da      	ldr	r2, [r3, #12]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	430a      	orrs	r2, r1
 800bcfe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a3f      	ldr	r2, [pc, #252]	@ (800be08 <UART_SetConfig+0x298>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d004      	beq.n	800bd1a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a1b      	ldr	r3, [r3, #32]
 800bd14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd16:	4313      	orrs	r3, r2
 800bd18:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a37      	ldr	r2, [pc, #220]	@ (800be10 <UART_SetConfig+0x2a0>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d125      	bne.n	800bd84 <UART_SetConfig+0x214>
 800bd38:	4b36      	ldr	r3, [pc, #216]	@ (800be14 <UART_SetConfig+0x2a4>)
 800bd3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd3e:	f003 0303 	and.w	r3, r3, #3
 800bd42:	2b03      	cmp	r3, #3
 800bd44:	d81a      	bhi.n	800bd7c <UART_SetConfig+0x20c>
 800bd46:	a201      	add	r2, pc, #4	@ (adr r2, 800bd4c <UART_SetConfig+0x1dc>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bd5d 	.word	0x0800bd5d
 800bd50:	0800bd6d 	.word	0x0800bd6d
 800bd54:	0800bd65 	.word	0x0800bd65
 800bd58:	0800bd75 	.word	0x0800bd75
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bd62:	e114      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bd64:	2302      	movs	r3, #2
 800bd66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bd6a:	e110      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bd6c:	2304      	movs	r3, #4
 800bd6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bd72:	e10c      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bd74:	2308      	movs	r3, #8
 800bd76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bd7a:	e108      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bd7c:	2310      	movs	r3, #16
 800bd7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bd82:	e104      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a23      	ldr	r2, [pc, #140]	@ (800be18 <UART_SetConfig+0x2a8>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d146      	bne.n	800be1c <UART_SetConfig+0x2ac>
 800bd8e:	4b21      	ldr	r3, [pc, #132]	@ (800be14 <UART_SetConfig+0x2a4>)
 800bd90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd94:	f003 030c 	and.w	r3, r3, #12
 800bd98:	2b0c      	cmp	r3, #12
 800bd9a:	d82d      	bhi.n	800bdf8 <UART_SetConfig+0x288>
 800bd9c:	a201      	add	r2, pc, #4	@ (adr r2, 800bda4 <UART_SetConfig+0x234>)
 800bd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda2:	bf00      	nop
 800bda4:	0800bdd9 	.word	0x0800bdd9
 800bda8:	0800bdf9 	.word	0x0800bdf9
 800bdac:	0800bdf9 	.word	0x0800bdf9
 800bdb0:	0800bdf9 	.word	0x0800bdf9
 800bdb4:	0800bde9 	.word	0x0800bde9
 800bdb8:	0800bdf9 	.word	0x0800bdf9
 800bdbc:	0800bdf9 	.word	0x0800bdf9
 800bdc0:	0800bdf9 	.word	0x0800bdf9
 800bdc4:	0800bde1 	.word	0x0800bde1
 800bdc8:	0800bdf9 	.word	0x0800bdf9
 800bdcc:	0800bdf9 	.word	0x0800bdf9
 800bdd0:	0800bdf9 	.word	0x0800bdf9
 800bdd4:	0800bdf1 	.word	0x0800bdf1
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bdde:	e0d6      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bde0:	2302      	movs	r3, #2
 800bde2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bde6:	e0d2      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bde8:	2304      	movs	r3, #4
 800bdea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bdee:	e0ce      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bdf0:	2308      	movs	r3, #8
 800bdf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bdf6:	e0ca      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bdf8:	2310      	movs	r3, #16
 800bdfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bdfe:	e0c6      	b.n	800bf8e <UART_SetConfig+0x41e>
 800be00:	00989680 	.word	0x00989680
 800be04:	0800e188 	.word	0x0800e188
 800be08:	40008000 	.word	0x40008000
 800be0c:	efff69f3 	.word	0xefff69f3
 800be10:	40013800 	.word	0x40013800
 800be14:	40021000 	.word	0x40021000
 800be18:	40004400 	.word	0x40004400
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4aae      	ldr	r2, [pc, #696]	@ (800c0dc <UART_SetConfig+0x56c>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d125      	bne.n	800be72 <UART_SetConfig+0x302>
 800be26:	4bae      	ldr	r3, [pc, #696]	@ (800c0e0 <UART_SetConfig+0x570>)
 800be28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800be30:	2b30      	cmp	r3, #48	@ 0x30
 800be32:	d016      	beq.n	800be62 <UART_SetConfig+0x2f2>
 800be34:	2b30      	cmp	r3, #48	@ 0x30
 800be36:	d818      	bhi.n	800be6a <UART_SetConfig+0x2fa>
 800be38:	2b20      	cmp	r3, #32
 800be3a:	d00a      	beq.n	800be52 <UART_SetConfig+0x2e2>
 800be3c:	2b20      	cmp	r3, #32
 800be3e:	d814      	bhi.n	800be6a <UART_SetConfig+0x2fa>
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <UART_SetConfig+0x2da>
 800be44:	2b10      	cmp	r3, #16
 800be46:	d008      	beq.n	800be5a <UART_SetConfig+0x2ea>
 800be48:	e00f      	b.n	800be6a <UART_SetConfig+0x2fa>
 800be4a:	2300      	movs	r3, #0
 800be4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be50:	e09d      	b.n	800bf8e <UART_SetConfig+0x41e>
 800be52:	2302      	movs	r3, #2
 800be54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be58:	e099      	b.n	800bf8e <UART_SetConfig+0x41e>
 800be5a:	2304      	movs	r3, #4
 800be5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be60:	e095      	b.n	800bf8e <UART_SetConfig+0x41e>
 800be62:	2308      	movs	r3, #8
 800be64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be68:	e091      	b.n	800bf8e <UART_SetConfig+0x41e>
 800be6a:	2310      	movs	r3, #16
 800be6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800be70:	e08d      	b.n	800bf8e <UART_SetConfig+0x41e>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a9b      	ldr	r2, [pc, #620]	@ (800c0e4 <UART_SetConfig+0x574>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d125      	bne.n	800bec8 <UART_SetConfig+0x358>
 800be7c:	4b98      	ldr	r3, [pc, #608]	@ (800c0e0 <UART_SetConfig+0x570>)
 800be7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800be86:	2bc0      	cmp	r3, #192	@ 0xc0
 800be88:	d016      	beq.n	800beb8 <UART_SetConfig+0x348>
 800be8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800be8c:	d818      	bhi.n	800bec0 <UART_SetConfig+0x350>
 800be8e:	2b80      	cmp	r3, #128	@ 0x80
 800be90:	d00a      	beq.n	800bea8 <UART_SetConfig+0x338>
 800be92:	2b80      	cmp	r3, #128	@ 0x80
 800be94:	d814      	bhi.n	800bec0 <UART_SetConfig+0x350>
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <UART_SetConfig+0x330>
 800be9a:	2b40      	cmp	r3, #64	@ 0x40
 800be9c:	d008      	beq.n	800beb0 <UART_SetConfig+0x340>
 800be9e:	e00f      	b.n	800bec0 <UART_SetConfig+0x350>
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bea6:	e072      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bea8:	2302      	movs	r3, #2
 800beaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800beae:	e06e      	b.n	800bf8e <UART_SetConfig+0x41e>
 800beb0:	2304      	movs	r3, #4
 800beb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800beb6:	e06a      	b.n	800bf8e <UART_SetConfig+0x41e>
 800beb8:	2308      	movs	r3, #8
 800beba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bebe:	e066      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bec0:	2310      	movs	r3, #16
 800bec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bec6:	e062      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a86      	ldr	r2, [pc, #536]	@ (800c0e8 <UART_SetConfig+0x578>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d12a      	bne.n	800bf28 <UART_SetConfig+0x3b8>
 800bed2:	4b83      	ldr	r3, [pc, #524]	@ (800c0e0 <UART_SetConfig+0x570>)
 800bed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bedc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bee0:	d01a      	beq.n	800bf18 <UART_SetConfig+0x3a8>
 800bee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bee6:	d81b      	bhi.n	800bf20 <UART_SetConfig+0x3b0>
 800bee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800beec:	d00c      	beq.n	800bf08 <UART_SetConfig+0x398>
 800beee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bef2:	d815      	bhi.n	800bf20 <UART_SetConfig+0x3b0>
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d003      	beq.n	800bf00 <UART_SetConfig+0x390>
 800bef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800befc:	d008      	beq.n	800bf10 <UART_SetConfig+0x3a0>
 800befe:	e00f      	b.n	800bf20 <UART_SetConfig+0x3b0>
 800bf00:	2300      	movs	r3, #0
 800bf02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf06:	e042      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf08:	2302      	movs	r3, #2
 800bf0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf0e:	e03e      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf10:	2304      	movs	r3, #4
 800bf12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf16:	e03a      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf18:	2308      	movs	r3, #8
 800bf1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf1e:	e036      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf20:	2310      	movs	r3, #16
 800bf22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf26:	e032      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a6f      	ldr	r2, [pc, #444]	@ (800c0ec <UART_SetConfig+0x57c>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d12a      	bne.n	800bf88 <UART_SetConfig+0x418>
 800bf32:	4b6b      	ldr	r3, [pc, #428]	@ (800c0e0 <UART_SetConfig+0x570>)
 800bf34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bf3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bf40:	d01a      	beq.n	800bf78 <UART_SetConfig+0x408>
 800bf42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bf46:	d81b      	bhi.n	800bf80 <UART_SetConfig+0x410>
 800bf48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf4c:	d00c      	beq.n	800bf68 <UART_SetConfig+0x3f8>
 800bf4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf52:	d815      	bhi.n	800bf80 <UART_SetConfig+0x410>
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <UART_SetConfig+0x3f0>
 800bf58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf5c:	d008      	beq.n	800bf70 <UART_SetConfig+0x400>
 800bf5e:	e00f      	b.n	800bf80 <UART_SetConfig+0x410>
 800bf60:	2300      	movs	r3, #0
 800bf62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf66:	e012      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf68:	2302      	movs	r3, #2
 800bf6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf6e:	e00e      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf70:	2304      	movs	r3, #4
 800bf72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf76:	e00a      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf78:	2308      	movs	r3, #8
 800bf7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf7e:	e006      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf80:	2310      	movs	r3, #16
 800bf82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf86:	e002      	b.n	800bf8e <UART_SetConfig+0x41e>
 800bf88:	2310      	movs	r3, #16
 800bf8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a56      	ldr	r2, [pc, #344]	@ (800c0ec <UART_SetConfig+0x57c>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d17a      	bne.n	800c08e <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bf9c:	2b08      	cmp	r3, #8
 800bf9e:	d824      	bhi.n	800bfea <UART_SetConfig+0x47a>
 800bfa0:	a201      	add	r2, pc, #4	@ (adr r2, 800bfa8 <UART_SetConfig+0x438>)
 800bfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa6:	bf00      	nop
 800bfa8:	0800bfcd 	.word	0x0800bfcd
 800bfac:	0800bfeb 	.word	0x0800bfeb
 800bfb0:	0800bfd5 	.word	0x0800bfd5
 800bfb4:	0800bfeb 	.word	0x0800bfeb
 800bfb8:	0800bfdb 	.word	0x0800bfdb
 800bfbc:	0800bfeb 	.word	0x0800bfeb
 800bfc0:	0800bfeb 	.word	0x0800bfeb
 800bfc4:	0800bfeb 	.word	0x0800bfeb
 800bfc8:	0800bfe3 	.word	0x0800bfe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfcc:	f7fa fdd2 	bl	8006b74 <HAL_RCC_GetPCLK1Freq>
 800bfd0:	61f8      	str	r0, [r7, #28]
        break;
 800bfd2:	e010      	b.n	800bff6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfd4:	4b46      	ldr	r3, [pc, #280]	@ (800c0f0 <UART_SetConfig+0x580>)
 800bfd6:	61fb      	str	r3, [r7, #28]
        break;
 800bfd8:	e00d      	b.n	800bff6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfda:	f7fa fd33 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 800bfde:	61f8      	str	r0, [r7, #28]
        break;
 800bfe0:	e009      	b.n	800bff6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfe6:	61fb      	str	r3, [r7, #28]
        break;
 800bfe8:	e005      	b.n	800bff6 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800bfea:	2300      	movs	r3, #0
 800bfec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800bff4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 8107 	beq.w	800c20c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	685a      	ldr	r2, [r3, #4]
 800c002:	4613      	mov	r3, r2
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	4413      	add	r3, r2
 800c008:	69fa      	ldr	r2, [r7, #28]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d305      	bcc.n	800c01a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c014:	69fa      	ldr	r2, [r7, #28]
 800c016:	429a      	cmp	r2, r3
 800c018:	d903      	bls.n	800c022 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c020:	e0f4      	b.n	800c20c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	2200      	movs	r2, #0
 800c026:	461c      	mov	r4, r3
 800c028:	4615      	mov	r5, r2
 800c02a:	f04f 0200 	mov.w	r2, #0
 800c02e:	f04f 0300 	mov.w	r3, #0
 800c032:	022b      	lsls	r3, r5, #8
 800c034:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c038:	0222      	lsls	r2, r4, #8
 800c03a:	68f9      	ldr	r1, [r7, #12]
 800c03c:	6849      	ldr	r1, [r1, #4]
 800c03e:	0849      	lsrs	r1, r1, #1
 800c040:	2000      	movs	r0, #0
 800c042:	4688      	mov	r8, r1
 800c044:	4681      	mov	r9, r0
 800c046:	eb12 0a08 	adds.w	sl, r2, r8
 800c04a:	eb43 0b09 	adc.w	fp, r3, r9
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	603b      	str	r3, [r7, #0]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c05c:	4650      	mov	r0, sl
 800c05e:	4659      	mov	r1, fp
 800c060:	f7f4 f906 	bl	8000270 <__aeabi_uldivmod>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4613      	mov	r3, r2
 800c06a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c072:	d308      	bcc.n	800c086 <UART_SetConfig+0x516>
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c07a:	d204      	bcs.n	800c086 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	69ba      	ldr	r2, [r7, #24]
 800c082:	60da      	str	r2, [r3, #12]
 800c084:	e0c2      	b.n	800c20c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c08c:	e0be      	b.n	800c20c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	69db      	ldr	r3, [r3, #28]
 800c092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c096:	d16a      	bne.n	800c16e <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800c098:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c09c:	2b08      	cmp	r3, #8
 800c09e:	d834      	bhi.n	800c10a <UART_SetConfig+0x59a>
 800c0a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <UART_SetConfig+0x538>)
 800c0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a6:	bf00      	nop
 800c0a8:	0800c0cd 	.word	0x0800c0cd
 800c0ac:	0800c0d5 	.word	0x0800c0d5
 800c0b0:	0800c0f5 	.word	0x0800c0f5
 800c0b4:	0800c10b 	.word	0x0800c10b
 800c0b8:	0800c0fb 	.word	0x0800c0fb
 800c0bc:	0800c10b 	.word	0x0800c10b
 800c0c0:	0800c10b 	.word	0x0800c10b
 800c0c4:	0800c10b 	.word	0x0800c10b
 800c0c8:	0800c103 	.word	0x0800c103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0cc:	f7fa fd52 	bl	8006b74 <HAL_RCC_GetPCLK1Freq>
 800c0d0:	61f8      	str	r0, [r7, #28]
        break;
 800c0d2:	e020      	b.n	800c116 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0d4:	f7fa fd64 	bl	8006ba0 <HAL_RCC_GetPCLK2Freq>
 800c0d8:	61f8      	str	r0, [r7, #28]
        break;
 800c0da:	e01c      	b.n	800c116 <UART_SetConfig+0x5a6>
 800c0dc:	40004800 	.word	0x40004800
 800c0e0:	40021000 	.word	0x40021000
 800c0e4:	40004c00 	.word	0x40004c00
 800c0e8:	40005000 	.word	0x40005000
 800c0ec:	40008000 	.word	0x40008000
 800c0f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0f4:	4b4c      	ldr	r3, [pc, #304]	@ (800c228 <UART_SetConfig+0x6b8>)
 800c0f6:	61fb      	str	r3, [r7, #28]
        break;
 800c0f8:	e00d      	b.n	800c116 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0fa:	f7fa fca3 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 800c0fe:	61f8      	str	r0, [r7, #28]
        break;
 800c100:	e009      	b.n	800c116 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c106:	61fb      	str	r3, [r7, #28]
        break;
 800c108:	e005      	b.n	800c116 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d077      	beq.n	800c20c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	005a      	lsls	r2, r3, #1
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	085b      	lsrs	r3, r3, #1
 800c126:	441a      	add	r2, r3
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c130:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	2b0f      	cmp	r3, #15
 800c136:	d916      	bls.n	800c166 <UART_SetConfig+0x5f6>
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c13e:	d212      	bcs.n	800c166 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	b29b      	uxth	r3, r3
 800c144:	f023 030f 	bic.w	r3, r3, #15
 800c148:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	085b      	lsrs	r3, r3, #1
 800c14e:	b29b      	uxth	r3, r3
 800c150:	f003 0307 	and.w	r3, r3, #7
 800c154:	b29a      	uxth	r2, r3
 800c156:	8afb      	ldrh	r3, [r7, #22]
 800c158:	4313      	orrs	r3, r2
 800c15a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	8afa      	ldrh	r2, [r7, #22]
 800c162:	60da      	str	r2, [r3, #12]
 800c164:	e052      	b.n	800c20c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c16c:	e04e      	b.n	800c20c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c16e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c172:	2b08      	cmp	r3, #8
 800c174:	d827      	bhi.n	800c1c6 <UART_SetConfig+0x656>
 800c176:	a201      	add	r2, pc, #4	@ (adr r2, 800c17c <UART_SetConfig+0x60c>)
 800c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17c:	0800c1a1 	.word	0x0800c1a1
 800c180:	0800c1a9 	.word	0x0800c1a9
 800c184:	0800c1b1 	.word	0x0800c1b1
 800c188:	0800c1c7 	.word	0x0800c1c7
 800c18c:	0800c1b7 	.word	0x0800c1b7
 800c190:	0800c1c7 	.word	0x0800c1c7
 800c194:	0800c1c7 	.word	0x0800c1c7
 800c198:	0800c1c7 	.word	0x0800c1c7
 800c19c:	0800c1bf 	.word	0x0800c1bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1a0:	f7fa fce8 	bl	8006b74 <HAL_RCC_GetPCLK1Freq>
 800c1a4:	61f8      	str	r0, [r7, #28]
        break;
 800c1a6:	e014      	b.n	800c1d2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1a8:	f7fa fcfa 	bl	8006ba0 <HAL_RCC_GetPCLK2Freq>
 800c1ac:	61f8      	str	r0, [r7, #28]
        break;
 800c1ae:	e010      	b.n	800c1d2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c228 <UART_SetConfig+0x6b8>)
 800c1b2:	61fb      	str	r3, [r7, #28]
        break;
 800c1b4:	e00d      	b.n	800c1d2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1b6:	f7fa fc45 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 800c1ba:	61f8      	str	r0, [r7, #28]
        break;
 800c1bc:	e009      	b.n	800c1d2 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1c2:	61fb      	str	r3, [r7, #28]
        break;
 800c1c4:	e005      	b.n	800c1d2 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c1d0:	bf00      	nop
    }

    if (pclk != 0U)
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d019      	beq.n	800c20c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	085a      	lsrs	r2, r3, #1
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	441a      	add	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	2b0f      	cmp	r3, #15
 800c1f0:	d909      	bls.n	800c206 <UART_SetConfig+0x696>
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1f8:	d205      	bcs.n	800c206 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	60da      	str	r2, [r3, #12]
 800c204:	e002      	b.n	800c20c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c218:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3728      	adds	r7, #40	@ 0x28
 800c220:	46bd      	mov	sp, r7
 800c222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c226:	bf00      	nop
 800c228:	00f42400 	.word	0x00f42400

0800c22c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c238:	2bff      	cmp	r3, #255	@ 0xff
 800c23a:	d904      	bls.n	800c246 <UART_AdvFeatureConfig+0x1a>
 800c23c:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800c240:	4891      	ldr	r0, [pc, #580]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c242:	f7f7 fd93 	bl	8003d6c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24a:	f003 0308 	and.w	r3, r3, #8
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d018      	beq.n	800c284 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c256:	2b00      	cmp	r3, #0
 800c258:	d009      	beq.n	800c26e <UART_AdvFeatureConfig+0x42>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c25e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c262:	d004      	beq.n	800c26e <UART_AdvFeatureConfig+0x42>
 800c264:	f640 5152 	movw	r1, #3410	@ 0xd52
 800c268:	4887      	ldr	r0, [pc, #540]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c26a:	f7f7 fd7f 	bl	8003d6c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	430a      	orrs	r2, r1
 800c282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c288:	f003 0301 	and.w	r3, r3, #1
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d018      	beq.n	800c2c2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c294:	2b00      	cmp	r3, #0
 800c296:	d009      	beq.n	800c2ac <UART_AdvFeatureConfig+0x80>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c29c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2a0:	d004      	beq.n	800c2ac <UART_AdvFeatureConfig+0x80>
 800c2a2:	f640 5159 	movw	r1, #3417	@ 0xd59
 800c2a6:	4878      	ldr	r0, [pc, #480]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c2a8:	f7f7 fd60 	bl	8003d6c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	430a      	orrs	r2, r1
 800c2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d018      	beq.n	800c300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d009      	beq.n	800c2ea <UART_AdvFeatureConfig+0xbe>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2de:	d004      	beq.n	800c2ea <UART_AdvFeatureConfig+0xbe>
 800c2e0:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800c2e4:	4868      	ldr	r0, [pc, #416]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c2e6:	f7f7 fd41 	bl	8003d6c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	430a      	orrs	r2, r1
 800c2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c304:	f003 0304 	and.w	r3, r3, #4
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d018      	beq.n	800c33e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c310:	2b00      	cmp	r3, #0
 800c312:	d009      	beq.n	800c328 <UART_AdvFeatureConfig+0xfc>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c318:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c31c:	d004      	beq.n	800c328 <UART_AdvFeatureConfig+0xfc>
 800c31e:	f640 5167 	movw	r1, #3431	@ 0xd67
 800c322:	4859      	ldr	r0, [pc, #356]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c324:	f7f7 fd22 	bl	8003d6c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c342:	f003 0310 	and.w	r3, r3, #16
 800c346:	2b00      	cmp	r3, #0
 800c348:	d018      	beq.n	800c37c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d009      	beq.n	800c366 <UART_AdvFeatureConfig+0x13a>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c35a:	d004      	beq.n	800c366 <UART_AdvFeatureConfig+0x13a>
 800c35c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800c360:	4849      	ldr	r0, [pc, #292]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c362:	f7f7 fd03 	bl	8003d6c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	430a      	orrs	r2, r1
 800c37a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c380:	f003 0320 	and.w	r3, r3, #32
 800c384:	2b00      	cmp	r3, #0
 800c386:	d018      	beq.n	800c3ba <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d009      	beq.n	800c3a4 <UART_AdvFeatureConfig+0x178>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c398:	d004      	beq.n	800c3a4 <UART_AdvFeatureConfig+0x178>
 800c39a:	f640 5175 	movw	r1, #3445	@ 0xd75
 800c39e:	483a      	ldr	r0, [pc, #232]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c3a0:	f7f7 fce4 	bl	8003d6c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d06c      	beq.n	800c4a0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a30      	ldr	r2, [pc, #192]	@ (800c48c <UART_AdvFeatureConfig+0x260>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d018      	beq.n	800c402 <UART_AdvFeatureConfig+0x1d6>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a2e      	ldr	r2, [pc, #184]	@ (800c490 <UART_AdvFeatureConfig+0x264>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d013      	beq.n	800c402 <UART_AdvFeatureConfig+0x1d6>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a2d      	ldr	r2, [pc, #180]	@ (800c494 <UART_AdvFeatureConfig+0x268>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d00e      	beq.n	800c402 <UART_AdvFeatureConfig+0x1d6>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a2b      	ldr	r2, [pc, #172]	@ (800c498 <UART_AdvFeatureConfig+0x26c>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d009      	beq.n	800c402 <UART_AdvFeatureConfig+0x1d6>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a2a      	ldr	r2, [pc, #168]	@ (800c49c <UART_AdvFeatureConfig+0x270>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d004      	beq.n	800c402 <UART_AdvFeatureConfig+0x1d6>
 800c3f8:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800c3fc:	4822      	ldr	r0, [pc, #136]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c3fe:	f7f7 fcb5 	bl	8003d6c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c406:	2b00      	cmp	r3, #0
 800c408:	d009      	beq.n	800c41e <UART_AdvFeatureConfig+0x1f2>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c40e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c412:	d004      	beq.n	800c41e <UART_AdvFeatureConfig+0x1f2>
 800c414:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800c418:	481b      	ldr	r0, [pc, #108]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c41a:	f7f7 fca7 	bl	8003d6c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c43c:	d130      	bne.n	800c4a0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c442:	2b00      	cmp	r3, #0
 800c444:	d013      	beq.n	800c46e <UART_AdvFeatureConfig+0x242>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c44a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c44e:	d00e      	beq.n	800c46e <UART_AdvFeatureConfig+0x242>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c454:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c458:	d009      	beq.n	800c46e <UART_AdvFeatureConfig+0x242>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c45e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c462:	d004      	beq.n	800c46e <UART_AdvFeatureConfig+0x242>
 800c464:	f640 5182 	movw	r1, #3458	@ 0xd82
 800c468:	4807      	ldr	r0, [pc, #28]	@ (800c488 <UART_AdvFeatureConfig+0x25c>)
 800c46a:	f7f7 fc7f 	bl	8003d6c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	430a      	orrs	r2, r1
 800c482:	605a      	str	r2, [r3, #4]
 800c484:	e00c      	b.n	800c4a0 <UART_AdvFeatureConfig+0x274>
 800c486:	bf00      	nop
 800c488:	0800e188 	.word	0x0800e188
 800c48c:	40013800 	.word	0x40013800
 800c490:	40004400 	.word	0x40004400
 800c494:	40004800 	.word	0x40004800
 800c498:	40004c00 	.word	0x40004c00
 800c49c:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d018      	beq.n	800c4de <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d009      	beq.n	800c4c8 <UART_AdvFeatureConfig+0x29c>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c4bc:	d004      	beq.n	800c4c8 <UART_AdvFeatureConfig+0x29c>
 800c4be:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800c4c2:	4809      	ldr	r0, [pc, #36]	@ (800c4e8 <UART_AdvFeatureConfig+0x2bc>)
 800c4c4:	f7f7 fc52 	bl	8003d6c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	605a      	str	r2, [r3, #4]
  }
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	0800e188 	.word	0x0800e188

0800c4ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b098      	sub	sp, #96	@ 0x60
 800c4f0:	af02      	add	r7, sp, #8
 800c4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4fc:	f7f8 faf8 	bl	8004af0 <HAL_GetTick>
 800c500:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 0308 	and.w	r3, r3, #8
 800c50c:	2b08      	cmp	r3, #8
 800c50e:	d12e      	bne.n	800c56e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c518:	2200      	movs	r2, #0
 800c51a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f88c 	bl	800c63c <UART_WaitOnFlagUntilTimeout>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d021      	beq.n	800c56e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c532:	e853 3f00 	ldrex	r3, [r3]
 800c536:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c53a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c53e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	461a      	mov	r2, r3
 800c546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c548:	647b      	str	r3, [r7, #68]	@ 0x44
 800c54a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c54e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c550:	e841 2300 	strex	r3, r2, [r1]
 800c554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1e6      	bne.n	800c52a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2220      	movs	r2, #32
 800c560:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c56a:	2303      	movs	r3, #3
 800c56c:	e062      	b.n	800c634 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b04      	cmp	r3, #4
 800c57a:	d149      	bne.n	800c610 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c57c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c584:	2200      	movs	r2, #0
 800c586:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f856 	bl	800c63c <UART_WaitOnFlagUntilTimeout>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d03c      	beq.n	800c610 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59e:	e853 3f00 	ldrex	r3, [r3]
 800c5a2:	623b      	str	r3, [r7, #32]
   return(result);
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5bc:	e841 2300 	strex	r3, r2, [r1]
 800c5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1e6      	bne.n	800c596 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	e853 3f00 	ldrex	r3, [r3]
 800c5d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f023 0301 	bic.w	r3, r3, #1
 800c5de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5e8:	61fa      	str	r2, [r7, #28]
 800c5ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ec:	69b9      	ldr	r1, [r7, #24]
 800c5ee:	69fa      	ldr	r2, [r7, #28]
 800c5f0:	e841 2300 	strex	r3, r2, [r1]
 800c5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1e5      	bne.n	800c5c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2220      	movs	r2, #32
 800c600:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e011      	b.n	800c634 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2220      	movs	r2, #32
 800c614:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2220      	movs	r2, #32
 800c61a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3758      	adds	r7, #88	@ 0x58
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	4613      	mov	r3, r2
 800c64a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c64c:	e04f      	b.n	800c6ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c654:	d04b      	beq.n	800c6ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c656:	f7f8 fa4b 	bl	8004af0 <HAL_GetTick>
 800c65a:	4602      	mov	r2, r0
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	69ba      	ldr	r2, [r7, #24]
 800c662:	429a      	cmp	r2, r3
 800c664:	d302      	bcc.n	800c66c <UART_WaitOnFlagUntilTimeout+0x30>
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e04e      	b.n	800c70e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 0304 	and.w	r3, r3, #4
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d037      	beq.n	800c6ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2b80      	cmp	r3, #128	@ 0x80
 800c682:	d034      	beq.n	800c6ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	2b40      	cmp	r3, #64	@ 0x40
 800c688:	d031      	beq.n	800c6ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	69db      	ldr	r3, [r3, #28]
 800c690:	f003 0308 	and.w	r3, r3, #8
 800c694:	2b08      	cmp	r3, #8
 800c696:	d110      	bne.n	800c6ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2208      	movs	r2, #8
 800c69e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f000 f838 	bl	800c716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2208      	movs	r2, #8
 800c6aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e029      	b.n	800c70e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	69db      	ldr	r3, [r3, #28]
 800c6c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6c8:	d111      	bne.n	800c6ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c6d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 f81e 	bl	800c716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2220      	movs	r2, #32
 800c6de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	e00f      	b.n	800c70e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	69da      	ldr	r2, [r3, #28]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	bf0c      	ite	eq
 800c6fe:	2301      	moveq	r3, #1
 800c700:	2300      	movne	r3, #0
 800c702:	b2db      	uxtb	r3, r3
 800c704:	461a      	mov	r2, r3
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d0a0      	beq.n	800c64e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c716:	b480      	push	{r7}
 800c718:	b095      	sub	sp, #84	@ 0x54
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c726:	e853 3f00 	ldrex	r3, [r3]
 800c72a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	461a      	mov	r2, r3
 800c73a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c73c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c73e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c740:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c742:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c744:	e841 2300 	strex	r3, r2, [r1]
 800c748:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1e6      	bne.n	800c71e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3308      	adds	r3, #8
 800c756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	e853 3f00 	ldrex	r3, [r3]
 800c75e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	f023 0301 	bic.w	r3, r3, #1
 800c766:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3308      	adds	r3, #8
 800c76e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c770:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c772:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c774:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c778:	e841 2300 	strex	r3, r2, [r1]
 800c77c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1e5      	bne.n	800c750 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d118      	bne.n	800c7be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	60bb      	str	r3, [r7, #8]
   return(result);
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	f023 0310 	bic.w	r3, r3, #16
 800c7a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7aa:	61bb      	str	r3, [r7, #24]
 800c7ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	6979      	ldr	r1, [r7, #20]
 800c7b0:	69ba      	ldr	r2, [r7, #24]
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	613b      	str	r3, [r7, #16]
   return(result);
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e6      	bne.n	800c78c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c7d2:	bf00      	nop
 800c7d4:	3754      	adds	r7, #84	@ 0x54
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
	...

0800c7e0 <calloc>:
 800c7e0:	4b02      	ldr	r3, [pc, #8]	@ (800c7ec <calloc+0xc>)
 800c7e2:	460a      	mov	r2, r1
 800c7e4:	4601      	mov	r1, r0
 800c7e6:	6818      	ldr	r0, [r3, #0]
 800c7e8:	f000 b802 	b.w	800c7f0 <_calloc_r>
 800c7ec:	20000028 	.word	0x20000028

0800c7f0 <_calloc_r>:
 800c7f0:	b570      	push	{r4, r5, r6, lr}
 800c7f2:	fba1 5402 	umull	r5, r4, r1, r2
 800c7f6:	b934      	cbnz	r4, 800c806 <_calloc_r+0x16>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	f000 f83f 	bl	800c87c <_malloc_r>
 800c7fe:	4606      	mov	r6, r0
 800c800:	b928      	cbnz	r0, 800c80e <_calloc_r+0x1e>
 800c802:	4630      	mov	r0, r6
 800c804:	bd70      	pop	{r4, r5, r6, pc}
 800c806:	220c      	movs	r2, #12
 800c808:	6002      	str	r2, [r0, #0]
 800c80a:	2600      	movs	r6, #0
 800c80c:	e7f9      	b.n	800c802 <_calloc_r+0x12>
 800c80e:	462a      	mov	r2, r5
 800c810:	4621      	mov	r1, r4
 800c812:	f000 fac7 	bl	800cda4 <memset>
 800c816:	e7f4      	b.n	800c802 <_calloc_r+0x12>

0800c818 <malloc>:
 800c818:	4b02      	ldr	r3, [pc, #8]	@ (800c824 <malloc+0xc>)
 800c81a:	4601      	mov	r1, r0
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	f000 b82d 	b.w	800c87c <_malloc_r>
 800c822:	bf00      	nop
 800c824:	20000028 	.word	0x20000028

0800c828 <free>:
 800c828:	4b02      	ldr	r3, [pc, #8]	@ (800c834 <free+0xc>)
 800c82a:	4601      	mov	r1, r0
 800c82c:	6818      	ldr	r0, [r3, #0]
 800c82e:	f000 bb53 	b.w	800ced8 <_free_r>
 800c832:	bf00      	nop
 800c834:	20000028 	.word	0x20000028

0800c838 <sbrk_aligned>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	4e0f      	ldr	r6, [pc, #60]	@ (800c878 <sbrk_aligned+0x40>)
 800c83c:	460c      	mov	r4, r1
 800c83e:	6831      	ldr	r1, [r6, #0]
 800c840:	4605      	mov	r5, r0
 800c842:	b911      	cbnz	r1, 800c84a <sbrk_aligned+0x12>
 800c844:	f000 faea 	bl	800ce1c <_sbrk_r>
 800c848:	6030      	str	r0, [r6, #0]
 800c84a:	4621      	mov	r1, r4
 800c84c:	4628      	mov	r0, r5
 800c84e:	f000 fae5 	bl	800ce1c <_sbrk_r>
 800c852:	1c43      	adds	r3, r0, #1
 800c854:	d103      	bne.n	800c85e <sbrk_aligned+0x26>
 800c856:	f04f 34ff 	mov.w	r4, #4294967295
 800c85a:	4620      	mov	r0, r4
 800c85c:	bd70      	pop	{r4, r5, r6, pc}
 800c85e:	1cc4      	adds	r4, r0, #3
 800c860:	f024 0403 	bic.w	r4, r4, #3
 800c864:	42a0      	cmp	r0, r4
 800c866:	d0f8      	beq.n	800c85a <sbrk_aligned+0x22>
 800c868:	1a21      	subs	r1, r4, r0
 800c86a:	4628      	mov	r0, r5
 800c86c:	f000 fad6 	bl	800ce1c <_sbrk_r>
 800c870:	3001      	adds	r0, #1
 800c872:	d1f2      	bne.n	800c85a <sbrk_aligned+0x22>
 800c874:	e7ef      	b.n	800c856 <sbrk_aligned+0x1e>
 800c876:	bf00      	nop
 800c878:	200006e4 	.word	0x200006e4

0800c87c <_malloc_r>:
 800c87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c880:	1ccd      	adds	r5, r1, #3
 800c882:	f025 0503 	bic.w	r5, r5, #3
 800c886:	3508      	adds	r5, #8
 800c888:	2d0c      	cmp	r5, #12
 800c88a:	bf38      	it	cc
 800c88c:	250c      	movcc	r5, #12
 800c88e:	2d00      	cmp	r5, #0
 800c890:	4606      	mov	r6, r0
 800c892:	db01      	blt.n	800c898 <_malloc_r+0x1c>
 800c894:	42a9      	cmp	r1, r5
 800c896:	d904      	bls.n	800c8a2 <_malloc_r+0x26>
 800c898:	230c      	movs	r3, #12
 800c89a:	6033      	str	r3, [r6, #0]
 800c89c:	2000      	movs	r0, #0
 800c89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c978 <_malloc_r+0xfc>
 800c8a6:	f000 f869 	bl	800c97c <__malloc_lock>
 800c8aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ae:	461c      	mov	r4, r3
 800c8b0:	bb44      	cbnz	r4, 800c904 <_malloc_r+0x88>
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f7ff ffbf 	bl	800c838 <sbrk_aligned>
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	4604      	mov	r4, r0
 800c8be:	d158      	bne.n	800c972 <_malloc_r+0xf6>
 800c8c0:	f8d8 4000 	ldr.w	r4, [r8]
 800c8c4:	4627      	mov	r7, r4
 800c8c6:	2f00      	cmp	r7, #0
 800c8c8:	d143      	bne.n	800c952 <_malloc_r+0xd6>
 800c8ca:	2c00      	cmp	r4, #0
 800c8cc:	d04b      	beq.n	800c966 <_malloc_r+0xea>
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	eb04 0903 	add.w	r9, r4, r3
 800c8d8:	f000 faa0 	bl	800ce1c <_sbrk_r>
 800c8dc:	4581      	cmp	r9, r0
 800c8de:	d142      	bne.n	800c966 <_malloc_r+0xea>
 800c8e0:	6821      	ldr	r1, [r4, #0]
 800c8e2:	1a6d      	subs	r5, r5, r1
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7ff ffa6 	bl	800c838 <sbrk_aligned>
 800c8ec:	3001      	adds	r0, #1
 800c8ee:	d03a      	beq.n	800c966 <_malloc_r+0xea>
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	442b      	add	r3, r5
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	bb62      	cbnz	r2, 800c958 <_malloc_r+0xdc>
 800c8fe:	f8c8 7000 	str.w	r7, [r8]
 800c902:	e00f      	b.n	800c924 <_malloc_r+0xa8>
 800c904:	6822      	ldr	r2, [r4, #0]
 800c906:	1b52      	subs	r2, r2, r5
 800c908:	d420      	bmi.n	800c94c <_malloc_r+0xd0>
 800c90a:	2a0b      	cmp	r2, #11
 800c90c:	d917      	bls.n	800c93e <_malloc_r+0xc2>
 800c90e:	1961      	adds	r1, r4, r5
 800c910:	42a3      	cmp	r3, r4
 800c912:	6025      	str	r5, [r4, #0]
 800c914:	bf18      	it	ne
 800c916:	6059      	strne	r1, [r3, #4]
 800c918:	6863      	ldr	r3, [r4, #4]
 800c91a:	bf08      	it	eq
 800c91c:	f8c8 1000 	streq.w	r1, [r8]
 800c920:	5162      	str	r2, [r4, r5]
 800c922:	604b      	str	r3, [r1, #4]
 800c924:	4630      	mov	r0, r6
 800c926:	f000 f82f 	bl	800c988 <__malloc_unlock>
 800c92a:	f104 000b 	add.w	r0, r4, #11
 800c92e:	1d23      	adds	r3, r4, #4
 800c930:	f020 0007 	bic.w	r0, r0, #7
 800c934:	1ac2      	subs	r2, r0, r3
 800c936:	bf1c      	itt	ne
 800c938:	1a1b      	subne	r3, r3, r0
 800c93a:	50a3      	strne	r3, [r4, r2]
 800c93c:	e7af      	b.n	800c89e <_malloc_r+0x22>
 800c93e:	6862      	ldr	r2, [r4, #4]
 800c940:	42a3      	cmp	r3, r4
 800c942:	bf0c      	ite	eq
 800c944:	f8c8 2000 	streq.w	r2, [r8]
 800c948:	605a      	strne	r2, [r3, #4]
 800c94a:	e7eb      	b.n	800c924 <_malloc_r+0xa8>
 800c94c:	4623      	mov	r3, r4
 800c94e:	6864      	ldr	r4, [r4, #4]
 800c950:	e7ae      	b.n	800c8b0 <_malloc_r+0x34>
 800c952:	463c      	mov	r4, r7
 800c954:	687f      	ldr	r7, [r7, #4]
 800c956:	e7b6      	b.n	800c8c6 <_malloc_r+0x4a>
 800c958:	461a      	mov	r2, r3
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	42a3      	cmp	r3, r4
 800c95e:	d1fb      	bne.n	800c958 <_malloc_r+0xdc>
 800c960:	2300      	movs	r3, #0
 800c962:	6053      	str	r3, [r2, #4]
 800c964:	e7de      	b.n	800c924 <_malloc_r+0xa8>
 800c966:	230c      	movs	r3, #12
 800c968:	6033      	str	r3, [r6, #0]
 800c96a:	4630      	mov	r0, r6
 800c96c:	f000 f80c 	bl	800c988 <__malloc_unlock>
 800c970:	e794      	b.n	800c89c <_malloc_r+0x20>
 800c972:	6005      	str	r5, [r0, #0]
 800c974:	e7d6      	b.n	800c924 <_malloc_r+0xa8>
 800c976:	bf00      	nop
 800c978:	200006e8 	.word	0x200006e8

0800c97c <__malloc_lock>:
 800c97c:	4801      	ldr	r0, [pc, #4]	@ (800c984 <__malloc_lock+0x8>)
 800c97e:	f000 ba9a 	b.w	800ceb6 <__retarget_lock_acquire_recursive>
 800c982:	bf00      	nop
 800c984:	2000082c 	.word	0x2000082c

0800c988 <__malloc_unlock>:
 800c988:	4801      	ldr	r0, [pc, #4]	@ (800c990 <__malloc_unlock+0x8>)
 800c98a:	f000 ba95 	b.w	800ceb8 <__retarget_lock_release_recursive>
 800c98e:	bf00      	nop
 800c990:	2000082c 	.word	0x2000082c

0800c994 <std>:
 800c994:	2300      	movs	r3, #0
 800c996:	b510      	push	{r4, lr}
 800c998:	4604      	mov	r4, r0
 800c99a:	e9c0 3300 	strd	r3, r3, [r0]
 800c99e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9a2:	6083      	str	r3, [r0, #8]
 800c9a4:	8181      	strh	r1, [r0, #12]
 800c9a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c9a8:	81c2      	strh	r2, [r0, #14]
 800c9aa:	6183      	str	r3, [r0, #24]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	2208      	movs	r2, #8
 800c9b0:	305c      	adds	r0, #92	@ 0x5c
 800c9b2:	f000 f9f7 	bl	800cda4 <memset>
 800c9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c9ec <std+0x58>)
 800c9b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c9f0 <std+0x5c>)
 800c9bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c9be:	4b0d      	ldr	r3, [pc, #52]	@ (800c9f4 <std+0x60>)
 800c9c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c9f8 <std+0x64>)
 800c9c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c9fc <std+0x68>)
 800c9c8:	6224      	str	r4, [r4, #32]
 800c9ca:	429c      	cmp	r4, r3
 800c9cc:	d006      	beq.n	800c9dc <std+0x48>
 800c9ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c9d2:	4294      	cmp	r4, r2
 800c9d4:	d002      	beq.n	800c9dc <std+0x48>
 800c9d6:	33d0      	adds	r3, #208	@ 0xd0
 800c9d8:	429c      	cmp	r4, r3
 800c9da:	d105      	bne.n	800c9e8 <std+0x54>
 800c9dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9e4:	f000 ba66 	b.w	800ceb4 <__retarget_lock_init_recursive>
 800c9e8:	bd10      	pop	{r4, pc}
 800c9ea:	bf00      	nop
 800c9ec:	0800cca5 	.word	0x0800cca5
 800c9f0:	0800ccc7 	.word	0x0800ccc7
 800c9f4:	0800ccff 	.word	0x0800ccff
 800c9f8:	0800cd23 	.word	0x0800cd23
 800c9fc:	200006ec 	.word	0x200006ec

0800ca00 <stdio_exit_handler>:
 800ca00:	4a02      	ldr	r2, [pc, #8]	@ (800ca0c <stdio_exit_handler+0xc>)
 800ca02:	4903      	ldr	r1, [pc, #12]	@ (800ca10 <stdio_exit_handler+0x10>)
 800ca04:	4803      	ldr	r0, [pc, #12]	@ (800ca14 <stdio_exit_handler+0x14>)
 800ca06:	f000 b869 	b.w	800cadc <_fwalk_sglue>
 800ca0a:	bf00      	nop
 800ca0c:	2000001c 	.word	0x2000001c
 800ca10:	0800d8c1 	.word	0x0800d8c1
 800ca14:	2000002c 	.word	0x2000002c

0800ca18 <cleanup_stdio>:
 800ca18:	6841      	ldr	r1, [r0, #4]
 800ca1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ca4c <cleanup_stdio+0x34>)
 800ca1c:	4299      	cmp	r1, r3
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	4604      	mov	r4, r0
 800ca22:	d001      	beq.n	800ca28 <cleanup_stdio+0x10>
 800ca24:	f000 ff4c 	bl	800d8c0 <_fflush_r>
 800ca28:	68a1      	ldr	r1, [r4, #8]
 800ca2a:	4b09      	ldr	r3, [pc, #36]	@ (800ca50 <cleanup_stdio+0x38>)
 800ca2c:	4299      	cmp	r1, r3
 800ca2e:	d002      	beq.n	800ca36 <cleanup_stdio+0x1e>
 800ca30:	4620      	mov	r0, r4
 800ca32:	f000 ff45 	bl	800d8c0 <_fflush_r>
 800ca36:	68e1      	ldr	r1, [r4, #12]
 800ca38:	4b06      	ldr	r3, [pc, #24]	@ (800ca54 <cleanup_stdio+0x3c>)
 800ca3a:	4299      	cmp	r1, r3
 800ca3c:	d004      	beq.n	800ca48 <cleanup_stdio+0x30>
 800ca3e:	4620      	mov	r0, r4
 800ca40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca44:	f000 bf3c 	b.w	800d8c0 <_fflush_r>
 800ca48:	bd10      	pop	{r4, pc}
 800ca4a:	bf00      	nop
 800ca4c:	200006ec 	.word	0x200006ec
 800ca50:	20000754 	.word	0x20000754
 800ca54:	200007bc 	.word	0x200007bc

0800ca58 <global_stdio_init.part.0>:
 800ca58:	b510      	push	{r4, lr}
 800ca5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca88 <global_stdio_init.part.0+0x30>)
 800ca5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ca8c <global_stdio_init.part.0+0x34>)
 800ca5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ca90 <global_stdio_init.part.0+0x38>)
 800ca60:	601a      	str	r2, [r3, #0]
 800ca62:	4620      	mov	r0, r4
 800ca64:	2200      	movs	r2, #0
 800ca66:	2104      	movs	r1, #4
 800ca68:	f7ff ff94 	bl	800c994 <std>
 800ca6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca70:	2201      	movs	r2, #1
 800ca72:	2109      	movs	r1, #9
 800ca74:	f7ff ff8e 	bl	800c994 <std>
 800ca78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca82:	2112      	movs	r1, #18
 800ca84:	f7ff bf86 	b.w	800c994 <std>
 800ca88:	20000824 	.word	0x20000824
 800ca8c:	200006ec 	.word	0x200006ec
 800ca90:	0800ca01 	.word	0x0800ca01

0800ca94 <__sfp_lock_acquire>:
 800ca94:	4801      	ldr	r0, [pc, #4]	@ (800ca9c <__sfp_lock_acquire+0x8>)
 800ca96:	f000 ba0e 	b.w	800ceb6 <__retarget_lock_acquire_recursive>
 800ca9a:	bf00      	nop
 800ca9c:	2000082d 	.word	0x2000082d

0800caa0 <__sfp_lock_release>:
 800caa0:	4801      	ldr	r0, [pc, #4]	@ (800caa8 <__sfp_lock_release+0x8>)
 800caa2:	f000 ba09 	b.w	800ceb8 <__retarget_lock_release_recursive>
 800caa6:	bf00      	nop
 800caa8:	2000082d 	.word	0x2000082d

0800caac <__sinit>:
 800caac:	b510      	push	{r4, lr}
 800caae:	4604      	mov	r4, r0
 800cab0:	f7ff fff0 	bl	800ca94 <__sfp_lock_acquire>
 800cab4:	6a23      	ldr	r3, [r4, #32]
 800cab6:	b11b      	cbz	r3, 800cac0 <__sinit+0x14>
 800cab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cabc:	f7ff bff0 	b.w	800caa0 <__sfp_lock_release>
 800cac0:	4b04      	ldr	r3, [pc, #16]	@ (800cad4 <__sinit+0x28>)
 800cac2:	6223      	str	r3, [r4, #32]
 800cac4:	4b04      	ldr	r3, [pc, #16]	@ (800cad8 <__sinit+0x2c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1f5      	bne.n	800cab8 <__sinit+0xc>
 800cacc:	f7ff ffc4 	bl	800ca58 <global_stdio_init.part.0>
 800cad0:	e7f2      	b.n	800cab8 <__sinit+0xc>
 800cad2:	bf00      	nop
 800cad4:	0800ca19 	.word	0x0800ca19
 800cad8:	20000824 	.word	0x20000824

0800cadc <_fwalk_sglue>:
 800cadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae0:	4607      	mov	r7, r0
 800cae2:	4688      	mov	r8, r1
 800cae4:	4614      	mov	r4, r2
 800cae6:	2600      	movs	r6, #0
 800cae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800caec:	f1b9 0901 	subs.w	r9, r9, #1
 800caf0:	d505      	bpl.n	800cafe <_fwalk_sglue+0x22>
 800caf2:	6824      	ldr	r4, [r4, #0]
 800caf4:	2c00      	cmp	r4, #0
 800caf6:	d1f7      	bne.n	800cae8 <_fwalk_sglue+0xc>
 800caf8:	4630      	mov	r0, r6
 800cafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d907      	bls.n	800cb14 <_fwalk_sglue+0x38>
 800cb04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	d003      	beq.n	800cb14 <_fwalk_sglue+0x38>
 800cb0c:	4629      	mov	r1, r5
 800cb0e:	4638      	mov	r0, r7
 800cb10:	47c0      	blx	r8
 800cb12:	4306      	orrs	r6, r0
 800cb14:	3568      	adds	r5, #104	@ 0x68
 800cb16:	e7e9      	b.n	800caec <_fwalk_sglue+0x10>

0800cb18 <iprintf>:
 800cb18:	b40f      	push	{r0, r1, r2, r3}
 800cb1a:	b507      	push	{r0, r1, r2, lr}
 800cb1c:	4906      	ldr	r1, [pc, #24]	@ (800cb38 <iprintf+0x20>)
 800cb1e:	ab04      	add	r3, sp, #16
 800cb20:	6808      	ldr	r0, [r1, #0]
 800cb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb26:	6881      	ldr	r1, [r0, #8]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	f000 fba1 	bl	800d270 <_vfiprintf_r>
 800cb2e:	b003      	add	sp, #12
 800cb30:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb34:	b004      	add	sp, #16
 800cb36:	4770      	bx	lr
 800cb38:	20000028 	.word	0x20000028

0800cb3c <setvbuf>:
 800cb3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb40:	461d      	mov	r5, r3
 800cb42:	4b57      	ldr	r3, [pc, #348]	@ (800cca0 <setvbuf+0x164>)
 800cb44:	681f      	ldr	r7, [r3, #0]
 800cb46:	4604      	mov	r4, r0
 800cb48:	460e      	mov	r6, r1
 800cb4a:	4690      	mov	r8, r2
 800cb4c:	b127      	cbz	r7, 800cb58 <setvbuf+0x1c>
 800cb4e:	6a3b      	ldr	r3, [r7, #32]
 800cb50:	b913      	cbnz	r3, 800cb58 <setvbuf+0x1c>
 800cb52:	4638      	mov	r0, r7
 800cb54:	f7ff ffaa 	bl	800caac <__sinit>
 800cb58:	f1b8 0f02 	cmp.w	r8, #2
 800cb5c:	d006      	beq.n	800cb6c <setvbuf+0x30>
 800cb5e:	f1b8 0f01 	cmp.w	r8, #1
 800cb62:	f200 809a 	bhi.w	800cc9a <setvbuf+0x15e>
 800cb66:	2d00      	cmp	r5, #0
 800cb68:	f2c0 8097 	blt.w	800cc9a <setvbuf+0x15e>
 800cb6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb6e:	07d9      	lsls	r1, r3, #31
 800cb70:	d405      	bmi.n	800cb7e <setvbuf+0x42>
 800cb72:	89a3      	ldrh	r3, [r4, #12]
 800cb74:	059a      	lsls	r2, r3, #22
 800cb76:	d402      	bmi.n	800cb7e <setvbuf+0x42>
 800cb78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb7a:	f000 f99c 	bl	800ceb6 <__retarget_lock_acquire_recursive>
 800cb7e:	4621      	mov	r1, r4
 800cb80:	4638      	mov	r0, r7
 800cb82:	f000 fe9d 	bl	800d8c0 <_fflush_r>
 800cb86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb88:	b141      	cbz	r1, 800cb9c <setvbuf+0x60>
 800cb8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb8e:	4299      	cmp	r1, r3
 800cb90:	d002      	beq.n	800cb98 <setvbuf+0x5c>
 800cb92:	4638      	mov	r0, r7
 800cb94:	f000 f9a0 	bl	800ced8 <_free_r>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	61a3      	str	r3, [r4, #24]
 800cba0:	6063      	str	r3, [r4, #4]
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	061b      	lsls	r3, r3, #24
 800cba6:	d503      	bpl.n	800cbb0 <setvbuf+0x74>
 800cba8:	6921      	ldr	r1, [r4, #16]
 800cbaa:	4638      	mov	r0, r7
 800cbac:	f000 f994 	bl	800ced8 <_free_r>
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800cbb6:	f023 0303 	bic.w	r3, r3, #3
 800cbba:	f1b8 0f02 	cmp.w	r8, #2
 800cbbe:	81a3      	strh	r3, [r4, #12]
 800cbc0:	d061      	beq.n	800cc86 <setvbuf+0x14a>
 800cbc2:	ab01      	add	r3, sp, #4
 800cbc4:	466a      	mov	r2, sp
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4638      	mov	r0, r7
 800cbca:	f000 fea1 	bl	800d910 <__swhatbuf_r>
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	4318      	orrs	r0, r3
 800cbd2:	81a0      	strh	r0, [r4, #12]
 800cbd4:	bb2d      	cbnz	r5, 800cc22 <setvbuf+0xe6>
 800cbd6:	9d00      	ldr	r5, [sp, #0]
 800cbd8:	4628      	mov	r0, r5
 800cbda:	f7ff fe1d 	bl	800c818 <malloc>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d152      	bne.n	800cc8a <setvbuf+0x14e>
 800cbe4:	f8dd 9000 	ldr.w	r9, [sp]
 800cbe8:	45a9      	cmp	r9, r5
 800cbea:	d140      	bne.n	800cc6e <setvbuf+0x132>
 800cbec:	f04f 35ff 	mov.w	r5, #4294967295
 800cbf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf4:	f043 0202 	orr.w	r2, r3, #2
 800cbf8:	81a2      	strh	r2, [r4, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	60a2      	str	r2, [r4, #8]
 800cbfe:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800cc02:	6022      	str	r2, [r4, #0]
 800cc04:	6122      	str	r2, [r4, #16]
 800cc06:	2201      	movs	r2, #1
 800cc08:	6162      	str	r2, [r4, #20]
 800cc0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc0c:	07d6      	lsls	r6, r2, #31
 800cc0e:	d404      	bmi.n	800cc1a <setvbuf+0xde>
 800cc10:	0598      	lsls	r0, r3, #22
 800cc12:	d402      	bmi.n	800cc1a <setvbuf+0xde>
 800cc14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc16:	f000 f94f 	bl	800ceb8 <__retarget_lock_release_recursive>
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	b003      	add	sp, #12
 800cc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc22:	2e00      	cmp	r6, #0
 800cc24:	d0d8      	beq.n	800cbd8 <setvbuf+0x9c>
 800cc26:	6a3b      	ldr	r3, [r7, #32]
 800cc28:	b913      	cbnz	r3, 800cc30 <setvbuf+0xf4>
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	f7ff ff3e 	bl	800caac <__sinit>
 800cc30:	f1b8 0f01 	cmp.w	r8, #1
 800cc34:	bf08      	it	eq
 800cc36:	89a3      	ldrheq	r3, [r4, #12]
 800cc38:	6026      	str	r6, [r4, #0]
 800cc3a:	bf04      	itt	eq
 800cc3c:	f043 0301 	orreq.w	r3, r3, #1
 800cc40:	81a3      	strheq	r3, [r4, #12]
 800cc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc46:	f013 0208 	ands.w	r2, r3, #8
 800cc4a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800cc4e:	d01e      	beq.n	800cc8e <setvbuf+0x152>
 800cc50:	07d9      	lsls	r1, r3, #31
 800cc52:	bf41      	itttt	mi
 800cc54:	2200      	movmi	r2, #0
 800cc56:	426d      	negmi	r5, r5
 800cc58:	60a2      	strmi	r2, [r4, #8]
 800cc5a:	61a5      	strmi	r5, [r4, #24]
 800cc5c:	bf58      	it	pl
 800cc5e:	60a5      	strpl	r5, [r4, #8]
 800cc60:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc62:	07d2      	lsls	r2, r2, #31
 800cc64:	d401      	bmi.n	800cc6a <setvbuf+0x12e>
 800cc66:	059b      	lsls	r3, r3, #22
 800cc68:	d513      	bpl.n	800cc92 <setvbuf+0x156>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	e7d5      	b.n	800cc1a <setvbuf+0xde>
 800cc6e:	4648      	mov	r0, r9
 800cc70:	f7ff fdd2 	bl	800c818 <malloc>
 800cc74:	4606      	mov	r6, r0
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d0b8      	beq.n	800cbec <setvbuf+0xb0>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc80:	81a3      	strh	r3, [r4, #12]
 800cc82:	464d      	mov	r5, r9
 800cc84:	e7cf      	b.n	800cc26 <setvbuf+0xea>
 800cc86:	2500      	movs	r5, #0
 800cc88:	e7b2      	b.n	800cbf0 <setvbuf+0xb4>
 800cc8a:	46a9      	mov	r9, r5
 800cc8c:	e7f5      	b.n	800cc7a <setvbuf+0x13e>
 800cc8e:	60a2      	str	r2, [r4, #8]
 800cc90:	e7e6      	b.n	800cc60 <setvbuf+0x124>
 800cc92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc94:	f000 f910 	bl	800ceb8 <__retarget_lock_release_recursive>
 800cc98:	e7e7      	b.n	800cc6a <setvbuf+0x12e>
 800cc9a:	f04f 35ff 	mov.w	r5, #4294967295
 800cc9e:	e7bc      	b.n	800cc1a <setvbuf+0xde>
 800cca0:	20000028 	.word	0x20000028

0800cca4 <__sread>:
 800cca4:	b510      	push	{r4, lr}
 800cca6:	460c      	mov	r4, r1
 800cca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccac:	f000 f8a4 	bl	800cdf8 <_read_r>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	bfab      	itete	ge
 800ccb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ccb6:	89a3      	ldrhlt	r3, [r4, #12]
 800ccb8:	181b      	addge	r3, r3, r0
 800ccba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ccbe:	bfac      	ite	ge
 800ccc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ccc2:	81a3      	strhlt	r3, [r4, #12]
 800ccc4:	bd10      	pop	{r4, pc}

0800ccc6 <__swrite>:
 800ccc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccca:	461f      	mov	r7, r3
 800cccc:	898b      	ldrh	r3, [r1, #12]
 800ccce:	05db      	lsls	r3, r3, #23
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	4616      	mov	r6, r2
 800ccd6:	d505      	bpl.n	800cce4 <__swrite+0x1e>
 800ccd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccdc:	2302      	movs	r3, #2
 800ccde:	2200      	movs	r2, #0
 800cce0:	f000 f878 	bl	800cdd4 <_lseek_r>
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccee:	81a3      	strh	r3, [r4, #12]
 800ccf0:	4632      	mov	r2, r6
 800ccf2:	463b      	mov	r3, r7
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfa:	f000 b89f 	b.w	800ce3c <_write_r>

0800ccfe <__sseek>:
 800ccfe:	b510      	push	{r4, lr}
 800cd00:	460c      	mov	r4, r1
 800cd02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd06:	f000 f865 	bl	800cdd4 <_lseek_r>
 800cd0a:	1c43      	adds	r3, r0, #1
 800cd0c:	89a3      	ldrh	r3, [r4, #12]
 800cd0e:	bf15      	itete	ne
 800cd10:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd1a:	81a3      	strheq	r3, [r4, #12]
 800cd1c:	bf18      	it	ne
 800cd1e:	81a3      	strhne	r3, [r4, #12]
 800cd20:	bd10      	pop	{r4, pc}

0800cd22 <__sclose>:
 800cd22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd26:	f000 b845 	b.w	800cdb4 <_close_r>

0800cd2a <_vsniprintf_r>:
 800cd2a:	b530      	push	{r4, r5, lr}
 800cd2c:	4614      	mov	r4, r2
 800cd2e:	2c00      	cmp	r4, #0
 800cd30:	b09b      	sub	sp, #108	@ 0x6c
 800cd32:	4605      	mov	r5, r0
 800cd34:	461a      	mov	r2, r3
 800cd36:	da05      	bge.n	800cd44 <_vsniprintf_r+0x1a>
 800cd38:	238b      	movs	r3, #139	@ 0x8b
 800cd3a:	6003      	str	r3, [r0, #0]
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	b01b      	add	sp, #108	@ 0x6c
 800cd42:	bd30      	pop	{r4, r5, pc}
 800cd44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cd48:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cd4c:	f04f 0300 	mov.w	r3, #0
 800cd50:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd52:	bf14      	ite	ne
 800cd54:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd58:	4623      	moveq	r3, r4
 800cd5a:	9302      	str	r3, [sp, #8]
 800cd5c:	9305      	str	r3, [sp, #20]
 800cd5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cd62:	9100      	str	r1, [sp, #0]
 800cd64:	9104      	str	r1, [sp, #16]
 800cd66:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cd6a:	4669      	mov	r1, sp
 800cd6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cd6e:	f000 f959 	bl	800d024 <_svfiprintf_r>
 800cd72:	1c43      	adds	r3, r0, #1
 800cd74:	bfbc      	itt	lt
 800cd76:	238b      	movlt	r3, #139	@ 0x8b
 800cd78:	602b      	strlt	r3, [r5, #0]
 800cd7a:	2c00      	cmp	r4, #0
 800cd7c:	d0e0      	beq.n	800cd40 <_vsniprintf_r+0x16>
 800cd7e:	9b00      	ldr	r3, [sp, #0]
 800cd80:	2200      	movs	r2, #0
 800cd82:	701a      	strb	r2, [r3, #0]
 800cd84:	e7dc      	b.n	800cd40 <_vsniprintf_r+0x16>
	...

0800cd88 <vsniprintf>:
 800cd88:	b507      	push	{r0, r1, r2, lr}
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	460a      	mov	r2, r1
 800cd90:	4601      	mov	r1, r0
 800cd92:	4803      	ldr	r0, [pc, #12]	@ (800cda0 <vsniprintf+0x18>)
 800cd94:	6800      	ldr	r0, [r0, #0]
 800cd96:	f7ff ffc8 	bl	800cd2a <_vsniprintf_r>
 800cd9a:	b003      	add	sp, #12
 800cd9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cda0:	20000028 	.word	0x20000028

0800cda4 <memset>:
 800cda4:	4402      	add	r2, r0
 800cda6:	4603      	mov	r3, r0
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d100      	bne.n	800cdae <memset+0xa>
 800cdac:	4770      	bx	lr
 800cdae:	f803 1b01 	strb.w	r1, [r3], #1
 800cdb2:	e7f9      	b.n	800cda8 <memset+0x4>

0800cdb4 <_close_r>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	4d06      	ldr	r5, [pc, #24]	@ (800cdd0 <_close_r+0x1c>)
 800cdb8:	2300      	movs	r3, #0
 800cdba:	4604      	mov	r4, r0
 800cdbc:	4608      	mov	r0, r1
 800cdbe:	602b      	str	r3, [r5, #0]
 800cdc0:	f7f7 f97e 	bl	80040c0 <_close>
 800cdc4:	1c43      	adds	r3, r0, #1
 800cdc6:	d102      	bne.n	800cdce <_close_r+0x1a>
 800cdc8:	682b      	ldr	r3, [r5, #0]
 800cdca:	b103      	cbz	r3, 800cdce <_close_r+0x1a>
 800cdcc:	6023      	str	r3, [r4, #0]
 800cdce:	bd38      	pop	{r3, r4, r5, pc}
 800cdd0:	20000828 	.word	0x20000828

0800cdd4 <_lseek_r>:
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4d07      	ldr	r5, [pc, #28]	@ (800cdf4 <_lseek_r+0x20>)
 800cdd8:	4604      	mov	r4, r0
 800cdda:	4608      	mov	r0, r1
 800cddc:	4611      	mov	r1, r2
 800cdde:	2200      	movs	r2, #0
 800cde0:	602a      	str	r2, [r5, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	f7f7 f993 	bl	800410e <_lseek>
 800cde8:	1c43      	adds	r3, r0, #1
 800cdea:	d102      	bne.n	800cdf2 <_lseek_r+0x1e>
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	b103      	cbz	r3, 800cdf2 <_lseek_r+0x1e>
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	20000828 	.word	0x20000828

0800cdf8 <_read_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	@ (800ce18 <_read_r+0x20>)
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	4608      	mov	r0, r1
 800ce00:	4611      	mov	r1, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	602a      	str	r2, [r5, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f7f7 f93d 	bl	8004086 <_read>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_read_r+0x1e>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_read_r+0x1e>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20000828 	.word	0x20000828

0800ce1c <_sbrk_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4d06      	ldr	r5, [pc, #24]	@ (800ce38 <_sbrk_r+0x1c>)
 800ce20:	2300      	movs	r3, #0
 800ce22:	4604      	mov	r4, r0
 800ce24:	4608      	mov	r0, r1
 800ce26:	602b      	str	r3, [r5, #0]
 800ce28:	f7f7 f97e 	bl	8004128 <_sbrk>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d102      	bne.n	800ce36 <_sbrk_r+0x1a>
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	b103      	cbz	r3, 800ce36 <_sbrk_r+0x1a>
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	bd38      	pop	{r3, r4, r5, pc}
 800ce38:	20000828 	.word	0x20000828

0800ce3c <_write_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	4d07      	ldr	r5, [pc, #28]	@ (800ce5c <_write_r+0x20>)
 800ce40:	4604      	mov	r4, r0
 800ce42:	4608      	mov	r0, r1
 800ce44:	4611      	mov	r1, r2
 800ce46:	2200      	movs	r2, #0
 800ce48:	602a      	str	r2, [r5, #0]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f7f5 f832 	bl	8001eb4 <_write>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	d102      	bne.n	800ce5a <_write_r+0x1e>
 800ce54:	682b      	ldr	r3, [r5, #0]
 800ce56:	b103      	cbz	r3, 800ce5a <_write_r+0x1e>
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	bd38      	pop	{r3, r4, r5, pc}
 800ce5c:	20000828 	.word	0x20000828

0800ce60 <__errno>:
 800ce60:	4b01      	ldr	r3, [pc, #4]	@ (800ce68 <__errno+0x8>)
 800ce62:	6818      	ldr	r0, [r3, #0]
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	20000028 	.word	0x20000028

0800ce6c <__libc_init_array>:
 800ce6c:	b570      	push	{r4, r5, r6, lr}
 800ce6e:	4d0d      	ldr	r5, [pc, #52]	@ (800cea4 <__libc_init_array+0x38>)
 800ce70:	4c0d      	ldr	r4, [pc, #52]	@ (800cea8 <__libc_init_array+0x3c>)
 800ce72:	1b64      	subs	r4, r4, r5
 800ce74:	10a4      	asrs	r4, r4, #2
 800ce76:	2600      	movs	r6, #0
 800ce78:	42a6      	cmp	r6, r4
 800ce7a:	d109      	bne.n	800ce90 <__libc_init_array+0x24>
 800ce7c:	4d0b      	ldr	r5, [pc, #44]	@ (800ceac <__libc_init_array+0x40>)
 800ce7e:	4c0c      	ldr	r4, [pc, #48]	@ (800ceb0 <__libc_init_array+0x44>)
 800ce80:	f000 feae 	bl	800dbe0 <_init>
 800ce84:	1b64      	subs	r4, r4, r5
 800ce86:	10a4      	asrs	r4, r4, #2
 800ce88:	2600      	movs	r6, #0
 800ce8a:	42a6      	cmp	r6, r4
 800ce8c:	d105      	bne.n	800ce9a <__libc_init_array+0x2e>
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}
 800ce90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce94:	4798      	blx	r3
 800ce96:	3601      	adds	r6, #1
 800ce98:	e7ee      	b.n	800ce78 <__libc_init_array+0xc>
 800ce9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce9e:	4798      	blx	r3
 800cea0:	3601      	adds	r6, #1
 800cea2:	e7f2      	b.n	800ce8a <__libc_init_array+0x1e>
 800cea4:	0800e2a8 	.word	0x0800e2a8
 800cea8:	0800e2a8 	.word	0x0800e2a8
 800ceac:	0800e2a8 	.word	0x0800e2a8
 800ceb0:	0800e2ac 	.word	0x0800e2ac

0800ceb4 <__retarget_lock_init_recursive>:
 800ceb4:	4770      	bx	lr

0800ceb6 <__retarget_lock_acquire_recursive>:
 800ceb6:	4770      	bx	lr

0800ceb8 <__retarget_lock_release_recursive>:
 800ceb8:	4770      	bx	lr

0800ceba <memcpy>:
 800ceba:	440a      	add	r2, r1
 800cebc:	4291      	cmp	r1, r2
 800cebe:	f100 33ff 	add.w	r3, r0, #4294967295
 800cec2:	d100      	bne.n	800cec6 <memcpy+0xc>
 800cec4:	4770      	bx	lr
 800cec6:	b510      	push	{r4, lr}
 800cec8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ced0:	4291      	cmp	r1, r2
 800ced2:	d1f9      	bne.n	800cec8 <memcpy+0xe>
 800ced4:	bd10      	pop	{r4, pc}
	...

0800ced8 <_free_r>:
 800ced8:	b538      	push	{r3, r4, r5, lr}
 800ceda:	4605      	mov	r5, r0
 800cedc:	2900      	cmp	r1, #0
 800cede:	d041      	beq.n	800cf64 <_free_r+0x8c>
 800cee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cee4:	1f0c      	subs	r4, r1, #4
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	bfb8      	it	lt
 800ceea:	18e4      	addlt	r4, r4, r3
 800ceec:	f7ff fd46 	bl	800c97c <__malloc_lock>
 800cef0:	4a1d      	ldr	r2, [pc, #116]	@ (800cf68 <_free_r+0x90>)
 800cef2:	6813      	ldr	r3, [r2, #0]
 800cef4:	b933      	cbnz	r3, 800cf04 <_free_r+0x2c>
 800cef6:	6063      	str	r3, [r4, #4]
 800cef8:	6014      	str	r4, [r2, #0]
 800cefa:	4628      	mov	r0, r5
 800cefc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf00:	f7ff bd42 	b.w	800c988 <__malloc_unlock>
 800cf04:	42a3      	cmp	r3, r4
 800cf06:	d908      	bls.n	800cf1a <_free_r+0x42>
 800cf08:	6820      	ldr	r0, [r4, #0]
 800cf0a:	1821      	adds	r1, r4, r0
 800cf0c:	428b      	cmp	r3, r1
 800cf0e:	bf01      	itttt	eq
 800cf10:	6819      	ldreq	r1, [r3, #0]
 800cf12:	685b      	ldreq	r3, [r3, #4]
 800cf14:	1809      	addeq	r1, r1, r0
 800cf16:	6021      	streq	r1, [r4, #0]
 800cf18:	e7ed      	b.n	800cef6 <_free_r+0x1e>
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	b10b      	cbz	r3, 800cf24 <_free_r+0x4c>
 800cf20:	42a3      	cmp	r3, r4
 800cf22:	d9fa      	bls.n	800cf1a <_free_r+0x42>
 800cf24:	6811      	ldr	r1, [r2, #0]
 800cf26:	1850      	adds	r0, r2, r1
 800cf28:	42a0      	cmp	r0, r4
 800cf2a:	d10b      	bne.n	800cf44 <_free_r+0x6c>
 800cf2c:	6820      	ldr	r0, [r4, #0]
 800cf2e:	4401      	add	r1, r0
 800cf30:	1850      	adds	r0, r2, r1
 800cf32:	4283      	cmp	r3, r0
 800cf34:	6011      	str	r1, [r2, #0]
 800cf36:	d1e0      	bne.n	800cefa <_free_r+0x22>
 800cf38:	6818      	ldr	r0, [r3, #0]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	6053      	str	r3, [r2, #4]
 800cf3e:	4408      	add	r0, r1
 800cf40:	6010      	str	r0, [r2, #0]
 800cf42:	e7da      	b.n	800cefa <_free_r+0x22>
 800cf44:	d902      	bls.n	800cf4c <_free_r+0x74>
 800cf46:	230c      	movs	r3, #12
 800cf48:	602b      	str	r3, [r5, #0]
 800cf4a:	e7d6      	b.n	800cefa <_free_r+0x22>
 800cf4c:	6820      	ldr	r0, [r4, #0]
 800cf4e:	1821      	adds	r1, r4, r0
 800cf50:	428b      	cmp	r3, r1
 800cf52:	bf04      	itt	eq
 800cf54:	6819      	ldreq	r1, [r3, #0]
 800cf56:	685b      	ldreq	r3, [r3, #4]
 800cf58:	6063      	str	r3, [r4, #4]
 800cf5a:	bf04      	itt	eq
 800cf5c:	1809      	addeq	r1, r1, r0
 800cf5e:	6021      	streq	r1, [r4, #0]
 800cf60:	6054      	str	r4, [r2, #4]
 800cf62:	e7ca      	b.n	800cefa <_free_r+0x22>
 800cf64:	bd38      	pop	{r3, r4, r5, pc}
 800cf66:	bf00      	nop
 800cf68:	200006e8 	.word	0x200006e8

0800cf6c <__ssputs_r>:
 800cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf70:	688e      	ldr	r6, [r1, #8]
 800cf72:	461f      	mov	r7, r3
 800cf74:	42be      	cmp	r6, r7
 800cf76:	680b      	ldr	r3, [r1, #0]
 800cf78:	4682      	mov	sl, r0
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	4690      	mov	r8, r2
 800cf7e:	d82d      	bhi.n	800cfdc <__ssputs_r+0x70>
 800cf80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf88:	d026      	beq.n	800cfd8 <__ssputs_r+0x6c>
 800cf8a:	6965      	ldr	r5, [r4, #20]
 800cf8c:	6909      	ldr	r1, [r1, #16]
 800cf8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf92:	eba3 0901 	sub.w	r9, r3, r1
 800cf96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf9a:	1c7b      	adds	r3, r7, #1
 800cf9c:	444b      	add	r3, r9
 800cf9e:	106d      	asrs	r5, r5, #1
 800cfa0:	429d      	cmp	r5, r3
 800cfa2:	bf38      	it	cc
 800cfa4:	461d      	movcc	r5, r3
 800cfa6:	0553      	lsls	r3, r2, #21
 800cfa8:	d527      	bpl.n	800cffa <__ssputs_r+0x8e>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	f7ff fc66 	bl	800c87c <_malloc_r>
 800cfb0:	4606      	mov	r6, r0
 800cfb2:	b360      	cbz	r0, 800d00e <__ssputs_r+0xa2>
 800cfb4:	6921      	ldr	r1, [r4, #16]
 800cfb6:	464a      	mov	r2, r9
 800cfb8:	f7ff ff7f 	bl	800ceba <memcpy>
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cfc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfc6:	81a3      	strh	r3, [r4, #12]
 800cfc8:	6126      	str	r6, [r4, #16]
 800cfca:	6165      	str	r5, [r4, #20]
 800cfcc:	444e      	add	r6, r9
 800cfce:	eba5 0509 	sub.w	r5, r5, r9
 800cfd2:	6026      	str	r6, [r4, #0]
 800cfd4:	60a5      	str	r5, [r4, #8]
 800cfd6:	463e      	mov	r6, r7
 800cfd8:	42be      	cmp	r6, r7
 800cfda:	d900      	bls.n	800cfde <__ssputs_r+0x72>
 800cfdc:	463e      	mov	r6, r7
 800cfde:	6820      	ldr	r0, [r4, #0]
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	4641      	mov	r1, r8
 800cfe4:	f000 fd8a 	bl	800dafc <memmove>
 800cfe8:	68a3      	ldr	r3, [r4, #8]
 800cfea:	1b9b      	subs	r3, r3, r6
 800cfec:	60a3      	str	r3, [r4, #8]
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	4433      	add	r3, r6
 800cff2:	6023      	str	r3, [r4, #0]
 800cff4:	2000      	movs	r0, #0
 800cff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cffa:	462a      	mov	r2, r5
 800cffc:	f000 fdba 	bl	800db74 <_realloc_r>
 800d000:	4606      	mov	r6, r0
 800d002:	2800      	cmp	r0, #0
 800d004:	d1e0      	bne.n	800cfc8 <__ssputs_r+0x5c>
 800d006:	6921      	ldr	r1, [r4, #16]
 800d008:	4650      	mov	r0, sl
 800d00a:	f7ff ff65 	bl	800ced8 <_free_r>
 800d00e:	230c      	movs	r3, #12
 800d010:	f8ca 3000 	str.w	r3, [sl]
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d01a:	81a3      	strh	r3, [r4, #12]
 800d01c:	f04f 30ff 	mov.w	r0, #4294967295
 800d020:	e7e9      	b.n	800cff6 <__ssputs_r+0x8a>
	...

0800d024 <_svfiprintf_r>:
 800d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d028:	4698      	mov	r8, r3
 800d02a:	898b      	ldrh	r3, [r1, #12]
 800d02c:	061b      	lsls	r3, r3, #24
 800d02e:	b09d      	sub	sp, #116	@ 0x74
 800d030:	4607      	mov	r7, r0
 800d032:	460d      	mov	r5, r1
 800d034:	4614      	mov	r4, r2
 800d036:	d510      	bpl.n	800d05a <_svfiprintf_r+0x36>
 800d038:	690b      	ldr	r3, [r1, #16]
 800d03a:	b973      	cbnz	r3, 800d05a <_svfiprintf_r+0x36>
 800d03c:	2140      	movs	r1, #64	@ 0x40
 800d03e:	f7ff fc1d 	bl	800c87c <_malloc_r>
 800d042:	6028      	str	r0, [r5, #0]
 800d044:	6128      	str	r0, [r5, #16]
 800d046:	b930      	cbnz	r0, 800d056 <_svfiprintf_r+0x32>
 800d048:	230c      	movs	r3, #12
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	f04f 30ff 	mov.w	r0, #4294967295
 800d050:	b01d      	add	sp, #116	@ 0x74
 800d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d056:	2340      	movs	r3, #64	@ 0x40
 800d058:	616b      	str	r3, [r5, #20]
 800d05a:	2300      	movs	r3, #0
 800d05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d05e:	2320      	movs	r3, #32
 800d060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d064:	f8cd 800c 	str.w	r8, [sp, #12]
 800d068:	2330      	movs	r3, #48	@ 0x30
 800d06a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d208 <_svfiprintf_r+0x1e4>
 800d06e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d072:	f04f 0901 	mov.w	r9, #1
 800d076:	4623      	mov	r3, r4
 800d078:	469a      	mov	sl, r3
 800d07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d07e:	b10a      	cbz	r2, 800d084 <_svfiprintf_r+0x60>
 800d080:	2a25      	cmp	r2, #37	@ 0x25
 800d082:	d1f9      	bne.n	800d078 <_svfiprintf_r+0x54>
 800d084:	ebba 0b04 	subs.w	fp, sl, r4
 800d088:	d00b      	beq.n	800d0a2 <_svfiprintf_r+0x7e>
 800d08a:	465b      	mov	r3, fp
 800d08c:	4622      	mov	r2, r4
 800d08e:	4629      	mov	r1, r5
 800d090:	4638      	mov	r0, r7
 800d092:	f7ff ff6b 	bl	800cf6c <__ssputs_r>
 800d096:	3001      	adds	r0, #1
 800d098:	f000 80a7 	beq.w	800d1ea <_svfiprintf_r+0x1c6>
 800d09c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d09e:	445a      	add	r2, fp
 800d0a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 809f 	beq.w	800d1ea <_svfiprintf_r+0x1c6>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b6:	f10a 0a01 	add.w	sl, sl, #1
 800d0ba:	9304      	str	r3, [sp, #16]
 800d0bc:	9307      	str	r3, [sp, #28]
 800d0be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d0c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0c4:	4654      	mov	r4, sl
 800d0c6:	2205      	movs	r2, #5
 800d0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0cc:	484e      	ldr	r0, [pc, #312]	@ (800d208 <_svfiprintf_r+0x1e4>)
 800d0ce:	f7f3 f87f 	bl	80001d0 <memchr>
 800d0d2:	9a04      	ldr	r2, [sp, #16]
 800d0d4:	b9d8      	cbnz	r0, 800d10e <_svfiprintf_r+0xea>
 800d0d6:	06d0      	lsls	r0, r2, #27
 800d0d8:	bf44      	itt	mi
 800d0da:	2320      	movmi	r3, #32
 800d0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0e0:	0711      	lsls	r1, r2, #28
 800d0e2:	bf44      	itt	mi
 800d0e4:	232b      	movmi	r3, #43	@ 0x2b
 800d0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0f0:	d015      	beq.n	800d11e <_svfiprintf_r+0xfa>
 800d0f2:	9a07      	ldr	r2, [sp, #28]
 800d0f4:	4654      	mov	r4, sl
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	f04f 0c0a 	mov.w	ip, #10
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d102:	3b30      	subs	r3, #48	@ 0x30
 800d104:	2b09      	cmp	r3, #9
 800d106:	d94b      	bls.n	800d1a0 <_svfiprintf_r+0x17c>
 800d108:	b1b0      	cbz	r0, 800d138 <_svfiprintf_r+0x114>
 800d10a:	9207      	str	r2, [sp, #28]
 800d10c:	e014      	b.n	800d138 <_svfiprintf_r+0x114>
 800d10e:	eba0 0308 	sub.w	r3, r0, r8
 800d112:	fa09 f303 	lsl.w	r3, r9, r3
 800d116:	4313      	orrs	r3, r2
 800d118:	9304      	str	r3, [sp, #16]
 800d11a:	46a2      	mov	sl, r4
 800d11c:	e7d2      	b.n	800d0c4 <_svfiprintf_r+0xa0>
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	1d19      	adds	r1, r3, #4
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	9103      	str	r1, [sp, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	bfbb      	ittet	lt
 800d12a:	425b      	neglt	r3, r3
 800d12c:	f042 0202 	orrlt.w	r2, r2, #2
 800d130:	9307      	strge	r3, [sp, #28]
 800d132:	9307      	strlt	r3, [sp, #28]
 800d134:	bfb8      	it	lt
 800d136:	9204      	strlt	r2, [sp, #16]
 800d138:	7823      	ldrb	r3, [r4, #0]
 800d13a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d13c:	d10a      	bne.n	800d154 <_svfiprintf_r+0x130>
 800d13e:	7863      	ldrb	r3, [r4, #1]
 800d140:	2b2a      	cmp	r3, #42	@ 0x2a
 800d142:	d132      	bne.n	800d1aa <_svfiprintf_r+0x186>
 800d144:	9b03      	ldr	r3, [sp, #12]
 800d146:	1d1a      	adds	r2, r3, #4
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	9203      	str	r2, [sp, #12]
 800d14c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d150:	3402      	adds	r4, #2
 800d152:	9305      	str	r3, [sp, #20]
 800d154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d218 <_svfiprintf_r+0x1f4>
 800d158:	7821      	ldrb	r1, [r4, #0]
 800d15a:	2203      	movs	r2, #3
 800d15c:	4650      	mov	r0, sl
 800d15e:	f7f3 f837 	bl	80001d0 <memchr>
 800d162:	b138      	cbz	r0, 800d174 <_svfiprintf_r+0x150>
 800d164:	9b04      	ldr	r3, [sp, #16]
 800d166:	eba0 000a 	sub.w	r0, r0, sl
 800d16a:	2240      	movs	r2, #64	@ 0x40
 800d16c:	4082      	lsls	r2, r0
 800d16e:	4313      	orrs	r3, r2
 800d170:	3401      	adds	r4, #1
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d178:	4824      	ldr	r0, [pc, #144]	@ (800d20c <_svfiprintf_r+0x1e8>)
 800d17a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d17e:	2206      	movs	r2, #6
 800d180:	f7f3 f826 	bl	80001d0 <memchr>
 800d184:	2800      	cmp	r0, #0
 800d186:	d036      	beq.n	800d1f6 <_svfiprintf_r+0x1d2>
 800d188:	4b21      	ldr	r3, [pc, #132]	@ (800d210 <_svfiprintf_r+0x1ec>)
 800d18a:	bb1b      	cbnz	r3, 800d1d4 <_svfiprintf_r+0x1b0>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	3307      	adds	r3, #7
 800d190:	f023 0307 	bic.w	r3, r3, #7
 800d194:	3308      	adds	r3, #8
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d19a:	4433      	add	r3, r6
 800d19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d19e:	e76a      	b.n	800d076 <_svfiprintf_r+0x52>
 800d1a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a4:	460c      	mov	r4, r1
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	e7a8      	b.n	800d0fc <_svfiprintf_r+0xd8>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	3401      	adds	r4, #1
 800d1ae:	9305      	str	r3, [sp, #20]
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	f04f 0c0a 	mov.w	ip, #10
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1bc:	3a30      	subs	r2, #48	@ 0x30
 800d1be:	2a09      	cmp	r2, #9
 800d1c0:	d903      	bls.n	800d1ca <_svfiprintf_r+0x1a6>
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0c6      	beq.n	800d154 <_svfiprintf_r+0x130>
 800d1c6:	9105      	str	r1, [sp, #20]
 800d1c8:	e7c4      	b.n	800d154 <_svfiprintf_r+0x130>
 800d1ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e7f0      	b.n	800d1b6 <_svfiprintf_r+0x192>
 800d1d4:	ab03      	add	r3, sp, #12
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	462a      	mov	r2, r5
 800d1da:	4b0e      	ldr	r3, [pc, #56]	@ (800d214 <_svfiprintf_r+0x1f0>)
 800d1dc:	a904      	add	r1, sp, #16
 800d1de:	4638      	mov	r0, r7
 800d1e0:	f3af 8000 	nop.w
 800d1e4:	1c42      	adds	r2, r0, #1
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	d1d6      	bne.n	800d198 <_svfiprintf_r+0x174>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	065b      	lsls	r3, r3, #25
 800d1ee:	f53f af2d 	bmi.w	800d04c <_svfiprintf_r+0x28>
 800d1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1f4:	e72c      	b.n	800d050 <_svfiprintf_r+0x2c>
 800d1f6:	ab03      	add	r3, sp, #12
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	462a      	mov	r2, r5
 800d1fc:	4b05      	ldr	r3, [pc, #20]	@ (800d214 <_svfiprintf_r+0x1f0>)
 800d1fe:	a904      	add	r1, sp, #16
 800d200:	4638      	mov	r0, r7
 800d202:	f000 f9bb 	bl	800d57c <_printf_i>
 800d206:	e7ed      	b.n	800d1e4 <_svfiprintf_r+0x1c0>
 800d208:	0800e26c 	.word	0x0800e26c
 800d20c:	0800e276 	.word	0x0800e276
 800d210:	00000000 	.word	0x00000000
 800d214:	0800cf6d 	.word	0x0800cf6d
 800d218:	0800e272 	.word	0x0800e272

0800d21c <__sfputc_r>:
 800d21c:	6893      	ldr	r3, [r2, #8]
 800d21e:	3b01      	subs	r3, #1
 800d220:	2b00      	cmp	r3, #0
 800d222:	b410      	push	{r4}
 800d224:	6093      	str	r3, [r2, #8]
 800d226:	da08      	bge.n	800d23a <__sfputc_r+0x1e>
 800d228:	6994      	ldr	r4, [r2, #24]
 800d22a:	42a3      	cmp	r3, r4
 800d22c:	db01      	blt.n	800d232 <__sfputc_r+0x16>
 800d22e:	290a      	cmp	r1, #10
 800d230:	d103      	bne.n	800d23a <__sfputc_r+0x1e>
 800d232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d236:	f000 bbcd 	b.w	800d9d4 <__swbuf_r>
 800d23a:	6813      	ldr	r3, [r2, #0]
 800d23c:	1c58      	adds	r0, r3, #1
 800d23e:	6010      	str	r0, [r2, #0]
 800d240:	7019      	strb	r1, [r3, #0]
 800d242:	4608      	mov	r0, r1
 800d244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <__sfputs_r>:
 800d24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	4614      	mov	r4, r2
 800d252:	18d5      	adds	r5, r2, r3
 800d254:	42ac      	cmp	r4, r5
 800d256:	d101      	bne.n	800d25c <__sfputs_r+0x12>
 800d258:	2000      	movs	r0, #0
 800d25a:	e007      	b.n	800d26c <__sfputs_r+0x22>
 800d25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d260:	463a      	mov	r2, r7
 800d262:	4630      	mov	r0, r6
 800d264:	f7ff ffda 	bl	800d21c <__sfputc_r>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d1f3      	bne.n	800d254 <__sfputs_r+0xa>
 800d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d270 <_vfiprintf_r>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	460d      	mov	r5, r1
 800d276:	b09d      	sub	sp, #116	@ 0x74
 800d278:	4614      	mov	r4, r2
 800d27a:	4698      	mov	r8, r3
 800d27c:	4606      	mov	r6, r0
 800d27e:	b118      	cbz	r0, 800d288 <_vfiprintf_r+0x18>
 800d280:	6a03      	ldr	r3, [r0, #32]
 800d282:	b90b      	cbnz	r3, 800d288 <_vfiprintf_r+0x18>
 800d284:	f7ff fc12 	bl	800caac <__sinit>
 800d288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d28a:	07d9      	lsls	r1, r3, #31
 800d28c:	d405      	bmi.n	800d29a <_vfiprintf_r+0x2a>
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	059a      	lsls	r2, r3, #22
 800d292:	d402      	bmi.n	800d29a <_vfiprintf_r+0x2a>
 800d294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d296:	f7ff fe0e 	bl	800ceb6 <__retarget_lock_acquire_recursive>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	071b      	lsls	r3, r3, #28
 800d29e:	d501      	bpl.n	800d2a4 <_vfiprintf_r+0x34>
 800d2a0:	692b      	ldr	r3, [r5, #16]
 800d2a2:	b99b      	cbnz	r3, 800d2cc <_vfiprintf_r+0x5c>
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	f000 fbd2 	bl	800da50 <__swsetup_r>
 800d2ac:	b170      	cbz	r0, 800d2cc <_vfiprintf_r+0x5c>
 800d2ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2b0:	07dc      	lsls	r4, r3, #31
 800d2b2:	d504      	bpl.n	800d2be <_vfiprintf_r+0x4e>
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b8:	b01d      	add	sp, #116	@ 0x74
 800d2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	0598      	lsls	r0, r3, #22
 800d2c2:	d4f7      	bmi.n	800d2b4 <_vfiprintf_r+0x44>
 800d2c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2c6:	f7ff fdf7 	bl	800ceb8 <__retarget_lock_release_recursive>
 800d2ca:	e7f3      	b.n	800d2b4 <_vfiprintf_r+0x44>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2d0:	2320      	movs	r3, #32
 800d2d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2da:	2330      	movs	r3, #48	@ 0x30
 800d2dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d48c <_vfiprintf_r+0x21c>
 800d2e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2e4:	f04f 0901 	mov.w	r9, #1
 800d2e8:	4623      	mov	r3, r4
 800d2ea:	469a      	mov	sl, r3
 800d2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2f0:	b10a      	cbz	r2, 800d2f6 <_vfiprintf_r+0x86>
 800d2f2:	2a25      	cmp	r2, #37	@ 0x25
 800d2f4:	d1f9      	bne.n	800d2ea <_vfiprintf_r+0x7a>
 800d2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2fa:	d00b      	beq.n	800d314 <_vfiprintf_r+0xa4>
 800d2fc:	465b      	mov	r3, fp
 800d2fe:	4622      	mov	r2, r4
 800d300:	4629      	mov	r1, r5
 800d302:	4630      	mov	r0, r6
 800d304:	f7ff ffa1 	bl	800d24a <__sfputs_r>
 800d308:	3001      	adds	r0, #1
 800d30a:	f000 80a7 	beq.w	800d45c <_vfiprintf_r+0x1ec>
 800d30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d310:	445a      	add	r2, fp
 800d312:	9209      	str	r2, [sp, #36]	@ 0x24
 800d314:	f89a 3000 	ldrb.w	r3, [sl]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 809f 	beq.w	800d45c <_vfiprintf_r+0x1ec>
 800d31e:	2300      	movs	r3, #0
 800d320:	f04f 32ff 	mov.w	r2, #4294967295
 800d324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d328:	f10a 0a01 	add.w	sl, sl, #1
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	9307      	str	r3, [sp, #28]
 800d330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d334:	931a      	str	r3, [sp, #104]	@ 0x68
 800d336:	4654      	mov	r4, sl
 800d338:	2205      	movs	r2, #5
 800d33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d33e:	4853      	ldr	r0, [pc, #332]	@ (800d48c <_vfiprintf_r+0x21c>)
 800d340:	f7f2 ff46 	bl	80001d0 <memchr>
 800d344:	9a04      	ldr	r2, [sp, #16]
 800d346:	b9d8      	cbnz	r0, 800d380 <_vfiprintf_r+0x110>
 800d348:	06d1      	lsls	r1, r2, #27
 800d34a:	bf44      	itt	mi
 800d34c:	2320      	movmi	r3, #32
 800d34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d352:	0713      	lsls	r3, r2, #28
 800d354:	bf44      	itt	mi
 800d356:	232b      	movmi	r3, #43	@ 0x2b
 800d358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d35c:	f89a 3000 	ldrb.w	r3, [sl]
 800d360:	2b2a      	cmp	r3, #42	@ 0x2a
 800d362:	d015      	beq.n	800d390 <_vfiprintf_r+0x120>
 800d364:	9a07      	ldr	r2, [sp, #28]
 800d366:	4654      	mov	r4, sl
 800d368:	2000      	movs	r0, #0
 800d36a:	f04f 0c0a 	mov.w	ip, #10
 800d36e:	4621      	mov	r1, r4
 800d370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d374:	3b30      	subs	r3, #48	@ 0x30
 800d376:	2b09      	cmp	r3, #9
 800d378:	d94b      	bls.n	800d412 <_vfiprintf_r+0x1a2>
 800d37a:	b1b0      	cbz	r0, 800d3aa <_vfiprintf_r+0x13a>
 800d37c:	9207      	str	r2, [sp, #28]
 800d37e:	e014      	b.n	800d3aa <_vfiprintf_r+0x13a>
 800d380:	eba0 0308 	sub.w	r3, r0, r8
 800d384:	fa09 f303 	lsl.w	r3, r9, r3
 800d388:	4313      	orrs	r3, r2
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	46a2      	mov	sl, r4
 800d38e:	e7d2      	b.n	800d336 <_vfiprintf_r+0xc6>
 800d390:	9b03      	ldr	r3, [sp, #12]
 800d392:	1d19      	adds	r1, r3, #4
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	9103      	str	r1, [sp, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	bfbb      	ittet	lt
 800d39c:	425b      	neglt	r3, r3
 800d39e:	f042 0202 	orrlt.w	r2, r2, #2
 800d3a2:	9307      	strge	r3, [sp, #28]
 800d3a4:	9307      	strlt	r3, [sp, #28]
 800d3a6:	bfb8      	it	lt
 800d3a8:	9204      	strlt	r2, [sp, #16]
 800d3aa:	7823      	ldrb	r3, [r4, #0]
 800d3ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3ae:	d10a      	bne.n	800d3c6 <_vfiprintf_r+0x156>
 800d3b0:	7863      	ldrb	r3, [r4, #1]
 800d3b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3b4:	d132      	bne.n	800d41c <_vfiprintf_r+0x1ac>
 800d3b6:	9b03      	ldr	r3, [sp, #12]
 800d3b8:	1d1a      	adds	r2, r3, #4
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	9203      	str	r2, [sp, #12]
 800d3be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3c2:	3402      	adds	r4, #2
 800d3c4:	9305      	str	r3, [sp, #20]
 800d3c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d49c <_vfiprintf_r+0x22c>
 800d3ca:	7821      	ldrb	r1, [r4, #0]
 800d3cc:	2203      	movs	r2, #3
 800d3ce:	4650      	mov	r0, sl
 800d3d0:	f7f2 fefe 	bl	80001d0 <memchr>
 800d3d4:	b138      	cbz	r0, 800d3e6 <_vfiprintf_r+0x176>
 800d3d6:	9b04      	ldr	r3, [sp, #16]
 800d3d8:	eba0 000a 	sub.w	r0, r0, sl
 800d3dc:	2240      	movs	r2, #64	@ 0x40
 800d3de:	4082      	lsls	r2, r0
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	3401      	adds	r4, #1
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ea:	4829      	ldr	r0, [pc, #164]	@ (800d490 <_vfiprintf_r+0x220>)
 800d3ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3f0:	2206      	movs	r2, #6
 800d3f2:	f7f2 feed 	bl	80001d0 <memchr>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d03f      	beq.n	800d47a <_vfiprintf_r+0x20a>
 800d3fa:	4b26      	ldr	r3, [pc, #152]	@ (800d494 <_vfiprintf_r+0x224>)
 800d3fc:	bb1b      	cbnz	r3, 800d446 <_vfiprintf_r+0x1d6>
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	3307      	adds	r3, #7
 800d402:	f023 0307 	bic.w	r3, r3, #7
 800d406:	3308      	adds	r3, #8
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d40c:	443b      	add	r3, r7
 800d40e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d410:	e76a      	b.n	800d2e8 <_vfiprintf_r+0x78>
 800d412:	fb0c 3202 	mla	r2, ip, r2, r3
 800d416:	460c      	mov	r4, r1
 800d418:	2001      	movs	r0, #1
 800d41a:	e7a8      	b.n	800d36e <_vfiprintf_r+0xfe>
 800d41c:	2300      	movs	r3, #0
 800d41e:	3401      	adds	r4, #1
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	4619      	mov	r1, r3
 800d424:	f04f 0c0a 	mov.w	ip, #10
 800d428:	4620      	mov	r0, r4
 800d42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d42e:	3a30      	subs	r2, #48	@ 0x30
 800d430:	2a09      	cmp	r2, #9
 800d432:	d903      	bls.n	800d43c <_vfiprintf_r+0x1cc>
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0c6      	beq.n	800d3c6 <_vfiprintf_r+0x156>
 800d438:	9105      	str	r1, [sp, #20]
 800d43a:	e7c4      	b.n	800d3c6 <_vfiprintf_r+0x156>
 800d43c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d440:	4604      	mov	r4, r0
 800d442:	2301      	movs	r3, #1
 800d444:	e7f0      	b.n	800d428 <_vfiprintf_r+0x1b8>
 800d446:	ab03      	add	r3, sp, #12
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	462a      	mov	r2, r5
 800d44c:	4b12      	ldr	r3, [pc, #72]	@ (800d498 <_vfiprintf_r+0x228>)
 800d44e:	a904      	add	r1, sp, #16
 800d450:	4630      	mov	r0, r6
 800d452:	f3af 8000 	nop.w
 800d456:	4607      	mov	r7, r0
 800d458:	1c78      	adds	r0, r7, #1
 800d45a:	d1d6      	bne.n	800d40a <_vfiprintf_r+0x19a>
 800d45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d45e:	07d9      	lsls	r1, r3, #31
 800d460:	d405      	bmi.n	800d46e <_vfiprintf_r+0x1fe>
 800d462:	89ab      	ldrh	r3, [r5, #12]
 800d464:	059a      	lsls	r2, r3, #22
 800d466:	d402      	bmi.n	800d46e <_vfiprintf_r+0x1fe>
 800d468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d46a:	f7ff fd25 	bl	800ceb8 <__retarget_lock_release_recursive>
 800d46e:	89ab      	ldrh	r3, [r5, #12]
 800d470:	065b      	lsls	r3, r3, #25
 800d472:	f53f af1f 	bmi.w	800d2b4 <_vfiprintf_r+0x44>
 800d476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d478:	e71e      	b.n	800d2b8 <_vfiprintf_r+0x48>
 800d47a:	ab03      	add	r3, sp, #12
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	462a      	mov	r2, r5
 800d480:	4b05      	ldr	r3, [pc, #20]	@ (800d498 <_vfiprintf_r+0x228>)
 800d482:	a904      	add	r1, sp, #16
 800d484:	4630      	mov	r0, r6
 800d486:	f000 f879 	bl	800d57c <_printf_i>
 800d48a:	e7e4      	b.n	800d456 <_vfiprintf_r+0x1e6>
 800d48c:	0800e26c 	.word	0x0800e26c
 800d490:	0800e276 	.word	0x0800e276
 800d494:	00000000 	.word	0x00000000
 800d498:	0800d24b 	.word	0x0800d24b
 800d49c:	0800e272 	.word	0x0800e272

0800d4a0 <_printf_common>:
 800d4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a4:	4616      	mov	r6, r2
 800d4a6:	4698      	mov	r8, r3
 800d4a8:	688a      	ldr	r2, [r1, #8]
 800d4aa:	690b      	ldr	r3, [r1, #16]
 800d4ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	bfb8      	it	lt
 800d4b4:	4613      	movlt	r3, r2
 800d4b6:	6033      	str	r3, [r6, #0]
 800d4b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4bc:	4607      	mov	r7, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	b10a      	cbz	r2, 800d4c6 <_printf_common+0x26>
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	6033      	str	r3, [r6, #0]
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	0699      	lsls	r1, r3, #26
 800d4ca:	bf42      	ittt	mi
 800d4cc:	6833      	ldrmi	r3, [r6, #0]
 800d4ce:	3302      	addmi	r3, #2
 800d4d0:	6033      	strmi	r3, [r6, #0]
 800d4d2:	6825      	ldr	r5, [r4, #0]
 800d4d4:	f015 0506 	ands.w	r5, r5, #6
 800d4d8:	d106      	bne.n	800d4e8 <_printf_common+0x48>
 800d4da:	f104 0a19 	add.w	sl, r4, #25
 800d4de:	68e3      	ldr	r3, [r4, #12]
 800d4e0:	6832      	ldr	r2, [r6, #0]
 800d4e2:	1a9b      	subs	r3, r3, r2
 800d4e4:	42ab      	cmp	r3, r5
 800d4e6:	dc26      	bgt.n	800d536 <_printf_common+0x96>
 800d4e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4ec:	6822      	ldr	r2, [r4, #0]
 800d4ee:	3b00      	subs	r3, #0
 800d4f0:	bf18      	it	ne
 800d4f2:	2301      	movne	r3, #1
 800d4f4:	0692      	lsls	r2, r2, #26
 800d4f6:	d42b      	bmi.n	800d550 <_printf_common+0xb0>
 800d4f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4fc:	4641      	mov	r1, r8
 800d4fe:	4638      	mov	r0, r7
 800d500:	47c8      	blx	r9
 800d502:	3001      	adds	r0, #1
 800d504:	d01e      	beq.n	800d544 <_printf_common+0xa4>
 800d506:	6823      	ldr	r3, [r4, #0]
 800d508:	6922      	ldr	r2, [r4, #16]
 800d50a:	f003 0306 	and.w	r3, r3, #6
 800d50e:	2b04      	cmp	r3, #4
 800d510:	bf02      	ittt	eq
 800d512:	68e5      	ldreq	r5, [r4, #12]
 800d514:	6833      	ldreq	r3, [r6, #0]
 800d516:	1aed      	subeq	r5, r5, r3
 800d518:	68a3      	ldr	r3, [r4, #8]
 800d51a:	bf0c      	ite	eq
 800d51c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d520:	2500      	movne	r5, #0
 800d522:	4293      	cmp	r3, r2
 800d524:	bfc4      	itt	gt
 800d526:	1a9b      	subgt	r3, r3, r2
 800d528:	18ed      	addgt	r5, r5, r3
 800d52a:	2600      	movs	r6, #0
 800d52c:	341a      	adds	r4, #26
 800d52e:	42b5      	cmp	r5, r6
 800d530:	d11a      	bne.n	800d568 <_printf_common+0xc8>
 800d532:	2000      	movs	r0, #0
 800d534:	e008      	b.n	800d548 <_printf_common+0xa8>
 800d536:	2301      	movs	r3, #1
 800d538:	4652      	mov	r2, sl
 800d53a:	4641      	mov	r1, r8
 800d53c:	4638      	mov	r0, r7
 800d53e:	47c8      	blx	r9
 800d540:	3001      	adds	r0, #1
 800d542:	d103      	bne.n	800d54c <_printf_common+0xac>
 800d544:	f04f 30ff 	mov.w	r0, #4294967295
 800d548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d54c:	3501      	adds	r5, #1
 800d54e:	e7c6      	b.n	800d4de <_printf_common+0x3e>
 800d550:	18e1      	adds	r1, r4, r3
 800d552:	1c5a      	adds	r2, r3, #1
 800d554:	2030      	movs	r0, #48	@ 0x30
 800d556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d55a:	4422      	add	r2, r4
 800d55c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d564:	3302      	adds	r3, #2
 800d566:	e7c7      	b.n	800d4f8 <_printf_common+0x58>
 800d568:	2301      	movs	r3, #1
 800d56a:	4622      	mov	r2, r4
 800d56c:	4641      	mov	r1, r8
 800d56e:	4638      	mov	r0, r7
 800d570:	47c8      	blx	r9
 800d572:	3001      	adds	r0, #1
 800d574:	d0e6      	beq.n	800d544 <_printf_common+0xa4>
 800d576:	3601      	adds	r6, #1
 800d578:	e7d9      	b.n	800d52e <_printf_common+0x8e>
	...

0800d57c <_printf_i>:
 800d57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d580:	7e0f      	ldrb	r7, [r1, #24]
 800d582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d584:	2f78      	cmp	r7, #120	@ 0x78
 800d586:	4691      	mov	r9, r2
 800d588:	4680      	mov	r8, r0
 800d58a:	460c      	mov	r4, r1
 800d58c:	469a      	mov	sl, r3
 800d58e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d592:	d807      	bhi.n	800d5a4 <_printf_i+0x28>
 800d594:	2f62      	cmp	r7, #98	@ 0x62
 800d596:	d80a      	bhi.n	800d5ae <_printf_i+0x32>
 800d598:	2f00      	cmp	r7, #0
 800d59a:	f000 80d1 	beq.w	800d740 <_printf_i+0x1c4>
 800d59e:	2f58      	cmp	r7, #88	@ 0x58
 800d5a0:	f000 80b8 	beq.w	800d714 <_printf_i+0x198>
 800d5a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d5ac:	e03a      	b.n	800d624 <_printf_i+0xa8>
 800d5ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d5b2:	2b15      	cmp	r3, #21
 800d5b4:	d8f6      	bhi.n	800d5a4 <_printf_i+0x28>
 800d5b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d5bc <_printf_i+0x40>)
 800d5b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5bc:	0800d615 	.word	0x0800d615
 800d5c0:	0800d629 	.word	0x0800d629
 800d5c4:	0800d5a5 	.word	0x0800d5a5
 800d5c8:	0800d5a5 	.word	0x0800d5a5
 800d5cc:	0800d5a5 	.word	0x0800d5a5
 800d5d0:	0800d5a5 	.word	0x0800d5a5
 800d5d4:	0800d629 	.word	0x0800d629
 800d5d8:	0800d5a5 	.word	0x0800d5a5
 800d5dc:	0800d5a5 	.word	0x0800d5a5
 800d5e0:	0800d5a5 	.word	0x0800d5a5
 800d5e4:	0800d5a5 	.word	0x0800d5a5
 800d5e8:	0800d727 	.word	0x0800d727
 800d5ec:	0800d653 	.word	0x0800d653
 800d5f0:	0800d6e1 	.word	0x0800d6e1
 800d5f4:	0800d5a5 	.word	0x0800d5a5
 800d5f8:	0800d5a5 	.word	0x0800d5a5
 800d5fc:	0800d749 	.word	0x0800d749
 800d600:	0800d5a5 	.word	0x0800d5a5
 800d604:	0800d653 	.word	0x0800d653
 800d608:	0800d5a5 	.word	0x0800d5a5
 800d60c:	0800d5a5 	.word	0x0800d5a5
 800d610:	0800d6e9 	.word	0x0800d6e9
 800d614:	6833      	ldr	r3, [r6, #0]
 800d616:	1d1a      	adds	r2, r3, #4
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	6032      	str	r2, [r6, #0]
 800d61c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d624:	2301      	movs	r3, #1
 800d626:	e09c      	b.n	800d762 <_printf_i+0x1e6>
 800d628:	6833      	ldr	r3, [r6, #0]
 800d62a:	6820      	ldr	r0, [r4, #0]
 800d62c:	1d19      	adds	r1, r3, #4
 800d62e:	6031      	str	r1, [r6, #0]
 800d630:	0606      	lsls	r6, r0, #24
 800d632:	d501      	bpl.n	800d638 <_printf_i+0xbc>
 800d634:	681d      	ldr	r5, [r3, #0]
 800d636:	e003      	b.n	800d640 <_printf_i+0xc4>
 800d638:	0645      	lsls	r5, r0, #25
 800d63a:	d5fb      	bpl.n	800d634 <_printf_i+0xb8>
 800d63c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d640:	2d00      	cmp	r5, #0
 800d642:	da03      	bge.n	800d64c <_printf_i+0xd0>
 800d644:	232d      	movs	r3, #45	@ 0x2d
 800d646:	426d      	negs	r5, r5
 800d648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d64c:	4858      	ldr	r0, [pc, #352]	@ (800d7b0 <_printf_i+0x234>)
 800d64e:	230a      	movs	r3, #10
 800d650:	e011      	b.n	800d676 <_printf_i+0xfa>
 800d652:	6821      	ldr	r1, [r4, #0]
 800d654:	6833      	ldr	r3, [r6, #0]
 800d656:	0608      	lsls	r0, r1, #24
 800d658:	f853 5b04 	ldr.w	r5, [r3], #4
 800d65c:	d402      	bmi.n	800d664 <_printf_i+0xe8>
 800d65e:	0649      	lsls	r1, r1, #25
 800d660:	bf48      	it	mi
 800d662:	b2ad      	uxthmi	r5, r5
 800d664:	2f6f      	cmp	r7, #111	@ 0x6f
 800d666:	4852      	ldr	r0, [pc, #328]	@ (800d7b0 <_printf_i+0x234>)
 800d668:	6033      	str	r3, [r6, #0]
 800d66a:	bf14      	ite	ne
 800d66c:	230a      	movne	r3, #10
 800d66e:	2308      	moveq	r3, #8
 800d670:	2100      	movs	r1, #0
 800d672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d676:	6866      	ldr	r6, [r4, #4]
 800d678:	60a6      	str	r6, [r4, #8]
 800d67a:	2e00      	cmp	r6, #0
 800d67c:	db05      	blt.n	800d68a <_printf_i+0x10e>
 800d67e:	6821      	ldr	r1, [r4, #0]
 800d680:	432e      	orrs	r6, r5
 800d682:	f021 0104 	bic.w	r1, r1, #4
 800d686:	6021      	str	r1, [r4, #0]
 800d688:	d04b      	beq.n	800d722 <_printf_i+0x1a6>
 800d68a:	4616      	mov	r6, r2
 800d68c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d690:	fb03 5711 	mls	r7, r3, r1, r5
 800d694:	5dc7      	ldrb	r7, [r0, r7]
 800d696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d69a:	462f      	mov	r7, r5
 800d69c:	42bb      	cmp	r3, r7
 800d69e:	460d      	mov	r5, r1
 800d6a0:	d9f4      	bls.n	800d68c <_printf_i+0x110>
 800d6a2:	2b08      	cmp	r3, #8
 800d6a4:	d10b      	bne.n	800d6be <_printf_i+0x142>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	07df      	lsls	r7, r3, #31
 800d6aa:	d508      	bpl.n	800d6be <_printf_i+0x142>
 800d6ac:	6923      	ldr	r3, [r4, #16]
 800d6ae:	6861      	ldr	r1, [r4, #4]
 800d6b0:	4299      	cmp	r1, r3
 800d6b2:	bfde      	ittt	le
 800d6b4:	2330      	movle	r3, #48	@ 0x30
 800d6b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6be:	1b92      	subs	r2, r2, r6
 800d6c0:	6122      	str	r2, [r4, #16]
 800d6c2:	f8cd a000 	str.w	sl, [sp]
 800d6c6:	464b      	mov	r3, r9
 800d6c8:	aa03      	add	r2, sp, #12
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	f7ff fee7 	bl	800d4a0 <_printf_common>
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	d14a      	bne.n	800d76c <_printf_i+0x1f0>
 800d6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6da:	b004      	add	sp, #16
 800d6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	f043 0320 	orr.w	r3, r3, #32
 800d6e6:	6023      	str	r3, [r4, #0]
 800d6e8:	4832      	ldr	r0, [pc, #200]	@ (800d7b4 <_printf_i+0x238>)
 800d6ea:	2778      	movs	r7, #120	@ 0x78
 800d6ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	6831      	ldr	r1, [r6, #0]
 800d6f4:	061f      	lsls	r7, r3, #24
 800d6f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6fa:	d402      	bmi.n	800d702 <_printf_i+0x186>
 800d6fc:	065f      	lsls	r7, r3, #25
 800d6fe:	bf48      	it	mi
 800d700:	b2ad      	uxthmi	r5, r5
 800d702:	6031      	str	r1, [r6, #0]
 800d704:	07d9      	lsls	r1, r3, #31
 800d706:	bf44      	itt	mi
 800d708:	f043 0320 	orrmi.w	r3, r3, #32
 800d70c:	6023      	strmi	r3, [r4, #0]
 800d70e:	b11d      	cbz	r5, 800d718 <_printf_i+0x19c>
 800d710:	2310      	movs	r3, #16
 800d712:	e7ad      	b.n	800d670 <_printf_i+0xf4>
 800d714:	4826      	ldr	r0, [pc, #152]	@ (800d7b0 <_printf_i+0x234>)
 800d716:	e7e9      	b.n	800d6ec <_printf_i+0x170>
 800d718:	6823      	ldr	r3, [r4, #0]
 800d71a:	f023 0320 	bic.w	r3, r3, #32
 800d71e:	6023      	str	r3, [r4, #0]
 800d720:	e7f6      	b.n	800d710 <_printf_i+0x194>
 800d722:	4616      	mov	r6, r2
 800d724:	e7bd      	b.n	800d6a2 <_printf_i+0x126>
 800d726:	6833      	ldr	r3, [r6, #0]
 800d728:	6825      	ldr	r5, [r4, #0]
 800d72a:	6961      	ldr	r1, [r4, #20]
 800d72c:	1d18      	adds	r0, r3, #4
 800d72e:	6030      	str	r0, [r6, #0]
 800d730:	062e      	lsls	r6, r5, #24
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	d501      	bpl.n	800d73a <_printf_i+0x1be>
 800d736:	6019      	str	r1, [r3, #0]
 800d738:	e002      	b.n	800d740 <_printf_i+0x1c4>
 800d73a:	0668      	lsls	r0, r5, #25
 800d73c:	d5fb      	bpl.n	800d736 <_printf_i+0x1ba>
 800d73e:	8019      	strh	r1, [r3, #0]
 800d740:	2300      	movs	r3, #0
 800d742:	6123      	str	r3, [r4, #16]
 800d744:	4616      	mov	r6, r2
 800d746:	e7bc      	b.n	800d6c2 <_printf_i+0x146>
 800d748:	6833      	ldr	r3, [r6, #0]
 800d74a:	1d1a      	adds	r2, r3, #4
 800d74c:	6032      	str	r2, [r6, #0]
 800d74e:	681e      	ldr	r6, [r3, #0]
 800d750:	6862      	ldr	r2, [r4, #4]
 800d752:	2100      	movs	r1, #0
 800d754:	4630      	mov	r0, r6
 800d756:	f7f2 fd3b 	bl	80001d0 <memchr>
 800d75a:	b108      	cbz	r0, 800d760 <_printf_i+0x1e4>
 800d75c:	1b80      	subs	r0, r0, r6
 800d75e:	6060      	str	r0, [r4, #4]
 800d760:	6863      	ldr	r3, [r4, #4]
 800d762:	6123      	str	r3, [r4, #16]
 800d764:	2300      	movs	r3, #0
 800d766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d76a:	e7aa      	b.n	800d6c2 <_printf_i+0x146>
 800d76c:	6923      	ldr	r3, [r4, #16]
 800d76e:	4632      	mov	r2, r6
 800d770:	4649      	mov	r1, r9
 800d772:	4640      	mov	r0, r8
 800d774:	47d0      	blx	sl
 800d776:	3001      	adds	r0, #1
 800d778:	d0ad      	beq.n	800d6d6 <_printf_i+0x15a>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	079b      	lsls	r3, r3, #30
 800d77e:	d413      	bmi.n	800d7a8 <_printf_i+0x22c>
 800d780:	68e0      	ldr	r0, [r4, #12]
 800d782:	9b03      	ldr	r3, [sp, #12]
 800d784:	4298      	cmp	r0, r3
 800d786:	bfb8      	it	lt
 800d788:	4618      	movlt	r0, r3
 800d78a:	e7a6      	b.n	800d6da <_printf_i+0x15e>
 800d78c:	2301      	movs	r3, #1
 800d78e:	4632      	mov	r2, r6
 800d790:	4649      	mov	r1, r9
 800d792:	4640      	mov	r0, r8
 800d794:	47d0      	blx	sl
 800d796:	3001      	adds	r0, #1
 800d798:	d09d      	beq.n	800d6d6 <_printf_i+0x15a>
 800d79a:	3501      	adds	r5, #1
 800d79c:	68e3      	ldr	r3, [r4, #12]
 800d79e:	9903      	ldr	r1, [sp, #12]
 800d7a0:	1a5b      	subs	r3, r3, r1
 800d7a2:	42ab      	cmp	r3, r5
 800d7a4:	dcf2      	bgt.n	800d78c <_printf_i+0x210>
 800d7a6:	e7eb      	b.n	800d780 <_printf_i+0x204>
 800d7a8:	2500      	movs	r5, #0
 800d7aa:	f104 0619 	add.w	r6, r4, #25
 800d7ae:	e7f5      	b.n	800d79c <_printf_i+0x220>
 800d7b0:	0800e27d 	.word	0x0800e27d
 800d7b4:	0800e28e 	.word	0x0800e28e

0800d7b8 <__sflush_r>:
 800d7b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c0:	0716      	lsls	r6, r2, #28
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	d454      	bmi.n	800d872 <__sflush_r+0xba>
 800d7c8:	684b      	ldr	r3, [r1, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	dc02      	bgt.n	800d7d4 <__sflush_r+0x1c>
 800d7ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	dd48      	ble.n	800d866 <__sflush_r+0xae>
 800d7d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7d6:	2e00      	cmp	r6, #0
 800d7d8:	d045      	beq.n	800d866 <__sflush_r+0xae>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7e0:	682f      	ldr	r7, [r5, #0]
 800d7e2:	6a21      	ldr	r1, [r4, #32]
 800d7e4:	602b      	str	r3, [r5, #0]
 800d7e6:	d030      	beq.n	800d84a <__sflush_r+0x92>
 800d7e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7ea:	89a3      	ldrh	r3, [r4, #12]
 800d7ec:	0759      	lsls	r1, r3, #29
 800d7ee:	d505      	bpl.n	800d7fc <__sflush_r+0x44>
 800d7f0:	6863      	ldr	r3, [r4, #4]
 800d7f2:	1ad2      	subs	r2, r2, r3
 800d7f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7f6:	b10b      	cbz	r3, 800d7fc <__sflush_r+0x44>
 800d7f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7fa:	1ad2      	subs	r2, r2, r3
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d800:	6a21      	ldr	r1, [r4, #32]
 800d802:	4628      	mov	r0, r5
 800d804:	47b0      	blx	r6
 800d806:	1c43      	adds	r3, r0, #1
 800d808:	89a3      	ldrh	r3, [r4, #12]
 800d80a:	d106      	bne.n	800d81a <__sflush_r+0x62>
 800d80c:	6829      	ldr	r1, [r5, #0]
 800d80e:	291d      	cmp	r1, #29
 800d810:	d82b      	bhi.n	800d86a <__sflush_r+0xb2>
 800d812:	4a2a      	ldr	r2, [pc, #168]	@ (800d8bc <__sflush_r+0x104>)
 800d814:	40ca      	lsrs	r2, r1
 800d816:	07d6      	lsls	r6, r2, #31
 800d818:	d527      	bpl.n	800d86a <__sflush_r+0xb2>
 800d81a:	2200      	movs	r2, #0
 800d81c:	6062      	str	r2, [r4, #4]
 800d81e:	04d9      	lsls	r1, r3, #19
 800d820:	6922      	ldr	r2, [r4, #16]
 800d822:	6022      	str	r2, [r4, #0]
 800d824:	d504      	bpl.n	800d830 <__sflush_r+0x78>
 800d826:	1c42      	adds	r2, r0, #1
 800d828:	d101      	bne.n	800d82e <__sflush_r+0x76>
 800d82a:	682b      	ldr	r3, [r5, #0]
 800d82c:	b903      	cbnz	r3, 800d830 <__sflush_r+0x78>
 800d82e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d832:	602f      	str	r7, [r5, #0]
 800d834:	b1b9      	cbz	r1, 800d866 <__sflush_r+0xae>
 800d836:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d83a:	4299      	cmp	r1, r3
 800d83c:	d002      	beq.n	800d844 <__sflush_r+0x8c>
 800d83e:	4628      	mov	r0, r5
 800d840:	f7ff fb4a 	bl	800ced8 <_free_r>
 800d844:	2300      	movs	r3, #0
 800d846:	6363      	str	r3, [r4, #52]	@ 0x34
 800d848:	e00d      	b.n	800d866 <__sflush_r+0xae>
 800d84a:	2301      	movs	r3, #1
 800d84c:	4628      	mov	r0, r5
 800d84e:	47b0      	blx	r6
 800d850:	4602      	mov	r2, r0
 800d852:	1c50      	adds	r0, r2, #1
 800d854:	d1c9      	bne.n	800d7ea <__sflush_r+0x32>
 800d856:	682b      	ldr	r3, [r5, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d0c6      	beq.n	800d7ea <__sflush_r+0x32>
 800d85c:	2b1d      	cmp	r3, #29
 800d85e:	d001      	beq.n	800d864 <__sflush_r+0xac>
 800d860:	2b16      	cmp	r3, #22
 800d862:	d11e      	bne.n	800d8a2 <__sflush_r+0xea>
 800d864:	602f      	str	r7, [r5, #0]
 800d866:	2000      	movs	r0, #0
 800d868:	e022      	b.n	800d8b0 <__sflush_r+0xf8>
 800d86a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d86e:	b21b      	sxth	r3, r3
 800d870:	e01b      	b.n	800d8aa <__sflush_r+0xf2>
 800d872:	690f      	ldr	r7, [r1, #16]
 800d874:	2f00      	cmp	r7, #0
 800d876:	d0f6      	beq.n	800d866 <__sflush_r+0xae>
 800d878:	0793      	lsls	r3, r2, #30
 800d87a:	680e      	ldr	r6, [r1, #0]
 800d87c:	bf08      	it	eq
 800d87e:	694b      	ldreq	r3, [r1, #20]
 800d880:	600f      	str	r7, [r1, #0]
 800d882:	bf18      	it	ne
 800d884:	2300      	movne	r3, #0
 800d886:	eba6 0807 	sub.w	r8, r6, r7
 800d88a:	608b      	str	r3, [r1, #8]
 800d88c:	f1b8 0f00 	cmp.w	r8, #0
 800d890:	dde9      	ble.n	800d866 <__sflush_r+0xae>
 800d892:	6a21      	ldr	r1, [r4, #32]
 800d894:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d896:	4643      	mov	r3, r8
 800d898:	463a      	mov	r2, r7
 800d89a:	4628      	mov	r0, r5
 800d89c:	47b0      	blx	r6
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	dc08      	bgt.n	800d8b4 <__sflush_r+0xfc>
 800d8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8aa:	81a3      	strh	r3, [r4, #12]
 800d8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b4:	4407      	add	r7, r0
 800d8b6:	eba8 0800 	sub.w	r8, r8, r0
 800d8ba:	e7e7      	b.n	800d88c <__sflush_r+0xd4>
 800d8bc:	20400001 	.word	0x20400001

0800d8c0 <_fflush_r>:
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	690b      	ldr	r3, [r1, #16]
 800d8c4:	4605      	mov	r5, r0
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	b913      	cbnz	r3, 800d8d0 <_fflush_r+0x10>
 800d8ca:	2500      	movs	r5, #0
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	bd38      	pop	{r3, r4, r5, pc}
 800d8d0:	b118      	cbz	r0, 800d8da <_fflush_r+0x1a>
 800d8d2:	6a03      	ldr	r3, [r0, #32]
 800d8d4:	b90b      	cbnz	r3, 800d8da <_fflush_r+0x1a>
 800d8d6:	f7ff f8e9 	bl	800caac <__sinit>
 800d8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d0f3      	beq.n	800d8ca <_fflush_r+0xa>
 800d8e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8e4:	07d0      	lsls	r0, r2, #31
 800d8e6:	d404      	bmi.n	800d8f2 <_fflush_r+0x32>
 800d8e8:	0599      	lsls	r1, r3, #22
 800d8ea:	d402      	bmi.n	800d8f2 <_fflush_r+0x32>
 800d8ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ee:	f7ff fae2 	bl	800ceb6 <__retarget_lock_acquire_recursive>
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	f7ff ff5f 	bl	800d7b8 <__sflush_r>
 800d8fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8fc:	07da      	lsls	r2, r3, #31
 800d8fe:	4605      	mov	r5, r0
 800d900:	d4e4      	bmi.n	800d8cc <_fflush_r+0xc>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	059b      	lsls	r3, r3, #22
 800d906:	d4e1      	bmi.n	800d8cc <_fflush_r+0xc>
 800d908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d90a:	f7ff fad5 	bl	800ceb8 <__retarget_lock_release_recursive>
 800d90e:	e7dd      	b.n	800d8cc <_fflush_r+0xc>

0800d910 <__swhatbuf_r>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	460c      	mov	r4, r1
 800d914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d918:	2900      	cmp	r1, #0
 800d91a:	b096      	sub	sp, #88	@ 0x58
 800d91c:	4615      	mov	r5, r2
 800d91e:	461e      	mov	r6, r3
 800d920:	da0d      	bge.n	800d93e <__swhatbuf_r+0x2e>
 800d922:	89a3      	ldrh	r3, [r4, #12]
 800d924:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d928:	f04f 0100 	mov.w	r1, #0
 800d92c:	bf14      	ite	ne
 800d92e:	2340      	movne	r3, #64	@ 0x40
 800d930:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d934:	2000      	movs	r0, #0
 800d936:	6031      	str	r1, [r6, #0]
 800d938:	602b      	str	r3, [r5, #0]
 800d93a:	b016      	add	sp, #88	@ 0x58
 800d93c:	bd70      	pop	{r4, r5, r6, pc}
 800d93e:	466a      	mov	r2, sp
 800d940:	f000 f8f6 	bl	800db30 <_fstat_r>
 800d944:	2800      	cmp	r0, #0
 800d946:	dbec      	blt.n	800d922 <__swhatbuf_r+0x12>
 800d948:	9901      	ldr	r1, [sp, #4]
 800d94a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d94e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d952:	4259      	negs	r1, r3
 800d954:	4159      	adcs	r1, r3
 800d956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d95a:	e7eb      	b.n	800d934 <__swhatbuf_r+0x24>

0800d95c <__smakebuf_r>:
 800d95c:	898b      	ldrh	r3, [r1, #12]
 800d95e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d960:	079d      	lsls	r5, r3, #30
 800d962:	4606      	mov	r6, r0
 800d964:	460c      	mov	r4, r1
 800d966:	d507      	bpl.n	800d978 <__smakebuf_r+0x1c>
 800d968:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d96c:	6023      	str	r3, [r4, #0]
 800d96e:	6123      	str	r3, [r4, #16]
 800d970:	2301      	movs	r3, #1
 800d972:	6163      	str	r3, [r4, #20]
 800d974:	b003      	add	sp, #12
 800d976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d978:	ab01      	add	r3, sp, #4
 800d97a:	466a      	mov	r2, sp
 800d97c:	f7ff ffc8 	bl	800d910 <__swhatbuf_r>
 800d980:	9f00      	ldr	r7, [sp, #0]
 800d982:	4605      	mov	r5, r0
 800d984:	4639      	mov	r1, r7
 800d986:	4630      	mov	r0, r6
 800d988:	f7fe ff78 	bl	800c87c <_malloc_r>
 800d98c:	b948      	cbnz	r0, 800d9a2 <__smakebuf_r+0x46>
 800d98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d992:	059a      	lsls	r2, r3, #22
 800d994:	d4ee      	bmi.n	800d974 <__smakebuf_r+0x18>
 800d996:	f023 0303 	bic.w	r3, r3, #3
 800d99a:	f043 0302 	orr.w	r3, r3, #2
 800d99e:	81a3      	strh	r3, [r4, #12]
 800d9a0:	e7e2      	b.n	800d968 <__smakebuf_r+0xc>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	6020      	str	r0, [r4, #0]
 800d9a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9aa:	81a3      	strh	r3, [r4, #12]
 800d9ac:	9b01      	ldr	r3, [sp, #4]
 800d9ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d9b2:	b15b      	cbz	r3, 800d9cc <__smakebuf_r+0x70>
 800d9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f000 f8cb 	bl	800db54 <_isatty_r>
 800d9be:	b128      	cbz	r0, 800d9cc <__smakebuf_r+0x70>
 800d9c0:	89a3      	ldrh	r3, [r4, #12]
 800d9c2:	f023 0303 	bic.w	r3, r3, #3
 800d9c6:	f043 0301 	orr.w	r3, r3, #1
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	431d      	orrs	r5, r3
 800d9d0:	81a5      	strh	r5, [r4, #12]
 800d9d2:	e7cf      	b.n	800d974 <__smakebuf_r+0x18>

0800d9d4 <__swbuf_r>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	460e      	mov	r6, r1
 800d9d8:	4614      	mov	r4, r2
 800d9da:	4605      	mov	r5, r0
 800d9dc:	b118      	cbz	r0, 800d9e6 <__swbuf_r+0x12>
 800d9de:	6a03      	ldr	r3, [r0, #32]
 800d9e0:	b90b      	cbnz	r3, 800d9e6 <__swbuf_r+0x12>
 800d9e2:	f7ff f863 	bl	800caac <__sinit>
 800d9e6:	69a3      	ldr	r3, [r4, #24]
 800d9e8:	60a3      	str	r3, [r4, #8]
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	071a      	lsls	r2, r3, #28
 800d9ee:	d501      	bpl.n	800d9f4 <__swbuf_r+0x20>
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	b943      	cbnz	r3, 800da06 <__swbuf_r+0x32>
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f000 f82a 	bl	800da50 <__swsetup_r>
 800d9fc:	b118      	cbz	r0, 800da06 <__swbuf_r+0x32>
 800d9fe:	f04f 37ff 	mov.w	r7, #4294967295
 800da02:	4638      	mov	r0, r7
 800da04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	6922      	ldr	r2, [r4, #16]
 800da0a:	1a98      	subs	r0, r3, r2
 800da0c:	6963      	ldr	r3, [r4, #20]
 800da0e:	b2f6      	uxtb	r6, r6
 800da10:	4283      	cmp	r3, r0
 800da12:	4637      	mov	r7, r6
 800da14:	dc05      	bgt.n	800da22 <__swbuf_r+0x4e>
 800da16:	4621      	mov	r1, r4
 800da18:	4628      	mov	r0, r5
 800da1a:	f7ff ff51 	bl	800d8c0 <_fflush_r>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d1ed      	bne.n	800d9fe <__swbuf_r+0x2a>
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	3b01      	subs	r3, #1
 800da26:	60a3      	str	r3, [r4, #8]
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	6022      	str	r2, [r4, #0]
 800da2e:	701e      	strb	r6, [r3, #0]
 800da30:	6962      	ldr	r2, [r4, #20]
 800da32:	1c43      	adds	r3, r0, #1
 800da34:	429a      	cmp	r2, r3
 800da36:	d004      	beq.n	800da42 <__swbuf_r+0x6e>
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	07db      	lsls	r3, r3, #31
 800da3c:	d5e1      	bpl.n	800da02 <__swbuf_r+0x2e>
 800da3e:	2e0a      	cmp	r6, #10
 800da40:	d1df      	bne.n	800da02 <__swbuf_r+0x2e>
 800da42:	4621      	mov	r1, r4
 800da44:	4628      	mov	r0, r5
 800da46:	f7ff ff3b 	bl	800d8c0 <_fflush_r>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d0d9      	beq.n	800da02 <__swbuf_r+0x2e>
 800da4e:	e7d6      	b.n	800d9fe <__swbuf_r+0x2a>

0800da50 <__swsetup_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4b29      	ldr	r3, [pc, #164]	@ (800daf8 <__swsetup_r+0xa8>)
 800da54:	4605      	mov	r5, r0
 800da56:	6818      	ldr	r0, [r3, #0]
 800da58:	460c      	mov	r4, r1
 800da5a:	b118      	cbz	r0, 800da64 <__swsetup_r+0x14>
 800da5c:	6a03      	ldr	r3, [r0, #32]
 800da5e:	b90b      	cbnz	r3, 800da64 <__swsetup_r+0x14>
 800da60:	f7ff f824 	bl	800caac <__sinit>
 800da64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da68:	0719      	lsls	r1, r3, #28
 800da6a:	d422      	bmi.n	800dab2 <__swsetup_r+0x62>
 800da6c:	06da      	lsls	r2, r3, #27
 800da6e:	d407      	bmi.n	800da80 <__swsetup_r+0x30>
 800da70:	2209      	movs	r2, #9
 800da72:	602a      	str	r2, [r5, #0]
 800da74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	f04f 30ff 	mov.w	r0, #4294967295
 800da7e:	e033      	b.n	800dae8 <__swsetup_r+0x98>
 800da80:	0758      	lsls	r0, r3, #29
 800da82:	d512      	bpl.n	800daaa <__swsetup_r+0x5a>
 800da84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da86:	b141      	cbz	r1, 800da9a <__swsetup_r+0x4a>
 800da88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da8c:	4299      	cmp	r1, r3
 800da8e:	d002      	beq.n	800da96 <__swsetup_r+0x46>
 800da90:	4628      	mov	r0, r5
 800da92:	f7ff fa21 	bl	800ced8 <_free_r>
 800da96:	2300      	movs	r3, #0
 800da98:	6363      	str	r3, [r4, #52]	@ 0x34
 800da9a:	89a3      	ldrh	r3, [r4, #12]
 800da9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	2300      	movs	r3, #0
 800daa4:	6063      	str	r3, [r4, #4]
 800daa6:	6923      	ldr	r3, [r4, #16]
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	f043 0308 	orr.w	r3, r3, #8
 800dab0:	81a3      	strh	r3, [r4, #12]
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	b94b      	cbnz	r3, 800daca <__swsetup_r+0x7a>
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dabc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dac0:	d003      	beq.n	800daca <__swsetup_r+0x7a>
 800dac2:	4621      	mov	r1, r4
 800dac4:	4628      	mov	r0, r5
 800dac6:	f7ff ff49 	bl	800d95c <__smakebuf_r>
 800daca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dace:	f013 0201 	ands.w	r2, r3, #1
 800dad2:	d00a      	beq.n	800daea <__swsetup_r+0x9a>
 800dad4:	2200      	movs	r2, #0
 800dad6:	60a2      	str	r2, [r4, #8]
 800dad8:	6962      	ldr	r2, [r4, #20]
 800dada:	4252      	negs	r2, r2
 800dadc:	61a2      	str	r2, [r4, #24]
 800dade:	6922      	ldr	r2, [r4, #16]
 800dae0:	b942      	cbnz	r2, 800daf4 <__swsetup_r+0xa4>
 800dae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dae6:	d1c5      	bne.n	800da74 <__swsetup_r+0x24>
 800dae8:	bd38      	pop	{r3, r4, r5, pc}
 800daea:	0799      	lsls	r1, r3, #30
 800daec:	bf58      	it	pl
 800daee:	6962      	ldrpl	r2, [r4, #20]
 800daf0:	60a2      	str	r2, [r4, #8]
 800daf2:	e7f4      	b.n	800dade <__swsetup_r+0x8e>
 800daf4:	2000      	movs	r0, #0
 800daf6:	e7f7      	b.n	800dae8 <__swsetup_r+0x98>
 800daf8:	20000028 	.word	0x20000028

0800dafc <memmove>:
 800dafc:	4288      	cmp	r0, r1
 800dafe:	b510      	push	{r4, lr}
 800db00:	eb01 0402 	add.w	r4, r1, r2
 800db04:	d902      	bls.n	800db0c <memmove+0x10>
 800db06:	4284      	cmp	r4, r0
 800db08:	4623      	mov	r3, r4
 800db0a:	d807      	bhi.n	800db1c <memmove+0x20>
 800db0c:	1e43      	subs	r3, r0, #1
 800db0e:	42a1      	cmp	r1, r4
 800db10:	d008      	beq.n	800db24 <memmove+0x28>
 800db12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db1a:	e7f8      	b.n	800db0e <memmove+0x12>
 800db1c:	4402      	add	r2, r0
 800db1e:	4601      	mov	r1, r0
 800db20:	428a      	cmp	r2, r1
 800db22:	d100      	bne.n	800db26 <memmove+0x2a>
 800db24:	bd10      	pop	{r4, pc}
 800db26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db2e:	e7f7      	b.n	800db20 <memmove+0x24>

0800db30 <_fstat_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4d07      	ldr	r5, [pc, #28]	@ (800db50 <_fstat_r+0x20>)
 800db34:	2300      	movs	r3, #0
 800db36:	4604      	mov	r4, r0
 800db38:	4608      	mov	r0, r1
 800db3a:	4611      	mov	r1, r2
 800db3c:	602b      	str	r3, [r5, #0]
 800db3e:	f7f6 facb 	bl	80040d8 <_fstat>
 800db42:	1c43      	adds	r3, r0, #1
 800db44:	d102      	bne.n	800db4c <_fstat_r+0x1c>
 800db46:	682b      	ldr	r3, [r5, #0]
 800db48:	b103      	cbz	r3, 800db4c <_fstat_r+0x1c>
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	bd38      	pop	{r3, r4, r5, pc}
 800db4e:	bf00      	nop
 800db50:	20000828 	.word	0x20000828

0800db54 <_isatty_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	4d06      	ldr	r5, [pc, #24]	@ (800db70 <_isatty_r+0x1c>)
 800db58:	2300      	movs	r3, #0
 800db5a:	4604      	mov	r4, r0
 800db5c:	4608      	mov	r0, r1
 800db5e:	602b      	str	r3, [r5, #0]
 800db60:	f7f6 faca 	bl	80040f8 <_isatty>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d102      	bne.n	800db6e <_isatty_r+0x1a>
 800db68:	682b      	ldr	r3, [r5, #0]
 800db6a:	b103      	cbz	r3, 800db6e <_isatty_r+0x1a>
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
 800db70:	20000828 	.word	0x20000828

0800db74 <_realloc_r>:
 800db74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db78:	4607      	mov	r7, r0
 800db7a:	4614      	mov	r4, r2
 800db7c:	460d      	mov	r5, r1
 800db7e:	b921      	cbnz	r1, 800db8a <_realloc_r+0x16>
 800db80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db84:	4611      	mov	r1, r2
 800db86:	f7fe be79 	b.w	800c87c <_malloc_r>
 800db8a:	b92a      	cbnz	r2, 800db98 <_realloc_r+0x24>
 800db8c:	f7ff f9a4 	bl	800ced8 <_free_r>
 800db90:	4625      	mov	r5, r4
 800db92:	4628      	mov	r0, r5
 800db94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db98:	f000 f81a 	bl	800dbd0 <_malloc_usable_size_r>
 800db9c:	4284      	cmp	r4, r0
 800db9e:	4606      	mov	r6, r0
 800dba0:	d802      	bhi.n	800dba8 <_realloc_r+0x34>
 800dba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dba6:	d8f4      	bhi.n	800db92 <_realloc_r+0x1e>
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4638      	mov	r0, r7
 800dbac:	f7fe fe66 	bl	800c87c <_malloc_r>
 800dbb0:	4680      	mov	r8, r0
 800dbb2:	b908      	cbnz	r0, 800dbb8 <_realloc_r+0x44>
 800dbb4:	4645      	mov	r5, r8
 800dbb6:	e7ec      	b.n	800db92 <_realloc_r+0x1e>
 800dbb8:	42b4      	cmp	r4, r6
 800dbba:	4622      	mov	r2, r4
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	bf28      	it	cs
 800dbc0:	4632      	movcs	r2, r6
 800dbc2:	f7ff f97a 	bl	800ceba <memcpy>
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f7ff f985 	bl	800ced8 <_free_r>
 800dbce:	e7f1      	b.n	800dbb4 <_realloc_r+0x40>

0800dbd0 <_malloc_usable_size_r>:
 800dbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbd4:	1f18      	subs	r0, r3, #4
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	bfbc      	itt	lt
 800dbda:	580b      	ldrlt	r3, [r1, r0]
 800dbdc:	18c0      	addlt	r0, r0, r3
 800dbde:	4770      	bx	lr

0800dbe0 <_init>:
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe2:	bf00      	nop
 800dbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbe6:	bc08      	pop	{r3}
 800dbe8:	469e      	mov	lr, r3
 800dbea:	4770      	bx	lr

0800dbec <_fini>:
 800dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbee:	bf00      	nop
 800dbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbf2:	bc08      	pop	{r3}
 800dbf4:	469e      	mov	lr, r3
 800dbf6:	4770      	bx	lr
