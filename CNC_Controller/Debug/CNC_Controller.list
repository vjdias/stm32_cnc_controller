
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c010  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800c1a0  0800c1a0  0000d1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7bc  0800c7bc  0000e078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c7bc  0800c7bc  0000d7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c4  0800c7c4  0000e078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c4  0800c7c4  0000d7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7c8  0800c7c8  0000d7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800c7cc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d10  20000078  0800c844  0000e078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d88  0800c844  0000ed88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a129  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043e5  00000000  00000000  000281d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0002c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b6  00000000  00000000  0002dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b68  00000000  00000000  0002ee86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021502  00000000  00000000  000579ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f70c7  00000000  00000000  00078ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016ffb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006648  00000000  00000000  0016fffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00176644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c188 	.word	0x0800c188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800c188 	.word	0x0800c188

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4613      	mov	r3, r2
 80005b0:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d011      	beq.n	80005dc <has_header_tail+0x40>
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d90e      	bls.n	80005dc <has_header_tail+0x40>
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d109      	bne.n	80005dc <has_header_tail+0x40>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d101      	bne.n	80005dc <has_header_tail+0x40>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <has_header_tail+0x42>
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <be16_read>:

// Leituras/escritas big-endian (formato no fio)
static inline uint16_t be16_read(const uint8_t *p) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d003      	beq.n	8000634 <frame_expect_req+0x1e>
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d202      	bcs.n	800063a <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	e012      	b.n	8000660 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	22aa      	movs	r2, #170	@ 0xaa
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ffab 	bl	800059c <has_header_tail>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d002      	beq.n	800065e <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000658:	f06f 0301 	mvn.w	r3, #1
 800065c:	e000      	b.n	8000660 <frame_expect_req+0x4a>
	return PROTO_OK;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <led_ctrl_req_decoder+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	e02a      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b2a      	cmp	r3, #42	@ 0x2a
 800068a:	d902      	bls.n	8000692 <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 800068c:	f06f 0303 	mvn.w	r3, #3
 8000690:	e024      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 8000692:	2309      	movs	r3, #9
 8000694:	2207      	movs	r2, #7
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff ffbc 	bl	8000616 <frame_expect_req>
 800069e:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <led_ctrl_req_decoder+0x42>
        return st;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	e018      	b.n	80006dc <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3303      	adds	r3, #3
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3305      	adds	r3, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff8c 	bl	80005ea <be16_read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <xor_reduce_bytes>:
} resp_msg_type_t;

// =====================
// Conjunto genérico de auxiliares
// =====================

 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
// XOR sobre bytes (paridade byte a byte)
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e009      	b.n	800070c <xor_reduce_bytes+0x28>
	uint8_t x = 0;
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4053      	eors	r3, r2
 8000704:	73fb      	strb	r3, [r7, #15]
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3f1      	bcc.n	80006f8 <xor_reduce_bytes+0x14>
	for (uint32_t i = 0; i < n; ++i)
 8000714:	7bfb      	ldrb	r3, [r7, #15]
		x ^= p[i];
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <set_parity_byte>:
static inline int check_parity_byte(const uint8_t *raw, uint32_t start,
		uint32_t count, uint32_t parity_index) {
	if (!raw)
		return 0;
	return xor_reduce_bytes(raw + start, count) == raw[parity_index];
}
 8000722:	b590      	push	{r4, r7, lr}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	603b      	str	r3, [r7, #0]
static inline int set_parity_byte(uint8_t *raw, uint32_t start, uint32_t count,
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <set_parity_byte+0x1a>
		uint32_t parity_index) {
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e00b      	b.n	8000754 <set_parity_byte+0x32>
	if (!raw)
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	18d0      	adds	r0, r2, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	18d4      	adds	r4, r2, r3
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	f7ff ffcb 	bl	80006e4 <xor_reduce_bytes>
 800074e:	4603      	mov	r3, r0
 8000750:	7023      	strb	r3, [r4, #0]
		return -1;
 8000752:	2300      	movs	r3, #0
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <resp_init>:
// =====================
// Auxiliares de frame (init/tail)
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
}
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	22ab      	movs	r2, #171	@ 0xab
 800076c:	701a      	strb	r2, [r3, #0]
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	701a      	strb	r2, [r3, #0]
	raw[0] = RESP_HEADER;
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <resp_set_tail>:
	raw[1] = (uint8_t) type;
}
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
}
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	4413      	add	r3, r2
 8000792:	2254      	movs	r2, #84	@ 0x54
 8000794:	701a      	strb	r2, [r3, #0]
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <parity_set_byte_1N>:
}

// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	2101      	movs	r1, #1
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f7ff ffb4 	bl	8000722 <set_parity_byte>
 80007ba:	4603      	mov	r3, r0
		uint32_t parity_index) {
 80007bc:	4618      	mov	r0, r3
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d005      	beq.n	80007e2 <led_ctrl_resp_encoder+0x1e>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <led_ctrl_resp_encoder+0x1e>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d802      	bhi.n	80007e8 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e01c      	b.n	8000822 <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 80007e8:	2107      	movs	r1, #7
 80007ea:	68b8      	ldr	r0, [r7, #8]
 80007ec:	f7ff ffb6 	bl	800075c <resp_init>
	raw[2] = in->frameId;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	3302      	adds	r3, #2
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3303      	adds	r3, #3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	7852      	ldrb	r2, [r2, #1]
 8000802:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	3304      	adds	r3, #4
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	7892      	ldrb	r2, [r2, #2]
 800080c:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 800080e:	2205      	movs	r2, #5
 8000810:	2104      	movs	r1, #4
 8000812:	68b8      	ldr	r0, [r7, #8]
 8000814:	f7ff ffc5 	bl	80007a2 <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 8000818:	2106      	movs	r1, #6
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff ffb1 	bl	8000782 <resp_set_tail>
	return PROTO_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <router_init>:
};

static router_handlers_t handlers;

void router_init(router_t *r, response_fifo_t *resp_fifo,
		const router_handlers_t *h) {
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
	memset(r, 0, sizeof(*r));
 8000838:	2248      	movs	r2, #72	@ 0x48
 800083a:	2100      	movs	r1, #0
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f00a fd85 	bl	800b34c <memset>
	r->resp = resp_fifo;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	645a      	str	r2, [r3, #68]	@ 0x44
	if (h) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d009      	beq.n	8000862 <router_init+0x36>
		handlers = *h;
 800084e:	4a07      	ldr	r2, [pc, #28]	@ (800086c <router_init+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4614      	mov	r4, r2
 8000854:	461d      	mov	r5, r3
 8000856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800085e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bdb0      	pop	{r4, r5, r7, pc}
 800086a:	bf00      	nop
 800086c:	20000094 	.word	0x20000094

08000870 <is_req_complete>:

static int is_req_complete(const uint8_t *a, uint32_t n) {
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	if (n < 4)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d801      	bhi.n	8000884 <is_req_complete+0x14>
		return 0; // mínimo
 8000880:	2300      	movs	r3, #0
 8000882:	e01a      	b.n	80008ba <is_req_complete+0x4a>
	if (a[0] != REQ_HEADER)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2baa      	cmp	r3, #170	@ 0xaa
 800088a:	d002      	beq.n	8000892 <is_req_complete+0x22>
		return -1; // inválido
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	e013      	b.n	80008ba <is_req_complete+0x4a>
	// fim quando encontrar REQ_TAIL
	for (uint32_t i = 3; i < n; i++) {
 8000892:	2303      	movs	r3, #3
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e00b      	b.n	80008b0 <is_req_complete+0x40>
		if (a[i] == REQ_TAIL)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b55      	cmp	r3, #85	@ 0x55
 80008a2:	d102      	bne.n	80008aa <is_req_complete+0x3a>
			return (int) (i + 1);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3301      	adds	r3, #1
 80008a8:	e007      	b.n	80008ba <is_req_complete+0x4a>
	for (uint32_t i = 3; i < n; i++) {
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3ef      	bcc.n	8000898 <is_req_complete+0x28>
	}
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	if (len < 4)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	f240 80a4 	bls.w	8000a24 <dispatch+0x15c>
		return;
	uint8_t type = f[1];
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3301      	adds	r3, #1
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	75fb      	strb	r3, [r7, #23]
	switch (type) {
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	f200 809d 	bhi.w	8000a28 <dispatch+0x160>
 80008ee:	a201      	add	r2, pc, #4	@ (adr r2, 80008f4 <dispatch+0x2c>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000975 	.word	0x08000975
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	080009a1 	.word	0x080009a1
 8000900:	080009b7 	.word	0x080009b7
 8000904:	080009cd 	.word	0x080009cd
 8000908:	080009e3 	.word	0x080009e3
 800090c:	080009f9 	.word	0x080009f9
 8000910:	08000a29 	.word	0x08000a29
 8000914:	08000a29 	.word	0x08000a29
 8000918:	08000a29 	.word	0x08000a29
 800091c:	08000a29 	.word	0x08000a29
 8000920:	08000a29 	.word	0x08000a29
 8000924:	08000a29 	.word	0x08000a29
 8000928:	08000a29 	.word	0x08000a29
 800092c:	08000a29 	.word	0x08000a29
 8000930:	08000a29 	.word	0x08000a29
 8000934:	08000a29 	.word	0x08000a29
 8000938:	08000a29 	.word	0x08000a29
 800093c:	08000a29 	.word	0x08000a29
 8000940:	08000a29 	.word	0x08000a29
 8000944:	08000a29 	.word	0x08000a29
 8000948:	08000a29 	.word	0x08000a29
 800094c:	08000a29 	.word	0x08000a29
 8000950:	08000a29 	.word	0x08000a29
 8000954:	08000a29 	.word	0x08000a29
 8000958:	08000a29 	.word	0x08000a29
 800095c:	08000a29 	.word	0x08000a29
 8000960:	08000a29 	.word	0x08000a29
 8000964:	08000a29 	.word	0x08000a29
 8000968:	08000a29 	.word	0x08000a29
 800096c:	08000a29 	.word	0x08000a29
 8000970:	08000a0f 	.word	0x08000a0f
	case REQ_MOVE_QUEUE_ADD:
		if (handlers.on_move_queue_add)
 8000974:	4b36      	ldr	r3, [pc, #216]	@ (8000a50 <dispatch+0x188>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d057      	beq.n	8000a2c <dispatch+0x164>
			handlers.on_move_queue_add(r, f, len);
 800097c:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <dispatch+0x188>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	68b9      	ldr	r1, [r7, #8]
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	4798      	blx	r3
		break;
 8000988:	e050      	b.n	8000a2c <dispatch+0x164>
	case REQ_MOVE_QUEUE_STATUS:
		if (handlers.on_move_queue_status)
 800098a:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <dispatch+0x188>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d04e      	beq.n	8000a30 <dispatch+0x168>
			handlers.on_move_queue_status(r, f, len);
 8000992:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <dispatch+0x188>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	4798      	blx	r3
		break;
 800099e:	e047      	b.n	8000a30 <dispatch+0x168>
	case REQ_START_MOVE:
		if (handlers.on_start_move)
 80009a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <dispatch+0x188>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d045      	beq.n	8000a34 <dispatch+0x16c>
			handlers.on_start_move(r, f, len);
 80009a8:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <dispatch+0x188>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	4798      	blx	r3
		break;
 80009b4:	e03e      	b.n	8000a34 <dispatch+0x16c>
	case REQ_MOVE_HOME:
		if (handlers.on_move_home)
 80009b6:	4b26      	ldr	r3, [pc, #152]	@ (8000a50 <dispatch+0x188>)
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d03c      	beq.n	8000a38 <dispatch+0x170>
			handlers.on_move_home(r, f, len);
 80009be:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <dispatch+0x188>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	4798      	blx	r3
		break;
 80009ca:	e035      	b.n	8000a38 <dispatch+0x170>
	case REQ_MOVE_PROBE_LEVEL:
		if (handlers.on_move_probe_level)
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <dispatch+0x188>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d033      	beq.n	8000a3c <dispatch+0x174>
			handlers.on_move_probe_level(r, f, len);
 80009d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <dispatch+0x188>)
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	4798      	blx	r3
		break;
 80009e0:	e02c      	b.n	8000a3c <dispatch+0x174>
	case REQ_MOVE_END:
		if (handlers.on_move_end)
 80009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <dispatch+0x188>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d02a      	beq.n	8000a40 <dispatch+0x178>
			handlers.on_move_end(r, f, len);
 80009ea:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <dispatch+0x188>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	4798      	blx	r3
		break;
 80009f6:	e023      	b.n	8000a40 <dispatch+0x178>
        case REQ_LED_CTRL:
                if (handlers.on_led_ctrl)
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <dispatch+0x188>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d021      	beq.n	8000a44 <dispatch+0x17c>
                        handlers.on_led_ctrl(r, f, len);
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <dispatch+0x188>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	68b9      	ldr	r1, [r7, #8]
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	4798      	blx	r3
                break;
 8000a0c:	e01a      	b.n	8000a44 <dispatch+0x17c>
        case REQ_FPGA_STATUS:
                if (handlers.on_fpga_status)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <dispatch+0x188>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d018      	beq.n	8000a48 <dispatch+0x180>
                        handlers.on_fpga_status(r, f, len);
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <dispatch+0x188>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	4798      	blx	r3
                break;
 8000a22:	e011      	b.n	8000a48 <dispatch+0x180>
		return;
 8000a24:	bf00      	nop
 8000a26:	e010      	b.n	8000a4a <dispatch+0x182>
        case REQ_TEST_HELLO:
                if (handlers.on_test_hello)
 8000a28:	bf00      	nop
 8000a2a:	e00e      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e00c      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a30:	bf00      	nop
 8000a32:	e00a      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a34:	bf00      	nop
 8000a36:	e008      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a38:	bf00      	nop
 8000a3a:	e006      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a3c:	bf00      	nop
 8000a3e:	e004      	b.n	8000a4a <dispatch+0x182>
		break;
 8000a40:	bf00      	nop
 8000a42:	e002      	b.n	8000a4a <dispatch+0x182>
                break;
 8000a44:	bf00      	nop
 8000a46:	e000      	b.n	8000a4a <dispatch+0x182>
                break;
 8000a48:	bf00      	nop
                        handlers.on_test_hello(r, f, len);
                break;
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000094 	.word	0x20000094

08000a54 <router_feed_bytes>:
        default:
                break; // desconhecido
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
        }
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e038      	b.n	8000ad8 <router_feed_bytes+0x84>
}
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a6e:	d903      	bls.n	8000a78 <router_feed_bytes+0x24>

 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a84:	1c59      	adds	r1, r3, #1
 8000a86:	b2c8      	uxtb	r0, r1
 8000a88:	68f9      	ldr	r1, [r7, #12]
 8000a8a:	f881 0040 	strb.w	r0, [r1, #64]	@ 0x40
 8000a8e:	4619      	mov	r1, r3
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	545a      	strb	r2, [r3, r1]
	for (uint32_t i = 0; i < len; i++) {
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	f7ff fee5 	bl	8000870 <is_req_complete>
 8000aa6:	6138      	str	r0, [r7, #16]
		if (r->idx >= sizeof(r->acc))
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da04      	bge.n	8000ab8 <router_feed_bytes+0x64>
			r->idx = 0; // evita overflow simples
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		r->acc[r->idx++] = data[i];
 8000ab6:	e00c      	b.n	8000ad2 <router_feed_bytes+0x7e>
		int comp = is_req_complete(r->acc, r->idx);
		if (comp < 0) {
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	dd09      	ble.n	8000ad2 <router_feed_bytes+0x7e>
			r->idx = 0;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f7ff feff 	bl	80008c8 <dispatch>
			continue;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        }
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d3c2      	bcc.n	8000a66 <router_feed_bytes+0x12>
		} // descarta até header
		if (comp > 0) {
			dispatch(r, r->acc, (uint32_t) comp);
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <resp_fifo_create>:
			r->idx = 0;
		}
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
	}
 8000af0:	210c      	movs	r1, #12
 8000af2:	2001      	movs	r0, #1
 8000af4:	f00a f948 	bl	800ad88 <calloc>
 8000af8:	4603      	mov	r3, r0
 8000afa:	607b      	str	r3, [r7, #4]
}
 8000afc:	687b      	ldr	r3, [r7, #4]

 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <resp_fifo_push>:
void resp_fifo_destroy(response_fifo_t *q) {
	while (q && q->head) {
		node_t *n = q->head;
		q->head = n->next;
		free(n->buf);
		free(n);
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
	}
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d005      	beq.n	8000b24 <resp_fifo_push+0x1e>
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <resp_fifo_push+0x1e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <resp_fifo_push+0x24>
	free(q);
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	e03d      	b.n	8000ba6 <resp_fifo_push+0xa0>
}
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f00a f948 	bl	800adc0 <malloc>
 8000b30:	4603      	mov	r3, r0
 8000b32:	617b      	str	r3, [r7, #20]
int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <resp_fifo_push+0x3a>
	if (!q || !frame || len == 0)
 8000b3a:	f06f 0302 	mvn.w	r3, #2
 8000b3e:	e032      	b.n	8000ba6 <resp_fifo_push+0xa0>
		return PROTO_ERR_ARG;
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f00a f93d 	bl	800adc0 <malloc>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	601a      	str	r2, [r3, #0]
	node_t *n = (node_t*) malloc(sizeof(*n));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d105      	bne.n	8000b62 <resp_fifo_push+0x5c>
	if (!n)
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f00a f93a 	bl	800add0 <free>
		return PROTO_ERR_ALLOC;
 8000b5c:	f06f 0302 	mvn.w	r3, #2
 8000b60:	e021      	b.n	8000ba6 <resp_fifo_push+0xa0>
	n->buf = (uint8_t*) malloc(len);
	if (!n->buf) {
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00a fc79 	bl	800b462 <memcpy>
		free(n);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	605a      	str	r2, [r3, #4]
		return PROTO_ERR_ALLOC;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
	}
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d004      	beq.n	8000b8e <resp_fifo_push+0x88>
	memcpy(n->buf, frame, len);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	e002      	b.n	8000b94 <resp_fifo_push+0x8e>
	n->len = len;
	n->next = NULL;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	601a      	str	r2, [r3, #0]
	if (q->tail)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	605a      	str	r2, [r3, #4]
		q->tail->next = n;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	609a      	str	r2, [r3, #8]
	else
 8000ba4:	2300      	movs	r3, #0
		q->head = n;
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <resp_fifo_pop>:
	q->tail = n;
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
	q->count++;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <resp_fifo_pop+0x20>
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <resp_fifo_pop+0x20>
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <resp_fifo_pop+0x24>
	return PROTO_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e02e      	b.n	8000c30 <resp_fifo_pop+0x82>
}
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	617b      	str	r3, [r7, #20]
int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d202      	bcs.n	8000be8 <resp_fifo_pop+0x3a>
	if (!q || !q->head || !out)
 8000be2:	f06f 0303 	mvn.w	r3, #3
 8000be6:	e023      	b.n	8000c30 <resp_fifo_pop+0x82>
		return 0;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	6819      	ldr	r1, [r3, #0]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68b8      	ldr	r0, [r7, #8]
 8000bf4:	f00a fc35 	bl	800b462 <memcpy>
	node_t *n = q->head;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
	if (n->len > max_len)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	601a      	str	r2, [r3, #0]
		return PROTO_ERR_RANGE;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <resp_fifo_pop+0x66>
	memcpy(out, n->buf, n->len);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
	int l = (int) n->len;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	1e5a      	subs	r2, r3, #1
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	609a      	str	r2, [r3, #8]
	q->head = n->next;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00a f8d4 	bl	800add0 <free>
	if (!q->head)
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f00a f8d1 	bl	800add0 <free>
		q->tail = NULL;
 8000c2e:	693b      	ldr	r3, [r7, #16]
	q->count--;
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <home_on_move_home>:
}
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af04      	add	r7, sp, #16
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <home_on_move_home+0x2c>)
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <home_on_move_home+0x30>)
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <home_on_move_home+0x34>)
 8000c4a:	9301      	str	r3, [sp, #4]
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <home_on_move_home+0x38>)
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	4613      	mov	r3, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 fbf8 	bl	800144c <log_event_auto>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	0800c1a0 	.word	0x0800c1a0
 8000c68:	0800c1b8 	.word	0x0800c1b8
 8000c6c:	0800c1ac 	.word	0x0800c1ac
 8000c70:	0800c1c8 	.word	0x0800c1c8

08000c74 <led_push_response>:
} led_channel_state_t;

static led_channel_state_t g_leds[LED_CTRL_CHANNEL_COUNT] = {
    { LED1_GPIO_PORT, LED1_GPIO_PIN, LED1_GPIO_AF, LED_MODE_OFF, 0u, 0u },
};

 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	4613      	mov	r3, r2
 8000c84:	717b      	strb	r3, [r7, #5]
static uint8_t g_pwm_running = 0u;

 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	733b      	strb	r3, [r7, #12]
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	737b      	strb	r3, [r7, #13]
 8000c8e:	797b      	ldrb	r3, [r7, #5]
 8000c90:	73bb      	strb	r3, [r7, #14]
#if LED_ACTIVE_HIGH
 8000c92:	f107 0110 	add.w	r1, r7, #16
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd91 	bl	80007c4 <led_ctrl_resp_encoder>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00c      	beq.n	8000cc2 <led_push_response+0x4e>
#define LED_GPIO_ON_LEVEL  GPIO_PIN_SET
 8000ca8:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <led_push_response+0x80>)
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <led_push_response+0x84>)
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <led_push_response+0x88>)
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	f06f 0201 	mvn.w	r2, #1
 8000cb8:	2164      	movs	r1, #100	@ 0x64
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 fbc6 	bl	800144c <log_event_auto>
 8000cc0:	e014      	b.n	8000cec <led_push_response+0x78>
#define LED_GPIO_OFF_LEVEL GPIO_PIN_RESET
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fedd 	bl	8001a88 <app_resp_push>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00b      	beq.n	8000cec <led_push_response+0x78>
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <led_push_response+0x80>)
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <led_push_response+0x8c>)
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <led_push_response+0x88>)
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	f06f 0203 	mvn.w	r2, #3
 8000ce4:	2164      	movs	r1, #100	@ 0x64
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fbb0 	bl	800144c <log_event_auto>
#endif

 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0800c1d4 	.word	0x0800c1d4
 8000cf8:	0800c1d8 	.word	0x0800c1d8
 8000cfc:	0800c1f4 	.word	0x0800c1f4
 8000d00:	0800c1fc 	.word	0x0800c1fc

08000d04 <led_timer_get_clock>:
static void led_gpio_config_output(const led_channel_state_t *led) {
    if (!led)
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
        return;
 8000d0a:	f004 fcc3 	bl	8005694 <HAL_RCC_GetPCLK2Freq>
 8000d0e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gi = {0};
    gi.Pin = led->pin;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <led_timer_get_clock+0x34>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000d18:	603b      	str	r3, [r7, #0]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <led_timer_get_clock+0x28>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <led_timer_get_clock+0x28>
    gi.Pull = GPIO_NOPULL;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(led->port, &gi);
}
 8000d2c:	687b      	ldr	r3, [r7, #4]

 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <led_compute_period_ticks>:
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
        return;
 8000d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d40:	b094      	sub	sp, #80	@ 0x50
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }
 8000d48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <led_compute_period_ticks+0x16>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e066      	b.n	8000e20 <led_compute_period_ticks+0xe4>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
    }
 8000d52:	f7ff ffd7 	bl	8000d04 <led_timer_get_clock>
 8000d56:	6478      	str	r0, [r7, #68]	@ 0x44
}
 8000d58:	4b34      	ldr	r3, [pc, #208]	@ (8000e2c <led_compute_period_ticks+0xf0>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	643b      	str	r3, [r7, #64]	@ 0x40

 8000d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <led_compute_period_ticks+0x2e>
static uint32_t led_timer_get_clock(void) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	e05a      	b.n	8000e20 <led_compute_period_ticks+0xe4>
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
 8000d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <led_compute_period_ticks+0x42>
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e050      	b.n	8000e20 <led_compute_period_ticks+0xe4>
        clk *= 2u;
    }
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d80:	2200      	movs	r2, #0
 8000d82:	4698      	mov	r8, r3
 8000d84:	4691      	mov	r9, r2
 8000d86:	4642      	mov	r2, r8
 8000d88:	464b      	mov	r3, r9
 8000d8a:	1891      	adds	r1, r2, r2
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	415b      	adcs	r3, r3
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d96:	eb12 0408 	adds.w	r4, r2, r8
 8000d9a:	eb43 0509 	adc.w	r5, r3, r9
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	016b      	lsls	r3, r5, #5
 8000da8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000dac:	0162      	lsls	r2, r4, #5
 8000dae:	eb14 0a02 	adds.w	sl, r4, r2
 8000db2:	eb45 0b03 	adc.w	fp, r5, r3
 8000db6:	eb1a 0308 	adds.w	r3, sl, r8
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	eb4b 0309 	adc.w	r3, fp, r9
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000dc6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
#endif
 8000dca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8000dd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ddc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000de0:	4621      	mov	r1, r4
 8000de2:	1889      	adds	r1, r1, r2
 8000de4:	61b9      	str	r1, [r7, #24]
 8000de6:	4629      	mov	r1, r5
 8000de8:	eb43 0101 	adc.w	r1, r3, r1
 8000dec:	61f9      	str	r1, [r7, #28]
 8000dee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000df0:	2200      	movs	r2, #0
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	617a      	str	r2, [r7, #20]
 8000df6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000dfe:	f7ff fa37 	bl	8000270 <__aeabi_uldivmod>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return clk;
 8000e0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d305      	bcc.n	8000e1e <led_compute_period_ticks+0xe2>
}
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

 8000e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
/*
 8000e20:	4618      	mov	r0, r3
 8000e22:	3750      	adds	r7, #80	@ 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000b64 	.word	0x20000b64

08000e30 <led_apply_pwm>:
 * Converte a frequência de pisca (em centi-hertz) no período correspondente
 * para o TIM15, levando em conta o prescaler configurado.
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
 *
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <led_apply_pwm+0x14>
 * freq_centi_hz carrega a frequência já multiplicada por 100. Para obter o
 8000e40:	2301      	movs	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 * período (ticks) precisamos multiplicar o clock efetivo do timer por 100 e
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d901      	bls.n	8000e50 <led_apply_pwm+0x20>
 * dividir novamente por freq_centi_hz (isto é, clk_per_second / (freq/100)).
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	603b      	str	r3, [r7, #0]
 * A soma de freq_centi_hz/2 implementa arredondamento para o inteiro mais
 * próximo, mantendo o cálculo puramente inteiro.
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <led_apply_pwm+0x2c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <led_apply_pwm+0x2e>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 *
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e68:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	60d3      	str	r3, [r2, #12]
 * Exemplos com o clock atual (80 MHz) e prescaler = 0 (divisor efetivo 1):
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	635a      	str	r2, [r3, #52]	@ 0x34
 *   - 1,00 Hz → freq_centi_hz = 100 → ticks calculados = 80 000 000.
 8000e76:	2101      	movs	r1, #1
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e7a:	f007 fc57 	bl	800872c <HAL_TIM_GenerateEvent>
 *   - 0,20 Hz → freq_centi_hz =  20 → ticks calculados = 400 000 000.
 8000e7e:	4a03      	ldr	r2, [pc, #12]	@ (8000e8c <led_apply_pwm+0x5c>)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	60d3      	str	r3, [r2, #12]
 * Ambos excedem os 65 536 passos que o ARR de 16 bits suporta, portanto
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000b64 	.word	0x20000b64

08000e90 <led_force_off>:
 * led_force_blink() satura o período em 0x10000 e o LED pisca de fato a
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d010      	beq.n	8000ec0 <led_force_off+0x30>
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <led_force_off+0x38>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ffc2 	bl	8000e30 <led_apply_pwm>

 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	719a      	strb	r2, [r3, #6]
static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	811a      	strh	r2, [r3, #8]
    if (freq_centi_hz == 0u)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	71da      	strb	r2, [r3, #7]
 8000ebe:	e000      	b.n	8000ec2 <led_force_off+0x32>
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 8000ec0:	bf00      	nop
        return 0u;
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000b64 	.word	0x20000b64

08000ecc <led_force_on>:

    uint32_t timer_clk = led_timer_get_clock();
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d016      	beq.n	8000f08 <led_force_on+0x3c>
    if (prescaler == 0u)
        return 0u;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <led_force_on+0x44>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]

 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <led_force_on+0x20>
    uint32_t clk_per_second = timer_clk / prescaler;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	60fb      	str	r3, [r7, #12]
    if (clk_per_second == 0u)
 8000eec:	68f9      	ldr	r1, [r7, #12]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff ff9e 	bl	8000e30 <led_apply_pwm>
        return 0u;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	719a      	strb	r2, [r3, #6]

 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	811a      	strh	r2, [r3, #8]
    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	71da      	strb	r2, [r3, #7]
 8000f06:	e000      	b.n	8000f0a <led_force_on+0x3e>
    if (prescaler == 0u)
 8000f08:	bf00      	nop
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000b64 	.word	0x20000b64

08000f14 <led_force_blink>:
    if (ticks > 0xFFFFFFFFu)
        ticks = 0xFFFFFFFFu;
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
    return (uint32_t)ticks;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d024      	beq.n	8000f70 <led_force_blink+0x5c>
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d021      	beq.n	8000f70 <led_force_blink+0x5c>
}

 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff04 	bl	8000d3c <led_compute_period_ticks>
 8000f34:	60f8      	str	r0, [r7, #12]
static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d801      	bhi.n	8000f40 <led_force_blink+0x2c>
    if (period_ticks == 0u)
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
        period_ticks = 1u;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f46:	d902      	bls.n	8000f4e <led_force_blink+0x3a>
    if (pulse_ticks > period_ticks)
 8000f48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4c:	60fb      	str	r3, [r7, #12]
        pulse_ticks = period_ticks;

 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	085b      	lsrs	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff ff6a 	bl	8000e30 <led_apply_pwm>
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	719a      	strb	r2, [r3, #6]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	887a      	ldrh	r2, [r7, #2]
 8000f66:	811a      	strh	r2, [r3, #8]
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	71da      	strb	r2, [r3, #7]
 8000f6e:	e000      	b.n	8000f72 <led_force_blink+0x5e>
}
 8000f70:	bf00      	nop
    htim15.Init.Period = arr;
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <led_apply_config>:
}

 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
 8000f84:	4613      	mov	r3, r2
 8000f86:	803b      	strh	r3, [r7, #0]
static void led_force_off(led_channel_state_t *led) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d026      	beq.n	8000fdc <led_apply_config+0x64>
    if (!led)
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <led_apply_config+0x20>
    if (st != HAL_OK) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f98:	f3ef 8310 	mrs	r3, PRIMASK
 8000f9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
    }
 8000fa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
}
 8000fa4:	bf00      	nop
    led_gpio_config_output(led);
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
    led->mode = LED_MODE_OFF;
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d103      	bne.n	8000fb4 <led_apply_config+0x3c>
    led->frequency_centi_hz = 0u;
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff8d 	bl	8000ecc <led_force_on>
 8000fb2:	e00e      	b.n	8000fd2 <led_apply_config+0x5a>
    led->is_on = 0u;
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d108      	bne.n	8000fcc <led_apply_config+0x54>
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <led_apply_config+0x54>
}
 8000fc0:	883b      	ldrh	r3, [r7, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ffa5 	bl	8000f14 <led_force_blink>
 8000fca:	e002      	b.n	8000fd2 <led_apply_config+0x5a>

static void led_force_on(led_channel_state_t *led) {
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff5f 	bl	8000e90 <led_force_off>
    if (!led)
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd8:	b662      	cpsie	i
}
 8000fda:	e000      	b.n	8000fde <led_apply_config+0x66>
    if (!led)
 8000fdc:	bf00      	nop
    if (st != HAL_OK) {
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
    }
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <led_pwm_start>:
    led_gpio_config_output(led);
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
    led->mode = LED_MODE_ON;
 8000fea:	2100      	movs	r1, #0
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <led_pwm_start+0x1c>)
 8000fee:	f006 fcd5 	bl	800799c <HAL_TIM_PWM_Start>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
    led->frequency_centi_hz = 0u;
    led->is_on = 1u;
}

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
    if (!led || freq_centi_hz == 0u)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
        return;
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000b64 	.word	0x20000b64

08001004 <led_service_init>:
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
    if (period_ticks < 2u)
 8001004:	b580      	push	{r7, lr}
 8001006:	b090      	sub	sp, #64	@ 0x40
 8001008:	af02      	add	r7, sp, #8
        period_ticks = 2u;
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
    if (period_ticks > (uint32_t)0x10000u)
 800101a:	2302      	movs	r3, #2
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
        period_ticks = 0x10000u;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28

 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t pulse_ticks = period_ticks / 2u;
 8001026:	230e      	movs	r3, #14
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    led_gpio_config_pwm(led);
    led_apply_pwm(period_ticks, pulse_ticks);
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
 800102e:	e038      	b.n	80010a2 <led_service_init+0x9e>
    if (led_pwm_start() != HAL_OK) {
 8001030:	494d      	ldr	r1, [pc, #308]	@ (8001168 <led_service_init+0x164>)
 8001032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3304      	adds	r3, #4
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	623b      	str	r3, [r7, #32]
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 8001044:	4948      	ldr	r1, [pc, #288]	@ (8001168 <led_service_init+0x164>)
 8001046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f107 0220 	add.w	r2, r7, #32
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f002 ff54 	bl	8003f08 <HAL_GPIO_Init>
        led_force_off(led);
 8001060:	4941      	ldr	r1, [pc, #260]	@ (8001168 <led_service_init+0x164>)
 8001062:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	3306      	adds	r3, #6
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
        return;
 8001074:	493c      	ldr	r1, [pc, #240]	@ (8001168 <led_service_init+0x164>)
 8001076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	3308      	adds	r3, #8
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]
    }
 8001088:	4937      	ldr	r1, [pc, #220]	@ (8001168 <led_service_init+0x164>)
 800108a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	3307      	adds	r3, #7
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
    led_apply_pwm(period_ticks, pulse_ticks);
 800109c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109e:	3301      	adds	r3, #1
 80010a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80010a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0c3      	beq.n	8001030 <led_service_init+0x2c>
    led->mode = LED_MODE_BLINK;
    led->frequency_centi_hz = freq_centi_hz;
    led->is_on = 0u;
 80010a8:	4b30      	ldr	r3, [pc, #192]	@ (800116c <led_service_init+0x168>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a30      	ldr	r2, [pc, #192]	@ (8001170 <led_service_init+0x16c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d001      	beq.n	80010b6 <led_service_init+0xb2>
}
 80010b2:	f001 ff67 	bl	8002f84 <MX_TIM15_Init>

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
    if (!led)
 80010b6:	482d      	ldr	r0, [pc, #180]	@ (800116c <led_service_init+0x168>)
 80010b8:	f006 fb5c 	bl	8007774 <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00c      	beq.n	80010dc <led_service_init+0xd8>
        return;
 80010c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001174 <led_service_init+0x170>)
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <led_service_init+0x174>)
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <led_service_init+0x178>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	4613      	mov	r3, r2
 80010ce:	f06f 0203 	mvn.w	r2, #3
 80010d2:	2164      	movs	r1, #100	@ 0x64
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 f9b9 	bl	800144c <log_event_auto>

 80010da:	e041      	b.n	8001160 <led_service_init+0x15c>
    if (mode > LED_MODE_BLINK)
        mode = LED_MODE_OFF;

 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	619a      	str	r2, [r3, #24]
    uint32_t primask = __get_PRIMASK();
 80010ee:	2360      	movs	r3, #96	@ 0x60
 80010f0:	607b      	str	r3, [r7, #4]
    __disable_irq();

 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
    if (mode == LED_MODE_ON) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
        led_force_on(led);
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
        led_force_blink(led, freq_centi_hz);
    } else {
        led_force_off(led);
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
    }
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]

 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    if (primask == 0u) {
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
        __enable_irq();
    }
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	4619      	mov	r1, r3
 8001110:	4816      	ldr	r0, [pc, #88]	@ (800116c <led_service_init+0x168>)
 8001112:	f007 f8bd 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00c      	beq.n	8001136 <led_service_init+0x132>
}
 800111c:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <led_service_init+0x170>)
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <led_service_init+0x17c>)
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <led_service_init+0x178>)
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4613      	mov	r3, r2
 8001128:	f06f 0203 	mvn.w	r2, #3
 800112c:	2164      	movs	r1, #100	@ 0x64
 800112e:	2001      	movs	r0, #1
 8001130:	f000 f98c 	bl	800144c <log_event_auto>

 8001134:	e014      	b.n	8001160 <led_service_init+0x15c>
static HAL_StatusTypeDef led_pwm_start(void) {
    if (g_pwm_running)
        return HAL_OK;
 8001136:	f7ff ff55 	bl	8000fe4 <led_pwm_start>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00c      	beq.n	800115a <led_service_init+0x156>

 8001140:	4a0c      	ldr	r2, [pc, #48]	@ (8001174 <led_service_init+0x170>)
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <led_service_init+0x180>)
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <led_service_init+0x178>)
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	4613      	mov	r3, r2
 800114c:	f06f 0203 	mvn.w	r2, #3
 8001150:	2164      	movs	r1, #100	@ 0x64
 8001152:	2001      	movs	r0, #1
 8001154:	f000 f97a 	bl	800144c <log_event_auto>
    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001158:	e002      	b.n	8001160 <led_service_init+0x15c>
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 800115a:	4803      	ldr	r0, [pc, #12]	@ (8001168 <led_service_init+0x164>)
 800115c:	f7ff fe98 	bl	8000e90 <led_force_off>
    }
 8001160:	3738      	adds	r7, #56	@ 0x38
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000000 	.word	0x20000000
 800116c:	20000b64 	.word	0x20000b64
 8001170:	40014000 	.word	0x40014000
 8001174:	0800c1d4 	.word	0x0800c1d4
 8001178:	0800c214 	.word	0x0800c214
 800117c:	0800c238 	.word	0x0800c238
 8001180:	0800c240 	.word	0x0800c240
 8001184:	0800c268 	.word	0x0800c268

08001188 <led_on_led_ctrl>:
#endif
    if (st == HAL_OK) {
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	b097      	sub	sp, #92	@ 0x5c
 800118c:	af0a      	add	r7, sp, #40	@ 0x28
 800118e:	6178      	str	r0, [r7, #20]
 8001190:	6139      	str	r1, [r7, #16]
        g_pwm_running = 1u;
    }
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80d5 	beq.w	8001344 <led_on_led_ctrl+0x1bc>
    return st;
}
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2b08      	cmp	r3, #8
 800119e:	d902      	bls.n	80011a6 <led_on_led_ctrl+0x1e>
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80011a4:	d90e      	bls.n	80011c4 <led_on_led_ctrl+0x3c>

 80011a6:	4a69      	ldr	r2, [pc, #420]	@ (800134c <led_on_led_ctrl+0x1c4>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	4b68      	ldr	r3, [pc, #416]	@ (8001350 <led_on_led_ctrl+0x1c8>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	4b68      	ldr	r3, [pc, #416]	@ (8001354 <led_on_led_ctrl+0x1cc>)
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	4613      	mov	r3, r2
 80011b6:	f06f 0203 	mvn.w	r2, #3
 80011ba:	2164      	movs	r1, #100	@ 0x64
 80011bc:	2001      	movs	r0, #1
 80011be:	f000 f945 	bl	800144c <log_event_auto>
static HAL_StatusTypeDef led_pwm_stop(void) {
 80011c2:	e0c0      	b.n	8001346 <led_on_led_ctrl+0x1be>
    if (!g_pwm_running)
        return HAL_OK;
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	461a      	mov	r2, r3
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff fa4b 	bl	8000668 <led_ctrl_req_decoder>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

 80011d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00f      	beq.n	8001200 <led_on_led_ctrl+0x78>
    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80011e0:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80011e4:	4959      	ldr	r1, [pc, #356]	@ (800134c <led_on_led_ctrl+0x1c4>)
 80011e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001358 <led_on_led_ctrl+0x1d0>)
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	4b5a      	ldr	r3, [pc, #360]	@ (800135c <led_on_led_ctrl+0x1d4>)
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	2164      	movs	r1, #100	@ 0x64
 80011f8:	2001      	movs	r0, #1
 80011fa:	f000 f927 	bl	800144c <log_event_auto>
#if defined(TIM_CHANNEL_1N)
 80011fe:	e0a2      	b.n	8001346 <led_on_led_ctrl+0x1be>
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
 8001200:	7f7b      	ldrb	r3, [r7, #29]
 8001202:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
 8001206:	2301      	movs	r3, #1
 8001208:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (st == HAL_OK) {
 800120c:	2300      	movs	r3, #0
 800120e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        __HAL_TIM_DISABLE(&htim15);
 8001212:	2300      	movs	r3, #0
 8001214:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        g_pwm_running = 0u;
    }
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800121c:	e030      	b.n	8001280 <led_on_led_ctrl+0xf8>
    return st;
 800121e:	2301      	movs	r3, #1
 8001220:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
}
 8001224:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001228:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800122c:	4013      	ands	r3, r2
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d021      	beq.n	8001278 <led_on_led_ctrl+0xf0>

void led_service_init(void) {
    g_pwm_running = 0u;
 8001234:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001238:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800123c:	4313      	orrs	r3, r2
 800123e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

 8001242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4a44      	ldr	r2, [pc, #272]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 800124e:	1898      	adds	r0, r3, r2
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	3320      	adds	r3, #32
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	4413      	add	r3, r2
 800125c:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8001260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	3320      	adds	r3, #32
 8001266:	f107 0210 	add.w	r2, r7, #16
 800126a:	4413      	add	r3, r2
 800126c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001270:	461a      	mov	r2, r3
 8001272:	f7ff fe81 	bl	8000f78 <led_apply_config>
 8001276:	e000      	b.n	800127a <led_on_led_ctrl+0xf2>

 8001278:	bf00      	nop
    }
 800127a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127c:	3301      	adds	r3, #1
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0cb      	beq.n	800121e <led_on_led_ctrl+0x96>
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
        led_gpio_config_output(&g_leds[i]);
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 8001286:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800128a:	43db      	mvns	r3, r3
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001292:	4013      	ands	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <led_on_led_ctrl+0x11a>
        g_leds[i].mode = LED_MODE_OFF;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80012a0:	e00a      	b.n	80012b8 <led_on_led_ctrl+0x130>
        g_leds[i].frequency_centi_hz = 0u;
 80012a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d106      	bne.n	80012b8 <led_on_led_ctrl+0x130>
 80012aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <led_on_led_ctrl+0x130>
        g_leds[i].is_on = 0u;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    if (htim15.Instance != TIM15) {
 80012b8:	7f3b      	ldrb	r3, [r7, #28]
 80012ba:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80012be:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fcd6 	bl	8000c74 <led_push_response>
        MX_TIM15_Init();
    }
 80012c8:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80012cc:	4e1f      	ldr	r6, [pc, #124]	@ (800134c <led_on_led_ctrl+0x1c4>)
 80012ce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012d2:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 80012d8:	799b      	ldrb	r3, [r3, #6]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 80012de:	891b      	ldrh	r3, [r3, #8]
 80012e0:	4820      	ldr	r0, [pc, #128]	@ (8001364 <led_on_led_ctrl+0x1dc>)
 80012e2:	fba0 0303 	umull	r0, r3, r0, r3
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 80012ee:	891b      	ldrh	r3, [r3, #8]
 80012f0:	481c      	ldr	r0, [pc, #112]	@ (8001364 <led_on_led_ctrl+0x1dc>)
 80012f2:	fba0 5003 	umull	r5, r0, r0, r3
 80012f6:	0940      	lsrs	r0, r0, #5
 80012f8:	2564      	movs	r5, #100	@ 0x64
 80012fa:	fb05 f000 	mul.w	r0, r5, r0
 80012fe:	1a1b      	subs	r3, r3, r0
 8001300:	b29b      	uxth	r3, r3
 8001302:	461d      	mov	r5, r3
 8001304:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <led_on_led_ctrl+0x1d8>)
 8001306:	79db      	ldrb	r3, [r3, #7]
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <led_on_led_ctrl+0x1e0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001310:	3301      	adds	r3, #1
 8001312:	4815      	ldr	r0, [pc, #84]	@ (8001368 <led_on_led_ctrl+0x1e0>)
 8001314:	6800      	ldr	r0, [r0, #0]
 8001316:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001318:	9009      	str	r0, [sp, #36]	@ 0x24
 800131a:	9308      	str	r3, [sp, #32]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	9007      	str	r0, [sp, #28]
 8001320:	9506      	str	r5, [sp, #24]
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	9005      	str	r0, [sp, #20]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	9304      	str	r3, [sp, #16]
 800132a:	9103      	str	r1, [sp, #12]
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <led_on_led_ctrl+0x1e4>)
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <led_on_led_ctrl+0x1e8>)
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4633      	mov	r3, r6
 8001338:	4622      	mov	r2, r4
 800133a:	2102      	movs	r1, #2
 800133c:	2001      	movs	r0, #1
 800133e:	f000 f885 	bl	800144c <log_event_auto>
 8001342:	e000      	b.n	8001346 <led_on_led_ctrl+0x1be>
    return st;
 8001344:	bf00      	nop
        return;
    }

    TIM_OC_InitTypeDef oc = {0};
    oc.OCMode = TIM_OCMODE_PWM1;
#if LED_ACTIVE_HIGH
 8001346:	3734      	adds	r7, #52	@ 0x34
 8001348:	46bd      	mov	sp, r7
 800134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134c:	0800c1d4 	.word	0x0800c1d4
 8001350:	0800c288 	.word	0x0800c288
 8001354:	0800c2a4 	.word	0x0800c2a4
 8001358:	0800c2a8 	.word	0x0800c2a8
 800135c:	0800c2cc 	.word	0x0800c2cc
 8001360:	20000000 	.word	0x20000000
 8001364:	51eb851f 	.word	0x51eb851f
 8001368:	20000b64 	.word	0x20000b64
 800136c:	0800c2d4 	.word	0x0800c2d4
 8001370:	0800c324 	.word	0x0800c324

08001374 <log_service_init>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "usart.h"

void log_service_init(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <log_service_init+0x18>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6898      	ldr	r0, [r3, #8]
 800137e:	2300      	movs	r3, #0
 8001380:	2202      	movs	r2, #2
 8001382:	2100      	movs	r1, #0
 8001384:	f009 feae 	bl	800b0e4 <setvbuf>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000028 	.word	0x20000028

08001390 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	460b      	mov	r3, r1
 800139e:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 80013a0:	79f9      	ldrb	r1, [r7, #7]
 80013a2:	79ba      	ldrb	r2, [r7, #6]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <log_event_ids+0x24>)
 80013a8:	f009 fe8a 	bl	800b0c0 <iprintf>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800c32c 	.word	0x0800c32c

080013b8 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <log_event_names+0x16>
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <log_event_names+0x40>)
 80013cc:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <log_event_names+0x20>
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <log_event_names+0x40>)
 80013d6:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <log_event_names+0x2a>
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <log_event_names+0x40>)
 80013e0:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <log_event_names+0x44>)
 80013ea:	f009 fe69 	bl	800b0c0 <iprintf>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800c34c 	.word	0x0800c34c
 80013fc:	0800c350 	.word	0x0800c350

08001400 <_write>:

// Mantém _write exatamente igual: utilizado pelo printf para enviar à USART1.
int _write(int fd, char *ptr, int len) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d002      	beq.n	8001418 <_write+0x18>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d111      	bne.n	800143c <_write+0x3c>
      hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	b29a      	uxth	r2, r3
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	4809      	ldr	r0, [pc, #36]	@ (8001448 <_write+0x48>)
 8001424:	f008 fdee 	bl	800a004 <HAL_UART_Transmit>
 8001428:	4603      	mov	r3, r0
 800142a:	75fb      	strb	r3, [r7, #23]
      if (hstatus == HAL_OK)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <_write+0x36>
        return len;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	e004      	b.n	8001440 <_write+0x40>
      else
        return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e001      	b.n	8001440 <_write+0x40>
    }
    return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000bb0 	.word	0x20000bb0

0800144c <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 800144c:	b580      	push	{r7, lr}
 800144e:	b0a8      	sub	sp, #160	@ 0xa0
 8001450:	af00      	add	r7, sp, #0
 8001452:	60ba      	str	r2, [r7, #8]
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	460b      	mov	r3, r1
 800145c:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 800145e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001462:	2b00      	cmp	r3, #0
 8001464:	d010      	beq.n	8001488 <log_event_auto+0x3c>
 8001466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8001470:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001474:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8001476:	f107 0018 	add.w	r0, r7, #24
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001480:	2180      	movs	r1, #128	@ 0x80
 8001482:	f009 ff55 	bl	800b330 <vsniprintf>
    if(fmt && fmt[0]){
 8001486:	e003      	b.n	8001490 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8001488:	233f      	movs	r3, #63	@ 0x3f
 800148a:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 800148c:	2300      	movs	r3, #0
 800148e:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <log_event_auto+0x4e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e000      	b.n	800149c <log_event_auto+0x50>
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <log_event_auto+0x84>)
 800149c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 80014a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <log_event_auto+0x62>
 80014a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014ac:	e000      	b.n	80014b0 <log_event_auto+0x64>
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <log_event_auto+0x84>)
 80014b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80014bc:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <log_event_auto+0x88>)
 80014c2:	f009 fdfd 	bl	800b0c0 <iprintf>
}
 80014c6:	bf00      	nop
 80014c8:	37a0      	adds	r7, #160	@ 0xa0
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	0800c34c 	.word	0x0800c34c
 80014d4:	0800c350 	.word	0x0800c350

080014d8 <motion_on_move_queue_add>:
void motion_on_tim6_tick(void) { /* DDA feed aqui futuramente */
}
void motion_on_tim7_tick(void) { /* Atualização de status/PID aqui futuramente */
}

void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af04      	add	r7, sp, #16
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.state == MOTION_IDLE)
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <motion_on_move_queue_add+0x50>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <motion_on_move_queue_add+0x1a>
		g_status.state = MOTION_QUEUED;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <motion_on_move_queue_add+0x50>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
	g_status.queue_depth++;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <motion_on_move_queue_add+0x50>)
 80014f4:	785b      	ldrb	r3, [r3, #1]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <motion_on_move_queue_add+0x50>)
 80014fe:	705a      	strb	r2, [r3, #1]

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_add", "queue_depth=%u", (unsigned)g_status.queue_depth);
 8001500:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <motion_on_move_queue_add+0x54>)
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <motion_on_move_queue_add+0x50>)
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <motion_on_move_queue_add+0x58>)
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <motion_on_move_queue_add+0x5c>)
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	2200      	movs	r2, #0
 8001516:	2101      	movs	r1, #1
 8001518:	2002      	movs	r0, #2
 800151a:	f7ff ff97 	bl	800144c <log_event_auto>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000b4 	.word	0x200000b4
 800152c:	0800c374 	.word	0x0800c374
 8001530:	0800c38c 	.word	0x0800c38c
 8001534:	0800c39c 	.word	0x0800c39c

08001538 <motion_on_move_queue_status>:
void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af04      	add	r7, sp, #16
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;

	LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status", "queue_depth=%u,state=%u", (unsigned)g_status.queue_depth, (unsigned)g_status.state);
 8001542:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <motion_on_move_queue_status+0x3c>)
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <motion_on_move_queue_status+0x40>)
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <motion_on_move_queue_status+0x40>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	9303      	str	r3, [sp, #12]
 8001554:	9102      	str	r1, [sp, #8]
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <motion_on_move_queue_status+0x44>)
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <motion_on_move_queue_status+0x48>)
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4613      	mov	r3, r2
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff ff71 	bl	800144c <log_event_auto>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0800c374 	.word	0x0800c374
 8001578:	200000b4 	.word	0x200000b4
 800157c:	0800c3a8 	.word	0x0800c3a8
 8001580:	0800c3c0 	.word	0x0800c3c0

08001584 <motion_on_start_move>:
void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af04      	add	r7, sp, #16
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	if (g_status.queue_depth)
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <motion_on_start_move+0x4c>)
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <motion_on_start_move+0x1a>
		g_status.state = MOTION_RUNNING;
 8001598:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <motion_on_start_move+0x4c>)
 800159a:	2202      	movs	r2, #2
 800159c:	701a      	strb	r2, [r3, #0]

	LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", "%s", (g_status.state == MOTION_RUNNING ? "running" : "ignored"));
 800159e:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <motion_on_start_move+0x50>)
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <motion_on_start_move+0x4c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d101      	bne.n	80015ae <motion_on_start_move+0x2a>
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <motion_on_start_move+0x54>)
 80015ac:	e000      	b.n	80015b0 <motion_on_start_move+0x2c>
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <motion_on_start_move+0x58>)
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <motion_on_start_move+0x5c>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <motion_on_start_move+0x60>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4613      	mov	r3, r2
 80015bc:	2200      	movs	r2, #0
 80015be:	2102      	movs	r1, #2
 80015c0:	2002      	movs	r0, #2
 80015c2:	f7ff ff43 	bl	800144c <log_event_auto>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000b4 	.word	0x200000b4
 80015d4:	0800c374 	.word	0x0800c374
 80015d8:	0800c3d0 	.word	0x0800c3d0
 80015dc:	0800c3d8 	.word	0x0800c3d8
 80015e0:	0800c380 	.word	0x0800c380
 80015e4:	0800c3e0 	.word	0x0800c3e0

080015e8 <motion_on_move_end>:
void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len;
	g_status.state = MOTION_STOPPING;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <motion_on_move_end+0x34>)
 80015f4:	2204      	movs	r2, #4
 80015f6:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopping");
 80015f8:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <motion_on_move_end+0x38>)
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <motion_on_move_end+0x3c>)
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <motion_on_move_end+0x40>)
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <motion_on_move_end+0x44>)
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4613      	mov	r3, r2
 8001608:	2200      	movs	r2, #0
 800160a:	2102      	movs	r1, #2
 800160c:	2002      	movs	r0, #2
 800160e:	f7ff ff1d 	bl	800144c <log_event_auto>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000b4 	.word	0x200000b4
 8001620:	0800c374 	.word	0x0800c374
 8001624:	0800c3ec 	.word	0x0800c3ec
 8001628:	0800c380 	.word	0x0800c380
 800162c:	0800c3f8 	.word	0x0800c3f8

08001630 <probe_on_move_probe_level>:
}
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af04      	add	r7, sp, #16
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 800163a:	4a08      	ldr	r2, [pc, #32]	@ (800165c <probe_on_move_probe_level+0x2c>)
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <probe_on_move_probe_level+0x30>)
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <probe_on_move_probe_level+0x34>)
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <probe_on_move_probe_level+0x38>)
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	2200      	movs	r2, #0
 800164c:	2101      	movs	r1, #1
 800164e:	2004      	movs	r0, #4
 8001650:	f7ff fefc 	bl	800144c <log_event_auto>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	0800c404 	.word	0x0800c404
 8001660:	0800c41c 	.word	0x0800c41c
 8001664:	0800c410 	.word	0x0800c410
 8001668:	0800c42c 	.word	0x0800c42c

0800166c <test_spi_service_init>:
#include <string.h>
#include "Services/Test/test_spi_service.h"
#include "Protocol/frame_defs.h"
#include "app.h"

 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
#define TEST_SPI_HELLO_SUFFIX_LEN 4u
#define TEST_SPI_HELLO_MIN_REQ_LEN 7u
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <h_move_queue_add>:
#include "Services/Home/home_service.h"
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7ff ff25 	bl	80014d8 <motion_on_move_queue_add>
	motion_on_move_queue_add(f, l);
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <h_move_queue_status>:
}
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	68b8      	ldr	r0, [r7, #8]
 80016a6:	f7ff ff47 	bl	8001538 <motion_on_move_queue_status>
	motion_on_move_queue_status(f, l);
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <h_start_move>:
}
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68b8      	ldr	r0, [r7, #8]
 80016c2:	f7ff ff5f 	bl	8001584 <motion_on_start_move>
	motion_on_start_move(f, l);
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <h_move_home>:
}
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	68b8      	ldr	r0, [r7, #8]
 80016de:	f7ff faab 	bl	8000c38 <home_on_move_home>
	home_on_move_home(f, l);
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <h_move_probe_level>:
}
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	68b8      	ldr	r0, [r7, #8]
 80016fa:	f7ff ff99 	bl	8001630 <probe_on_move_probe_level>
	probe_on_move_probe_level(f, l);
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <h_move_end>:
}
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	68b8      	ldr	r0, [r7, #8]
 8001716:	f7ff ff67 	bl	80015e8 <motion_on_move_end>
	motion_on_move_end(f, l);
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <h_led_ctrl>:
}
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
	(void) r;
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f7ff fd29 	bl	8001188 <led_on_led_ctrl>
	led_on_led_ctrl(f, l);
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <h_fpga_status>:
}
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
        (void) r;
        (void) f;
        (void) l; /* opcional */
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <services_register_handlers>:
}

 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d018      	beq.n	8001798 <services_register_handlers+0x40>
        (void) r;
        test_spi_on_hello(f, l);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <services_register_handlers+0x4c>)
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a0e      	ldr	r2, [pc, #56]	@ (80017a8 <services_register_handlers+0x50>)
 8001770:	605a      	str	r2, [r3, #4]

 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <services_register_handlers+0x54>)
 8001776:	609a      	str	r2, [r3, #8]
void services_register_handlers(router_handlers_t *h) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <services_register_handlers+0x58>)
 800177c:	60da      	str	r2, [r3, #12]
        if (!h)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <services_register_handlers+0x5c>)
 8001782:	611a      	str	r2, [r3, #16]
                return;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a0c      	ldr	r2, [pc, #48]	@ (80017b8 <services_register_handlers+0x60>)
 8001788:	615a      	str	r2, [r3, #20]
        h->on_move_queue_add = h_move_queue_add;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <services_register_handlers+0x64>)
 800178e:	619a      	str	r2, [r3, #24]
	h->on_move_queue_status = h_move_queue_status;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a0b      	ldr	r2, [pc, #44]	@ (80017c0 <services_register_handlers+0x68>)
 8001794:	61da      	str	r2, [r3, #28]
 8001796:	e000      	b.n	800179a <services_register_handlers+0x42>
        (void) r;
 8001798:	bf00      	nop
	h->on_start_move = h_start_move;
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	0800167b 	.word	0x0800167b
 80017a8:	08001697 	.word	0x08001697
 80017ac:	080016b3 	.word	0x080016b3
 80017b0:	080016cf 	.word	0x080016cf
 80017b4:	080016eb 	.word	0x080016eb
 80017b8:	08001707 	.word	0x08001707
 80017bc:	08001723 	.word	0x08001723
 80017c0:	0800173f 	.word	0x0800173f

080017c4 <app_spi_clean_dcache>:
    uintptr_t start = app_spi_cache_align_down((uintptr_t)addr);
    uintptr_t end = app_spi_cache_align_up((uintptr_t)addr + (uintptr_t)len);
    SCB_CleanDCache_by_Addr((uint32_t *)start, (int32_t)(end - start));
}
#else
static void app_spi_clean_dcache(void *addr, uint32_t len) {
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
    (void)addr;
    (void)len;
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <app_spi_invalidate_dcache>:
    uintptr_t start = app_spi_cache_align_down((uintptr_t)addr);
    uintptr_t end = app_spi_cache_align_up((uintptr_t)addr + (uintptr_t)len);
    SCB_InvalidateDCache_by_Addr((uint32_t *)start, (int32_t)(end - start));
}
#else
static void app_spi_invalidate_dcache(void *addr, uint32_t len) {
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
    (void)addr;
    (void)len;
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <app_init>:
    return (addr + ((uintptr_t)APP_SPI_DCACHE_LINE_SIZE - 1u)) &
           ~((uintptr_t)APP_SPI_DCACHE_LINE_SIZE - 1u);
}
#endif

void app_init(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af04      	add	r7, sp, #16
    led_service_init();
 80017f6:	f7ff fc05 	bl	8001004 <led_service_init>
    log_service_init();
 80017fa:	f7ff fdbb 	bl	8001374 <log_service_init>
    test_spi_service_init();
 80017fe:	f7ff ff35 	bl	800166c <test_spi_service_init>
    LOGT_THIS(LOG_STATE_START, PROTO_OK, "start", "ready");
 8001802:	4a1d      	ldr	r2, [pc, #116]	@ (8001878 <app_init+0x88>)
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <app_init+0x8c>)
 8001806:	9302      	str	r3, [sp, #8]
 8001808:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <app_init+0x90>)
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <app_init+0x94>)
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fe18 	bl	800144c <log_event_auto>

    g_resp_fifo = resp_fifo_create();
 800181c:	f7ff f965 	bl	8000aea <resp_fifo_create>
 8001820:	4603      	mov	r3, r0
 8001822:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <app_init+0x98>)
 8001824:	6013      	str	r3, [r2, #0]
    memset(&g_handlers, 0, sizeof g_handlers);
 8001826:	2224      	movs	r2, #36	@ 0x24
 8001828:	2100      	movs	r1, #0
 800182a:	4818      	ldr	r0, [pc, #96]	@ (800188c <app_init+0x9c>)
 800182c:	f009 fd8e 	bl	800b34c <memset>
    services_register_handlers(&g_handlers);
 8001830:	4816      	ldr	r0, [pc, #88]	@ (800188c <app_init+0x9c>)
 8001832:	f7ff ff91 	bl	8001758 <services_register_handlers>
    router_init(&g_router, g_resp_fifo, &g_handlers);
 8001836:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <app_init+0x98>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a14      	ldr	r2, [pc, #80]	@ (800188c <app_init+0x9c>)
 800183c:	4619      	mov	r1, r3
 800183e:	4814      	ldr	r0, [pc, #80]	@ (8001890 <app_init+0xa0>)
 8001840:	f7fe fff4 	bl	800082c <router_init>

    app_spi_queue_reset();
 8001844:	f000 f940 	bl	8001ac8 <app_spi_queue_reset>
    g_spi_next_status = APP_SPI_STATUS_READY;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <app_init+0xa4>)
 800184a:	22a5      	movs	r2, #165	@ 0xa5
 800184c:	701a      	strb	r2, [r3, #0]
    (void)app_spi_prime_tx_buffer(g_spi_next_status);
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <app_init+0xa4>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f957 	bl	8001b08 <app_spi_prime_tx_buffer>
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, g_spi_tx_dma_buf, g_spi_rx_dma_buf,
 800185a:	232a      	movs	r3, #42	@ 0x2a
 800185c:	4a0e      	ldr	r2, [pc, #56]	@ (8001898 <app_init+0xa8>)
 800185e:	490f      	ldr	r1, [pc, #60]	@ (800189c <app_init+0xac>)
 8001860:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <app_init+0xb0>)
 8001862:	f005 f903 	bl	8006a6c <HAL_SPI_TransmitReceive_DMA>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <app_init+0x82>
                                    (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_need_restart = 1u;
 800186c:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <app_init+0xb4>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
     * "led-control"), já que o mestre interpreta qualquer byte diferente de
     * 0xA5 como início de payload.
     */
    (void)test_spi_send_hello();
#endif
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	0800c440 	.word	0x0800c440
 800187c:	0800c444 	.word	0x0800c444
 8001880:	0800c44c 	.word	0x0800c44c
 8001884:	0800c450 	.word	0x0800c450
 8001888:	20000128 	.word	0x20000128
 800188c:	20000104 	.word	0x20000104
 8001890:	200000bc 	.word	0x200000bc
 8001894:	2000000c 	.word	0x2000000c
 8001898:	2000012c 	.word	0x2000012c
 800189c:	20000158 	.word	0x20000158
 80018a0:	200008f0 	.word	0x200008f0
 80018a4:	20000182 	.word	0x20000182

080018a8 <app_poll>:

void app_poll(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0a0      	sub	sp, #128	@ 0x80
 80018ac:	af04      	add	r7, sp, #16
    app_spi_try_commit_pending_to_active();
 80018ae:	f000 f9a7 	bl	8001c00 <app_spi_try_commit_pending_to_active>

    app_spi_frame_t frame;
    while (app_spi_queue_pop(&frame) == 0) {
 80018b2:	e008      	b.n	80018c6 <app_poll+0x1e>
        router_feed_bytes(&g_router, frame.data, frame.len);
 80018b4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80018b8:	461a      	mov	r2, r3
 80018ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018be:	4619      	mov	r1, r3
 80018c0:	484a      	ldr	r0, [pc, #296]	@ (80019ec <app_poll+0x144>)
 80018c2:	f7ff f8c7 	bl	8000a54 <router_feed_bytes>
    while (app_spi_queue_pop(&frame) == 0) {
 80018c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fb9e 	bl	800200c <app_spi_queue_pop>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0ee      	beq.n	80018b4 <app_poll+0xc>
    }

    app_spi_try_commit_pending_to_active();
 80018d6:	f000 f993 	bl	8001c00 <app_spi_try_commit_pending_to_active>

    if (g_resp_fifo && !g_spi_tx_pending_ready) {
 80018da:	4b45      	ldr	r3, [pc, #276]	@ (80019f0 <app_poll+0x148>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d053      	beq.n	800198a <app_poll+0xe2>
 80018e2:	4b44      	ldr	r3, [pc, #272]	@ (80019f4 <app_poll+0x14c>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d14e      	bne.n	800198a <app_poll+0xe2>
        uint8_t out[APP_SPI_DMA_BUF_LEN];
        int n = resp_fifo_pop(g_resp_fifo, out, sizeof out);
 80018ec:	4b40      	ldr	r3, [pc, #256]	@ (80019f0 <app_poll+0x148>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1d39      	adds	r1, r7, #4
 80018f2:	222a      	movs	r2, #42	@ 0x2a
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f95a 	bl	8000bae <resp_fifo_pop>
 80018fa:	66b8      	str	r0, [r7, #104]	@ 0x68
        if (n > 0 && n <= (int)APP_SPI_DMA_BUF_LEN) {
 80018fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018fe:	2b00      	cmp	r3, #0
 8001900:	dd2f      	ble.n	8001962 <app_poll+0xba>
 8001902:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001904:	2b2a      	cmp	r3, #42	@ 0x2a
 8001906:	dc2c      	bgt.n	8001962 <app_poll+0xba>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001908:	f3ef 8310 	mrs	r3, PRIMASK
 800190c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  return(result);
 800190e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
            uint32_t primask = __get_PRIMASK();
 8001910:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("cpsid i" : : : "memory");
 8001912:	b672      	cpsid	i
}
 8001914:	bf00      	nop
            __disable_irq();
            memset(g_spi_tx_pending_buf, 0, APP_SPI_DMA_BUF_LEN);
 8001916:	222a      	movs	r2, #42	@ 0x2a
 8001918:	2100      	movs	r1, #0
 800191a:	4837      	ldr	r0, [pc, #220]	@ (80019f8 <app_poll+0x150>)
 800191c:	f009 fd16 	bl	800b34c <memset>
            uint16_t pad = (uint16_t)(APP_SPI_DMA_BUF_LEN - (uint16_t)n);
 8001920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001922:	b29b      	uxth	r3, r3
 8001924:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8001928:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            memcpy(&g_spi_tx_pending_buf[pad], out, (uint32_t)n);
 800192c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001930:	4a31      	ldr	r2, [pc, #196]	@ (80019f8 <app_poll+0x150>)
 8001932:	4413      	add	r3, r2
 8001934:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001936:	1d39      	adds	r1, r7, #4
 8001938:	4618      	mov	r0, r3
 800193a:	f009 fd92 	bl	800b462 <memcpy>
            g_spi_tx_pending_len = (uint16_t)APP_SPI_DMA_BUF_LEN;
 800193e:	4b2f      	ldr	r3, [pc, #188]	@ (80019fc <app_poll+0x154>)
 8001940:	222a      	movs	r2, #42	@ 0x2a
 8001942:	801a      	strh	r2, [r3, #0]
            g_spi_tx_pending_ready = 1u;
 8001944:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <app_poll+0x14c>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
            g_spi_restart_defer = 0u;
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <app_poll+0x158>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
            g_spi_restart_defer_ticks = 0u;
 8001950:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <app_poll+0x15c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
            if (primask == 0u) {
 8001956:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001958:	2b00      	cmp	r3, #0
 800195a:	d115      	bne.n	8001988 <app_poll+0xe0>
  __ASM volatile ("cpsie i" : : : "memory");
 800195c:	b662      	cpsie	i
}
 800195e:	bf00      	nop
        if (n > 0 && n <= (int)APP_SPI_DMA_BUF_LEN) {
 8001960:	e012      	b.n	8001988 <app_poll+0xe0>
                __enable_irq();
            }
        } else if (n == PROTO_ERR_RANGE) {
 8001962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001964:	f113 0f04 	cmn.w	r3, #4
 8001968:	d10f      	bne.n	800198a <app_poll+0xe2>
            LOGT_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "spi_tx", "resp too large for dma frame");
 800196a:	4a27      	ldr	r2, [pc, #156]	@ (8001a08 <app_poll+0x160>)
 800196c:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <app_poll+0x164>)
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <app_poll+0x168>)
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <app_poll+0x16c>)
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	f06f 0203 	mvn.w	r2, #3
 800197e:	2164      	movs	r1, #100	@ 0x64
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff fd63 	bl	800144c <log_event_auto>
 8001986:	e000      	b.n	800198a <app_poll+0xe2>
        if (n > 0 && n <= (int)APP_SPI_DMA_BUF_LEN) {
 8001988:	bf00      	nop
        }
    }

    app_spi_try_commit_pending_to_active();
 800198a:	f000 f939 	bl	8001c00 <app_spi_try_commit_pending_to_active>

    app_spi_try_restart_dma();
 800198e:	f000 fa3f 	bl	8001e10 <app_spi_try_restart_dma>

    if (g_spi_rx_error != APP_SPI_RX_STATUS_NONE) {
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <app_poll+0x170>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d022      	beq.n	80019e2 <app_poll+0x13a>
        uint8_t reason = g_spi_rx_error;
 800199c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <app_poll+0x170>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
        g_spi_rx_error = APP_SPI_RX_STATUS_NONE;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <app_poll+0x170>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
        const char *tag = "overflow reason=invalid_frame";
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <app_poll+0x174>)
 80019ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if (reason == APP_SPI_RX_OVERFLOW_QUEUE_FULL) {
 80019ae:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <app_poll+0x114>
            tag = "overflow reason=queue_full";
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <app_poll+0x178>)
 80019b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019ba:	e005      	b.n	80019c8 <app_poll+0x120>
        } else if (reason != APP_SPI_RX_OVERFLOW_INVALID_FRAME) {
 80019bc:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d001      	beq.n	80019c8 <app_poll+0x120>
            tag = "overflow reason=unknown";
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <app_poll+0x17c>)
 80019c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        LOGT_THIS(LOG_STATE_ERROR, PROTO_WARN, "spi_rx", tag);
 80019c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a08 <app_poll+0x160>)
 80019ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <app_poll+0x168>)
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <app_poll+0x180>)
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4613      	mov	r3, r2
 80019d8:	2201      	movs	r2, #1
 80019da:	2164      	movs	r1, #100	@ 0x64
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fd35 	bl	800144c <log_event_auto>
    }
}
 80019e2:	bf00      	nop
 80019e4:	3770      	adds	r7, #112	@ 0x70
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200000bc 	.word	0x200000bc
 80019f0:	20000128 	.word	0x20000128
 80019f4:	200008ec 	.word	0x200008ec
 80019f8:	200008c0 	.word	0x200008c0
 80019fc:	200008ea 	.word	0x200008ea
 8001a00:	200008ed 	.word	0x200008ed
 8001a04:	200008ee 	.word	0x200008ee
 8001a08:	0800c440 	.word	0x0800c440
 8001a0c:	0800c458 	.word	0x0800c458
 8001a10:	0800c44c 	.word	0x0800c44c
 8001a14:	0800c478 	.word	0x0800c478
 8001a18:	200008bf 	.word	0x200008bf
 8001a1c:	0800c480 	.word	0x0800c480
 8001a20:	0800c4a0 	.word	0x0800c4a0
 8001a24:	0800c4bc 	.word	0x0800c4bc
 8001a28:	0800c4d4 	.word	0x0800c4d4

08001a2c <app_on_spi_txrx_half_complete>:

void app_on_spi_txrx_half_complete(SPI_HandleTypeDef *h) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <app_on_spi_txrx_half_complete+0x1e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <app_on_spi_txrx_half_complete+0x2c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d102      	bne.n	8001a4a <app_on_spi_txrx_half_complete+0x1e>
        /* Reserva o handshake para sinalizar BUSY até concluir o tratamento atual */
        g_spi_next_status = APP_SPI_STATUS_BUSY;
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <app_on_spi_txrx_half_complete+0x30>)
 8001a46:	225a      	movs	r2, #90	@ 0x5a
 8001a48:	701a      	strb	r2, [r3, #0]
    }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40013000 	.word	0x40013000
 8001a5c:	2000000c 	.word	0x2000000c

08001a60 <app_on_spi_txrx_complete>:

void app_on_spi_txrx_complete(SPI_HandleTypeDef *h) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    if (h && h->Instance == SPI1) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <app_on_spi_txrx_complete+0x1c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <app_on_spi_txrx_complete+0x24>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <app_on_spi_txrx_complete+0x1c>
        app_spi_handle_txrx_complete();
 8001a78:	f000 fb22 	bl	80020c0 <app_spi_handle_txrx_complete>
    }
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40013000 	.word	0x40013000

08001a88 <app_resp_push>:

void app_on_spi_tx_complete(SPI_HandleTypeDef *h) {
    (void)h;
}

int app_resp_push(const uint8_t *frame, uint32_t len) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0) {
 8001a92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <app_resp_push+0x3c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <app_resp_push+0x1e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <app_resp_push+0x1e>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <app_resp_push+0x24>
        return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e007      	b.n	8001abc <app_resp_push+0x34>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <app_resp_push+0x3c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f826 	bl	8000b06 <resp_fifo_push>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000128 	.word	0x20000128

08001ac8 <app_spi_queue_reset>:

static void app_spi_queue_reset(void) {
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
    __disable_irq();
    g_spi_rx_queue_head = 0u;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <app_spi_queue_reset+0x30>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_tail = 0u;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <app_spi_queue_reset+0x34>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_count = 0u;
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <app_spi_queue_reset+0x38>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
    g_spi_rx_error = APP_SPI_RX_STATUS_NONE;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <app_spi_queue_reset+0x3c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ae8:	b662      	cpsie	i
}
 8001aea:	bf00      	nop
    __enable_irq();
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200008bc 	.word	0x200008bc
 8001afc:	200008bd 	.word	0x200008bd
 8001b00:	200008be 	.word	0x200008be
 8001b04:	200008bf 	.word	0x200008bf

08001b08 <app_spi_prime_tx_buffer>:
 *  - has_pending: flag que sinaliza se há dados pendentes disponíveis para
 *                 transmissão.
 *  - pending_len: quantidade de bytes válidos armazenados no buffer pendente
 *                 que podem ser copiados para o DMA.
 */
static uint8_t app_spi_prime_tx_buffer(uint8_t status) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b096      	sub	sp, #88	@ 0x58
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
    uint8_t pending_copy[APP_SPI_DMA_BUF_LEN];
    uint16_t pending_len = 0u;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint8_t has_pending = 0u;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8001b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c

    uint32_t primask = __get_PRIMASK();
 8001b26:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
    __disable_irq();
    if (g_spi_tx_pending_ready && g_spi_tx_pending_len > 0u &&
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <app_spi_prime_tx_buffer+0xcc>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d018      	beq.n	8001b68 <app_spi_prime_tx_buffer+0x60>
 8001b36:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <app_spi_prime_tx_buffer+0xd0>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <app_spi_prime_tx_buffer+0x60>
        g_spi_tx_pending_len <= APP_SPI_DMA_BUF_LEN) {
 8001b40:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <app_spi_prime_tx_buffer+0xd0>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
    if (g_spi_tx_pending_ready && g_spi_tx_pending_len > 0u &&
 8001b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b48:	d80e      	bhi.n	8001b68 <app_spi_prime_tx_buffer+0x60>
        pending_len = g_spi_tx_pending_len;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <app_spi_prime_tx_buffer+0xd0>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        memcpy(pending_copy, g_spi_tx_pending_buf, pending_len);
 8001b52:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	4920      	ldr	r1, [pc, #128]	@ (8001bdc <app_spi_prime_tx_buffer+0xd4>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f009 fc80 	bl	800b462 <memcpy>
        has_pending = 1u;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    }
    if (primask == 0u) {
 8001b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <app_spi_prime_tx_buffer+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b6e:	b662      	cpsie	i
}
 8001b70:	bf00      	nop
        __enable_irq();
    }

    uint8_t primed_status = status;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    if (has_pending && pending_len > 0u) {
 8001b78:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <app_spi_prime_tx_buffer+0x86>
 8001b80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <app_spi_prime_tx_buffer+0x86>
         * ciclo (por exemplo, durante o half-transfer do DMA), o fato de já
         * existir um frame pronto indica que estamos aptos a responder.
         * Forçar READY evita que o byte 0 (preenchimento) herde 0x5A e o host
         * interprete erroneamente a resposta como "ocupado" antes do header.
         */
        primed_status = APP_SPI_STATUS_READY;
 8001b88:	23a5      	movs	r3, #165	@ 0xa5
 8001b8a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    }

    app_spi_handshake_prime_args_t args = {
 8001b8e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001b92:	733b      	strb	r3, [r7, #12]
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <app_spi_prime_tx_buffer+0xd8>)
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	232a      	movs	r3, #42	@ 0x2a
 8001b9a:	82bb      	strh	r3, [r7, #20]
        .status_byte = primed_status,
        .tx_buf = g_spi_tx_dma_buf,
        .tx_len = APP_SPI_DMA_BUF_LEN,
        .response_buf = has_pending ? pending_copy : NULL,
 8001b9c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <app_spi_prime_tx_buffer+0xa2>
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	e000      	b.n	8001bac <app_spi_prime_tx_buffer+0xa4>
 8001baa:	2300      	movs	r3, #0
    app_spi_handshake_prime_args_t args = {
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001bb2:	83bb      	strh	r3, [r7, #28]
        .response_len = pending_len,
    };

    app_spi_handshake_prime_result_t result = app_spi_handshake_prime(&args);
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fafc 	bl	80021b6 <app_spi_handshake_prime>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	813b      	strh	r3, [r7, #8]

    app_spi_clean_dcache(g_spi_tx_dma_buf, APP_SPI_DMA_BUF_LEN);
 8001bc2:	212a      	movs	r1, #42	@ 0x2a
 8001bc4:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <app_spi_prime_tx_buffer+0xd8>)
 8001bc6:	f7ff fdfd 	bl	80017c4 <app_spi_clean_dcache>
    return result.consumed_response;
 8001bca:	7a7b      	ldrb	r3, [r7, #9]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3758      	adds	r7, #88	@ 0x58
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200008ec 	.word	0x200008ec
 8001bd8:	200008ea 	.word	0x200008ea
 8001bdc:	200008c0 	.word	0x200008c0
 8001be0:	20000158 	.word	0x20000158

08001be4 <app_spi_compute_status>:
 *  1. Compara a quantidade de quadros pendentes com a profundidade máxima da
 *     fila.
 *  2. Retorna BUSY quando a fila está cheia para impedir novos envios do
 *     mestre até que os dados sejam processados; caso contrário retorna READY.
 */
static uint8_t app_spi_compute_status(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    return app_spi_handshake_compute_status(g_spi_rx_queue_count,
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <app_spi_compute_status+0x18>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	212a      	movs	r1, #42	@ 0x2a
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 facb 	bl	800218c <app_spi_handshake_compute_status>
 8001bf6:	4603      	mov	r3, r0
                                            APP_SPI_RX_QUEUE_DEPTH);
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200008be 	.word	0x200008be

08001c00 <app_spi_try_commit_pending_to_active>:
 *     e higieniza o cache para que o periférico enxergue o conteúdo atualizado.
 *  4. Se o canal estiver desabilitado, apenas sinaliza a necessidade de
 *     reinício para que a rotina regular reprograme o DMA reutilizando o
 *     payload pendente.
 */
static void app_spi_try_commit_pending_to_active(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b098      	sub	sp, #96	@ 0x60
 8001c04:	af00      	add	r7, sp, #0
    uint8_t pending_copy[APP_SPI_DMA_BUF_LEN];
    uint16_t pending_len = 0u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t should_commit = 0u;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t request_restart = 0u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c18:	f3ef 8310 	mrs	r3, PRIMASK
 8001c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    uint32_t primask = __get_PRIMASK();
 8001c20:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("cpsid i" : : : "memory");
 8001c22:	b672      	cpsid	i
}
 8001c24:	bf00      	nop
    __disable_irq();

    DMA_Channel_TypeDef *tx_dma = hdma_spi1_tx.Instance;
 8001c26:	4b4c      	ldr	r3, [pc, #304]	@ (8001d58 <app_spi_try_commit_pending_to_active+0x158>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t status_byte = g_spi_next_status;
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d5c <app_spi_try_commit_pending_to_active+0x15c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (g_spi_tx_pending_ready && g_spi_tx_pending_len > 0u &&
 8001c34:	4b4a      	ldr	r3, [pc, #296]	@ (8001d60 <app_spi_try_commit_pending_to_active+0x160>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d035      	beq.n	8001caa <app_spi_try_commit_pending_to_active+0xaa>
 8001c3e:	4b49      	ldr	r3, [pc, #292]	@ (8001d64 <app_spi_try_commit_pending_to_active+0x164>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d030      	beq.n	8001caa <app_spi_try_commit_pending_to_active+0xaa>
        g_spi_tx_pending_len <= APP_SPI_DMA_BUF_LEN && tx_dma != NULL) {
 8001c48:	4b46      	ldr	r3, [pc, #280]	@ (8001d64 <app_spi_try_commit_pending_to_active+0x164>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
    if (g_spi_tx_pending_ready && g_spi_tx_pending_len > 0u &&
 8001c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c50:	d82b      	bhi.n	8001caa <app_spi_try_commit_pending_to_active+0xaa>
        g_spi_tx_pending_len <= APP_SPI_DMA_BUF_LEN && tx_dma != NULL) {
 8001c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d028      	beq.n	8001caa <app_spi_try_commit_pending_to_active+0xaa>
        uint32_t dma_enabled = tx_dma->CCR & DMA_CCR_EN;
 8001c58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (dma_enabled == 0u) {
 8001c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <app_spi_try_commit_pending_to_active+0x70>
            request_restart = 1u;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8001c6e:	e006      	b.n	8001c7e <app_spi_try_commit_pending_to_active+0x7e>
        } else if (tx_dma->CNDTR == APP_SPI_DMA_BUF_LEN) {
 8001c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c76:	d102      	bne.n	8001c7e <app_spi_try_commit_pending_to_active+0x7e>
            should_commit = 1u;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        }

        if (should_commit) {
 8001c7e:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d011      	beq.n	8001caa <app_spi_try_commit_pending_to_active+0xaa>
            pending_len = g_spi_tx_pending_len;
 8001c86:	4b37      	ldr	r3, [pc, #220]	@ (8001d64 <app_spi_try_commit_pending_to_active+0x164>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            memcpy(pending_copy, g_spi_tx_pending_buf, pending_len);
 8001c8e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	4934      	ldr	r1, [pc, #208]	@ (8001d68 <app_spi_try_commit_pending_to_active+0x168>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f009 fbe2 	bl	800b462 <memcpy>
            g_spi_tx_pending_ready = 0u;
 8001c9e:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <app_spi_try_commit_pending_to_active+0x160>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
            g_spi_tx_pending_len = 0u;
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <app_spi_try_commit_pending_to_active+0x164>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	801a      	strh	r2, [r3, #0]
        }
    }

    if (!should_commit) {
 8001caa:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <app_spi_try_commit_pending_to_active+0xcc>
        if (primask == 0u) {
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <app_spi_try_commit_pending_to_active+0xbc>
  __ASM volatile ("cpsie i" : : : "memory");
 8001cb8:	b662      	cpsie	i
}
 8001cba:	bf00      	nop
            __enable_irq();
        }
        if (request_restart) {
 8001cbc:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d045      	beq.n	8001d50 <app_spi_try_commit_pending_to_active+0x150>
            g_spi_need_restart = 1u;
 8001cc4:	4b29      	ldr	r3, [pc, #164]	@ (8001d6c <app_spi_try_commit_pending_to_active+0x16c>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e042      	b.n	8001d52 <app_spi_try_commit_pending_to_active+0x152>
        }
        return;
    }

    uint8_t primed_status = status_byte;
 8001ccc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cd0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    if (pending_len > 0u) {
 8001cd4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <app_spi_try_commit_pending_to_active+0xe2>
         * O canal possui uma resposta pronta e ainda não transmitiu nenhum
         * byte desta rodada. Ao sinalizar READY garantimos que o preenchimento
         * no início do quadro seja zerado, impedindo que o mestre observe
         * 0x5A (BUSY) antes do header 0xAB ao efetuar o polling.
         */
        primed_status = APP_SPI_STATUS_READY;
 8001cdc:	23a5      	movs	r3, #165	@ 0xa5
 8001cde:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    }

    app_spi_handshake_prime_args_t args = {
 8001ce2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001ce6:	713b      	strb	r3, [r7, #4]
 8001ce8:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <app_spi_try_commit_pending_to_active+0x170>)
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	232a      	movs	r3, #42	@ 0x2a
 8001cee:	81bb      	strh	r3, [r7, #12]
 8001cf0:	f107 0318 	add.w	r3, r7, #24
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001cfa:	82bb      	strh	r3, [r7, #20]
        .tx_len = APP_SPI_DMA_BUF_LEN,
        .response_buf = pending_copy,
        .response_len = pending_len,
    };

    app_spi_handshake_prime_result_t result = app_spi_handshake_prime(&args);
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fa59 	bl	80021b6 <app_spi_handshake_prime>
 8001d04:	4603      	mov	r3, r0
 8001d06:	803b      	strh	r3, [r7, #0]

    if (result.consumed_response) {
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <app_spi_try_commit_pending_to_active+0x118>
        app_spi_clean_dcache(g_spi_tx_dma_buf, APP_SPI_DMA_BUF_LEN);
 8001d0e:	212a      	movs	r1, #42	@ 0x2a
 8001d10:	4817      	ldr	r0, [pc, #92]	@ (8001d70 <app_spi_try_commit_pending_to_active+0x170>)
 8001d12:	f7ff fd57 	bl	80017c4 <app_spi_clean_dcache>
 8001d16:	e00e      	b.n	8001d36 <app_spi_try_commit_pending_to_active+0x136>
    } else {
        memcpy(g_spi_tx_pending_buf, pending_copy, pending_len);
 8001d18:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4811      	ldr	r0, [pc, #68]	@ (8001d68 <app_spi_try_commit_pending_to_active+0x168>)
 8001d24:	f009 fb9d 	bl	800b462 <memcpy>
        g_spi_tx_pending_len = pending_len;
 8001d28:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <app_spi_try_commit_pending_to_active+0x164>)
 8001d2a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001d2e:	8013      	strh	r3, [r2, #0]
        g_spi_tx_pending_ready = 1u;
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <app_spi_try_commit_pending_to_active+0x160>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
    }

    if (primask == 0u) {
 8001d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <app_spi_try_commit_pending_to_active+0x140>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3c:	b662      	cpsie	i
}
 8001d3e:	bf00      	nop
        __enable_irq();
    }

    if (request_restart) {
 8001d40:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <app_spi_try_commit_pending_to_active+0x152>
        g_spi_need_restart = 1u;
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <app_spi_try_commit_pending_to_active+0x16c>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	e000      	b.n	8001d52 <app_spi_try_commit_pending_to_active+0x152>
        return;
 8001d50:	bf00      	nop
    }
}
 8001d52:	3760      	adds	r7, #96	@ 0x60
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000099c 	.word	0x2000099c
 8001d5c:	2000000c 	.word	0x2000000c
 8001d60:	200008ec 	.word	0x200008ec
 8001d64:	200008ea 	.word	0x200008ea
 8001d68:	200008c0 	.word	0x200008c0
 8001d6c:	20000182 	.word	0x20000182
 8001d70:	20000158 	.word	0x20000158

08001d74 <app_spi_restart_dma>:
 *     tarde.
 *  2. Após preparar o buffer, verifica o resultado de HAL_SPI_TransmitReceive_DMA
 *     para distinguir sucesso (limpando indicadores pendentes) de falha
 *     (marcando que outro restart será necessário).
 */
static void app_spi_restart_dma(uint8_t status) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001d7e:	481d      	ldr	r0, [pc, #116]	@ (8001df4 <app_spi_restart_dma+0x80>)
 8001d80:	f005 f936 	bl	8006ff0 <HAL_SPI_GetState>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d003      	beq.n	8001d92 <app_spi_restart_dma+0x1e>
        g_spi_need_restart = 1u;
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <app_spi_restart_dma+0x84>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
        return;
 8001d90:	e02c      	b.n	8001dec <app_spi_restart_dma+0x78>
    }

    g_spi_next_status = status;
 8001d92:	4a1a      	ldr	r2, [pc, #104]	@ (8001dfc <app_spi_restart_dma+0x88>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	7013      	strb	r3, [r2, #0]
    uint8_t used_pending = app_spi_prime_tx_buffer(status);
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff feb4 	bl	8001b08 <app_spi_prime_tx_buffer>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, g_spi_tx_dma_buf, g_spi_rx_dma_buf,
 8001da4:	232a      	movs	r3, #42	@ 0x2a
 8001da6:	4a16      	ldr	r2, [pc, #88]	@ (8001e00 <app_spi_restart_dma+0x8c>)
 8001da8:	4916      	ldr	r1, [pc, #88]	@ (8001e04 <app_spi_restart_dma+0x90>)
 8001daa:	4812      	ldr	r0, [pc, #72]	@ (8001df4 <app_spi_restart_dma+0x80>)
 8001dac:	f004 fe5e 	bl	8006a6c <HAL_SPI_TransmitReceive_DMA>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d117      	bne.n	8001de6 <app_spi_restart_dma+0x72>
                                    (uint16_t)APP_SPI_DMA_BUF_LEN) == HAL_OK) {
        g_spi_need_restart = 0u;
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <app_spi_restart_dma+0x84>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
        if (used_pending) {
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d014      	beq.n	8001dec <app_spi_restart_dma+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8001dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
            uint32_t primask = __get_PRIMASK();
 8001dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
            __disable_irq();
            g_spi_tx_pending_ready = 0u;
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <app_spi_restart_dma+0x94>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
            g_spi_tx_pending_len = 0u;
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <app_spi_restart_dma+0x98>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	801a      	strh	r2, [r3, #0]
            if (primask == 0u) {
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d104      	bne.n	8001dec <app_spi_restart_dma+0x78>
  __ASM volatile ("cpsie i" : : : "memory");
 8001de2:	b662      	cpsie	i
}
 8001de4:	e002      	b.n	8001dec <app_spi_restart_dma+0x78>
                __enable_irq();
            }
        }
    } else {
        g_spi_need_restart = 1u;
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <app_spi_restart_dma+0x84>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
    }
}
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200008f0 	.word	0x200008f0
 8001df8:	20000182 	.word	0x20000182
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	2000012c 	.word	0x2000012c
 8001e04:	20000158 	.word	0x20000158
 8001e08:	200008ec 	.word	0x200008ec
 8001e0c:	200008ea 	.word	0x200008ea

08001e10 <app_spi_try_restart_dma>:

static void app_spi_try_restart_dma(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
    if (!g_spi_need_restart) {
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <app_spi_try_restart_dma+0x6c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d029      	beq.n	8001e72 <app_spi_try_restart_dma+0x62>
        return;
    }

    if (g_spi_restart_defer && !g_spi_tx_pending_ready) {
 8001e1e:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <app_spi_try_restart_dma+0x70>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d014      	beq.n	8001e52 <app_spi_try_restart_dma+0x42>
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <app_spi_try_restart_dma+0x74>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10f      	bne.n	8001e52 <app_spi_try_restart_dma+0x42>
        if (g_spi_restart_defer_ticks < APP_SPI_RESTART_DEFER_MAX) {
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <app_spi_try_restart_dma+0x78>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d107      	bne.n	8001e4c <app_spi_try_restart_dma+0x3c>
            g_spi_restart_defer_ticks++;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <app_spi_try_restart_dma+0x78>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <app_spi_try_restart_dma+0x78>)
 8001e48:	701a      	strb	r2, [r3, #0]
            return;
 8001e4a:	e015      	b.n	8001e78 <app_spi_try_restart_dma+0x68>
        }
        g_spi_restart_defer = 0u;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <app_spi_try_restart_dma+0x70>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
    }

    g_spi_restart_defer_ticks = 0u;
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <app_spi_try_restart_dma+0x78>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001e58:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <app_spi_try_restart_dma+0x7c>)
 8001e5a:	f005 f8c9 	bl	8006ff0 <HAL_SPI_GetState>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <app_spi_try_restart_dma+0x66>
        return;
    }

    app_spi_restart_dma(g_spi_next_status);
 8001e64:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <app_spi_try_restart_dma+0x80>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff82 	bl	8001d74 <app_spi_restart_dma>
 8001e70:	e002      	b.n	8001e78 <app_spi_try_restart_dma+0x68>
        return;
 8001e72:	bf00      	nop
 8001e74:	e000      	b.n	8001e78 <app_spi_try_restart_dma+0x68>
        return;
 8001e76:	bf00      	nop
}
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000182 	.word	0x20000182
 8001e80:	200008ed 	.word	0x200008ed
 8001e84:	200008ec 	.word	0x200008ec
 8001e88:	200008ee 	.word	0x200008ee
 8001e8c:	200008f0 	.word	0x200008f0
 8001e90:	2000000c 	.word	0x2000000c

08001e94 <app_spi_locate_frame>:

static app_spi_frame_search_result_t app_spi_locate_frame(const uint8_t *buf,
                                                          uint16_t *offset,
                                                          uint16_t *len) {
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
    if (!buf || !offset || !len || APP_SPI_DMA_BUF_LEN < 2u) {
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <app_spi_locate_frame+0x1e>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <app_spi_locate_frame+0x1e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <app_spi_locate_frame+0x22>
        return APP_SPI_FRAME_NOT_FOUND;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e037      	b.n	8001f26 <app_spi_locate_frame+0x92>
    }

    uint16_t start = 0u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	82fb      	strh	r3, [r7, #22]
    /* O mestre envia APP_SPI_CLIENT_POLL_BYTE durante o polling; aqui
     * caminhamos até localizar de fato o header 0xAA ignorando esses bytes. */
    while (start < APP_SPI_DMA_BUF_LEN && buf[start] != REQ_HEADER) {
 8001eba:	e002      	b.n	8001ec2 <app_spi_locate_frame+0x2e>
        ++start;
 8001ebc:	8afb      	ldrh	r3, [r7, #22]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	82fb      	strh	r3, [r7, #22]
    while (start < APP_SPI_DMA_BUF_LEN && buf[start] != REQ_HEADER) {
 8001ec2:	8afb      	ldrh	r3, [r7, #22]
 8001ec4:	2b29      	cmp	r3, #41	@ 0x29
 8001ec6:	d805      	bhi.n	8001ed4 <app_spi_locate_frame+0x40>
 8001ec8:	8afb      	ldrh	r3, [r7, #22]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4413      	add	r3, r2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2baa      	cmp	r3, #170	@ 0xaa
 8001ed2:	d1f3      	bne.n	8001ebc <app_spi_locate_frame+0x28>
    }

    if (start >= APP_SPI_DMA_BUF_LEN) {
 8001ed4:	8afb      	ldrh	r3, [r7, #22]
 8001ed6:	2b29      	cmp	r3, #41	@ 0x29
 8001ed8:	d901      	bls.n	8001ede <app_spi_locate_frame+0x4a>
        return APP_SPI_FRAME_NOT_FOUND;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e023      	b.n	8001f26 <app_spi_locate_frame+0x92>
    }

    for (uint16_t i = (uint16_t)(start + 1u); i < APP_SPI_DMA_BUF_LEN; ++i) {
 8001ede:	8afb      	ldrh	r3, [r7, #22]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	82bb      	strh	r3, [r7, #20]
 8001ee4:	e01b      	b.n	8001f1e <app_spi_locate_frame+0x8a>
        if (buf[i] == REQ_TAIL) {
 8001ee6:	8abb      	ldrh	r3, [r7, #20]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b55      	cmp	r3, #85	@ 0x55
 8001ef0:	d112      	bne.n	8001f18 <app_spi_locate_frame+0x84>
            uint16_t frame_len = (uint16_t)(i - start + 1u);
 8001ef2:	8aba      	ldrh	r2, [r7, #20]
 8001ef4:	8afb      	ldrh	r3, [r7, #22]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	827b      	strh	r3, [r7, #18]
            if (frame_len > APP_SPI_MAX_REQUEST_LEN) {
 8001efe:	8a7b      	ldrh	r3, [r7, #18]
 8001f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f02:	d901      	bls.n	8001f08 <app_spi_locate_frame+0x74>
                return APP_SPI_FRAME_INVALID;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e00e      	b.n	8001f26 <app_spi_locate_frame+0x92>
            }
            *offset = start;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	8afa      	ldrh	r2, [r7, #22]
 8001f0c:	801a      	strh	r2, [r3, #0]
            *len = frame_len;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8a7a      	ldrh	r2, [r7, #18]
 8001f12:	801a      	strh	r2, [r3, #0]
            return APP_SPI_FRAME_FOUND;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e006      	b.n	8001f26 <app_spi_locate_frame+0x92>
    for (uint16_t i = (uint16_t)(start + 1u); i < APP_SPI_DMA_BUF_LEN; ++i) {
 8001f18:	8abb      	ldrh	r3, [r7, #20]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	82bb      	strh	r3, [r7, #20]
 8001f1e:	8abb      	ldrh	r3, [r7, #20]
 8001f20:	2b29      	cmp	r3, #41	@ 0x29
 8001f22:	d9e0      	bls.n	8001ee6 <app_spi_locate_frame+0x52>
        }
    }

    return APP_SPI_FRAME_PARTIAL;
 8001f24:	2302      	movs	r3, #2
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <app_spi_queue_push_isr>:
 *     erro para sinalizar overflow.
 *  3. Copia os bytes do quadro para o slot atual da fila, registra o
 *     comprimento recebido e atualiza os ponteiros circulares e o contador
 *     de itens enfileirados.
 */
static int app_spi_queue_push_isr(const uint8_t *frame, uint16_t len) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
    if (!frame || len == 0u || len > APP_SPI_MAX_REQUEST_LEN) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <app_spi_queue_push_isr+0x1e>
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <app_spi_queue_push_isr+0x1e>
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f50:	d902      	bls.n	8001f58 <app_spi_queue_push_isr+0x24>
        return -1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e032      	b.n	8001fbe <app_spi_queue_push_isr+0x8a>
    }
    if (g_spi_rx_queue_count >= APP_SPI_RX_QUEUE_DEPTH) {
 8001f58:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <app_spi_queue_push_isr+0x94>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b29      	cmp	r3, #41	@ 0x29
 8001f60:	d902      	bls.n	8001f68 <app_spi_queue_push_isr+0x34>
        return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e02a      	b.n	8001fbe <app_spi_queue_push_isr+0x8a>
    }
    app_spi_frame_t *slot = &g_spi_rx_queue[g_spi_rx_queue_head];
 8001f68:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <app_spi_queue_push_isr+0x98>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	232c      	movs	r3, #44	@ 0x2c
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a16      	ldr	r2, [pc, #88]	@ (8001fd0 <app_spi_queue_push_isr+0x9c>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    memcpy(slot->data, frame, len);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f009 fa6d 	bl	800b462 <memcpy>
    slot->len = len;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    g_spi_rx_queue_head = (uint8_t)((g_spi_rx_queue_head + 1u) % APP_SPI_RX_QUEUE_DEPTH);
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <app_spi_queue_push_isr+0x98>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	0853      	lsrs	r3, r2, #1
 8001f98:	490e      	ldr	r1, [pc, #56]	@ (8001fd4 <app_spi_queue_push_isr+0xa0>)
 8001f9a:	fba1 1303 	umull	r1, r3, r1, r3
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	212a      	movs	r1, #42	@ 0x2a
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <app_spi_queue_push_isr+0x98>)
 8001fac:	701a      	strb	r2, [r3, #0]
    g_spi_rx_queue_count++;
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <app_spi_queue_push_isr+0x94>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <app_spi_queue_push_isr+0x94>)
 8001fba:	701a      	strb	r2, [r3, #0]
    return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200008be 	.word	0x200008be
 8001fcc:	200008bc 	.word	0x200008bc
 8001fd0:	20000184 	.word	0x20000184
 8001fd4:	30c30c31 	.word	0x30c30c31

08001fd8 <app_spi_record_rx_error>:

static void app_spi_record_rx_error(app_spi_rx_error_t reason) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
    if (reason == APP_SPI_RX_STATUS_NONE) {
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <app_spi_record_rx_error+0x22>
        return;
    }
    if (g_spi_rx_error == APP_SPI_RX_STATUS_NONE) {
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <app_spi_record_rx_error+0x30>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d104      	bne.n	8001ffc <app_spi_record_rx_error+0x24>
        g_spi_rx_error = (uint8_t)reason;
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <app_spi_record_rx_error+0x30>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	7013      	strb	r3, [r2, #0]
 8001ff8:	e000      	b.n	8001ffc <app_spi_record_rx_error+0x24>
        return;
 8001ffa:	bf00      	nop
    }
}
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	200008bf 	.word	0x200008bf

0800200c <app_spi_queue_pop>:

static int app_spi_queue_pop(app_spi_frame_t *out) {
 800200c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    int rc = -1;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
 8002018:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800201a:	b672      	cpsid	i
}
 800201c:	bf00      	nop
    __disable_irq();
    if (g_spi_rx_queue_count > 0u) {
 800201e:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <app_spi_queue_pop+0xa4>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d03b      	beq.n	80020a0 <app_spi_queue_pop+0x94>
        if (out) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d01f      	beq.n	800206e <app_spi_queue_pop+0x62>
            *out = g_spi_rx_queue[g_spi_rx_queue_tail];
 800202e:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <app_spi_queue_pop+0xa8>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4a1f      	ldr	r2, [pc, #124]	@ (80020b8 <app_spi_queue_pop+0xac>)
 800203a:	232c      	movs	r3, #44	@ 0x2c
 800203c:	fb00 f303 	mul.w	r3, r0, r3
 8002040:	4413      	add	r3, r2
 8002042:	461c      	mov	r4, r3
 8002044:	468c      	mov	ip, r1
 8002046:	f104 0e20 	add.w	lr, r4, #32
 800204a:	4665      	mov	r5, ip
 800204c:	4626      	mov	r6, r4
 800204e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002050:	6028      	str	r0, [r5, #0]
 8002052:	6069      	str	r1, [r5, #4]
 8002054:	60aa      	str	r2, [r5, #8]
 8002056:	60eb      	str	r3, [r5, #12]
 8002058:	3410      	adds	r4, #16
 800205a:	f10c 0c10 	add.w	ip, ip, #16
 800205e:	4574      	cmp	r4, lr
 8002060:	d1f3      	bne.n	800204a <app_spi_queue_pop+0x3e>
 8002062:	4665      	mov	r5, ip
 8002064:	4623      	mov	r3, r4
 8002066:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002068:	6028      	str	r0, [r5, #0]
 800206a:	6069      	str	r1, [r5, #4]
 800206c:	60aa      	str	r2, [r5, #8]
        }
        g_spi_rx_queue_tail = (uint8_t)((g_spi_rx_queue_tail + 1u) % APP_SPI_RX_QUEUE_DEPTH);
 800206e:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <app_spi_queue_pop+0xa8>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	0853      	lsrs	r3, r2, #1
 8002078:	4910      	ldr	r1, [pc, #64]	@ (80020bc <app_spi_queue_pop+0xb0>)
 800207a:	fba1 1303 	umull	r1, r3, r1, r3
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	212a      	movs	r1, #42	@ 0x2a
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <app_spi_queue_pop+0xa8>)
 800208c:	701a      	strb	r2, [r3, #0]
        g_spi_rx_queue_count--;
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <app_spi_queue_pop+0xa4>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <app_spi_queue_pop+0xa4>)
 800209a:	701a      	strb	r2, [r3, #0]
        rc = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80020a0:	b662      	cpsie	i
}
 80020a2:	bf00      	nop
    }
    __enable_irq();
    return rc;
 80020a4:	68fb      	ldr	r3, [r7, #12]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200008be 	.word	0x200008be
 80020b4:	200008bd 	.word	0x200008bd
 80020b8:	20000184 	.word	0x20000184
 80020bc:	30c30c31 	.word	0x30c30c31

080020c0 <app_spi_handle_txrx_complete>:
 *  - Após decidir o próximo status, adiamos o reinício do DMA para o laço
 *    principal (`app_poll`), permitindo que qualquer mensagem recém-enfileirada
 *    pelos serviços seja aplicada ao buffer ativo antes que o Raspberry Pi
 *    realize a próxima enquete.
 */
static void app_spi_handle_txrx_complete(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
    uint16_t offset = 0u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	807b      	strh	r3, [r7, #2]
    uint16_t len = 0u;
 80020ca:	2300      	movs	r3, #0
 80020cc:	803b      	strh	r3, [r7, #0]

    app_spi_invalidate_dcache(g_spi_rx_dma_buf, APP_SPI_DMA_BUF_LEN);
 80020ce:	212a      	movs	r1, #42	@ 0x2a
 80020d0:	4829      	ldr	r0, [pc, #164]	@ (8002178 <app_spi_handle_txrx_complete+0xb8>)
 80020d2:	f7ff fb82 	bl	80017da <app_spi_invalidate_dcache>

    app_spi_frame_search_result_t search =
        app_spi_locate_frame(g_spi_rx_dma_buf, &offset, &len);
 80020d6:	463a      	mov	r2, r7
 80020d8:	1cbb      	adds	r3, r7, #2
 80020da:	4619      	mov	r1, r3
 80020dc:	4826      	ldr	r0, [pc, #152]	@ (8002178 <app_spi_handle_txrx_complete+0xb8>)
 80020de:	f7ff fed9 	bl	8001e94 <app_spi_locate_frame>
 80020e2:	4603      	mov	r3, r0
 80020e4:	71bb      	strb	r3, [r7, #6]

    uint8_t next_status = APP_SPI_STATUS_BUSY;
 80020e6:	235a      	movs	r3, #90	@ 0x5a
 80020e8:	71fb      	strb	r3, [r7, #7]
    uint8_t first_byte = g_spi_rx_dma_buf[0];
 80020ea:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <app_spi_handle_txrx_complete+0xb8>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	717b      	strb	r3, [r7, #5]
    uint8_t is_poll = (first_byte == APP_SPI_CLIENT_POLL_BYTE);
 80020f0:	797b      	ldrb	r3, [r7, #5]
 80020f2:	2b3c      	cmp	r3, #60	@ 0x3c
 80020f4:	bf0c      	ite	eq
 80020f6:	2301      	moveq	r3, #1
 80020f8:	2300      	movne	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	713b      	strb	r3, [r7, #4]

    switch (search) {
 80020fe:	79bb      	ldrb	r3, [r7, #6]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d002      	beq.n	800210a <app_spi_handle_txrx_complete+0x4a>
 8002104:	2b03      	cmp	r3, #3
 8002106:	d01d      	beq.n	8002144 <app_spi_handle_txrx_complete+0x84>
 8002108:	e022      	b.n	8002150 <app_spi_handle_txrx_complete+0x90>
    case APP_SPI_FRAME_FOUND:
        if (app_spi_queue_push_isr(&g_spi_rx_dma_buf[offset], len) == 0) {
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	461a      	mov	r2, r3
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <app_spi_handle_txrx_complete+0xb8>)
 8002110:	4413      	add	r3, r2
 8002112:	883a      	ldrh	r2, [r7, #0]
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff0c 	bl	8001f34 <app_spi_queue_push_isr>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <app_spi_handle_txrx_complete+0x78>
            next_status = app_spi_compute_status();
 8002122:	f7ff fd5f 	bl	8001be4 <app_spi_compute_status>
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
            g_spi_restart_defer = 1u;
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <app_spi_handle_txrx_complete+0xbc>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
            g_spi_restart_defer_ticks = 0u;
 8002130:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <app_spi_handle_txrx_complete+0xc0>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
        } else {
            app_spi_record_rx_error(APP_SPI_RX_OVERFLOW_QUEUE_FULL);
            next_status = APP_SPI_STATUS_BUSY;
        }
        break;
 8002136:	e015      	b.n	8002164 <app_spi_handle_txrx_complete+0xa4>
            app_spi_record_rx_error(APP_SPI_RX_OVERFLOW_QUEUE_FULL);
 8002138:	2001      	movs	r0, #1
 800213a:	f7ff ff4d 	bl	8001fd8 <app_spi_record_rx_error>
            next_status = APP_SPI_STATUS_BUSY;
 800213e:	235a      	movs	r3, #90	@ 0x5a
 8002140:	71fb      	strb	r3, [r7, #7]
        break;
 8002142:	e00f      	b.n	8002164 <app_spi_handle_txrx_complete+0xa4>
    case APP_SPI_FRAME_INVALID:
        app_spi_record_rx_error(APP_SPI_RX_OVERFLOW_INVALID_FRAME);
 8002144:	2002      	movs	r0, #2
 8002146:	f7ff ff47 	bl	8001fd8 <app_spi_record_rx_error>
        next_status = APP_SPI_STATUS_BUSY;
 800214a:	235a      	movs	r3, #90	@ 0x5a
 800214c:	71fb      	strb	r3, [r7, #7]
        break;
 800214e:	e009      	b.n	8002164 <app_spi_handle_txrx_complete+0xa4>
    case APP_SPI_FRAME_PARTIAL:
    case APP_SPI_FRAME_NOT_FOUND:
    default:
        next_status = is_poll ? APP_SPI_STATUS_READY : app_spi_compute_status();
 8002150:	793b      	ldrb	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <app_spi_handle_txrx_complete+0x9e>
 8002156:	f7ff fd45 	bl	8001be4 <app_spi_compute_status>
 800215a:	4603      	mov	r3, r0
 800215c:	e000      	b.n	8002160 <app_spi_handle_txrx_complete+0xa0>
 800215e:	23a5      	movs	r3, #165	@ 0xa5
 8002160:	71fb      	strb	r3, [r7, #7]
        break;
 8002162:	bf00      	nop
     * serviços. Isso dá tempo para que qualquer resposta recém-gerada seja
     * copiada para o buffer ativo antes do próximo polling do Raspberry Pi,
     * garantindo que payloads pendentes substituam os bytes READY/BUSY na
     * primeira transferência de enquete.
     */
    g_spi_next_status = next_status;
 8002164:	4a07      	ldr	r2, [pc, #28]	@ (8002184 <app_spi_handle_txrx_complete+0xc4>)
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	7013      	strb	r3, [r2, #0]
    g_spi_need_restart = 1u;
 800216a:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <app_spi_handle_txrx_complete+0xc8>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000012c 	.word	0x2000012c
 800217c:	200008ed 	.word	0x200008ed
 8002180:	200008ee 	.word	0x200008ee
 8002184:	2000000c 	.word	0x2000000c
 8002188:	20000182 	.word	0x20000182

0800218c <app_spi_handshake_compute_status>:
#include "app_spi_handshake.h"

#include <string.h>

uint8_t app_spi_handshake_compute_status(uint8_t queue_count,
                                         uint8_t queue_capacity) {
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	460a      	mov	r2, r1
 8002196:	71fb      	strb	r3, [r7, #7]
 8002198:	4613      	mov	r3, r2
 800219a:	71bb      	strb	r3, [r7, #6]
    return (queue_count >= queue_capacity) ? APP_SPI_STATUS_BUSY
                                           : APP_SPI_STATUS_READY;
 800219c:	79fa      	ldrb	r2, [r7, #7]
 800219e:	79bb      	ldrb	r3, [r7, #6]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d301      	bcc.n	80021a8 <app_spi_handshake_compute_status+0x1c>
 80021a4:	235a      	movs	r3, #90	@ 0x5a
 80021a6:	e000      	b.n	80021aa <app_spi_handshake_compute_status+0x1e>
 80021a8:	23a5      	movs	r3, #165	@ 0xa5
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <app_spi_handshake_prime>:
 * reformulação, assim que a fila fica vazia voltamos a transmitir apenas o
 * padrão READY, enquanto respostas reais ocupam o final do quadro com zeros à
 * esquerda, como requerido.
 */
app_spi_handshake_prime_result_t
app_spi_handshake_prime(const app_spi_handshake_prime_args_t *args) {
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
    app_spi_handshake_prime_result_t result = {
 80021be:	2303      	movs	r3, #3
 80021c0:	733b      	strb	r3, [r7, #12]
 80021c2:	2300      	movs	r3, #0
 80021c4:	737b      	strb	r3, [r7, #13]
        .state = APP_SPI_HANDSHAKE_STATE_UNRECOGNIZED,
        .consumed_response = 0u,
    };

    if (!args || !args->tx_buf || args->tx_len == 0u) {
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <app_spi_handshake_prime+0x26>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <app_spi_handshake_prime+0x26>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	891b      	ldrh	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <app_spi_handshake_prime+0x2c>
        return result;
 80021dc:	89bb      	ldrh	r3, [r7, #12]
 80021de:	823b      	strh	r3, [r7, #16]
 80021e0:	e054      	b.n	800228c <app_spi_handshake_prime+0xd6>
    }

    memset(args->tx_buf, args->status_byte, args->tx_len);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6858      	ldr	r0, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	891b      	ldrh	r3, [r3, #8]
 80021f0:	461a      	mov	r2, r3
 80021f2:	f009 f8ab 	bl	800b34c <memset>

    if (args->status_byte == APP_SPI_STATUS_READY) {
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2ba5      	cmp	r3, #165	@ 0xa5
 80021fc:	d102      	bne.n	8002204 <app_spi_handshake_prime+0x4e>
        result.state = APP_SPI_HANDSHAKE_STATE_READY;
 80021fe:	2300      	movs	r3, #0
 8002200:	733b      	strb	r3, [r7, #12]
 8002202:	e008      	b.n	8002216 <app_spi_handshake_prime+0x60>
    } else if (args->status_byte == APP_SPI_STATUS_BUSY) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b5a      	cmp	r3, #90	@ 0x5a
 800220a:	d102      	bne.n	8002212 <app_spi_handshake_prime+0x5c>
        result.state = APP_SPI_HANDSHAKE_STATE_BUSY;
 800220c:	2301      	movs	r3, #1
 800220e:	733b      	strb	r3, [r7, #12]
 8002210:	e001      	b.n	8002216 <app_spi_handshake_prime+0x60>
    } else {
        result.state = APP_SPI_HANDSHAKE_STATE_UNRECOGNIZED;
 8002212:	2303      	movs	r3, #3
 8002214:	733b      	strb	r3, [r7, #12]
    }

    if (args->response_buf && args->response_len > 0u) {
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d034      	beq.n	8002288 <app_spi_handshake_prime+0xd2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	8a1b      	ldrh	r3, [r3, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d030      	beq.n	8002288 <app_spi_handshake_prime+0xd2>
        if (args->response_len <= args->tx_len &&
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8a1a      	ldrh	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	891b      	ldrh	r3, [r3, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d826      	bhi.n	8002280 <app_spi_handshake_prime+0xca>
            (result.state == APP_SPI_HANDSHAKE_STATE_READY ||
 8002232:	7b3b      	ldrb	r3, [r7, #12]
        if (args->response_len <= args->tx_len &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <app_spi_handshake_prime+0x88>
             result.state == APP_SPI_HANDSHAKE_STATE_BUSY)) {
 8002238:	7b3b      	ldrb	r3, [r7, #12]
            (result.state == APP_SPI_HANDSHAKE_STATE_READY ||
 800223a:	2b01      	cmp	r3, #1
 800223c:	d120      	bne.n	8002280 <app_spi_handshake_prime+0xca>
            uint32_t pad = args->tx_len - args->response_len;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	891b      	ldrh	r3, [r3, #8]
 8002242:	461a      	mov	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	8a1b      	ldrh	r3, [r3, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
            if (pad > 0u) {
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <app_spi_handshake_prime+0xaa>
                memset(args->tx_buf, 0, pad);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f009 f876 	bl	800b34c <memset>
            }
            memcpy(&args->tx_buf[pad], args->response_buf, args->response_len);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	18d0      	adds	r0, r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68d9      	ldr	r1, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	8a1b      	ldrh	r3, [r3, #16]
 8002270:	461a      	mov	r2, r3
 8002272:	f009 f8f6 	bl	800b462 <memcpy>
            result.consumed_response = 1u;
 8002276:	2301      	movs	r3, #1
 8002278:	737b      	strb	r3, [r7, #13]
            result.state = APP_SPI_HANDSHAKE_STATE_RESPONSE;
 800227a:	2302      	movs	r3, #2
 800227c:	733b      	strb	r3, [r7, #12]
             result.state == APP_SPI_HANDSHAKE_STATE_BUSY)) {
 800227e:	e003      	b.n	8002288 <app_spi_handshake_prime+0xd2>
        } else {
            result.state = APP_SPI_HANDSHAKE_STATE_UNRECOGNIZED;
 8002280:	2303      	movs	r3, #3
 8002282:	733b      	strb	r3, [r7, #12]
            result.consumed_response = 0u;
 8002284:	2300      	movs	r3, #0
 8002286:	737b      	strb	r3, [r7, #13]
        }
    }

    return result;
 8002288:	89bb      	ldrh	r3, [r7, #12]
 800228a:	823b      	strh	r3, [r7, #16]
}
 800228c:	2300      	movs	r3, #0
 800228e:	7c3a      	ldrb	r2, [r7, #16]
 8002290:	f362 0307 	bfi	r3, r2, #0, #8
 8002294:	7c7a      	ldrb	r2, [r7, #17]
 8002296:	f362 230f 	bfi	r3, r2, #8, #8
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08e      	sub	sp, #56	@ 0x38
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	2224      	movs	r2, #36	@ 0x24
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f009 f84a 	bl	800b34c <memset>
    TIM_MasterConfigTypeDef master = {0};
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 80022c4:	2303      	movs	r3, #3
 80022c6:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022cc:	2301      	movs	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022d8:	2300      	movs	r3, #0
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022dc:	2301      	movs	r3, #1
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f005 fd04 	bl	8007cfc <HAL_TIM_Encoder_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 80022fa:	f000 fa99 	bl	8002830 <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f007 fb25 	bl	800995c <HAL_TIMEx_MasterConfigSynchronization>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 8002318:	f000 fa8a 	bl	8002830 <Error_Handler>
    }
}
 800231c:	bf00      	nop
 800231e:	3738      	adds	r7, #56	@ 0x38
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f001 fdd6 	bl	8003f08 <HAL_GPIO_Init>
}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	@ 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 8002378:	2203      	movs	r2, #3
 800237a:	2113      	movs	r1, #19
 800237c:	4824      	ldr	r0, [pc, #144]	@ (8002410 <board_config_apply_motion_gpio+0xac>)
 800237e:	f7ff ffd1 	bl	8002324 <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 8002382:	2203      	movs	r2, #3
 8002384:	2104      	movs	r1, #4
 8002386:	4822      	ldr	r0, [pc, #136]	@ (8002410 <board_config_apply_motion_gpio+0xac>)
 8002388:	f7ff ffcc 	bl	8002324 <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 800238c:	2203      	movs	r2, #3
 800238e:	210c      	movs	r1, #12
 8002390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002394:	f7ff ffc6 	bl	8002324 <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8002398:	2200      	movs	r2, #0
 800239a:	2130      	movs	r1, #48	@ 0x30
 800239c:	481d      	ldr	r0, [pc, #116]	@ (8002414 <board_config_apply_motion_gpio+0xb0>)
 800239e:	f7ff ffc1 	bl	8002324 <configure_output>
    configure_output(GPIOA, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 80023a2:	2200      	movs	r2, #0
 80023a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ac:	f7ff ffba 	bl	8002324 <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2117      	movs	r1, #23
 80023b4:	4816      	ldr	r0, [pc, #88]	@ (8002410 <board_config_apply_motion_gpio+0xac>)
 80023b6:	f002 f95d 	bl	8004674 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	210c      	movs	r1, #12
 80023be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c2:	f002 f957 	bl	8004674 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2130      	movs	r1, #48	@ 0x30
 80023ca:	4812      	ldr	r0, [pc, #72]	@ (8002414 <board_config_apply_motion_gpio+0xb0>)
 80023cc:	f002 f952 	bl	8004674 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023da:	f002 f94b 	bl	8004674 <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023de:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80023e2:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]

    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 80023e8:	2307      	movs	r3, #7
 80023ea:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4808      	ldr	r0, [pc, #32]	@ (8002414 <board_config_apply_motion_gpio+0xb0>)
 80023f2:	f001 fd89 	bl	8003f08 <HAL_GPIO_Init>

    init.Pin = GPIO_PIN_13;
 80023f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023fa:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4804      	ldr	r0, [pc, #16]	@ (8002414 <board_config_apply_motion_gpio+0xb0>)
 8002402:	f001 fd81 	bl	8003f08 <HAL_GPIO_Init>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	48000400 	.word	0x48000400
 8002414:	48000800 	.word	0x48000800

08002418 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim2);
 800241c:	4805      	ldr	r0, [pc, #20]	@ (8002434 <board_config_force_encoder_quadrature+0x1c>)
 800241e:	f7ff ff40 	bl	80022a2 <configure_encoder_timer>
    configure_encoder_timer(&htim3);
 8002422:	4805      	ldr	r0, [pc, #20]	@ (8002438 <board_config_force_encoder_quadrature+0x20>)
 8002424:	f7ff ff3d 	bl	80022a2 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <board_config_force_encoder_quadrature+0x24>)
 800242a:	f7ff ff3a 	bl	80022a2 <configure_encoder_timer>
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200009e8 	.word	0x200009e8
 8002438:	20000a34 	.word	0x20000a34
 800243c:	20000a80 	.word	0x20000a80

08002440 <board_config_remap_tim3_encoder_pins>:

void board_config_remap_tim3_encoder_pins(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]

    /* Libera a configuração padrão do CubeMX e migra o encoder para PC6/PC7 */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3 | GPIO_PIN_4);
 8002454:	2118      	movs	r1, #24
 8002456:	4811      	ldr	r0, [pc, #68]	@ (800249c <board_config_remap_tim3_encoder_pins+0x5c>)
 8002458:	f001 ffe2 	bl	8004420 <HAL_GPIO_DeInit>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245c:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <board_config_remap_tim3_encoder_pins+0x60>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002460:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <board_config_remap_tim3_encoder_pins+0x60>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002468:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <board_config_remap_tim3_encoder_pins+0x60>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	683b      	ldr	r3, [r7, #0]

    init.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002474:	23c0      	movs	r3, #192	@ 0xc0
 8002476:	607b      	str	r3, [r7, #4]
    init.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
    init.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
    init.Alternate = GPIO_AF2_TIM3;
 8002484:	2302      	movs	r3, #2
 8002486:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &init);
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	4619      	mov	r1, r3
 800248c:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <board_config_remap_tim3_encoder_pins+0x64>)
 800248e:	f001 fd3b 	bl	8003f08 <HAL_GPIO_Init>
}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	48001000 	.word	0x48001000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000800 	.word	0x48000800

080024a8 <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	2006      	movs	r0, #6
 80024b2:	f001 f993 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024b6:	2006      	movs	r0, #6
 80024b8:	f001 f9bc 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	2007      	movs	r0, #7
 80024c2:	f001 f98b 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80024c6:	2007      	movs	r0, #7
 80024c8:	f001 f9b4 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	2008      	movs	r0, #8
 80024d2:	f001 f983 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80024d6:	2008      	movs	r0, #8
 80024d8:	f001 f9ac 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	2028      	movs	r0, #40	@ 0x28
 80024e2:	f001 f97b 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024e6:	2028      	movs	r0, #40	@ 0x28
 80024e8:	f001 f9a4 	bl	8003834 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2101      	movs	r1, #1
 80024f0:	2036      	movs	r0, #54	@ 0x36
 80024f2:	f001 f973 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024f6:	2036      	movs	r0, #54	@ 0x36
 80024f8:	f001 f99c 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2102      	movs	r1, #2
 8002500:	200c      	movs	r0, #12
 8002502:	f001 f96b 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002506:	200c      	movs	r0, #12
 8002508:	f001 f994 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2102      	movs	r1, #2
 8002510:	200d      	movs	r0, #13
 8002512:	f001 f963 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002516:	200d      	movs	r0, #13
 8002518:	f001 f98c 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2103      	movs	r1, #3
 8002520:	2037      	movs	r0, #55	@ 0x37
 8002522:	f001 f95b 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002526:	2037      	movs	r0, #55	@ 0x37
 8002528:	f001 f984 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	2104      	movs	r1, #4
 8002530:	2025      	movs	r0, #37	@ 0x25
 8002532:	f001 f953 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002536:	2025      	movs	r0, #37	@ 0x25
 8002538:	f001 f97c 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	2105      	movs	r1, #5
 8002540:	2023      	movs	r0, #35	@ 0x23
 8002542:	f001 f94b 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002546:	2023      	movs	r0, #35	@ 0x23
 8002548:	f001 f974 	bl	8003834 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	2106      	movs	r1, #6
 8002550:	2018      	movs	r0, #24
 8002552:	f001 f943 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002556:	2018      	movs	r0, #24
 8002558:	f001 f96c 	bl	8003834 <HAL_NVIC_EnableIRQ>
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <MX_DMA_Init+0x48>)
 8002568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256a:	4a0f      	ldr	r2, [pc, #60]	@ (80025a8 <MX_DMA_Init+0x48>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6493      	str	r3, [r2, #72]	@ 0x48
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <MX_DMA_Init+0x48>)
 8002574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	200c      	movs	r0, #12
 8002584:	f001 f92a 	bl	80037dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002588:	200c      	movs	r0, #12
 800258a:	f001 f953 	bl	8003834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	200d      	movs	r0, #13
 8002594:	f001 f922 	bl	80037dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002598:	200d      	movs	r0, #13
 800259a:	f001 f94b 	bl	8003834 <HAL_NVIC_EnableIRQ>

}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000

080025ac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	@ 0x30
 80025b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025c2:	4b4d      	ldr	r3, [pc, #308]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c6:	4a4c      	ldr	r2, [pc, #304]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 80025c8:	f043 0310 	orr.w	r3, r3, #16
 80025cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ce:	4b4a      	ldr	r3, [pc, #296]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025da:	4b47      	ldr	r3, [pc, #284]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	4a46      	ldr	r2, [pc, #280]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e6:	4b44      	ldr	r3, [pc, #272]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025f2:	4b41      	ldr	r3, [pc, #260]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f6:	4a40      	ldr	r2, [pc, #256]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 80025f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025fe:	4b3e      	ldr	r3, [pc, #248]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	4b3b      	ldr	r3, [pc, #236]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	4a3a      	ldr	r2, [pc, #232]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002616:	4b38      	ldr	r3, [pc, #224]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	4b35      	ldr	r3, [pc, #212]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	4a34      	ldr	r2, [pc, #208]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800262e:	4b32      	ldr	r3, [pc, #200]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800263a:	4b2f      	ldr	r3, [pc, #188]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	4a2e      	ldr	r2, [pc, #184]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002646:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <MX_GPIO_Init+0x14c>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE5 PE6 PE7
                           PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002652:	f64f 73e7 	movw	r3, #65511	@ 0xffe7
 8002656:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002658:	2303      	movs	r3, #3
 800265a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	4619      	mov	r1, r3
 8002666:	4825      	ldr	r0, [pc, #148]	@ (80026fc <MX_GPIO_Init+0x150>)
 8002668:	f001 fc4e 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800266c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002670:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002672:	2303      	movs	r3, #3
 8002674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	481f      	ldr	r0, [pc, #124]	@ (8002700 <MX_GPIO_Init+0x154>)
 8002682:	f001 fc41 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002686:	2303      	movs	r3, #3
 8002688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	4619      	mov	r1, r3
 8002698:	481a      	ldr	r0, [pc, #104]	@ (8002704 <MX_GPIO_Init+0x158>)
 800269a:	f001 fc35 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800269e:	f641 7308 	movw	r3, #7944	@ 0x1f08
 80026a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b6:	f001 fc27 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80026ba:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 80026be:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c0:	2303      	movs	r3, #3
 80026c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	4619      	mov	r1, r3
 80026ce:	480e      	ldr	r0, [pc, #56]	@ (8002708 <MX_GPIO_Init+0x15c>)
 80026d0:	f001 fc1a 	bl	8003f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80026d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	4808      	ldr	r0, [pc, #32]	@ (800270c <MX_GPIO_Init+0x160>)
 80026ea:	f001 fc0d 	bl	8003f08 <HAL_GPIO_Init>

}
 80026ee:	bf00      	nop
 80026f0:	3730      	adds	r7, #48	@ 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	48001000 	.word	0x48001000
 8002700:	48000800 	.word	0x48000800
 8002704:	48001c00 	.word	0x48001c00
 8002708:	48000400 	.word	0x48000400
 800270c:	48000c00 	.word	0x48000c00

08002710 <main>:
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

 8002714:	f000 fefd 	bl	8003512 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

 8002718:	f000 f821 	bl	800275e <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
 800271c:	f7ff ff46 	bl	80025ac <MX_GPIO_Init>
  MX_TIM6_Init();
 8002720:	f7ff ff1e 	bl	8002560 <MX_DMA_Init>
  MX_TIM2_Init();
 8002724:	f000 f8a8 	bl	8002878 <MX_SPI1_Init>
  MX_TIM5_Init();
 8002728:	f000 fbc0 	bl	8002eac <MX_TIM6_Init>
  MX_TIM7_Init();
 800272c:	f000 fabe 	bl	8002cac <MX_TIM2_Init>
  MX_TIM3_Init();
 8002730:	f000 fb66 	bl	8002e00 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8002734:	f000 fbf0 	bl	8002f18 <MX_TIM7_Init>
  MX_TIM15_Init();
 8002738:	f000 fb0c 	bl	8002d54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
 800273c:	f000 fe32 	bl	80033a4 <MX_USART1_UART_Init>
    board_config_apply_motion_gpio();
 8002740:	f000 fc20 	bl	8002f84 <MX_TIM15_Init>
    board_config_remap_tim3_encoder_pins();
    board_config_force_encoder_quadrature();
 8002744:	f7ff fe0e 	bl	8002364 <board_config_apply_motion_gpio>
    board_config_apply_interrupt_priorities();
 8002748:	f7ff fe7a 	bl	8002440 <board_config_remap_tim3_encoder_pins>
    //board_config_apply_spi_dma_profile();
 800274c:	f7ff fe64 	bl	8002418 <board_config_force_encoder_quadrature>
    app_init();
 8002750:	f7ff feaa 	bl	80024a8 <board_config_apply_interrupt_priorities>
  /* USER CODE END 2 */

 8002754:	f7ff f84c 	bl	80017f0 <app_init>
    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
  }
  /* USER CODE END 3 */
 8002758:	f7ff f8a6 	bl	80018a8 <app_poll>
 800275c:	e7fc      	b.n	8002758 <main+0x48>

0800275e <SystemClock_Config>:
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275e:	b580      	push	{r7, lr}
 8002760:	b096      	sub	sp, #88	@ 0x58
 8002762:	af00      	add	r7, sp, #0

 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2244      	movs	r2, #68	@ 0x44
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f008 fded 	bl	800b34c <memset>
  /** Configure the main internal regulator output voltage
 8002772:	463b      	mov	r3, r7
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
 8002780:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002784:	f001 ffd4 	bl	8004730 <HAL_PWREx_ControlVoltageScaling>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <SystemClock_Config+0x34>
  }

 800278e:	f000 f84f 	bl	8002830 <Error_Handler>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002792:	2310      	movs	r3, #16
 8002794:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002796:	2301      	movs	r3, #1
 8002798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279a:	2300      	movs	r3, #0
 800279c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800279e:	2360      	movs	r3, #96	@ 0x60
 80027a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027a2:	2302      	movs	r3, #2
 80027a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80027a6:	2301      	movs	r3, #1
 80027a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027aa:	2301      	movs	r3, #1
 80027ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027ae:	2328      	movs	r3, #40	@ 0x28
 80027b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027b2:	2307      	movs	r3, #7
 80027b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b6:	2302      	movs	r3, #2
 80027b8:	653b      	str	r3, [r7, #80]	@ 0x50
  {
 80027ba:	2302      	movs	r3, #2
 80027bc:	657b      	str	r3, [r7, #84]	@ 0x54
    Error_Handler();
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 f816 	bl	80047f4 <HAL_RCC_OscConfig>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <SystemClock_Config+0x74>
  }

 80027ce:	f000 f82f 	bl	8002830 <Error_Handler>
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d2:	230f      	movs	r3, #15
 80027d4:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d6:	2303      	movs	r3, #3
 80027d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]

 80027de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  {
    Error_Handler();
 80027e8:	463b      	mov	r3, r7
 80027ea:	2104      	movs	r1, #4
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 fd03 	bl	80051f8 <HAL_RCC_ClockConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <SystemClock_Config+0x9e>
  }
}
 80027f8:	f000 f81a 	bl	8002830 <Error_Handler>

/* USER CODE BEGIN 4 */
 80027fc:	bf00      	nop
 80027fe:	3758      	adds	r7, #88	@ 0x58
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_SPI_TxRxHalfCpltCallback>:
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
  app_on_spi_txrx_half_complete(hspi);
}
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff f90d 	bl	8001a2c <app_on_spi_txrx_half_complete>
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SPI_TxRxCpltCallback>:
{
  app_on_spi_txrx_complete(hspi);
}
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]

 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff f91c 	bl	8001a60 <app_on_spi_txrx_complete>
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
	log_event_names("app", "error", "Error_Handler");
#endif
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	2164      	movs	r1, #100	@ 0x64
 800283a:	2000      	movs	r0, #0
 800283c:	f7fe fda8 	bl	8001390 <log_event_ids>
	__disable_irq();
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <Error_Handler+0x24>)
 8002842:	4905      	ldr	r1, [pc, #20]	@ (8002858 <Error_Handler+0x28>)
 8002844:	4805      	ldr	r0, [pc, #20]	@ (800285c <Error_Handler+0x2c>)
 8002846:	f7fe fdb7 	bl	80013b8 <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 800284a:	b672      	cpsid	i
}
 800284c:	bf00      	nop
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
 800284e:	bf00      	nop
 8002850:	e7fd      	b.n	800284e <Error_Handler+0x1e>
 8002852:	bf00      	nop
 8002854:	0800c4dc 	.word	0x0800c4dc
 8002858:	0800c4ec 	.word	0x0800c4ec
 800285c:	0800c4f4 	.word	0x0800c4f4

08002860 <assert_failed>:
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800287c:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <MX_SPI1_Init+0x68>)
 800287e:	4a19      	ldr	r2, [pc, #100]	@ (80028e4 <MX_SPI1_Init+0x6c>)
 8002880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002882:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <MX_SPI1_Init+0x68>)
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002888:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <MX_SPI1_Init+0x68>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800288e:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <MX_SPI1_Init+0x68>)
 8002890:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002896:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <MX_SPI1_Init+0x68>)
 8002898:	2202      	movs	r2, #2
 800289a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <MX_SPI1_Init+0x68>)
 800289e:	2201      	movs	r2, #1
 80028a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80028a2:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <MX_SPI1_Init+0x68>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028a8:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <MX_SPI1_Init+0x68>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ae:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <MX_SPI1_Init+0x68>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <MX_SPI1_Init+0x68>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028ba:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <MX_SPI1_Init+0x68>)
 80028bc:	2207      	movs	r2, #7
 80028be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028c0:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <MX_SPI1_Init+0x68>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <MX_SPI1_Init+0x68>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028cc:	4804      	ldr	r0, [pc, #16]	@ (80028e0 <MX_SPI1_Init+0x68>)
 80028ce:	f003 fedf 	bl	8006690 <HAL_SPI_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80028d8:	f7ff ffaa 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200008f0 	.word	0x200008f0
 80028e4:	40013000 	.word	0x40013000

080028e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	@ 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a45      	ldr	r2, [pc, #276]	@ (8002a1c <HAL_SPI_MspInit+0x134>)
 8002906:	4293      	cmp	r3, r2
 8002908:	f040 8083 	bne.w	8002a12 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800290c:	4b44      	ldr	r3, [pc, #272]	@ (8002a20 <HAL_SPI_MspInit+0x138>)
 800290e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002910:	4a43      	ldr	r2, [pc, #268]	@ (8002a20 <HAL_SPI_MspInit+0x138>)
 8002912:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002916:	6613      	str	r3, [r2, #96]	@ 0x60
 8002918:	4b41      	ldr	r3, [pc, #260]	@ (8002a20 <HAL_SPI_MspInit+0x138>)
 800291a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b3e      	ldr	r3, [pc, #248]	@ (8002a20 <HAL_SPI_MspInit+0x138>)
 8002926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002928:	4a3d      	ldr	r2, [pc, #244]	@ (8002a20 <HAL_SPI_MspInit+0x138>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002930:	4b3b      	ldr	r3, [pc, #236]	@ (8002a20 <HAL_SPI_MspInit+0x138>)
 8002932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800293c:	23f0      	movs	r3, #240	@ 0xf0
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800294c:	2305      	movs	r3, #5
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800295a:	f001 fad5 	bl	8003f08 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800295e:	4b31      	ldr	r3, [pc, #196]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 8002960:	4a31      	ldr	r2, [pc, #196]	@ (8002a28 <HAL_SPI_MspInit+0x140>)
 8002962:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002964:	4b2f      	ldr	r3, [pc, #188]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 8002966:	2201      	movs	r2, #1
 8002968:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800296a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002970:	4b2c      	ldr	r3, [pc, #176]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002976:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800297c:	4b29      	ldr	r3, [pc, #164]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002982:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002988:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 800298a:	2220      	movs	r2, #32
 800298c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800298e:	4b25      	ldr	r3, [pc, #148]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002994:	4823      	ldr	r0, [pc, #140]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 8002996:	f000 ff71 	bl	800387c <HAL_DMA_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80029a0:	f7ff ff46 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 80029a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80029aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <HAL_SPI_MspInit+0x13c>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80029b0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a30 <HAL_SPI_MspInit+0x148>)
 80029b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80029b6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029be:	2210      	movs	r2, #16
 80029c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029c8:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ce:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d4:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80029da:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029dc:	2220      	movs	r2, #32
 80029de:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029e0:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80029e6:	4811      	ldr	r0, [pc, #68]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029e8:	f000 ff48 	bl	800387c <HAL_DMA_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80029f2:	f7ff ff1d 	bl	8002830 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80029fc:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <HAL_SPI_MspInit+0x144>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	2023      	movs	r0, #35	@ 0x23
 8002a08:	f000 fee8 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a0c:	2023      	movs	r0, #35	@ 0x23
 8002a0e:	f000 ff11 	bl	8003834 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a12:	bf00      	nop
 8002a14:	3728      	adds	r7, #40	@ 0x28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40013000 	.word	0x40013000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	20000954 	.word	0x20000954
 8002a28:	4002001c 	.word	0x4002001c
 8002a2c:	2000099c 	.word	0x2000099c
 8002a30:	40020030 	.word	0x40020030

08002a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <HAL_MspInit+0x44>)
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a78 <HAL_MspInit+0x44>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a46:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <HAL_MspInit+0x44>)
 8002a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <HAL_MspInit+0x44>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a56:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <HAL_MspInit+0x44>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_MspInit+0x44>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000

08002a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <NMI_Handler+0x4>

08002a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <HardFault_Handler+0x4>

08002a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <MemManage_Handler+0x4>

08002a94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <BusFault_Handler+0x4>

08002a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <UsageFault_Handler+0x4>

08002aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad2:	f000 fd73 	bl	80035bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002ae0:	4802      	ldr	r0, [pc, #8]	@ (8002aec <DMA1_Channel2_IRQHandler+0x10>)
 8002ae2:	f001 f932 	bl	8003d4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000954 	.word	0x20000954

08002af0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <DMA1_Channel3_IRQHandler+0x10>)
 8002af6:	f001 f928 	bl	8003d4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000099c 	.word	0x2000099c

08002b04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <SPI1_IRQHandler+0x10>)
 8002b0a:	f004 f953 	bl	8006db4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200008f0 	.word	0x200008f0

08002b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b1c:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <TIM6_DAC_IRQHandler+0x10>)
 8002b1e:	f005 faaf 	bl	8008080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000acc 	.word	0x20000acc

08002b2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b30:	4802      	ldr	r0, [pc, #8]	@ (8002b3c <TIM7_IRQHandler+0x10>)
 8002b32:	f005 faa5 	bl	8008080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000b18 	.word	0x20000b18

08002b40 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002b44:	2001      	movs	r0, #1
 8002b46:	f001 fdc1 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002b52:	2002      	movs	r0, #2
 8002b54:	f001 fdba 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002b60:	2004      	movs	r0, #4
 8002b62:	f001 fdb3 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b6e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b72:	f001 fdab 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e00a      	b.n	8002ba2 <_read+0x28>
		*ptr++ = __io_getchar();
 8002b8c:	f3af 8000 	nop.w
 8002b90:	4601      	mov	r1, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	60ba      	str	r2, [r7, #8]
 8002b98:	b2ca      	uxtb	r2, r1
 8002b9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	dbf0      	blt.n	8002b8c <_read+0x12>
	}

	return len;
 8002baa:	687b      	ldr	r3, [r7, #4]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_fstat>:

int _fstat(int file, struct stat *st) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bdc:	605a      	str	r2, [r3, #4]
	return 0;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <_isatty>:

int _isatty(int file) {
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002bf4:	2301      	movs	r3, #1
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002c24:	4a14      	ldr	r2, [pc, #80]	@ (8002c78 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002c30:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <_sbrk+0x64>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	@ (8002c84 <_sbrk+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002c3e:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <_sbrk+0x64>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <_sbrk+0x40>
		errno = ENOMEM;
 8002c4c:	f008 fbdc 	bl	800b408 <__errno>
 8002c50:	4603      	mov	r3, r0
 8002c52:	220c      	movs	r2, #12
 8002c54:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	e009      	b.n	8002c70 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002c62:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <_sbrk+0x64>)
 8002c6c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20018000 	.word	0x20018000
 8002c7c:	00000400 	.word	0x00000400
 8002c80:	200009e4 	.word	0x200009e4
 8002c84:	20000d88 	.word	0x20000d88

08002c88 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <SystemInit+0x20>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c92:	4a05      	ldr	r2, [pc, #20]	@ (8002ca8 <SystemInit+0x20>)
 8002c94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	@ 0x30
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	2224      	movs	r2, #36	@ 0x24
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f008 fb46 	bl	800b34c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cca:	4b21      	ldr	r3, [pc, #132]	@ (8002d50 <MX_TIM2_Init+0xa4>)
 8002ccc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <MX_TIM2_Init+0xa4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <MX_TIM2_Init+0xa4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002cde:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <MX_TIM2_Init+0xa4>)
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <MX_TIM2_Init+0xa4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cec:	4b18      	ldr	r3, [pc, #96]	@ (8002d50 <MX_TIM2_Init+0xa4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d06:	2300      	movs	r3, #0
 8002d08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	480c      	ldr	r0, [pc, #48]	@ (8002d50 <MX_TIM2_Init+0xa4>)
 8002d1e:	f004 ffed 	bl	8007cfc <HAL_TIM_Encoder_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002d28:	f7ff fd82 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d34:	463b      	mov	r3, r7
 8002d36:	4619      	mov	r1, r3
 8002d38:	4805      	ldr	r0, [pc, #20]	@ (8002d50 <MX_TIM2_Init+0xa4>)
 8002d3a:	f006 fe0f 	bl	800995c <HAL_TIMEx_MasterConfigSynchronization>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002d44:	f7ff fd74 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d48:	bf00      	nop
 8002d4a:	3730      	adds	r7, #48	@ 0x30
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200009e8 	.word	0x200009e8

08002d54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	@ 0x30
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2224      	movs	r2, #36	@ 0x24
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f008 faf2 	bl	800b34c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d68:	463b      	mov	r3, r7
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d72:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <MX_TIM3_Init+0xa4>)
 8002d74:	4a21      	ldr	r2, [pc, #132]	@ (8002dfc <MX_TIM3_Init+0xa8>)
 8002d76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <MX_TIM3_Init+0xa4>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <MX_TIM3_Init+0xa4>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d84:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <MX_TIM3_Init+0xa4>)
 8002d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <MX_TIM3_Init+0xa4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d92:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <MX_TIM3_Init+0xa4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002da0:	2301      	movs	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480d      	ldr	r0, [pc, #52]	@ (8002df8 <MX_TIM3_Init+0xa4>)
 8002dc4:	f004 ff9a 	bl	8007cfc <HAL_TIM_Encoder_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002dce:	f7ff fd2f 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dda:	463b      	mov	r3, r7
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4806      	ldr	r0, [pc, #24]	@ (8002df8 <MX_TIM3_Init+0xa4>)
 8002de0:	f006 fdbc 	bl	800995c <HAL_TIMEx_MasterConfigSynchronization>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002dea:	f7ff fd21 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	3730      	adds	r7, #48	@ 0x30
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000a34 	.word	0x20000a34
 8002dfc:	40000400 	.word	0x40000400

08002e00 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	@ 0x30
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	2224      	movs	r2, #36	@ 0x24
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f008 fa9c 	bl	800b34c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	463b      	mov	r3, r7
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <MX_TIM5_Init+0xa4>)
 8002e20:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <MX_TIM5_Init+0xa8>)
 8002e22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002e24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea4 <MX_TIM5_Init+0xa4>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <MX_TIM5_Init+0xa4>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002e30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea4 <MX_TIM5_Init+0xa4>)
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
 8002e36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <MX_TIM5_Init+0xa4>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <MX_TIM5_Init+0xa4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480d      	ldr	r0, [pc, #52]	@ (8002ea4 <MX_TIM5_Init+0xa4>)
 8002e70:	f004 ff44 	bl	8007cfc <HAL_TIM_Encoder_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002e7a:	f7ff fcd9 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e86:	463b      	mov	r3, r7
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4806      	ldr	r0, [pc, #24]	@ (8002ea4 <MX_TIM5_Init+0xa4>)
 8002e8c:	f006 fd66 	bl	800995c <HAL_TIMEx_MasterConfigSynchronization>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002e96:	f7ff fccb 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	3730      	adds	r7, #48	@ 0x30
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000a80 	.word	0x20000a80
 8002ea8:	40000c00 	.word	0x40000c00

08002eac <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ebc:	4b14      	ldr	r3, [pc, #80]	@ (8002f10 <MX_TIM6_Init+0x64>)
 8002ebe:	4a15      	ldr	r2, [pc, #84]	@ (8002f14 <MX_TIM6_Init+0x68>)
 8002ec0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002ec2:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <MX_TIM6_Init+0x64>)
 8002ec4:	224f      	movs	r2, #79	@ 0x4f
 8002ec6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <MX_TIM6_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <MX_TIM6_Init+0x64>)
 8002ed0:	2213      	movs	r2, #19
 8002ed2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <MX_TIM6_Init+0x64>)
 8002ed6:	2280      	movs	r2, #128	@ 0x80
 8002ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002eda:	480d      	ldr	r0, [pc, #52]	@ (8002f10 <MX_TIM6_Init+0x64>)
 8002edc:	f004 fb40 	bl	8007560 <HAL_TIM_Base_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002ee6:	f7ff fca3 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002eea:	2320      	movs	r3, #32
 8002eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4806      	ldr	r0, [pc, #24]	@ (8002f10 <MX_TIM6_Init+0x64>)
 8002ef8:	f006 fd30 	bl	800995c <HAL_TIMEx_MasterConfigSynchronization>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002f02:	f7ff fc95 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000acc 	.word	0x20000acc
 8002f14:	40001000 	.word	0x40001000

08002f18 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002f28:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <MX_TIM7_Init+0x64>)
 8002f2a:	4a15      	ldr	r2, [pc, #84]	@ (8002f80 <MX_TIM7_Init+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8002f2e:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <MX_TIM7_Init+0x64>)
 8002f30:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002f34:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f36:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <MX_TIM7_Init+0x64>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f7c <MX_TIM7_Init+0x64>)
 8002f3e:	2209      	movs	r2, #9
 8002f40:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f42:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <MX_TIM7_Init+0x64>)
 8002f44:	2280      	movs	r2, #128	@ 0x80
 8002f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f48:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <MX_TIM7_Init+0x64>)
 8002f4a:	f004 fb09 	bl	8007560 <HAL_TIM_Base_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002f54:	f7ff fc6c 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	4619      	mov	r1, r3
 8002f64:	4805      	ldr	r0, [pc, #20]	@ (8002f7c <MX_TIM7_Init+0x64>)
 8002f66:	f006 fcf9 	bl	800995c <HAL_TIMEx_MasterConfigSynchronization>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002f70:	f7ff fc5e 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000b18 	.word	0x20000b18
 8002f80:	40001400 	.word	0x40001400

08002f84 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b09a      	sub	sp, #104	@ 0x68
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
 8002fb4:	615a      	str	r2, [r3, #20]
 8002fb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	222c      	movs	r2, #44	@ 0x2c
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f008 f9c4 	bl	800b34c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8002fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80030c4 <MX_TIM15_Init+0x140>)
 8002fc8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 8002fca:	4b3d      	ldr	r3, [pc, #244]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8002fcc:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8002fd0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002fd8:	4b39      	ldr	r3, [pc, #228]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8002fda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fde:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe0:	4b37      	ldr	r3, [pc, #220]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002fe6:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002ff2:	4833      	ldr	r0, [pc, #204]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8002ff4:	f004 fab4 	bl	8007560 <HAL_TIM_Base_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8002ffe:	f7ff fc17 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003006:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003008:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800300c:	4619      	mov	r1, r3
 800300e:	482c      	ldr	r0, [pc, #176]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8003010:	f005 fc10 	bl	8008834 <HAL_TIM_ConfigClockSource>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 800301a:	f7ff fc09 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800301e:	4828      	ldr	r0, [pc, #160]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8003020:	f004 fba8 	bl	8007774 <HAL_TIM_PWM_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 800302a:	f7ff fc01 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003036:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800303a:	4619      	mov	r1, r3
 800303c:	4820      	ldr	r0, [pc, #128]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 800303e:	f006 fc8d 	bl	800995c <HAL_TIMEx_MasterConfigSynchronization>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8003048:	f7ff fbf2 	bl	8002830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800304c:	2360      	movs	r3, #96	@ 0x60
 800304e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003054:	2300      	movs	r3, #0
 8003056:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003058:	2300      	movs	r3, #0
 800305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003064:	2300      	movs	r3, #0
 8003066:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003068:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800306c:	2200      	movs	r2, #0
 800306e:	4619      	mov	r1, r3
 8003070:	4813      	ldr	r0, [pc, #76]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 8003072:	f005 f90d 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800307c:	f7ff fbd8 	bl	8002830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003098:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4807      	ldr	r0, [pc, #28]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 80030a4:	f006 fdb0 	bl	8009c08 <HAL_TIMEx_ConfigBreakDeadTime>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80030ae:	f7ff fbbf 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80030b2:	4803      	ldr	r0, [pc, #12]	@ (80030c0 <MX_TIM15_Init+0x13c>)
 80030b4:	f000 f920 	bl	80032f8 <HAL_TIM_MspPostInit>

}
 80030b8:	bf00      	nop
 80030ba:	3768      	adds	r7, #104	@ 0x68
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000b64 	.word	0x20000b64
 80030c4:	40014000 	.word	0x40014000

080030c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08e      	sub	sp, #56	@ 0x38
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e8:	d146      	bne.n	8003178 <HAL_TIM_Encoder_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ea:	4b53      	ldr	r3, [pc, #332]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	4a52      	ldr	r2, [pc, #328]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f6:	4b50      	ldr	r3, [pc, #320]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	4b4d      	ldr	r3, [pc, #308]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	4a4c      	ldr	r2, [pc, #304]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800310e:	4b4a      	ldr	r3, [pc, #296]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	4b47      	ldr	r3, [pc, #284]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	4a46      	ldr	r2, [pc, #280]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003126:	4b44      	ldr	r3, [pc, #272]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003144:	2301      	movs	r3, #1
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800314c:	4619      	mov	r1, r3
 800314e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003152:	f000 fed9 	bl	8003f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003156:	2308      	movs	r3, #8
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003166:	2301      	movs	r3, #1
 8003168:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800316e:	4619      	mov	r1, r3
 8003170:	4832      	ldr	r0, [pc, #200]	@ (800323c <HAL_TIM_Encoder_MspInit+0x174>)
 8003172:	f000 fec9 	bl	8003f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003176:	e05b      	b.n	8003230 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a30      	ldr	r2, [pc, #192]	@ (8003240 <HAL_TIM_Encoder_MspInit+0x178>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d128      	bne.n	80031d4 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003182:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003186:	4a2c      	ldr	r2, [pc, #176]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	6593      	str	r3, [r2, #88]	@ 0x58
 800318e:	4b2a      	ldr	r3, [pc, #168]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800319a:	4b27      	ldr	r3, [pc, #156]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319e:	4a26      	ldr	r2, [pc, #152]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80031a0:	f043 0310 	orr.w	r3, r3, #16
 80031a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80031b2:	2318      	movs	r3, #24
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031c2:	2302      	movs	r3, #2
 80031c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ca:	4619      	mov	r1, r3
 80031cc:	481d      	ldr	r0, [pc, #116]	@ (8003244 <HAL_TIM_Encoder_MspInit+0x17c>)
 80031ce:	f000 fe9b 	bl	8003f08 <HAL_GPIO_Init>
}
 80031d2:	e02d      	b.n	8003230 <HAL_TIM_Encoder_MspInit+0x168>
  else if(tim_encoderHandle->Instance==TIM5)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <HAL_TIM_Encoder_MspInit+0x180>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d128      	bne.n	8003230 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031de:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ea:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <HAL_TIM_Encoder_MspInit+0x170>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800320e:	2303      	movs	r3, #3
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800321e:	2302      	movs	r3, #2
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003226:	4619      	mov	r1, r3
 8003228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800322c:	f000 fe6c 	bl	8003f08 <HAL_GPIO_Init>
}
 8003230:	bf00      	nop
 8003232:	3738      	adds	r7, #56	@ 0x38
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	48000400 	.word	0x48000400
 8003240:	40000400 	.word	0x40000400
 8003244:	48001000 	.word	0x48001000
 8003248:	40000c00 	.word	0x40000c00

0800324c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a23      	ldr	r2, [pc, #140]	@ (80032e8 <HAL_TIM_Base_MspInit+0x9c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d114      	bne.n	8003288 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800325e:	4b23      	ldr	r3, [pc, #140]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	4a22      	ldr	r2, [pc, #136]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 8003264:	f043 0310 	orr.w	r3, r3, #16
 8003268:	6593      	str	r3, [r2, #88]	@ 0x58
 800326a:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	2036      	movs	r0, #54	@ 0x36
 800327c:	f000 faae 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003280:	2036      	movs	r0, #54	@ 0x36
 8003282:	f000 fad7 	bl	8003834 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003286:	e02a      	b.n	80032de <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a18      	ldr	r2, [pc, #96]	@ (80032f0 <HAL_TIM_Base_MspInit+0xa4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d114      	bne.n	80032bc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003292:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 8003298:	f043 0320 	orr.w	r3, r3, #32
 800329c:	6593      	str	r3, [r2, #88]	@ 0x58
 800329e:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	2037      	movs	r0, #55	@ 0x37
 80032b0:	f000 fa94 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80032b4:	2037      	movs	r0, #55	@ 0x37
 80032b6:	f000 fabd 	bl	8003834 <HAL_NVIC_EnableIRQ>
}
 80032ba:	e010      	b.n	80032de <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0c      	ldr	r2, [pc, #48]	@ (80032f4 <HAL_TIM_Base_MspInit+0xa8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10b      	bne.n	80032de <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 80032c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ca:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_TIM_Base_MspInit+0xa0>)
 80032d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40001000 	.word	0x40001000
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40001400 	.word	0x40001400
 80032f4:	40014000 	.word	0x40014000

080032f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	@ 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a20      	ldr	r2, [pc, #128]	@ (8003398 <HAL_TIM_MspPostInit+0xa0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d139      	bne.n	800338e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <HAL_TIM_MspPostInit+0xa4>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	4a1f      	ldr	r2, [pc, #124]	@ (800339c <HAL_TIM_MspPostInit+0xa4>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003326:	4b1d      	ldr	r3, [pc, #116]	@ (800339c <HAL_TIM_MspPostInit+0xa4>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <HAL_TIM_MspPostInit+0xa4>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003336:	4a19      	ldr	r2, [pc, #100]	@ (800339c <HAL_TIM_MspPostInit+0xa4>)
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800333e:	4b17      	ldr	r3, [pc, #92]	@ (800339c <HAL_TIM_MspPostInit+0xa4>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800334a:	2304      	movs	r3, #4
 800334c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800335a:	230e      	movs	r3, #14
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 0314 	add.w	r3, r7, #20
 8003362:	4619      	mov	r1, r3
 8003364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003368:	f000 fdce 	bl	8003f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800336c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800337e:	230e      	movs	r3, #14
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	4805      	ldr	r0, [pc, #20]	@ (80033a0 <HAL_TIM_MspPostInit+0xa8>)
 800338a:	f000 fdbd 	bl	8003f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800338e:	bf00      	nop
 8003390:	3728      	adds	r7, #40	@ 0x28
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40014000 	.word	0x40014000
 800339c:	40021000 	.word	0x40021000
 80033a0:	48000400 	.word	0x48000400

080033a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033a8:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033aa:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <MX_USART1_UART_Init+0x5c>)
 80033ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033ae:	4b13      	ldr	r3, [pc, #76]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033b6:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033c8:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033ca:	220c      	movs	r2, #12
 80033cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ce:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d4:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033da:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033dc:	2200      	movs	r2, #0
 80033de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033e6:	4805      	ldr	r0, [pc, #20]	@ (80033fc <MX_USART1_UART_Init+0x58>)
 80033e8:	f006 fd64 	bl	8009eb4 <HAL_UART_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80033f2:	f7ff fa1d 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000bb0 	.word	0x20000bb0
 8003400:	40013800 	.word	0x40013800

08003404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b0ac      	sub	sp, #176	@ 0xb0
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	2288      	movs	r2, #136	@ 0x88
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f007 ff91 	bl	800b34c <memset>
  if(uartHandle->Instance==USART1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a21      	ldr	r2, [pc, #132]	@ (80034b4 <HAL_UART_MspInit+0xb0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d13a      	bne.n	80034aa <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003434:	2301      	movs	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003438:	2300      	movs	r3, #0
 800343a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4618      	mov	r0, r3
 8003442:	f002 f99d 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800344c:	f7ff f9f0 	bl	8002830 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_UART_MspInit+0xb4>)
 8003452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_UART_MspInit+0xb4>)
 8003456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800345a:	6613      	str	r3, [r2, #96]	@ 0x60
 800345c:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_UART_MspInit+0xb4>)
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003468:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <HAL_UART_MspInit+0xb4>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346c:	4a12      	ldr	r2, [pc, #72]	@ (80034b8 <HAL_UART_MspInit+0xb4>)
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003474:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <HAL_UART_MspInit+0xb4>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003480:	23c0      	movs	r3, #192	@ 0xc0
 8003482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003492:	2303      	movs	r3, #3
 8003494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003498:	2307      	movs	r3, #7
 800349a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80034a2:	4619      	mov	r1, r3
 80034a4:	4805      	ldr	r0, [pc, #20]	@ (80034bc <HAL_UART_MspInit+0xb8>)
 80034a6:	f000 fd2f 	bl	8003f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80034aa:	bf00      	nop
 80034ac:	37b0      	adds	r7, #176	@ 0xb0
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40021000 	.word	0x40021000
 80034bc:	48000400 	.word	0x48000400

080034c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034c4:	f7ff fbe0 	bl	8002c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034c8:	480c      	ldr	r0, [pc, #48]	@ (80034fc <LoopForever+0x6>)
  ldr r1, =_edata
 80034ca:	490d      	ldr	r1, [pc, #52]	@ (8003500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003504 <LoopForever+0xe>)
  movs r3, #0
 80034ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d0:	e002      	b.n	80034d8 <LoopCopyDataInit>

080034d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034d6:	3304      	adds	r3, #4

080034d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034dc:	d3f9      	bcc.n	80034d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034de:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034e0:	4c0a      	ldr	r4, [pc, #40]	@ (800350c <LoopForever+0x16>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e4:	e001      	b.n	80034ea <LoopFillZerobss>

080034e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e8:	3204      	adds	r2, #4

080034ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ec:	d3fb      	bcc.n	80034e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ee:	f007 ff91 	bl	800b414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034f2:	f7ff f90d 	bl	8002710 <main>

080034f6 <LoopForever>:

LoopForever:
    b LoopForever
 80034f6:	e7fe      	b.n	80034f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003500:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003504:	0800c7cc 	.word	0x0800c7cc
  ldr r2, =_sbss
 8003508:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800350c:	20000d88 	.word	0x20000d88

08003510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003510:	e7fe      	b.n	8003510 <ADC1_2_IRQHandler>

08003512 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800351c:	2003      	movs	r0, #3
 800351e:	f000 f93d 	bl	800379c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003522:	200f      	movs	r0, #15
 8003524:	f000 f80e 	bl	8003544 <HAL_InitTick>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	71fb      	strb	r3, [r7, #7]
 8003532:	e001      	b.n	8003538 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003534:	f7ff fa7e 	bl	8002a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003538:	79fb      	ldrb	r3, [r7, #7]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003550:	4b17      	ldr	r3, [pc, #92]	@ (80035b0 <HAL_InitTick+0x6c>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d023      	beq.n	80035a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003558:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <HAL_InitTick+0x70>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b14      	ldr	r3, [pc, #80]	@ (80035b0 <HAL_InitTick+0x6c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003566:	fbb3 f3f1 	udiv	r3, r3, r1
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f978 	bl	8003864 <HAL_SYSTICK_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b0f      	cmp	r3, #15
 800357e:	d809      	bhi.n	8003594 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003580:	2200      	movs	r2, #0
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	f000 f928 	bl	80037dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800358c:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <HAL_InitTick+0x74>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e007      	b.n	80035a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	e004      	b.n	80035a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e001      	b.n	80035a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000018 	.word	0x20000018
 80035b4:	20000010 	.word	0x20000010
 80035b8:	20000014 	.word	0x20000014

080035bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_IncTick+0x20>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_IncTick+0x24>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <HAL_IncTick+0x24>)
 80035ce:	6013      	str	r3, [r2, #0]
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000018 	.word	0x20000018
 80035e0:	20000c38 	.word	0x20000c38

080035e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return uwTick;
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_GetTick+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000c38 	.word	0x20000c38

080035fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800360c:	4b0c      	ldr	r3, [pc, #48]	@ (8003640 <__NVIC_SetPriorityGrouping+0x44>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003618:	4013      	ands	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362e:	4a04      	ldr	r2, [pc, #16]	@ (8003640 <__NVIC_SetPriorityGrouping+0x44>)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	60d3      	str	r3, [r2, #12]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003648:	4b04      	ldr	r3, [pc, #16]	@ (800365c <__NVIC_GetPriorityGrouping+0x18>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 0307 	and.w	r3, r3, #7
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	2b00      	cmp	r3, #0
 8003670:	db0b      	blt.n	800368a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4907      	ldr	r1, [pc, #28]	@ (8003698 <__NVIC_EnableIRQ+0x38>)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2001      	movs	r0, #1
 8003682:	fa00 f202 	lsl.w	r2, r0, r2
 8003686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000e100 	.word	0xe000e100

0800369c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	db0a      	blt.n	80036c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	490c      	ldr	r1, [pc, #48]	@ (80036e8 <__NVIC_SetPriority+0x4c>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	440b      	add	r3, r1
 80036c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c4:	e00a      	b.n	80036dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4908      	ldr	r1, [pc, #32]	@ (80036ec <__NVIC_SetPriority+0x50>)
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3b04      	subs	r3, #4
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	440b      	add	r3, r1
 80036da:	761a      	strb	r2, [r3, #24]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000e100 	.word	0xe000e100
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	@ 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f1c3 0307 	rsb	r3, r3, #7
 800370a:	2b04      	cmp	r3, #4
 800370c:	bf28      	it	cs
 800370e:	2304      	movcs	r3, #4
 8003710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3304      	adds	r3, #4
 8003716:	2b06      	cmp	r3, #6
 8003718:	d902      	bls.n	8003720 <NVIC_EncodePriority+0x30>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3b03      	subs	r3, #3
 800371e:	e000      	b.n	8003722 <NVIC_EncodePriority+0x32>
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	401a      	ands	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003738:	f04f 31ff 	mov.w	r1, #4294967295
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	43d9      	mvns	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	4313      	orrs	r3, r2
         );
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	@ 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003768:	d301      	bcc.n	800376e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800376a:	2301      	movs	r3, #1
 800376c:	e00f      	b.n	800378e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376e:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <SysTick_Config+0x40>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003776:	210f      	movs	r1, #15
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	f7ff ff8e 	bl	800369c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <SysTick_Config+0x40>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003786:	4b04      	ldr	r3, [pc, #16]	@ (8003798 <SysTick_Config+0x40>)
 8003788:	2207      	movs	r2, #7
 800378a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	e000e010 	.word	0xe000e010

0800379c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	d00f      	beq.n	80037ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b06      	cmp	r3, #6
 80037ae:	d00c      	beq.n	80037ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d009      	beq.n	80037ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d006      	beq.n	80037ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d003      	beq.n	80037ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037c2:	21a6      	movs	r1, #166	@ 0xa6
 80037c4:	4804      	ldr	r0, [pc, #16]	@ (80037d8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80037c6:	f7ff f84b 	bl	8002860 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff ff16 	bl	80035fc <__NVIC_SetPriorityGrouping>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	0800c4f8 	.word	0x0800c4f8

080037dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b0f      	cmp	r3, #15
 80037f2:	d903      	bls.n	80037fc <HAL_NVIC_SetPriority+0x20>
 80037f4:	21be      	movs	r1, #190	@ 0xbe
 80037f6:	480e      	ldr	r0, [pc, #56]	@ (8003830 <HAL_NVIC_SetPriority+0x54>)
 80037f8:	f7ff f832 	bl	8002860 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b0f      	cmp	r3, #15
 8003800:	d903      	bls.n	800380a <HAL_NVIC_SetPriority+0x2e>
 8003802:	21bf      	movs	r1, #191	@ 0xbf
 8003804:	480a      	ldr	r0, [pc, #40]	@ (8003830 <HAL_NVIC_SetPriority+0x54>)
 8003806:	f7ff f82b 	bl	8002860 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800380a:	f7ff ff1b 	bl	8003644 <__NVIC_GetPriorityGrouping>
 800380e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	6978      	ldr	r0, [r7, #20]
 8003816:	f7ff ff6b 	bl	80036f0 <NVIC_EncodePriority>
 800381a:	4602      	mov	r2, r0
 800381c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff3a 	bl	800369c <__NVIC_SetPriority>
}
 8003828:	bf00      	nop
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	0800c4f8 	.word	0x0800c4f8

08003834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da03      	bge.n	800384e <HAL_NVIC_EnableIRQ+0x1a>
 8003846:	21d2      	movs	r1, #210	@ 0xd2
 8003848:	4805      	ldr	r0, [pc, #20]	@ (8003860 <HAL_NVIC_EnableIRQ+0x2c>)
 800384a:	f7ff f809 	bl	8002860 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff04 	bl	8003660 <__NVIC_EnableIRQ>
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	0800c4f8 	.word	0x0800c4f8

08003864 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff73 	bl	8003758 <SysTick_Config>
 8003872:	4603      	mov	r3, r0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e19d      	b.n	8003bca <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a79      	ldr	r2, [pc, #484]	@ (8003a78 <HAL_DMA_Init+0x1fc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d044      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a77      	ldr	r2, [pc, #476]	@ (8003a7c <HAL_DMA_Init+0x200>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03f      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a76      	ldr	r2, [pc, #472]	@ (8003a80 <HAL_DMA_Init+0x204>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d03a      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a74      	ldr	r2, [pc, #464]	@ (8003a84 <HAL_DMA_Init+0x208>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d035      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a73      	ldr	r2, [pc, #460]	@ (8003a88 <HAL_DMA_Init+0x20c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d030      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a71      	ldr	r2, [pc, #452]	@ (8003a8c <HAL_DMA_Init+0x210>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02b      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a70      	ldr	r2, [pc, #448]	@ (8003a90 <HAL_DMA_Init+0x214>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d026      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a94 <HAL_DMA_Init+0x218>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d021      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a98 <HAL_DMA_Init+0x21c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d01c      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6b      	ldr	r2, [pc, #428]	@ (8003a9c <HAL_DMA_Init+0x220>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d017      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa0 <HAL_DMA_Init+0x224>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d012      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a68      	ldr	r2, [pc, #416]	@ (8003aa4 <HAL_DMA_Init+0x228>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a67      	ldr	r2, [pc, #412]	@ (8003aa8 <HAL_DMA_Init+0x22c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d008      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a65      	ldr	r2, [pc, #404]	@ (8003aac <HAL_DMA_Init+0x230>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <HAL_DMA_Init+0xa6>
 800391a:	21a5      	movs	r1, #165	@ 0xa5
 800391c:	4864      	ldr	r0, [pc, #400]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 800391e:	f7fe ff9f 	bl	8002860 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <HAL_DMA_Init+0xc8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b10      	cmp	r3, #16
 8003930:	d008      	beq.n	8003944 <HAL_DMA_Init+0xc8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393a:	d003      	beq.n	8003944 <HAL_DMA_Init+0xc8>
 800393c:	21a6      	movs	r1, #166	@ 0xa6
 800393e:	485c      	ldr	r0, [pc, #368]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 8003940:	f7fe ff8e 	bl	8002860 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b40      	cmp	r3, #64	@ 0x40
 800394a:	d007      	beq.n	800395c <HAL_DMA_Init+0xe0>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_DMA_Init+0xe0>
 8003954:	21a7      	movs	r1, #167	@ 0xa7
 8003956:	4856      	ldr	r0, [pc, #344]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 8003958:	f7fe ff82 	bl	8002860 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b80      	cmp	r3, #128	@ 0x80
 8003962:	d007      	beq.n	8003974 <HAL_DMA_Init+0xf8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_DMA_Init+0xf8>
 800396c:	21a8      	movs	r1, #168	@ 0xa8
 800396e:	4850      	ldr	r0, [pc, #320]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 8003970:	f7fe ff76 	bl	8002860 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00d      	beq.n	8003998 <HAL_DMA_Init+0x11c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003984:	d008      	beq.n	8003998 <HAL_DMA_Init+0x11c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800398e:	d003      	beq.n	8003998 <HAL_DMA_Init+0x11c>
 8003990:	21a9      	movs	r1, #169	@ 0xa9
 8003992:	4847      	ldr	r0, [pc, #284]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 8003994:	f7fe ff64 	bl	8002860 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <HAL_DMA_Init+0x140>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a8:	d008      	beq.n	80039bc <HAL_DMA_Init+0x140>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b2:	d003      	beq.n	80039bc <HAL_DMA_Init+0x140>
 80039b4:	21aa      	movs	r1, #170	@ 0xaa
 80039b6:	483e      	ldr	r0, [pc, #248]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 80039b8:	f7fe ff52 	bl	8002860 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_DMA_Init+0x158>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d003      	beq.n	80039d4 <HAL_DMA_Init+0x158>
 80039cc:	21ab      	movs	r1, #171	@ 0xab
 80039ce:	4838      	ldr	r0, [pc, #224]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 80039d0:	f7fe ff46 	bl	8002860 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <HAL_DMA_Init+0x186>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e4:	d00d      	beq.n	8003a02 <HAL_DMA_Init+0x186>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ee:	d008      	beq.n	8003a02 <HAL_DMA_Init+0x186>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039f8:	d003      	beq.n	8003a02 <HAL_DMA_Init+0x186>
 80039fa:	21ac      	movs	r1, #172	@ 0xac
 80039fc:	482c      	ldr	r0, [pc, #176]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 80039fe:	f7fe ff2f 	bl	8002860 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01f      	beq.n	8003a4a <HAL_DMA_Init+0x1ce>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d01b      	beq.n	8003a4a <HAL_DMA_Init+0x1ce>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d017      	beq.n	8003a4a <HAL_DMA_Init+0x1ce>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d013      	beq.n	8003a4a <HAL_DMA_Init+0x1ce>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d00f      	beq.n	8003a4a <HAL_DMA_Init+0x1ce>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d00b      	beq.n	8003a4a <HAL_DMA_Init+0x1ce>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d007      	beq.n	8003a4a <HAL_DMA_Init+0x1ce>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b07      	cmp	r3, #7
 8003a40:	d003      	beq.n	8003a4a <HAL_DMA_Init+0x1ce>
 8003a42:	21ae      	movs	r1, #174	@ 0xae
 8003a44:	481a      	ldr	r0, [pc, #104]	@ (8003ab0 <HAL_DMA_Init+0x234>)
 8003a46:	f7fe ff0b 	bl	8002860 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b18      	ldr	r3, [pc, #96]	@ (8003ab4 <HAL_DMA_Init+0x238>)
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d836      	bhi.n	8003ac4 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4b16      	ldr	r3, [pc, #88]	@ (8003ab8 <HAL_DMA_Init+0x23c>)
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a16      	ldr	r2, [pc, #88]	@ (8003abc <HAL_DMA_Init+0x240>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	009a      	lsls	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <HAL_DMA_Init+0x244>)
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a74:	e035      	b.n	8003ae2 <HAL_DMA_Init+0x266>
 8003a76:	bf00      	nop
 8003a78:	40020008 	.word	0x40020008
 8003a7c:	4002001c 	.word	0x4002001c
 8003a80:	40020030 	.word	0x40020030
 8003a84:	40020044 	.word	0x40020044
 8003a88:	40020058 	.word	0x40020058
 8003a8c:	4002006c 	.word	0x4002006c
 8003a90:	40020080 	.word	0x40020080
 8003a94:	40020408 	.word	0x40020408
 8003a98:	4002041c 	.word	0x4002041c
 8003a9c:	40020430 	.word	0x40020430
 8003aa0:	40020444 	.word	0x40020444
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	4002046c 	.word	0x4002046c
 8003aac:	40020480 	.word	0x40020480
 8003ab0:	0800c534 	.word	0x0800c534
 8003ab4:	40020407 	.word	0x40020407
 8003ab8:	bffdfff8 	.word	0xbffdfff8
 8003abc:	cccccccd 	.word	0xcccccccd
 8003ac0:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b42      	ldr	r3, [pc, #264]	@ (8003bd4 <HAL_DMA_Init+0x358>)
 8003acc:	4413      	add	r3, r2
 8003ace:	4a42      	ldr	r2, [pc, #264]	@ (8003bd8 <HAL_DMA_Init+0x35c>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a3f      	ldr	r2, [pc, #252]	@ (8003bdc <HAL_DMA_Init+0x360>)
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b3c:	d039      	beq.n	8003bb2 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	4a27      	ldr	r2, [pc, #156]	@ (8003be0 <HAL_DMA_Init+0x364>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d11a      	bne.n	8003b7e <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b48:	4b26      	ldr	r3, [pc, #152]	@ (8003be4 <HAL_DMA_Init+0x368>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b50:	f003 031c 	and.w	r3, r3, #28
 8003b54:	210f      	movs	r1, #15
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	4921      	ldr	r1, [pc, #132]	@ (8003be4 <HAL_DMA_Init+0x368>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b62:	4b20      	ldr	r3, [pc, #128]	@ (8003be4 <HAL_DMA_Init+0x368>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6859      	ldr	r1, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f003 031c 	and.w	r3, r3, #28
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	491b      	ldr	r1, [pc, #108]	@ (8003be4 <HAL_DMA_Init+0x368>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e019      	b.n	8003bb2 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <HAL_DMA_Init+0x36c>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	f003 031c 	and.w	r3, r3, #28
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	4915      	ldr	r1, [pc, #84]	@ (8003be8 <HAL_DMA_Init+0x36c>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b98:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <HAL_DMA_Init+0x36c>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	f003 031c 	and.w	r3, r3, #28
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	490e      	ldr	r1, [pc, #56]	@ (8003be8 <HAL_DMA_Init+0x36c>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	bffdfbf8 	.word	0xbffdfbf8
 8003bd8:	cccccccd 	.word	0xcccccccd
 8003bdc:	40020400 	.word	0x40020400
 8003be0:	40020000 	.word	0x40020000
 8003be4:	400200a8 	.word	0x400200a8
 8003be8:	400204a8 	.word	0x400204a8

08003bec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_Start_IT+0x20>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c0a:	d304      	bcc.n	8003c16 <HAL_DMA_Start_IT+0x2a>
 8003c0c:	f240 11df 	movw	r1, #479	@ 0x1df
 8003c10:	482c      	ldr	r0, [pc, #176]	@ (8003cc4 <HAL_DMA_Start_IT+0xd8>)
 8003c12:	f7fe fe25 	bl	8002860 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_DMA_Start_IT+0x38>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e04b      	b.n	8003cbc <HAL_DMA_Start_IT+0xd0>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d13a      	bne.n	8003cae <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f923 	bl	8003ea8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 020e 	orr.w	r2, r2, #14
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e00f      	b.n	8003c9c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0204 	bic.w	r2, r2, #4
 8003c8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 020a 	orr.w	r2, r2, #10
 8003c9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e005      	b.n	8003cba <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	0800c534 	.word	0x0800c534

08003cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d005      	beq.n	8003cec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e029      	b.n	8003d40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 020e 	bic.w	r2, r2, #14
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d10:	f003 021c 	and.w	r2, r3, #28
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
    }
  }
  return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	f003 031c 	and.w	r3, r3, #28
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d026      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x7a>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d021      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f003 021c 	and.w	r2, r3, #28
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2104      	movs	r1, #4
 8003dac:	fa01 f202 	lsl.w	r2, r1, r2
 8003db0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d071      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dc2:	e06c      	b.n	8003e9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc8:	f003 031c 	and.w	r3, r3, #28
 8003dcc:	2202      	movs	r2, #2
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d02e      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xec>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d029      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 020a 	bic.w	r2, r2, #10
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0c:	f003 021c 	and.w	r2, r3, #28
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	2102      	movs	r1, #2
 8003e16:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d038      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e34:	e033      	b.n	8003e9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	f003 031c 	and.w	r3, r3, #28
 8003e3e:	2208      	movs	r2, #8
 8003e40:	409a      	lsls	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d02a      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x156>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d025      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 020e 	bic.w	r2, r2, #14
 8003e62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	f003 021c 	and.w	r2, r3, #28
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2101      	movs	r1, #1
 8003e72:	fa01 f202 	lsl.w	r2, r1, r2
 8003e76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e9e:	bf00      	nop
 8003ea0:	bf00      	nop
}
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eba:	f003 021c 	and.w	r2, r3, #28
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d108      	bne.n	8003eec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eea:	e007      	b.n	8003efc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f1c:	d01f      	beq.n	8003f5e <HAL_GPIO_Init+0x56>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a3c      	ldr	r2, [pc, #240]	@ (8004014 <HAL_GPIO_Init+0x10c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01b      	beq.n	8003f5e <HAL_GPIO_Init+0x56>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a3b      	ldr	r2, [pc, #236]	@ (8004018 <HAL_GPIO_Init+0x110>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d017      	beq.n	8003f5e <HAL_GPIO_Init+0x56>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a3a      	ldr	r2, [pc, #232]	@ (800401c <HAL_GPIO_Init+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_GPIO_Init+0x56>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a39      	ldr	r2, [pc, #228]	@ (8004020 <HAL_GPIO_Init+0x118>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00f      	beq.n	8003f5e <HAL_GPIO_Init+0x56>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a38      	ldr	r2, [pc, #224]	@ (8004024 <HAL_GPIO_Init+0x11c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <HAL_GPIO_Init+0x56>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a37      	ldr	r2, [pc, #220]	@ (8004028 <HAL_GPIO_Init+0x120>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <HAL_GPIO_Init+0x56>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a36      	ldr	r2, [pc, #216]	@ (800402c <HAL_GPIO_Init+0x124>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x56>
 8003f56:	21aa      	movs	r1, #170	@ 0xaa
 8003f58:	4835      	ldr	r0, [pc, #212]	@ (8004030 <HAL_GPIO_Init+0x128>)
 8003f5a:	f7fe fc81 	bl	8002860 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_GPIO_Init+0x6a>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f70:	d303      	bcc.n	8003f7a <HAL_GPIO_Init+0x72>
 8003f72:	21ab      	movs	r1, #171	@ 0xab
 8003f74:	482e      	ldr	r0, [pc, #184]	@ (8004030 <HAL_GPIO_Init+0x128>)
 8003f76:	f7fe fc73 	bl	8002860 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 823d 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f000 8238 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b11      	cmp	r3, #17
 8003f94:	f000 8233 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	f000 822e 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b12      	cmp	r3, #18
 8003fa8:	f000 8229 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003fb4:	f000 8223 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003fc0:	f000 821d 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003fcc:	f000 8217 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8003fd8:	f000 8211 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8003fe4:	f000 820b 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003ff0:	f000 8205 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	f000 8200 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b0b      	cmp	r3, #11
 8004004:	f000 81fb 	beq.w	80043fe <HAL_GPIO_Init+0x4f6>
 8004008:	21ac      	movs	r1, #172	@ 0xac
 800400a:	4809      	ldr	r0, [pc, #36]	@ (8004030 <HAL_GPIO_Init+0x128>)
 800400c:	f7fe fc28 	bl	8002860 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004010:	e1f5      	b.n	80043fe <HAL_GPIO_Init+0x4f6>
 8004012:	bf00      	nop
 8004014:	48000400 	.word	0x48000400
 8004018:	48000800 	.word	0x48000800
 800401c:	48000c00 	.word	0x48000c00
 8004020:	48001000 	.word	0x48001000
 8004024:	48001400 	.word	0x48001400
 8004028:	48001800 	.word	0x48001800
 800402c:	48001c00 	.word	0x48001c00
 8004030:	0800c56c 	.word	0x0800c56c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 81d6 	beq.w	80043f8 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d005      	beq.n	8004064 <HAL_GPIO_Init+0x15c>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d144      	bne.n	80040ee <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00f      	beq.n	800408c <HAL_GPIO_Init+0x184>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d00b      	beq.n	800408c <HAL_GPIO_Init+0x184>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d007      	beq.n	800408c <HAL_GPIO_Init+0x184>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x184>
 8004084:	21bb      	movs	r1, #187	@ 0xbb
 8004086:	489c      	ldr	r0, [pc, #624]	@ (80042f8 <HAL_GPIO_Init+0x3f0>)
 8004088:	f7fe fbea 	bl	8002860 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	2203      	movs	r2, #3
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040c2:	2201      	movs	r2, #1
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0201 	and.w	r2, r3, #1
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d118      	bne.n	800412c <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004100:	2201      	movs	r2, #1
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	08db      	lsrs	r3, r3, #3
 8004116:	f003 0201 	and.w	r2, r3, #1
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b03      	cmp	r3, #3
 8004136:	d027      	beq.n	8004188 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_GPIO_Init+0x250>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d007      	beq.n	8004158 <HAL_GPIO_Init+0x250>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x250>
 8004150:	21dc      	movs	r1, #220	@ 0xdc
 8004152:	4869      	ldr	r0, [pc, #420]	@ (80042f8 <HAL_GPIO_Init+0x3f0>)
 8004154:	f7fe fb84 	bl	8002860 <assert_failed>

        temp = GPIOx->PUPDR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	2203      	movs	r2, #3
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d14f      	bne.n	8004234 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800419a:	d01f      	beq.n	80041dc <HAL_GPIO_Init+0x2d4>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a57      	ldr	r2, [pc, #348]	@ (80042fc <HAL_GPIO_Init+0x3f4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01b      	beq.n	80041dc <HAL_GPIO_Init+0x2d4>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a56      	ldr	r2, [pc, #344]	@ (8004300 <HAL_GPIO_Init+0x3f8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d017      	beq.n	80041dc <HAL_GPIO_Init+0x2d4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a55      	ldr	r2, [pc, #340]	@ (8004304 <HAL_GPIO_Init+0x3fc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_GPIO_Init+0x2d4>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a54      	ldr	r2, [pc, #336]	@ (8004308 <HAL_GPIO_Init+0x400>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00f      	beq.n	80041dc <HAL_GPIO_Init+0x2d4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a53      	ldr	r2, [pc, #332]	@ (800430c <HAL_GPIO_Init+0x404>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <HAL_GPIO_Init+0x2d4>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a52      	ldr	r2, [pc, #328]	@ (8004310 <HAL_GPIO_Init+0x408>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d007      	beq.n	80041dc <HAL_GPIO_Init+0x2d4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a51      	ldr	r2, [pc, #324]	@ (8004314 <HAL_GPIO_Init+0x40c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x2d4>
 80041d4:	21e8      	movs	r1, #232	@ 0xe8
 80041d6:	4848      	ldr	r0, [pc, #288]	@ (80042f8 <HAL_GPIO_Init+0x3f0>)
 80041d8:	f7fe fb42 	bl	8002860 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d903      	bls.n	80041ec <HAL_GPIO_Init+0x2e4>
 80041e4:	21e9      	movs	r1, #233	@ 0xe9
 80041e6:	4844      	ldr	r0, [pc, #272]	@ (80042f8 <HAL_GPIO_Init+0x3f0>)
 80041e8:	f7fe fb3a 	bl	8002860 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	08da      	lsrs	r2, r3, #3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3208      	adds	r2, #8
 80041f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	220f      	movs	r2, #15
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4013      	ands	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	08da      	lsrs	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3208      	adds	r2, #8
 800422e:	6939      	ldr	r1, [r7, #16]
 8004230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	2203      	movs	r2, #3
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4013      	ands	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80c1 	beq.w	80043f8 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004276:	4b28      	ldr	r3, [pc, #160]	@ (8004318 <HAL_GPIO_Init+0x410>)
 8004278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427a:	4a27      	ldr	r2, [pc, #156]	@ (8004318 <HAL_GPIO_Init+0x410>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6613      	str	r3, [r2, #96]	@ 0x60
 8004282:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <HAL_GPIO_Init+0x410>)
 8004284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800428e:	4a23      	ldr	r2, [pc, #140]	@ (800431c <HAL_GPIO_Init+0x414>)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	3302      	adds	r3, #2
 8004296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	220f      	movs	r2, #15
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	43db      	mvns	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042b8:	d03a      	beq.n	8004330 <HAL_GPIO_Init+0x428>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a0f      	ldr	r2, [pc, #60]	@ (80042fc <HAL_GPIO_Init+0x3f4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d034      	beq.n	800432c <HAL_GPIO_Init+0x424>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004300 <HAL_GPIO_Init+0x3f8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02e      	beq.n	8004328 <HAL_GPIO_Init+0x420>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004304 <HAL_GPIO_Init+0x3fc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d028      	beq.n	8004324 <HAL_GPIO_Init+0x41c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004308 <HAL_GPIO_Init+0x400>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d022      	beq.n	8004320 <HAL_GPIO_Init+0x418>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a0b      	ldr	r2, [pc, #44]	@ (800430c <HAL_GPIO_Init+0x404>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <HAL_GPIO_Init+0x3ea>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004310 <HAL_GPIO_Init+0x408>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <HAL_GPIO_Init+0x3e6>
 80042ea:	2306      	movs	r3, #6
 80042ec:	e021      	b.n	8004332 <HAL_GPIO_Init+0x42a>
 80042ee:	2307      	movs	r3, #7
 80042f0:	e01f      	b.n	8004332 <HAL_GPIO_Init+0x42a>
 80042f2:	2305      	movs	r3, #5
 80042f4:	e01d      	b.n	8004332 <HAL_GPIO_Init+0x42a>
 80042f6:	bf00      	nop
 80042f8:	0800c56c 	.word	0x0800c56c
 80042fc:	48000400 	.word	0x48000400
 8004300:	48000800 	.word	0x48000800
 8004304:	48000c00 	.word	0x48000c00
 8004308:	48001000 	.word	0x48001000
 800430c:	48001400 	.word	0x48001400
 8004310:	48001800 	.word	0x48001800
 8004314:	48001c00 	.word	0x48001c00
 8004318:	40021000 	.word	0x40021000
 800431c:	40010000 	.word	0x40010000
 8004320:	2304      	movs	r3, #4
 8004322:	e006      	b.n	8004332 <HAL_GPIO_Init+0x42a>
 8004324:	2303      	movs	r3, #3
 8004326:	e004      	b.n	8004332 <HAL_GPIO_Init+0x42a>
 8004328:	2302      	movs	r3, #2
 800432a:	e002      	b.n	8004332 <HAL_GPIO_Init+0x42a>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_GPIO_Init+0x42a>
 8004330:	2300      	movs	r3, #0
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	f002 0203 	and.w	r2, r2, #3
 8004338:	0092      	lsls	r2, r2, #2
 800433a:	4093      	lsls	r3, r2
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004342:	4935      	ldr	r1, [pc, #212]	@ (8004418 <HAL_GPIO_Init+0x510>)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	3302      	adds	r3, #2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004350:	4b32      	ldr	r3, [pc, #200]	@ (800441c <HAL_GPIO_Init+0x514>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	43db      	mvns	r3, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004374:	4a29      	ldr	r2, [pc, #164]	@ (800441c <HAL_GPIO_Init+0x514>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800437a:	4b28      	ldr	r3, [pc, #160]	@ (800441c <HAL_GPIO_Init+0x514>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800439e:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_GPIO_Init+0x514>)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043a4:	4b1d      	ldr	r3, [pc, #116]	@ (800441c <HAL_GPIO_Init+0x514>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4013      	ands	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043c8:	4a14      	ldr	r2, [pc, #80]	@ (800441c <HAL_GPIO_Init+0x514>)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80043ce:	4b13      	ldr	r3, [pc, #76]	@ (800441c <HAL_GPIO_Init+0x514>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043f2:	4a0a      	ldr	r2, [pc, #40]	@ (800441c <HAL_GPIO_Init+0x514>)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3301      	adds	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	f47f ae13 	bne.w	8004034 <HAL_GPIO_Init+0x12c>
  }
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40010000 	.word	0x40010000
 800441c:	40010400 	.word	0x40010400

08004420 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004434:	d020      	beq.n	8004478 <HAL_GPIO_DeInit+0x58>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a84      	ldr	r2, [pc, #528]	@ (800464c <HAL_GPIO_DeInit+0x22c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01c      	beq.n	8004478 <HAL_GPIO_DeInit+0x58>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a83      	ldr	r2, [pc, #524]	@ (8004650 <HAL_GPIO_DeInit+0x230>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <HAL_GPIO_DeInit+0x58>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a82      	ldr	r2, [pc, #520]	@ (8004654 <HAL_GPIO_DeInit+0x234>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d014      	beq.n	8004478 <HAL_GPIO_DeInit+0x58>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a81      	ldr	r2, [pc, #516]	@ (8004658 <HAL_GPIO_DeInit+0x238>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d010      	beq.n	8004478 <HAL_GPIO_DeInit+0x58>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a80      	ldr	r2, [pc, #512]	@ (800465c <HAL_GPIO_DeInit+0x23c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00c      	beq.n	8004478 <HAL_GPIO_DeInit+0x58>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a7f      	ldr	r2, [pc, #508]	@ (8004660 <HAL_GPIO_DeInit+0x240>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d008      	beq.n	8004478 <HAL_GPIO_DeInit+0x58>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a7e      	ldr	r2, [pc, #504]	@ (8004664 <HAL_GPIO_DeInit+0x244>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_GPIO_DeInit+0x58>
 800446e:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8004472:	487d      	ldr	r0, [pc, #500]	@ (8004668 <HAL_GPIO_DeInit+0x248>)
 8004474:	f7fe f9f4 	bl	8002860 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <HAL_GPIO_DeInit+0x6a>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004486:	f0c0 80d4 	bcc.w	8004632 <HAL_GPIO_DeInit+0x212>
 800448a:	f240 113b 	movw	r1, #315	@ 0x13b
 800448e:	4876      	ldr	r0, [pc, #472]	@ (8004668 <HAL_GPIO_DeInit+0x248>)
 8004490:	f7fe f9e6 	bl	8002860 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004494:	e0cd      	b.n	8004632 <HAL_GPIO_DeInit+0x212>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004496:	2201      	movs	r2, #1
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80c0 	beq.w	800462c <HAL_GPIO_DeInit+0x20c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80044ac:	4a6f      	ldr	r2, [pc, #444]	@ (800466c <HAL_GPIO_DeInit+0x24c>)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	3302      	adds	r3, #2
 80044b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4013      	ands	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044d4:	d025      	beq.n	8004522 <HAL_GPIO_DeInit+0x102>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a5c      	ldr	r2, [pc, #368]	@ (800464c <HAL_GPIO_DeInit+0x22c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01f      	beq.n	800451e <HAL_GPIO_DeInit+0xfe>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a5b      	ldr	r2, [pc, #364]	@ (8004650 <HAL_GPIO_DeInit+0x230>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d019      	beq.n	800451a <HAL_GPIO_DeInit+0xfa>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004654 <HAL_GPIO_DeInit+0x234>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_DeInit+0xf6>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a59      	ldr	r2, [pc, #356]	@ (8004658 <HAL_GPIO_DeInit+0x238>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00d      	beq.n	8004512 <HAL_GPIO_DeInit+0xf2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a58      	ldr	r2, [pc, #352]	@ (800465c <HAL_GPIO_DeInit+0x23c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <HAL_GPIO_DeInit+0xee>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a57      	ldr	r2, [pc, #348]	@ (8004660 <HAL_GPIO_DeInit+0x240>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_GPIO_DeInit+0xea>
 8004506:	2306      	movs	r3, #6
 8004508:	e00c      	b.n	8004524 <HAL_GPIO_DeInit+0x104>
 800450a:	2307      	movs	r3, #7
 800450c:	e00a      	b.n	8004524 <HAL_GPIO_DeInit+0x104>
 800450e:	2305      	movs	r3, #5
 8004510:	e008      	b.n	8004524 <HAL_GPIO_DeInit+0x104>
 8004512:	2304      	movs	r3, #4
 8004514:	e006      	b.n	8004524 <HAL_GPIO_DeInit+0x104>
 8004516:	2303      	movs	r3, #3
 8004518:	e004      	b.n	8004524 <HAL_GPIO_DeInit+0x104>
 800451a:	2302      	movs	r3, #2
 800451c:	e002      	b.n	8004524 <HAL_GPIO_DeInit+0x104>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_GPIO_DeInit+0x104>
 8004522:	2300      	movs	r3, #0
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	f002 0203 	and.w	r2, r2, #3
 800452a:	0092      	lsls	r2, r2, #2
 800452c:	4093      	lsls	r3, r2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	429a      	cmp	r2, r3
 8004532:	d132      	bne.n	800459a <HAL_GPIO_DeInit+0x17a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004534:	4b4e      	ldr	r3, [pc, #312]	@ (8004670 <HAL_GPIO_DeInit+0x250>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	43db      	mvns	r3, r3
 800453c:	494c      	ldr	r1, [pc, #304]	@ (8004670 <HAL_GPIO_DeInit+0x250>)
 800453e:	4013      	ands	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004542:	4b4b      	ldr	r3, [pc, #300]	@ (8004670 <HAL_GPIO_DeInit+0x250>)
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	43db      	mvns	r3, r3
 800454a:	4949      	ldr	r1, [pc, #292]	@ (8004670 <HAL_GPIO_DeInit+0x250>)
 800454c:	4013      	ands	r3, r2
 800454e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004550:	4b47      	ldr	r3, [pc, #284]	@ (8004670 <HAL_GPIO_DeInit+0x250>)
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	43db      	mvns	r3, r3
 8004558:	4945      	ldr	r1, [pc, #276]	@ (8004670 <HAL_GPIO_DeInit+0x250>)
 800455a:	4013      	ands	r3, r2
 800455c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800455e:	4b44      	ldr	r3, [pc, #272]	@ (8004670 <HAL_GPIO_DeInit+0x250>)
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	4942      	ldr	r1, [pc, #264]	@ (8004670 <HAL_GPIO_DeInit+0x250>)
 8004568:	4013      	ands	r3, r2
 800456a:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	220f      	movs	r2, #15
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800457c:	4a3b      	ldr	r2, [pc, #236]	@ (800466c <HAL_GPIO_DeInit+0x24c>)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	3302      	adds	r3, #2
 8004584:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43da      	mvns	r2, r3
 800458c:	4837      	ldr	r0, [pc, #220]	@ (800466c <HAL_GPIO_DeInit+0x24c>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	400a      	ands	r2, r1
 8004594:	3302      	adds	r3, #2
 8004596:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2103      	movs	r1, #3
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	08da      	lsrs	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3208      	adds	r2, #8
 80045b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	220f      	movs	r2, #15
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	08d2      	lsrs	r2, r2, #3
 80045ce:	4019      	ands	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3208      	adds	r2, #8
 80045d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2103      	movs	r1, #3
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	401a      	ands	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	2101      	movs	r1, #1
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	401a      	ands	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	2103      	movs	r1, #3
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461c:	2101      	movs	r1, #1
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	401a      	ands	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	3301      	adds	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	f47f af2b 	bne.w	8004496 <HAL_GPIO_DeInit+0x76>
  }
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	48000400 	.word	0x48000400
 8004650:	48000800 	.word	0x48000800
 8004654:	48000c00 	.word	0x48000c00
 8004658:	48001000 	.word	0x48001000
 800465c:	48001400 	.word	0x48001400
 8004660:	48001800 	.word	0x48001800
 8004664:	48001c00 	.word	0x48001c00
 8004668:	0800c56c 	.word	0x0800c56c
 800466c:	40010000 	.word	0x40010000
 8004670:	40010400 	.word	0x40010400

08004674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	4613      	mov	r3, r2
 8004682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <HAL_GPIO_WritePin+0x20>
 800468a:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800468e:	480e      	ldr	r0, [pc, #56]	@ (80046c8 <HAL_GPIO_WritePin+0x54>)
 8004690:	f7fe f8e6 	bl	8002860 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_GPIO_WritePin+0x36>
 800469a:	787b      	ldrb	r3, [r7, #1]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d004      	beq.n	80046aa <HAL_GPIO_WritePin+0x36>
 80046a0:	f240 11af 	movw	r1, #431	@ 0x1af
 80046a4:	4808      	ldr	r0, [pc, #32]	@ (80046c8 <HAL_GPIO_WritePin+0x54>)
 80046a6:	f7fe f8db 	bl	8002860 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80046aa:	787b      	ldrb	r3, [r7, #1]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046b0:	887a      	ldrh	r2, [r7, #2]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046b6:	e002      	b.n	80046be <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046b8:	887a      	ldrh	r2, [r7, #2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	0800c56c 	.word	0x0800c56c

080046cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046d6:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046e2:	4a05      	ldr	r2, [pc, #20]	@ (80046f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f806 	bl	80046fc <HAL_GPIO_EXTI_Callback>
  }
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40010400 	.word	0x40010400

080046fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004718:	4b04      	ldr	r3, [pc, #16]	@ (800472c <HAL_PWREx_GetVoltageRange+0x18>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40007000 	.word	0x40007000

08004730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800473e:	d007      	beq.n	8004750 <HAL_PWREx_ControlVoltageScaling+0x20>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004746:	d003      	beq.n	8004750 <HAL_PWREx_ControlVoltageScaling+0x20>
 8004748:	21a7      	movs	r1, #167	@ 0xa7
 800474a:	4826      	ldr	r0, [pc, #152]	@ (80047e4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800474c:	f7fe f888 	bl	8002860 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004756:	d130      	bne.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004758:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004764:	d038      	beq.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004766:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800476e:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004770:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004774:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004776:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2232      	movs	r2, #50	@ 0x32
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	0c9b      	lsrs	r3, r3, #18
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478c:	e002      	b.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b01      	subs	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004794:	4b14      	ldr	r3, [pc, #80]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a0:	d102      	bne.n	80047a8 <HAL_PWREx_ControlVoltageScaling+0x78>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f2      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047a8:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b4:	d110      	bne.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	d007      	beq.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047c8:	4b07      	ldr	r3, [pc, #28]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047d0:	4a05      	ldr	r2, [pc, #20]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80047d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	0800c5a8 	.word	0x0800c5a8
 80047e8:	40007000 	.word	0x40007000
 80047ec:	20000010 	.word	0x20000010
 80047f0:	431bde83 	.word	0x431bde83

080047f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f000 bcef 	b.w	80051e6 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_OscConfig+0x2e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b1f      	cmp	r3, #31
 8004816:	d904      	bls.n	8004822 <HAL_RCC_OscConfig+0x2e>
 8004818:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 800481c:	489a      	ldr	r0, [pc, #616]	@ (8004a88 <HAL_RCC_OscConfig+0x294>)
 800481e:	f7fe f81f 	bl	8002860 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004822:	4b9a      	ldr	r3, [pc, #616]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800482c:	4b97      	ldr	r3, [pc, #604]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 813d 	beq.w	8004abe <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_RCC_OscConfig+0x6a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d004      	beq.n	800485e <HAL_RCC_OscConfig+0x6a>
 8004854:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8004858:	488b      	ldr	r0, [pc, #556]	@ (8004a88 <HAL_RCC_OscConfig+0x294>)
 800485a:	f7fe f801 	bl	8002860 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	2bff      	cmp	r3, #255	@ 0xff
 8004864:	d904      	bls.n	8004870 <HAL_RCC_OscConfig+0x7c>
 8004866:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800486a:	4887      	ldr	r0, [pc, #540]	@ (8004a88 <HAL_RCC_OscConfig+0x294>)
 800486c:	f7fd fff8 	bl	8002860 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d030      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	2b10      	cmp	r3, #16
 800487e:	d02c      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	2b20      	cmp	r3, #32
 8004886:	d028      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	2b30      	cmp	r3, #48	@ 0x30
 800488e:	d024      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	d020      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	2b50      	cmp	r3, #80	@ 0x50
 800489e:	d01c      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	2b60      	cmp	r3, #96	@ 0x60
 80048a6:	d018      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	2b70      	cmp	r3, #112	@ 0x70
 80048ae:	d014      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	2b80      	cmp	r3, #128	@ 0x80
 80048b6:	d010      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	2b90      	cmp	r3, #144	@ 0x90
 80048be:	d00c      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	2ba0      	cmp	r3, #160	@ 0xa0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	2bb0      	cmp	r3, #176	@ 0xb0
 80048ce:	d004      	beq.n	80048da <HAL_RCC_OscConfig+0xe6>
 80048d0:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80048d4:	486c      	ldr	r0, [pc, #432]	@ (8004a88 <HAL_RCC_OscConfig+0x294>)
 80048d6:	f7fd ffc3 	bl	8002860 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <HAL_RCC_OscConfig+0xfc>
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	f040 808e 	bne.w	8004a04 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	f040 808a 	bne.w	8004a04 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048f0:	4b66      	ldr	r3, [pc, #408]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d006      	beq.n	800490a <HAL_RCC_OscConfig+0x116>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f000 bc6e 	b.w	80051e6 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <HAL_RCC_OscConfig+0x130>
 800491a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004922:	e005      	b.n	8004930 <HAL_RCC_OscConfig+0x13c>
 8004924:	4b59      	ldr	r3, [pc, #356]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004930:	4293      	cmp	r3, r2
 8004932:	d224      	bcs.n	800497e <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fec1 	bl	80056c0 <RCC_SetFlashLatencyFromMSIRange>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f000 bc4e 	b.w	80051e6 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800494a:	4b50      	ldr	r3, [pc, #320]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a4f      	ldr	r2, [pc, #316]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004950:	f043 0308 	orr.w	r3, r3, #8
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b4d      	ldr	r3, [pc, #308]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	494a      	ldr	r1, [pc, #296]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004964:	4313      	orrs	r3, r2
 8004966:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004968:	4b48      	ldr	r3, [pc, #288]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	4945      	ldr	r1, [pc, #276]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
 800497c:	e026      	b.n	80049cc <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800497e:	4b43      	ldr	r3, [pc, #268]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a42      	ldr	r2, [pc, #264]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004984:	f043 0308 	orr.w	r3, r3, #8
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	4b40      	ldr	r3, [pc, #256]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	493d      	ldr	r1, [pc, #244]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004998:	4313      	orrs	r3, r2
 800499a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800499c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	4938      	ldr	r1, [pc, #224]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fe80 	bl	80056c0 <RCC_SetFlashLatencyFromMSIRange>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f000 bc0d 	b.w	80051e6 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049cc:	f000 fdb4 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b2e      	ldr	r3, [pc, #184]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	492c      	ldr	r1, [pc, #176]	@ (8004a90 <HAL_RCC_OscConfig+0x29c>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
 80049e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a94 <HAL_RCC_OscConfig+0x2a0>)
 80049ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004a98 <HAL_RCC_OscConfig+0x2a4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fda7 	bl	8003544 <HAL_InitTick>
 80049f6:	4603      	mov	r3, r0
 80049f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05d      	beq.n	8004abc <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	e3f0      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d032      	beq.n	8004a72 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1e      	ldr	r2, [pc, #120]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a18:	f7fe fde4 	bl	80035e4 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a20:	f7fe fde0 	bl	80035e4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e3d9      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a32:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a3e:	4b13      	ldr	r3, [pc, #76]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a12      	ldr	r2, [pc, #72]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a44:	f043 0308 	orr.w	r3, r3, #8
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	490d      	ldr	r1, [pc, #52]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	4908      	ldr	r1, [pc, #32]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	604b      	str	r3, [r1, #4]
 8004a70:	e025      	b.n	8004abe <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a72:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a05      	ldr	r2, [pc, #20]	@ (8004a8c <HAL_RCC_OscConfig+0x298>)
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a7e:	f7fe fdb1 	bl	80035e4 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a84:	e013      	b.n	8004aae <HAL_RCC_OscConfig+0x2ba>
 8004a86:	bf00      	nop
 8004a88:	0800c5e4 	.word	0x0800c5e4
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	0800c740 	.word	0x0800c740
 8004a94:	20000010 	.word	0x20000010
 8004a98:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a9c:	f7fe fda2 	bl	80035e4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e39b      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aae:	4b97      	ldr	r3, [pc, #604]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x2a8>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d07e      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00e      	beq.n	8004af0 <HAL_RCC_OscConfig+0x2fc>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ada:	d009      	beq.n	8004af0 <HAL_RCC_OscConfig+0x2fc>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae4:	d004      	beq.n	8004af0 <HAL_RCC_OscConfig+0x2fc>
 8004ae6:	f240 2119 	movw	r1, #537	@ 0x219
 8004aea:	4889      	ldr	r0, [pc, #548]	@ (8004d10 <HAL_RCC_OscConfig+0x51c>)
 8004aec:	f7fd feb8 	bl	8002860 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d005      	beq.n	8004b02 <HAL_RCC_OscConfig+0x30e>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d10e      	bne.n	8004b1a <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d10b      	bne.n	8004b1a <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b02:	4b82      	ldr	r3, [pc, #520]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d05b      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x3d2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d157      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e365      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b22:	d106      	bne.n	8004b32 <HAL_RCC_OscConfig+0x33e>
 8004b24:	4b79      	ldr	r3, [pc, #484]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a78      	ldr	r2, [pc, #480]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	e01d      	b.n	8004b6e <HAL_RCC_OscConfig+0x37a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b3a:	d10c      	bne.n	8004b56 <HAL_RCC_OscConfig+0x362>
 8004b3c:	4b73      	ldr	r3, [pc, #460]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a72      	ldr	r2, [pc, #456]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	4b70      	ldr	r3, [pc, #448]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6f      	ldr	r2, [pc, #444]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	e00b      	b.n	8004b6e <HAL_RCC_OscConfig+0x37a>
 8004b56:	4b6d      	ldr	r3, [pc, #436]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	4b6a      	ldr	r3, [pc, #424]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a69      	ldr	r2, [pc, #420]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d013      	beq.n	8004b9e <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fe fd35 	bl	80035e4 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7e:	f7fe fd31 	bl	80035e4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b64      	cmp	r3, #100	@ 0x64
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e32a      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b90:	4b5e      	ldr	r3, [pc, #376]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x38a>
 8004b9c:	e014      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fe fd21 	bl	80035e4 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba6:	f7fe fd1d 	bl	80035e4 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b64      	cmp	r3, #100	@ 0x64
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e316      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bb8:	4b54      	ldr	r3, [pc, #336]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x3b2>
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d077      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d009      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x3fc>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be4:	d004      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x3fc>
 8004be6:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8004bea:	4849      	ldr	r0, [pc, #292]	@ (8004d10 <HAL_RCC_OscConfig+0x51c>)
 8004bec:	f7fd fe38 	bl	8002860 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b1f      	cmp	r3, #31
 8004bf6:	d904      	bls.n	8004c02 <HAL_RCC_OscConfig+0x40e>
 8004bf8:	f240 214d 	movw	r1, #589	@ 0x24d
 8004bfc:	4844      	ldr	r0, [pc, #272]	@ (8004d10 <HAL_RCC_OscConfig+0x51c>)
 8004bfe:	f7fd fe2f 	bl	8002860 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x420>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d119      	bne.n	8004c42 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d116      	bne.n	8004c42 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c14:	4b3d      	ldr	r3, [pc, #244]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_RCC_OscConfig+0x438>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e2dc      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2c:	4b37      	ldr	r3, [pc, #220]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	4934      	ldr	r1, [pc, #208]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	e040      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d023      	beq.n	8004c92 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c4a:	4b30      	ldr	r3, [pc, #192]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fe fcc5 	bl	80035e4 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5e:	f7fe fcc1 	bl	80035e4 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e2ba      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c70:	4b26      	ldr	r3, [pc, #152]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7c:	4b23      	ldr	r3, [pc, #140]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	4920      	ldr	r1, [pc, #128]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
 8004c90:	e018      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c92:	4b1e      	ldr	r3, [pc, #120]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1d      	ldr	r2, [pc, #116]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fe fca1 	bl	80035e4 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca6:	f7fe fc9d 	bl	80035e4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e296      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f0      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d04e      	beq.n	8004d6e <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCC_OscConfig+0x4f6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d004      	beq.n	8004cea <HAL_RCC_OscConfig+0x4f6>
 8004ce0:	f240 218d 	movw	r1, #653	@ 0x28d
 8004ce4:	480a      	ldr	r0, [pc, #40]	@ (8004d10 <HAL_RCC_OscConfig+0x51c>)
 8004ce6:	f7fd fdbb 	bl	8002860 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d021      	beq.n	8004d36 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf2:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf8:	4a04      	ldr	r2, [pc, #16]	@ (8004d0c <HAL_RCC_OscConfig+0x518>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fe fc6f 	bl	80035e4 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d08:	e00d      	b.n	8004d26 <HAL_RCC_OscConfig+0x532>
 8004d0a:	bf00      	nop
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	0800c5e4 	.word	0x0800c5e4
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d14:	f7fe fc66 	bl	80035e4 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e25f      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d26:	4b66      	ldr	r3, [pc, #408]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ef      	beq.n	8004d14 <HAL_RCC_OscConfig+0x520>
 8004d34:	e01b      	b.n	8004d6e <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d36:	4b62      	ldr	r3, [pc, #392]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d3c:	4a60      	ldr	r2, [pc, #384]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d46:	f7fe fc4d 	bl	80035e4 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d4e:	f7fe fc49 	bl	80035e4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e242      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d60:	4b57      	ldr	r3, [pc, #348]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ef      	bne.n	8004d4e <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80b8 	beq.w	8004eec <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x5ae>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCC_OscConfig+0x5ae>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d004      	beq.n	8004da2 <HAL_RCC_OscConfig+0x5ae>
 8004d98:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8004d9c:	4849      	ldr	r0, [pc, #292]	@ (8004ec4 <HAL_RCC_OscConfig+0x6d0>)
 8004d9e:	f7fd fd5f 	bl	8002860 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004da2:	4b47      	ldr	r3, [pc, #284]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dae:	4b44      	ldr	r3, [pc, #272]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db2:	4a43      	ldr	r2, [pc, #268]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dba:	4b41      	ldr	r3, [pc, #260]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dca:	4b3f      	ldr	r3, [pc, #252]	@ (8004ec8 <HAL_RCC_OscConfig+0x6d4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d118      	bne.n	8004e08 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ec8 <HAL_RCC_OscConfig+0x6d4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3b      	ldr	r2, [pc, #236]	@ (8004ec8 <HAL_RCC_OscConfig+0x6d4>)
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de2:	f7fe fbff 	bl	80035e4 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dea:	f7fe fbfb 	bl	80035e4 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1f4      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dfc:	4b32      	ldr	r3, [pc, #200]	@ (8004ec8 <HAL_RCC_OscConfig+0x6d4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d108      	bne.n	8004e22 <HAL_RCC_OscConfig+0x62e>
 8004e10:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e16:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e20:	e024      	b.n	8004e6c <HAL_RCC_OscConfig+0x678>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	d110      	bne.n	8004e4c <HAL_RCC_OscConfig+0x658>
 8004e2a:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	4a23      	ldr	r2, [pc, #140]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e32:	f043 0304 	orr.w	r3, r3, #4
 8004e36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e3a:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e4a:	e00f      	b.n	8004e6c <HAL_RCC_OscConfig+0x678>
 8004e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e5c:	4b18      	ldr	r3, [pc, #96]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	4a17      	ldr	r2, [pc, #92]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e64:	f023 0304 	bic.w	r3, r3, #4
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d016      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fe fbb6 	bl	80035e4 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fe fbb2 	bl	80035e4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e1a9      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <HAL_RCC_OscConfig+0x6cc>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ed      	beq.n	8004e7c <HAL_RCC_OscConfig+0x688>
 8004ea0:	e01b      	b.n	8004eda <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fe fb9f 	bl	80035e4 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea8:	e010      	b.n	8004ecc <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eaa:	f7fe fb9b 	bl	80035e4 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d907      	bls.n	8004ecc <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e192      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	0800c5e4 	.word	0x0800c5e4
 8004ec8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ecc:	4b98      	ldr	r3, [pc, #608]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e7      	bne.n	8004eaa <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eda:	7ffb      	ldrb	r3, [r7, #31]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4b93      	ldr	r3, [pc, #588]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee4:	4a92      	ldr	r2, [pc, #584]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8004ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_RCC_OscConfig+0x71a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d008      	beq.n	8004f0e <HAL_RCC_OscConfig+0x71a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d004      	beq.n	8004f0e <HAL_RCC_OscConfig+0x71a>
 8004f04:	f240 316e 	movw	r1, #878	@ 0x36e
 8004f08:	488a      	ldr	r0, [pc, #552]	@ (8005134 <HAL_RCC_OscConfig+0x940>)
 8004f0a:	f7fd fca9 	bl	8002860 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8166 	beq.w	80051e4 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	f040 813c 	bne.w	800519a <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d010      	beq.n	8004f4c <HAL_RCC_OscConfig+0x758>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d00c      	beq.n	8004f4c <HAL_RCC_OscConfig+0x758>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d008      	beq.n	8004f4c <HAL_RCC_OscConfig+0x758>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d004      	beq.n	8004f4c <HAL_RCC_OscConfig+0x758>
 8004f42:	f240 3176 	movw	r1, #886	@ 0x376
 8004f46:	487b      	ldr	r0, [pc, #492]	@ (8005134 <HAL_RCC_OscConfig+0x940>)
 8004f48:	f7fd fc8a 	bl	8002860 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCC_OscConfig+0x768>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d904      	bls.n	8004f66 <HAL_RCC_OscConfig+0x772>
 8004f5c:	f240 3177 	movw	r1, #887	@ 0x377
 8004f60:	4874      	ldr	r0, [pc, #464]	@ (8005134 <HAL_RCC_OscConfig+0x940>)
 8004f62:	f7fd fc7d 	bl	8002860 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	2b07      	cmp	r3, #7
 8004f6c:	d903      	bls.n	8004f76 <HAL_RCC_OscConfig+0x782>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f72:	2b56      	cmp	r3, #86	@ 0x56
 8004f74:	d904      	bls.n	8004f80 <HAL_RCC_OscConfig+0x78c>
 8004f76:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8004f7a:	486e      	ldr	r0, [pc, #440]	@ (8005134 <HAL_RCC_OscConfig+0x940>)
 8004f7c:	f7fd fc70 	bl	8002860 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	2b07      	cmp	r3, #7
 8004f86:	d008      	beq.n	8004f9a <HAL_RCC_OscConfig+0x7a6>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	2b11      	cmp	r3, #17
 8004f8e:	d004      	beq.n	8004f9a <HAL_RCC_OscConfig+0x7a6>
 8004f90:	f240 317a 	movw	r1, #890	@ 0x37a
 8004f94:	4867      	ldr	r0, [pc, #412]	@ (8005134 <HAL_RCC_OscConfig+0x940>)
 8004f96:	f7fd fc63 	bl	8002860 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d010      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x7d0>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d00c      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x7d0>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d008      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x7d0>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d004      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x7d0>
 8004fba:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8004fbe:	485d      	ldr	r0, [pc, #372]	@ (8005134 <HAL_RCC_OscConfig+0x940>)
 8004fc0:	f7fd fc4e 	bl	8002860 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d010      	beq.n	8004fee <HAL_RCC_OscConfig+0x7fa>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d00c      	beq.n	8004fee <HAL_RCC_OscConfig+0x7fa>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	2b06      	cmp	r3, #6
 8004fda:	d008      	beq.n	8004fee <HAL_RCC_OscConfig+0x7fa>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d004      	beq.n	8004fee <HAL_RCC_OscConfig+0x7fa>
 8004fe4:	f240 317d 	movw	r1, #893	@ 0x37d
 8004fe8:	4852      	ldr	r0, [pc, #328]	@ (8005134 <HAL_RCC_OscConfig+0x940>)
 8004fea:	f7fd fc39 	bl	8002860 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fee:	4b50      	ldr	r3, [pc, #320]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f003 0203 	and.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d130      	bne.n	8005064 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	3b01      	subs	r3, #1
 800500e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d127      	bne.n	8005064 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d11f      	bne.n	8005064 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800502e:	2a07      	cmp	r2, #7
 8005030:	bf14      	ite	ne
 8005032:	2201      	movne	r2, #1
 8005034:	2200      	moveq	r2, #0
 8005036:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005038:	4293      	cmp	r3, r2
 800503a:	d113      	bne.n	8005064 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	3b01      	subs	r3, #1
 800504a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d109      	bne.n	8005064 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	3b01      	subs	r3, #1
 800505e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d074      	beq.n	800514e <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d06f      	beq.n	800514a <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800506a:	4b31      	ldr	r3, [pc, #196]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d105      	bne.n	8005082 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005076:	4b2e      	ldr	r3, [pc, #184]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0af      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005086:	4b2a      	ldr	r3, [pc, #168]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a29      	ldr	r2, [pc, #164]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 800508c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005090:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005092:	f7fe faa7 	bl	80035e4 <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fe faa3 	bl	80035e4 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e09c      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ac:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f0      	bne.n	800509a <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005138 <HAL_RCC_OscConfig+0x944>)
 80050be:	4013      	ands	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80050c8:	3a01      	subs	r2, #1
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	4311      	orrs	r1, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050d2:	0212      	lsls	r2, r2, #8
 80050d4:	4311      	orrs	r1, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050da:	0852      	lsrs	r2, r2, #1
 80050dc:	3a01      	subs	r2, #1
 80050de:	0552      	lsls	r2, r2, #21
 80050e0:	4311      	orrs	r1, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80050e6:	0852      	lsrs	r2, r2, #1
 80050e8:	3a01      	subs	r2, #1
 80050ea:	0652      	lsls	r2, r2, #25
 80050ec:	4311      	orrs	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050f2:	0912      	lsrs	r2, r2, #4
 80050f4:	0452      	lsls	r2, r2, #17
 80050f6:	430a      	orrs	r2, r1
 80050f8:	490d      	ldr	r1, [pc, #52]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a0b      	ldr	r2, [pc, #44]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8005104:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005108:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800510a:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	4a08      	ldr	r2, [pc, #32]	@ (8005130 <HAL_RCC_OscConfig+0x93c>)
 8005110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005114:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005116:	f7fe fa65 	bl	80035e4 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800511c:	e00e      	b.n	800513c <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511e:	f7fe fa61 	bl	80035e4 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d907      	bls.n	800513c <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e05a      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
 8005130:	40021000 	.word	0x40021000
 8005134:	0800c5e4 	.word	0x0800c5e4
 8005138:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800513c:	4b2c      	ldr	r3, [pc, #176]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ea      	beq.n	800511e <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005148:	e04c      	b.n	80051e4 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e04b      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514e:	4b28      	ldr	r3, [pc, #160]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d144      	bne.n	80051e4 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800515a:	4b25      	ldr	r3, [pc, #148]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a24      	ldr	r2, [pc, #144]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 8005160:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005164:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005166:	4b22      	ldr	r3, [pc, #136]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	4a21      	ldr	r2, [pc, #132]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 800516c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005170:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005172:	f7fe fa37 	bl	80035e4 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517a:	f7fe fa33 	bl	80035e4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e02c      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518c:	4b18      	ldr	r3, [pc, #96]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x986>
 8005198:	e024      	b.n	80051e4 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b0c      	cmp	r3, #12
 800519e:	d01f      	beq.n	80051e0 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a0:	4b13      	ldr	r3, [pc, #76]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a12      	ldr	r2, [pc, #72]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 80051a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fe fa1a 	bl	80035e4 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fe fa16 	bl	80035e4 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e00f      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c6:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051d2:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	4906      	ldr	r1, [pc, #24]	@ (80051f0 <HAL_RCC_OscConfig+0x9fc>)
 80051d8:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <HAL_RCC_OscConfig+0xa00>)
 80051da:	4013      	ands	r3, r2
 80051dc:	60cb      	str	r3, [r1, #12]
 80051de:	e001      	b.n	80051e4 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
 80051f4:	feeefffc 	.word	0xfeeefffc

080051f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e186      	b.n	800551a <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_RCC_ClockConfig+0x24>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b0f      	cmp	r3, #15
 800521a:	d904      	bls.n	8005226 <HAL_RCC_ClockConfig+0x2e>
 800521c:	f240 4159 	movw	r1, #1113	@ 0x459
 8005220:	4882      	ldr	r0, [pc, #520]	@ (800542c <HAL_RCC_ClockConfig+0x234>)
 8005222:	f7fd fb1d 	bl	8002860 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0x56>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d00d      	beq.n	800524e <HAL_RCC_ClockConfig+0x56>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d00a      	beq.n	800524e <HAL_RCC_ClockConfig+0x56>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b03      	cmp	r3, #3
 800523c:	d007      	beq.n	800524e <HAL_RCC_ClockConfig+0x56>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d004      	beq.n	800524e <HAL_RCC_ClockConfig+0x56>
 8005244:	f240 415a 	movw	r1, #1114	@ 0x45a
 8005248:	4878      	ldr	r0, [pc, #480]	@ (800542c <HAL_RCC_ClockConfig+0x234>)
 800524a:	f7fd fb09 	bl	8002860 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800524e:	4b78      	ldr	r3, [pc, #480]	@ (8005430 <HAL_RCC_ClockConfig+0x238>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d910      	bls.n	800527e <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525c:	4b74      	ldr	r3, [pc, #464]	@ (8005430 <HAL_RCC_ClockConfig+0x238>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f023 0207 	bic.w	r2, r3, #7
 8005264:	4972      	ldr	r1, [pc, #456]	@ (8005430 <HAL_RCC_ClockConfig+0x238>)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526c:	4b70      	ldr	r3, [pc, #448]	@ (8005430 <HAL_RCC_ClockConfig+0x238>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e14d      	b.n	800551a <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d039      	beq.n	80052fe <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d024      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b80      	cmp	r3, #128	@ 0x80
 8005298:	d020      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b90      	cmp	r3, #144	@ 0x90
 80052a0:	d01c      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80052a8:	d018      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2bb0      	cmp	r3, #176	@ 0xb0
 80052b0:	d014      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052b8:	d010      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2bd0      	cmp	r3, #208	@ 0xd0
 80052c0:	d00c      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2be0      	cmp	r3, #224	@ 0xe0
 80052c8:	d008      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2bf0      	cmp	r3, #240	@ 0xf0
 80052d0:	d004      	beq.n	80052dc <HAL_RCC_ClockConfig+0xe4>
 80052d2:	f240 4172 	movw	r1, #1138	@ 0x472
 80052d6:	4855      	ldr	r0, [pc, #340]	@ (800542c <HAL_RCC_ClockConfig+0x234>)
 80052d8:	f7fd fac2 	bl	8002860 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	4b54      	ldr	r3, [pc, #336]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d908      	bls.n	80052fe <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ec:	4b51      	ldr	r3, [pc, #324]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	494e      	ldr	r1, [pc, #312]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d061      	beq.n	80053ce <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_RCC_ClockConfig+0x13c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d00c      	beq.n	8005334 <HAL_RCC_ClockConfig+0x13c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d008      	beq.n	8005334 <HAL_RCC_ClockConfig+0x13c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d004      	beq.n	8005334 <HAL_RCC_ClockConfig+0x13c>
 800532a:	f240 417d 	movw	r1, #1149	@ 0x47d
 800532e:	483f      	ldr	r0, [pc, #252]	@ (800542c <HAL_RCC_ClockConfig+0x234>)
 8005330:	f7fd fa96 	bl	8002860 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b03      	cmp	r3, #3
 800533a:	d107      	bne.n	800534c <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533c:	4b3d      	ldr	r3, [pc, #244]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d121      	bne.n	800538c <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0e6      	b.n	800551a <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d107      	bne.n	8005364 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005354:	4b37      	ldr	r3, [pc, #220]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d115      	bne.n	800538c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0da      	b.n	800551a <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800536c:	4b31      	ldr	r3, [pc, #196]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0ce      	b.n	800551a <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537c:	4b2d      	ldr	r3, [pc, #180]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0c6      	b.n	800551a <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800538c:	4b29      	ldr	r3, [pc, #164]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f023 0203 	bic.w	r2, r3, #3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4926      	ldr	r1, [pc, #152]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539e:	f7fe f921 	bl	80035e4 <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a4:	e00a      	b.n	80053bc <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a6:	f7fe f91d 	bl	80035e4 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e0ae      	b.n	800551a <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 020c 	and.w	r2, r3, #12
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d1eb      	bne.n	80053a6 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	4b15      	ldr	r3, [pc, #84]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d208      	bcs.n	80053fc <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ea:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	490f      	ldr	r1, [pc, #60]	@ (8005434 <HAL_RCC_ClockConfig+0x23c>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005430 <HAL_RCC_ClockConfig+0x238>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d216      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b09      	ldr	r3, [pc, #36]	@ (8005430 <HAL_RCC_ClockConfig+0x238>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 0207 	bic.w	r2, r3, #7
 8005412:	4907      	ldr	r1, [pc, #28]	@ (8005430 <HAL_RCC_ClockConfig+0x238>)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <HAL_RCC_ClockConfig+0x238>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d007      	beq.n	8005438 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e076      	b.n	800551a <HAL_RCC_ClockConfig+0x322>
 800542c:	0800c5e4 	.word	0x0800c5e4
 8005430:	40022000 	.word	0x40022000
 8005434:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d025      	beq.n	8005490 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d018      	beq.n	800547e <HAL_RCC_ClockConfig+0x286>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005454:	d013      	beq.n	800547e <HAL_RCC_ClockConfig+0x286>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800545e:	d00e      	beq.n	800547e <HAL_RCC_ClockConfig+0x286>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x286>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005472:	d004      	beq.n	800547e <HAL_RCC_ClockConfig+0x286>
 8005474:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8005478:	482a      	ldr	r0, [pc, #168]	@ (8005524 <HAL_RCC_ClockConfig+0x32c>)
 800547a:	f7fd f9f1 	bl	8002860 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800547e:	4b2a      	ldr	r3, [pc, #168]	@ (8005528 <HAL_RCC_ClockConfig+0x330>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4927      	ldr	r1, [pc, #156]	@ (8005528 <HAL_RCC_ClockConfig+0x330>)
 800548c:	4313      	orrs	r3, r2
 800548e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d026      	beq.n	80054ea <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d018      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ac:	d013      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80054b6:	d00e      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80054c0:	d009      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054ca:	d004      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x2de>
 80054cc:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 80054d0:	4814      	ldr	r0, [pc, #80]	@ (8005524 <HAL_RCC_ClockConfig+0x32c>)
 80054d2:	f7fd f9c5 	bl	8002860 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054d6:	4b14      	ldr	r3, [pc, #80]	@ (8005528 <HAL_RCC_ClockConfig+0x330>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4910      	ldr	r1, [pc, #64]	@ (8005528 <HAL_RCC_ClockConfig+0x330>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ea:	f000 f825 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80054ee:	4602      	mov	r2, r0
 80054f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <HAL_RCC_ClockConfig+0x330>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	490c      	ldr	r1, [pc, #48]	@ (800552c <HAL_RCC_ClockConfig+0x334>)
 80054fc:	5ccb      	ldrb	r3, [r1, r3]
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	fa22 f303 	lsr.w	r3, r2, r3
 8005506:	4a0a      	ldr	r2, [pc, #40]	@ (8005530 <HAL_RCC_ClockConfig+0x338>)
 8005508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800550a:	4b0a      	ldr	r3, [pc, #40]	@ (8005534 <HAL_RCC_ClockConfig+0x33c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe f818 	bl	8003544 <HAL_InitTick>
 8005514:	4603      	mov	r3, r0
 8005516:	72fb      	strb	r3, [r7, #11]

  return status;
 8005518:	7afb      	ldrb	r3, [r7, #11]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	0800c5e4 	.word	0x0800c5e4
 8005528:	40021000 	.word	0x40021000
 800552c:	0800c740 	.word	0x0800c740
 8005530:	20000010 	.word	0x20000010
 8005534:	20000014 	.word	0x20000014

08005538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005538:	b480      	push	{r7}
 800553a:	b089      	sub	sp, #36	@ 0x24
 800553c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005546:	4b3e      	ldr	r3, [pc, #248]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005550:	4b3b      	ldr	r3, [pc, #236]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x34>
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b0c      	cmp	r3, #12
 8005564:	d121      	bne.n	80055aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d11e      	bne.n	80055aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800556c:	4b34      	ldr	r3, [pc, #208]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d107      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005578:	4b31      	ldr	r3, [pc, #196]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 800557a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e005      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005588:	4b2d      	ldr	r3, [pc, #180]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005594:	4a2b      	ldr	r2, [pc, #172]	@ (8005644 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10d      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055a8:	e00a      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d102      	bne.n	80055b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055b0:	4b25      	ldr	r3, [pc, #148]	@ (8005648 <HAL_RCC_GetSysClockFreq+0x110>)
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	e004      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d101      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055bc:	4b23      	ldr	r3, [pc, #140]	@ (800564c <HAL_RCC_GetSysClockFreq+0x114>)
 80055be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b0c      	cmp	r3, #12
 80055c4:	d134      	bne.n	8005630 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d003      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0xa6>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d003      	beq.n	80055e4 <HAL_RCC_GetSysClockFreq+0xac>
 80055dc:	e005      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055de:	4b1a      	ldr	r3, [pc, #104]	@ (8005648 <HAL_RCC_GetSysClockFreq+0x110>)
 80055e0:	617b      	str	r3, [r7, #20]
      break;
 80055e2:	e005      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055e4:	4b19      	ldr	r3, [pc, #100]	@ (800564c <HAL_RCC_GetSysClockFreq+0x114>)
 80055e6:	617b      	str	r3, [r7, #20]
      break;
 80055e8:	e002      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	617b      	str	r3, [r7, #20]
      break;
 80055ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f0:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	3301      	adds	r3, #1
 80055fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055fe:	4b10      	ldr	r3, [pc, #64]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	fb03 f202 	mul.w	r2, r3, r2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005616:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	0e5b      	lsrs	r3, r3, #25
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	3301      	adds	r3, #1
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005630:	69bb      	ldr	r3, [r7, #24]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3724      	adds	r7, #36	@ 0x24
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000
 8005644:	0800c758 	.word	0x0800c758
 8005648:	00f42400 	.word	0x00f42400
 800564c:	007a1200 	.word	0x007a1200

08005650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005654:	4b03      	ldr	r3, [pc, #12]	@ (8005664 <HAL_RCC_GetHCLKFreq+0x14>)
 8005656:	681b      	ldr	r3, [r3, #0]
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000010 	.word	0x20000010

08005668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800566c:	f7ff fff0 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 8005670:	4602      	mov	r2, r0
 8005672:	4b06      	ldr	r3, [pc, #24]	@ (800568c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	4904      	ldr	r1, [pc, #16]	@ (8005690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800567e:	5ccb      	ldrb	r3, [r1, r3]
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005688:	4618      	mov	r0, r3
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000
 8005690:	0800c750 	.word	0x0800c750

08005694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005698:	f7ff ffda 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 800569c:	4602      	mov	r2, r0
 800569e:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	0adb      	lsrs	r3, r3, #11
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	4904      	ldr	r1, [pc, #16]	@ (80056bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056aa:	5ccb      	ldrb	r3, [r1, r3]
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000
 80056bc:	0800c750 	.word	0x0800c750

080056c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056d8:	f7ff f81c 	bl	8004714 <HAL_PWREx_GetVoltageRange>
 80056dc:	6178      	str	r0, [r7, #20]
 80056de:	e014      	b.n	800570a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e0:	4b25      	ldr	r3, [pc, #148]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e4:	4a24      	ldr	r2, [pc, #144]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80056ec:	4b22      	ldr	r3, [pc, #136]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056f8:	f7ff f80c 	bl	8004714 <HAL_PWREx_GetVoltageRange>
 80056fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005702:	4a1d      	ldr	r2, [pc, #116]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005708:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005710:	d10b      	bne.n	800572a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b80      	cmp	r3, #128	@ 0x80
 8005716:	d919      	bls.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2ba0      	cmp	r3, #160	@ 0xa0
 800571c:	d902      	bls.n	8005724 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800571e:	2302      	movs	r3, #2
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	e013      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005724:	2301      	movs	r3, #1
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	e010      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b80      	cmp	r3, #128	@ 0x80
 800572e:	d902      	bls.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005730:	2303      	movs	r3, #3
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e00a      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b80      	cmp	r3, #128	@ 0x80
 800573a:	d102      	bne.n	8005742 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800573c:	2302      	movs	r3, #2
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e004      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b70      	cmp	r3, #112	@ 0x70
 8005746:	d101      	bne.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005748:	2301      	movs	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800574c:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f023 0207 	bic.w	r2, r3, #7
 8005754:	4909      	ldr	r1, [pc, #36]	@ (800577c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800575c:	4b07      	ldr	r3, [pc, #28]	@ (800577c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d001      	beq.n	800576e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000
 800577c:	40022000 	.word	0x40022000

08005780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005788:	2300      	movs	r3, #0
 800578a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800578c:	2300      	movs	r3, #0
 800578e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005798:	2b00      	cmp	r3, #0
 800579a:	d004      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057a4:	d303      	bcc.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x2e>
 80057a6:	21c9      	movs	r1, #201	@ 0xc9
 80057a8:	4889      	ldr	r0, [pc, #548]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80057aa:	f7fd f859 	bl	8002860 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d058      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d012      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057ca:	d00d      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057d4:	d008      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057de:	d003      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80057e0:	21d1      	movs	r1, #209	@ 0xd1
 80057e2:	487b      	ldr	r0, [pc, #492]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80057e4:	f7fd f83c 	bl	8002860 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057f0:	d02a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80057f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057f6:	d824      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80057f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057fc:	d008      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005802:	d81e      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580c:	d010      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800580e:	e018      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005810:	4b70      	ldr	r3, [pc, #448]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a6f      	ldr	r2, [pc, #444]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800581a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800581c:	e015      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fc69 	bl	80060fc <RCCEx_PLLSAI1_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800582e:	e00c      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3320      	adds	r3, #32
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fde0 	bl	80063fc <RCCEx_PLLSAI2_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005840:	e003      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	74fb      	strb	r3, [r7, #19]
      break;
 8005846:	e000      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8005848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10b      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005850:	4b60      	ldr	r3, [pc, #384]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005856:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800585e:	495d      	ldr	r1, [pc, #372]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005866:	e001      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d059      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005888:	d00e      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800588e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005892:	d009      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005898:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800589c:	d004      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800589e:	f240 110f 	movw	r1, #271	@ 0x10f
 80058a2:	484b      	ldr	r0, [pc, #300]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80058a4:	f7fc ffdc 	bl	8002860 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058b0:	d02a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80058b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058b6:	d824      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80058b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058bc:	d008      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80058be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058c2:	d81e      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80058c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058cc:	d010      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80058ce:	e018      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058d0:	4b40      	ldr	r3, [pc, #256]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4a3f      	ldr	r2, [pc, #252]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058dc:	e015      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3304      	adds	r3, #4
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fc09 	bl	80060fc <RCCEx_PLLSAI1_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058ee:	e00c      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3320      	adds	r3, #32
 80058f4:	2100      	movs	r1, #0
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fd80 	bl	80063fc <RCCEx_PLLSAI2_Config>
 80058fc:	4603      	mov	r3, r0
 80058fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005900:	e003      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	74fb      	strb	r3, [r7, #19]
      break;
 8005906:	e000      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 8005908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800590a:	7cfb      	ldrb	r3, [r7, #19]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10b      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005910:	4b30      	ldr	r3, [pc, #192]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005916:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800591e:	492d      	ldr	r1, [pc, #180]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005926:	e001      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	7cfb      	ldrb	r3, [r7, #19]
 800592a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80c2 	beq.w	8005abe <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005944:	2b00      	cmp	r3, #0
 8005946:	d016      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800594e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005952:	d010      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800595a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800596a:	d004      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800596c:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8005970:	4817      	ldr	r0, [pc, #92]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005972:	f7fc ff75 	bl	8002860 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005976:	4b17      	ldr	r3, [pc, #92]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00d      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800598c:	4b11      	ldr	r3, [pc, #68]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	4a10      	ldr	r2, [pc, #64]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005996:	6593      	str	r3, [r2, #88]	@ 0x58
 8005998:	4b0e      	ldr	r3, [pc, #56]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800599a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a4:	2301      	movs	r3, #1
 80059a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0a      	ldr	r2, [pc, #40]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059b4:	f7fd fe16 	bl	80035e4 <HAL_GetTick>
 80059b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059ba:	e00f      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059bc:	f7fd fe12 	bl	80035e4 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d908      	bls.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	74fb      	strb	r3, [r7, #19]
        break;
 80059ce:	e00b      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80059d0:	0800c61c 	.word	0x0800c61c
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059dc:	4b30      	ldr	r3, [pc, #192]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0e9      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d15c      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059ee:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01f      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d019      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a0c:	4b25      	ldr	r3, [pc, #148]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a18:	4b22      	ldr	r3, [pc, #136]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1e:	4a21      	ldr	r2, [pc, #132]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a28:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a38:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4a:	f7fd fdcb 	bl	80035e4 <HAL_GetTick>
 8005a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a50:	e00b      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a52:	f7fd fdc7 	bl	80035e4 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d902      	bls.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	74fb      	strb	r3, [r7, #19]
            break;
 8005a68:	e006      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0ec      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8005a78:	7cfb      	ldrb	r3, [r7, #19]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a7e:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a8e:	4905      	ldr	r1, [pc, #20]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a96:	e009      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
 8005a9a:	74bb      	strb	r3, [r7, #18]
 8005a9c:	e006      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8005a9e:	bf00      	nop
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aac:	7c7b      	ldrb	r3, [r7, #17]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d105      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab6:	4a8c      	ldr	r2, [pc, #560]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005abc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01f      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d010      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d00c      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d008      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d004      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005aea:	f240 1199 	movw	r1, #409	@ 0x199
 8005aee:	487f      	ldr	r0, [pc, #508]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005af0:	f7fc feb6 	bl	8002860 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005af4:	4b7c      	ldr	r3, [pc, #496]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afa:	f023 0203 	bic.w	r2, r3, #3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	4979      	ldr	r1, [pc, #484]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01f      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d010      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d00c      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	2b0c      	cmp	r3, #12
 8005b2c:	d008      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d004      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b36:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8005b3a:	486c      	ldr	r0, [pc, #432]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005b3c:	f7fc fe90 	bl	8002860 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b40:	4b69      	ldr	r3, [pc, #420]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	f023 020c 	bic.w	r2, r3, #12
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4e:	4966      	ldr	r1, [pc, #408]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01f      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d010      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d00c      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	2b30      	cmp	r3, #48	@ 0x30
 8005b78:	d008      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d004      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005b82:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b86:	4859      	ldr	r0, [pc, #356]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005b88:	f7fc fe6a 	bl	8002860 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b8c:	4b56      	ldr	r3, [pc, #344]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b92:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	4953      	ldr	r1, [pc, #332]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01f      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d010      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bba:	2b40      	cmp	r3, #64	@ 0x40
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bc4:	d008      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bca:	2b80      	cmp	r3, #128	@ 0x80
 8005bcc:	d004      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005bce:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8005bd2:	4846      	ldr	r0, [pc, #280]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005bd4:	f7fc fe44 	bl	8002860 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bd8:	4b43      	ldr	r3, [pc, #268]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be6:	4940      	ldr	r1, [pc, #256]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d022      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c0a:	d00e      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c14:	d009      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c1e:	d004      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005c20:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8005c24:	4831      	ldr	r0, [pc, #196]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005c26:	f7fc fe1b 	bl	8002860 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c38:	492b      	ldr	r1, [pc, #172]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d022      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d013      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c5c:	d00e      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c66:	d009      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c70:	d004      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8005c72:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8005c76:	481d      	ldr	r0, [pc, #116]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005c78:	f7fc fdf2 	bl	8002860 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8a:	4917      	ldr	r1, [pc, #92]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d028      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d013      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cae:	d00e      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005cb8:	d009      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005cc2:	d004      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8005cc4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8005cc8:	4808      	ldr	r0, [pc, #32]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8005cca:	f7fc fdc9 	bl	8002860 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cce:	4b06      	ldr	r3, [pc, #24]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cdc:	4902      	ldr	r1, [pc, #8]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005ce4:	e004      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005ce6:	bf00      	nop
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	0800c61c 	.word	0x0800c61c
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d022      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d013      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d0c:	d00e      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d16:	d009      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d20:	d004      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d22:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8005d26:	489e      	ldr	r0, [pc, #632]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005d28:	f7fc fd9a 	bl	8002860 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d2c:	4b9d      	ldr	r3, [pc, #628]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d3a:	499a      	ldr	r1, [pc, #616]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01d      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00e      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5e:	d009      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d68:	d004      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005d6a:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8005d6e:	488c      	ldr	r0, [pc, #560]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005d70:	f7fc fd76 	bl	8002860 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d74:	4b8b      	ldr	r3, [pc, #556]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d82:	4988      	ldr	r1, [pc, #544]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01d      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00e      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005da6:	d009      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db0:	d004      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8005db2:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8005db6:	487a      	ldr	r0, [pc, #488]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005db8:	f7fc fd52 	bl	8002860 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dbc:	4b79      	ldr	r3, [pc, #484]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dca:	4976      	ldr	r1, [pc, #472]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01d      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00e      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dee:	d009      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005df8:	d004      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005dfa:	f240 2107 	movw	r1, #519	@ 0x207
 8005dfe:	4868      	ldr	r0, [pc, #416]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005e00:	f7fc fd2e 	bl	8002860 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e04:	4b67      	ldr	r3, [pc, #412]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e12:	4964      	ldr	r1, [pc, #400]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d040      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d013      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e36:	d00e      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e40:	d009      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e46:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e4a:	d004      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e4c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005e50:	4853      	ldr	r0, [pc, #332]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005e52:	f7fc fd05 	bl	8002860 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e56:	4b53      	ldr	r3, [pc, #332]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e64:	494f      	ldr	r1, [pc, #316]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e74:	d106      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e76:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005e7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e80:	60d3      	str	r3, [r2, #12]
 8005e82:	e011      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3304      	adds	r3, #4
 8005e92:	2101      	movs	r1, #1
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f931 	bl	80060fc <RCCEx_PLLSAI1_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d040      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ec4:	d00e      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ece:	d009      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ed8:	d004      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8005eda:	f240 2141 	movw	r1, #577	@ 0x241
 8005ede:	4830      	ldr	r0, [pc, #192]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005ee0:	f7fc fcbe 	bl	8002860 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	492c      	ldr	r1, [pc, #176]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f02:	d106      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f04:	4b27      	ldr	r3, [pc, #156]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a26      	ldr	r2, [pc, #152]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f0e:	60d3      	str	r3, [r2, #12]
 8005f10:	e011      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f1a:	d10c      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	2101      	movs	r1, #1
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f8ea 	bl	80060fc <RCCEx_PLLSAI1_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8005f32:	7cfb      	ldrb	r3, [r7, #19]
 8005f34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d044      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d013      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f52:	d00e      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f5c:	d009      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f62:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f66:	d004      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8005f68:	f240 2166 	movw	r1, #614	@ 0x266
 8005f6c:	480c      	ldr	r0, [pc, #48]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8005f6e:	f7fc fc77 	bl	8002860 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f72:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f80:	4908      	ldr	r1, [pc, #32]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f90:	d10a      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f92:	4b04      	ldr	r3, [pc, #16]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4a03      	ldr	r2, [pc, #12]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f9c:	60d3      	str	r3, [r2, #12]
 8005f9e:	e015      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005fa0:	0800c61c 	.word	0x0800c61c
 8005fa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f89f 	bl	80060fc <RCCEx_PLLSAI1_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fc2:	7cfb      	ldrb	r3, [r7, #19]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d047      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d013      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe8:	d00e      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff2:	d009      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ff8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ffc:	d004      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8005ffe:	f240 2186 	movw	r1, #646	@ 0x286
 8006002:	483c      	ldr	r0, [pc, #240]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8006004:	f7fc fc2c 	bl	8002860 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006008:	4b3b      	ldr	r3, [pc, #236]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006016:	4938      	ldr	r1, [pc, #224]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006026:	d10d      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3304      	adds	r3, #4
 800602c:	2102      	movs	r1, #2
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f864 	bl	80060fc <RCCEx_PLLSAI1_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d014      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 800603e:	7cfb      	ldrb	r3, [r7, #19]
 8006040:	74bb      	strb	r3, [r7, #18]
 8006042:	e011      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604c:	d10c      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3320      	adds	r3, #32
 8006052:	2102      	movs	r1, #2
 8006054:	4618      	mov	r0, r3
 8006056:	f000 f9d1 	bl	80063fc <RCCEx_PLLSAI2_Config>
 800605a:	4603      	mov	r3, r0
 800605c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800605e:	7cfb      	ldrb	r3, [r7, #19]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8006064:	7cfb      	ldrb	r3, [r7, #19]
 8006066:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d018      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006084:	d004      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006086:	f240 21b6 	movw	r1, #694	@ 0x2b6
 800608a:	481a      	ldr	r0, [pc, #104]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800608c:	f7fc fbe8 	bl	8002860 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006090:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006096:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800609e:	4916      	ldr	r1, [pc, #88]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01b      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060c6:	d004      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80060c8:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 80060cc:	4809      	ldr	r0, [pc, #36]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80060ce:	f7fc fbc7 	bl	8002860 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060d2:	4b09      	ldr	r3, [pc, #36]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060e2:	4905      	ldr	r1, [pc, #20]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	0800c61c 	.word	0x0800c61c
 80060f8:	40021000 	.word	0x40021000

080060fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d010      	beq.n	8006134 <RCCEx_PLLSAI1_Config+0x38>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d00c      	beq.n	8006134 <RCCEx_PLLSAI1_Config+0x38>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d008      	beq.n	8006134 <RCCEx_PLLSAI1_Config+0x38>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d004      	beq.n	8006134 <RCCEx_PLLSAI1_Config+0x38>
 800612a:	f640 3162 	movw	r1, #2914	@ 0xb62
 800612e:	4887      	ldr	r0, [pc, #540]	@ (800634c <RCCEx_PLLSAI1_Config+0x250>)
 8006130:	f7fc fb96 	bl	8002860 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <RCCEx_PLLSAI1_Config+0x48>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b08      	cmp	r3, #8
 8006142:	d904      	bls.n	800614e <RCCEx_PLLSAI1_Config+0x52>
 8006144:	f640 3163 	movw	r1, #2915	@ 0xb63
 8006148:	4880      	ldr	r0, [pc, #512]	@ (800634c <RCCEx_PLLSAI1_Config+0x250>)
 800614a:	f7fc fb89 	bl	8002860 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b07      	cmp	r3, #7
 8006154:	d903      	bls.n	800615e <RCCEx_PLLSAI1_Config+0x62>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b56      	cmp	r3, #86	@ 0x56
 800615c:	d904      	bls.n	8006168 <RCCEx_PLLSAI1_Config+0x6c>
 800615e:	f640 3164 	movw	r1, #2916	@ 0xb64
 8006162:	487a      	ldr	r0, [pc, #488]	@ (800634c <RCCEx_PLLSAI1_Config+0x250>)
 8006164:	f7fc fb7c 	bl	8002860 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <RCCEx_PLLSAI1_Config+0x90>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <RCCEx_PLLSAI1_Config+0x90>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d007      	beq.n	800619c <RCCEx_PLLSAI1_Config+0xa0>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8006194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <RCCEx_PLLSAI1_Config+0xaa>
 800619c:	f640 3165 	movw	r1, #2917	@ 0xb65
 80061a0:	486a      	ldr	r0, [pc, #424]	@ (800634c <RCCEx_PLLSAI1_Config+0x250>)
 80061a2:	f7fc fb5d 	bl	8002860 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d018      	beq.n	80061e4 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80061b2:	4b67      	ldr	r3, [pc, #412]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0203 	and.w	r2, r3, #3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d10d      	bne.n	80061de <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
       ||
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80061ca:	4b61      	ldr	r3, [pc, #388]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
       ||
 80061da:	429a      	cmp	r2, r3
 80061dc:	d047      	beq.n	800626e <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e044      	b.n	800626e <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d018      	beq.n	800621e <RCCEx_PLLSAI1_Config+0x122>
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d825      	bhi.n	800623c <RCCEx_PLLSAI1_Config+0x140>
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d002      	beq.n	80061fa <RCCEx_PLLSAI1_Config+0xfe>
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d009      	beq.n	800620c <RCCEx_PLLSAI1_Config+0x110>
 80061f8:	e020      	b.n	800623c <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061fa:	4b55      	ldr	r3, [pc, #340]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11d      	bne.n	8006242 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800620a:	e01a      	b.n	8006242 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800620c:	4b50      	ldr	r3, [pc, #320]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006214:	2b00      	cmp	r3, #0
 8006216:	d116      	bne.n	8006246 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800621c:	e013      	b.n	8006246 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800621e:	4b4c      	ldr	r3, [pc, #304]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800622a:	4b49      	ldr	r3, [pc, #292]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800623a:	e006      	b.n	800624a <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
      break;
 8006240:	e004      	b.n	800624c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8006242:	bf00      	nop
 8006244:	e002      	b.n	800624c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <RCCEx_PLLSAI1_Config+0x150>
      break;
 800624a:	bf00      	nop
    }

    if(status == HAL_OK)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10d      	bne.n	800626e <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006252:	4b3f      	ldr	r3, [pc, #252]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6819      	ldr	r1, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	3b01      	subs	r3, #1
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	430b      	orrs	r3, r1
 8006268:	4939      	ldr	r1, [pc, #228]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 800626a:	4313      	orrs	r3, r2
 800626c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 80ba 	bne.w	80063ea <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006276:	4b36      	ldr	r3, [pc, #216]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a35      	ldr	r2, [pc, #212]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 800627c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006282:	f7fd f9af 	bl	80035e4 <HAL_GetTick>
 8006286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006288:	e009      	b.n	800629e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800628a:	f7fd f9ab 	bl	80035e4 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d902      	bls.n	800629e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	73fb      	strb	r3, [r7, #15]
        break;
 800629c:	e005      	b.n	80062aa <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800629e:	4b2c      	ldr	r3, [pc, #176]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1ef      	bne.n	800628a <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f040 809c 	bne.w	80063ea <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11e      	bne.n	80062f6 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2b07      	cmp	r3, #7
 80062be:	d008      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0x1d6>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b11      	cmp	r3, #17
 80062c6:	d004      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0x1d6>
 80062c8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80062cc:	481f      	ldr	r0, [pc, #124]	@ (800634c <RCCEx_PLLSAI1_Config+0x250>)
 80062ce:	f7fc fac7 	bl	8002860 <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80062da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6892      	ldr	r2, [r2, #8]
 80062e2:	0211      	lsls	r1, r2, #8
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68d2      	ldr	r2, [r2, #12]
 80062e8:	0912      	lsrs	r2, r2, #4
 80062ea:	0452      	lsls	r2, r2, #17
 80062ec:	430a      	orrs	r2, r1
 80062ee:	4918      	ldr	r1, [pc, #96]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	610b      	str	r3, [r1, #16]
 80062f4:	e055      	b.n	80063a2 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d12b      	bne.n	8006354 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b02      	cmp	r3, #2
 8006302:	d010      	beq.n	8006326 <RCCEx_PLLSAI1_Config+0x22a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d00c      	beq.n	8006326 <RCCEx_PLLSAI1_Config+0x22a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b06      	cmp	r3, #6
 8006312:	d008      	beq.n	8006326 <RCCEx_PLLSAI1_Config+0x22a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d004      	beq.n	8006326 <RCCEx_PLLSAI1_Config+0x22a>
 800631c:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8006320:	480a      	ldr	r0, [pc, #40]	@ (800634c <RCCEx_PLLSAI1_Config+0x250>)
 8006322:	f7fc fa9d 	bl	8002860 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006326:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800632e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6892      	ldr	r2, [r2, #8]
 8006336:	0211      	lsls	r1, r2, #8
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6912      	ldr	r2, [r2, #16]
 800633c:	0852      	lsrs	r2, r2, #1
 800633e:	3a01      	subs	r2, #1
 8006340:	0552      	lsls	r2, r2, #21
 8006342:	430a      	orrs	r2, r1
 8006344:	4902      	ldr	r1, [pc, #8]	@ (8006350 <RCCEx_PLLSAI1_Config+0x254>)
 8006346:	4313      	orrs	r3, r2
 8006348:	610b      	str	r3, [r1, #16]
 800634a:	e02a      	b.n	80063a2 <RCCEx_PLLSAI1_Config+0x2a6>
 800634c:	0800c61c 	.word	0x0800c61c
 8006350:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d010      	beq.n	800637e <RCCEx_PLLSAI1_Config+0x282>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d00c      	beq.n	800637e <RCCEx_PLLSAI1_Config+0x282>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	2b06      	cmp	r3, #6
 800636a:	d008      	beq.n	800637e <RCCEx_PLLSAI1_Config+0x282>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d004      	beq.n	800637e <RCCEx_PLLSAI1_Config+0x282>
 8006374:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8006378:	481e      	ldr	r0, [pc, #120]	@ (80063f4 <RCCEx_PLLSAI1_Config+0x2f8>)
 800637a:	f7fc fa71 	bl	8002860 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800637e:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006386:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6892      	ldr	r2, [r2, #8]
 800638e:	0211      	lsls	r1, r2, #8
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6952      	ldr	r2, [r2, #20]
 8006394:	0852      	lsrs	r2, r2, #1
 8006396:	3a01      	subs	r2, #1
 8006398:	0652      	lsls	r2, r2, #25
 800639a:	430a      	orrs	r2, r1
 800639c:	4916      	ldr	r1, [pc, #88]	@ (80063f8 <RCCEx_PLLSAI1_Config+0x2fc>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063a2:	4b15      	ldr	r3, [pc, #84]	@ (80063f8 <RCCEx_PLLSAI1_Config+0x2fc>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a14      	ldr	r2, [pc, #80]	@ (80063f8 <RCCEx_PLLSAI1_Config+0x2fc>)
 80063a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ae:	f7fd f919 	bl	80035e4 <HAL_GetTick>
 80063b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063b4:	e009      	b.n	80063ca <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063b6:	f7fd f915 	bl	80035e4 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d902      	bls.n	80063ca <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	73fb      	strb	r3, [r7, #15]
          break;
 80063c8:	e005      	b.n	80063d6 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063ca:	4b0b      	ldr	r3, [pc, #44]	@ (80063f8 <RCCEx_PLLSAI1_Config+0x2fc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0ef      	beq.n	80063b6 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063dc:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <RCCEx_PLLSAI1_Config+0x2fc>)
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	4904      	ldr	r1, [pc, #16]	@ (80063f8 <RCCEx_PLLSAI1_Config+0x2fc>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	0800c61c 	.word	0x0800c61c
 80063f8:	40021000 	.word	0x40021000

080063fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d010      	beq.n	8006434 <RCCEx_PLLSAI2_Config+0x38>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d00c      	beq.n	8006434 <RCCEx_PLLSAI2_Config+0x38>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d008      	beq.n	8006434 <RCCEx_PLLSAI2_Config+0x38>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b03      	cmp	r3, #3
 8006428:	d004      	beq.n	8006434 <RCCEx_PLLSAI2_Config+0x38>
 800642a:	f640 412f 	movw	r1, #3119	@ 0xc2f
 800642e:	4896      	ldr	r0, [pc, #600]	@ (8006688 <RCCEx_PLLSAI2_Config+0x28c>)
 8006430:	f7fc fa16 	bl	8002860 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <RCCEx_PLLSAI2_Config+0x48>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d904      	bls.n	800644e <RCCEx_PLLSAI2_Config+0x52>
 8006444:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8006448:	488f      	ldr	r0, [pc, #572]	@ (8006688 <RCCEx_PLLSAI2_Config+0x28c>)
 800644a:	f7fc fa09 	bl	8002860 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b07      	cmp	r3, #7
 8006454:	d903      	bls.n	800645e <RCCEx_PLLSAI2_Config+0x62>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b56      	cmp	r3, #86	@ 0x56
 800645c:	d904      	bls.n	8006468 <RCCEx_PLLSAI2_Config+0x6c>
 800645e:	f640 4131 	movw	r1, #3121	@ 0xc31
 8006462:	4889      	ldr	r0, [pc, #548]	@ (8006688 <RCCEx_PLLSAI2_Config+0x28c>)
 8006464:	f7fc f9fc 	bl	8002860 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <RCCEx_PLLSAI2_Config+0x84>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <RCCEx_PLLSAI2_Config+0x94>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <RCCEx_PLLSAI2_Config+0x9e>
 8006490:	f640 4132 	movw	r1, #3122	@ 0xc32
 8006494:	487c      	ldr	r0, [pc, #496]	@ (8006688 <RCCEx_PLLSAI2_Config+0x28c>)
 8006496:	f7fc f9e3 	bl	8002860 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800649a:	4b7c      	ldr	r3, [pc, #496]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d018      	beq.n	80064d8 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064a6:	4b79      	ldr	r3, [pc, #484]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f003 0203 	and.w	r2, r3, #3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d10d      	bne.n	80064d2 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
       ||
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80064be:	4b73      	ldr	r3, [pc, #460]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	091b      	lsrs	r3, r3, #4
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
       ||
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d047      	beq.n	8006562 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	73fb      	strb	r3, [r7, #15]
 80064d6:	e044      	b.n	8006562 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d018      	beq.n	8006512 <RCCEx_PLLSAI2_Config+0x116>
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d825      	bhi.n	8006530 <RCCEx_PLLSAI2_Config+0x134>
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d002      	beq.n	80064ee <RCCEx_PLLSAI2_Config+0xf2>
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d009      	beq.n	8006500 <RCCEx_PLLSAI2_Config+0x104>
 80064ec:	e020      	b.n	8006530 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064ee:	4b67      	ldr	r3, [pc, #412]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d11d      	bne.n	8006536 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064fe:	e01a      	b.n	8006536 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006500:	4b62      	ldr	r3, [pc, #392]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006508:	2b00      	cmp	r3, #0
 800650a:	d116      	bne.n	800653a <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006510:	e013      	b.n	800653a <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006512:	4b5e      	ldr	r3, [pc, #376]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10f      	bne.n	800653e <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800651e:	4b5b      	ldr	r3, [pc, #364]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800652e:	e006      	b.n	800653e <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	73fb      	strb	r3, [r7, #15]
      break;
 8006534:	e004      	b.n	8006540 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800653e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10d      	bne.n	8006562 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006546:	4b51      	ldr	r3, [pc, #324]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6819      	ldr	r1, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	3b01      	subs	r3, #1
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	430b      	orrs	r3, r1
 800655c:	494b      	ldr	r1, [pc, #300]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 800655e:	4313      	orrs	r3, r2
 8006560:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 808a 	bne.w	800667e <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800656a:	4b48      	ldr	r3, [pc, #288]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a47      	ldr	r2, [pc, #284]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006576:	f7fd f835 	bl	80035e4 <HAL_GetTick>
 800657a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800657c:	e009      	b.n	8006592 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800657e:	f7fd f831 	bl	80035e4 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d902      	bls.n	8006592 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	73fb      	strb	r3, [r7, #15]
        break;
 8006590:	e005      	b.n	800659e <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006592:	4b3e      	ldr	r3, [pc, #248]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ef      	bne.n	800657e <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d16c      	bne.n	800667e <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d11e      	bne.n	80065e8 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	2b07      	cmp	r3, #7
 80065b0:	d008      	beq.n	80065c4 <RCCEx_PLLSAI2_Config+0x1c8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2b11      	cmp	r3, #17
 80065b8:	d004      	beq.n	80065c4 <RCCEx_PLLSAI2_Config+0x1c8>
 80065ba:	f640 4185 	movw	r1, #3205	@ 0xc85
 80065be:	4832      	ldr	r0, [pc, #200]	@ (8006688 <RCCEx_PLLSAI2_Config+0x28c>)
 80065c0:	f7fc f94e 	bl	8002860 <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065c4:	4b31      	ldr	r3, [pc, #196]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80065cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6892      	ldr	r2, [r2, #8]
 80065d4:	0211      	lsls	r1, r2, #8
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	68d2      	ldr	r2, [r2, #12]
 80065da:	0912      	lsrs	r2, r2, #4
 80065dc:	0452      	lsls	r2, r2, #17
 80065de:	430a      	orrs	r2, r1
 80065e0:	492a      	ldr	r1, [pc, #168]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	614b      	str	r3, [r1, #20]
 80065e6:	e026      	b.n	8006636 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d010      	beq.n	8006612 <RCCEx_PLLSAI2_Config+0x216>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d00c      	beq.n	8006612 <RCCEx_PLLSAI2_Config+0x216>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d008      	beq.n	8006612 <RCCEx_PLLSAI2_Config+0x216>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d004      	beq.n	8006612 <RCCEx_PLLSAI2_Config+0x216>
 8006608:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 800660c:	481e      	ldr	r0, [pc, #120]	@ (8006688 <RCCEx_PLLSAI2_Config+0x28c>)
 800660e:	f7fc f927 	bl	8002860 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006612:	4b1e      	ldr	r3, [pc, #120]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800661a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6892      	ldr	r2, [r2, #8]
 8006622:	0211      	lsls	r1, r2, #8
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6912      	ldr	r2, [r2, #16]
 8006628:	0852      	lsrs	r2, r2, #1
 800662a:	3a01      	subs	r2, #1
 800662c:	0652      	lsls	r2, r2, #25
 800662e:	430a      	orrs	r2, r1
 8006630:	4916      	ldr	r1, [pc, #88]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006632:	4313      	orrs	r3, r2
 8006634:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006636:	4b15      	ldr	r3, [pc, #84]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a14      	ldr	r2, [pc, #80]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 800663c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006642:	f7fc ffcf 	bl	80035e4 <HAL_GetTick>
 8006646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006648:	e009      	b.n	800665e <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800664a:	f7fc ffcb 	bl	80035e4 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d902      	bls.n	800665e <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	73fb      	strb	r3, [r7, #15]
          break;
 800665c:	e005      	b.n	800666a <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800665e:	4b0b      	ldr	r3, [pc, #44]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0ef      	beq.n	800664a <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006670:	4b06      	ldr	r3, [pc, #24]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 8006672:	695a      	ldr	r2, [r3, #20]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	4904      	ldr	r1, [pc, #16]	@ (800668c <RCCEx_PLLSAI2_Config+0x290>)
 800667a:	4313      	orrs	r3, r2
 800667c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800667e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	0800c61c 	.word	0x0800c61c
 800668c:	40021000 	.word	0x40021000

08006690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e1dd      	b.n	8006a5e <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a7b      	ldr	r2, [pc, #492]	@ (8006894 <HAL_SPI_Init+0x204>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_SPI_Init+0x3a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a79      	ldr	r2, [pc, #484]	@ (8006898 <HAL_SPI_Init+0x208>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_SPI_Init+0x3a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a78      	ldr	r2, [pc, #480]	@ (800689c <HAL_SPI_Init+0x20c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_SPI_Init+0x3a>
 80066c0:	f240 1147 	movw	r1, #327	@ 0x147
 80066c4:	4876      	ldr	r0, [pc, #472]	@ (80068a0 <HAL_SPI_Init+0x210>)
 80066c6:	f7fc f8cb 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_SPI_Init+0x56>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066da:	d004      	beq.n	80066e6 <HAL_SPI_Init+0x56>
 80066dc:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80066e0:	486f      	ldr	r0, [pc, #444]	@ (80068a0 <HAL_SPI_Init+0x210>)
 80066e2:	f7fc f8bd 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00e      	beq.n	800670c <HAL_SPI_Init+0x7c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f6:	d009      	beq.n	800670c <HAL_SPI_Init+0x7c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006700:	d004      	beq.n	800670c <HAL_SPI_Init+0x7c>
 8006702:	f240 1149 	movw	r1, #329	@ 0x149
 8006706:	4866      	ldr	r0, [pc, #408]	@ (80068a0 <HAL_SPI_Init+0x210>)
 8006708:	f7fc f8aa 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006714:	d040      	beq.n	8006798 <HAL_SPI_Init+0x108>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800671e:	d03b      	beq.n	8006798 <HAL_SPI_Init+0x108>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8006728:	d036      	beq.n	8006798 <HAL_SPI_Init+0x108>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006732:	d031      	beq.n	8006798 <HAL_SPI_Init+0x108>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800673c:	d02c      	beq.n	8006798 <HAL_SPI_Init+0x108>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006746:	d027      	beq.n	8006798 <HAL_SPI_Init+0x108>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8006750:	d022      	beq.n	8006798 <HAL_SPI_Init+0x108>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800675a:	d01d      	beq.n	8006798 <HAL_SPI_Init+0x108>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006764:	d018      	beq.n	8006798 <HAL_SPI_Init+0x108>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800676e:	d013      	beq.n	8006798 <HAL_SPI_Init+0x108>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006778:	d00e      	beq.n	8006798 <HAL_SPI_Init+0x108>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006782:	d009      	beq.n	8006798 <HAL_SPI_Init+0x108>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800678c:	d004      	beq.n	8006798 <HAL_SPI_Init+0x108>
 800678e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8006792:	4843      	ldr	r0, [pc, #268]	@ (80068a0 <HAL_SPI_Init+0x210>)
 8006794:	f7fc f864 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a0:	d00d      	beq.n	80067be <HAL_SPI_Init+0x12e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_SPI_Init+0x12e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067b2:	d004      	beq.n	80067be <HAL_SPI_Init+0x12e>
 80067b4:	f240 114b 	movw	r1, #331	@ 0x14b
 80067b8:	4839      	ldr	r0, [pc, #228]	@ (80068a0 <HAL_SPI_Init+0x210>)
 80067ba:	f7fc f851 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d008      	beq.n	80067d8 <HAL_SPI_Init+0x148>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <HAL_SPI_Init+0x148>
 80067ce:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80067d2:	4833      	ldr	r0, [pc, #204]	@ (80068a0 <HAL_SPI_Init+0x210>)
 80067d4:	f7fc f844 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_SPI_Init+0x192>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d01c      	beq.n	8006822 <HAL_SPI_Init+0x192>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d018      	beq.n	8006822 <HAL_SPI_Init+0x192>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	2b18      	cmp	r3, #24
 80067f6:	d014      	beq.n	8006822 <HAL_SPI_Init+0x192>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d010      	beq.n	8006822 <HAL_SPI_Init+0x192>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	2b28      	cmp	r3, #40	@ 0x28
 8006806:	d00c      	beq.n	8006822 <HAL_SPI_Init+0x192>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	2b30      	cmp	r3, #48	@ 0x30
 800680e:	d008      	beq.n	8006822 <HAL_SPI_Init+0x192>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	2b38      	cmp	r3, #56	@ 0x38
 8006816:	d004      	beq.n	8006822 <HAL_SPI_Init+0x192>
 8006818:	f240 114d 	movw	r1, #333	@ 0x14d
 800681c:	4820      	ldr	r0, [pc, #128]	@ (80068a0 <HAL_SPI_Init+0x210>)
 800681e:	f7fc f81f 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d008      	beq.n	800683c <HAL_SPI_Init+0x1ac>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	2b80      	cmp	r3, #128	@ 0x80
 8006830:	d004      	beq.n	800683c <HAL_SPI_Init+0x1ac>
 8006832:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8006836:	481a      	ldr	r0, [pc, #104]	@ (80068a0 <HAL_SPI_Init+0x210>)
 8006838:	f7fc f812 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_SPI_Init+0x1c6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	2b10      	cmp	r3, #16
 800684a:	d004      	beq.n	8006856 <HAL_SPI_Init+0x1c6>
 800684c:	f240 114f 	movw	r1, #335	@ 0x14f
 8006850:	4813      	ldr	r0, [pc, #76]	@ (80068a0 <HAL_SPI_Init+0x210>)
 8006852:	f7fc f805 	bl	8002860 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d151      	bne.n	8006902 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <HAL_SPI_Init+0x1e8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d004      	beq.n	8006878 <HAL_SPI_Init+0x1e8>
 800686e:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8006872:	480b      	ldr	r0, [pc, #44]	@ (80068a0 <HAL_SPI_Init+0x210>)
 8006874:	f7fb fff4 	bl	8002860 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d011      	beq.n	80068a4 <HAL_SPI_Init+0x214>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d00d      	beq.n	80068a4 <HAL_SPI_Init+0x214>
 8006888:	f240 1153 	movw	r1, #339	@ 0x153
 800688c:	4804      	ldr	r0, [pc, #16]	@ (80068a0 <HAL_SPI_Init+0x210>)
 800688e:	f7fb ffe7 	bl	8002860 <assert_failed>
 8006892:	e007      	b.n	80068a4 <HAL_SPI_Init+0x214>
 8006894:	40013000 	.word	0x40013000
 8006898:	40003800 	.word	0x40003800
 800689c:	40003c00 	.word	0x40003c00
 80068a0:	0800c658 	.word	0x0800c658

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068ac:	d125      	bne.n	80068fa <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d050      	beq.n	8006958 <HAL_SPI_Init+0x2c8>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d04c      	beq.n	8006958 <HAL_SPI_Init+0x2c8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	2b10      	cmp	r3, #16
 80068c4:	d048      	beq.n	8006958 <HAL_SPI_Init+0x2c8>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	2b18      	cmp	r3, #24
 80068cc:	d044      	beq.n	8006958 <HAL_SPI_Init+0x2c8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d040      	beq.n	8006958 <HAL_SPI_Init+0x2c8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	2b28      	cmp	r3, #40	@ 0x28
 80068dc:	d03c      	beq.n	8006958 <HAL_SPI_Init+0x2c8>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	2b30      	cmp	r3, #48	@ 0x30
 80068e4:	d038      	beq.n	8006958 <HAL_SPI_Init+0x2c8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	2b38      	cmp	r3, #56	@ 0x38
 80068ec:	d034      	beq.n	8006958 <HAL_SPI_Init+0x2c8>
 80068ee:	f240 1157 	movw	r1, #343	@ 0x157
 80068f2:	485d      	ldr	r0, [pc, #372]	@ (8006a68 <HAL_SPI_Init+0x3d8>)
 80068f4:	f7fb ffb4 	bl	8002860 <assert_failed>
 80068f8:	e02e      	b.n	8006958 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	61da      	str	r2, [r3, #28]
 8006900:	e02a      	b.n	8006958 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <HAL_SPI_Init+0x2bc>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b08      	cmp	r3, #8
 8006910:	d01c      	beq.n	800694c <HAL_SPI_Init+0x2bc>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	2b10      	cmp	r3, #16
 8006918:	d018      	beq.n	800694c <HAL_SPI_Init+0x2bc>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	2b18      	cmp	r3, #24
 8006920:	d014      	beq.n	800694c <HAL_SPI_Init+0x2bc>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	2b20      	cmp	r3, #32
 8006928:	d010      	beq.n	800694c <HAL_SPI_Init+0x2bc>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	2b28      	cmp	r3, #40	@ 0x28
 8006930:	d00c      	beq.n	800694c <HAL_SPI_Init+0x2bc>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	2b30      	cmp	r3, #48	@ 0x30
 8006938:	d008      	beq.n	800694c <HAL_SPI_Init+0x2bc>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	2b38      	cmp	r3, #56	@ 0x38
 8006940:	d004      	beq.n	800694c <HAL_SPI_Init+0x2bc>
 8006942:	f240 1161 	movw	r1, #353	@ 0x161
 8006946:	4848      	ldr	r0, [pc, #288]	@ (8006a68 <HAL_SPI_Init+0x3d8>)
 8006948:	f7fb ff8a 	bl	8002860 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb ffb8 	bl	80028e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800698e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006998:	d902      	bls.n	80069a0 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	e002      	b.n	80069a6 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80069ae:	d007      	beq.n	80069c0 <HAL_SPI_Init+0x330>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069b8:	d002      	beq.n	80069c0 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a02:	ea42 0103 	orr.w	r1, r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	f003 0204 	and.w	r2, r3, #4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a3c:	ea42 0103 	orr.w	r1, r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	0800c658 	.word	0x0800c658

08006a6c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <HAL_SPI_TransmitReceive_DMA+0x20>
 8006a82:	f640 0172 	movw	r1, #2162	@ 0x872
 8006a86:	487f      	ldr	r0, [pc, #508]	@ (8006c84 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006a88:	f7fb feea 	bl	8002860 <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <HAL_SPI_TransmitReceive_DMA+0x32>
 8006a94:	f640 0173 	movw	r1, #2163	@ 0x873
 8006a98:	487a      	ldr	r0, [pc, #488]	@ (8006c84 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006a9a:	f7fb fee1 	bl	8002860 <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <HAL_SPI_TransmitReceive_DMA+0x44>
 8006aa6:	f640 0176 	movw	r1, #2166	@ 0x876
 8006aaa:	4876      	ldr	r0, [pc, #472]	@ (8006c84 <HAL_SPI_TransmitReceive_DMA+0x218>)
 8006aac:	f7fb fed8 	bl	8002860 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ab6:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d00c      	beq.n	8006ade <HAL_SPI_TransmitReceive_DMA+0x72>
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aca:	d106      	bne.n	8006ada <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <HAL_SPI_TransmitReceive_DMA+0x6e>
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d001      	beq.n	8006ade <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
 8006adc:	e15f      	b.n	8006d9e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_SPI_TransmitReceive_DMA+0x84>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_SPI_TransmitReceive_DMA+0x84>
 8006aea:	887b      	ldrh	r3, [r7, #2]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e154      	b.n	8006d9e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_SPI_TransmitReceive_DMA+0x96>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e14d      	b.n	8006d9e <HAL_SPI_TransmitReceive_DMA+0x332>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d003      	beq.n	8006b1e <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2205      	movs	r2, #5
 8006b1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	887a      	ldrh	r2, [r7, #2]
 8006b2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	887a      	ldrh	r2, [r7, #2]
 8006b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	887a      	ldrh	r2, [r7, #2]
 8006b40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	887a      	ldrh	r2, [r7, #2]
 8006b48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8006b66:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b70:	d908      	bls.n	8006b84 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b80:	605a      	str	r2, [r3, #4]
 8006b82:	e06f      	b.n	8006c64 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b92:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b9e:	d126      	bne.n	8006bee <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10f      	bne.n	8006bcc <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006bba:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bca:	e010      	b.n	8006bee <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bda:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3301      	adds	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf8:	d134      	bne.n	8006c64 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c08:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d111      	bne.n	8006c3e <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c28:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006c3c:	e012      	b.n	8006c64 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c4c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d10f      	bne.n	8006c90 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c74:	4a04      	ldr	r2, [pc, #16]	@ (8006c88 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7c:	4a03      	ldr	r2, [pc, #12]	@ (8006c8c <HAL_SPI_TransmitReceive_DMA+0x220>)
 8006c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006c80:	e00e      	b.n	8006ca0 <HAL_SPI_TransmitReceive_DMA+0x234>
 8006c82:	bf00      	nop
 8006c84:	0800c658 	.word	0x0800c658
 8006c88:	08007145 	.word	0x08007145
 8006c8c:	0800700d 	.word	0x0800700d
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c94:	4a44      	ldr	r2, [pc, #272]	@ (8006da8 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8006c96:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9c:	4a43      	ldr	r2, [pc, #268]	@ (8006dac <HAL_SPI_TransmitReceive_DMA+0x340>)
 8006c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca4:	4a42      	ldr	r2, [pc, #264]	@ (8006db0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8006ca6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cac:	2200      	movs	r2, #0
 8006cae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cc8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006cca:	f7fc ff8f 	bl	8003bec <HAL_DMA_Start_IT>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cd8:	f043 0210 	orr.w	r2, r3, #16
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e058      	b.n	8006d9e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d08:	2200      	movs	r2, #0
 8006d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d10:	2200      	movs	r2, #0
 8006d12:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d18:	2200      	movs	r2, #0
 8006d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d24:	4619      	mov	r1, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d34:	f7fc ff5a 	bl	8003bec <HAL_DMA_Start_IT>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d42:	f043 0210 	orr.w	r2, r3, #16
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e023      	b.n	8006d9e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	d007      	beq.n	8006d74 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d72:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0220 	orr.w	r2, r2, #32
 8006d8a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0202 	orr.w	r2, r2, #2
 8006d9a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	08007161 	.word	0x08007161
 8006dac:	080070b5 	.word	0x080070b5
 8006db0:	0800717d 	.word	0x0800717d

08006db4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	099b      	lsrs	r3, r3, #6
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10f      	bne.n	8006df8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	099b      	lsrs	r3, r3, #6
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
    return;
 8006df6:	e0d7      	b.n	8006fa8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <HAL_SPI_IRQHandler+0x66>
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	09db      	lsrs	r3, r3, #7
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	4798      	blx	r3
    return;
 8006e18:	e0c6      	b.n	8006fa8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10c      	bne.n	8006e40 <HAL_SPI_IRQHandler+0x8c>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	099b      	lsrs	r3, r3, #6
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80b4 	beq.w	8006fa8 <HAL_SPI_IRQHandler+0x1f4>
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80ad 	beq.w	8006fa8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	099b      	lsrs	r3, r3, #6
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d023      	beq.n	8006ea2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d011      	beq.n	8006e8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e6a:	f043 0204 	orr.w	r2, r3, #4
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	e00b      	b.n	8006ea2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	693b      	ldr	r3, [r7, #16]
        return;
 8006ea0:	e082      	b.n	8006fa8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d014      	beq.n	8006ed8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb2:	f043 0201 	orr.w	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	0a1b      	lsrs	r3, r3, #8
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00c      	beq.n	8006efe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee8:	f043 0208 	orr.w	r2, r3, #8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60bb      	str	r3, [r7, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	60bb      	str	r3, [r7, #8]
 8006efc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d04f      	beq.n	8006fa6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <HAL_SPI_IRQHandler+0x17e>
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d034      	beq.n	8006f9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0203 	bic.w	r2, r2, #3
 8006f40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d011      	beq.n	8006f6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4e:	4a18      	ldr	r2, [pc, #96]	@ (8006fb0 <HAL_SPI_IRQHandler+0x1fc>)
 8006f50:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fc feb6 	bl	8003cc8 <HAL_DMA_Abort_IT>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d016      	beq.n	8006fa4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006fb0 <HAL_SPI_IRQHandler+0x1fc>)
 8006f7c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fc fea0 	bl	8003cc8 <HAL_DMA_Abort_IT>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006f9a:	e003      	b.n	8006fa4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f81d 	bl	8006fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006fa2:	e000      	b.n	8006fa6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006fa4:	bf00      	nop
    return;
 8006fa6:	bf00      	nop
  }
}
 8006fa8:	3720      	adds	r7, #32
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	080071bd 	.word	0x080071bd

08006fb4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ffe:	b2db      	uxtb	r3, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007018:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800701a:	f7fc fae3 	bl	80035e4 <HAL_GetTick>
 800701e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b20      	cmp	r3, #32
 800702c:	d03c      	beq.n	80070a8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0220 	bic.w	r2, r2, #32
 800703c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10d      	bne.n	8007062 <SPI_DMAReceiveCplt+0x56>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800704e:	d108      	bne.n	8007062 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0203 	bic.w	r2, r2, #3
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	e007      	b.n	8007072 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	2164      	movs	r1, #100	@ 0x64
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f9d4 	bl	8007424 <SPI_EndRxTransaction>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff ff9b 	bl	8006fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80070a6:	e002      	b.n	80070ae <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f7ff ff83 	bl	8006fb4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070c2:	f7fc fa8f 	bl	80035e4 <HAL_GetTick>
 80070c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d030      	beq.n	8007138 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0220 	bic.w	r2, r2, #32
 80070e4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	2164      	movs	r1, #100	@ 0x64
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f9f2 	bl	80074d4 <SPI_EndRxTxTransaction>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070fa:	f043 0220 	orr.w	r2, r3, #32
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0203 	bic.w	r2, r2, #3
 8007110:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff ff53 	bl	8006fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007136:	e002      	b.n	800713e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7fb fb6e 	bl	800281a <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007150:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff ff38 	bl	8006fc8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7fb fb48 	bl	8002804 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0203 	bic.w	r2, r2, #3
 8007198:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800719e:	f043 0210 	orr.w	r2, r3, #16
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff ff14 	bl	8006fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff feff 	bl	8006fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071de:	bf00      	nop
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	4613      	mov	r3, r2
 80071f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071f8:	f7fc f9f4 	bl	80035e4 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4413      	add	r3, r2
 8007206:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007208:	f7fc f9ec 	bl	80035e4 <HAL_GetTick>
 800720c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800720e:	4b39      	ldr	r3, [pc, #228]	@ (80072f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	015b      	lsls	r3, r3, #5
 8007214:	0d1b      	lsrs	r3, r3, #20
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	fb02 f303 	mul.w	r3, r2, r3
 800721c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800721e:	e054      	b.n	80072ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007226:	d050      	beq.n	80072ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007228:	f7fc f9dc 	bl	80035e4 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	429a      	cmp	r2, r3
 8007236:	d902      	bls.n	800723e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d13d      	bne.n	80072ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800724c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007256:	d111      	bne.n	800727c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007260:	d004      	beq.n	800726c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800726a:	d107      	bne.n	800727c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800727a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007284:	d10f      	bne.n	80072a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e017      	b.n	80072ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4013      	ands	r3, r2
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	bf0c      	ite	eq
 80072da:	2301      	moveq	r3, #1
 80072dc:	2300      	movne	r3, #0
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d19b      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3720      	adds	r7, #32
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20000010 	.word	0x20000010

080072f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	@ 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800730a:	f7fc f96b 	bl	80035e4 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	4413      	add	r3, r2
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800731a:	f7fc f963 	bl	80035e4 <HAL_GetTick>
 800731e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007328:	4b3d      	ldr	r3, [pc, #244]	@ (8007420 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	00da      	lsls	r2, r3, #3
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	0d1b      	lsrs	r3, r3, #20
 8007338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007340:	e060      	b.n	8007404 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007348:	d107      	bne.n	800735a <SPI_WaitFifoStateUntilTimeout+0x62>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007358:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d050      	beq.n	8007404 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007362:	f7fc f93f 	bl	80035e4 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736e:	429a      	cmp	r2, r3
 8007370:	d902      	bls.n	8007378 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	d13d      	bne.n	80073f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007386:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007390:	d111      	bne.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739a:	d004      	beq.n	80073a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073a4:	d107      	bne.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073be:	d10f      	bne.n	80073e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e010      	b.n	8007416 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	3b01      	subs	r3, #1
 8007402:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4013      	ands	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d196      	bne.n	8007342 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3728      	adds	r7, #40	@ 0x28
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000010 	.word	0x20000010

08007424 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007438:	d111      	bne.n	800745e <SPI_EndRxTransaction+0x3a>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007442:	d004      	beq.n	800744e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744c:	d107      	bne.n	800745e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800745c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	2180      	movs	r1, #128	@ 0x80
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff febd 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007478:	f043 0220 	orr.w	r2, r3, #32
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e023      	b.n	80074cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800748c:	d11d      	bne.n	80074ca <SPI_EndRxTransaction+0xa6>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007496:	d004      	beq.n	80074a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074a0:	d113      	bne.n	80074ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff ff22 	bl	80072f8 <SPI_WaitFifoStateUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e000      	b.n	80074cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff ff03 	bl	80072f8 <SPI_WaitFifoStateUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074fc:	f043 0220 	orr.w	r2, r3, #32
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e027      	b.n	8007558 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	2180      	movs	r1, #128	@ 0x80
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fe68 	bl	80071e8 <SPI_WaitFlagStateUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007522:	f043 0220 	orr.w	r2, r3, #32
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e014      	b.n	8007558 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff fedc 	bl	80072f8 <SPI_WaitFifoStateUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800754a:	f043 0220 	orr.w	r2, r3, #32
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e000      	b.n	8007558 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e0e6      	b.n	8007740 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a74      	ldr	r2, [pc, #464]	@ (8007748 <HAL_TIM_Base_Init+0x1e8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d036      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007584:	d031      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a70      	ldr	r2, [pc, #448]	@ (800774c <HAL_TIM_Base_Init+0x1ec>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d02c      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a6e      	ldr	r2, [pc, #440]	@ (8007750 <HAL_TIM_Base_Init+0x1f0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d027      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a6d      	ldr	r2, [pc, #436]	@ (8007754 <HAL_TIM_Base_Init+0x1f4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d022      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a6b      	ldr	r2, [pc, #428]	@ (8007758 <HAL_TIM_Base_Init+0x1f8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d01d      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a6a      	ldr	r2, [pc, #424]	@ (800775c <HAL_TIM_Base_Init+0x1fc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d018      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a68      	ldr	r2, [pc, #416]	@ (8007760 <HAL_TIM_Base_Init+0x200>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a67      	ldr	r2, [pc, #412]	@ (8007764 <HAL_TIM_Base_Init+0x204>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00e      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a65      	ldr	r2, [pc, #404]	@ (8007768 <HAL_TIM_Base_Init+0x208>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d009      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a64      	ldr	r2, [pc, #400]	@ (800776c <HAL_TIM_Base_Init+0x20c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d004      	beq.n	80075ea <HAL_TIM_Base_Init+0x8a>
 80075e0:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80075e4:	4862      	ldr	r0, [pc, #392]	@ (8007770 <HAL_TIM_Base_Init+0x210>)
 80075e6:	f7fb f93b 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d014      	beq.n	800761c <HAL_TIM_Base_Init+0xbc>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b10      	cmp	r3, #16
 80075f8:	d010      	beq.n	800761c <HAL_TIM_Base_Init+0xbc>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b20      	cmp	r3, #32
 8007600:	d00c      	beq.n	800761c <HAL_TIM_Base_Init+0xbc>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b40      	cmp	r3, #64	@ 0x40
 8007608:	d008      	beq.n	800761c <HAL_TIM_Base_Init+0xbc>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b60      	cmp	r3, #96	@ 0x60
 8007610:	d004      	beq.n	800761c <HAL_TIM_Base_Init+0xbc>
 8007612:	f240 1117 	movw	r1, #279	@ 0x117
 8007616:	4856      	ldr	r0, [pc, #344]	@ (8007770 <HAL_TIM_Base_Init+0x210>)
 8007618:	f7fb f922 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <HAL_TIM_Base_Init+0xe2>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800762c:	d009      	beq.n	8007642 <HAL_TIM_Base_Init+0xe2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007636:	d004      	beq.n	8007642 <HAL_TIM_Base_Init+0xe2>
 8007638:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800763c:	484c      	ldr	r0, [pc, #304]	@ (8007770 <HAL_TIM_Base_Init+0x210>)
 800763e:	f7fb f90f 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800764a:	d004      	beq.n	8007656 <HAL_TIM_Base_Init+0xf6>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a40      	ldr	r2, [pc, #256]	@ (8007754 <HAL_TIM_Base_Init+0x1f4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d107      	bne.n	8007666 <HAL_TIM_Base_Init+0x106>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf14      	ite	ne
 800765e:	2301      	movne	r3, #1
 8007660:	2300      	moveq	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	e00e      	b.n	8007684 <HAL_TIM_Base_Init+0x124>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d006      	beq.n	800767c <HAL_TIM_Base_Init+0x11c>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007676:	d201      	bcs.n	800767c <HAL_TIM_Base_Init+0x11c>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <HAL_TIM_Base_Init+0x11e>
 800767c:	2300      	movs	r3, #0
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <HAL_TIM_Base_Init+0x132>
 8007688:	f240 1119 	movw	r1, #281	@ 0x119
 800768c:	4838      	ldr	r0, [pc, #224]	@ (8007770 <HAL_TIM_Base_Init+0x210>)
 800768e:	f7fb f8e7 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d008      	beq.n	80076ac <HAL_TIM_Base_Init+0x14c>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	2b80      	cmp	r3, #128	@ 0x80
 80076a0:	d004      	beq.n	80076ac <HAL_TIM_Base_Init+0x14c>
 80076a2:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80076a6:	4832      	ldr	r0, [pc, #200]	@ (8007770 <HAL_TIM_Base_Init+0x210>)
 80076a8:	f7fb f8da 	bl	8002860 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fb fdc3 	bl	800324c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f001 fc27 	bl	8008f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40012c00 	.word	0x40012c00
 800774c:	40000400 	.word	0x40000400
 8007750:	40000800 	.word	0x40000800
 8007754:	40000c00 	.word	0x40000c00
 8007758:	40001000 	.word	0x40001000
 800775c:	40001400 	.word	0x40001400
 8007760:	40013400 	.word	0x40013400
 8007764:	40014000 	.word	0x40014000
 8007768:	40014400 	.word	0x40014400
 800776c:	40014800 	.word	0x40014800
 8007770:	0800c690 	.word	0x0800c690

08007774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e0e6      	b.n	8007954 <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a74      	ldr	r2, [pc, #464]	@ (800795c <HAL_TIM_PWM_Init+0x1e8>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d036      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007798:	d031      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a70      	ldr	r2, [pc, #448]	@ (8007960 <HAL_TIM_PWM_Init+0x1ec>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d02c      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007964 <HAL_TIM_PWM_Init+0x1f0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d027      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a6d      	ldr	r2, [pc, #436]	@ (8007968 <HAL_TIM_PWM_Init+0x1f4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d022      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a6b      	ldr	r2, [pc, #428]	@ (800796c <HAL_TIM_PWM_Init+0x1f8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d01d      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a6a      	ldr	r2, [pc, #424]	@ (8007970 <HAL_TIM_PWM_Init+0x1fc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d018      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a68      	ldr	r2, [pc, #416]	@ (8007974 <HAL_TIM_PWM_Init+0x200>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a67      	ldr	r2, [pc, #412]	@ (8007978 <HAL_TIM_PWM_Init+0x204>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00e      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a65      	ldr	r2, [pc, #404]	@ (800797c <HAL_TIM_PWM_Init+0x208>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d009      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a64      	ldr	r2, [pc, #400]	@ (8007980 <HAL_TIM_PWM_Init+0x20c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d004      	beq.n	80077fe <HAL_TIM_PWM_Init+0x8a>
 80077f4:	f240 5133 	movw	r1, #1331	@ 0x533
 80077f8:	4862      	ldr	r0, [pc, #392]	@ (8007984 <HAL_TIM_PWM_Init+0x210>)
 80077fa:	f7fb f831 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d014      	beq.n	8007830 <HAL_TIM_PWM_Init+0xbc>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b10      	cmp	r3, #16
 800780c:	d010      	beq.n	8007830 <HAL_TIM_PWM_Init+0xbc>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	2b20      	cmp	r3, #32
 8007814:	d00c      	beq.n	8007830 <HAL_TIM_PWM_Init+0xbc>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	2b40      	cmp	r3, #64	@ 0x40
 800781c:	d008      	beq.n	8007830 <HAL_TIM_PWM_Init+0xbc>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	2b60      	cmp	r3, #96	@ 0x60
 8007824:	d004      	beq.n	8007830 <HAL_TIM_PWM_Init+0xbc>
 8007826:	f240 5134 	movw	r1, #1332	@ 0x534
 800782a:	4856      	ldr	r0, [pc, #344]	@ (8007984 <HAL_TIM_PWM_Init+0x210>)
 800782c:	f7fb f818 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00e      	beq.n	8007856 <HAL_TIM_PWM_Init+0xe2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007840:	d009      	beq.n	8007856 <HAL_TIM_PWM_Init+0xe2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800784a:	d004      	beq.n	8007856 <HAL_TIM_PWM_Init+0xe2>
 800784c:	f240 5135 	movw	r1, #1333	@ 0x535
 8007850:	484c      	ldr	r0, [pc, #304]	@ (8007984 <HAL_TIM_PWM_Init+0x210>)
 8007852:	f7fb f805 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785e:	d004      	beq.n	800786a <HAL_TIM_PWM_Init+0xf6>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a40      	ldr	r2, [pc, #256]	@ (8007968 <HAL_TIM_PWM_Init+0x1f4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d107      	bne.n	800787a <HAL_TIM_PWM_Init+0x106>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	bf14      	ite	ne
 8007872:	2301      	movne	r3, #1
 8007874:	2300      	moveq	r3, #0
 8007876:	b2db      	uxtb	r3, r3
 8007878:	e00e      	b.n	8007898 <HAL_TIM_PWM_Init+0x124>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d006      	beq.n	8007890 <HAL_TIM_PWM_Init+0x11c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800788a:	d201      	bcs.n	8007890 <HAL_TIM_PWM_Init+0x11c>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <HAL_TIM_PWM_Init+0x11e>
 8007890:	2300      	movs	r3, #0
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <HAL_TIM_PWM_Init+0x132>
 800789c:	f240 5136 	movw	r1, #1334	@ 0x536
 80078a0:	4838      	ldr	r0, [pc, #224]	@ (8007984 <HAL_TIM_PWM_Init+0x210>)
 80078a2:	f7fa ffdd 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <HAL_TIM_PWM_Init+0x14c>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	2b80      	cmp	r3, #128	@ 0x80
 80078b4:	d004      	beq.n	80078c0 <HAL_TIM_PWM_Init+0x14c>
 80078b6:	f240 5137 	movw	r1, #1335	@ 0x537
 80078ba:	4832      	ldr	r0, [pc, #200]	@ (8007984 <HAL_TIM_PWM_Init+0x210>)
 80078bc:	f7fa ffd0 	bl	8002860 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f857 	bl	8007988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f001 fb1d 	bl	8008f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40012c00 	.word	0x40012c00
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00
 800796c:	40001000 	.word	0x40001000
 8007970:	40001400 	.word	0x40001400
 8007974:	40013400 	.word	0x40013400
 8007978:	40014000 	.word	0x40014000
 800797c:	40014400 	.word	0x40014400
 8007980:	40014800 	.word	0x40014800
 8007984:	0800c690 	.word	0x0800c690

08007988 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a85      	ldr	r2, [pc, #532]	@ (8007bc0 <HAL_TIM_PWM_Start+0x224>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d115      	bne.n	80079dc <HAL_TIM_PWM_Start+0x40>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 808d 	beq.w	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	f000 8089 	beq.w	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	f000 8085 	beq.w	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b0c      	cmp	r3, #12
 80079cc:	f000 8081 	beq.w	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d07d      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b14      	cmp	r3, #20
 80079da:	d07a      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e4:	d10b      	bne.n	80079fe <HAL_TIM_PWM_Start+0x62>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d072      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d06f      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d06c      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b0c      	cmp	r3, #12
 80079fc:	d069      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a70      	ldr	r2, [pc, #448]	@ (8007bc4 <HAL_TIM_PWM_Start+0x228>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d10b      	bne.n	8007a20 <HAL_TIM_PWM_Start+0x84>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d061      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d05e      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d05b      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b0c      	cmp	r3, #12
 8007a1e:	d058      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a68      	ldr	r2, [pc, #416]	@ (8007bc8 <HAL_TIM_PWM_Start+0x22c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d10b      	bne.n	8007a42 <HAL_TIM_PWM_Start+0xa6>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d050      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d04d      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d04a      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b0c      	cmp	r3, #12
 8007a40:	d047      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a61      	ldr	r2, [pc, #388]	@ (8007bcc <HAL_TIM_PWM_Start+0x230>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d10b      	bne.n	8007a64 <HAL_TIM_PWM_Start+0xc8>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d03f      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d03c      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d039      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b0c      	cmp	r3, #12
 8007a62:	d036      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a59      	ldr	r2, [pc, #356]	@ (8007bd0 <HAL_TIM_PWM_Start+0x234>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d111      	bne.n	8007a92 <HAL_TIM_PWM_Start+0xf6>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d02e      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d02b      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d028      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b0c      	cmp	r3, #12
 8007a84:	d025      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	d022      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b14      	cmp	r3, #20
 8007a90:	d01f      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a4f      	ldr	r2, [pc, #316]	@ (8007bd4 <HAL_TIM_PWM_Start+0x238>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d105      	bne.n	8007aa8 <HAL_TIM_PWM_Start+0x10c>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d017      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d014      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a4a      	ldr	r2, [pc, #296]	@ (8007bd8 <HAL_TIM_PWM_Start+0x23c>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d102      	bne.n	8007ab8 <HAL_TIM_PWM_Start+0x11c>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00c      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a47      	ldr	r2, [pc, #284]	@ (8007bdc <HAL_TIM_PWM_Start+0x240>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d102      	bne.n	8007ac8 <HAL_TIM_PWM_Start+0x12c>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d004      	beq.n	8007ad2 <HAL_TIM_PWM_Start+0x136>
 8007ac8:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 8007acc:	4844      	ldr	r0, [pc, #272]	@ (8007be0 <HAL_TIM_PWM_Start+0x244>)
 8007ace:	f7fa fec7 	bl	8002860 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d109      	bne.n	8007aec <HAL_TIM_PWM_Start+0x150>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	bf14      	ite	ne
 8007ae4:	2301      	movne	r3, #1
 8007ae6:	2300      	moveq	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	e03c      	b.n	8007b66 <HAL_TIM_PWM_Start+0x1ca>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	d109      	bne.n	8007b06 <HAL_TIM_PWM_Start+0x16a>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	bf14      	ite	ne
 8007afe:	2301      	movne	r3, #1
 8007b00:	2300      	moveq	r3, #0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	e02f      	b.n	8007b66 <HAL_TIM_PWM_Start+0x1ca>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d109      	bne.n	8007b20 <HAL_TIM_PWM_Start+0x184>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	bf14      	ite	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	2300      	moveq	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	e022      	b.n	8007b66 <HAL_TIM_PWM_Start+0x1ca>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b0c      	cmp	r3, #12
 8007b24:	d109      	bne.n	8007b3a <HAL_TIM_PWM_Start+0x19e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	bf14      	ite	ne
 8007b32:	2301      	movne	r3, #1
 8007b34:	2300      	moveq	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	e015      	b.n	8007b66 <HAL_TIM_PWM_Start+0x1ca>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b10      	cmp	r3, #16
 8007b3e:	d109      	bne.n	8007b54 <HAL_TIM_PWM_Start+0x1b8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	bf14      	ite	ne
 8007b4c:	2301      	movne	r3, #1
 8007b4e:	2300      	moveq	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	e008      	b.n	8007b66 <HAL_TIM_PWM_Start+0x1ca>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	bf14      	ite	ne
 8007b60:	2301      	movne	r3, #1
 8007b62:	2300      	moveq	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e0af      	b.n	8007cce <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d104      	bne.n	8007b7e <HAL_TIM_PWM_Start+0x1e2>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b7c:	e036      	b.n	8007bec <HAL_TIM_PWM_Start+0x250>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d104      	bne.n	8007b8e <HAL_TIM_PWM_Start+0x1f2>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b8c:	e02e      	b.n	8007bec <HAL_TIM_PWM_Start+0x250>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d104      	bne.n	8007b9e <HAL_TIM_PWM_Start+0x202>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b9c:	e026      	b.n	8007bec <HAL_TIM_PWM_Start+0x250>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b0c      	cmp	r3, #12
 8007ba2:	d104      	bne.n	8007bae <HAL_TIM_PWM_Start+0x212>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bac:	e01e      	b.n	8007bec <HAL_TIM_PWM_Start+0x250>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b10      	cmp	r3, #16
 8007bb2:	d117      	bne.n	8007be4 <HAL_TIM_PWM_Start+0x248>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bbc:	e016      	b.n	8007bec <HAL_TIM_PWM_Start+0x250>
 8007bbe:	bf00      	nop
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	40000c00 	.word	0x40000c00
 8007bd0:	40013400 	.word	0x40013400
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40014400 	.word	0x40014400
 8007bdc:	40014800 	.word	0x40014800
 8007be0:	0800c690 	.word	0x0800c690
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f001 fe39 	bl	800986c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a36      	ldr	r2, [pc, #216]	@ (8007cd8 <HAL_TIM_PWM_Start+0x33c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <HAL_TIM_PWM_Start+0x290>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a34      	ldr	r2, [pc, #208]	@ (8007cdc <HAL_TIM_PWM_Start+0x340>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00e      	beq.n	8007c2c <HAL_TIM_PWM_Start+0x290>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a33      	ldr	r2, [pc, #204]	@ (8007ce0 <HAL_TIM_PWM_Start+0x344>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d009      	beq.n	8007c2c <HAL_TIM_PWM_Start+0x290>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a31      	ldr	r2, [pc, #196]	@ (8007ce4 <HAL_TIM_PWM_Start+0x348>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <HAL_TIM_PWM_Start+0x290>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a30      	ldr	r2, [pc, #192]	@ (8007ce8 <HAL_TIM_PWM_Start+0x34c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d101      	bne.n	8007c30 <HAL_TIM_PWM_Start+0x294>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e000      	b.n	8007c32 <HAL_TIM_PWM_Start+0x296>
 8007c30:	2300      	movs	r3, #0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a23      	ldr	r2, [pc, #140]	@ (8007cd8 <HAL_TIM_PWM_Start+0x33c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d01d      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x2f0>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c58:	d018      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x2f0>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a23      	ldr	r2, [pc, #140]	@ (8007cec <HAL_TIM_PWM_Start+0x350>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d013      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x2f0>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a21      	ldr	r2, [pc, #132]	@ (8007cf0 <HAL_TIM_PWM_Start+0x354>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00e      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x2f0>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a20      	ldr	r2, [pc, #128]	@ (8007cf4 <HAL_TIM_PWM_Start+0x358>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d009      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x2f0>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a17      	ldr	r2, [pc, #92]	@ (8007cdc <HAL_TIM_PWM_Start+0x340>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d004      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x2f0>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a16      	ldr	r2, [pc, #88]	@ (8007ce0 <HAL_TIM_PWM_Start+0x344>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d115      	bne.n	8007cb8 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <HAL_TIM_PWM_Start+0x35c>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b06      	cmp	r3, #6
 8007c9c:	d015      	beq.n	8007cca <HAL_TIM_PWM_Start+0x32e>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ca4:	d011      	beq.n	8007cca <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0201 	orr.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb6:	e008      	b.n	8007cca <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0201 	orr.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e000      	b.n	8007ccc <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40012c00 	.word	0x40012c00
 8007cdc:	40013400 	.word	0x40013400
 8007ce0:	40014000 	.word	0x40014000
 8007ce4:	40014400 	.word	0x40014400
 8007ce8:	40014800 	.word	0x40014800
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000800 	.word	0x40000800
 8007cf4:	40000c00 	.word	0x40000c00
 8007cf8:	00010007 	.word	0x00010007

08007cfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e1b0      	b.n	8008072 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a7f      	ldr	r2, [pc, #508]	@ (8007f14 <HAL_TIM_Encoder_Init+0x218>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d01d      	beq.n	8007d56 <HAL_TIM_Encoder_Init+0x5a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d22:	d018      	beq.n	8007d56 <HAL_TIM_Encoder_Init+0x5a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a7b      	ldr	r2, [pc, #492]	@ (8007f18 <HAL_TIM_Encoder_Init+0x21c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d013      	beq.n	8007d56 <HAL_TIM_Encoder_Init+0x5a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a7a      	ldr	r2, [pc, #488]	@ (8007f1c <HAL_TIM_Encoder_Init+0x220>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00e      	beq.n	8007d56 <HAL_TIM_Encoder_Init+0x5a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a78      	ldr	r2, [pc, #480]	@ (8007f20 <HAL_TIM_Encoder_Init+0x224>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d009      	beq.n	8007d56 <HAL_TIM_Encoder_Init+0x5a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a77      	ldr	r2, [pc, #476]	@ (8007f24 <HAL_TIM_Encoder_Init+0x228>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d004      	beq.n	8007d56 <HAL_TIM_Encoder_Init+0x5a>
 8007d4c:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8007d50:	4875      	ldr	r0, [pc, #468]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007d52:	f7fa fd85 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d014      	beq.n	8007d88 <HAL_TIM_Encoder_Init+0x8c>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2b10      	cmp	r3, #16
 8007d64:	d010      	beq.n	8007d88 <HAL_TIM_Encoder_Init+0x8c>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b20      	cmp	r3, #32
 8007d6c:	d00c      	beq.n	8007d88 <HAL_TIM_Encoder_Init+0x8c>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	2b40      	cmp	r3, #64	@ 0x40
 8007d74:	d008      	beq.n	8007d88 <HAL_TIM_Encoder_Init+0x8c>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b60      	cmp	r3, #96	@ 0x60
 8007d7c:	d004      	beq.n	8007d88 <HAL_TIM_Encoder_Init+0x8c>
 8007d7e:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8007d82:	4869      	ldr	r0, [pc, #420]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007d84:	f7fa fd6c 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <HAL_TIM_Encoder_Init+0xb2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d98:	d009      	beq.n	8007dae <HAL_TIM_Encoder_Init+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da2:	d004      	beq.n	8007dae <HAL_TIM_Encoder_Init+0xb2>
 8007da4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8007da8:	485f      	ldr	r0, [pc, #380]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007daa:	f7fa fd59 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d008      	beq.n	8007dc8 <HAL_TIM_Encoder_Init+0xcc>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	2b80      	cmp	r3, #128	@ 0x80
 8007dbc:	d004      	beq.n	8007dc8 <HAL_TIM_Encoder_Init+0xcc>
 8007dbe:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 8007dc2:	4859      	ldr	r0, [pc, #356]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007dc4:	f7fa fd4c 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d00c      	beq.n	8007dea <HAL_TIM_Encoder_Init+0xee>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d008      	beq.n	8007dea <HAL_TIM_Encoder_Init+0xee>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d004      	beq.n	8007dea <HAL_TIM_Encoder_Init+0xee>
 8007de0:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 8007de4:	4850      	ldr	r0, [pc, #320]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007de6:	f7fa fd3b 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d00c      	beq.n	8007e0c <HAL_TIM_Encoder_Init+0x110>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d008      	beq.n	8007e0c <HAL_TIM_Encoder_Init+0x110>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d004      	beq.n	8007e0c <HAL_TIM_Encoder_Init+0x110>
 8007e02:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 8007e06:	4848      	ldr	r0, [pc, #288]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007e08:	f7fa fd2a 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d00c      	beq.n	8007e2e <HAL_TIM_Encoder_Init+0x132>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d008      	beq.n	8007e2e <HAL_TIM_Encoder_Init+0x132>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d004      	beq.n	8007e2e <HAL_TIM_Encoder_Init+0x132>
 8007e24:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 8007e28:	483f      	ldr	r0, [pc, #252]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007e2a:	f7fa fd19 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <HAL_TIM_Encoder_Init+0x14c>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d004      	beq.n	8007e48 <HAL_TIM_Encoder_Init+0x14c>
 8007e3e:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8007e42:	4839      	ldr	r0, [pc, #228]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007e44:	f7fa fd0c 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_TIM_Encoder_Init+0x166>
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d004      	beq.n	8007e62 <HAL_TIM_Encoder_Init+0x166>
 8007e58:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 8007e5c:	4832      	ldr	r0, [pc, #200]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007e5e:	f7fa fcff 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d010      	beq.n	8007e8c <HAL_TIM_Encoder_Init+0x190>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d00c      	beq.n	8007e8c <HAL_TIM_Encoder_Init+0x190>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	2b08      	cmp	r3, #8
 8007e78:	d008      	beq.n	8007e8c <HAL_TIM_Encoder_Init+0x190>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b0c      	cmp	r3, #12
 8007e80:	d004      	beq.n	8007e8c <HAL_TIM_Encoder_Init+0x190>
 8007e82:	f640 31ec 	movw	r1, #3052	@ 0xbec
 8007e86:	4828      	ldr	r0, [pc, #160]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007e88:	f7fa fcea 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d010      	beq.n	8007eb6 <HAL_TIM_Encoder_Init+0x1ba>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	d00c      	beq.n	8007eb6 <HAL_TIM_Encoder_Init+0x1ba>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d008      	beq.n	8007eb6 <HAL_TIM_Encoder_Init+0x1ba>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	2b0c      	cmp	r3, #12
 8007eaa:	d004      	beq.n	8007eb6 <HAL_TIM_Encoder_Init+0x1ba>
 8007eac:	f640 31ed 	movw	r1, #3053	@ 0xbed
 8007eb0:	481d      	ldr	r0, [pc, #116]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007eb2:	f7fa fcd5 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b0f      	cmp	r3, #15
 8007ebc:	d904      	bls.n	8007ec8 <HAL_TIM_Encoder_Init+0x1cc>
 8007ebe:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8007ec2:	4819      	ldr	r0, [pc, #100]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007ec4:	f7fa fccc 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	2b0f      	cmp	r3, #15
 8007ece:	d904      	bls.n	8007eda <HAL_TIM_Encoder_Init+0x1de>
 8007ed0:	f640 31ef 	movw	r1, #3055	@ 0xbef
 8007ed4:	4814      	ldr	r0, [pc, #80]	@ (8007f28 <HAL_TIM_Encoder_Init+0x22c>)
 8007ed6:	f7fa fcc3 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ee2:	d004      	beq.n	8007eee <HAL_TIM_Encoder_Init+0x1f2>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8007f20 <HAL_TIM_Encoder_Init+0x224>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d107      	bne.n	8007efe <HAL_TIM_Encoder_Init+0x202>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf14      	ite	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	2300      	moveq	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	e01a      	b.n	8007f34 <HAL_TIM_Encoder_Init+0x238>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d012      	beq.n	8007f2c <HAL_TIM_Encoder_Init+0x230>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0e:	d20d      	bcs.n	8007f2c <HAL_TIM_Encoder_Init+0x230>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e00c      	b.n	8007f2e <HAL_TIM_Encoder_Init+0x232>
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40000400 	.word	0x40000400
 8007f1c:	40000800 	.word	0x40000800
 8007f20:	40000c00 	.word	0x40000c00
 8007f24:	40013400 	.word	0x40013400
 8007f28:	0800c690 	.word	0x0800c690
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <HAL_TIM_Encoder_Init+0x246>
 8007f38:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 8007f3c:	484f      	ldr	r0, [pc, #316]	@ (800807c <HAL_TIM_Encoder_Init+0x380>)
 8007f3e:	f7fa fc8f 	bl	8002860 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fb f8b6 	bl	80030c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007f72:	f023 0307 	bic.w	r3, r3, #7
 8007f76:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f000 ffd2 	bl	8008f2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb0:	f023 0303 	bic.w	r3, r3, #3
 8007fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007fce:	f023 030c 	bic.w	r3, r3, #12
 8007fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	4313      	orrs	r3, r2
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	011a      	lsls	r2, r3, #4
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	4313      	orrs	r3, r2
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800800c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008014:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	4313      	orrs	r3, r2
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	0800c690 	.word	0x0800c690

08008080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d020      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01b      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0202 	mvn.w	r2, #2
 80080b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 ff10 	bl	8008ef0 <HAL_TIM_IC_CaptureCallback>
 80080d0:	e005      	b.n	80080de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 ff02 	bl	8008edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 ff13 	bl	8008f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d020      	beq.n	8008130 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01b      	beq.n	8008130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0204 	mvn.w	r2, #4
 8008100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2202      	movs	r2, #2
 8008106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 feea 	bl	8008ef0 <HAL_TIM_IC_CaptureCallback>
 800811c:	e005      	b.n	800812a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fedc 	bl	8008edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 feed 	bl	8008f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d020      	beq.n	800817c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01b      	beq.n	800817c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0208 	mvn.w	r2, #8
 800814c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fec4 	bl	8008ef0 <HAL_TIM_IC_CaptureCallback>
 8008168:	e005      	b.n	8008176 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 feb6 	bl	8008edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fec7 	bl	8008f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 0310 	and.w	r3, r3, #16
 8008182:	2b00      	cmp	r3, #0
 8008184:	d020      	beq.n	80081c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01b      	beq.n	80081c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f06f 0210 	mvn.w	r2, #16
 8008198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2208      	movs	r2, #8
 800819e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fe9e 	bl	8008ef0 <HAL_TIM_IC_CaptureCallback>
 80081b4:	e005      	b.n	80081c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fe90 	bl	8008edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fea1 	bl	8008f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00c      	beq.n	80081ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0201 	mvn.w	r2, #1
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fe6e 	bl	8008ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d104      	bne.n	8008200 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fe39 	bl	8009e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00c      	beq.n	800823e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fe31 	bl	8009ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00c      	beq.n	8008262 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800825a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fe5b 	bl	8008f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00c      	beq.n	8008286 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f06f 0220 	mvn.w	r2, #32
 800827e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 fdf9 	bl	8009e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008286:	bf00      	nop
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d016      	beq.n	80082d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d013      	beq.n	80082d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b08      	cmp	r3, #8
 80082b0:	d010      	beq.n	80082d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b0c      	cmp	r3, #12
 80082b6:	d00d      	beq.n	80082d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d00a      	beq.n	80082d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b14      	cmp	r3, #20
 80082c2:	d007      	beq.n	80082d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b3c      	cmp	r3, #60	@ 0x3c
 80082c8:	d004      	beq.n	80082d4 <HAL_TIM_PWM_ConfigChannel+0x44>
 80082ca:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 80082ce:	488b      	ldr	r0, [pc, #556]	@ (80084fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80082d0:	f7fa fac6 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b60      	cmp	r3, #96	@ 0x60
 80082da:	d01c      	beq.n	8008316 <HAL_TIM_PWM_ConfigChannel+0x86>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b70      	cmp	r3, #112	@ 0x70
 80082e2:	d018      	beq.n	8008316 <HAL_TIM_PWM_ConfigChannel+0x86>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a85      	ldr	r2, [pc, #532]	@ (8008500 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d013      	beq.n	8008316 <HAL_TIM_PWM_ConfigChannel+0x86>
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a84      	ldr	r2, [pc, #528]	@ (8008504 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00e      	beq.n	8008316 <HAL_TIM_PWM_ConfigChannel+0x86>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a82      	ldr	r2, [pc, #520]	@ (8008508 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d009      	beq.n	8008316 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a81      	ldr	r2, [pc, #516]	@ (800850c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d004      	beq.n	8008316 <HAL_TIM_PWM_ConfigChannel+0x86>
 800830c:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8008310:	487a      	ldr	r0, [pc, #488]	@ (80084fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008312:	f7fa faa5 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d004      	beq.n	8008330 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8008326:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800832a:	4874      	ldr	r0, [pc, #464]	@ (80084fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800832c:	f7fa fa98 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d008      	beq.n	800834a <HAL_TIM_PWM_ConfigChannel+0xba>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b04      	cmp	r3, #4
 800833e:	d004      	beq.n	800834a <HAL_TIM_PWM_ConfigChannel+0xba>
 8008340:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8008344:	486d      	ldr	r0, [pc, #436]	@ (80084fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008346:	f7fa fa8b 	bl	8002860 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8008354:	2302      	movs	r3, #2
 8008356:	e1d9      	b.n	800870c <HAL_TIM_PWM_ConfigChannel+0x47c>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b14      	cmp	r3, #20
 8008364:	f200 81ca 	bhi.w	80086fc <HAL_TIM_PWM_ConfigChannel+0x46c>
 8008368:	a201      	add	r2, pc, #4	@ (adr r2, 8008370 <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	080083c5 	.word	0x080083c5
 8008374:	080086fd 	.word	0x080086fd
 8008378:	080086fd 	.word	0x080086fd
 800837c:	080086fd 	.word	0x080086fd
 8008380:	08008469 	.word	0x08008469
 8008384:	080086fd 	.word	0x080086fd
 8008388:	080086fd 	.word	0x080086fd
 800838c:	080086fd 	.word	0x080086fd
 8008390:	08008531 	.word	0x08008531
 8008394:	080086fd 	.word	0x080086fd
 8008398:	080086fd 	.word	0x080086fd
 800839c:	080086fd 	.word	0x080086fd
 80083a0:	080085b7 	.word	0x080085b7
 80083a4:	080086fd 	.word	0x080086fd
 80083a8:	080086fd 	.word	0x080086fd
 80083ac:	080086fd 	.word	0x080086fd
 80083b0:	0800863f 	.word	0x0800863f
 80083b4:	080086fd 	.word	0x080086fd
 80083b8:	080086fd 	.word	0x080086fd
 80083bc:	080086fd 	.word	0x080086fd
 80083c0:	0800869d 	.word	0x0800869d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a51      	ldr	r2, [pc, #324]	@ (8008510 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d02c      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083d6:	d027      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a4d      	ldr	r2, [pc, #308]	@ (8008514 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d022      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a4c      	ldr	r2, [pc, #304]	@ (8008518 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d01d      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a4a      	ldr	r2, [pc, #296]	@ (800851c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d018      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a49      	ldr	r2, [pc, #292]	@ (8008520 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a47      	ldr	r2, [pc, #284]	@ (8008524 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00e      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a46      	ldr	r2, [pc, #280]	@ (8008528 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d009      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a44      	ldr	r2, [pc, #272]	@ (800852c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d004      	beq.n	8008428 <HAL_TIM_PWM_ConfigChannel+0x198>
 800841e:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8008422:	4836      	ldr	r0, [pc, #216]	@ (80084fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8008424:	f7fa fa1c 	bl	8002860 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fe22 	bl	8009078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0208 	orr.w	r2, r2, #8
 8008442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 0204 	bic.w	r2, r2, #4
 8008452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6999      	ldr	r1, [r3, #24]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	691a      	ldr	r2, [r3, #16]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	619a      	str	r2, [r3, #24]
      break;
 8008466:	e14c      	b.n	8008702 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a28      	ldr	r2, [pc, #160]	@ (8008510 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d022      	beq.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800847a:	d01d      	beq.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a24      	ldr	r2, [pc, #144]	@ (8008514 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d018      	beq.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a23      	ldr	r2, [pc, #140]	@ (8008518 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d013      	beq.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x228>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a21      	ldr	r2, [pc, #132]	@ (800851c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00e      	beq.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x228>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a20      	ldr	r2, [pc, #128]	@ (8008520 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d009      	beq.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x228>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008524 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d004      	beq.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x228>
 80084ae:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 80084b2:	4812      	ldr	r0, [pc, #72]	@ (80084fc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80084b4:	f7fa f9d4 	bl	8002860 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fe94 	bl	80091ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6999      	ldr	r1, [r3, #24]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	021a      	lsls	r2, r3, #8
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	619a      	str	r2, [r3, #24]
      break;
 80084f8:	e103      	b.n	8008702 <HAL_TIM_PWM_ConfigChannel+0x472>
 80084fa:	bf00      	nop
 80084fc:	0800c690 	.word	0x0800c690
 8008500:	00010040 	.word	0x00010040
 8008504:	00010050 	.word	0x00010050
 8008508:	00010060 	.word	0x00010060
 800850c:	00010070 	.word	0x00010070
 8008510:	40012c00 	.word	0x40012c00
 8008514:	40000400 	.word	0x40000400
 8008518:	40000800 	.word	0x40000800
 800851c:	40000c00 	.word	0x40000c00
 8008520:	40013400 	.word	0x40013400
 8008524:	40014000 	.word	0x40014000
 8008528:	40014400 	.word	0x40014400
 800852c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a77      	ldr	r2, [pc, #476]	@ (8008714 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d01d      	beq.n	8008576 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008542:	d018      	beq.n	8008576 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a73      	ldr	r2, [pc, #460]	@ (8008718 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d013      	beq.n	8008576 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a72      	ldr	r2, [pc, #456]	@ (800871c <HAL_TIM_PWM_ConfigChannel+0x48c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00e      	beq.n	8008576 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a70      	ldr	r2, [pc, #448]	@ (8008720 <HAL_TIM_PWM_ConfigChannel+0x490>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d009      	beq.n	8008576 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a6f      	ldr	r2, [pc, #444]	@ (8008724 <HAL_TIM_PWM_ConfigChannel+0x494>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d004      	beq.n	8008576 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800856c:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8008570:	486d      	ldr	r0, [pc, #436]	@ (8008728 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008572:	f7fa f975 	bl	8002860 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fee7 	bl	8009350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0208 	orr.w	r2, r2, #8
 8008590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0204 	bic.w	r2, r2, #4
 80085a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69d9      	ldr	r1, [r3, #28]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	61da      	str	r2, [r3, #28]
      break;
 80085b4:	e0a5      	b.n	8008702 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a56      	ldr	r2, [pc, #344]	@ (8008714 <HAL_TIM_PWM_ConfigChannel+0x484>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d01d      	beq.n	80085fc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c8:	d018      	beq.n	80085fc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a52      	ldr	r2, [pc, #328]	@ (8008718 <HAL_TIM_PWM_ConfigChannel+0x488>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d013      	beq.n	80085fc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a50      	ldr	r2, [pc, #320]	@ (800871c <HAL_TIM_PWM_ConfigChannel+0x48c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00e      	beq.n	80085fc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a4f      	ldr	r2, [pc, #316]	@ (8008720 <HAL_TIM_PWM_ConfigChannel+0x490>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d009      	beq.n	80085fc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a4d      	ldr	r2, [pc, #308]	@ (8008724 <HAL_TIM_PWM_ConfigChannel+0x494>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_TIM_PWM_ConfigChannel+0x36c>
 80085f2:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 80085f6:	484c      	ldr	r0, [pc, #304]	@ (8008728 <HAL_TIM_PWM_ConfigChannel+0x498>)
 80085f8:	f7fa f932 	bl	8002860 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 ff56 	bl	80094b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69da      	ldr	r2, [r3, #28]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008616:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69da      	ldr	r2, [r3, #28]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008626:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	69d9      	ldr	r1, [r3, #28]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	021a      	lsls	r2, r3, #8
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	61da      	str	r2, [r3, #28]
      break;
 800863c:	e061      	b.n	8008702 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a34      	ldr	r2, [pc, #208]	@ (8008714 <HAL_TIM_PWM_ConfigChannel+0x484>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d009      	beq.n	800865c <HAL_TIM_PWM_ConfigChannel+0x3cc>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a35      	ldr	r2, [pc, #212]	@ (8008724 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d004      	beq.n	800865c <HAL_TIM_PWM_ConfigChannel+0x3cc>
 8008652:	f241 1104 	movw	r1, #4356	@ 0x1104
 8008656:	4834      	ldr	r0, [pc, #208]	@ (8008728 <HAL_TIM_PWM_ConfigChannel+0x498>)
 8008658:	f7fa f902 	bl	8002860 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 ff9e 	bl	80095a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0208 	orr.w	r2, r2, #8
 8008676:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0204 	bic.w	r2, r2, #4
 8008686:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	691a      	ldr	r2, [r3, #16]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800869a:	e032      	b.n	8008702 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008714 <HAL_TIM_PWM_ConfigChannel+0x484>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d009      	beq.n	80086ba <HAL_TIM_PWM_ConfigChannel+0x42a>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008724 <HAL_TIM_PWM_ConfigChannel+0x494>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d004      	beq.n	80086ba <HAL_TIM_PWM_ConfigChannel+0x42a>
 80086b0:	f241 1115 	movw	r1, #4373	@ 0x1115
 80086b4:	481c      	ldr	r0, [pc, #112]	@ (8008728 <HAL_TIM_PWM_ConfigChannel+0x498>)
 80086b6:	f7fa f8d3 	bl	8002860 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68b9      	ldr	r1, [r7, #8]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 ffd3 	bl	800966c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086e4:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	021a      	lsls	r2, r3, #8
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80086fa:	e002      	b.n	8008702 <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40012c00 	.word	0x40012c00
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40000c00 	.word	0x40000c00
 8008724:	40013400 	.word	0x40013400
 8008728:	0800c690 	.word	0x0800c690

0800872c <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a33      	ldr	r2, [pc, #204]	@ (8008808 <HAL_TIM_GenerateEvent+0xdc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d036      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008748:	d031      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a2f      	ldr	r2, [pc, #188]	@ (800880c <HAL_TIM_GenerateEvent+0xe0>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d02c      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a2d      	ldr	r2, [pc, #180]	@ (8008810 <HAL_TIM_GenerateEvent+0xe4>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d027      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a2c      	ldr	r2, [pc, #176]	@ (8008814 <HAL_TIM_GenerateEvent+0xe8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d022      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a2a      	ldr	r2, [pc, #168]	@ (8008818 <HAL_TIM_GenerateEvent+0xec>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d01d      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a29      	ldr	r2, [pc, #164]	@ (800881c <HAL_TIM_GenerateEvent+0xf0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d018      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a27      	ldr	r2, [pc, #156]	@ (8008820 <HAL_TIM_GenerateEvent+0xf4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d013      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a26      	ldr	r2, [pc, #152]	@ (8008824 <HAL_TIM_GenerateEvent+0xf8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d00e      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a24      	ldr	r2, [pc, #144]	@ (8008828 <HAL_TIM_GenerateEvent+0xfc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d009      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a23      	ldr	r2, [pc, #140]	@ (800882c <HAL_TIM_GenerateEvent+0x100>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d004      	beq.n	80087ae <HAL_TIM_GenerateEvent+0x82>
 80087a4:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 80087a8:	4821      	ldr	r0, [pc, #132]	@ (8008830 <HAL_TIM_GenerateEvent+0x104>)
 80087aa:	f7fa f859 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b4:	d202      	bcs.n	80087bc <HAL_TIM_GenerateEvent+0x90>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <HAL_TIM_GenerateEvent+0x9a>
 80087bc:	f241 4181 	movw	r1, #5249	@ 0x1481
 80087c0:	481b      	ldr	r0, [pc, #108]	@ (8008830 <HAL_TIM_GenerateEvent+0x104>)
 80087c2:	f7fa f84d 	bl	8002860 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_TIM_GenerateEvent+0xa8>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e014      	b.n	80087fe <HAL_TIM_GenerateEvent+0xd2>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	40012c00 	.word	0x40012c00
 800880c:	40000400 	.word	0x40000400
 8008810:	40000800 	.word	0x40000800
 8008814:	40000c00 	.word	0x40000c00
 8008818:	40001000 	.word	0x40001000
 800881c:	40001400 	.word	0x40001400
 8008820:	40013400 	.word	0x40013400
 8008824:	40014000 	.word	0x40014000
 8008828:	40014400 	.word	0x40014400
 800882c:	40014800 	.word	0x40014800
 8008830:	0800c690 	.word	0x0800c690

08008834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008848:	2b01      	cmp	r3, #1
 800884a:	d101      	bne.n	8008850 <HAL_TIM_ConfigClockSource+0x1c>
 800884c:	2302      	movs	r3, #2
 800884e:	e329      	b.n	8008ea4 <HAL_TIM_ConfigClockSource+0x670>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008868:	d029      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b70      	cmp	r3, #112	@ 0x70
 8008870:	d025      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800887a:	d020      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b40      	cmp	r3, #64	@ 0x40
 8008882:	d01c      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b50      	cmp	r3, #80	@ 0x50
 800888a:	d018      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b60      	cmp	r3, #96	@ 0x60
 8008892:	d014      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d010      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b10      	cmp	r3, #16
 80088a2:	d00c      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b20      	cmp	r3, #32
 80088aa:	d008      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b30      	cmp	r3, #48	@ 0x30
 80088b2:	d004      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x8a>
 80088b4:	f241 5156 	movw	r1, #5462	@ 0x1556
 80088b8:	4888      	ldr	r0, [pc, #544]	@ (8008adc <HAL_TIM_ConfigClockSource+0x2a8>)
 80088ba:	f7f9 ffd1 	bl	8002860 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80088d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ea:	f000 810d 	beq.w	8008b08 <HAL_TIM_ConfigClockSource+0x2d4>
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f2:	f200 82ca 	bhi.w	8008e8a <HAL_TIM_ConfigClockSource+0x656>
 80088f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088fa:	d02d      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x124>
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008900:	f200 82c3 	bhi.w	8008e8a <HAL_TIM_ConfigClockSource+0x656>
 8008904:	2b70      	cmp	r3, #112	@ 0x70
 8008906:	d06f      	beq.n	80089e8 <HAL_TIM_ConfigClockSource+0x1b4>
 8008908:	2b70      	cmp	r3, #112	@ 0x70
 800890a:	f200 82be 	bhi.w	8008e8a <HAL_TIM_ConfigClockSource+0x656>
 800890e:	2b60      	cmp	r3, #96	@ 0x60
 8008910:	f000 81d4 	beq.w	8008cbc <HAL_TIM_ConfigClockSource+0x488>
 8008914:	2b60      	cmp	r3, #96	@ 0x60
 8008916:	f200 82b8 	bhi.w	8008e8a <HAL_TIM_ConfigClockSource+0x656>
 800891a:	2b50      	cmp	r3, #80	@ 0x50
 800891c:	f000 8165 	beq.w	8008bea <HAL_TIM_ConfigClockSource+0x3b6>
 8008920:	2b50      	cmp	r3, #80	@ 0x50
 8008922:	f200 82b2 	bhi.w	8008e8a <HAL_TIM_ConfigClockSource+0x656>
 8008926:	2b40      	cmp	r3, #64	@ 0x40
 8008928:	f000 8223 	beq.w	8008d72 <HAL_TIM_ConfigClockSource+0x53e>
 800892c:	2b40      	cmp	r3, #64	@ 0x40
 800892e:	f200 82ac 	bhi.w	8008e8a <HAL_TIM_ConfigClockSource+0x656>
 8008932:	2b30      	cmp	r3, #48	@ 0x30
 8008934:	f000 8278 	beq.w	8008e28 <HAL_TIM_ConfigClockSource+0x5f4>
 8008938:	2b30      	cmp	r3, #48	@ 0x30
 800893a:	f200 82a6 	bhi.w	8008e8a <HAL_TIM_ConfigClockSource+0x656>
 800893e:	2b20      	cmp	r3, #32
 8008940:	f000 8272 	beq.w	8008e28 <HAL_TIM_ConfigClockSource+0x5f4>
 8008944:	2b20      	cmp	r3, #32
 8008946:	f200 82a0 	bhi.w	8008e8a <HAL_TIM_ConfigClockSource+0x656>
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 826c 	beq.w	8008e28 <HAL_TIM_ConfigClockSource+0x5f4>
 8008950:	2b10      	cmp	r3, #16
 8008952:	f000 8269 	beq.w	8008e28 <HAL_TIM_ConfigClockSource+0x5f4>
 8008956:	e298      	b.n	8008e8a <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a60      	ldr	r2, [pc, #384]	@ (8008ae0 <HAL_TIM_ConfigClockSource+0x2ac>)
 800895e:	4293      	cmp	r3, r2
 8008960:	f000 8296 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800896c:	f000 8290 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a5b      	ldr	r2, [pc, #364]	@ (8008ae4 <HAL_TIM_ConfigClockSource+0x2b0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	f000 828a 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a59      	ldr	r2, [pc, #356]	@ (8008ae8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	f000 8284 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a57      	ldr	r2, [pc, #348]	@ (8008aec <HAL_TIM_ConfigClockSource+0x2b8>)
 800898e:	4293      	cmp	r3, r2
 8008990:	f000 827e 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a55      	ldr	r2, [pc, #340]	@ (8008af0 <HAL_TIM_ConfigClockSource+0x2bc>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f000 8278 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a53      	ldr	r2, [pc, #332]	@ (8008af4 <HAL_TIM_ConfigClockSource+0x2c0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	f000 8272 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a51      	ldr	r2, [pc, #324]	@ (8008af8 <HAL_TIM_ConfigClockSource+0x2c4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	f000 826c 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a4f      	ldr	r2, [pc, #316]	@ (8008afc <HAL_TIM_ConfigClockSource+0x2c8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	f000 8266 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a4d      	ldr	r2, [pc, #308]	@ (8008b00 <HAL_TIM_ConfigClockSource+0x2cc>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	f000 8260 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a4b      	ldr	r2, [pc, #300]	@ (8008b04 <HAL_TIM_ConfigClockSource+0x2d0>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	f000 825a 	beq.w	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
 80089dc:	f241 5162 	movw	r1, #5474	@ 0x1562
 80089e0:	483e      	ldr	r0, [pc, #248]	@ (8008adc <HAL_TIM_ConfigClockSource+0x2a8>)
 80089e2:	f7f9 ff3d 	bl	8002860 <assert_failed>
      break;
 80089e6:	e253      	b.n	8008e90 <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a3c      	ldr	r2, [pc, #240]	@ (8008ae0 <HAL_TIM_ConfigClockSource+0x2ac>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d022      	beq.n	8008a38 <HAL_TIM_ConfigClockSource+0x204>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089fa:	d01d      	beq.n	8008a38 <HAL_TIM_ConfigClockSource+0x204>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a38      	ldr	r2, [pc, #224]	@ (8008ae4 <HAL_TIM_ConfigClockSource+0x2b0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d018      	beq.n	8008a38 <HAL_TIM_ConfigClockSource+0x204>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a37      	ldr	r2, [pc, #220]	@ (8008ae8 <HAL_TIM_ConfigClockSource+0x2b4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d013      	beq.n	8008a38 <HAL_TIM_ConfigClockSource+0x204>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a35      	ldr	r2, [pc, #212]	@ (8008aec <HAL_TIM_ConfigClockSource+0x2b8>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00e      	beq.n	8008a38 <HAL_TIM_ConfigClockSource+0x204>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a36      	ldr	r2, [pc, #216]	@ (8008af8 <HAL_TIM_ConfigClockSource+0x2c4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d009      	beq.n	8008a38 <HAL_TIM_ConfigClockSource+0x204>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a34      	ldr	r2, [pc, #208]	@ (8008afc <HAL_TIM_ConfigClockSource+0x2c8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d004      	beq.n	8008a38 <HAL_TIM_ConfigClockSource+0x204>
 8008a2e:	f241 5169 	movw	r1, #5481	@ 0x1569
 8008a32:	482a      	ldr	r0, [pc, #168]	@ (8008adc <HAL_TIM_ConfigClockSource+0x2a8>)
 8008a34:	f7f9 ff14 	bl	8002860 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d013      	beq.n	8008a68 <HAL_TIM_ConfigClockSource+0x234>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a48:	d00e      	beq.n	8008a68 <HAL_TIM_ConfigClockSource+0x234>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a52:	d009      	beq.n	8008a68 <HAL_TIM_ConfigClockSource+0x234>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a5c:	d004      	beq.n	8008a68 <HAL_TIM_ConfigClockSource+0x234>
 8008a5e:	f241 516c 	movw	r1, #5484	@ 0x156c
 8008a62:	481e      	ldr	r0, [pc, #120]	@ (8008adc <HAL_TIM_ConfigClockSource+0x2a8>)
 8008a64:	f7f9 fefc 	bl	8002860 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a70:	d014      	beq.n	8008a9c <HAL_TIM_ConfigClockSource+0x268>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d010      	beq.n	8008a9c <HAL_TIM_ConfigClockSource+0x268>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00c      	beq.n	8008a9c <HAL_TIM_ConfigClockSource+0x268>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d008      	beq.n	8008a9c <HAL_TIM_ConfigClockSource+0x268>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	2b0a      	cmp	r3, #10
 8008a90:	d004      	beq.n	8008a9c <HAL_TIM_ConfigClockSource+0x268>
 8008a92:	f241 516d 	movw	r1, #5485	@ 0x156d
 8008a96:	4811      	ldr	r0, [pc, #68]	@ (8008adc <HAL_TIM_ConfigClockSource+0x2a8>)
 8008a98:	f7f9 fee2 	bl	8002860 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	2b0f      	cmp	r3, #15
 8008aa2:	d904      	bls.n	8008aae <HAL_TIM_ConfigClockSource+0x27a>
 8008aa4:	f241 516e 	movw	r1, #5486	@ 0x156e
 8008aa8:	480c      	ldr	r0, [pc, #48]	@ (8008adc <HAL_TIM_ConfigClockSource+0x2a8>)
 8008aaa:	f7f9 fed9 	bl	8002860 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008abe:	f000 feb5 	bl	800982c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	609a      	str	r2, [r3, #8]
      break;
 8008ada:	e1da      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x65e>
 8008adc:	0800c690 	.word	0x0800c690
 8008ae0:	40012c00 	.word	0x40012c00
 8008ae4:	40000400 	.word	0x40000400
 8008ae8:	40000800 	.word	0x40000800
 8008aec:	40000c00 	.word	0x40000c00
 8008af0:	40001000 	.word	0x40001000
 8008af4:	40001400 	.word	0x40001400
 8008af8:	40013400 	.word	0x40013400
 8008afc:	40014000 	.word	0x40014000
 8008b00:	40014400 	.word	0x40014400
 8008b04:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a64      	ldr	r2, [pc, #400]	@ (8008ca0 <HAL_TIM_ConfigClockSource+0x46c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d01d      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x31a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b1a:	d018      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x31a>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a60      	ldr	r2, [pc, #384]	@ (8008ca4 <HAL_TIM_ConfigClockSource+0x470>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d013      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x31a>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a5f      	ldr	r2, [pc, #380]	@ (8008ca8 <HAL_TIM_ConfigClockSource+0x474>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d00e      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x31a>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a5d      	ldr	r2, [pc, #372]	@ (8008cac <HAL_TIM_ConfigClockSource+0x478>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d009      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x31a>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a5c      	ldr	r2, [pc, #368]	@ (8008cb0 <HAL_TIM_ConfigClockSource+0x47c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d004      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x31a>
 8008b44:	f241 5181 	movw	r1, #5505	@ 0x1581
 8008b48:	485a      	ldr	r0, [pc, #360]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x480>)
 8008b4a:	f7f9 fe89 	bl	8002860 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d013      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x34a>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b5e:	d00e      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x34a>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b68:	d009      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x34a>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b72:	d004      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x34a>
 8008b74:	f241 5184 	movw	r1, #5508	@ 0x1584
 8008b78:	484e      	ldr	r0, [pc, #312]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x480>)
 8008b7a:	f7f9 fe71 	bl	8002860 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b86:	d014      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x37e>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d010      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x37e>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00c      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x37e>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d008      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x37e>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	2b0a      	cmp	r3, #10
 8008ba6:	d004      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x37e>
 8008ba8:	f241 5185 	movw	r1, #5509	@ 0x1585
 8008bac:	4841      	ldr	r0, [pc, #260]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x480>)
 8008bae:	f7f9 fe57 	bl	8002860 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	2b0f      	cmp	r3, #15
 8008bb8:	d904      	bls.n	8008bc4 <HAL_TIM_ConfigClockSource+0x390>
 8008bba:	f241 5186 	movw	r1, #5510	@ 0x1586
 8008bbe:	483d      	ldr	r0, [pc, #244]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x480>)
 8008bc0:	f7f9 fe4e 	bl	8002860 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bd4:	f000 fe2a 	bl	800982c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008be6:	609a      	str	r2, [r3, #8]
      break;
 8008be8:	e153      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a2c      	ldr	r2, [pc, #176]	@ (8008ca0 <HAL_TIM_ConfigClockSource+0x46c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d022      	beq.n	8008c3a <HAL_TIM_ConfigClockSource+0x406>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bfc:	d01d      	beq.n	8008c3a <HAL_TIM_ConfigClockSource+0x406>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a28      	ldr	r2, [pc, #160]	@ (8008ca4 <HAL_TIM_ConfigClockSource+0x470>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d018      	beq.n	8008c3a <HAL_TIM_ConfigClockSource+0x406>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a26      	ldr	r2, [pc, #152]	@ (8008ca8 <HAL_TIM_ConfigClockSource+0x474>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d013      	beq.n	8008c3a <HAL_TIM_ConfigClockSource+0x406>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a25      	ldr	r2, [pc, #148]	@ (8008cac <HAL_TIM_ConfigClockSource+0x478>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00e      	beq.n	8008c3a <HAL_TIM_ConfigClockSource+0x406>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a23      	ldr	r2, [pc, #140]	@ (8008cb0 <HAL_TIM_ConfigClockSource+0x47c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d009      	beq.n	8008c3a <HAL_TIM_ConfigClockSource+0x406>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a23      	ldr	r2, [pc, #140]	@ (8008cb8 <HAL_TIM_ConfigClockSource+0x484>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d004      	beq.n	8008c3a <HAL_TIM_ConfigClockSource+0x406>
 8008c30:	f241 5195 	movw	r1, #5525	@ 0x1595
 8008c34:	481f      	ldr	r0, [pc, #124]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x480>)
 8008c36:	f7f9 fe13 	bl	8002860 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c42:	d014      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x43a>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d010      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x43a>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00c      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x43a>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d008      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x43a>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	2b0a      	cmp	r3, #10
 8008c62:	d004      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0x43a>
 8008c64:	f241 5198 	movw	r1, #5528	@ 0x1598
 8008c68:	4812      	ldr	r0, [pc, #72]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x480>)
 8008c6a:	f7f9 fdf9 	bl	8002860 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	2b0f      	cmp	r3, #15
 8008c74:	d904      	bls.n	8008c80 <HAL_TIM_ConfigClockSource+0x44c>
 8008c76:	f241 5199 	movw	r1, #5529	@ 0x1599
 8008c7a:	480e      	ldr	r0, [pc, #56]	@ (8008cb4 <HAL_TIM_ConfigClockSource+0x480>)
 8008c7c:	f7f9 fdf0 	bl	8002860 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	f000 fd53 	bl	8009738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2150      	movs	r1, #80	@ 0x50
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fdac 	bl	80097f6 <TIM_ITRx_SetConfig>
      break;
 8008c9e:	e0f8      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x65e>
 8008ca0:	40012c00 	.word	0x40012c00
 8008ca4:	40000400 	.word	0x40000400
 8008ca8:	40000800 	.word	0x40000800
 8008cac:	40000c00 	.word	0x40000c00
 8008cb0:	40013400 	.word	0x40013400
 8008cb4:	0800c690 	.word	0x0800c690
 8008cb8:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a7a      	ldr	r2, [pc, #488]	@ (8008eac <HAL_TIM_ConfigClockSource+0x678>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d022      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x4d8>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cce:	d01d      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x4d8>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a76      	ldr	r2, [pc, #472]	@ (8008eb0 <HAL_TIM_ConfigClockSource+0x67c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d018      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x4d8>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a75      	ldr	r2, [pc, #468]	@ (8008eb4 <HAL_TIM_ConfigClockSource+0x680>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x4d8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a73      	ldr	r2, [pc, #460]	@ (8008eb8 <HAL_TIM_ConfigClockSource+0x684>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00e      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x4d8>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a72      	ldr	r2, [pc, #456]	@ (8008ebc <HAL_TIM_ConfigClockSource+0x688>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d009      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x4d8>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a70      	ldr	r2, [pc, #448]	@ (8008ec0 <HAL_TIM_ConfigClockSource+0x68c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d004      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x4d8>
 8008d02:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8008d06:	486f      	ldr	r0, [pc, #444]	@ (8008ec4 <HAL_TIM_ConfigClockSource+0x690>)
 8008d08:	f7f9 fdaa 	bl	8002860 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d14:	d014      	beq.n	8008d40 <HAL_TIM_ConfigClockSource+0x50c>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d010      	beq.n	8008d40 <HAL_TIM_ConfigClockSource+0x50c>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00c      	beq.n	8008d40 <HAL_TIM_ConfigClockSource+0x50c>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d008      	beq.n	8008d40 <HAL_TIM_ConfigClockSource+0x50c>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	2b0a      	cmp	r3, #10
 8008d34:	d004      	beq.n	8008d40 <HAL_TIM_ConfigClockSource+0x50c>
 8008d36:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 8008d3a:	4862      	ldr	r0, [pc, #392]	@ (8008ec4 <HAL_TIM_ConfigClockSource+0x690>)
 8008d3c:	f7f9 fd90 	bl	8002860 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	2b0f      	cmp	r3, #15
 8008d46:	d904      	bls.n	8008d52 <HAL_TIM_ConfigClockSource+0x51e>
 8008d48:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 8008d4c:	485d      	ldr	r0, [pc, #372]	@ (8008ec4 <HAL_TIM_ConfigClockSource+0x690>)
 8008d4e:	f7f9 fd87 	bl	8002860 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f000 fd19 	bl	8009796 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2160      	movs	r1, #96	@ 0x60
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fd43 	bl	80097f6 <TIM_ITRx_SetConfig>
      break;
 8008d70:	e08f      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a4d      	ldr	r2, [pc, #308]	@ (8008eac <HAL_TIM_ConfigClockSource+0x678>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d022      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x58e>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d84:	d01d      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x58e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a49      	ldr	r2, [pc, #292]	@ (8008eb0 <HAL_TIM_ConfigClockSource+0x67c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d018      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x58e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a47      	ldr	r2, [pc, #284]	@ (8008eb4 <HAL_TIM_ConfigClockSource+0x680>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x58e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a46      	ldr	r2, [pc, #280]	@ (8008eb8 <HAL_TIM_ConfigClockSource+0x684>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00e      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x58e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a44      	ldr	r2, [pc, #272]	@ (8008ebc <HAL_TIM_ConfigClockSource+0x688>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d009      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x58e>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a43      	ldr	r2, [pc, #268]	@ (8008ec0 <HAL_TIM_ConfigClockSource+0x68c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d004      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x58e>
 8008db8:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 8008dbc:	4841      	ldr	r0, [pc, #260]	@ (8008ec4 <HAL_TIM_ConfigClockSource+0x690>)
 8008dbe:	f7f9 fd4f 	bl	8002860 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dca:	d014      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5c2>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d010      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5c2>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00c      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5c2>
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d008      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5c2>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	2b0a      	cmp	r3, #10
 8008dea:	d004      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x5c2>
 8008dec:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 8008df0:	4834      	ldr	r0, [pc, #208]	@ (8008ec4 <HAL_TIM_ConfigClockSource+0x690>)
 8008df2:	f7f9 fd35 	bl	8002860 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	2b0f      	cmp	r3, #15
 8008dfc:	d904      	bls.n	8008e08 <HAL_TIM_ConfigClockSource+0x5d4>
 8008dfe:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 8008e02:	4830      	ldr	r0, [pc, #192]	@ (8008ec4 <HAL_TIM_ConfigClockSource+0x690>)
 8008e04:	f7f9 fd2c 	bl	8002860 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e14:	461a      	mov	r2, r3
 8008e16:	f000 fc8f 	bl	8009738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2140      	movs	r1, #64	@ 0x40
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fce8 	bl	80097f6 <TIM_ITRx_SetConfig>
      break;
 8008e26:	e034      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008eac <HAL_TIM_ConfigClockSource+0x678>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d022      	beq.n	8008e78 <HAL_TIM_ConfigClockSource+0x644>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e3a:	d01d      	beq.n	8008e78 <HAL_TIM_ConfigClockSource+0x644>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb0 <HAL_TIM_ConfigClockSource+0x67c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d018      	beq.n	8008e78 <HAL_TIM_ConfigClockSource+0x644>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb4 <HAL_TIM_ConfigClockSource+0x680>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d013      	beq.n	8008e78 <HAL_TIM_ConfigClockSource+0x644>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a18      	ldr	r2, [pc, #96]	@ (8008eb8 <HAL_TIM_ConfigClockSource+0x684>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00e      	beq.n	8008e78 <HAL_TIM_ConfigClockSource+0x644>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a17      	ldr	r2, [pc, #92]	@ (8008ebc <HAL_TIM_ConfigClockSource+0x688>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d009      	beq.n	8008e78 <HAL_TIM_ConfigClockSource+0x644>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a15      	ldr	r2, [pc, #84]	@ (8008ec0 <HAL_TIM_ConfigClockSource+0x68c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d004      	beq.n	8008e78 <HAL_TIM_ConfigClockSource+0x644>
 8008e6e:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 8008e72:	4814      	ldr	r0, [pc, #80]	@ (8008ec4 <HAL_TIM_ConfigClockSource+0x690>)
 8008e74:	f7f9 fcf4 	bl	8002860 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f000 fcb7 	bl	80097f6 <TIM_ITRx_SetConfig>
      break;
 8008e88:	e003      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e8e:	e000      	b.n	8008e92 <HAL_TIM_ConfigClockSource+0x65e>
      break;
 8008e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40012c00 	.word	0x40012c00
 8008eb0:	40000400 	.word	0x40000400
 8008eb4:	40000800 	.word	0x40000800
 8008eb8:	40000c00 	.word	0x40000c00
 8008ebc:	40013400 	.word	0x40013400
 8008ec0:	40014000 	.word	0x40014000
 8008ec4:	0800c690 	.word	0x0800c690

08008ec8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a46      	ldr	r2, [pc, #280]	@ (8009058 <TIM_Base_SetConfig+0x12c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d013      	beq.n	8008f6c <TIM_Base_SetConfig+0x40>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f4a:	d00f      	beq.n	8008f6c <TIM_Base_SetConfig+0x40>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a43      	ldr	r2, [pc, #268]	@ (800905c <TIM_Base_SetConfig+0x130>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00b      	beq.n	8008f6c <TIM_Base_SetConfig+0x40>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a42      	ldr	r2, [pc, #264]	@ (8009060 <TIM_Base_SetConfig+0x134>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <TIM_Base_SetConfig+0x40>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a41      	ldr	r2, [pc, #260]	@ (8009064 <TIM_Base_SetConfig+0x138>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_Base_SetConfig+0x40>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a40      	ldr	r2, [pc, #256]	@ (8009068 <TIM_Base_SetConfig+0x13c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d108      	bne.n	8008f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a35      	ldr	r2, [pc, #212]	@ (8009058 <TIM_Base_SetConfig+0x12c>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d01f      	beq.n	8008fc6 <TIM_Base_SetConfig+0x9a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f8c:	d01b      	beq.n	8008fc6 <TIM_Base_SetConfig+0x9a>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a32      	ldr	r2, [pc, #200]	@ (800905c <TIM_Base_SetConfig+0x130>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d017      	beq.n	8008fc6 <TIM_Base_SetConfig+0x9a>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a31      	ldr	r2, [pc, #196]	@ (8009060 <TIM_Base_SetConfig+0x134>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d013      	beq.n	8008fc6 <TIM_Base_SetConfig+0x9a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a30      	ldr	r2, [pc, #192]	@ (8009064 <TIM_Base_SetConfig+0x138>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00f      	beq.n	8008fc6 <TIM_Base_SetConfig+0x9a>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8009068 <TIM_Base_SetConfig+0x13c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00b      	beq.n	8008fc6 <TIM_Base_SetConfig+0x9a>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800906c <TIM_Base_SetConfig+0x140>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d007      	beq.n	8008fc6 <TIM_Base_SetConfig+0x9a>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8009070 <TIM_Base_SetConfig+0x144>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_Base_SetConfig+0x9a>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8009074 <TIM_Base_SetConfig+0x148>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d108      	bne.n	8008fd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a16      	ldr	r2, [pc, #88]	@ (8009058 <TIM_Base_SetConfig+0x12c>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00f      	beq.n	8009024 <TIM_Base_SetConfig+0xf8>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a18      	ldr	r2, [pc, #96]	@ (8009068 <TIM_Base_SetConfig+0x13c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00b      	beq.n	8009024 <TIM_Base_SetConfig+0xf8>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a17      	ldr	r2, [pc, #92]	@ (800906c <TIM_Base_SetConfig+0x140>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d007      	beq.n	8009024 <TIM_Base_SetConfig+0xf8>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a16      	ldr	r2, [pc, #88]	@ (8009070 <TIM_Base_SetConfig+0x144>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d003      	beq.n	8009024 <TIM_Base_SetConfig+0xf8>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a15      	ldr	r2, [pc, #84]	@ (8009074 <TIM_Base_SetConfig+0x148>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d103      	bne.n	800902c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b01      	cmp	r3, #1
 800903c:	d105      	bne.n	800904a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f023 0201 	bic.w	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	611a      	str	r2, [r3, #16]
  }
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	40012c00 	.word	0x40012c00
 800905c:	40000400 	.word	0x40000400
 8009060:	40000800 	.word	0x40000800
 8009064:	40000c00 	.word	0x40000c00
 8009068:	40013400 	.word	0x40013400
 800906c:	40014000 	.word	0x40014000
 8009070:	40014400 	.word	0x40014400
 8009074:	40014800 	.word	0x40014800

08009078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f023 0201 	bic.w	r2, r3, #1
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f023 0302 	bic.w	r3, r3, #2
 80090c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a40      	ldr	r2, [pc, #256]	@ (80091d4 <TIM_OC1_SetConfig+0x15c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00f      	beq.n	80090f8 <TIM_OC1_SetConfig+0x80>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a3f      	ldr	r2, [pc, #252]	@ (80091d8 <TIM_OC1_SetConfig+0x160>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00b      	beq.n	80090f8 <TIM_OC1_SetConfig+0x80>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a3e      	ldr	r2, [pc, #248]	@ (80091dc <TIM_OC1_SetConfig+0x164>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d007      	beq.n	80090f8 <TIM_OC1_SetConfig+0x80>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a3d      	ldr	r2, [pc, #244]	@ (80091e0 <TIM_OC1_SetConfig+0x168>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d003      	beq.n	80090f8 <TIM_OC1_SetConfig+0x80>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a3c      	ldr	r2, [pc, #240]	@ (80091e4 <TIM_OC1_SetConfig+0x16c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d119      	bne.n	800912c <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d008      	beq.n	8009112 <TIM_OC1_SetConfig+0x9a>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	2b08      	cmp	r3, #8
 8009106:	d004      	beq.n	8009112 <TIM_OC1_SetConfig+0x9a>
 8009108:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800910c:	4836      	ldr	r0, [pc, #216]	@ (80091e8 <TIM_OC1_SetConfig+0x170>)
 800910e:	f7f9 fba7 	bl	8002860 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f023 0308 	bic.w	r3, r3, #8
 8009118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4313      	orrs	r3, r2
 8009122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f023 0304 	bic.w	r3, r3, #4
 800912a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a29      	ldr	r2, [pc, #164]	@ (80091d4 <TIM_OC1_SetConfig+0x15c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00f      	beq.n	8009154 <TIM_OC1_SetConfig+0xdc>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a28      	ldr	r2, [pc, #160]	@ (80091d8 <TIM_OC1_SetConfig+0x160>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00b      	beq.n	8009154 <TIM_OC1_SetConfig+0xdc>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a27      	ldr	r2, [pc, #156]	@ (80091dc <TIM_OC1_SetConfig+0x164>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d007      	beq.n	8009154 <TIM_OC1_SetConfig+0xdc>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a26      	ldr	r2, [pc, #152]	@ (80091e0 <TIM_OC1_SetConfig+0x168>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d003      	beq.n	8009154 <TIM_OC1_SetConfig+0xdc>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a25      	ldr	r2, [pc, #148]	@ (80091e4 <TIM_OC1_SetConfig+0x16c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d12d      	bne.n	80091b0 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800915c:	d008      	beq.n	8009170 <TIM_OC1_SetConfig+0xf8>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d004      	beq.n	8009170 <TIM_OC1_SetConfig+0xf8>
 8009166:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800916a:	481f      	ldr	r0, [pc, #124]	@ (80091e8 <TIM_OC1_SetConfig+0x170>)
 800916c:	f7f9 fb78 	bl	8002860 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009178:	d008      	beq.n	800918c <TIM_OC1_SetConfig+0x114>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d004      	beq.n	800918c <TIM_OC1_SetConfig+0x114>
 8009182:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 8009186:	4818      	ldr	r0, [pc, #96]	@ (80091e8 <TIM_OC1_SetConfig+0x170>)
 8009188:	f7f9 fb6a 	bl	8002860 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800919a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	621a      	str	r2, [r3, #32]
}
 80091ca:	bf00      	nop
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	40012c00 	.word	0x40012c00
 80091d8:	40013400 	.word	0x40013400
 80091dc:	40014000 	.word	0x40014000
 80091e0:	40014400 	.word	0x40014400
 80091e4:	40014800 	.word	0x40014800
 80091e8:	0800c690 	.word	0x0800c690

080091ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	f023 0210 	bic.w	r2, r3, #16
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800921a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800921e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	4313      	orrs	r3, r2
 8009232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f023 0320 	bic.w	r3, r3, #32
 800923a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	011b      	lsls	r3, r3, #4
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a3b      	ldr	r2, [pc, #236]	@ (8009338 <TIM_OC2_SetConfig+0x14c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d003      	beq.n	8009258 <TIM_OC2_SetConfig+0x6c>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a3a      	ldr	r2, [pc, #232]	@ (800933c <TIM_OC2_SetConfig+0x150>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d11a      	bne.n	800928e <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d008      	beq.n	8009272 <TIM_OC2_SetConfig+0x86>
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	2b08      	cmp	r3, #8
 8009266:	d004      	beq.n	8009272 <TIM_OC2_SetConfig+0x86>
 8009268:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800926c:	4834      	ldr	r0, [pc, #208]	@ (8009340 <TIM_OC2_SetConfig+0x154>)
 800926e:	f7f9 faf7 	bl	8002860 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	4313      	orrs	r3, r2
 8009284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800928c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a29      	ldr	r2, [pc, #164]	@ (8009338 <TIM_OC2_SetConfig+0x14c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d00f      	beq.n	80092b6 <TIM_OC2_SetConfig+0xca>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a28      	ldr	r2, [pc, #160]	@ (800933c <TIM_OC2_SetConfig+0x150>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d00b      	beq.n	80092b6 <TIM_OC2_SetConfig+0xca>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a28      	ldr	r2, [pc, #160]	@ (8009344 <TIM_OC2_SetConfig+0x158>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d007      	beq.n	80092b6 <TIM_OC2_SetConfig+0xca>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a27      	ldr	r2, [pc, #156]	@ (8009348 <TIM_OC2_SetConfig+0x15c>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d003      	beq.n	80092b6 <TIM_OC2_SetConfig+0xca>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a26      	ldr	r2, [pc, #152]	@ (800934c <TIM_OC2_SetConfig+0x160>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d12f      	bne.n	8009316 <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092be:	d008      	beq.n	80092d2 <TIM_OC2_SetConfig+0xe6>
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d004      	beq.n	80092d2 <TIM_OC2_SetConfig+0xe6>
 80092c8:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 80092cc:	481c      	ldr	r0, [pc, #112]	@ (8009340 <TIM_OC2_SetConfig+0x154>)
 80092ce:	f7f9 fac7 	bl	8002860 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092da:	d008      	beq.n	80092ee <TIM_OC2_SetConfig+0x102>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d004      	beq.n	80092ee <TIM_OC2_SetConfig+0x102>
 80092e4:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 80092e8:	4815      	ldr	r0, [pc, #84]	@ (8009340 <TIM_OC2_SetConfig+0x154>)
 80092ea:	f7f9 fab9 	bl	8002860 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	4313      	orrs	r3, r2
 8009308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	4313      	orrs	r3, r2
 8009314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	621a      	str	r2, [r3, #32]
}
 8009330:	bf00      	nop
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	40012c00 	.word	0x40012c00
 800933c:	40013400 	.word	0x40013400
 8009340:	0800c690 	.word	0x0800c690
 8009344:	40014000 	.word	0x40014000
 8009348:	40014400 	.word	0x40014400
 800934c:	40014800 	.word	0x40014800

08009350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800937e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 0303 	bic.w	r3, r3, #3
 800938a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	4313      	orrs	r3, r2
 8009394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800939c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a3b      	ldr	r2, [pc, #236]	@ (800949c <TIM_OC3_SetConfig+0x14c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_OC3_SetConfig+0x6a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a3a      	ldr	r2, [pc, #232]	@ (80094a0 <TIM_OC3_SetConfig+0x150>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d11a      	bne.n	80093f0 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <TIM_OC3_SetConfig+0x84>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	2b08      	cmp	r3, #8
 80093c8:	d004      	beq.n	80093d4 <TIM_OC3_SetConfig+0x84>
 80093ca:	f641 4105 	movw	r1, #7173	@ 0x1c05
 80093ce:	4835      	ldr	r0, [pc, #212]	@ (80094a4 <TIM_OC3_SetConfig+0x154>)
 80093d0:	f7f9 fa46 	bl	8002860 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a2a      	ldr	r2, [pc, #168]	@ (800949c <TIM_OC3_SetConfig+0x14c>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00f      	beq.n	8009418 <TIM_OC3_SetConfig+0xc8>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a29      	ldr	r2, [pc, #164]	@ (80094a0 <TIM_OC3_SetConfig+0x150>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00b      	beq.n	8009418 <TIM_OC3_SetConfig+0xc8>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a29      	ldr	r2, [pc, #164]	@ (80094a8 <TIM_OC3_SetConfig+0x158>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d007      	beq.n	8009418 <TIM_OC3_SetConfig+0xc8>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a28      	ldr	r2, [pc, #160]	@ (80094ac <TIM_OC3_SetConfig+0x15c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d003      	beq.n	8009418 <TIM_OC3_SetConfig+0xc8>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a27      	ldr	r2, [pc, #156]	@ (80094b0 <TIM_OC3_SetConfig+0x160>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d12f      	bne.n	8009478 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009420:	d008      	beq.n	8009434 <TIM_OC3_SetConfig+0xe4>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d004      	beq.n	8009434 <TIM_OC3_SetConfig+0xe4>
 800942a:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800942e:	481d      	ldr	r0, [pc, #116]	@ (80094a4 <TIM_OC3_SetConfig+0x154>)
 8009430:	f7f9 fa16 	bl	8002860 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800943c:	d008      	beq.n	8009450 <TIM_OC3_SetConfig+0x100>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d004      	beq.n	8009450 <TIM_OC3_SetConfig+0x100>
 8009446:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800944a:	4816      	ldr	r0, [pc, #88]	@ (80094a4 <TIM_OC3_SetConfig+0x154>)
 800944c:	f7f9 fa08 	bl	8002860 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800945e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	4313      	orrs	r3, r2
 800946a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	011b      	lsls	r3, r3, #4
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4313      	orrs	r3, r2
 8009476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	621a      	str	r2, [r3, #32]
}
 8009492:	bf00      	nop
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	40012c00 	.word	0x40012c00
 80094a0:	40013400 	.word	0x40013400
 80094a4:	0800c690 	.word	0x0800c690
 80094a8:	40014000 	.word	0x40014000
 80094ac:	40014400 	.word	0x40014400
 80094b0:	40014800 	.word	0x40014800

080094b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	021b      	lsls	r3, r3, #8
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	031b      	lsls	r3, r3, #12
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	4313      	orrs	r3, r2
 800950e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a1e      	ldr	r2, [pc, #120]	@ (800958c <TIM_OC4_SetConfig+0xd8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d00f      	beq.n	8009538 <TIM_OC4_SetConfig+0x84>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <TIM_OC4_SetConfig+0xdc>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00b      	beq.n	8009538 <TIM_OC4_SetConfig+0x84>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a1c      	ldr	r2, [pc, #112]	@ (8009594 <TIM_OC4_SetConfig+0xe0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d007      	beq.n	8009538 <TIM_OC4_SetConfig+0x84>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1b      	ldr	r2, [pc, #108]	@ (8009598 <TIM_OC4_SetConfig+0xe4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d003      	beq.n	8009538 <TIM_OC4_SetConfig+0x84>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a1a      	ldr	r2, [pc, #104]	@ (800959c <TIM_OC4_SetConfig+0xe8>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d117      	bne.n	8009568 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009540:	d008      	beq.n	8009554 <TIM_OC4_SetConfig+0xa0>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d004      	beq.n	8009554 <TIM_OC4_SetConfig+0xa0>
 800954a:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800954e:	4814      	ldr	r0, [pc, #80]	@ (80095a0 <TIM_OC4_SetConfig+0xec>)
 8009550:	f7f9 f986 	bl	8002860 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800955a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	019b      	lsls	r3, r3, #6
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	621a      	str	r2, [r3, #32]
}
 8009582:	bf00      	nop
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	40012c00 	.word	0x40012c00
 8009590:	40013400 	.word	0x40013400
 8009594:	40014000 	.word	0x40014000
 8009598:	40014400 	.word	0x40014400
 800959c:	40014800 	.word	0x40014800
 80095a0:	0800c690 	.word	0x0800c690

080095a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80095e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	041b      	lsls	r3, r3, #16
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a17      	ldr	r2, [pc, #92]	@ (8009658 <TIM_OC5_SetConfig+0xb4>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d00f      	beq.n	800961e <TIM_OC5_SetConfig+0x7a>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a16      	ldr	r2, [pc, #88]	@ (800965c <TIM_OC5_SetConfig+0xb8>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00b      	beq.n	800961e <TIM_OC5_SetConfig+0x7a>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a15      	ldr	r2, [pc, #84]	@ (8009660 <TIM_OC5_SetConfig+0xbc>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d007      	beq.n	800961e <TIM_OC5_SetConfig+0x7a>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a14      	ldr	r2, [pc, #80]	@ (8009664 <TIM_OC5_SetConfig+0xc0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d003      	beq.n	800961e <TIM_OC5_SetConfig+0x7a>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a13      	ldr	r2, [pc, #76]	@ (8009668 <TIM_OC5_SetConfig+0xc4>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d109      	bne.n	8009632 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009624:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	021b      	lsls	r3, r3, #8
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	621a      	str	r2, [r3, #32]
}
 800964c:	bf00      	nop
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	40012c00 	.word	0x40012c00
 800965c:	40013400 	.word	0x40013400
 8009660:	40014000 	.word	0x40014000
 8009664:	40014400 	.word	0x40014400
 8009668:	40014800 	.word	0x40014800

0800966c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800969a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800969e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	051b      	lsls	r3, r3, #20
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4313      	orrs	r3, r2
 80096be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a18      	ldr	r2, [pc, #96]	@ (8009724 <TIM_OC6_SetConfig+0xb8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00f      	beq.n	80096e8 <TIM_OC6_SetConfig+0x7c>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a17      	ldr	r2, [pc, #92]	@ (8009728 <TIM_OC6_SetConfig+0xbc>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d00b      	beq.n	80096e8 <TIM_OC6_SetConfig+0x7c>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a16      	ldr	r2, [pc, #88]	@ (800972c <TIM_OC6_SetConfig+0xc0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d007      	beq.n	80096e8 <TIM_OC6_SetConfig+0x7c>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a15      	ldr	r2, [pc, #84]	@ (8009730 <TIM_OC6_SetConfig+0xc4>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d003      	beq.n	80096e8 <TIM_OC6_SetConfig+0x7c>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a14      	ldr	r2, [pc, #80]	@ (8009734 <TIM_OC6_SetConfig+0xc8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d109      	bne.n	80096fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	029b      	lsls	r3, r3, #10
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	697a      	ldr	r2, [r7, #20]
 8009700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	621a      	str	r2, [r3, #32]
}
 8009716:	bf00      	nop
 8009718:	371c      	adds	r7, #28
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	40012c00 	.word	0x40012c00
 8009728:	40013400 	.word	0x40013400
 800972c:	40014000 	.word	0x40014000
 8009730:	40014400 	.word	0x40014400
 8009734:	40014800 	.word	0x40014800

08009738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	f023 0201 	bic.w	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f023 030a 	bic.w	r3, r3, #10
 8009774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4313      	orrs	r3, r2
 800977c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	621a      	str	r2, [r3, #32]
}
 800978a:	bf00      	nop
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009796:	b480      	push	{r7}
 8009798:	b087      	sub	sp, #28
 800979a:	af00      	add	r7, sp, #0
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	f023 0210 	bic.w	r2, r3, #16
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	031b      	lsls	r3, r3, #12
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	4313      	orrs	r3, r2
 80097dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	621a      	str	r2, [r3, #32]
}
 80097ea:	bf00      	nop
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b085      	sub	sp, #20
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800980c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4313      	orrs	r3, r2
 8009814:	f043 0307 	orr.w	r3, r3, #7
 8009818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	609a      	str	r2, [r3, #8]
}
 8009820:	bf00      	nop
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	021a      	lsls	r2, r3, #8
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	431a      	orrs	r2, r3
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	4313      	orrs	r3, r2
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	4313      	orrs	r3, r2
 8009858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	609a      	str	r2, [r3, #8]
}
 8009860:	bf00      	nop
 8009862:	371c      	adds	r7, #28
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4a2f      	ldr	r2, [pc, #188]	@ (8009938 <TIM_CCxChannelCmd+0xcc>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d024      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009886:	d020      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4a2c      	ldr	r2, [pc, #176]	@ (800993c <TIM_CCxChannelCmd+0xd0>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d01c      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4a2b      	ldr	r2, [pc, #172]	@ (8009940 <TIM_CCxChannelCmd+0xd4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d018      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4a2a      	ldr	r2, [pc, #168]	@ (8009944 <TIM_CCxChannelCmd+0xd8>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d014      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4a29      	ldr	r2, [pc, #164]	@ (8009948 <TIM_CCxChannelCmd+0xdc>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d010      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4a28      	ldr	r2, [pc, #160]	@ (800994c <TIM_CCxChannelCmd+0xe0>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d00c      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4a27      	ldr	r2, [pc, #156]	@ (8009950 <TIM_CCxChannelCmd+0xe4>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d008      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4a26      	ldr	r2, [pc, #152]	@ (8009954 <TIM_CCxChannelCmd+0xe8>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d004      	beq.n	80098ca <TIM_CCxChannelCmd+0x5e>
 80098c0:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 80098c4:	4824      	ldr	r0, [pc, #144]	@ (8009958 <TIM_CCxChannelCmd+0xec>)
 80098c6:	f7f8 ffcb 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d016      	beq.n	80098fe <TIM_CCxChannelCmd+0x92>
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d013      	beq.n	80098fe <TIM_CCxChannelCmd+0x92>
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d010      	beq.n	80098fe <TIM_CCxChannelCmd+0x92>
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b0c      	cmp	r3, #12
 80098e0:	d00d      	beq.n	80098fe <TIM_CCxChannelCmd+0x92>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b10      	cmp	r3, #16
 80098e6:	d00a      	beq.n	80098fe <TIM_CCxChannelCmd+0x92>
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b14      	cmp	r3, #20
 80098ec:	d007      	beq.n	80098fe <TIM_CCxChannelCmd+0x92>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b3c      	cmp	r3, #60	@ 0x3c
 80098f2:	d004      	beq.n	80098fe <TIM_CCxChannelCmd+0x92>
 80098f4:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 80098f8:	4817      	ldr	r0, [pc, #92]	@ (8009958 <TIM_CCxChannelCmd+0xec>)
 80098fa:	f7f8 ffb1 	bl	8002860 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f003 031f 	and.w	r3, r3, #31
 8009904:	2201      	movs	r2, #1
 8009906:	fa02 f303 	lsl.w	r3, r2, r3
 800990a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a1a      	ldr	r2, [r3, #32]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	43db      	mvns	r3, r3
 8009914:	401a      	ands	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a1a      	ldr	r2, [r3, #32]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	f003 031f 	and.w	r3, r3, #31
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	fa01 f303 	lsl.w	r3, r1, r3
 800992a:	431a      	orrs	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	621a      	str	r2, [r3, #32]
}
 8009930:	bf00      	nop
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	40012c00 	.word	0x40012c00
 800993c:	40000400 	.word	0x40000400
 8009940:	40000800 	.word	0x40000800
 8009944:	40000c00 	.word	0x40000c00
 8009948:	40013400 	.word	0x40013400
 800994c:	40014000 	.word	0x40014000
 8009950:	40014400 	.word	0x40014400
 8009954:	40014800 	.word	0x40014800
 8009958:	0800c690 	.word	0x0800c690

0800995c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a34      	ldr	r2, [pc, #208]	@ (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d02c      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009978:	d027      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a30      	ldr	r2, [pc, #192]	@ (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d022      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a2e      	ldr	r2, [pc, #184]	@ (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d01d      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a2d      	ldr	r2, [pc, #180]	@ (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d018      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a2b      	ldr	r2, [pc, #172]	@ (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d013      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00e      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a28      	ldr	r2, [pc, #160]	@ (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d009      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a27      	ldr	r2, [pc, #156]	@ (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d004      	beq.n	80099ca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80099c0:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 80099c4:	4825      	ldr	r0, [pc, #148]	@ (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099c6:	f7f8 ff4b 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d020      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b10      	cmp	r3, #16
 80099d8:	d01c      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d018      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b30      	cmp	r3, #48	@ 0x30
 80099e8:	d014      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b40      	cmp	r3, #64	@ 0x40
 80099f0:	d010      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b50      	cmp	r3, #80	@ 0x50
 80099f8:	d00c      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b60      	cmp	r3, #96	@ 0x60
 8009a00:	d008      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b70      	cmp	r3, #112	@ 0x70
 8009a08:	d004      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009a0a:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 8009a0e:	4813      	ldr	r0, [pc, #76]	@ (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a10:	f7f8 ff26 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	2b80      	cmp	r3, #128	@ 0x80
 8009a1a:	d008      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8009a24:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 8009a28:	480c      	ldr	r0, [pc, #48]	@ (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a2a:	f7f8 ff19 	bl	8002860 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d113      	bne.n	8009a60 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 8009a38:	2302      	movs	r3, #2
 8009a3a:	e0d3      	b.n	8009be4 <HAL_TIMEx_MasterConfigSynchronization+0x288>
 8009a3c:	40012c00 	.word	0x40012c00
 8009a40:	40000400 	.word	0x40000400
 8009a44:	40000800 	.word	0x40000800
 8009a48:	40000c00 	.word	0x40000c00
 8009a4c:	40001000 	.word	0x40001000
 8009a50:	40001400 	.word	0x40001400
 8009a54:	40013400 	.word	0x40013400
 8009a58:	40014000 	.word	0x40014000
 8009a5c:	0800c6c8 	.word	0x0800c6c8
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a59      	ldr	r2, [pc, #356]	@ (8009bec <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x138>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a58      	ldr	r2, [pc, #352]	@ (8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d161      	bne.n	8009b58 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d054      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aa4:	d04f      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009aae:	d04a      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ab8:	d045      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ac2:	d040      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009acc:	d03b      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009ad6:	d036      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009ae0:	d031      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8009aea:	d02c      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009af4:	d027      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 8009afe:	d022      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009b08:	d01d      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 8009b12:	d018      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009b1c:	d013      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 8009b26:	d00e      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 8009b30:	d009      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 8009b3a:	d004      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 8009b3c:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8009b40:	482c      	ldr	r0, [pc, #176]	@ (8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8009b42:	f7f8 fe8d 	bl	8002860 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a1d      	ldr	r2, [pc, #116]	@ (8009bec <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d01d      	beq.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b84:	d018      	beq.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d013      	beq.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a19      	ldr	r2, [pc, #100]	@ (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00e      	beq.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a18      	ldr	r2, [pc, #96]	@ (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d009      	beq.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a11      	ldr	r2, [pc, #68]	@ (8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d004      	beq.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a14      	ldr	r2, [pc, #80]	@ (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d10c      	bne.n	8009bd2 <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	40012c00 	.word	0x40012c00
 8009bf0:	40013400 	.word	0x40013400
 8009bf4:	0800c6c8 	.word	0x0800c6c8
 8009bf8:	40000400 	.word	0x40000400
 8009bfc:	40000800 	.word	0x40000800
 8009c00:	40000c00 	.word	0x40000c00
 8009c04:	40014000 	.word	0x40014000

08009c08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a91      	ldr	r2, [pc, #580]	@ (8009e60 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d018      	beq.n	8009c52 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a8f      	ldr	r2, [pc, #572]	@ (8009e64 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d013      	beq.n	8009c52 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a8e      	ldr	r2, [pc, #568]	@ (8009e68 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d00e      	beq.n	8009c52 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a8c      	ldr	r2, [pc, #560]	@ (8009e6c <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d009      	beq.n	8009c52 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a8b      	ldr	r2, [pc, #556]	@ (8009e70 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d004      	beq.n	8009c52 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 8009c48:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 8009c4c:	4889      	ldr	r0, [pc, #548]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009c4e:	f7f8 fe07 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c5a:	d008      	beq.n	8009c6e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8009c64:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8009c68:	4882      	ldr	r0, [pc, #520]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009c6a:	f7f8 fdf9 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c76:	d008      	beq.n	8009c8a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d004      	beq.n	8009c8a <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 8009c80:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8009c84:	487b      	ldr	r0, [pc, #492]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009c86:	f7f8 fdeb 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d013      	beq.n	8009cba <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c9a:	d00e      	beq.n	8009cba <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ca4:	d009      	beq.n	8009cba <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cae:	d004      	beq.n	8009cba <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 8009cb0:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8009cb4:	486f      	ldr	r0, [pc, #444]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009cb6:	f7f8 fdd3 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	2bff      	cmp	r3, #255	@ 0xff
 8009cc0:	d904      	bls.n	8009ccc <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 8009cc2:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 8009cc6:	486b      	ldr	r0, [pc, #428]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009cc8:	f7f8 fdca 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cd4:	d008      	beq.n	8009ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009cde:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 8009ce2:	4864      	ldr	r0, [pc, #400]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009ce4:	f7f8 fdbc 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d009      	beq.n	8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cf8:	d004      	beq.n	8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009cfa:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 8009cfe:	485d      	ldr	r0, [pc, #372]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009d00:	f7f8 fdae 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	699b      	ldr	r3, [r3, #24]
 8009d08:	2b0f      	cmp	r3, #15
 8009d0a:	d904      	bls.n	8009d16 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009d0c:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 8009d10:	4858      	ldr	r0, [pc, #352]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009d12:	f7f8 fda5 	bl	8002860 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d1e:	d008      	beq.n	8009d32 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d004      	beq.n	8009d32 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009d28:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 8009d2c:	4851      	ldr	r0, [pc, #324]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009d2e:	f7f8 fd97 	bl	8002860 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d101      	bne.n	8009d40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e08a      	b.n	8009e56 <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	695b      	ldr	r3, [r3, #20]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	041b      	lsls	r3, r3, #16
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a28      	ldr	r2, [pc, #160]	@ (8009e60 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d004      	beq.n	8009dce <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a26      	ldr	r2, [pc, #152]	@ (8009e64 <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d13a      	bne.n	8009e44 <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dd6:	d008      	beq.n	8009dea <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d004      	beq.n	8009dea <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 8009de0:	f640 0112 	movw	r1, #2066	@ 0x812
 8009de4:	4823      	ldr	r0, [pc, #140]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009de6:	f7f8 fd3b 	bl	8002860 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d009      	beq.n	8009e06 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dfa:	d004      	beq.n	8009e06 <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 8009dfc:	f640 0113 	movw	r1, #2067	@ 0x813
 8009e00:	481c      	ldr	r0, [pc, #112]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009e02:	f7f8 fd2d 	bl	8002860 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0a:	2b0f      	cmp	r3, #15
 8009e0c:	d904      	bls.n	8009e18 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 8009e0e:	f640 0114 	movw	r1, #2068	@ 0x814
 8009e12:	4818      	ldr	r0, [pc, #96]	@ (8009e74 <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 8009e14:	f7f8 fd24 	bl	8002860 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e22:	051b      	lsls	r3, r3, #20
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	40012c00 	.word	0x40012c00
 8009e64:	40013400 	.word	0x40013400
 8009e68:	40014000 	.word	0x40014000
 8009e6c:	40014400 	.word	0x40014400
 8009e70:	40014800 	.word	0x40014800
 8009e74:	0800c6c8 	.word	0x0800c6c8

08009e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e08b      	b.n	8009fde <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d023      	beq.n	8009f16 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a45      	ldr	r2, [pc, #276]	@ (8009fe8 <HAL_UART_Init+0x134>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d041      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a43      	ldr	r2, [pc, #268]	@ (8009fec <HAL_UART_Init+0x138>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d03c      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a42      	ldr	r2, [pc, #264]	@ (8009ff0 <HAL_UART_Init+0x13c>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d037      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a40      	ldr	r2, [pc, #256]	@ (8009ff4 <HAL_UART_Init+0x140>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d032      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a3f      	ldr	r2, [pc, #252]	@ (8009ff8 <HAL_UART_Init+0x144>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d02d      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a3d      	ldr	r2, [pc, #244]	@ (8009ffc <HAL_UART_Init+0x148>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d028      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009f0a:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 8009f0e:	483c      	ldr	r0, [pc, #240]	@ (800a000 <HAL_UART_Init+0x14c>)
 8009f10:	f7f8 fca6 	bl	8002860 <assert_failed>
 8009f14:	e022      	b.n	8009f5c <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a33      	ldr	r2, [pc, #204]	@ (8009fe8 <HAL_UART_Init+0x134>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d01d      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a31      	ldr	r2, [pc, #196]	@ (8009fec <HAL_UART_Init+0x138>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d018      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a30      	ldr	r2, [pc, #192]	@ (8009ff0 <HAL_UART_Init+0x13c>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d013      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a2e      	ldr	r2, [pc, #184]	@ (8009ff4 <HAL_UART_Init+0x140>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00e      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a2d      	ldr	r2, [pc, #180]	@ (8009ff8 <HAL_UART_Init+0x144>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d009      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8009ffc <HAL_UART_Init+0x148>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d004      	beq.n	8009f5c <HAL_UART_Init+0xa8>
 8009f52:	f240 1157 	movw	r1, #343	@ 0x157
 8009f56:	482a      	ldr	r0, [pc, #168]	@ (800a000 <HAL_UART_Init+0x14c>)
 8009f58:	f7f8 fc82 	bl	8002860 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7f9 fa49 	bl	8003404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2224      	movs	r2, #36	@ 0x24
 8009f76:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 0201 	bic.w	r2, r2, #1
 8009f86:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fc1f 	bl	800a7d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f8be 	bl	800a118 <UART_SetConfig>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d101      	bne.n	8009fa6 <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e01b      	b.n	8009fde <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009fc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f042 0201 	orr.w	r2, r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fd5c 	bl	800aa94 <UART_CheckIdleState>
 8009fdc:	4603      	mov	r3, r0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	40013800 	.word	0x40013800
 8009fec:	40004400 	.word	0x40004400
 8009ff0:	40004800 	.word	0x40004800
 8009ff4:	40004c00 	.word	0x40004c00
 8009ff8:	40005000 	.word	0x40005000
 8009ffc:	40008000 	.word	0x40008000
 800a000:	0800c704 	.word	0x0800c704

0800a004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08a      	sub	sp, #40	@ 0x28
 800a008:	af02      	add	r7, sp, #8
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	4613      	mov	r3, r2
 800a012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a018:	2b20      	cmp	r3, #32
 800a01a:	d177      	bne.n	800a10c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <HAL_UART_Transmit+0x24>
 800a022:	88fb      	ldrh	r3, [r7, #6]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e070      	b.n	800a10e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2221      	movs	r2, #33	@ 0x21
 800a038:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a03a:	f7f9 fad3 	bl	80035e4 <HAL_GetTick>
 800a03e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	88fa      	ldrh	r2, [r7, #6]
 800a044:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	88fa      	ldrh	r2, [r7, #6]
 800a04c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a058:	d108      	bne.n	800a06c <HAL_UART_Transmit+0x68>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d104      	bne.n	800a06c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	61bb      	str	r3, [r7, #24]
 800a06a:	e003      	b.n	800a074 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a070:	2300      	movs	r3, #0
 800a072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a074:	e02f      	b.n	800a0d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2200      	movs	r2, #0
 800a07e:	2180      	movs	r1, #128	@ 0x80
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 fdaf 	bl	800abe4 <UART_WaitOnFlagUntilTimeout>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2220      	movs	r2, #32
 800a090:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e03b      	b.n	800a10e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10b      	bne.n	800a0b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	881a      	ldrh	r2, [r3, #0]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0a8:	b292      	uxth	r2, r2
 800a0aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	61bb      	str	r3, [r7, #24]
 800a0b2:	e007      	b.n	800a0c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1c9      	bne.n	800a076 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2140      	movs	r1, #64	@ 0x40
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fd79 	bl	800abe4 <UART_WaitOnFlagUntilTimeout>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d004      	beq.n	800a102 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e005      	b.n	800a10e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2220      	movs	r2, #32
 800a106:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	e000      	b.n	800a10e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a10c:	2302      	movs	r3, #2
  }
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3720      	adds	r7, #32
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a11c:	b08a      	sub	sp, #40	@ 0x28
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	4a9e      	ldr	r2, [pc, #632]	@ (800a3a8 <UART_SetConfig+0x290>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d904      	bls.n	800a13c <UART_SetConfig+0x24>
 800a132:	f640 4158 	movw	r1, #3160	@ 0xc58
 800a136:	489d      	ldr	r0, [pc, #628]	@ (800a3ac <UART_SetConfig+0x294>)
 800a138:	f7f8 fb92 	bl	8002860 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a144:	d00d      	beq.n	800a162 <UART_SetConfig+0x4a>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d009      	beq.n	800a162 <UART_SetConfig+0x4a>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a156:	d004      	beq.n	800a162 <UART_SetConfig+0x4a>
 800a158:	f640 4159 	movw	r1, #3161	@ 0xc59
 800a15c:	4893      	ldr	r0, [pc, #588]	@ (800a3ac <UART_SetConfig+0x294>)
 800a15e:	f7f8 fb7f 	bl	8002860 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a92      	ldr	r2, [pc, #584]	@ (800a3b0 <UART_SetConfig+0x298>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d10e      	bne.n	800a18a <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d030      	beq.n	800a1d6 <UART_SetConfig+0xbe>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a17c:	d02b      	beq.n	800a1d6 <UART_SetConfig+0xbe>
 800a17e:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800a182:	488a      	ldr	r0, [pc, #552]	@ (800a3ac <UART_SetConfig+0x294>)
 800a184:	f7f8 fb6c 	bl	8002860 <assert_failed>
 800a188:	e025      	b.n	800a1d6 <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a192:	d012      	beq.n	800a1ba <UART_SetConfig+0xa2>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00e      	beq.n	800a1ba <UART_SetConfig+0xa2>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1a4:	d009      	beq.n	800a1ba <UART_SetConfig+0xa2>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1ae:	d004      	beq.n	800a1ba <UART_SetConfig+0xa2>
 800a1b0:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800a1b4:	487d      	ldr	r0, [pc, #500]	@ (800a3ac <UART_SetConfig+0x294>)
 800a1b6:	f7f8 fb53 	bl	8002860 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d009      	beq.n	800a1d6 <UART_SetConfig+0xbe>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1ca:	d004      	beq.n	800a1d6 <UART_SetConfig+0xbe>
 800a1cc:	f640 4161 	movw	r1, #3169	@ 0xc61
 800a1d0:	4876      	ldr	r0, [pc, #472]	@ (800a3ac <UART_SetConfig+0x294>)
 800a1d2:	f7f8 fb45 	bl	8002860 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00e      	beq.n	800a1fc <UART_SetConfig+0xe4>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1e6:	d009      	beq.n	800a1fc <UART_SetConfig+0xe4>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a1f0:	d004      	beq.n	800a1fc <UART_SetConfig+0xe4>
 800a1f2:	f640 4164 	movw	r1, #3172	@ 0xc64
 800a1f6:	486d      	ldr	r0, [pc, #436]	@ (800a3ac <UART_SetConfig+0x294>)
 800a1f8:	f7f8 fb32 	bl	8002860 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	f023 030c 	bic.w	r3, r3, #12
 800a204:	2b00      	cmp	r3, #0
 800a206:	d103      	bne.n	800a210 <UART_SetConfig+0xf8>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d104      	bne.n	800a21a <UART_SetConfig+0x102>
 800a210:	f640 4165 	movw	r1, #3173	@ 0xc65
 800a214:	4865      	ldr	r0, [pc, #404]	@ (800a3ac <UART_SetConfig+0x294>)
 800a216:	f7f8 fb23 	bl	8002860 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d013      	beq.n	800a24a <UART_SetConfig+0x132>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a22a:	d00e      	beq.n	800a24a <UART_SetConfig+0x132>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a234:	d009      	beq.n	800a24a <UART_SetConfig+0x132>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a23e:	d004      	beq.n	800a24a <UART_SetConfig+0x132>
 800a240:	f640 4166 	movw	r1, #3174	@ 0xc66
 800a244:	4859      	ldr	r0, [pc, #356]	@ (800a3ac <UART_SetConfig+0x294>)
 800a246:	f7f8 fb0b 	bl	8002860 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d009      	beq.n	800a266 <UART_SetConfig+0x14e>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a25a:	d004      	beq.n	800a266 <UART_SetConfig+0x14e>
 800a25c:	f640 4167 	movw	r1, #3175	@ 0xc67
 800a260:	4852      	ldr	r0, [pc, #328]	@ (800a3ac <UART_SetConfig+0x294>)
 800a262:	f7f8 fafd 	bl	8002860 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689a      	ldr	r2, [r3, #8]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	431a      	orrs	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	431a      	orrs	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	4b4b      	ldr	r3, [pc, #300]	@ (800a3b4 <UART_SetConfig+0x29c>)
 800a286:	4013      	ands	r3, r2
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a28e:	430b      	orrs	r3, r1
 800a290:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a3f      	ldr	r2, [pc, #252]	@ (800a3b0 <UART_SetConfig+0x298>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d004      	beq.n	800a2c2 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a37      	ldr	r2, [pc, #220]	@ (800a3b8 <UART_SetConfig+0x2a0>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d125      	bne.n	800a32c <UART_SetConfig+0x214>
 800a2e0:	4b36      	ldr	r3, [pc, #216]	@ (800a3bc <UART_SetConfig+0x2a4>)
 800a2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2e6:	f003 0303 	and.w	r3, r3, #3
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d81a      	bhi.n	800a324 <UART_SetConfig+0x20c>
 800a2ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f4 <UART_SetConfig+0x1dc>)
 800a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f4:	0800a305 	.word	0x0800a305
 800a2f8:	0800a315 	.word	0x0800a315
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a31d 	.word	0x0800a31d
 800a304:	2301      	movs	r3, #1
 800a306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a30a:	e114      	b.n	800a536 <UART_SetConfig+0x41e>
 800a30c:	2302      	movs	r3, #2
 800a30e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a312:	e110      	b.n	800a536 <UART_SetConfig+0x41e>
 800a314:	2304      	movs	r3, #4
 800a316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a31a:	e10c      	b.n	800a536 <UART_SetConfig+0x41e>
 800a31c:	2308      	movs	r3, #8
 800a31e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a322:	e108      	b.n	800a536 <UART_SetConfig+0x41e>
 800a324:	2310      	movs	r3, #16
 800a326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a32a:	e104      	b.n	800a536 <UART_SetConfig+0x41e>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a23      	ldr	r2, [pc, #140]	@ (800a3c0 <UART_SetConfig+0x2a8>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d146      	bne.n	800a3c4 <UART_SetConfig+0x2ac>
 800a336:	4b21      	ldr	r3, [pc, #132]	@ (800a3bc <UART_SetConfig+0x2a4>)
 800a338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a33c:	f003 030c 	and.w	r3, r3, #12
 800a340:	2b0c      	cmp	r3, #12
 800a342:	d82d      	bhi.n	800a3a0 <UART_SetConfig+0x288>
 800a344:	a201      	add	r2, pc, #4	@ (adr r2, 800a34c <UART_SetConfig+0x234>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a381 	.word	0x0800a381
 800a350:	0800a3a1 	.word	0x0800a3a1
 800a354:	0800a3a1 	.word	0x0800a3a1
 800a358:	0800a3a1 	.word	0x0800a3a1
 800a35c:	0800a391 	.word	0x0800a391
 800a360:	0800a3a1 	.word	0x0800a3a1
 800a364:	0800a3a1 	.word	0x0800a3a1
 800a368:	0800a3a1 	.word	0x0800a3a1
 800a36c:	0800a389 	.word	0x0800a389
 800a370:	0800a3a1 	.word	0x0800a3a1
 800a374:	0800a3a1 	.word	0x0800a3a1
 800a378:	0800a3a1 	.word	0x0800a3a1
 800a37c:	0800a399 	.word	0x0800a399
 800a380:	2300      	movs	r3, #0
 800a382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a386:	e0d6      	b.n	800a536 <UART_SetConfig+0x41e>
 800a388:	2302      	movs	r3, #2
 800a38a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a38e:	e0d2      	b.n	800a536 <UART_SetConfig+0x41e>
 800a390:	2304      	movs	r3, #4
 800a392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a396:	e0ce      	b.n	800a536 <UART_SetConfig+0x41e>
 800a398:	2308      	movs	r3, #8
 800a39a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a39e:	e0ca      	b.n	800a536 <UART_SetConfig+0x41e>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3a6:	e0c6      	b.n	800a536 <UART_SetConfig+0x41e>
 800a3a8:	00989680 	.word	0x00989680
 800a3ac:	0800c704 	.word	0x0800c704
 800a3b0:	40008000 	.word	0x40008000
 800a3b4:	efff69f3 	.word	0xefff69f3
 800a3b8:	40013800 	.word	0x40013800
 800a3bc:	40021000 	.word	0x40021000
 800a3c0:	40004400 	.word	0x40004400
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4aae      	ldr	r2, [pc, #696]	@ (800a684 <UART_SetConfig+0x56c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d125      	bne.n	800a41a <UART_SetConfig+0x302>
 800a3ce:	4bae      	ldr	r3, [pc, #696]	@ (800a688 <UART_SetConfig+0x570>)
 800a3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a3d8:	2b30      	cmp	r3, #48	@ 0x30
 800a3da:	d016      	beq.n	800a40a <UART_SetConfig+0x2f2>
 800a3dc:	2b30      	cmp	r3, #48	@ 0x30
 800a3de:	d818      	bhi.n	800a412 <UART_SetConfig+0x2fa>
 800a3e0:	2b20      	cmp	r3, #32
 800a3e2:	d00a      	beq.n	800a3fa <UART_SetConfig+0x2e2>
 800a3e4:	2b20      	cmp	r3, #32
 800a3e6:	d814      	bhi.n	800a412 <UART_SetConfig+0x2fa>
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <UART_SetConfig+0x2da>
 800a3ec:	2b10      	cmp	r3, #16
 800a3ee:	d008      	beq.n	800a402 <UART_SetConfig+0x2ea>
 800a3f0:	e00f      	b.n	800a412 <UART_SetConfig+0x2fa>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a3f8:	e09d      	b.n	800a536 <UART_SetConfig+0x41e>
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a400:	e099      	b.n	800a536 <UART_SetConfig+0x41e>
 800a402:	2304      	movs	r3, #4
 800a404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a408:	e095      	b.n	800a536 <UART_SetConfig+0x41e>
 800a40a:	2308      	movs	r3, #8
 800a40c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a410:	e091      	b.n	800a536 <UART_SetConfig+0x41e>
 800a412:	2310      	movs	r3, #16
 800a414:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a418:	e08d      	b.n	800a536 <UART_SetConfig+0x41e>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a9b      	ldr	r2, [pc, #620]	@ (800a68c <UART_SetConfig+0x574>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d125      	bne.n	800a470 <UART_SetConfig+0x358>
 800a424:	4b98      	ldr	r3, [pc, #608]	@ (800a688 <UART_SetConfig+0x570>)
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a42a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a42e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a430:	d016      	beq.n	800a460 <UART_SetConfig+0x348>
 800a432:	2bc0      	cmp	r3, #192	@ 0xc0
 800a434:	d818      	bhi.n	800a468 <UART_SetConfig+0x350>
 800a436:	2b80      	cmp	r3, #128	@ 0x80
 800a438:	d00a      	beq.n	800a450 <UART_SetConfig+0x338>
 800a43a:	2b80      	cmp	r3, #128	@ 0x80
 800a43c:	d814      	bhi.n	800a468 <UART_SetConfig+0x350>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <UART_SetConfig+0x330>
 800a442:	2b40      	cmp	r3, #64	@ 0x40
 800a444:	d008      	beq.n	800a458 <UART_SetConfig+0x340>
 800a446:	e00f      	b.n	800a468 <UART_SetConfig+0x350>
 800a448:	2300      	movs	r3, #0
 800a44a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a44e:	e072      	b.n	800a536 <UART_SetConfig+0x41e>
 800a450:	2302      	movs	r3, #2
 800a452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a456:	e06e      	b.n	800a536 <UART_SetConfig+0x41e>
 800a458:	2304      	movs	r3, #4
 800a45a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a45e:	e06a      	b.n	800a536 <UART_SetConfig+0x41e>
 800a460:	2308      	movs	r3, #8
 800a462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a466:	e066      	b.n	800a536 <UART_SetConfig+0x41e>
 800a468:	2310      	movs	r3, #16
 800a46a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a46e:	e062      	b.n	800a536 <UART_SetConfig+0x41e>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a86      	ldr	r2, [pc, #536]	@ (800a690 <UART_SetConfig+0x578>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d12a      	bne.n	800a4d0 <UART_SetConfig+0x3b8>
 800a47a:	4b83      	ldr	r3, [pc, #524]	@ (800a688 <UART_SetConfig+0x570>)
 800a47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a488:	d01a      	beq.n	800a4c0 <UART_SetConfig+0x3a8>
 800a48a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a48e:	d81b      	bhi.n	800a4c8 <UART_SetConfig+0x3b0>
 800a490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a494:	d00c      	beq.n	800a4b0 <UART_SetConfig+0x398>
 800a496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a49a:	d815      	bhi.n	800a4c8 <UART_SetConfig+0x3b0>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d003      	beq.n	800a4a8 <UART_SetConfig+0x390>
 800a4a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4a4:	d008      	beq.n	800a4b8 <UART_SetConfig+0x3a0>
 800a4a6:	e00f      	b.n	800a4c8 <UART_SetConfig+0x3b0>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4ae:	e042      	b.n	800a536 <UART_SetConfig+0x41e>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4b6:	e03e      	b.n	800a536 <UART_SetConfig+0x41e>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4be:	e03a      	b.n	800a536 <UART_SetConfig+0x41e>
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4c6:	e036      	b.n	800a536 <UART_SetConfig+0x41e>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4ce:	e032      	b.n	800a536 <UART_SetConfig+0x41e>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a6f      	ldr	r2, [pc, #444]	@ (800a694 <UART_SetConfig+0x57c>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d12a      	bne.n	800a530 <UART_SetConfig+0x418>
 800a4da:	4b6b      	ldr	r3, [pc, #428]	@ (800a688 <UART_SetConfig+0x570>)
 800a4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a4e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4e8:	d01a      	beq.n	800a520 <UART_SetConfig+0x408>
 800a4ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4ee:	d81b      	bhi.n	800a528 <UART_SetConfig+0x410>
 800a4f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4f4:	d00c      	beq.n	800a510 <UART_SetConfig+0x3f8>
 800a4f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4fa:	d815      	bhi.n	800a528 <UART_SetConfig+0x410>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <UART_SetConfig+0x3f0>
 800a500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a504:	d008      	beq.n	800a518 <UART_SetConfig+0x400>
 800a506:	e00f      	b.n	800a528 <UART_SetConfig+0x410>
 800a508:	2300      	movs	r3, #0
 800a50a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a50e:	e012      	b.n	800a536 <UART_SetConfig+0x41e>
 800a510:	2302      	movs	r3, #2
 800a512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a516:	e00e      	b.n	800a536 <UART_SetConfig+0x41e>
 800a518:	2304      	movs	r3, #4
 800a51a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a51e:	e00a      	b.n	800a536 <UART_SetConfig+0x41e>
 800a520:	2308      	movs	r3, #8
 800a522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a526:	e006      	b.n	800a536 <UART_SetConfig+0x41e>
 800a528:	2310      	movs	r3, #16
 800a52a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a52e:	e002      	b.n	800a536 <UART_SetConfig+0x41e>
 800a530:	2310      	movs	r3, #16
 800a532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a56      	ldr	r2, [pc, #344]	@ (800a694 <UART_SetConfig+0x57c>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d17a      	bne.n	800a636 <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a540:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a544:	2b08      	cmp	r3, #8
 800a546:	d824      	bhi.n	800a592 <UART_SetConfig+0x47a>
 800a548:	a201      	add	r2, pc, #4	@ (adr r2, 800a550 <UART_SetConfig+0x438>)
 800a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54e:	bf00      	nop
 800a550:	0800a575 	.word	0x0800a575
 800a554:	0800a593 	.word	0x0800a593
 800a558:	0800a57d 	.word	0x0800a57d
 800a55c:	0800a593 	.word	0x0800a593
 800a560:	0800a583 	.word	0x0800a583
 800a564:	0800a593 	.word	0x0800a593
 800a568:	0800a593 	.word	0x0800a593
 800a56c:	0800a593 	.word	0x0800a593
 800a570:	0800a58b 	.word	0x0800a58b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a574:	f7fb f878 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
 800a578:	61f8      	str	r0, [r7, #28]
        break;
 800a57a:	e010      	b.n	800a59e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a57c:	4b46      	ldr	r3, [pc, #280]	@ (800a698 <UART_SetConfig+0x580>)
 800a57e:	61fb      	str	r3, [r7, #28]
        break;
 800a580:	e00d      	b.n	800a59e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a582:	f7fa ffd9 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 800a586:	61f8      	str	r0, [r7, #28]
        break;
 800a588:	e009      	b.n	800a59e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a58a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a58e:	61fb      	str	r3, [r7, #28]
        break;
 800a590:	e005      	b.n	800a59e <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800a592:	2300      	movs	r3, #0
 800a594:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a59c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 8107 	beq.w	800a7b4 <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	4413      	add	r3, r2
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d305      	bcc.n	800a5c2 <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a5bc:	69fa      	ldr	r2, [r7, #28]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d903      	bls.n	800a5ca <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a5c8:	e0f4      	b.n	800a7b4 <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	461c      	mov	r4, r3
 800a5d0:	4615      	mov	r5, r2
 800a5d2:	f04f 0200 	mov.w	r2, #0
 800a5d6:	f04f 0300 	mov.w	r3, #0
 800a5da:	022b      	lsls	r3, r5, #8
 800a5dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a5e0:	0222      	lsls	r2, r4, #8
 800a5e2:	68f9      	ldr	r1, [r7, #12]
 800a5e4:	6849      	ldr	r1, [r1, #4]
 800a5e6:	0849      	lsrs	r1, r1, #1
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	4688      	mov	r8, r1
 800a5ec:	4681      	mov	r9, r0
 800a5ee:	eb12 0a08 	adds.w	sl, r2, r8
 800a5f2:	eb43 0b09 	adc.w	fp, r3, r9
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	603b      	str	r3, [r7, #0]
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a604:	4650      	mov	r0, sl
 800a606:	4659      	mov	r1, fp
 800a608:	f7f5 fe32 	bl	8000270 <__aeabi_uldivmod>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4613      	mov	r3, r2
 800a612:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a61a:	d308      	bcc.n	800a62e <UART_SetConfig+0x516>
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a622:	d204      	bcs.n	800a62e <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	69ba      	ldr	r2, [r7, #24]
 800a62a:	60da      	str	r2, [r3, #12]
 800a62c:	e0c2      	b.n	800a7b4 <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a634:	e0be      	b.n	800a7b4 <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a63e:	d16a      	bne.n	800a716 <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800a640:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a644:	2b08      	cmp	r3, #8
 800a646:	d834      	bhi.n	800a6b2 <UART_SetConfig+0x59a>
 800a648:	a201      	add	r2, pc, #4	@ (adr r2, 800a650 <UART_SetConfig+0x538>)
 800a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64e:	bf00      	nop
 800a650:	0800a675 	.word	0x0800a675
 800a654:	0800a67d 	.word	0x0800a67d
 800a658:	0800a69d 	.word	0x0800a69d
 800a65c:	0800a6b3 	.word	0x0800a6b3
 800a660:	0800a6a3 	.word	0x0800a6a3
 800a664:	0800a6b3 	.word	0x0800a6b3
 800a668:	0800a6b3 	.word	0x0800a6b3
 800a66c:	0800a6b3 	.word	0x0800a6b3
 800a670:	0800a6ab 	.word	0x0800a6ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a674:	f7fa fff8 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
 800a678:	61f8      	str	r0, [r7, #28]
        break;
 800a67a:	e020      	b.n	800a6be <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a67c:	f7fb f80a 	bl	8005694 <HAL_RCC_GetPCLK2Freq>
 800a680:	61f8      	str	r0, [r7, #28]
        break;
 800a682:	e01c      	b.n	800a6be <UART_SetConfig+0x5a6>
 800a684:	40004800 	.word	0x40004800
 800a688:	40021000 	.word	0x40021000
 800a68c:	40004c00 	.word	0x40004c00
 800a690:	40005000 	.word	0x40005000
 800a694:	40008000 	.word	0x40008000
 800a698:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a69c:	4b4c      	ldr	r3, [pc, #304]	@ (800a7d0 <UART_SetConfig+0x6b8>)
 800a69e:	61fb      	str	r3, [r7, #28]
        break;
 800a6a0:	e00d      	b.n	800a6be <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6a2:	f7fa ff49 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 800a6a6:	61f8      	str	r0, [r7, #28]
        break;
 800a6a8:	e009      	b.n	800a6be <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ae:	61fb      	str	r3, [r7, #28]
        break;
 800a6b0:	e005      	b.n	800a6be <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a6bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d077      	beq.n	800a7b4 <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	005a      	lsls	r2, r3, #1
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	085b      	lsrs	r3, r3, #1
 800a6ce:	441a      	add	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b0f      	cmp	r3, #15
 800a6de:	d916      	bls.n	800a70e <UART_SetConfig+0x5f6>
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6e6:	d212      	bcs.n	800a70e <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	f023 030f 	bic.w	r3, r3, #15
 800a6f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	085b      	lsrs	r3, r3, #1
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	f003 0307 	and.w	r3, r3, #7
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	8afb      	ldrh	r3, [r7, #22]
 800a700:	4313      	orrs	r3, r2
 800a702:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	8afa      	ldrh	r2, [r7, #22]
 800a70a:	60da      	str	r2, [r3, #12]
 800a70c:	e052      	b.n	800a7b4 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a714:	e04e      	b.n	800a7b4 <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a716:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a71a:	2b08      	cmp	r3, #8
 800a71c:	d827      	bhi.n	800a76e <UART_SetConfig+0x656>
 800a71e:	a201      	add	r2, pc, #4	@ (adr r2, 800a724 <UART_SetConfig+0x60c>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a749 	.word	0x0800a749
 800a728:	0800a751 	.word	0x0800a751
 800a72c:	0800a759 	.word	0x0800a759
 800a730:	0800a76f 	.word	0x0800a76f
 800a734:	0800a75f 	.word	0x0800a75f
 800a738:	0800a76f 	.word	0x0800a76f
 800a73c:	0800a76f 	.word	0x0800a76f
 800a740:	0800a76f 	.word	0x0800a76f
 800a744:	0800a767 	.word	0x0800a767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a748:	f7fa ff8e 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
 800a74c:	61f8      	str	r0, [r7, #28]
        break;
 800a74e:	e014      	b.n	800a77a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a750:	f7fa ffa0 	bl	8005694 <HAL_RCC_GetPCLK2Freq>
 800a754:	61f8      	str	r0, [r7, #28]
        break;
 800a756:	e010      	b.n	800a77a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a758:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d0 <UART_SetConfig+0x6b8>)
 800a75a:	61fb      	str	r3, [r7, #28]
        break;
 800a75c:	e00d      	b.n	800a77a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a75e:	f7fa feeb 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 800a762:	61f8      	str	r0, [r7, #28]
        break;
 800a764:	e009      	b.n	800a77a <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a76a:	61fb      	str	r3, [r7, #28]
        break;
 800a76c:	e005      	b.n	800a77a <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a778:	bf00      	nop
    }

    if (pclk != 0U)
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d019      	beq.n	800a7b4 <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	085a      	lsrs	r2, r3, #1
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	441a      	add	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a792:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	2b0f      	cmp	r3, #15
 800a798:	d909      	bls.n	800a7ae <UART_SetConfig+0x696>
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7a0:	d205      	bcs.n	800a7ae <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	60da      	str	r2, [r3, #12]
 800a7ac:	e002      	b.n	800a7b4 <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a7c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3728      	adds	r7, #40	@ 0x28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7ce:	bf00      	nop
 800a7d0:	00f42400 	.word	0x00f42400

0800a7d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e0:	2bff      	cmp	r3, #255	@ 0xff
 800a7e2:	d904      	bls.n	800a7ee <UART_AdvFeatureConfig+0x1a>
 800a7e4:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800a7e8:	4891      	ldr	r0, [pc, #580]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a7ea:	f7f8 f839 	bl	8002860 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f2:	f003 0308 	and.w	r3, r3, #8
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d018      	beq.n	800a82c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <UART_AdvFeatureConfig+0x42>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a80a:	d004      	beq.n	800a816 <UART_AdvFeatureConfig+0x42>
 800a80c:	f640 5152 	movw	r1, #3410	@ 0xd52
 800a810:	4887      	ldr	r0, [pc, #540]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a812:	f7f8 f825 	bl	8002860 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	430a      	orrs	r2, r1
 800a82a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d018      	beq.n	800a86a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d009      	beq.n	800a854 <UART_AdvFeatureConfig+0x80>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a844:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a848:	d004      	beq.n	800a854 <UART_AdvFeatureConfig+0x80>
 800a84a:	f640 5159 	movw	r1, #3417	@ 0xd59
 800a84e:	4878      	ldr	r0, [pc, #480]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a850:	f7f8 f806 	bl	8002860 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	430a      	orrs	r2, r1
 800a868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d018      	beq.n	800a8a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d009      	beq.n	800a892 <UART_AdvFeatureConfig+0xbe>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a886:	d004      	beq.n	800a892 <UART_AdvFeatureConfig+0xbe>
 800a888:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800a88c:	4868      	ldr	r0, [pc, #416]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a88e:	f7f7 ffe7 	bl	8002860 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d018      	beq.n	800a8e6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d009      	beq.n	800a8d0 <UART_AdvFeatureConfig+0xfc>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8c4:	d004      	beq.n	800a8d0 <UART_AdvFeatureConfig+0xfc>
 800a8c6:	f640 5167 	movw	r1, #3431	@ 0xd67
 800a8ca:	4859      	ldr	r0, [pc, #356]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a8cc:	f7f7 ffc8 	bl	8002860 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ea:	f003 0310 	and.w	r3, r3, #16
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d018      	beq.n	800a924 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <UART_AdvFeatureConfig+0x13a>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a902:	d004      	beq.n	800a90e <UART_AdvFeatureConfig+0x13a>
 800a904:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800a908:	4849      	ldr	r0, [pc, #292]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a90a:	f7f7 ffa9 	bl	8002860 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	430a      	orrs	r2, r1
 800a922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d018      	beq.n	800a962 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d009      	beq.n	800a94c <UART_AdvFeatureConfig+0x178>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a93c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a940:	d004      	beq.n	800a94c <UART_AdvFeatureConfig+0x178>
 800a942:	f640 5175 	movw	r1, #3445	@ 0xd75
 800a946:	483a      	ldr	r0, [pc, #232]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a948:	f7f7 ff8a 	bl	8002860 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d06c      	beq.n	800aa48 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a30      	ldr	r2, [pc, #192]	@ (800aa34 <UART_AdvFeatureConfig+0x260>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d018      	beq.n	800a9aa <UART_AdvFeatureConfig+0x1d6>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a2e      	ldr	r2, [pc, #184]	@ (800aa38 <UART_AdvFeatureConfig+0x264>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d013      	beq.n	800a9aa <UART_AdvFeatureConfig+0x1d6>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a2d      	ldr	r2, [pc, #180]	@ (800aa3c <UART_AdvFeatureConfig+0x268>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00e      	beq.n	800a9aa <UART_AdvFeatureConfig+0x1d6>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a2b      	ldr	r2, [pc, #172]	@ (800aa40 <UART_AdvFeatureConfig+0x26c>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d009      	beq.n	800a9aa <UART_AdvFeatureConfig+0x1d6>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a2a      	ldr	r2, [pc, #168]	@ (800aa44 <UART_AdvFeatureConfig+0x270>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d004      	beq.n	800a9aa <UART_AdvFeatureConfig+0x1d6>
 800a9a0:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800a9a4:	4822      	ldr	r0, [pc, #136]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a9a6:	f7f7 ff5b 	bl	8002860 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d009      	beq.n	800a9c6 <UART_AdvFeatureConfig+0x1f2>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9ba:	d004      	beq.n	800a9c6 <UART_AdvFeatureConfig+0x1f2>
 800a9bc:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800a9c0:	481b      	ldr	r0, [pc, #108]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800a9c2:	f7f7 ff4d 	bl	8002860 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9e4:	d130      	bne.n	800aa48 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d013      	beq.n	800aa16 <UART_AdvFeatureConfig+0x242>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9f6:	d00e      	beq.n	800aa16 <UART_AdvFeatureConfig+0x242>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa00:	d009      	beq.n	800aa16 <UART_AdvFeatureConfig+0x242>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa0a:	d004      	beq.n	800aa16 <UART_AdvFeatureConfig+0x242>
 800aa0c:	f640 5182 	movw	r1, #3458	@ 0xd82
 800aa10:	4807      	ldr	r0, [pc, #28]	@ (800aa30 <UART_AdvFeatureConfig+0x25c>)
 800aa12:	f7f7 ff25 	bl	8002860 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	605a      	str	r2, [r3, #4]
 800aa2c:	e00c      	b.n	800aa48 <UART_AdvFeatureConfig+0x274>
 800aa2e:	bf00      	nop
 800aa30:	0800c704 	.word	0x0800c704
 800aa34:	40013800 	.word	0x40013800
 800aa38:	40004400 	.word	0x40004400
 800aa3c:	40004800 	.word	0x40004800
 800aa40:	40004c00 	.word	0x40004c00
 800aa44:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d018      	beq.n	800aa86 <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d009      	beq.n	800aa70 <UART_AdvFeatureConfig+0x29c>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aa64:	d004      	beq.n	800aa70 <UART_AdvFeatureConfig+0x29c>
 800aa66:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800aa6a:	4809      	ldr	r0, [pc, #36]	@ (800aa90 <UART_AdvFeatureConfig+0x2bc>)
 800aa6c:	f7f7 fef8 	bl	8002860 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	605a      	str	r2, [r3, #4]
  }
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	0800c704 	.word	0x0800c704

0800aa94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b098      	sub	sp, #96	@ 0x60
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aaa4:	f7f8 fd9e 	bl	80035e4 <HAL_GetTick>
 800aaa8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0308 	and.w	r3, r3, #8
 800aab4:	2b08      	cmp	r3, #8
 800aab6:	d12e      	bne.n	800ab16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aab8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aac0:	2200      	movs	r2, #0
 800aac2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f88c 	bl	800abe4 <UART_WaitOnFlagUntilTimeout>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d021      	beq.n	800ab16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aae6:	653b      	str	r3, [r7, #80]	@ 0x50
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	461a      	mov	r2, r3
 800aaee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaf2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaf8:	e841 2300 	strex	r3, r2, [r1]
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1e6      	bne.n	800aad2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2220      	movs	r2, #32
 800ab08:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e062      	b.n	800abdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b04      	cmp	r3, #4
 800ab22:	d149      	bne.n	800abb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f856 	bl	800abe4 <UART_WaitOnFlagUntilTimeout>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d03c      	beq.n	800abb8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab46:	e853 3f00 	ldrex	r3, [r3]
 800ab4a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab5c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab64:	e841 2300 	strex	r3, r2, [r1]
 800ab68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d1e6      	bne.n	800ab3e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3308      	adds	r3, #8
 800ab76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	e853 3f00 	ldrex	r3, [r3]
 800ab7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0301 	bic.w	r3, r3, #1
 800ab86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab90:	61fa      	str	r2, [r7, #28]
 800ab92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab94:	69b9      	ldr	r1, [r7, #24]
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	e841 2300 	strex	r3, r2, [r1]
 800ab9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1e5      	bne.n	800ab70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2220      	movs	r2, #32
 800aba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e011      	b.n	800abdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2220      	movs	r2, #32
 800abbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2220      	movs	r2, #32
 800abc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3758      	adds	r7, #88	@ 0x58
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	603b      	str	r3, [r7, #0]
 800abf0:	4613      	mov	r3, r2
 800abf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abf4:	e04f      	b.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfc:	d04b      	beq.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abfe:	f7f8 fcf1 	bl	80035e4 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d302      	bcc.n	800ac14 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e04e      	b.n	800acb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 0304 	and.w	r3, r3, #4
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d037      	beq.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b80      	cmp	r3, #128	@ 0x80
 800ac2a:	d034      	beq.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b40      	cmp	r3, #64	@ 0x40
 800ac30:	d031      	beq.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	f003 0308 	and.w	r3, r3, #8
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d110      	bne.n	800ac62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2208      	movs	r2, #8
 800ac46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f838 	bl	800acbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2208      	movs	r2, #8
 800ac52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e029      	b.n	800acb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac70:	d111      	bne.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 f81e 	bl	800acbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2220      	movs	r2, #32
 800ac86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e00f      	b.n	800acb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	69da      	ldr	r2, [r3, #28]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	4013      	ands	r3, r2
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	bf0c      	ite	eq
 800aca6:	2301      	moveq	r3, #1
 800aca8:	2300      	movne	r3, #0
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	461a      	mov	r2, r3
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d0a0      	beq.n	800abf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b095      	sub	sp, #84	@ 0x54
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800accc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acce:	e853 3f00 	ldrex	r3, [r3]
 800acd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	461a      	mov	r2, r3
 800ace2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ace4:	643b      	str	r3, [r7, #64]	@ 0x40
 800ace6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e6      	bne.n	800acc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3308      	adds	r3, #8
 800acfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad00:	6a3b      	ldr	r3, [r7, #32]
 800ad02:	e853 3f00 	ldrex	r3, [r3]
 800ad06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	f023 0301 	bic.w	r3, r3, #1
 800ad0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3308      	adds	r3, #8
 800ad16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad20:	e841 2300 	strex	r3, r2, [r1]
 800ad24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1e5      	bne.n	800acf8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d118      	bne.n	800ad66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	f023 0310 	bic.w	r3, r3, #16
 800ad48:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad52:	61bb      	str	r3, [r7, #24]
 800ad54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6979      	ldr	r1, [r7, #20]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e6      	bne.n	800ad34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ad7a:	bf00      	nop
 800ad7c:	3754      	adds	r7, #84	@ 0x54
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
	...

0800ad88 <calloc>:
 800ad88:	4b02      	ldr	r3, [pc, #8]	@ (800ad94 <calloc+0xc>)
 800ad8a:	460a      	mov	r2, r1
 800ad8c:	4601      	mov	r1, r0
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	f000 b802 	b.w	800ad98 <_calloc_r>
 800ad94:	20000028 	.word	0x20000028

0800ad98 <_calloc_r>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	fba1 5402 	umull	r5, r4, r1, r2
 800ad9e:	b934      	cbnz	r4, 800adae <_calloc_r+0x16>
 800ada0:	4629      	mov	r1, r5
 800ada2:	f000 f83f 	bl	800ae24 <_malloc_r>
 800ada6:	4606      	mov	r6, r0
 800ada8:	b928      	cbnz	r0, 800adb6 <_calloc_r+0x1e>
 800adaa:	4630      	mov	r0, r6
 800adac:	bd70      	pop	{r4, r5, r6, pc}
 800adae:	220c      	movs	r2, #12
 800adb0:	6002      	str	r2, [r0, #0]
 800adb2:	2600      	movs	r6, #0
 800adb4:	e7f9      	b.n	800adaa <_calloc_r+0x12>
 800adb6:	462a      	mov	r2, r5
 800adb8:	4621      	mov	r1, r4
 800adba:	f000 fac7 	bl	800b34c <memset>
 800adbe:	e7f4      	b.n	800adaa <_calloc_r+0x12>

0800adc0 <malloc>:
 800adc0:	4b02      	ldr	r3, [pc, #8]	@ (800adcc <malloc+0xc>)
 800adc2:	4601      	mov	r1, r0
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	f000 b82d 	b.w	800ae24 <_malloc_r>
 800adca:	bf00      	nop
 800adcc:	20000028 	.word	0x20000028

0800add0 <free>:
 800add0:	4b02      	ldr	r3, [pc, #8]	@ (800addc <free+0xc>)
 800add2:	4601      	mov	r1, r0
 800add4:	6818      	ldr	r0, [r3, #0]
 800add6:	f000 bb53 	b.w	800b480 <_free_r>
 800adda:	bf00      	nop
 800addc:	20000028 	.word	0x20000028

0800ade0 <sbrk_aligned>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	4e0f      	ldr	r6, [pc, #60]	@ (800ae20 <sbrk_aligned+0x40>)
 800ade4:	460c      	mov	r4, r1
 800ade6:	6831      	ldr	r1, [r6, #0]
 800ade8:	4605      	mov	r5, r0
 800adea:	b911      	cbnz	r1, 800adf2 <sbrk_aligned+0x12>
 800adec:	f000 faea 	bl	800b3c4 <_sbrk_r>
 800adf0:	6030      	str	r0, [r6, #0]
 800adf2:	4621      	mov	r1, r4
 800adf4:	4628      	mov	r0, r5
 800adf6:	f000 fae5 	bl	800b3c4 <_sbrk_r>
 800adfa:	1c43      	adds	r3, r0, #1
 800adfc:	d103      	bne.n	800ae06 <sbrk_aligned+0x26>
 800adfe:	f04f 34ff 	mov.w	r4, #4294967295
 800ae02:	4620      	mov	r0, r4
 800ae04:	bd70      	pop	{r4, r5, r6, pc}
 800ae06:	1cc4      	adds	r4, r0, #3
 800ae08:	f024 0403 	bic.w	r4, r4, #3
 800ae0c:	42a0      	cmp	r0, r4
 800ae0e:	d0f8      	beq.n	800ae02 <sbrk_aligned+0x22>
 800ae10:	1a21      	subs	r1, r4, r0
 800ae12:	4628      	mov	r0, r5
 800ae14:	f000 fad6 	bl	800b3c4 <_sbrk_r>
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d1f2      	bne.n	800ae02 <sbrk_aligned+0x22>
 800ae1c:	e7ef      	b.n	800adfe <sbrk_aligned+0x1e>
 800ae1e:	bf00      	nop
 800ae20:	20000c3c 	.word	0x20000c3c

0800ae24 <_malloc_r>:
 800ae24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae28:	1ccd      	adds	r5, r1, #3
 800ae2a:	f025 0503 	bic.w	r5, r5, #3
 800ae2e:	3508      	adds	r5, #8
 800ae30:	2d0c      	cmp	r5, #12
 800ae32:	bf38      	it	cc
 800ae34:	250c      	movcc	r5, #12
 800ae36:	2d00      	cmp	r5, #0
 800ae38:	4606      	mov	r6, r0
 800ae3a:	db01      	blt.n	800ae40 <_malloc_r+0x1c>
 800ae3c:	42a9      	cmp	r1, r5
 800ae3e:	d904      	bls.n	800ae4a <_malloc_r+0x26>
 800ae40:	230c      	movs	r3, #12
 800ae42:	6033      	str	r3, [r6, #0]
 800ae44:	2000      	movs	r0, #0
 800ae46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af20 <_malloc_r+0xfc>
 800ae4e:	f000 f869 	bl	800af24 <__malloc_lock>
 800ae52:	f8d8 3000 	ldr.w	r3, [r8]
 800ae56:	461c      	mov	r4, r3
 800ae58:	bb44      	cbnz	r4, 800aeac <_malloc_r+0x88>
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff ffbf 	bl	800ade0 <sbrk_aligned>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	4604      	mov	r4, r0
 800ae66:	d158      	bne.n	800af1a <_malloc_r+0xf6>
 800ae68:	f8d8 4000 	ldr.w	r4, [r8]
 800ae6c:	4627      	mov	r7, r4
 800ae6e:	2f00      	cmp	r7, #0
 800ae70:	d143      	bne.n	800aefa <_malloc_r+0xd6>
 800ae72:	2c00      	cmp	r4, #0
 800ae74:	d04b      	beq.n	800af0e <_malloc_r+0xea>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	4639      	mov	r1, r7
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	eb04 0903 	add.w	r9, r4, r3
 800ae80:	f000 faa0 	bl	800b3c4 <_sbrk_r>
 800ae84:	4581      	cmp	r9, r0
 800ae86:	d142      	bne.n	800af0e <_malloc_r+0xea>
 800ae88:	6821      	ldr	r1, [r4, #0]
 800ae8a:	1a6d      	subs	r5, r5, r1
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7ff ffa6 	bl	800ade0 <sbrk_aligned>
 800ae94:	3001      	adds	r0, #1
 800ae96:	d03a      	beq.n	800af0e <_malloc_r+0xea>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	442b      	add	r3, r5
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	bb62      	cbnz	r2, 800af00 <_malloc_r+0xdc>
 800aea6:	f8c8 7000 	str.w	r7, [r8]
 800aeaa:	e00f      	b.n	800aecc <_malloc_r+0xa8>
 800aeac:	6822      	ldr	r2, [r4, #0]
 800aeae:	1b52      	subs	r2, r2, r5
 800aeb0:	d420      	bmi.n	800aef4 <_malloc_r+0xd0>
 800aeb2:	2a0b      	cmp	r2, #11
 800aeb4:	d917      	bls.n	800aee6 <_malloc_r+0xc2>
 800aeb6:	1961      	adds	r1, r4, r5
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	6025      	str	r5, [r4, #0]
 800aebc:	bf18      	it	ne
 800aebe:	6059      	strne	r1, [r3, #4]
 800aec0:	6863      	ldr	r3, [r4, #4]
 800aec2:	bf08      	it	eq
 800aec4:	f8c8 1000 	streq.w	r1, [r8]
 800aec8:	5162      	str	r2, [r4, r5]
 800aeca:	604b      	str	r3, [r1, #4]
 800aecc:	4630      	mov	r0, r6
 800aece:	f000 f82f 	bl	800af30 <__malloc_unlock>
 800aed2:	f104 000b 	add.w	r0, r4, #11
 800aed6:	1d23      	adds	r3, r4, #4
 800aed8:	f020 0007 	bic.w	r0, r0, #7
 800aedc:	1ac2      	subs	r2, r0, r3
 800aede:	bf1c      	itt	ne
 800aee0:	1a1b      	subne	r3, r3, r0
 800aee2:	50a3      	strne	r3, [r4, r2]
 800aee4:	e7af      	b.n	800ae46 <_malloc_r+0x22>
 800aee6:	6862      	ldr	r2, [r4, #4]
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	bf0c      	ite	eq
 800aeec:	f8c8 2000 	streq.w	r2, [r8]
 800aef0:	605a      	strne	r2, [r3, #4]
 800aef2:	e7eb      	b.n	800aecc <_malloc_r+0xa8>
 800aef4:	4623      	mov	r3, r4
 800aef6:	6864      	ldr	r4, [r4, #4]
 800aef8:	e7ae      	b.n	800ae58 <_malloc_r+0x34>
 800aefa:	463c      	mov	r4, r7
 800aefc:	687f      	ldr	r7, [r7, #4]
 800aefe:	e7b6      	b.n	800ae6e <_malloc_r+0x4a>
 800af00:	461a      	mov	r2, r3
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	42a3      	cmp	r3, r4
 800af06:	d1fb      	bne.n	800af00 <_malloc_r+0xdc>
 800af08:	2300      	movs	r3, #0
 800af0a:	6053      	str	r3, [r2, #4]
 800af0c:	e7de      	b.n	800aecc <_malloc_r+0xa8>
 800af0e:	230c      	movs	r3, #12
 800af10:	6033      	str	r3, [r6, #0]
 800af12:	4630      	mov	r0, r6
 800af14:	f000 f80c 	bl	800af30 <__malloc_unlock>
 800af18:	e794      	b.n	800ae44 <_malloc_r+0x20>
 800af1a:	6005      	str	r5, [r0, #0]
 800af1c:	e7d6      	b.n	800aecc <_malloc_r+0xa8>
 800af1e:	bf00      	nop
 800af20:	20000c40 	.word	0x20000c40

0800af24 <__malloc_lock>:
 800af24:	4801      	ldr	r0, [pc, #4]	@ (800af2c <__malloc_lock+0x8>)
 800af26:	f000 ba9a 	b.w	800b45e <__retarget_lock_acquire_recursive>
 800af2a:	bf00      	nop
 800af2c:	20000d84 	.word	0x20000d84

0800af30 <__malloc_unlock>:
 800af30:	4801      	ldr	r0, [pc, #4]	@ (800af38 <__malloc_unlock+0x8>)
 800af32:	f000 ba95 	b.w	800b460 <__retarget_lock_release_recursive>
 800af36:	bf00      	nop
 800af38:	20000d84 	.word	0x20000d84

0800af3c <std>:
 800af3c:	2300      	movs	r3, #0
 800af3e:	b510      	push	{r4, lr}
 800af40:	4604      	mov	r4, r0
 800af42:	e9c0 3300 	strd	r3, r3, [r0]
 800af46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af4a:	6083      	str	r3, [r0, #8]
 800af4c:	8181      	strh	r1, [r0, #12]
 800af4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800af50:	81c2      	strh	r2, [r0, #14]
 800af52:	6183      	str	r3, [r0, #24]
 800af54:	4619      	mov	r1, r3
 800af56:	2208      	movs	r2, #8
 800af58:	305c      	adds	r0, #92	@ 0x5c
 800af5a:	f000 f9f7 	bl	800b34c <memset>
 800af5e:	4b0d      	ldr	r3, [pc, #52]	@ (800af94 <std+0x58>)
 800af60:	6263      	str	r3, [r4, #36]	@ 0x24
 800af62:	4b0d      	ldr	r3, [pc, #52]	@ (800af98 <std+0x5c>)
 800af64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af66:	4b0d      	ldr	r3, [pc, #52]	@ (800af9c <std+0x60>)
 800af68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af6a:	4b0d      	ldr	r3, [pc, #52]	@ (800afa0 <std+0x64>)
 800af6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800af6e:	4b0d      	ldr	r3, [pc, #52]	@ (800afa4 <std+0x68>)
 800af70:	6224      	str	r4, [r4, #32]
 800af72:	429c      	cmp	r4, r3
 800af74:	d006      	beq.n	800af84 <std+0x48>
 800af76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af7a:	4294      	cmp	r4, r2
 800af7c:	d002      	beq.n	800af84 <std+0x48>
 800af7e:	33d0      	adds	r3, #208	@ 0xd0
 800af80:	429c      	cmp	r4, r3
 800af82:	d105      	bne.n	800af90 <std+0x54>
 800af84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af8c:	f000 ba66 	b.w	800b45c <__retarget_lock_init_recursive>
 800af90:	bd10      	pop	{r4, pc}
 800af92:	bf00      	nop
 800af94:	0800b24d 	.word	0x0800b24d
 800af98:	0800b26f 	.word	0x0800b26f
 800af9c:	0800b2a7 	.word	0x0800b2a7
 800afa0:	0800b2cb 	.word	0x0800b2cb
 800afa4:	20000c44 	.word	0x20000c44

0800afa8 <stdio_exit_handler>:
 800afa8:	4a02      	ldr	r2, [pc, #8]	@ (800afb4 <stdio_exit_handler+0xc>)
 800afaa:	4903      	ldr	r1, [pc, #12]	@ (800afb8 <stdio_exit_handler+0x10>)
 800afac:	4803      	ldr	r0, [pc, #12]	@ (800afbc <stdio_exit_handler+0x14>)
 800afae:	f000 b869 	b.w	800b084 <_fwalk_sglue>
 800afb2:	bf00      	nop
 800afb4:	2000001c 	.word	0x2000001c
 800afb8:	0800be69 	.word	0x0800be69
 800afbc:	2000002c 	.word	0x2000002c

0800afc0 <cleanup_stdio>:
 800afc0:	6841      	ldr	r1, [r0, #4]
 800afc2:	4b0c      	ldr	r3, [pc, #48]	@ (800aff4 <cleanup_stdio+0x34>)
 800afc4:	4299      	cmp	r1, r3
 800afc6:	b510      	push	{r4, lr}
 800afc8:	4604      	mov	r4, r0
 800afca:	d001      	beq.n	800afd0 <cleanup_stdio+0x10>
 800afcc:	f000 ff4c 	bl	800be68 <_fflush_r>
 800afd0:	68a1      	ldr	r1, [r4, #8]
 800afd2:	4b09      	ldr	r3, [pc, #36]	@ (800aff8 <cleanup_stdio+0x38>)
 800afd4:	4299      	cmp	r1, r3
 800afd6:	d002      	beq.n	800afde <cleanup_stdio+0x1e>
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 ff45 	bl	800be68 <_fflush_r>
 800afde:	68e1      	ldr	r1, [r4, #12]
 800afe0:	4b06      	ldr	r3, [pc, #24]	@ (800affc <cleanup_stdio+0x3c>)
 800afe2:	4299      	cmp	r1, r3
 800afe4:	d004      	beq.n	800aff0 <cleanup_stdio+0x30>
 800afe6:	4620      	mov	r0, r4
 800afe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afec:	f000 bf3c 	b.w	800be68 <_fflush_r>
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	bf00      	nop
 800aff4:	20000c44 	.word	0x20000c44
 800aff8:	20000cac 	.word	0x20000cac
 800affc:	20000d14 	.word	0x20000d14

0800b000 <global_stdio_init.part.0>:
 800b000:	b510      	push	{r4, lr}
 800b002:	4b0b      	ldr	r3, [pc, #44]	@ (800b030 <global_stdio_init.part.0+0x30>)
 800b004:	4c0b      	ldr	r4, [pc, #44]	@ (800b034 <global_stdio_init.part.0+0x34>)
 800b006:	4a0c      	ldr	r2, [pc, #48]	@ (800b038 <global_stdio_init.part.0+0x38>)
 800b008:	601a      	str	r2, [r3, #0]
 800b00a:	4620      	mov	r0, r4
 800b00c:	2200      	movs	r2, #0
 800b00e:	2104      	movs	r1, #4
 800b010:	f7ff ff94 	bl	800af3c <std>
 800b014:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b018:	2201      	movs	r2, #1
 800b01a:	2109      	movs	r1, #9
 800b01c:	f7ff ff8e 	bl	800af3c <std>
 800b020:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b024:	2202      	movs	r2, #2
 800b026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b02a:	2112      	movs	r1, #18
 800b02c:	f7ff bf86 	b.w	800af3c <std>
 800b030:	20000d7c 	.word	0x20000d7c
 800b034:	20000c44 	.word	0x20000c44
 800b038:	0800afa9 	.word	0x0800afa9

0800b03c <__sfp_lock_acquire>:
 800b03c:	4801      	ldr	r0, [pc, #4]	@ (800b044 <__sfp_lock_acquire+0x8>)
 800b03e:	f000 ba0e 	b.w	800b45e <__retarget_lock_acquire_recursive>
 800b042:	bf00      	nop
 800b044:	20000d85 	.word	0x20000d85

0800b048 <__sfp_lock_release>:
 800b048:	4801      	ldr	r0, [pc, #4]	@ (800b050 <__sfp_lock_release+0x8>)
 800b04a:	f000 ba09 	b.w	800b460 <__retarget_lock_release_recursive>
 800b04e:	bf00      	nop
 800b050:	20000d85 	.word	0x20000d85

0800b054 <__sinit>:
 800b054:	b510      	push	{r4, lr}
 800b056:	4604      	mov	r4, r0
 800b058:	f7ff fff0 	bl	800b03c <__sfp_lock_acquire>
 800b05c:	6a23      	ldr	r3, [r4, #32]
 800b05e:	b11b      	cbz	r3, 800b068 <__sinit+0x14>
 800b060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b064:	f7ff bff0 	b.w	800b048 <__sfp_lock_release>
 800b068:	4b04      	ldr	r3, [pc, #16]	@ (800b07c <__sinit+0x28>)
 800b06a:	6223      	str	r3, [r4, #32]
 800b06c:	4b04      	ldr	r3, [pc, #16]	@ (800b080 <__sinit+0x2c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1f5      	bne.n	800b060 <__sinit+0xc>
 800b074:	f7ff ffc4 	bl	800b000 <global_stdio_init.part.0>
 800b078:	e7f2      	b.n	800b060 <__sinit+0xc>
 800b07a:	bf00      	nop
 800b07c:	0800afc1 	.word	0x0800afc1
 800b080:	20000d7c 	.word	0x20000d7c

0800b084 <_fwalk_sglue>:
 800b084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b088:	4607      	mov	r7, r0
 800b08a:	4688      	mov	r8, r1
 800b08c:	4614      	mov	r4, r2
 800b08e:	2600      	movs	r6, #0
 800b090:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b094:	f1b9 0901 	subs.w	r9, r9, #1
 800b098:	d505      	bpl.n	800b0a6 <_fwalk_sglue+0x22>
 800b09a:	6824      	ldr	r4, [r4, #0]
 800b09c:	2c00      	cmp	r4, #0
 800b09e:	d1f7      	bne.n	800b090 <_fwalk_sglue+0xc>
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a6:	89ab      	ldrh	r3, [r5, #12]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d907      	bls.n	800b0bc <_fwalk_sglue+0x38>
 800b0ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	d003      	beq.n	800b0bc <_fwalk_sglue+0x38>
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	47c0      	blx	r8
 800b0ba:	4306      	orrs	r6, r0
 800b0bc:	3568      	adds	r5, #104	@ 0x68
 800b0be:	e7e9      	b.n	800b094 <_fwalk_sglue+0x10>

0800b0c0 <iprintf>:
 800b0c0:	b40f      	push	{r0, r1, r2, r3}
 800b0c2:	b507      	push	{r0, r1, r2, lr}
 800b0c4:	4906      	ldr	r1, [pc, #24]	@ (800b0e0 <iprintf+0x20>)
 800b0c6:	ab04      	add	r3, sp, #16
 800b0c8:	6808      	ldr	r0, [r1, #0]
 800b0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ce:	6881      	ldr	r1, [r0, #8]
 800b0d0:	9301      	str	r3, [sp, #4]
 800b0d2:	f000 fba1 	bl	800b818 <_vfiprintf_r>
 800b0d6:	b003      	add	sp, #12
 800b0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0dc:	b004      	add	sp, #16
 800b0de:	4770      	bx	lr
 800b0e0:	20000028 	.word	0x20000028

0800b0e4 <setvbuf>:
 800b0e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0e8:	461d      	mov	r5, r3
 800b0ea:	4b57      	ldr	r3, [pc, #348]	@ (800b248 <setvbuf+0x164>)
 800b0ec:	681f      	ldr	r7, [r3, #0]
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	460e      	mov	r6, r1
 800b0f2:	4690      	mov	r8, r2
 800b0f4:	b127      	cbz	r7, 800b100 <setvbuf+0x1c>
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	b913      	cbnz	r3, 800b100 <setvbuf+0x1c>
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	f7ff ffaa 	bl	800b054 <__sinit>
 800b100:	f1b8 0f02 	cmp.w	r8, #2
 800b104:	d006      	beq.n	800b114 <setvbuf+0x30>
 800b106:	f1b8 0f01 	cmp.w	r8, #1
 800b10a:	f200 809a 	bhi.w	800b242 <setvbuf+0x15e>
 800b10e:	2d00      	cmp	r5, #0
 800b110:	f2c0 8097 	blt.w	800b242 <setvbuf+0x15e>
 800b114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b116:	07d9      	lsls	r1, r3, #31
 800b118:	d405      	bmi.n	800b126 <setvbuf+0x42>
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	059a      	lsls	r2, r3, #22
 800b11e:	d402      	bmi.n	800b126 <setvbuf+0x42>
 800b120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b122:	f000 f99c 	bl	800b45e <__retarget_lock_acquire_recursive>
 800b126:	4621      	mov	r1, r4
 800b128:	4638      	mov	r0, r7
 800b12a:	f000 fe9d 	bl	800be68 <_fflush_r>
 800b12e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b130:	b141      	cbz	r1, 800b144 <setvbuf+0x60>
 800b132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b136:	4299      	cmp	r1, r3
 800b138:	d002      	beq.n	800b140 <setvbuf+0x5c>
 800b13a:	4638      	mov	r0, r7
 800b13c:	f000 f9a0 	bl	800b480 <_free_r>
 800b140:	2300      	movs	r3, #0
 800b142:	6363      	str	r3, [r4, #52]	@ 0x34
 800b144:	2300      	movs	r3, #0
 800b146:	61a3      	str	r3, [r4, #24]
 800b148:	6063      	str	r3, [r4, #4]
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	061b      	lsls	r3, r3, #24
 800b14e:	d503      	bpl.n	800b158 <setvbuf+0x74>
 800b150:	6921      	ldr	r1, [r4, #16]
 800b152:	4638      	mov	r0, r7
 800b154:	f000 f994 	bl	800b480 <_free_r>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b15e:	f023 0303 	bic.w	r3, r3, #3
 800b162:	f1b8 0f02 	cmp.w	r8, #2
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	d061      	beq.n	800b22e <setvbuf+0x14a>
 800b16a:	ab01      	add	r3, sp, #4
 800b16c:	466a      	mov	r2, sp
 800b16e:	4621      	mov	r1, r4
 800b170:	4638      	mov	r0, r7
 800b172:	f000 fea1 	bl	800beb8 <__swhatbuf_r>
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	4318      	orrs	r0, r3
 800b17a:	81a0      	strh	r0, [r4, #12]
 800b17c:	bb2d      	cbnz	r5, 800b1ca <setvbuf+0xe6>
 800b17e:	9d00      	ldr	r5, [sp, #0]
 800b180:	4628      	mov	r0, r5
 800b182:	f7ff fe1d 	bl	800adc0 <malloc>
 800b186:	4606      	mov	r6, r0
 800b188:	2800      	cmp	r0, #0
 800b18a:	d152      	bne.n	800b232 <setvbuf+0x14e>
 800b18c:	f8dd 9000 	ldr.w	r9, [sp]
 800b190:	45a9      	cmp	r9, r5
 800b192:	d140      	bne.n	800b216 <setvbuf+0x132>
 800b194:	f04f 35ff 	mov.w	r5, #4294967295
 800b198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b19c:	f043 0202 	orr.w	r2, r3, #2
 800b1a0:	81a2      	strh	r2, [r4, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	60a2      	str	r2, [r4, #8]
 800b1a6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b1aa:	6022      	str	r2, [r4, #0]
 800b1ac:	6122      	str	r2, [r4, #16]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	6162      	str	r2, [r4, #20]
 800b1b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1b4:	07d6      	lsls	r6, r2, #31
 800b1b6:	d404      	bmi.n	800b1c2 <setvbuf+0xde>
 800b1b8:	0598      	lsls	r0, r3, #22
 800b1ba:	d402      	bmi.n	800b1c2 <setvbuf+0xde>
 800b1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1be:	f000 f94f 	bl	800b460 <__retarget_lock_release_recursive>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	b003      	add	sp, #12
 800b1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ca:	2e00      	cmp	r6, #0
 800b1cc:	d0d8      	beq.n	800b180 <setvbuf+0x9c>
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	b913      	cbnz	r3, 800b1d8 <setvbuf+0xf4>
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f7ff ff3e 	bl	800b054 <__sinit>
 800b1d8:	f1b8 0f01 	cmp.w	r8, #1
 800b1dc:	bf08      	it	eq
 800b1de:	89a3      	ldrheq	r3, [r4, #12]
 800b1e0:	6026      	str	r6, [r4, #0]
 800b1e2:	bf04      	itt	eq
 800b1e4:	f043 0301 	orreq.w	r3, r3, #1
 800b1e8:	81a3      	strheq	r3, [r4, #12]
 800b1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ee:	f013 0208 	ands.w	r2, r3, #8
 800b1f2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b1f6:	d01e      	beq.n	800b236 <setvbuf+0x152>
 800b1f8:	07d9      	lsls	r1, r3, #31
 800b1fa:	bf41      	itttt	mi
 800b1fc:	2200      	movmi	r2, #0
 800b1fe:	426d      	negmi	r5, r5
 800b200:	60a2      	strmi	r2, [r4, #8]
 800b202:	61a5      	strmi	r5, [r4, #24]
 800b204:	bf58      	it	pl
 800b206:	60a5      	strpl	r5, [r4, #8]
 800b208:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b20a:	07d2      	lsls	r2, r2, #31
 800b20c:	d401      	bmi.n	800b212 <setvbuf+0x12e>
 800b20e:	059b      	lsls	r3, r3, #22
 800b210:	d513      	bpl.n	800b23a <setvbuf+0x156>
 800b212:	2500      	movs	r5, #0
 800b214:	e7d5      	b.n	800b1c2 <setvbuf+0xde>
 800b216:	4648      	mov	r0, r9
 800b218:	f7ff fdd2 	bl	800adc0 <malloc>
 800b21c:	4606      	mov	r6, r0
 800b21e:	2800      	cmp	r0, #0
 800b220:	d0b8      	beq.n	800b194 <setvbuf+0xb0>
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	464d      	mov	r5, r9
 800b22c:	e7cf      	b.n	800b1ce <setvbuf+0xea>
 800b22e:	2500      	movs	r5, #0
 800b230:	e7b2      	b.n	800b198 <setvbuf+0xb4>
 800b232:	46a9      	mov	r9, r5
 800b234:	e7f5      	b.n	800b222 <setvbuf+0x13e>
 800b236:	60a2      	str	r2, [r4, #8]
 800b238:	e7e6      	b.n	800b208 <setvbuf+0x124>
 800b23a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b23c:	f000 f910 	bl	800b460 <__retarget_lock_release_recursive>
 800b240:	e7e7      	b.n	800b212 <setvbuf+0x12e>
 800b242:	f04f 35ff 	mov.w	r5, #4294967295
 800b246:	e7bc      	b.n	800b1c2 <setvbuf+0xde>
 800b248:	20000028 	.word	0x20000028

0800b24c <__sread>:
 800b24c:	b510      	push	{r4, lr}
 800b24e:	460c      	mov	r4, r1
 800b250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b254:	f000 f8a4 	bl	800b3a0 <_read_r>
 800b258:	2800      	cmp	r0, #0
 800b25a:	bfab      	itete	ge
 800b25c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b25e:	89a3      	ldrhlt	r3, [r4, #12]
 800b260:	181b      	addge	r3, r3, r0
 800b262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b266:	bfac      	ite	ge
 800b268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b26a:	81a3      	strhlt	r3, [r4, #12]
 800b26c:	bd10      	pop	{r4, pc}

0800b26e <__swrite>:
 800b26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b272:	461f      	mov	r7, r3
 800b274:	898b      	ldrh	r3, [r1, #12]
 800b276:	05db      	lsls	r3, r3, #23
 800b278:	4605      	mov	r5, r0
 800b27a:	460c      	mov	r4, r1
 800b27c:	4616      	mov	r6, r2
 800b27e:	d505      	bpl.n	800b28c <__swrite+0x1e>
 800b280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b284:	2302      	movs	r3, #2
 800b286:	2200      	movs	r2, #0
 800b288:	f000 f878 	bl	800b37c <_lseek_r>
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	4632      	mov	r2, r6
 800b29a:	463b      	mov	r3, r7
 800b29c:	4628      	mov	r0, r5
 800b29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	f000 b89f 	b.w	800b3e4 <_write_r>

0800b2a6 <__sseek>:
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ae:	f000 f865 	bl	800b37c <_lseek_r>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	bf15      	itete	ne
 800b2b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b2ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b2be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b2c2:	81a3      	strheq	r3, [r4, #12]
 800b2c4:	bf18      	it	ne
 800b2c6:	81a3      	strhne	r3, [r4, #12]
 800b2c8:	bd10      	pop	{r4, pc}

0800b2ca <__sclose>:
 800b2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ce:	f000 b845 	b.w	800b35c <_close_r>

0800b2d2 <_vsniprintf_r>:
 800b2d2:	b530      	push	{r4, r5, lr}
 800b2d4:	4614      	mov	r4, r2
 800b2d6:	2c00      	cmp	r4, #0
 800b2d8:	b09b      	sub	sp, #108	@ 0x6c
 800b2da:	4605      	mov	r5, r0
 800b2dc:	461a      	mov	r2, r3
 800b2de:	da05      	bge.n	800b2ec <_vsniprintf_r+0x1a>
 800b2e0:	238b      	movs	r3, #139	@ 0x8b
 800b2e2:	6003      	str	r3, [r0, #0]
 800b2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e8:	b01b      	add	sp, #108	@ 0x6c
 800b2ea:	bd30      	pop	{r4, r5, pc}
 800b2ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b2f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2f4:	f04f 0300 	mov.w	r3, #0
 800b2f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b2fa:	bf14      	ite	ne
 800b2fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b300:	4623      	moveq	r3, r4
 800b302:	9302      	str	r3, [sp, #8]
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b30a:	9100      	str	r1, [sp, #0]
 800b30c:	9104      	str	r1, [sp, #16]
 800b30e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b312:	4669      	mov	r1, sp
 800b314:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b316:	f000 f959 	bl	800b5cc <_svfiprintf_r>
 800b31a:	1c43      	adds	r3, r0, #1
 800b31c:	bfbc      	itt	lt
 800b31e:	238b      	movlt	r3, #139	@ 0x8b
 800b320:	602b      	strlt	r3, [r5, #0]
 800b322:	2c00      	cmp	r4, #0
 800b324:	d0e0      	beq.n	800b2e8 <_vsniprintf_r+0x16>
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	2200      	movs	r2, #0
 800b32a:	701a      	strb	r2, [r3, #0]
 800b32c:	e7dc      	b.n	800b2e8 <_vsniprintf_r+0x16>
	...

0800b330 <vsniprintf>:
 800b330:	b507      	push	{r0, r1, r2, lr}
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	4613      	mov	r3, r2
 800b336:	460a      	mov	r2, r1
 800b338:	4601      	mov	r1, r0
 800b33a:	4803      	ldr	r0, [pc, #12]	@ (800b348 <vsniprintf+0x18>)
 800b33c:	6800      	ldr	r0, [r0, #0]
 800b33e:	f7ff ffc8 	bl	800b2d2 <_vsniprintf_r>
 800b342:	b003      	add	sp, #12
 800b344:	f85d fb04 	ldr.w	pc, [sp], #4
 800b348:	20000028 	.word	0x20000028

0800b34c <memset>:
 800b34c:	4402      	add	r2, r0
 800b34e:	4603      	mov	r3, r0
 800b350:	4293      	cmp	r3, r2
 800b352:	d100      	bne.n	800b356 <memset+0xa>
 800b354:	4770      	bx	lr
 800b356:	f803 1b01 	strb.w	r1, [r3], #1
 800b35a:	e7f9      	b.n	800b350 <memset+0x4>

0800b35c <_close_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4d06      	ldr	r5, [pc, #24]	@ (800b378 <_close_r+0x1c>)
 800b360:	2300      	movs	r3, #0
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	602b      	str	r3, [r5, #0]
 800b368:	f7f7 fc24 	bl	8002bb4 <_close>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d102      	bne.n	800b376 <_close_r+0x1a>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	b103      	cbz	r3, 800b376 <_close_r+0x1a>
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	bd38      	pop	{r3, r4, r5, pc}
 800b378:	20000d80 	.word	0x20000d80

0800b37c <_lseek_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d07      	ldr	r5, [pc, #28]	@ (800b39c <_lseek_r+0x20>)
 800b380:	4604      	mov	r4, r0
 800b382:	4608      	mov	r0, r1
 800b384:	4611      	mov	r1, r2
 800b386:	2200      	movs	r2, #0
 800b388:	602a      	str	r2, [r5, #0]
 800b38a:	461a      	mov	r2, r3
 800b38c:	f7f7 fc39 	bl	8002c02 <_lseek>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	d102      	bne.n	800b39a <_lseek_r+0x1e>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	b103      	cbz	r3, 800b39a <_lseek_r+0x1e>
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	bd38      	pop	{r3, r4, r5, pc}
 800b39c:	20000d80 	.word	0x20000d80

0800b3a0 <_read_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4d07      	ldr	r5, [pc, #28]	@ (800b3c0 <_read_r+0x20>)
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	4608      	mov	r0, r1
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	602a      	str	r2, [r5, #0]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	f7f7 fbe3 	bl	8002b7a <_read>
 800b3b4:	1c43      	adds	r3, r0, #1
 800b3b6:	d102      	bne.n	800b3be <_read_r+0x1e>
 800b3b8:	682b      	ldr	r3, [r5, #0]
 800b3ba:	b103      	cbz	r3, 800b3be <_read_r+0x1e>
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	bd38      	pop	{r3, r4, r5, pc}
 800b3c0:	20000d80 	.word	0x20000d80

0800b3c4 <_sbrk_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d06      	ldr	r5, [pc, #24]	@ (800b3e0 <_sbrk_r+0x1c>)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	f7f7 fc24 	bl	8002c1c <_sbrk>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d102      	bne.n	800b3de <_sbrk_r+0x1a>
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	b103      	cbz	r3, 800b3de <_sbrk_r+0x1a>
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	20000d80 	.word	0x20000d80

0800b3e4 <_write_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4d07      	ldr	r5, [pc, #28]	@ (800b404 <_write_r+0x20>)
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	4608      	mov	r0, r1
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	602a      	str	r2, [r5, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	f7f6 f804 	bl	8001400 <_write>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_write_r+0x1e>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_write_r+0x1e>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	20000d80 	.word	0x20000d80

0800b408 <__errno>:
 800b408:	4b01      	ldr	r3, [pc, #4]	@ (800b410 <__errno+0x8>)
 800b40a:	6818      	ldr	r0, [r3, #0]
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	20000028 	.word	0x20000028

0800b414 <__libc_init_array>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4d0d      	ldr	r5, [pc, #52]	@ (800b44c <__libc_init_array+0x38>)
 800b418:	4c0d      	ldr	r4, [pc, #52]	@ (800b450 <__libc_init_array+0x3c>)
 800b41a:	1b64      	subs	r4, r4, r5
 800b41c:	10a4      	asrs	r4, r4, #2
 800b41e:	2600      	movs	r6, #0
 800b420:	42a6      	cmp	r6, r4
 800b422:	d109      	bne.n	800b438 <__libc_init_array+0x24>
 800b424:	4d0b      	ldr	r5, [pc, #44]	@ (800b454 <__libc_init_array+0x40>)
 800b426:	4c0c      	ldr	r4, [pc, #48]	@ (800b458 <__libc_init_array+0x44>)
 800b428:	f000 feae 	bl	800c188 <_init>
 800b42c:	1b64      	subs	r4, r4, r5
 800b42e:	10a4      	asrs	r4, r4, #2
 800b430:	2600      	movs	r6, #0
 800b432:	42a6      	cmp	r6, r4
 800b434:	d105      	bne.n	800b442 <__libc_init_array+0x2e>
 800b436:	bd70      	pop	{r4, r5, r6, pc}
 800b438:	f855 3b04 	ldr.w	r3, [r5], #4
 800b43c:	4798      	blx	r3
 800b43e:	3601      	adds	r6, #1
 800b440:	e7ee      	b.n	800b420 <__libc_init_array+0xc>
 800b442:	f855 3b04 	ldr.w	r3, [r5], #4
 800b446:	4798      	blx	r3
 800b448:	3601      	adds	r6, #1
 800b44a:	e7f2      	b.n	800b432 <__libc_init_array+0x1e>
 800b44c:	0800c7c4 	.word	0x0800c7c4
 800b450:	0800c7c4 	.word	0x0800c7c4
 800b454:	0800c7c4 	.word	0x0800c7c4
 800b458:	0800c7c8 	.word	0x0800c7c8

0800b45c <__retarget_lock_init_recursive>:
 800b45c:	4770      	bx	lr

0800b45e <__retarget_lock_acquire_recursive>:
 800b45e:	4770      	bx	lr

0800b460 <__retarget_lock_release_recursive>:
 800b460:	4770      	bx	lr

0800b462 <memcpy>:
 800b462:	440a      	add	r2, r1
 800b464:	4291      	cmp	r1, r2
 800b466:	f100 33ff 	add.w	r3, r0, #4294967295
 800b46a:	d100      	bne.n	800b46e <memcpy+0xc>
 800b46c:	4770      	bx	lr
 800b46e:	b510      	push	{r4, lr}
 800b470:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b474:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b478:	4291      	cmp	r1, r2
 800b47a:	d1f9      	bne.n	800b470 <memcpy+0xe>
 800b47c:	bd10      	pop	{r4, pc}
	...

0800b480 <_free_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4605      	mov	r5, r0
 800b484:	2900      	cmp	r1, #0
 800b486:	d041      	beq.n	800b50c <_free_r+0x8c>
 800b488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b48c:	1f0c      	subs	r4, r1, #4
 800b48e:	2b00      	cmp	r3, #0
 800b490:	bfb8      	it	lt
 800b492:	18e4      	addlt	r4, r4, r3
 800b494:	f7ff fd46 	bl	800af24 <__malloc_lock>
 800b498:	4a1d      	ldr	r2, [pc, #116]	@ (800b510 <_free_r+0x90>)
 800b49a:	6813      	ldr	r3, [r2, #0]
 800b49c:	b933      	cbnz	r3, 800b4ac <_free_r+0x2c>
 800b49e:	6063      	str	r3, [r4, #4]
 800b4a0:	6014      	str	r4, [r2, #0]
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4a8:	f7ff bd42 	b.w	800af30 <__malloc_unlock>
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	d908      	bls.n	800b4c2 <_free_r+0x42>
 800b4b0:	6820      	ldr	r0, [r4, #0]
 800b4b2:	1821      	adds	r1, r4, r0
 800b4b4:	428b      	cmp	r3, r1
 800b4b6:	bf01      	itttt	eq
 800b4b8:	6819      	ldreq	r1, [r3, #0]
 800b4ba:	685b      	ldreq	r3, [r3, #4]
 800b4bc:	1809      	addeq	r1, r1, r0
 800b4be:	6021      	streq	r1, [r4, #0]
 800b4c0:	e7ed      	b.n	800b49e <_free_r+0x1e>
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	b10b      	cbz	r3, 800b4cc <_free_r+0x4c>
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	d9fa      	bls.n	800b4c2 <_free_r+0x42>
 800b4cc:	6811      	ldr	r1, [r2, #0]
 800b4ce:	1850      	adds	r0, r2, r1
 800b4d0:	42a0      	cmp	r0, r4
 800b4d2:	d10b      	bne.n	800b4ec <_free_r+0x6c>
 800b4d4:	6820      	ldr	r0, [r4, #0]
 800b4d6:	4401      	add	r1, r0
 800b4d8:	1850      	adds	r0, r2, r1
 800b4da:	4283      	cmp	r3, r0
 800b4dc:	6011      	str	r1, [r2, #0]
 800b4de:	d1e0      	bne.n	800b4a2 <_free_r+0x22>
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	6053      	str	r3, [r2, #4]
 800b4e6:	4408      	add	r0, r1
 800b4e8:	6010      	str	r0, [r2, #0]
 800b4ea:	e7da      	b.n	800b4a2 <_free_r+0x22>
 800b4ec:	d902      	bls.n	800b4f4 <_free_r+0x74>
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	602b      	str	r3, [r5, #0]
 800b4f2:	e7d6      	b.n	800b4a2 <_free_r+0x22>
 800b4f4:	6820      	ldr	r0, [r4, #0]
 800b4f6:	1821      	adds	r1, r4, r0
 800b4f8:	428b      	cmp	r3, r1
 800b4fa:	bf04      	itt	eq
 800b4fc:	6819      	ldreq	r1, [r3, #0]
 800b4fe:	685b      	ldreq	r3, [r3, #4]
 800b500:	6063      	str	r3, [r4, #4]
 800b502:	bf04      	itt	eq
 800b504:	1809      	addeq	r1, r1, r0
 800b506:	6021      	streq	r1, [r4, #0]
 800b508:	6054      	str	r4, [r2, #4]
 800b50a:	e7ca      	b.n	800b4a2 <_free_r+0x22>
 800b50c:	bd38      	pop	{r3, r4, r5, pc}
 800b50e:	bf00      	nop
 800b510:	20000c40 	.word	0x20000c40

0800b514 <__ssputs_r>:
 800b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	688e      	ldr	r6, [r1, #8]
 800b51a:	461f      	mov	r7, r3
 800b51c:	42be      	cmp	r6, r7
 800b51e:	680b      	ldr	r3, [r1, #0]
 800b520:	4682      	mov	sl, r0
 800b522:	460c      	mov	r4, r1
 800b524:	4690      	mov	r8, r2
 800b526:	d82d      	bhi.n	800b584 <__ssputs_r+0x70>
 800b528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b52c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b530:	d026      	beq.n	800b580 <__ssputs_r+0x6c>
 800b532:	6965      	ldr	r5, [r4, #20]
 800b534:	6909      	ldr	r1, [r1, #16]
 800b536:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b53a:	eba3 0901 	sub.w	r9, r3, r1
 800b53e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b542:	1c7b      	adds	r3, r7, #1
 800b544:	444b      	add	r3, r9
 800b546:	106d      	asrs	r5, r5, #1
 800b548:	429d      	cmp	r5, r3
 800b54a:	bf38      	it	cc
 800b54c:	461d      	movcc	r5, r3
 800b54e:	0553      	lsls	r3, r2, #21
 800b550:	d527      	bpl.n	800b5a2 <__ssputs_r+0x8e>
 800b552:	4629      	mov	r1, r5
 800b554:	f7ff fc66 	bl	800ae24 <_malloc_r>
 800b558:	4606      	mov	r6, r0
 800b55a:	b360      	cbz	r0, 800b5b6 <__ssputs_r+0xa2>
 800b55c:	6921      	ldr	r1, [r4, #16]
 800b55e:	464a      	mov	r2, r9
 800b560:	f7ff ff7f 	bl	800b462 <memcpy>
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b56e:	81a3      	strh	r3, [r4, #12]
 800b570:	6126      	str	r6, [r4, #16]
 800b572:	6165      	str	r5, [r4, #20]
 800b574:	444e      	add	r6, r9
 800b576:	eba5 0509 	sub.w	r5, r5, r9
 800b57a:	6026      	str	r6, [r4, #0]
 800b57c:	60a5      	str	r5, [r4, #8]
 800b57e:	463e      	mov	r6, r7
 800b580:	42be      	cmp	r6, r7
 800b582:	d900      	bls.n	800b586 <__ssputs_r+0x72>
 800b584:	463e      	mov	r6, r7
 800b586:	6820      	ldr	r0, [r4, #0]
 800b588:	4632      	mov	r2, r6
 800b58a:	4641      	mov	r1, r8
 800b58c:	f000 fd8a 	bl	800c0a4 <memmove>
 800b590:	68a3      	ldr	r3, [r4, #8]
 800b592:	1b9b      	subs	r3, r3, r6
 800b594:	60a3      	str	r3, [r4, #8]
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	4433      	add	r3, r6
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	2000      	movs	r0, #0
 800b59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	f000 fdba 	bl	800c11c <_realloc_r>
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d1e0      	bne.n	800b570 <__ssputs_r+0x5c>
 800b5ae:	6921      	ldr	r1, [r4, #16]
 800b5b0:	4650      	mov	r0, sl
 800b5b2:	f7ff ff65 	bl	800b480 <_free_r>
 800b5b6:	230c      	movs	r3, #12
 800b5b8:	f8ca 3000 	str.w	r3, [sl]
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	e7e9      	b.n	800b59e <__ssputs_r+0x8a>
	...

0800b5cc <_svfiprintf_r>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	4698      	mov	r8, r3
 800b5d2:	898b      	ldrh	r3, [r1, #12]
 800b5d4:	061b      	lsls	r3, r3, #24
 800b5d6:	b09d      	sub	sp, #116	@ 0x74
 800b5d8:	4607      	mov	r7, r0
 800b5da:	460d      	mov	r5, r1
 800b5dc:	4614      	mov	r4, r2
 800b5de:	d510      	bpl.n	800b602 <_svfiprintf_r+0x36>
 800b5e0:	690b      	ldr	r3, [r1, #16]
 800b5e2:	b973      	cbnz	r3, 800b602 <_svfiprintf_r+0x36>
 800b5e4:	2140      	movs	r1, #64	@ 0x40
 800b5e6:	f7ff fc1d 	bl	800ae24 <_malloc_r>
 800b5ea:	6028      	str	r0, [r5, #0]
 800b5ec:	6128      	str	r0, [r5, #16]
 800b5ee:	b930      	cbnz	r0, 800b5fe <_svfiprintf_r+0x32>
 800b5f0:	230c      	movs	r3, #12
 800b5f2:	603b      	str	r3, [r7, #0]
 800b5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f8:	b01d      	add	sp, #116	@ 0x74
 800b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fe:	2340      	movs	r3, #64	@ 0x40
 800b600:	616b      	str	r3, [r5, #20]
 800b602:	2300      	movs	r3, #0
 800b604:	9309      	str	r3, [sp, #36]	@ 0x24
 800b606:	2320      	movs	r3, #32
 800b608:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b60c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b610:	2330      	movs	r3, #48	@ 0x30
 800b612:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7b0 <_svfiprintf_r+0x1e4>
 800b616:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b61a:	f04f 0901 	mov.w	r9, #1
 800b61e:	4623      	mov	r3, r4
 800b620:	469a      	mov	sl, r3
 800b622:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b626:	b10a      	cbz	r2, 800b62c <_svfiprintf_r+0x60>
 800b628:	2a25      	cmp	r2, #37	@ 0x25
 800b62a:	d1f9      	bne.n	800b620 <_svfiprintf_r+0x54>
 800b62c:	ebba 0b04 	subs.w	fp, sl, r4
 800b630:	d00b      	beq.n	800b64a <_svfiprintf_r+0x7e>
 800b632:	465b      	mov	r3, fp
 800b634:	4622      	mov	r2, r4
 800b636:	4629      	mov	r1, r5
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff ff6b 	bl	800b514 <__ssputs_r>
 800b63e:	3001      	adds	r0, #1
 800b640:	f000 80a7 	beq.w	800b792 <_svfiprintf_r+0x1c6>
 800b644:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b646:	445a      	add	r2, fp
 800b648:	9209      	str	r2, [sp, #36]	@ 0x24
 800b64a:	f89a 3000 	ldrb.w	r3, [sl]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 809f 	beq.w	800b792 <_svfiprintf_r+0x1c6>
 800b654:	2300      	movs	r3, #0
 800b656:	f04f 32ff 	mov.w	r2, #4294967295
 800b65a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b65e:	f10a 0a01 	add.w	sl, sl, #1
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	9307      	str	r3, [sp, #28]
 800b666:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b66a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b66c:	4654      	mov	r4, sl
 800b66e:	2205      	movs	r2, #5
 800b670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b674:	484e      	ldr	r0, [pc, #312]	@ (800b7b0 <_svfiprintf_r+0x1e4>)
 800b676:	f7f4 fdab 	bl	80001d0 <memchr>
 800b67a:	9a04      	ldr	r2, [sp, #16]
 800b67c:	b9d8      	cbnz	r0, 800b6b6 <_svfiprintf_r+0xea>
 800b67e:	06d0      	lsls	r0, r2, #27
 800b680:	bf44      	itt	mi
 800b682:	2320      	movmi	r3, #32
 800b684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b688:	0711      	lsls	r1, r2, #28
 800b68a:	bf44      	itt	mi
 800b68c:	232b      	movmi	r3, #43	@ 0x2b
 800b68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b692:	f89a 3000 	ldrb.w	r3, [sl]
 800b696:	2b2a      	cmp	r3, #42	@ 0x2a
 800b698:	d015      	beq.n	800b6c6 <_svfiprintf_r+0xfa>
 800b69a:	9a07      	ldr	r2, [sp, #28]
 800b69c:	4654      	mov	r4, sl
 800b69e:	2000      	movs	r0, #0
 800b6a0:	f04f 0c0a 	mov.w	ip, #10
 800b6a4:	4621      	mov	r1, r4
 800b6a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6aa:	3b30      	subs	r3, #48	@ 0x30
 800b6ac:	2b09      	cmp	r3, #9
 800b6ae:	d94b      	bls.n	800b748 <_svfiprintf_r+0x17c>
 800b6b0:	b1b0      	cbz	r0, 800b6e0 <_svfiprintf_r+0x114>
 800b6b2:	9207      	str	r2, [sp, #28]
 800b6b4:	e014      	b.n	800b6e0 <_svfiprintf_r+0x114>
 800b6b6:	eba0 0308 	sub.w	r3, r0, r8
 800b6ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	46a2      	mov	sl, r4
 800b6c4:	e7d2      	b.n	800b66c <_svfiprintf_r+0xa0>
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	1d19      	adds	r1, r3, #4
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	9103      	str	r1, [sp, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bfbb      	ittet	lt
 800b6d2:	425b      	neglt	r3, r3
 800b6d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6d8:	9307      	strge	r3, [sp, #28]
 800b6da:	9307      	strlt	r3, [sp, #28]
 800b6dc:	bfb8      	it	lt
 800b6de:	9204      	strlt	r2, [sp, #16]
 800b6e0:	7823      	ldrb	r3, [r4, #0]
 800b6e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6e4:	d10a      	bne.n	800b6fc <_svfiprintf_r+0x130>
 800b6e6:	7863      	ldrb	r3, [r4, #1]
 800b6e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ea:	d132      	bne.n	800b752 <_svfiprintf_r+0x186>
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	1d1a      	adds	r2, r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	9203      	str	r2, [sp, #12]
 800b6f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6f8:	3402      	adds	r4, #2
 800b6fa:	9305      	str	r3, [sp, #20]
 800b6fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7c0 <_svfiprintf_r+0x1f4>
 800b700:	7821      	ldrb	r1, [r4, #0]
 800b702:	2203      	movs	r2, #3
 800b704:	4650      	mov	r0, sl
 800b706:	f7f4 fd63 	bl	80001d0 <memchr>
 800b70a:	b138      	cbz	r0, 800b71c <_svfiprintf_r+0x150>
 800b70c:	9b04      	ldr	r3, [sp, #16]
 800b70e:	eba0 000a 	sub.w	r0, r0, sl
 800b712:	2240      	movs	r2, #64	@ 0x40
 800b714:	4082      	lsls	r2, r0
 800b716:	4313      	orrs	r3, r2
 800b718:	3401      	adds	r4, #1
 800b71a:	9304      	str	r3, [sp, #16]
 800b71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b720:	4824      	ldr	r0, [pc, #144]	@ (800b7b4 <_svfiprintf_r+0x1e8>)
 800b722:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b726:	2206      	movs	r2, #6
 800b728:	f7f4 fd52 	bl	80001d0 <memchr>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d036      	beq.n	800b79e <_svfiprintf_r+0x1d2>
 800b730:	4b21      	ldr	r3, [pc, #132]	@ (800b7b8 <_svfiprintf_r+0x1ec>)
 800b732:	bb1b      	cbnz	r3, 800b77c <_svfiprintf_r+0x1b0>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	3307      	adds	r3, #7
 800b738:	f023 0307 	bic.w	r3, r3, #7
 800b73c:	3308      	adds	r3, #8
 800b73e:	9303      	str	r3, [sp, #12]
 800b740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b742:	4433      	add	r3, r6
 800b744:	9309      	str	r3, [sp, #36]	@ 0x24
 800b746:	e76a      	b.n	800b61e <_svfiprintf_r+0x52>
 800b748:	fb0c 3202 	mla	r2, ip, r2, r3
 800b74c:	460c      	mov	r4, r1
 800b74e:	2001      	movs	r0, #1
 800b750:	e7a8      	b.n	800b6a4 <_svfiprintf_r+0xd8>
 800b752:	2300      	movs	r3, #0
 800b754:	3401      	adds	r4, #1
 800b756:	9305      	str	r3, [sp, #20]
 800b758:	4619      	mov	r1, r3
 800b75a:	f04f 0c0a 	mov.w	ip, #10
 800b75e:	4620      	mov	r0, r4
 800b760:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b764:	3a30      	subs	r2, #48	@ 0x30
 800b766:	2a09      	cmp	r2, #9
 800b768:	d903      	bls.n	800b772 <_svfiprintf_r+0x1a6>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d0c6      	beq.n	800b6fc <_svfiprintf_r+0x130>
 800b76e:	9105      	str	r1, [sp, #20]
 800b770:	e7c4      	b.n	800b6fc <_svfiprintf_r+0x130>
 800b772:	fb0c 2101 	mla	r1, ip, r1, r2
 800b776:	4604      	mov	r4, r0
 800b778:	2301      	movs	r3, #1
 800b77a:	e7f0      	b.n	800b75e <_svfiprintf_r+0x192>
 800b77c:	ab03      	add	r3, sp, #12
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	462a      	mov	r2, r5
 800b782:	4b0e      	ldr	r3, [pc, #56]	@ (800b7bc <_svfiprintf_r+0x1f0>)
 800b784:	a904      	add	r1, sp, #16
 800b786:	4638      	mov	r0, r7
 800b788:	f3af 8000 	nop.w
 800b78c:	1c42      	adds	r2, r0, #1
 800b78e:	4606      	mov	r6, r0
 800b790:	d1d6      	bne.n	800b740 <_svfiprintf_r+0x174>
 800b792:	89ab      	ldrh	r3, [r5, #12]
 800b794:	065b      	lsls	r3, r3, #25
 800b796:	f53f af2d 	bmi.w	800b5f4 <_svfiprintf_r+0x28>
 800b79a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b79c:	e72c      	b.n	800b5f8 <_svfiprintf_r+0x2c>
 800b79e:	ab03      	add	r3, sp, #12
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	462a      	mov	r2, r5
 800b7a4:	4b05      	ldr	r3, [pc, #20]	@ (800b7bc <_svfiprintf_r+0x1f0>)
 800b7a6:	a904      	add	r1, sp, #16
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f000 f9bb 	bl	800bb24 <_printf_i>
 800b7ae:	e7ed      	b.n	800b78c <_svfiprintf_r+0x1c0>
 800b7b0:	0800c788 	.word	0x0800c788
 800b7b4:	0800c792 	.word	0x0800c792
 800b7b8:	00000000 	.word	0x00000000
 800b7bc:	0800b515 	.word	0x0800b515
 800b7c0:	0800c78e 	.word	0x0800c78e

0800b7c4 <__sfputc_r>:
 800b7c4:	6893      	ldr	r3, [r2, #8]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	b410      	push	{r4}
 800b7cc:	6093      	str	r3, [r2, #8]
 800b7ce:	da08      	bge.n	800b7e2 <__sfputc_r+0x1e>
 800b7d0:	6994      	ldr	r4, [r2, #24]
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	db01      	blt.n	800b7da <__sfputc_r+0x16>
 800b7d6:	290a      	cmp	r1, #10
 800b7d8:	d103      	bne.n	800b7e2 <__sfputc_r+0x1e>
 800b7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7de:	f000 bbcd 	b.w	800bf7c <__swbuf_r>
 800b7e2:	6813      	ldr	r3, [r2, #0]
 800b7e4:	1c58      	adds	r0, r3, #1
 800b7e6:	6010      	str	r0, [r2, #0]
 800b7e8:	7019      	strb	r1, [r3, #0]
 800b7ea:	4608      	mov	r0, r1
 800b7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <__sfputs_r>:
 800b7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	460f      	mov	r7, r1
 800b7f8:	4614      	mov	r4, r2
 800b7fa:	18d5      	adds	r5, r2, r3
 800b7fc:	42ac      	cmp	r4, r5
 800b7fe:	d101      	bne.n	800b804 <__sfputs_r+0x12>
 800b800:	2000      	movs	r0, #0
 800b802:	e007      	b.n	800b814 <__sfputs_r+0x22>
 800b804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b808:	463a      	mov	r2, r7
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7ff ffda 	bl	800b7c4 <__sfputc_r>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d1f3      	bne.n	800b7fc <__sfputs_r+0xa>
 800b814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b818 <_vfiprintf_r>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	460d      	mov	r5, r1
 800b81e:	b09d      	sub	sp, #116	@ 0x74
 800b820:	4614      	mov	r4, r2
 800b822:	4698      	mov	r8, r3
 800b824:	4606      	mov	r6, r0
 800b826:	b118      	cbz	r0, 800b830 <_vfiprintf_r+0x18>
 800b828:	6a03      	ldr	r3, [r0, #32]
 800b82a:	b90b      	cbnz	r3, 800b830 <_vfiprintf_r+0x18>
 800b82c:	f7ff fc12 	bl	800b054 <__sinit>
 800b830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b832:	07d9      	lsls	r1, r3, #31
 800b834:	d405      	bmi.n	800b842 <_vfiprintf_r+0x2a>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	059a      	lsls	r2, r3, #22
 800b83a:	d402      	bmi.n	800b842 <_vfiprintf_r+0x2a>
 800b83c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b83e:	f7ff fe0e 	bl	800b45e <__retarget_lock_acquire_recursive>
 800b842:	89ab      	ldrh	r3, [r5, #12]
 800b844:	071b      	lsls	r3, r3, #28
 800b846:	d501      	bpl.n	800b84c <_vfiprintf_r+0x34>
 800b848:	692b      	ldr	r3, [r5, #16]
 800b84a:	b99b      	cbnz	r3, 800b874 <_vfiprintf_r+0x5c>
 800b84c:	4629      	mov	r1, r5
 800b84e:	4630      	mov	r0, r6
 800b850:	f000 fbd2 	bl	800bff8 <__swsetup_r>
 800b854:	b170      	cbz	r0, 800b874 <_vfiprintf_r+0x5c>
 800b856:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b858:	07dc      	lsls	r4, r3, #31
 800b85a:	d504      	bpl.n	800b866 <_vfiprintf_r+0x4e>
 800b85c:	f04f 30ff 	mov.w	r0, #4294967295
 800b860:	b01d      	add	sp, #116	@ 0x74
 800b862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b866:	89ab      	ldrh	r3, [r5, #12]
 800b868:	0598      	lsls	r0, r3, #22
 800b86a:	d4f7      	bmi.n	800b85c <_vfiprintf_r+0x44>
 800b86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b86e:	f7ff fdf7 	bl	800b460 <__retarget_lock_release_recursive>
 800b872:	e7f3      	b.n	800b85c <_vfiprintf_r+0x44>
 800b874:	2300      	movs	r3, #0
 800b876:	9309      	str	r3, [sp, #36]	@ 0x24
 800b878:	2320      	movs	r3, #32
 800b87a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b87e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b882:	2330      	movs	r3, #48	@ 0x30
 800b884:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ba34 <_vfiprintf_r+0x21c>
 800b888:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b88c:	f04f 0901 	mov.w	r9, #1
 800b890:	4623      	mov	r3, r4
 800b892:	469a      	mov	sl, r3
 800b894:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b898:	b10a      	cbz	r2, 800b89e <_vfiprintf_r+0x86>
 800b89a:	2a25      	cmp	r2, #37	@ 0x25
 800b89c:	d1f9      	bne.n	800b892 <_vfiprintf_r+0x7a>
 800b89e:	ebba 0b04 	subs.w	fp, sl, r4
 800b8a2:	d00b      	beq.n	800b8bc <_vfiprintf_r+0xa4>
 800b8a4:	465b      	mov	r3, fp
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f7ff ffa1 	bl	800b7f2 <__sfputs_r>
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	f000 80a7 	beq.w	800ba04 <_vfiprintf_r+0x1ec>
 800b8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8b8:	445a      	add	r2, fp
 800b8ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 809f 	beq.w	800ba04 <_vfiprintf_r+0x1ec>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d0:	f10a 0a01 	add.w	sl, sl, #1
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	9307      	str	r3, [sp, #28]
 800b8d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8de:	4654      	mov	r4, sl
 800b8e0:	2205      	movs	r2, #5
 800b8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e6:	4853      	ldr	r0, [pc, #332]	@ (800ba34 <_vfiprintf_r+0x21c>)
 800b8e8:	f7f4 fc72 	bl	80001d0 <memchr>
 800b8ec:	9a04      	ldr	r2, [sp, #16]
 800b8ee:	b9d8      	cbnz	r0, 800b928 <_vfiprintf_r+0x110>
 800b8f0:	06d1      	lsls	r1, r2, #27
 800b8f2:	bf44      	itt	mi
 800b8f4:	2320      	movmi	r3, #32
 800b8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8fa:	0713      	lsls	r3, r2, #28
 800b8fc:	bf44      	itt	mi
 800b8fe:	232b      	movmi	r3, #43	@ 0x2b
 800b900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b904:	f89a 3000 	ldrb.w	r3, [sl]
 800b908:	2b2a      	cmp	r3, #42	@ 0x2a
 800b90a:	d015      	beq.n	800b938 <_vfiprintf_r+0x120>
 800b90c:	9a07      	ldr	r2, [sp, #28]
 800b90e:	4654      	mov	r4, sl
 800b910:	2000      	movs	r0, #0
 800b912:	f04f 0c0a 	mov.w	ip, #10
 800b916:	4621      	mov	r1, r4
 800b918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b91c:	3b30      	subs	r3, #48	@ 0x30
 800b91e:	2b09      	cmp	r3, #9
 800b920:	d94b      	bls.n	800b9ba <_vfiprintf_r+0x1a2>
 800b922:	b1b0      	cbz	r0, 800b952 <_vfiprintf_r+0x13a>
 800b924:	9207      	str	r2, [sp, #28]
 800b926:	e014      	b.n	800b952 <_vfiprintf_r+0x13a>
 800b928:	eba0 0308 	sub.w	r3, r0, r8
 800b92c:	fa09 f303 	lsl.w	r3, r9, r3
 800b930:	4313      	orrs	r3, r2
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	46a2      	mov	sl, r4
 800b936:	e7d2      	b.n	800b8de <_vfiprintf_r+0xc6>
 800b938:	9b03      	ldr	r3, [sp, #12]
 800b93a:	1d19      	adds	r1, r3, #4
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	9103      	str	r1, [sp, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	bfbb      	ittet	lt
 800b944:	425b      	neglt	r3, r3
 800b946:	f042 0202 	orrlt.w	r2, r2, #2
 800b94a:	9307      	strge	r3, [sp, #28]
 800b94c:	9307      	strlt	r3, [sp, #28]
 800b94e:	bfb8      	it	lt
 800b950:	9204      	strlt	r2, [sp, #16]
 800b952:	7823      	ldrb	r3, [r4, #0]
 800b954:	2b2e      	cmp	r3, #46	@ 0x2e
 800b956:	d10a      	bne.n	800b96e <_vfiprintf_r+0x156>
 800b958:	7863      	ldrb	r3, [r4, #1]
 800b95a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b95c:	d132      	bne.n	800b9c4 <_vfiprintf_r+0x1ac>
 800b95e:	9b03      	ldr	r3, [sp, #12]
 800b960:	1d1a      	adds	r2, r3, #4
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	9203      	str	r2, [sp, #12]
 800b966:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b96a:	3402      	adds	r4, #2
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ba44 <_vfiprintf_r+0x22c>
 800b972:	7821      	ldrb	r1, [r4, #0]
 800b974:	2203      	movs	r2, #3
 800b976:	4650      	mov	r0, sl
 800b978:	f7f4 fc2a 	bl	80001d0 <memchr>
 800b97c:	b138      	cbz	r0, 800b98e <_vfiprintf_r+0x176>
 800b97e:	9b04      	ldr	r3, [sp, #16]
 800b980:	eba0 000a 	sub.w	r0, r0, sl
 800b984:	2240      	movs	r2, #64	@ 0x40
 800b986:	4082      	lsls	r2, r0
 800b988:	4313      	orrs	r3, r2
 800b98a:	3401      	adds	r4, #1
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b992:	4829      	ldr	r0, [pc, #164]	@ (800ba38 <_vfiprintf_r+0x220>)
 800b994:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b998:	2206      	movs	r2, #6
 800b99a:	f7f4 fc19 	bl	80001d0 <memchr>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d03f      	beq.n	800ba22 <_vfiprintf_r+0x20a>
 800b9a2:	4b26      	ldr	r3, [pc, #152]	@ (800ba3c <_vfiprintf_r+0x224>)
 800b9a4:	bb1b      	cbnz	r3, 800b9ee <_vfiprintf_r+0x1d6>
 800b9a6:	9b03      	ldr	r3, [sp, #12]
 800b9a8:	3307      	adds	r3, #7
 800b9aa:	f023 0307 	bic.w	r3, r3, #7
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	9303      	str	r3, [sp, #12]
 800b9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b4:	443b      	add	r3, r7
 800b9b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b8:	e76a      	b.n	800b890 <_vfiprintf_r+0x78>
 800b9ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9be:	460c      	mov	r4, r1
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	e7a8      	b.n	800b916 <_vfiprintf_r+0xfe>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	3401      	adds	r4, #1
 800b9c8:	9305      	str	r3, [sp, #20]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	f04f 0c0a 	mov.w	ip, #10
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9d6:	3a30      	subs	r2, #48	@ 0x30
 800b9d8:	2a09      	cmp	r2, #9
 800b9da:	d903      	bls.n	800b9e4 <_vfiprintf_r+0x1cc>
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d0c6      	beq.n	800b96e <_vfiprintf_r+0x156>
 800b9e0:	9105      	str	r1, [sp, #20]
 800b9e2:	e7c4      	b.n	800b96e <_vfiprintf_r+0x156>
 800b9e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e7f0      	b.n	800b9d0 <_vfiprintf_r+0x1b8>
 800b9ee:	ab03      	add	r3, sp, #12
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	462a      	mov	r2, r5
 800b9f4:	4b12      	ldr	r3, [pc, #72]	@ (800ba40 <_vfiprintf_r+0x228>)
 800b9f6:	a904      	add	r1, sp, #16
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f3af 8000 	nop.w
 800b9fe:	4607      	mov	r7, r0
 800ba00:	1c78      	adds	r0, r7, #1
 800ba02:	d1d6      	bne.n	800b9b2 <_vfiprintf_r+0x19a>
 800ba04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba06:	07d9      	lsls	r1, r3, #31
 800ba08:	d405      	bmi.n	800ba16 <_vfiprintf_r+0x1fe>
 800ba0a:	89ab      	ldrh	r3, [r5, #12]
 800ba0c:	059a      	lsls	r2, r3, #22
 800ba0e:	d402      	bmi.n	800ba16 <_vfiprintf_r+0x1fe>
 800ba10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba12:	f7ff fd25 	bl	800b460 <__retarget_lock_release_recursive>
 800ba16:	89ab      	ldrh	r3, [r5, #12]
 800ba18:	065b      	lsls	r3, r3, #25
 800ba1a:	f53f af1f 	bmi.w	800b85c <_vfiprintf_r+0x44>
 800ba1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba20:	e71e      	b.n	800b860 <_vfiprintf_r+0x48>
 800ba22:	ab03      	add	r3, sp, #12
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	462a      	mov	r2, r5
 800ba28:	4b05      	ldr	r3, [pc, #20]	@ (800ba40 <_vfiprintf_r+0x228>)
 800ba2a:	a904      	add	r1, sp, #16
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f000 f879 	bl	800bb24 <_printf_i>
 800ba32:	e7e4      	b.n	800b9fe <_vfiprintf_r+0x1e6>
 800ba34:	0800c788 	.word	0x0800c788
 800ba38:	0800c792 	.word	0x0800c792
 800ba3c:	00000000 	.word	0x00000000
 800ba40:	0800b7f3 	.word	0x0800b7f3
 800ba44:	0800c78e 	.word	0x0800c78e

0800ba48 <_printf_common>:
 800ba48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba4c:	4616      	mov	r6, r2
 800ba4e:	4698      	mov	r8, r3
 800ba50:	688a      	ldr	r2, [r1, #8]
 800ba52:	690b      	ldr	r3, [r1, #16]
 800ba54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	bfb8      	it	lt
 800ba5c:	4613      	movlt	r3, r2
 800ba5e:	6033      	str	r3, [r6, #0]
 800ba60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba64:	4607      	mov	r7, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	b10a      	cbz	r2, 800ba6e <_printf_common+0x26>
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	6033      	str	r3, [r6, #0]
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	0699      	lsls	r1, r3, #26
 800ba72:	bf42      	ittt	mi
 800ba74:	6833      	ldrmi	r3, [r6, #0]
 800ba76:	3302      	addmi	r3, #2
 800ba78:	6033      	strmi	r3, [r6, #0]
 800ba7a:	6825      	ldr	r5, [r4, #0]
 800ba7c:	f015 0506 	ands.w	r5, r5, #6
 800ba80:	d106      	bne.n	800ba90 <_printf_common+0x48>
 800ba82:	f104 0a19 	add.w	sl, r4, #25
 800ba86:	68e3      	ldr	r3, [r4, #12]
 800ba88:	6832      	ldr	r2, [r6, #0]
 800ba8a:	1a9b      	subs	r3, r3, r2
 800ba8c:	42ab      	cmp	r3, r5
 800ba8e:	dc26      	bgt.n	800bade <_printf_common+0x96>
 800ba90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba94:	6822      	ldr	r2, [r4, #0]
 800ba96:	3b00      	subs	r3, #0
 800ba98:	bf18      	it	ne
 800ba9a:	2301      	movne	r3, #1
 800ba9c:	0692      	lsls	r2, r2, #26
 800ba9e:	d42b      	bmi.n	800baf8 <_printf_common+0xb0>
 800baa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800baa4:	4641      	mov	r1, r8
 800baa6:	4638      	mov	r0, r7
 800baa8:	47c8      	blx	r9
 800baaa:	3001      	adds	r0, #1
 800baac:	d01e      	beq.n	800baec <_printf_common+0xa4>
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	6922      	ldr	r2, [r4, #16]
 800bab2:	f003 0306 	and.w	r3, r3, #6
 800bab6:	2b04      	cmp	r3, #4
 800bab8:	bf02      	ittt	eq
 800baba:	68e5      	ldreq	r5, [r4, #12]
 800babc:	6833      	ldreq	r3, [r6, #0]
 800babe:	1aed      	subeq	r5, r5, r3
 800bac0:	68a3      	ldr	r3, [r4, #8]
 800bac2:	bf0c      	ite	eq
 800bac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bac8:	2500      	movne	r5, #0
 800baca:	4293      	cmp	r3, r2
 800bacc:	bfc4      	itt	gt
 800bace:	1a9b      	subgt	r3, r3, r2
 800bad0:	18ed      	addgt	r5, r5, r3
 800bad2:	2600      	movs	r6, #0
 800bad4:	341a      	adds	r4, #26
 800bad6:	42b5      	cmp	r5, r6
 800bad8:	d11a      	bne.n	800bb10 <_printf_common+0xc8>
 800bada:	2000      	movs	r0, #0
 800badc:	e008      	b.n	800baf0 <_printf_common+0xa8>
 800bade:	2301      	movs	r3, #1
 800bae0:	4652      	mov	r2, sl
 800bae2:	4641      	mov	r1, r8
 800bae4:	4638      	mov	r0, r7
 800bae6:	47c8      	blx	r9
 800bae8:	3001      	adds	r0, #1
 800baea:	d103      	bne.n	800baf4 <_printf_common+0xac>
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf4:	3501      	adds	r5, #1
 800baf6:	e7c6      	b.n	800ba86 <_printf_common+0x3e>
 800baf8:	18e1      	adds	r1, r4, r3
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	2030      	movs	r0, #48	@ 0x30
 800bafe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb02:	4422      	add	r2, r4
 800bb04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb0c:	3302      	adds	r3, #2
 800bb0e:	e7c7      	b.n	800baa0 <_printf_common+0x58>
 800bb10:	2301      	movs	r3, #1
 800bb12:	4622      	mov	r2, r4
 800bb14:	4641      	mov	r1, r8
 800bb16:	4638      	mov	r0, r7
 800bb18:	47c8      	blx	r9
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d0e6      	beq.n	800baec <_printf_common+0xa4>
 800bb1e:	3601      	adds	r6, #1
 800bb20:	e7d9      	b.n	800bad6 <_printf_common+0x8e>
	...

0800bb24 <_printf_i>:
 800bb24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb28:	7e0f      	ldrb	r7, [r1, #24]
 800bb2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb2c:	2f78      	cmp	r7, #120	@ 0x78
 800bb2e:	4691      	mov	r9, r2
 800bb30:	4680      	mov	r8, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	469a      	mov	sl, r3
 800bb36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bb3a:	d807      	bhi.n	800bb4c <_printf_i+0x28>
 800bb3c:	2f62      	cmp	r7, #98	@ 0x62
 800bb3e:	d80a      	bhi.n	800bb56 <_printf_i+0x32>
 800bb40:	2f00      	cmp	r7, #0
 800bb42:	f000 80d1 	beq.w	800bce8 <_printf_i+0x1c4>
 800bb46:	2f58      	cmp	r7, #88	@ 0x58
 800bb48:	f000 80b8 	beq.w	800bcbc <_printf_i+0x198>
 800bb4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb54:	e03a      	b.n	800bbcc <_printf_i+0xa8>
 800bb56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb5a:	2b15      	cmp	r3, #21
 800bb5c:	d8f6      	bhi.n	800bb4c <_printf_i+0x28>
 800bb5e:	a101      	add	r1, pc, #4	@ (adr r1, 800bb64 <_printf_i+0x40>)
 800bb60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb64:	0800bbbd 	.word	0x0800bbbd
 800bb68:	0800bbd1 	.word	0x0800bbd1
 800bb6c:	0800bb4d 	.word	0x0800bb4d
 800bb70:	0800bb4d 	.word	0x0800bb4d
 800bb74:	0800bb4d 	.word	0x0800bb4d
 800bb78:	0800bb4d 	.word	0x0800bb4d
 800bb7c:	0800bbd1 	.word	0x0800bbd1
 800bb80:	0800bb4d 	.word	0x0800bb4d
 800bb84:	0800bb4d 	.word	0x0800bb4d
 800bb88:	0800bb4d 	.word	0x0800bb4d
 800bb8c:	0800bb4d 	.word	0x0800bb4d
 800bb90:	0800bccf 	.word	0x0800bccf
 800bb94:	0800bbfb 	.word	0x0800bbfb
 800bb98:	0800bc89 	.word	0x0800bc89
 800bb9c:	0800bb4d 	.word	0x0800bb4d
 800bba0:	0800bb4d 	.word	0x0800bb4d
 800bba4:	0800bcf1 	.word	0x0800bcf1
 800bba8:	0800bb4d 	.word	0x0800bb4d
 800bbac:	0800bbfb 	.word	0x0800bbfb
 800bbb0:	0800bb4d 	.word	0x0800bb4d
 800bbb4:	0800bb4d 	.word	0x0800bb4d
 800bbb8:	0800bc91 	.word	0x0800bc91
 800bbbc:	6833      	ldr	r3, [r6, #0]
 800bbbe:	1d1a      	adds	r2, r3, #4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6032      	str	r2, [r6, #0]
 800bbc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e09c      	b.n	800bd0a <_printf_i+0x1e6>
 800bbd0:	6833      	ldr	r3, [r6, #0]
 800bbd2:	6820      	ldr	r0, [r4, #0]
 800bbd4:	1d19      	adds	r1, r3, #4
 800bbd6:	6031      	str	r1, [r6, #0]
 800bbd8:	0606      	lsls	r6, r0, #24
 800bbda:	d501      	bpl.n	800bbe0 <_printf_i+0xbc>
 800bbdc:	681d      	ldr	r5, [r3, #0]
 800bbde:	e003      	b.n	800bbe8 <_printf_i+0xc4>
 800bbe0:	0645      	lsls	r5, r0, #25
 800bbe2:	d5fb      	bpl.n	800bbdc <_printf_i+0xb8>
 800bbe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	da03      	bge.n	800bbf4 <_printf_i+0xd0>
 800bbec:	232d      	movs	r3, #45	@ 0x2d
 800bbee:	426d      	negs	r5, r5
 800bbf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbf4:	4858      	ldr	r0, [pc, #352]	@ (800bd58 <_printf_i+0x234>)
 800bbf6:	230a      	movs	r3, #10
 800bbf8:	e011      	b.n	800bc1e <_printf_i+0xfa>
 800bbfa:	6821      	ldr	r1, [r4, #0]
 800bbfc:	6833      	ldr	r3, [r6, #0]
 800bbfe:	0608      	lsls	r0, r1, #24
 800bc00:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc04:	d402      	bmi.n	800bc0c <_printf_i+0xe8>
 800bc06:	0649      	lsls	r1, r1, #25
 800bc08:	bf48      	it	mi
 800bc0a:	b2ad      	uxthmi	r5, r5
 800bc0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc0e:	4852      	ldr	r0, [pc, #328]	@ (800bd58 <_printf_i+0x234>)
 800bc10:	6033      	str	r3, [r6, #0]
 800bc12:	bf14      	ite	ne
 800bc14:	230a      	movne	r3, #10
 800bc16:	2308      	moveq	r3, #8
 800bc18:	2100      	movs	r1, #0
 800bc1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc1e:	6866      	ldr	r6, [r4, #4]
 800bc20:	60a6      	str	r6, [r4, #8]
 800bc22:	2e00      	cmp	r6, #0
 800bc24:	db05      	blt.n	800bc32 <_printf_i+0x10e>
 800bc26:	6821      	ldr	r1, [r4, #0]
 800bc28:	432e      	orrs	r6, r5
 800bc2a:	f021 0104 	bic.w	r1, r1, #4
 800bc2e:	6021      	str	r1, [r4, #0]
 800bc30:	d04b      	beq.n	800bcca <_printf_i+0x1a6>
 800bc32:	4616      	mov	r6, r2
 800bc34:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc38:	fb03 5711 	mls	r7, r3, r1, r5
 800bc3c:	5dc7      	ldrb	r7, [r0, r7]
 800bc3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc42:	462f      	mov	r7, r5
 800bc44:	42bb      	cmp	r3, r7
 800bc46:	460d      	mov	r5, r1
 800bc48:	d9f4      	bls.n	800bc34 <_printf_i+0x110>
 800bc4a:	2b08      	cmp	r3, #8
 800bc4c:	d10b      	bne.n	800bc66 <_printf_i+0x142>
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	07df      	lsls	r7, r3, #31
 800bc52:	d508      	bpl.n	800bc66 <_printf_i+0x142>
 800bc54:	6923      	ldr	r3, [r4, #16]
 800bc56:	6861      	ldr	r1, [r4, #4]
 800bc58:	4299      	cmp	r1, r3
 800bc5a:	bfde      	ittt	le
 800bc5c:	2330      	movle	r3, #48	@ 0x30
 800bc5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc66:	1b92      	subs	r2, r2, r6
 800bc68:	6122      	str	r2, [r4, #16]
 800bc6a:	f8cd a000 	str.w	sl, [sp]
 800bc6e:	464b      	mov	r3, r9
 800bc70:	aa03      	add	r2, sp, #12
 800bc72:	4621      	mov	r1, r4
 800bc74:	4640      	mov	r0, r8
 800bc76:	f7ff fee7 	bl	800ba48 <_printf_common>
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	d14a      	bne.n	800bd14 <_printf_i+0x1f0>
 800bc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc82:	b004      	add	sp, #16
 800bc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	f043 0320 	orr.w	r3, r3, #32
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	4832      	ldr	r0, [pc, #200]	@ (800bd5c <_printf_i+0x238>)
 800bc92:	2778      	movs	r7, #120	@ 0x78
 800bc94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	6831      	ldr	r1, [r6, #0]
 800bc9c:	061f      	lsls	r7, r3, #24
 800bc9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bca2:	d402      	bmi.n	800bcaa <_printf_i+0x186>
 800bca4:	065f      	lsls	r7, r3, #25
 800bca6:	bf48      	it	mi
 800bca8:	b2ad      	uxthmi	r5, r5
 800bcaa:	6031      	str	r1, [r6, #0]
 800bcac:	07d9      	lsls	r1, r3, #31
 800bcae:	bf44      	itt	mi
 800bcb0:	f043 0320 	orrmi.w	r3, r3, #32
 800bcb4:	6023      	strmi	r3, [r4, #0]
 800bcb6:	b11d      	cbz	r5, 800bcc0 <_printf_i+0x19c>
 800bcb8:	2310      	movs	r3, #16
 800bcba:	e7ad      	b.n	800bc18 <_printf_i+0xf4>
 800bcbc:	4826      	ldr	r0, [pc, #152]	@ (800bd58 <_printf_i+0x234>)
 800bcbe:	e7e9      	b.n	800bc94 <_printf_i+0x170>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	f023 0320 	bic.w	r3, r3, #32
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	e7f6      	b.n	800bcb8 <_printf_i+0x194>
 800bcca:	4616      	mov	r6, r2
 800bccc:	e7bd      	b.n	800bc4a <_printf_i+0x126>
 800bcce:	6833      	ldr	r3, [r6, #0]
 800bcd0:	6825      	ldr	r5, [r4, #0]
 800bcd2:	6961      	ldr	r1, [r4, #20]
 800bcd4:	1d18      	adds	r0, r3, #4
 800bcd6:	6030      	str	r0, [r6, #0]
 800bcd8:	062e      	lsls	r6, r5, #24
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	d501      	bpl.n	800bce2 <_printf_i+0x1be>
 800bcde:	6019      	str	r1, [r3, #0]
 800bce0:	e002      	b.n	800bce8 <_printf_i+0x1c4>
 800bce2:	0668      	lsls	r0, r5, #25
 800bce4:	d5fb      	bpl.n	800bcde <_printf_i+0x1ba>
 800bce6:	8019      	strh	r1, [r3, #0]
 800bce8:	2300      	movs	r3, #0
 800bcea:	6123      	str	r3, [r4, #16]
 800bcec:	4616      	mov	r6, r2
 800bcee:	e7bc      	b.n	800bc6a <_printf_i+0x146>
 800bcf0:	6833      	ldr	r3, [r6, #0]
 800bcf2:	1d1a      	adds	r2, r3, #4
 800bcf4:	6032      	str	r2, [r6, #0]
 800bcf6:	681e      	ldr	r6, [r3, #0]
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f7f4 fa67 	bl	80001d0 <memchr>
 800bd02:	b108      	cbz	r0, 800bd08 <_printf_i+0x1e4>
 800bd04:	1b80      	subs	r0, r0, r6
 800bd06:	6060      	str	r0, [r4, #4]
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd12:	e7aa      	b.n	800bc6a <_printf_i+0x146>
 800bd14:	6923      	ldr	r3, [r4, #16]
 800bd16:	4632      	mov	r2, r6
 800bd18:	4649      	mov	r1, r9
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	47d0      	blx	sl
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d0ad      	beq.n	800bc7e <_printf_i+0x15a>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	079b      	lsls	r3, r3, #30
 800bd26:	d413      	bmi.n	800bd50 <_printf_i+0x22c>
 800bd28:	68e0      	ldr	r0, [r4, #12]
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	4298      	cmp	r0, r3
 800bd2e:	bfb8      	it	lt
 800bd30:	4618      	movlt	r0, r3
 800bd32:	e7a6      	b.n	800bc82 <_printf_i+0x15e>
 800bd34:	2301      	movs	r3, #1
 800bd36:	4632      	mov	r2, r6
 800bd38:	4649      	mov	r1, r9
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	47d0      	blx	sl
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d09d      	beq.n	800bc7e <_printf_i+0x15a>
 800bd42:	3501      	adds	r5, #1
 800bd44:	68e3      	ldr	r3, [r4, #12]
 800bd46:	9903      	ldr	r1, [sp, #12]
 800bd48:	1a5b      	subs	r3, r3, r1
 800bd4a:	42ab      	cmp	r3, r5
 800bd4c:	dcf2      	bgt.n	800bd34 <_printf_i+0x210>
 800bd4e:	e7eb      	b.n	800bd28 <_printf_i+0x204>
 800bd50:	2500      	movs	r5, #0
 800bd52:	f104 0619 	add.w	r6, r4, #25
 800bd56:	e7f5      	b.n	800bd44 <_printf_i+0x220>
 800bd58:	0800c799 	.word	0x0800c799
 800bd5c:	0800c7aa 	.word	0x0800c7aa

0800bd60 <__sflush_r>:
 800bd60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd68:	0716      	lsls	r6, r2, #28
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	d454      	bmi.n	800be1a <__sflush_r+0xba>
 800bd70:	684b      	ldr	r3, [r1, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	dc02      	bgt.n	800bd7c <__sflush_r+0x1c>
 800bd76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	dd48      	ble.n	800be0e <__sflush_r+0xae>
 800bd7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd7e:	2e00      	cmp	r6, #0
 800bd80:	d045      	beq.n	800be0e <__sflush_r+0xae>
 800bd82:	2300      	movs	r3, #0
 800bd84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd88:	682f      	ldr	r7, [r5, #0]
 800bd8a:	6a21      	ldr	r1, [r4, #32]
 800bd8c:	602b      	str	r3, [r5, #0]
 800bd8e:	d030      	beq.n	800bdf2 <__sflush_r+0x92>
 800bd90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd92:	89a3      	ldrh	r3, [r4, #12]
 800bd94:	0759      	lsls	r1, r3, #29
 800bd96:	d505      	bpl.n	800bda4 <__sflush_r+0x44>
 800bd98:	6863      	ldr	r3, [r4, #4]
 800bd9a:	1ad2      	subs	r2, r2, r3
 800bd9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd9e:	b10b      	cbz	r3, 800bda4 <__sflush_r+0x44>
 800bda0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bda2:	1ad2      	subs	r2, r2, r3
 800bda4:	2300      	movs	r3, #0
 800bda6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bda8:	6a21      	ldr	r1, [r4, #32]
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b0      	blx	r6
 800bdae:	1c43      	adds	r3, r0, #1
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	d106      	bne.n	800bdc2 <__sflush_r+0x62>
 800bdb4:	6829      	ldr	r1, [r5, #0]
 800bdb6:	291d      	cmp	r1, #29
 800bdb8:	d82b      	bhi.n	800be12 <__sflush_r+0xb2>
 800bdba:	4a2a      	ldr	r2, [pc, #168]	@ (800be64 <__sflush_r+0x104>)
 800bdbc:	40ca      	lsrs	r2, r1
 800bdbe:	07d6      	lsls	r6, r2, #31
 800bdc0:	d527      	bpl.n	800be12 <__sflush_r+0xb2>
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	6062      	str	r2, [r4, #4]
 800bdc6:	04d9      	lsls	r1, r3, #19
 800bdc8:	6922      	ldr	r2, [r4, #16]
 800bdca:	6022      	str	r2, [r4, #0]
 800bdcc:	d504      	bpl.n	800bdd8 <__sflush_r+0x78>
 800bdce:	1c42      	adds	r2, r0, #1
 800bdd0:	d101      	bne.n	800bdd6 <__sflush_r+0x76>
 800bdd2:	682b      	ldr	r3, [r5, #0]
 800bdd4:	b903      	cbnz	r3, 800bdd8 <__sflush_r+0x78>
 800bdd6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bdd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdda:	602f      	str	r7, [r5, #0]
 800bddc:	b1b9      	cbz	r1, 800be0e <__sflush_r+0xae>
 800bdde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bde2:	4299      	cmp	r1, r3
 800bde4:	d002      	beq.n	800bdec <__sflush_r+0x8c>
 800bde6:	4628      	mov	r0, r5
 800bde8:	f7ff fb4a 	bl	800b480 <_free_r>
 800bdec:	2300      	movs	r3, #0
 800bdee:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdf0:	e00d      	b.n	800be0e <__sflush_r+0xae>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	47b0      	blx	r6
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	1c50      	adds	r0, r2, #1
 800bdfc:	d1c9      	bne.n	800bd92 <__sflush_r+0x32>
 800bdfe:	682b      	ldr	r3, [r5, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d0c6      	beq.n	800bd92 <__sflush_r+0x32>
 800be04:	2b1d      	cmp	r3, #29
 800be06:	d001      	beq.n	800be0c <__sflush_r+0xac>
 800be08:	2b16      	cmp	r3, #22
 800be0a:	d11e      	bne.n	800be4a <__sflush_r+0xea>
 800be0c:	602f      	str	r7, [r5, #0]
 800be0e:	2000      	movs	r0, #0
 800be10:	e022      	b.n	800be58 <__sflush_r+0xf8>
 800be12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be16:	b21b      	sxth	r3, r3
 800be18:	e01b      	b.n	800be52 <__sflush_r+0xf2>
 800be1a:	690f      	ldr	r7, [r1, #16]
 800be1c:	2f00      	cmp	r7, #0
 800be1e:	d0f6      	beq.n	800be0e <__sflush_r+0xae>
 800be20:	0793      	lsls	r3, r2, #30
 800be22:	680e      	ldr	r6, [r1, #0]
 800be24:	bf08      	it	eq
 800be26:	694b      	ldreq	r3, [r1, #20]
 800be28:	600f      	str	r7, [r1, #0]
 800be2a:	bf18      	it	ne
 800be2c:	2300      	movne	r3, #0
 800be2e:	eba6 0807 	sub.w	r8, r6, r7
 800be32:	608b      	str	r3, [r1, #8]
 800be34:	f1b8 0f00 	cmp.w	r8, #0
 800be38:	dde9      	ble.n	800be0e <__sflush_r+0xae>
 800be3a:	6a21      	ldr	r1, [r4, #32]
 800be3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be3e:	4643      	mov	r3, r8
 800be40:	463a      	mov	r2, r7
 800be42:	4628      	mov	r0, r5
 800be44:	47b0      	blx	r6
 800be46:	2800      	cmp	r0, #0
 800be48:	dc08      	bgt.n	800be5c <__sflush_r+0xfc>
 800be4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be52:	81a3      	strh	r3, [r4, #12]
 800be54:	f04f 30ff 	mov.w	r0, #4294967295
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	4407      	add	r7, r0
 800be5e:	eba8 0800 	sub.w	r8, r8, r0
 800be62:	e7e7      	b.n	800be34 <__sflush_r+0xd4>
 800be64:	20400001 	.word	0x20400001

0800be68 <_fflush_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	690b      	ldr	r3, [r1, #16]
 800be6c:	4605      	mov	r5, r0
 800be6e:	460c      	mov	r4, r1
 800be70:	b913      	cbnz	r3, 800be78 <_fflush_r+0x10>
 800be72:	2500      	movs	r5, #0
 800be74:	4628      	mov	r0, r5
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	b118      	cbz	r0, 800be82 <_fflush_r+0x1a>
 800be7a:	6a03      	ldr	r3, [r0, #32]
 800be7c:	b90b      	cbnz	r3, 800be82 <_fflush_r+0x1a>
 800be7e:	f7ff f8e9 	bl	800b054 <__sinit>
 800be82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d0f3      	beq.n	800be72 <_fflush_r+0xa>
 800be8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be8c:	07d0      	lsls	r0, r2, #31
 800be8e:	d404      	bmi.n	800be9a <_fflush_r+0x32>
 800be90:	0599      	lsls	r1, r3, #22
 800be92:	d402      	bmi.n	800be9a <_fflush_r+0x32>
 800be94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be96:	f7ff fae2 	bl	800b45e <__retarget_lock_acquire_recursive>
 800be9a:	4628      	mov	r0, r5
 800be9c:	4621      	mov	r1, r4
 800be9e:	f7ff ff5f 	bl	800bd60 <__sflush_r>
 800bea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bea4:	07da      	lsls	r2, r3, #31
 800bea6:	4605      	mov	r5, r0
 800bea8:	d4e4      	bmi.n	800be74 <_fflush_r+0xc>
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	059b      	lsls	r3, r3, #22
 800beae:	d4e1      	bmi.n	800be74 <_fflush_r+0xc>
 800beb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800beb2:	f7ff fad5 	bl	800b460 <__retarget_lock_release_recursive>
 800beb6:	e7dd      	b.n	800be74 <_fflush_r+0xc>

0800beb8 <__swhatbuf_r>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	460c      	mov	r4, r1
 800bebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec0:	2900      	cmp	r1, #0
 800bec2:	b096      	sub	sp, #88	@ 0x58
 800bec4:	4615      	mov	r5, r2
 800bec6:	461e      	mov	r6, r3
 800bec8:	da0d      	bge.n	800bee6 <__swhatbuf_r+0x2e>
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bed0:	f04f 0100 	mov.w	r1, #0
 800bed4:	bf14      	ite	ne
 800bed6:	2340      	movne	r3, #64	@ 0x40
 800bed8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bedc:	2000      	movs	r0, #0
 800bede:	6031      	str	r1, [r6, #0]
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	b016      	add	sp, #88	@ 0x58
 800bee4:	bd70      	pop	{r4, r5, r6, pc}
 800bee6:	466a      	mov	r2, sp
 800bee8:	f000 f8f6 	bl	800c0d8 <_fstat_r>
 800beec:	2800      	cmp	r0, #0
 800beee:	dbec      	blt.n	800beca <__swhatbuf_r+0x12>
 800bef0:	9901      	ldr	r1, [sp, #4]
 800bef2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bef6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800befa:	4259      	negs	r1, r3
 800befc:	4159      	adcs	r1, r3
 800befe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf02:	e7eb      	b.n	800bedc <__swhatbuf_r+0x24>

0800bf04 <__smakebuf_r>:
 800bf04:	898b      	ldrh	r3, [r1, #12]
 800bf06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf08:	079d      	lsls	r5, r3, #30
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	d507      	bpl.n	800bf20 <__smakebuf_r+0x1c>
 800bf10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	6123      	str	r3, [r4, #16]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	6163      	str	r3, [r4, #20]
 800bf1c:	b003      	add	sp, #12
 800bf1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf20:	ab01      	add	r3, sp, #4
 800bf22:	466a      	mov	r2, sp
 800bf24:	f7ff ffc8 	bl	800beb8 <__swhatbuf_r>
 800bf28:	9f00      	ldr	r7, [sp, #0]
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7fe ff78 	bl	800ae24 <_malloc_r>
 800bf34:	b948      	cbnz	r0, 800bf4a <__smakebuf_r+0x46>
 800bf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf3a:	059a      	lsls	r2, r3, #22
 800bf3c:	d4ee      	bmi.n	800bf1c <__smakebuf_r+0x18>
 800bf3e:	f023 0303 	bic.w	r3, r3, #3
 800bf42:	f043 0302 	orr.w	r3, r3, #2
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	e7e2      	b.n	800bf10 <__smakebuf_r+0xc>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	6020      	str	r0, [r4, #0]
 800bf4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf52:	81a3      	strh	r3, [r4, #12]
 800bf54:	9b01      	ldr	r3, [sp, #4]
 800bf56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf5a:	b15b      	cbz	r3, 800bf74 <__smakebuf_r+0x70>
 800bf5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf60:	4630      	mov	r0, r6
 800bf62:	f000 f8cb 	bl	800c0fc <_isatty_r>
 800bf66:	b128      	cbz	r0, 800bf74 <__smakebuf_r+0x70>
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	f023 0303 	bic.w	r3, r3, #3
 800bf6e:	f043 0301 	orr.w	r3, r3, #1
 800bf72:	81a3      	strh	r3, [r4, #12]
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	431d      	orrs	r5, r3
 800bf78:	81a5      	strh	r5, [r4, #12]
 800bf7a:	e7cf      	b.n	800bf1c <__smakebuf_r+0x18>

0800bf7c <__swbuf_r>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	460e      	mov	r6, r1
 800bf80:	4614      	mov	r4, r2
 800bf82:	4605      	mov	r5, r0
 800bf84:	b118      	cbz	r0, 800bf8e <__swbuf_r+0x12>
 800bf86:	6a03      	ldr	r3, [r0, #32]
 800bf88:	b90b      	cbnz	r3, 800bf8e <__swbuf_r+0x12>
 800bf8a:	f7ff f863 	bl	800b054 <__sinit>
 800bf8e:	69a3      	ldr	r3, [r4, #24]
 800bf90:	60a3      	str	r3, [r4, #8]
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	071a      	lsls	r2, r3, #28
 800bf96:	d501      	bpl.n	800bf9c <__swbuf_r+0x20>
 800bf98:	6923      	ldr	r3, [r4, #16]
 800bf9a:	b943      	cbnz	r3, 800bfae <__swbuf_r+0x32>
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f000 f82a 	bl	800bff8 <__swsetup_r>
 800bfa4:	b118      	cbz	r0, 800bfae <__swbuf_r+0x32>
 800bfa6:	f04f 37ff 	mov.w	r7, #4294967295
 800bfaa:	4638      	mov	r0, r7
 800bfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	6922      	ldr	r2, [r4, #16]
 800bfb2:	1a98      	subs	r0, r3, r2
 800bfb4:	6963      	ldr	r3, [r4, #20]
 800bfb6:	b2f6      	uxtb	r6, r6
 800bfb8:	4283      	cmp	r3, r0
 800bfba:	4637      	mov	r7, r6
 800bfbc:	dc05      	bgt.n	800bfca <__swbuf_r+0x4e>
 800bfbe:	4621      	mov	r1, r4
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f7ff ff51 	bl	800be68 <_fflush_r>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d1ed      	bne.n	800bfa6 <__swbuf_r+0x2a>
 800bfca:	68a3      	ldr	r3, [r4, #8]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	60a3      	str	r3, [r4, #8]
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	1c5a      	adds	r2, r3, #1
 800bfd4:	6022      	str	r2, [r4, #0]
 800bfd6:	701e      	strb	r6, [r3, #0]
 800bfd8:	6962      	ldr	r2, [r4, #20]
 800bfda:	1c43      	adds	r3, r0, #1
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d004      	beq.n	800bfea <__swbuf_r+0x6e>
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	07db      	lsls	r3, r3, #31
 800bfe4:	d5e1      	bpl.n	800bfaa <__swbuf_r+0x2e>
 800bfe6:	2e0a      	cmp	r6, #10
 800bfe8:	d1df      	bne.n	800bfaa <__swbuf_r+0x2e>
 800bfea:	4621      	mov	r1, r4
 800bfec:	4628      	mov	r0, r5
 800bfee:	f7ff ff3b 	bl	800be68 <_fflush_r>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d0d9      	beq.n	800bfaa <__swbuf_r+0x2e>
 800bff6:	e7d6      	b.n	800bfa6 <__swbuf_r+0x2a>

0800bff8 <__swsetup_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4b29      	ldr	r3, [pc, #164]	@ (800c0a0 <__swsetup_r+0xa8>)
 800bffc:	4605      	mov	r5, r0
 800bffe:	6818      	ldr	r0, [r3, #0]
 800c000:	460c      	mov	r4, r1
 800c002:	b118      	cbz	r0, 800c00c <__swsetup_r+0x14>
 800c004:	6a03      	ldr	r3, [r0, #32]
 800c006:	b90b      	cbnz	r3, 800c00c <__swsetup_r+0x14>
 800c008:	f7ff f824 	bl	800b054 <__sinit>
 800c00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c010:	0719      	lsls	r1, r3, #28
 800c012:	d422      	bmi.n	800c05a <__swsetup_r+0x62>
 800c014:	06da      	lsls	r2, r3, #27
 800c016:	d407      	bmi.n	800c028 <__swsetup_r+0x30>
 800c018:	2209      	movs	r2, #9
 800c01a:	602a      	str	r2, [r5, #0]
 800c01c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	f04f 30ff 	mov.w	r0, #4294967295
 800c026:	e033      	b.n	800c090 <__swsetup_r+0x98>
 800c028:	0758      	lsls	r0, r3, #29
 800c02a:	d512      	bpl.n	800c052 <__swsetup_r+0x5a>
 800c02c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c02e:	b141      	cbz	r1, 800c042 <__swsetup_r+0x4a>
 800c030:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c034:	4299      	cmp	r1, r3
 800c036:	d002      	beq.n	800c03e <__swsetup_r+0x46>
 800c038:	4628      	mov	r0, r5
 800c03a:	f7ff fa21 	bl	800b480 <_free_r>
 800c03e:	2300      	movs	r3, #0
 800c040:	6363      	str	r3, [r4, #52]	@ 0x34
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	2300      	movs	r3, #0
 800c04c:	6063      	str	r3, [r4, #4]
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	f043 0308 	orr.w	r3, r3, #8
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	b94b      	cbnz	r3, 800c072 <__swsetup_r+0x7a>
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c068:	d003      	beq.n	800c072 <__swsetup_r+0x7a>
 800c06a:	4621      	mov	r1, r4
 800c06c:	4628      	mov	r0, r5
 800c06e:	f7ff ff49 	bl	800bf04 <__smakebuf_r>
 800c072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c076:	f013 0201 	ands.w	r2, r3, #1
 800c07a:	d00a      	beq.n	800c092 <__swsetup_r+0x9a>
 800c07c:	2200      	movs	r2, #0
 800c07e:	60a2      	str	r2, [r4, #8]
 800c080:	6962      	ldr	r2, [r4, #20]
 800c082:	4252      	negs	r2, r2
 800c084:	61a2      	str	r2, [r4, #24]
 800c086:	6922      	ldr	r2, [r4, #16]
 800c088:	b942      	cbnz	r2, 800c09c <__swsetup_r+0xa4>
 800c08a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c08e:	d1c5      	bne.n	800c01c <__swsetup_r+0x24>
 800c090:	bd38      	pop	{r3, r4, r5, pc}
 800c092:	0799      	lsls	r1, r3, #30
 800c094:	bf58      	it	pl
 800c096:	6962      	ldrpl	r2, [r4, #20]
 800c098:	60a2      	str	r2, [r4, #8]
 800c09a:	e7f4      	b.n	800c086 <__swsetup_r+0x8e>
 800c09c:	2000      	movs	r0, #0
 800c09e:	e7f7      	b.n	800c090 <__swsetup_r+0x98>
 800c0a0:	20000028 	.word	0x20000028

0800c0a4 <memmove>:
 800c0a4:	4288      	cmp	r0, r1
 800c0a6:	b510      	push	{r4, lr}
 800c0a8:	eb01 0402 	add.w	r4, r1, r2
 800c0ac:	d902      	bls.n	800c0b4 <memmove+0x10>
 800c0ae:	4284      	cmp	r4, r0
 800c0b0:	4623      	mov	r3, r4
 800c0b2:	d807      	bhi.n	800c0c4 <memmove+0x20>
 800c0b4:	1e43      	subs	r3, r0, #1
 800c0b6:	42a1      	cmp	r1, r4
 800c0b8:	d008      	beq.n	800c0cc <memmove+0x28>
 800c0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0c2:	e7f8      	b.n	800c0b6 <memmove+0x12>
 800c0c4:	4402      	add	r2, r0
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	428a      	cmp	r2, r1
 800c0ca:	d100      	bne.n	800c0ce <memmove+0x2a>
 800c0cc:	bd10      	pop	{r4, pc}
 800c0ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0d6:	e7f7      	b.n	800c0c8 <memmove+0x24>

0800c0d8 <_fstat_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d07      	ldr	r5, [pc, #28]	@ (800c0f8 <_fstat_r+0x20>)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4604      	mov	r4, r0
 800c0e0:	4608      	mov	r0, r1
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	f7f6 fd71 	bl	8002bcc <_fstat>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d102      	bne.n	800c0f4 <_fstat_r+0x1c>
 800c0ee:	682b      	ldr	r3, [r5, #0]
 800c0f0:	b103      	cbz	r3, 800c0f4 <_fstat_r+0x1c>
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	bd38      	pop	{r3, r4, r5, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20000d80 	.word	0x20000d80

0800c0fc <_isatty_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d06      	ldr	r5, [pc, #24]	@ (800c118 <_isatty_r+0x1c>)
 800c100:	2300      	movs	r3, #0
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	602b      	str	r3, [r5, #0]
 800c108:	f7f6 fd70 	bl	8002bec <_isatty>
 800c10c:	1c43      	adds	r3, r0, #1
 800c10e:	d102      	bne.n	800c116 <_isatty_r+0x1a>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	b103      	cbz	r3, 800c116 <_isatty_r+0x1a>
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	bd38      	pop	{r3, r4, r5, pc}
 800c118:	20000d80 	.word	0x20000d80

0800c11c <_realloc_r>:
 800c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c120:	4607      	mov	r7, r0
 800c122:	4614      	mov	r4, r2
 800c124:	460d      	mov	r5, r1
 800c126:	b921      	cbnz	r1, 800c132 <_realloc_r+0x16>
 800c128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c12c:	4611      	mov	r1, r2
 800c12e:	f7fe be79 	b.w	800ae24 <_malloc_r>
 800c132:	b92a      	cbnz	r2, 800c140 <_realloc_r+0x24>
 800c134:	f7ff f9a4 	bl	800b480 <_free_r>
 800c138:	4625      	mov	r5, r4
 800c13a:	4628      	mov	r0, r5
 800c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c140:	f000 f81a 	bl	800c178 <_malloc_usable_size_r>
 800c144:	4284      	cmp	r4, r0
 800c146:	4606      	mov	r6, r0
 800c148:	d802      	bhi.n	800c150 <_realloc_r+0x34>
 800c14a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c14e:	d8f4      	bhi.n	800c13a <_realloc_r+0x1e>
 800c150:	4621      	mov	r1, r4
 800c152:	4638      	mov	r0, r7
 800c154:	f7fe fe66 	bl	800ae24 <_malloc_r>
 800c158:	4680      	mov	r8, r0
 800c15a:	b908      	cbnz	r0, 800c160 <_realloc_r+0x44>
 800c15c:	4645      	mov	r5, r8
 800c15e:	e7ec      	b.n	800c13a <_realloc_r+0x1e>
 800c160:	42b4      	cmp	r4, r6
 800c162:	4622      	mov	r2, r4
 800c164:	4629      	mov	r1, r5
 800c166:	bf28      	it	cs
 800c168:	4632      	movcs	r2, r6
 800c16a:	f7ff f97a 	bl	800b462 <memcpy>
 800c16e:	4629      	mov	r1, r5
 800c170:	4638      	mov	r0, r7
 800c172:	f7ff f985 	bl	800b480 <_free_r>
 800c176:	e7f1      	b.n	800c15c <_realloc_r+0x40>

0800c178 <_malloc_usable_size_r>:
 800c178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c17c:	1f18      	subs	r0, r3, #4
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bfbc      	itt	lt
 800c182:	580b      	ldrlt	r3, [r1, r0]
 800c184:	18c0      	addlt	r0, r0, r3
 800c186:	4770      	bx	lr

0800c188 <_init>:
 800c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18a:	bf00      	nop
 800c18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c18e:	bc08      	pop	{r3}
 800c190:	469e      	mov	lr, r3
 800c192:	4770      	bx	lr

0800c194 <_fini>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	bf00      	nop
 800c198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19a:	bc08      	pop	{r3}
 800c19c:	469e      	mov	lr, r3
 800c19e:	4770      	bx	lr
