
CNC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  08010474  08010474  00011474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dd4  08010dd4  0001207c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010dd4  08010dd4  00011dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ddc  08010ddc  0001207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ddc  08010ddc  00011ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010de0  08010de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08010de4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000120c  20000080  08010e60  00012080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000128c  08010e60  0001228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001207c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002262e  00000000  00000000  000120ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ea8  00000000  00000000  000346da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0003a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000180f  00000000  00000000  0003c540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae11  00000000  00000000  0003dd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa76  00000000  00000000  00068b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fae56  00000000  00000000  000935d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e42c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a60  00000000  00000000  0018e470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00196ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801045c 	.word	0x0801045c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0801045c 	.word	0x0801045c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9d3 	b.w	8000638 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <has_header_tail>:
	return 0;
}

// Validação genérica de header/tail
static inline int has_header_tail(const uint8_t *raw, uint32_t len,
		uint8_t header, uint8_t tail) {
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	4611      	mov	r1, r2
 8000648:	461a      	mov	r2, r3
 800064a:	460b      	mov	r3, r1
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	4613      	mov	r3, r2
 8000650:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d011      	beq.n	800067c <has_header_tail+0x40>
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d90e      	bls.n	800067c <has_header_tail+0x40>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	429a      	cmp	r2, r3
 8000666:	d109      	bne.n	800067c <has_header_tail+0x40>
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	3b01      	subs	r3, #1
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	429a      	cmp	r2, r3
 8000676:	d101      	bne.n	800067c <has_header_tail+0x40>
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <has_header_tail+0x42>
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <frame_expect_req>:
// =====================
// Validadores de frame
// =====================
// Garante comprimento mínimo, header/tail corretos e tipo esperado
static inline int frame_expect_req(const uint8_t *raw, uint32_t len,
		req_msg_type_t type, uint32_t min_len) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4613      	mov	r3, r2
 8000698:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <frame_expect_req+0x1e>
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d202      	bcs.n	80006ae <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	e012      	b.n	80006d4 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80006ae:	2355      	movs	r3, #85	@ 0x55
 80006b0:	22aa      	movs	r2, #170	@ 0xaa
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff ffc1 	bl	800063c <has_header_tail>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d002      	beq.n	80006d2 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80006cc:	f06f 0301 	mvn.w	r3, #1
 80006d0:	e000      	b.n	80006d4 <frame_expect_req+0x4a>
	return PROTO_OK;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <encoder_status_req_decoder>:
#include "Protocol/Requests/encoder_status_request.h"

int encoder_status_req_decoder(const uint8_t *raw, uint32_t len, encoder_status_req_t *out) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <encoder_status_req_decoder+0x18>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <encoder_status_req_decoder+0x1e>
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	e011      	b.n	800071e <encoder_status_req_decoder+0x42>
    int st = frame_expect_req(raw, len, REQ_ENCODER_STATUS, 4);
 80006fa:	2304      	movs	r3, #4
 80006fc:	2225      	movs	r2, #37	@ 0x25
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f7ff ffc2 	bl	800068a <frame_expect_req>
 8000706:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <encoder_status_req_decoder+0x36>
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	e005      	b.n	800071e <encoder_status_req_decoder+0x42>
    out->frameId = raw[2];
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3302      	adds	r3, #2
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	701a      	strb	r2, [r3, #0]
    return PROTO_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000726:	b480      	push	{r7}
 8000728:	b085      	sub	sp, #20
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	4611      	mov	r1, r2
 8000732:	461a      	mov	r2, r3
 8000734:	460b      	mov	r3, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d011      	beq.n	8000766 <has_header_tail+0x40>
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d90e      	bls.n	8000766 <has_header_tail+0x40>
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	429a      	cmp	r2, r3
 8000750:	d109      	bne.n	8000766 <has_header_tail+0x40>
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3b01      	subs	r3, #1
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	429a      	cmp	r2, r3
 8000760:	d101      	bne.n	8000766 <has_header_tail+0x40>
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <has_header_tail+0x42>
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b21b      	sxth	r3, r3
 8000782:	021b      	lsls	r3, r3, #8
 8000784:	b21a      	sxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3301      	adds	r3, #1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b21b      	sxth	r3, r3
 8000792:	b29b      	uxth	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4613      	mov	r3, r2
 80007ae:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <frame_expect_req+0x1e>
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d202      	bcs.n	80007c4 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e012      	b.n	80007ea <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80007c4:	2355      	movs	r3, #85	@ 0x55
 80007c6:	22aa      	movs	r2, #170	@ 0xaa
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	f7ff ffab 	bl	8000726 <has_header_tail>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d005      	beq.n	80007e2 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d002      	beq.n	80007e8 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80007e2:	f06f 0301 	mvn.w	r3, #1
 80007e6:	e000      	b.n	80007ea <frame_expect_req+0x4a>
	return PROTO_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <led_ctrl_req_decoder>:
// [7]=paridade (XOR dos bytes 1..6), [8]=0x55

#define LED_CTRL_PARITY_LAST_INDEX 6u
#define LED_CTRL_PARITY_INDEX 7u

int led_ctrl_req_decoder(const uint8_t *raw, uint32_t len, led_ctrl_req_t *out) {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
    if (!raw || !out)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <led_ctrl_req_decoder+0x18>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <led_ctrl_req_decoder+0x1e>
        return PROTO_ERR_ARG;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	e02a      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    if (len > LED_CTRL_REQ_PADDED_TOTAL_LEN)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	2b2a      	cmp	r3, #42	@ 0x2a
 8000814:	d902      	bls.n	800081c <led_ctrl_req_decoder+0x2a>
        return PROTO_ERR_RANGE;
 8000816:	f06f 0303 	mvn.w	r3, #3
 800081a:	e024      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    int st = frame_expect_req(raw, len, REQ_LED_CTRL, LED_CTRL_REQ_TOTAL_LEN);
 800081c:	2309      	movs	r3, #9
 800081e:	2207      	movs	r2, #7
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff ffbc 	bl	80007a0 <frame_expect_req>
 8000828:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <led_ctrl_req_decoder+0x42>
        return st;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	e018      	b.n	8000866 <led_ctrl_req_decoder+0x74>
    out->frameId = raw[2];
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3302      	adds	r3, #2
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	701a      	strb	r2, [r3, #0]
    out->ledMask = raw[3];
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3303      	adds	r3, #3
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	705a      	strb	r2, [r3, #1]
    out->channel[0].mode = raw[4];
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3304      	adds	r3, #4
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	709a      	strb	r2, [r3, #2]
    out->channel[0].frequency = be16_read(raw + 5);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3305      	adds	r3, #5
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff8c 	bl	8000774 <be16_read>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	809a      	strh	r2, [r3, #4]
    return PROTO_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <has_header_tail>:
		uint8_t header, uint8_t tail) {
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	4611      	mov	r1, r2
 800087a:	461a      	mov	r2, r3
 800087c:	460b      	mov	r3, r1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d011      	beq.n	80008ae <has_header_tail+0x40>
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d90e      	bls.n	80008ae <has_header_tail+0x40>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	429a      	cmp	r2, r3
 8000898:	d109      	bne.n	80008ae <has_header_tail+0x40>
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3b01      	subs	r3, #1
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	79ba      	ldrb	r2, [r7, #6]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d101      	bne.n	80008ae <has_header_tail+0x40>
 80008aa:	2301      	movs	r3, #1
 80008ac:	e000      	b.n	80008b0 <has_header_tail+0x42>
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <frame_expect_req+0x1e>
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d202      	bcs.n	80008e0 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e012      	b.n	8000906 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 80008e0:	2355      	movs	r3, #85	@ 0x55
 80008e2:	22aa      	movs	r2, #170	@ 0xaa
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f7ff ffc1 	bl	800086e <has_header_tail>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d002      	beq.n	8000904 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 80008fe:	f06f 0301 	mvn.w	r3, #1
 8000902:	e000      	b.n	8000906 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <move_end_req_decoder>:
#include "Protocol/Requests/move_end_request.h"

int move_end_req_decoder(const uint8_t *raw, uint32_t len, move_end_req_t *out) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <move_end_req_decoder+0x18>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <move_end_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e011      	b.n	8000950 <move_end_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_END, 4);
 800092c:	2304      	movs	r3, #4
 800092e:	2206      	movs	r2, #6
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f7ff ffc2 	bl	80008bc <frame_expect_req>
 8000938:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <move_end_req_decoder+0x36>
		return st;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	e005      	b.n	8000950 <move_end_req_decoder+0x42>
	out->frameId = raw[2];
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3302      	adds	r3, #2
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	4611      	mov	r1, r2
 8000964:	461a      	mov	r2, r3
 8000966:	460b      	mov	r3, r1
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	4613      	mov	r3, r2
 800096c:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d011      	beq.n	8000998 <has_header_tail+0x40>
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d90e      	bls.n	8000998 <has_header_tail+0x40>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	429a      	cmp	r2, r3
 8000982:	d109      	bne.n	8000998 <has_header_tail+0x40>
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	3b01      	subs	r3, #1
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	429a      	cmp	r2, r3
 8000992:	d101      	bne.n	8000998 <has_header_tail+0x40>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <has_header_tail+0x42>
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <be16_read>:
static inline uint16_t be16_read(const uint8_t *p) {
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	b21a      	sxth	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b21b      	sxth	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	b29b      	uxth	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <be32_read>:
static inline uint32_t be32_read(const uint8_t *p) {
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	return (((uint32_t) p[0] << 24) | ((uint32_t) p[1] << 16)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	061a      	lsls	r2, r3, #24
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3301      	adds	r3, #1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	041b      	lsls	r3, r3, #16
 80009e8:	431a      	orrs	r2, r3
			| ((uint32_t) p[2] << 8) | (uint32_t) p[3]);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3302      	adds	r3, #2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	4313      	orrs	r3, r2
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	3203      	adds	r2, #3
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	4313      	orrs	r3, r2
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <frame_expect_req+0x1e>
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d202      	bcs.n	8000a2c <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e012      	b.n	8000a52 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000a2c:	2355      	movs	r3, #85	@ 0x55
 8000a2e:	22aa      	movs	r2, #170	@ 0xaa
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff90 	bl	8000958 <has_header_tail>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d005      	beq.n	8000a4a <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d002      	beq.n	8000a50 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000a4a:	f06f 0301 	mvn.w	r3, #1
 8000a4e:	e000      	b.n	8000a52 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <move_queue_add_req_decoder>:
#include "Protocol/Requests/move_queue_add_request.h"

int move_queue_add_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_add_req_t *out) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d002      	beq.n	8000a72 <move_queue_add_req_decoder+0x18>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <move_queue_add_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e09a      	b.n	8000bae <move_queue_add_req_decoder+0x154>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_ADD, 42);
 8000a78:	232a      	movs	r3, #42	@ 0x2a
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff ffc2 	bl	8000a08 <frame_expect_req>
 8000a84:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <move_queue_add_req_decoder+0x36>
		return st;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	e08e      	b.n	8000bae <move_queue_add_req_decoder+0x154>
	out->frameId = raw[2];
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3302      	adds	r3, #2
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	701a      	strb	r2, [r3, #0]
	out->dirMask = raw[3];
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3303      	adds	r3, #3
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	705a      	strb	r2, [r3, #1]
	out->vx = be16_read(&raw[4]);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff7c 	bl	80009a6 <be16_read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	805a      	strh	r2, [r3, #2]
	out->sx = be32_read(&raw[6]);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3306      	adds	r3, #6
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff89 	bl	80009d2 <be32_read>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	605a      	str	r2, [r3, #4]
	out->vy = be16_read(&raw[10]);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	330a      	adds	r3, #10
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff6b 	bl	80009a6 <be16_read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	811a      	strh	r2, [r3, #8]
	out->sy = be32_read(&raw[12]);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	330c      	adds	r3, #12
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff78 	bl	80009d2 <be32_read>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60da      	str	r2, [r3, #12]
	out->vz = be16_read(&raw[16]);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3310      	adds	r3, #16
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5a 	bl	80009a6 <be16_read>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	821a      	strh	r2, [r3, #16]
	out->sz = be32_read(&raw[18]);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	3312      	adds	r3, #18
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff67 	bl	80009d2 <be32_read>
 8000b04:	4602      	mov	r2, r0
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	615a      	str	r2, [r3, #20]
	out->kp_x = be16_read(&raw[22]);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3316      	adds	r3, #22
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff49 	bl	80009a6 <be16_read>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	831a      	strh	r2, [r3, #24]
	out->ki_x = be16_read(&raw[24]);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3318      	adds	r3, #24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff40 	bl	80009a6 <be16_read>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	835a      	strh	r2, [r3, #26]
	out->kd_x = be16_read(&raw[26]);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	331a      	adds	r3, #26
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff37 	bl	80009a6 <be16_read>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	839a      	strh	r2, [r3, #28]
	out->kp_y = be16_read(&raw[28]);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	331c      	adds	r3, #28
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff2e 	bl	80009a6 <be16_read>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	83da      	strh	r2, [r3, #30]
	out->ki_y = be16_read(&raw[30]);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	331e      	adds	r3, #30
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff25 	bl	80009a6 <be16_read>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	841a      	strh	r2, [r3, #32]
	out->kd_y = be16_read(&raw[32]);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3320      	adds	r3, #32
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff1c 	bl	80009a6 <be16_read>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	845a      	strh	r2, [r3, #34]	@ 0x22
	out->kp_z = be16_read(&raw[34]);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3322      	adds	r3, #34	@ 0x22
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff13 	bl	80009a6 <be16_read>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	849a      	strh	r2, [r3, #36]	@ 0x24
	out->ki_z = be16_read(&raw[36]);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3324      	adds	r3, #36	@ 0x24
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff0a 	bl	80009a6 <be16_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	84da      	strh	r2, [r3, #38]	@ 0x26
	out->kd_z = be16_read(&raw[38]);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3326      	adds	r3, #38	@ 0x26
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff01 	bl	80009a6 <be16_read>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	851a      	strh	r2, [r3, #40]	@ 0x28
	return PROTO_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d011      	beq.n	8000bf6 <has_header_tail+0x40>
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d90e      	bls.n	8000bf6 <has_header_tail+0x40>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	79fa      	ldrb	r2, [r7, #7]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d109      	bne.n	8000bf6 <has_header_tail+0x40>
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d101      	bne.n	8000bf6 <has_header_tail+0x40>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <has_header_tail+0x42>
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <frame_expect_req+0x1e>
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d202      	bcs.n	8000c28 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e012      	b.n	8000c4e <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000c28:	2355      	movs	r3, #85	@ 0x55
 8000c2a:	22aa      	movs	r2, #170	@ 0xaa
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff ffc1 	bl	8000bb6 <has_header_tail>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	79fa      	ldrb	r2, [r7, #7]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d002      	beq.n	8000c4c <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000c46:	f06f 0301 	mvn.w	r3, #1
 8000c4a:	e000      	b.n	8000c4e <frame_expect_req+0x4a>
	return PROTO_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <move_queue_status_req_decoder>:
#include "Protocol/Requests/move_queue_status_request.h"

int move_queue_status_req_decoder(const uint8_t *raw, uint32_t len,
		move_queue_status_req_t *out) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d002      	beq.n	8000c6e <move_queue_status_req_decoder+0x18>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <move_queue_status_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e011      	b.n	8000c98 <move_queue_status_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_MOVE_QUEUE_STATUS, 4);
 8000c74:	2304      	movs	r3, #4
 8000c76:	2202      	movs	r2, #2
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff ffc2 	bl	8000c04 <frame_expect_req>
 8000c80:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <move_queue_status_req_decoder+0x36>
		return st;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	e005      	b.n	8000c98 <move_queue_status_req_decoder+0x42>
	out->frameId = raw[2];
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d011      	beq.n	8000ce0 <has_header_tail+0x40>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d90e      	bls.n	8000ce0 <has_header_tail+0x40>
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d109      	bne.n	8000ce0 <has_header_tail+0x40>
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	79ba      	ldrb	r2, [r7, #6]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d101      	bne.n	8000ce0 <has_header_tail+0x40>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <has_header_tail+0x42>
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <frame_expect_req+0x1e>
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d202      	bcs.n	8000d12 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	e012      	b.n	8000d38 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000d12:	2355      	movs	r3, #85	@ 0x55
 8000d14:	22aa      	movs	r2, #170	@ 0xaa
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff ffc1 	bl	8000ca0 <has_header_tail>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d002      	beq.n	8000d36 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000d30:	f06f 0301 	mvn.w	r3, #1
 8000d34:	e000      	b.n	8000d38 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <set_microsteps_req_decoder>:
#include "Protocol/Requests/set_microsteps_request.h"

int set_microsteps_req_decoder(const uint8_t *raw, uint32_t len, set_microsteps_req_t *out) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <set_microsteps_req_decoder+0x18>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <set_microsteps_req_decoder+0x1e>
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	e017      	b.n	8000d8e <set_microsteps_req_decoder+0x4e>
    int st = frame_expect_req(raw, len, REQ_SET_MICROSTEPS, 5);
 8000d5e:	2305      	movs	r3, #5
 8000d60:	2226      	movs	r2, #38	@ 0x26
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff ffc2 	bl	8000cee <frame_expect_req>
 8000d6a:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <set_microsteps_req_decoder+0x36>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	e00b      	b.n	8000d8e <set_microsteps_req_decoder+0x4e>
    out->frameId = raw[2];
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3302      	adds	r3, #2
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	701a      	strb	r2, [r3, #0]
    out->microsteps = (uint16_t)raw[3];
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3303      	adds	r3, #3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	805a      	strh	r2, [r3, #2]
    return PROTO_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	4611      	mov	r1, r2
 8000da2:	461a      	mov	r2, r3
 8000da4:	460b      	mov	r3, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d011      	beq.n	8000dd6 <has_header_tail+0x40>
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d90e      	bls.n	8000dd6 <has_header_tail+0x40>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d109      	bne.n	8000dd6 <has_header_tail+0x40>
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d101      	bne.n	8000dd6 <has_header_tail+0x40>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <has_header_tail+0x42>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <frame_expect_req+0x1e>
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d202      	bcs.n	8000e08 <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e012      	b.n	8000e2e <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000e08:	2355      	movs	r3, #85	@ 0x55
 8000e0a:	22aa      	movs	r2, #170	@ 0xaa
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff ffc1 	bl	8000d96 <has_header_tail>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d002      	beq.n	8000e2c <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000e26:	f06f 0301 	mvn.w	r3, #1
 8000e2a:	e000      	b.n	8000e2e <frame_expect_req+0x4a>
	return PROTO_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <set_origin_req_decoder>:
#include "Protocol/Requests/set_origin_request.h"

int set_origin_req_decoder(const uint8_t *raw, uint32_t len, set_origin_req_t *out) {
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
    if (!raw || !out) return PROTO_ERR_ARG;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <set_origin_req_decoder+0x18>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <set_origin_req_decoder+0x1e>
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e01e      	b.n	8000e92 <set_origin_req_decoder+0x5c>
    int st = frame_expect_req(raw, len, REQ_SET_ORIGIN, 6);
 8000e54:	2306      	movs	r3, #6
 8000e56:	2224      	movs	r2, #36	@ 0x24
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff ffc2 	bl	8000de4 <frame_expect_req>
 8000e60:	6178      	str	r0, [r7, #20]
    if (st != PROTO_OK) return st;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <set_origin_req_decoder+0x36>
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	e012      	b.n	8000e92 <set_origin_req_decoder+0x5c>
    out->frameId = raw[2];
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	701a      	strb	r2, [r3, #0]
    out->mask = raw[3] & 0x07u;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3303      	adds	r3, #3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	705a      	strb	r2, [r3, #1]
    out->mode = raw[4];
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	709a      	strb	r2, [r3, #2]
    return PROTO_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <has_header_tail>:
		uint8_t header, uint8_t tail) {
 8000e9a:	b480      	push	{r7}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
	return raw && len >= 2 && raw[0] == header && raw[len - 1] == tail;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d011      	beq.n	8000eda <has_header_tail+0x40>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d90e      	bls.n	8000eda <has_header_tail+0x40>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d109      	bne.n	8000eda <has_header_tail+0x40>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	79ba      	ldrb	r2, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d101      	bne.n	8000eda <has_header_tail+0x40>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <has_header_tail+0x42>
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <frame_expect_req>:
		req_msg_type_t type, uint32_t min_len) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71fb      	strb	r3, [r7, #7]
	if (!raw || len < min_len)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <frame_expect_req+0x1e>
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d202      	bcs.n	8000f0c <frame_expect_req+0x24>
		return PROTO_ERR_ARG;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e012      	b.n	8000f32 <frame_expect_req+0x4a>
	if (!has_header_tail(raw, len, REQ_HEADER, REQ_TAIL)
 8000f0c:	2355      	movs	r3, #85	@ 0x55
 8000f0e:	22aa      	movs	r2, #170	@ 0xaa
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f7ff ffc1 	bl	8000e9a <has_header_tail>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <frame_expect_req+0x42>
			|| raw[1] != (uint8_t) type)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	79fa      	ldrb	r2, [r7, #7]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d002      	beq.n	8000f30 <frame_expect_req+0x48>
		return PROTO_ERR_FRAME;
 8000f2a:	f06f 0301 	mvn.w	r3, #1
 8000f2e:	e000      	b.n	8000f32 <frame_expect_req+0x4a>
	return PROTO_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <start_move_req_decoder>:
#include "Protocol/Requests/start_move_request.h"

int start_move_req_decoder(const uint8_t *raw, uint32_t len,
		start_move_req_t *out) {
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	if (!raw || !out)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <start_move_req_decoder+0x18>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <start_move_req_decoder+0x1e>
		return PROTO_ERR_ARG;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e011      	b.n	8000f7c <start_move_req_decoder+0x42>
	int st = frame_expect_req(raw, len, REQ_START_MOVE, 4);
 8000f58:	2304      	movs	r3, #4
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ffc2 	bl	8000ee8 <frame_expect_req>
 8000f64:	6178      	str	r0, [r7, #20]
	if (st != PROTO_OK)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <start_move_req_decoder+0x36>
		return st;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	e005      	b.n	8000f7c <start_move_req_decoder+0x42>
	out->frameId = raw[2];
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3302      	adds	r3, #2
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	701a      	strb	r2, [r3, #0]
	return PROTO_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <be32_write>:
}
static inline void be16_write(uint8_t *p, uint16_t v) {
	p[0] = (uint8_t) (v >> 8);
	p[1] = (uint8_t) v;
}
static inline void be32_write(uint8_t *p, uint32_t v) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	p[0] = (uint8_t) (v >> 24);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	0e1b      	lsrs	r3, r3, #24
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	701a      	strb	r2, [r3, #0]
	p[1] = (uint8_t) (v >> 16);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	0c1a      	lsrs	r2, r3, #16
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
	p[2] = (uint8_t) (v >> 8);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	0a1a      	lsrs	r2, r3, #8
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3302      	adds	r3, #2
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
	p[3] = (uint8_t) v;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3303      	adds	r3, #3
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <resp_init>:
// =====================
static inline void req_init(uint8_t *raw, req_msg_type_t type) {
	raw[0] = REQ_HEADER;
	raw[1] = (uint8_t) type;
}
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	22ab      	movs	r2, #171	@ 0xab
 8000fd6:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	701a      	strb	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <resp_set_tail>:
static inline void req_set_tail(uint8_t *raw, uint32_t tail_index) {
	raw[tail_index] = REQ_TAIL;
}
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2254      	movs	r2, #84	@ 0x54
 8000ffe:	701a      	strb	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <encoder_status_resp_encoder>:
#include "Protocol/Responses/encoder_status_response.h"

int encoder_status_resp_encoder(const encoder_status_resp_t *in, uint8_t *raw, uint32_t len) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    if (!raw || !in || len < 20) return PROTO_ERR_ARG;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <encoder_status_resp_encoder+0x1e>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <encoder_status_resp_encoder+0x1e>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b13      	cmp	r3, #19
 8001028:	d802      	bhi.n	8001030 <encoder_status_resp_encoder+0x24>
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e03b      	b.n	80010a8 <encoder_status_resp_encoder+0x9c>
    resp_init(raw, RESP_ENCODER_STATUS);
 8001030:	2125      	movs	r1, #37	@ 0x25
 8001032:	68b8      	ldr	r0, [r7, #8]
 8001034:	f7ff ffc7 	bl	8000fc6 <resp_init>
    raw[2] = in->frameId;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3302      	adds	r3, #2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	7812      	ldrb	r2, [r2, #0]
 8001040:	701a      	strb	r2, [r3, #0]
    raw[3] = in->pidErrX;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3303      	adds	r3, #3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	7852      	ldrb	r2, [r2, #1]
 800104a:	701a      	strb	r2, [r3, #0]
    raw[4] = in->pidErrY;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3304      	adds	r3, #4
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	7892      	ldrb	r2, [r2, #2]
 8001054:	701a      	strb	r2, [r3, #0]
    raw[5] = in->pidErrZ;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	3305      	adds	r3, #5
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	78d2      	ldrb	r2, [r2, #3]
 800105e:	701a      	strb	r2, [r3, #0]
    raw[6] = in->delta;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3306      	adds	r3, #6
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	7912      	ldrb	r2, [r2, #4]
 8001068:	701a      	strb	r2, [r3, #0]
    be32_write(&raw[7],  (uint32_t)in->absX);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1dda      	adds	r2, r3, #7
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4619      	mov	r1, r3
 8001074:	4610      	mov	r0, r2
 8001076:	f7ff ff85 	bl	8000f84 <be32_write>
    be32_write(&raw[11], (uint32_t)in->absY);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f103 020b 	add.w	r2, r3, #11
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f7ff ff7c 	bl	8000f84 <be32_write>
    be32_write(&raw[15], (uint32_t)in->absZ);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	f103 020f 	add.w	r2, r3, #15
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f7ff ff73 	bl	8000f84 <be32_write>
    resp_set_tail(raw, 19);
 800109e:	2113      	movs	r1, #19
 80010a0:	68b8      	ldr	r0, [r7, #8]
 80010a2:	f7ff ffa3 	bl	8000fec <resp_set_tail>
    return PROTO_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <xor_reduce_bytes>:
static inline uint8_t xor_reduce_bytes(const uint8_t *p, uint32_t n) {
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e009      	b.n	80010d8 <xor_reduce_bytes+0x28>
		x ^= p[i];
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	4053      	eors	r3, r2
 80010d0:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3f1      	bcc.n	80010c4 <xor_reduce_bytes+0x14>
	return x;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <set_parity_byte>:
		uint32_t parity_index) {
 80010ee:	b590      	push	{r4, r7, lr}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	603b      	str	r3, [r7, #0]
	if (!raw)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <set_parity_byte+0x1a>
		return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e00b      	b.n	8001120 <set_parity_byte+0x32>
	raw[parity_index] = xor_reduce_bytes(raw + start, count);
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	18d0      	adds	r0, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	18d4      	adds	r4, r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	f7ff ffcb 	bl	80010b0 <xor_reduce_bytes>
 800111a:	4603      	mov	r3, r0
 800111c:	7023      	strb	r3, [r4, #0]
	return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}

08001128 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	22ab      	movs	r2, #171	@ 0xab
 8001138:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	78fa      	ldrb	r2, [r7, #3]
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	2254      	movs	r2, #84	@ 0x54
 8001160:	701a      	strb	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <parity_set_byte_1N>:
// =====================
// Wrappers de paridade (intervalo 1..N)
// =====================
// Assume que a paridade cobre os bytes do índice 1 (tipo) até last_index inclusive
static inline int parity_set_byte_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
	return set_parity_byte(raw, 1, last_index, parity_index);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	2101      	movs	r1, #1
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ffb4 	bl	80010ee <set_parity_byte>
 8001186:	4603      	mov	r3, r0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <led_ctrl_resp_encoder>:
uint8_t led_ctrl_resp_calc_parity(const led_ctrl_resp_t *in) {
	uint8_t b[4] = { RESP_LED_CTRL, in ? in->frameId : 0, in ? in->ledMask : 0,
			in ? in->status : 0 };
	return xor_reduce_bytes(b, 4);
}
int led_ctrl_resp_encoder(const led_ctrl_resp_t *in, uint8_t *raw, uint32_t len) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 7)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <led_ctrl_resp_encoder+0x1e>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <led_ctrl_resp_encoder+0x1e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d802      	bhi.n	80011b4 <led_ctrl_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e01c      	b.n	80011ee <led_ctrl_resp_encoder+0x5e>
	resp_init(raw, RESP_LED_CTRL);
 80011b4:	2107      	movs	r1, #7
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff ffb6 	bl	8001128 <resp_init>
	raw[2] = in->frameId;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3302      	adds	r3, #2
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	701a      	strb	r2, [r3, #0]
	raw[3] = in->ledMask;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3303      	adds	r3, #3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	7852      	ldrb	r2, [r2, #1]
 80011ce:	701a      	strb	r2, [r3, #0]
	raw[4] = in->status;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3304      	adds	r3, #4
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	7892      	ldrb	r2, [r2, #2]
 80011d8:	701a      	strb	r2, [r3, #0]
	parity_set_byte_1N(raw, 4, 5);
 80011da:	2205      	movs	r2, #5
 80011dc:	2104      	movs	r1, #4
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f7ff ffc5 	bl	800116e <parity_set_byte_1N>
	resp_set_tail(raw, 6);
 80011e4:	2106      	movs	r1, #6
 80011e6:	68b8      	ldr	r0, [r7, #8]
 80011e8:	f7ff ffb1 	bl	800114e <resp_set_tail>
	return PROTO_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	22ab      	movs	r2, #171	@ 0xab
 8001206:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	78fa      	ldrb	r2, [r7, #3]
 800120e:	701a      	strb	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4413      	add	r3, r2
 800122c:	2254      	movs	r2, #84	@ 0x54
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <move_end_resp_encoder>:
		return st;
	out->frameId = raw[2];
	out->status  = raw[3];
	return PROTO_OK;
}
int move_end_resp_encoder(const move_end_resp_t *in, uint8_t *raw, uint32_t len) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 5)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <move_end_resp_encoder+0x1e>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <move_end_resp_encoder+0x1e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d802      	bhi.n	8001260 <move_end_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e012      	b.n	8001286 <move_end_resp_encoder+0x4a>
	resp_init(raw, RESP_MOVE_END);
 8001260:	2106      	movs	r1, #6
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f7ff ffc7 	bl	80011f6 <resp_init>
	raw[2] = in->frameId;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3302      	adds	r3, #2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3303      	adds	r3, #3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	7852      	ldrb	r2, [r2, #1]
 800127a:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 4);
 800127c:	2104      	movs	r1, #4
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f7ff ffcc 	bl	800121c <resp_set_tail>
	return PROTO_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	e009      	b.n	80012b6 <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4413      	add	r3, r2
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	4053      	eors	r3, r2
 80012ae:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3f1      	bcc.n	80012a2 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	4053      	eors	r3, r2
 80012c8:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	4053      	eors	r3, r2
 80012d4:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	4053      	eors	r3, r2
 80012e0:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <set_parity_bit>:
		uint32_t parity_index) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	603b      	str	r3, [r7, #0]
	if (!raw)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <set_parity_bit+0x1a>
		return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e010      	b.n	8001332 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4413      	add	r3, r2
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffb8 	bl	800128e <xor_bit_reduce_bytes>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	f001 0201 	and.w	r2, r1, #1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	22ab      	movs	r2, #171	@ 0xab
 800134a:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	78fa      	ldrb	r2, [r7, #3]
 8001352:	701a      	strb	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	2254      	movs	r2, #84	@ 0x54
 8001372:	701a      	strb	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <parity_set_bit_1N>:
static inline int parity_check_byte_1N(const uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
	return check_parity_byte(raw, 1, last_index, parity_index);
}
static inline int parity_set_bit_1N(uint8_t *raw, uint32_t last_index,
		uint32_t parity_index) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	2101      	movs	r1, #1
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff ffaf 	bl	80012f6 <set_parity_bit>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <move_queue_add_ack_resp_encoder>:
	uint8_t b[3] = { RESP_MOVE_QUEUE_ADD_ACK, in ? in->frameId : 0,
			in ? in->status : 0 };
	return xor_bit_reduce_bytes(b, 3);
}
int move_queue_add_ack_resp_encoder(const move_queue_add_ack_resp_t *in,
		uint8_t *raw, uint32_t len) {
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <move_queue_add_ack_resp_encoder+0x1e>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <move_queue_add_ack_resp_encoder+0x1e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d802      	bhi.n	80013c6 <move_queue_add_ack_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	e017      	b.n	80013f6 <move_queue_add_ack_resp_encoder+0x54>
	resp_init(raw, RESP_MOVE_QUEUE_ADD_ACK);
 80013c6:	2101      	movs	r1, #1
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f7ff ffb6 	bl	800133a <resp_init>
	raw[2] = in->frameId;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3302      	adds	r3, #2
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3303      	adds	r3, #3
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	7852      	ldrb	r2, [r2, #1]
 80013e0:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 3, 4);
 80013e2:	2204      	movs	r2, #4
 80013e4:	2103      	movs	r1, #3
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f7ff ffca 	bl	8001380 <parity_set_bit_1N>
	resp_set_tail(raw, 5);
 80013ec:	2105      	movs	r1, #5
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f7ff ffb6 	bl	8001360 <resp_set_tail>
	return PROTO_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <xor_bit_reduce_bytes>:
static inline uint8_t xor_bit_reduce_bytes(const uint8_t *p, uint32_t n) {
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
	uint8_t x = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	e009      	b.n	8001426 <xor_bit_reduce_bytes+0x28>
		x ^= p[i];
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4413      	add	r3, r2
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	4053      	eors	r3, r2
 800141e:	73fb      	strb	r3, [r7, #15]
	for (uint32_t i = 0; i < n; ++i)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3301      	adds	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d3f1      	bcc.n	8001412 <xor_bit_reduce_bytes+0x14>
	x ^= (uint8_t) (x >> 4);
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	b2da      	uxtb	r2, r3
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	4053      	eors	r3, r2
 8001438:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 2);
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	b2da      	uxtb	r2, r3
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	4053      	eors	r3, r2
 8001444:	73fb      	strb	r3, [r7, #15]
	x ^= (uint8_t) (x >> 1);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	085b      	lsrs	r3, r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	4053      	eors	r3, r2
 8001450:	73fb      	strb	r3, [r7, #15]
	return (uint8_t) (x & 0x1);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <set_parity_bit>:
		uint32_t parity_index) {
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	603b      	str	r3, [r7, #0]
	if (!raw)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <set_parity_bit+0x1a>
		return -1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e010      	b.n	80014a2 <set_parity_bit+0x3c>
	raw[parity_index] = (uint8_t) (xor_bit_reduce_bytes(raw + start, count)
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	4413      	add	r3, r2
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffb8 	bl	80013fe <xor_bit_reduce_bytes>
 800148e:	4603      	mov	r3, r0
 8001490:	4619      	mov	r1, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	f001 0201 	and.w	r2, r1, #1
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]
	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	22ab      	movs	r2, #171	@ 0xab
 80014ba:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	701a      	strb	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	2254      	movs	r2, #84	@ 0x54
 80014e2:	701a      	strb	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <parity_set_bit_1N>:
		uint32_t parity_index) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	return set_parity_bit(raw, 1, last_index, parity_index);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	2101      	movs	r1, #1
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff ffaf 	bl	8001466 <set_parity_bit>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <move_queue_status_resp_encoder>:
			in ? in->pidErrZ : 0, in ? in->pctX : 0, in ? in->pctY : 0,
			in ? in->pctZ : 0 };
	return xor_bit_reduce_bytes(b, 9);
}
int move_queue_status_resp_encoder(const move_queue_status_resp_t *in,
		uint8_t *raw, uint32_t len) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 12)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <move_queue_status_resp_encoder+0x1e>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <move_queue_status_resp_encoder+0x1e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0b      	cmp	r3, #11
 800152e:	d802      	bhi.n	8001536 <move_queue_status_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
 8001534:	e035      	b.n	80015a2 <move_queue_status_resp_encoder+0x90>
	resp_init(raw, RESP_MOVE_QUEUE_STATUS);
 8001536:	2102      	movs	r1, #2
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff ffb6 	bl	80014aa <resp_init>
	raw[2] = in->frameId;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3302      	adds	r3, #2
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	3303      	adds	r3, #3
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	7852      	ldrb	r2, [r2, #1]
 8001550:	701a      	strb	r2, [r3, #0]
	raw[4] = in->pidErrX;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3304      	adds	r3, #4
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	7892      	ldrb	r2, [r2, #2]
 800155a:	701a      	strb	r2, [r3, #0]
	raw[5] = in->pidErrY;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3305      	adds	r3, #5
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	78d2      	ldrb	r2, [r2, #3]
 8001564:	701a      	strb	r2, [r3, #0]
	raw[6] = in->pidErrZ;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3306      	adds	r3, #6
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	7912      	ldrb	r2, [r2, #4]
 800156e:	701a      	strb	r2, [r3, #0]
	raw[7] = in->pctX;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3307      	adds	r3, #7
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	7952      	ldrb	r2, [r2, #5]
 8001578:	701a      	strb	r2, [r3, #0]
	raw[8] = in->pctY;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3308      	adds	r3, #8
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	7992      	ldrb	r2, [r2, #6]
 8001582:	701a      	strb	r2, [r3, #0]
	raw[9] = in->pctZ;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3309      	adds	r3, #9
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	79d2      	ldrb	r2, [r2, #7]
 800158c:	701a      	strb	r2, [r3, #0]
	parity_set_bit_1N(raw, 9, 10);
 800158e:	220a      	movs	r2, #10
 8001590:	2109      	movs	r1, #9
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff ffac 	bl	80014f0 <parity_set_bit_1N>
	resp_set_tail(raw, 11);
 8001598:	210b      	movs	r1, #11
 800159a:	68b8      	ldr	r0, [r7, #8]
 800159c:	f7ff ff98 	bl	80014d0 <resp_set_tail>
	return PROTO_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <be32_write>:
static inline void be32_write(uint8_t *p, uint32_t v) {
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	p[0] = (uint8_t) (v >> 24);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	0e1b      	lsrs	r3, r3, #24
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	701a      	strb	r2, [r3, #0]
	p[1] = (uint8_t) (v >> 16);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	0c1a      	lsrs	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
	p[2] = (uint8_t) (v >> 8);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	0a1a      	lsrs	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3302      	adds	r3, #2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
	p[3] = (uint8_t) v;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3303      	adds	r3, #3
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	22ab      	movs	r2, #171	@ 0xab
 80015fc:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	2254      	movs	r2, #84	@ 0x54
 8001624:	701a      	strb	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <set_origin_resp_encoder>:
#include "Protocol/Responses/set_origin_response.h"

int set_origin_resp_encoder(const set_origin_resp_t *in, uint8_t *raw, uint32_t len) {
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
    if (!raw || !in || len < 16) return PROTO_ERR_ARG;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <set_origin_resp_encoder+0x1e>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <set_origin_resp_encoder+0x1e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d802      	bhi.n	8001656 <set_origin_resp_encoder+0x24>
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	e026      	b.n	80016a4 <set_origin_resp_encoder+0x72>
    resp_init(raw, RESP_SET_ORIGIN);
 8001656:	2124      	movs	r1, #36	@ 0x24
 8001658:	68b8      	ldr	r0, [r7, #8]
 800165a:	f7ff ffc7 	bl	80015ec <resp_init>
    raw[2] = in->frameId;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3302      	adds	r3, #2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	701a      	strb	r2, [r3, #0]
    be32_write(&raw[3], (uint32_t)in->x0);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1cda      	adds	r2, r3, #3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f7ff ff99 	bl	80015aa <be32_write>
    be32_write(&raw[7], (uint32_t)in->y0);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1dda      	adds	r2, r3, #7
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff ff91 	bl	80015aa <be32_write>
    be32_write(&raw[11], (uint32_t)in->z0);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f103 020b 	add.w	r2, r3, #11
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f7ff ff88 	bl	80015aa <be32_write>
    resp_set_tail(raw, 15);
 800169a:	210f      	movs	r1, #15
 800169c:	68b8      	ldr	r0, [r7, #8]
 800169e:	f7ff ffb8 	bl	8001612 <resp_set_tail>
    return PROTO_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <resp_init>:
static inline void resp_init(uint8_t *raw, resp_msg_type_t type) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
	raw[0] = RESP_HEADER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	22ab      	movs	r2, #171	@ 0xab
 80016bc:	701a      	strb	r2, [r3, #0]
	raw[1] = (uint8_t) type;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	701a      	strb	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <resp_set_tail>:
static inline void resp_set_tail(uint8_t *raw, uint32_t tail_index) {
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
	raw[tail_index] = RESP_TAIL;
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	2254      	movs	r2, #84	@ 0x54
 80016e4:	701a      	strb	r2, [r3, #0]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <start_move_resp_encoder>:
	out->status = raw[3];
	out->depth  = raw[4];
	return PROTO_OK;
}
int start_move_resp_encoder(const start_move_resp_t *in, uint8_t *raw,
		uint32_t len) {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
	if (!raw || !in || len < 6)
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <start_move_resp_encoder+0x1e>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <start_move_resp_encoder+0x1e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d802      	bhi.n	8001716 <start_move_resp_encoder+0x24>
		return PROTO_ERR_ARG;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	e017      	b.n	8001746 <start_move_resp_encoder+0x54>
	resp_init(raw, RESP_START_MOVE);
 8001716:	2103      	movs	r1, #3
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	f7ff ffc7 	bl	80016ac <resp_init>
	raw[2] = in->frameId;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3302      	adds	r3, #2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
	raw[3] = in->status;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3303      	adds	r3, #3
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	7852      	ldrb	r2, [r2, #1]
 8001730:	701a      	strb	r2, [r3, #0]
	raw[4] = in->depth;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3304      	adds	r3, #4
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	7892      	ldrb	r2, [r2, #2]
 800173a:	701a      	strb	r2, [r3, #0]
	resp_set_tail(raw, 5);
 800173c:	2105      	movs	r1, #5
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f7ff ffc7 	bl	80016d2 <resp_set_tail>
	return PROTO_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <resp_fifo_create>:
struct response_fifo_s {
    node_t *head, *tail;
    int count;
};

response_fifo_t* resp_fifo_create(void) {
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
    return (response_fifo_t*)calloc(1, sizeof(response_fifo_t));
 8001752:	210c      	movs	r1, #12
 8001754:	2001      	movs	r0, #1
 8001756:	f00d fc23 	bl	800efa0 <calloc>
 800175a:	4603      	mov	r3, r0
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}

08001760 <resp_fifo_push>:
        free(n);
    }
    free(q);
}

int resp_fifo_push(response_fifo_t *q, const uint8_t *frame, uint32_t len) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
    if (!q || !frame || len == 0) return PROTO_ERR_ARG;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <resp_fifo_push+0x1e>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <resp_fifo_push+0x1e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <resp_fifo_push+0x24>
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e03d      	b.n	8001800 <resp_fifo_push+0xa0>
    node_t *n = (node_t*)malloc(sizeof(*n));
 8001784:	200c      	movs	r0, #12
 8001786:	f00d fc27 	bl	800efd8 <malloc>
 800178a:	4603      	mov	r3, r0
 800178c:	617b      	str	r3, [r7, #20]
    if (!n) return PROTO_ERR_ALLOC;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <resp_fifo_push+0x3a>
 8001794:	f06f 0302 	mvn.w	r3, #2
 8001798:	e032      	b.n	8001800 <resp_fifo_push+0xa0>
    n->buf = (uint8_t*)malloc(len);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f00d fc1c 	bl	800efd8 <malloc>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	601a      	str	r2, [r3, #0]
    if (!n->buf) { free(n); return PROTO_ERR_ALLOC; }
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <resp_fifo_push+0x5c>
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f00d fc19 	bl	800efe8 <free>
 80017b6:	f06f 0302 	mvn.w	r3, #2
 80017ba:	e021      	b.n	8001800 <resp_fifo_push+0xa0>
    memcpy(n->buf, frame, len);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00e f84a 	bl	800f85e <memcpy>
    n->len = len;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	605a      	str	r2, [r3, #4]
    n->next = NULL;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
    if (q->tail) q->tail->next = n; else q->head = n;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <resp_fifo_push+0x88>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	e002      	b.n	80017ee <resp_fifo_push+0x8e>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]
    q->tail = n;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	605a      	str	r2, [r3, #4]
    q->count++;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	609a      	str	r2, [r3, #8]
    return PROTO_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <resp_fifo_pop>:

int resp_fifo_pop(response_fifo_t *q, uint8_t *out, uint32_t max_len) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
    if (!q || !q->head || !out) return 0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <resp_fifo_pop+0x20>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <resp_fifo_pop+0x20>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <resp_fifo_pop+0x24>
 8001828:	2300      	movs	r3, #0
 800182a:	e02e      	b.n	800188a <resp_fifo_pop+0x82>
    node_t *n = q->head;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	617b      	str	r3, [r7, #20]
    if (n->len > max_len) return PROTO_ERR_RANGE;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	d202      	bcs.n	8001842 <resp_fifo_pop+0x3a>
 800183c:	f06f 0303 	mvn.w	r3, #3
 8001840:	e023      	b.n	800188a <resp_fifo_pop+0x82>
    memcpy(out, n->buf, n->len);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	461a      	mov	r2, r3
 800184c:	68b8      	ldr	r0, [r7, #8]
 800184e:	f00e f806 	bl	800f85e <memcpy>
    int ret = (int)n->len;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	613b      	str	r3, [r7, #16]
    q->head = n->next;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	601a      	str	r2, [r3, #0]
    if (!q->head) q->tail = NULL;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <resp_fifo_pop+0x66>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
    q->count--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	1e5a      	subs	r2, r3, #1
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	609a      	str	r2, [r3, #8]
    free(n->buf);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f00d fbb3 	bl	800efe8 <free>
    free(n);
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f00d fbb0 	bl	800efe8 <free>
    return ret;
 8001888:	693b      	ldr	r3, [r7, #16]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <router_init>:
int resp_fifo_count(const response_fifo_t *q) { return q ? q->count : 0; }

// ---------- Router mínimo ----------
static router_handlers_t g_handlers;  // cópia local dos handlers

void router_init(router_t *r, response_fifo_t *resp_fifo, const router_handlers_t *h) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
    if (!r) return;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01c      	beq.n	80018e0 <router_init+0x4c>
    memset(r, 0, sizeof(*r));
 80018a6:	2248      	movs	r2, #72	@ 0x48
 80018a8:	2100      	movs	r1, #0
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f00d ff4c 	bl	800f748 <memset>
    r->resp = resp_fifo;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44
    memset(&g_handlers, 0, sizeof g_handlers);
 80018b6:	2230      	movs	r2, #48	@ 0x30
 80018b8:	2100      	movs	r1, #0
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <router_init+0x54>)
 80018bc:	f00d ff44 	bl	800f748 <memset>
    if (h) g_handlers = *h;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00d      	beq.n	80018e2 <router_init+0x4e>
 80018c6:	4a08      	ldr	r2, [pc, #32]	@ (80018e8 <router_init+0x54>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4614      	mov	r4, r2
 80018cc:	461d      	mov	r5, r3
 80018ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018de:	e000      	b.n	80018e2 <router_init+0x4e>
    if (!r) return;
 80018e0:	bf00      	nop
}
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdb0      	pop	{r4, r5, r7, pc}
 80018e8:	2000009c 	.word	0x2000009c

080018ec <dispatch>:

static void dispatch(router_t *r, const uint8_t *f, uint32_t len) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
    if (!r || !f || len < 4) return;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80ee 	beq.w	8001adc <dispatch+0x1f0>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80ea 	beq.w	8001adc <dispatch+0x1f0>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b03      	cmp	r3, #3
 800190c:	f240 80e6 	bls.w	8001adc <dispatch+0x1f0>
    uint8_t type = f[1];
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	3301      	adds	r3, #1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	75fb      	strb	r3, [r7, #23]

    // Helper pra reduzir ruído
    #define CALL(h) do{ if (g_handlers.h) g_handlers.h(r, f, len); }while(0)

    switch (type) {
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	2b26      	cmp	r3, #38	@ 0x26
 800191c:	dc56      	bgt.n	80019cc <dispatch+0xe0>
 800191e:	2b00      	cmp	r3, #0
 8001920:	f340 80de 	ble.w	8001ae0 <dispatch+0x1f4>
 8001924:	3b01      	subs	r3, #1
 8001926:	2b25      	cmp	r3, #37	@ 0x25
 8001928:	f200 80da 	bhi.w	8001ae0 <dispatch+0x1f4>
 800192c:	a201      	add	r2, pc, #4	@ (adr r2, 8001934 <dispatch+0x48>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	080019d3 	.word	0x080019d3
 8001938:	080019eb 	.word	0x080019eb
 800193c:	08001a01 	.word	0x08001a01
 8001940:	08001a17 	.word	0x08001a17
 8001944:	08001a2d 	.word	0x08001a2d
 8001948:	08001a43 	.word	0x08001a43
 800194c:	08001a59 	.word	0x08001a59
 8001950:	08001ae1 	.word	0x08001ae1
 8001954:	08001ae1 	.word	0x08001ae1
 8001958:	08001ae1 	.word	0x08001ae1
 800195c:	08001ae1 	.word	0x08001ae1
 8001960:	08001ae1 	.word	0x08001ae1
 8001964:	08001ae1 	.word	0x08001ae1
 8001968:	08001ae1 	.word	0x08001ae1
 800196c:	08001ae1 	.word	0x08001ae1
 8001970:	08001ae1 	.word	0x08001ae1
 8001974:	08001ae1 	.word	0x08001ae1
 8001978:	08001ae1 	.word	0x08001ae1
 800197c:	08001ae1 	.word	0x08001ae1
 8001980:	08001ae1 	.word	0x08001ae1
 8001984:	08001ae1 	.word	0x08001ae1
 8001988:	08001ae1 	.word	0x08001ae1
 800198c:	08001ae1 	.word	0x08001ae1
 8001990:	08001ae1 	.word	0x08001ae1
 8001994:	08001ae1 	.word	0x08001ae1
 8001998:	08001ae1 	.word	0x08001ae1
 800199c:	08001ae1 	.word	0x08001ae1
 80019a0:	08001ae1 	.word	0x08001ae1
 80019a4:	08001ae1 	.word	0x08001ae1
 80019a8:	08001ae1 	.word	0x08001ae1
 80019ac:	08001ae1 	.word	0x08001ae1
 80019b0:	08001a6f 	.word	0x08001a6f
 80019b4:	08001ae1 	.word	0x08001ae1
 80019b8:	08001ae1 	.word	0x08001ae1
 80019bc:	08001ae1 	.word	0x08001ae1
 80019c0:	08001a85 	.word	0x08001a85
 80019c4:	08001a9b 	.word	0x08001a9b
 80019c8:	08001ab1 	.word	0x08001ab1
 80019cc:	2b68      	cmp	r3, #104	@ 0x68
 80019ce:	d07a      	beq.n	8001ac6 <dispatch+0x1da>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
        default: /* desconhecido */  break;
 80019d0:	e086      	b.n	8001ae0 <dispatch+0x1f4>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 80019d2:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <dispatch+0x22c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8084 	beq.w	8001ae4 <dispatch+0x1f8>
 80019dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <dispatch+0x22c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	4798      	blx	r3
 80019e8:	e07c      	b.n	8001ae4 <dispatch+0x1f8>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 80019ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <dispatch+0x22c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d07a      	beq.n	8001ae8 <dispatch+0x1fc>
 80019f2:	4b49      	ldr	r3, [pc, #292]	@ (8001b18 <dispatch+0x22c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	4798      	blx	r3
 80019fe:	e073      	b.n	8001ae8 <dispatch+0x1fc>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001a00:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <dispatch+0x22c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d071      	beq.n	8001aec <dispatch+0x200>
 8001a08:	4b43      	ldr	r3, [pc, #268]	@ (8001b18 <dispatch+0x22c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	4798      	blx	r3
 8001a14:	e06a      	b.n	8001aec <dispatch+0x200>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001a16:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <dispatch+0x22c>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d068      	beq.n	8001af0 <dispatch+0x204>
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b18 <dispatch+0x22c>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	4798      	blx	r3
 8001a2a:	e061      	b.n	8001af0 <dispatch+0x204>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8001a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b18 <dispatch+0x22c>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d05f      	beq.n	8001af4 <dispatch+0x208>
 8001a34:	4b38      	ldr	r3, [pc, #224]	@ (8001b18 <dispatch+0x22c>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	4798      	blx	r3
 8001a40:	e058      	b.n	8001af4 <dispatch+0x208>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001a42:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <dispatch+0x22c>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d056      	beq.n	8001af8 <dispatch+0x20c>
 8001a4a:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <dispatch+0x22c>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	4798      	blx	r3
 8001a56:	e04f      	b.n	8001af8 <dispatch+0x20c>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8001a58:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <dispatch+0x22c>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d04d      	beq.n	8001afc <dispatch+0x210>
 8001a60:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <dispatch+0x22c>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	4798      	blx	r3
 8001a6c:	e046      	b.n	8001afc <dispatch+0x210>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <dispatch+0x22c>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d044      	beq.n	8001b00 <dispatch+0x214>
 8001a76:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <dispatch+0x22c>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	4798      	blx	r3
 8001a82:	e03d      	b.n	8001b00 <dispatch+0x214>
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
 8001a84:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <dispatch+0x22c>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03b      	beq.n	8001b04 <dispatch+0x218>
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <dispatch+0x22c>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	4798      	blx	r3
 8001a98:	e034      	b.n	8001b04 <dispatch+0x218>
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <dispatch+0x22c>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d032      	beq.n	8001b08 <dispatch+0x21c>
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <dispatch+0x22c>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	4798      	blx	r3
 8001aae:	e02b      	b.n	8001b08 <dispatch+0x21c>
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <dispatch+0x22c>)
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d029      	beq.n	8001b0c <dispatch+0x220>
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <dispatch+0x22c>)
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	4798      	blx	r3
 8001ac4:	e022      	b.n	8001b0c <dispatch+0x220>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <dispatch+0x22c>)
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d020      	beq.n	8001b10 <dispatch+0x224>
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <dispatch+0x22c>)
 8001ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	4798      	blx	r3
 8001ada:	e019      	b.n	8001b10 <dispatch+0x224>
    if (!r || !f || len < 4) return;
 8001adc:	bf00      	nop
 8001ade:	e018      	b.n	8001b12 <dispatch+0x226>
        default: /* desconhecido */  break;
 8001ae0:	bf00      	nop
 8001ae2:	e016      	b.n	8001b12 <dispatch+0x226>
        case REQ_MOVE_QUEUE_ADD:     CALL(on_move_queue_add);     break;
 8001ae4:	bf00      	nop
 8001ae6:	e014      	b.n	8001b12 <dispatch+0x226>
        case REQ_MOVE_QUEUE_STATUS:  CALL(on_move_queue_status);  break;
 8001ae8:	bf00      	nop
 8001aea:	e012      	b.n	8001b12 <dispatch+0x226>
        case REQ_START_MOVE:         CALL(on_start_move);         break;
 8001aec:	bf00      	nop
 8001aee:	e010      	b.n	8001b12 <dispatch+0x226>
        case REQ_MOVE_HOME:          CALL(on_move_home);          break;
 8001af0:	bf00      	nop
 8001af2:	e00e      	b.n	8001b12 <dispatch+0x226>
        case REQ_MOVE_PROBE_LEVEL:   CALL(on_move_probe_level);   break;
 8001af4:	bf00      	nop
 8001af6:	e00c      	b.n	8001b12 <dispatch+0x226>
        case REQ_MOVE_END:           CALL(on_move_end);           break;
 8001af8:	bf00      	nop
 8001afa:	e00a      	b.n	8001b12 <dispatch+0x226>
        case REQ_LED_CTRL:           CALL(on_led_ctrl);           break;
 8001afc:	bf00      	nop
 8001afe:	e008      	b.n	8001b12 <dispatch+0x226>
        case REQ_STM32_STATUS:       CALL(on_fpga_status);        break;
 8001b00:	bf00      	nop
 8001b02:	e006      	b.n	8001b12 <dispatch+0x226>
        case REQ_SET_ORIGIN:         CALL(on_set_origin);         break;
 8001b04:	bf00      	nop
 8001b06:	e004      	b.n	8001b12 <dispatch+0x226>
        case REQ_ENCODER_STATUS:     CALL(on_encoder_status);     break;
 8001b08:	bf00      	nop
 8001b0a:	e002      	b.n	8001b12 <dispatch+0x226>
        case REQ_SET_MICROSTEPS:     CALL(on_set_microsteps);     break;
 8001b0c:	bf00      	nop
 8001b0e:	e000      	b.n	8001b12 <dispatch+0x226>
        case REQ_TEST_HELLO:         CALL(on_test_hello);         break;
 8001b10:	bf00      	nop
    }
    #undef CALL
}
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000009c 	.word	0x2000009c

08001b1c <router_feed_bytes>:

// Como o app já entrega um frame completo, basta validar header/tail e despachar.
void router_feed_bytes(router_t *r, const uint8_t *data, uint32_t len) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
    if (!r || !data || len < 4) return;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d016      	beq.n	8001b5c <router_feed_bytes+0x40>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <router_feed_bytes+0x40>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d910      	bls.n	8001b5c <router_feed_bytes+0x40>
    if (data[0] != REQ_HEADER) return;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2baa      	cmp	r3, #170	@ 0xaa
 8001b40:	d10e      	bne.n	8001b60 <router_feed_bytes+0x44>
    if (data[len - 1] != REQ_TAIL) return;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b55      	cmp	r3, #85	@ 0x55
 8001b4e:	d109      	bne.n	8001b64 <router_feed_bytes+0x48>
    dispatch(r, data, len);
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7ff fec9 	bl	80018ec <dispatch>
 8001b5a:	e004      	b.n	8001b66 <router_feed_bytes+0x4a>
    if (!r || !data || len < 4) return;
 8001b5c:	bf00      	nop
 8001b5e:	e002      	b.n	8001b66 <router_feed_bytes+0x4a>
    if (data[0] != REQ_HEADER) return;
 8001b60:	bf00      	nop
 8001b62:	e000      	b.n	8001b66 <router_feed_bytes+0x4a>
    if (data[len - 1] != REQ_TAIL) return;
 8001b64:	bf00      	nop
}
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <home_service_init>:

LOG_SVC_DEFINE(LOG_SVC_HOME, "home");

static home_status_t g_home;

void home_service_init(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af04      	add	r7, sp, #16
	g_home.axis_done_mask = 0;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <home_service_init+0x34>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
	g_home.error_flags = 0;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <home_service_init+0x34>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	705a      	strb	r2, [r3, #1]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8001b7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ba4 <home_service_init+0x38>)
 8001b80:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <home_service_init+0x3c>)
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <home_service_init+0x40>)
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <home_service_init+0x44>)
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	2003      	movs	r0, #3
 8001b94:	f000 fd3a 	bl	800260c <log_event_auto>
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200000cc 	.word	0x200000cc
 8001ba4:	08010474 	.word	0x08010474
 8001ba8:	0801047c 	.word	0x0801047c
 8001bac:	08010480 	.word	0x08010480
 8001bb0:	08010484 	.word	0x08010484

08001bb4 <home_on_move_home>:
const home_status_t* home_status_get(void) {
	return &g_home;
}

void home_on_move_home(const uint8_t *frame, uint32_t len) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af04      	add	r7, sp, #16
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de homing */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_home", "not_implemented");
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <home_on_move_home+0x2c>)
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <home_on_move_home+0x30>)
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <home_on_move_home+0x34>)
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <home_on_move_home+0x38>)
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 fd1a 	bl	800260c <log_event_auto>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	08010474 	.word	0x08010474
 8001be4:	0801048c 	.word	0x0801048c
 8001be8:	08010480 	.word	0x08010480
 8001bec:	0801049c 	.word	0x0801049c

08001bf0 <led_gpio_config_output>:
#else
#define LED_GPIO_ON_LEVEL  GPIO_PIN_RESET
#define LED_GPIO_OFF_LEVEL GPIO_PIN_SET
#endif

static void led_gpio_config_output(const led_channel_state_t *led) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    if (!led)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <led_gpio_config_output+0x42>
        return;
    GPIO_InitTypeDef gi = {0};
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	889b      	ldrh	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(led->port, &gi);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f107 020c 	add.w	r2, r7, #12
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 fb6a 	bl	8007304 <HAL_GPIO_Init>
 8001c30:	e000      	b.n	8001c34 <led_gpio_config_output+0x44>
        return;
 8001c32:	bf00      	nop
}
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <led_gpio_config_pwm>:

static void led_gpio_config_pwm(const led_channel_state_t *led) {
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b088      	sub	sp, #32
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
    if (!led)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01c      	beq.n	8001c82 <led_gpio_config_pwm+0x48>
        return;
    GPIO_InitTypeDef gi = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
    gi.Pin = led->pin;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	889b      	ldrh	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
    gi.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	613b      	str	r3, [r7, #16]
    gi.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
    gi.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
    gi.Alternate = led->alternate;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led->port, &gi);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f107 020c 	add.w	r2, r7, #12
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f005 fb42 	bl	8007304 <HAL_GPIO_Init>
 8001c80:	e000      	b.n	8001c84 <led_gpio_config_pwm+0x4a>
        return;
 8001c82:	bf00      	nop
}
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <led_push_response>:
 *    resposta; em caso negativo, registra o erro e abandona o envio para evitar
 *    inserir dados inválidos na fila.
 *  - Após a codificação, confere o resultado de app_resp_push para sinalizar e
 *    logar falhas na fila de saída (por exemplo, quando estiver cheia).
 */
static void led_push_response(uint8_t frame_id, uint8_t mask, uint8_t status) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	460b      	mov	r3, r1
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	717b      	strb	r3, [r7, #5]
    uint8_t raw[7];
    led_ctrl_resp_t resp = { frame_id, mask, status };
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	733b      	strb	r3, [r7, #12]
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	737b      	strb	r3, [r7, #13]
 8001ca6:	797b      	ldrb	r3, [r7, #5]
 8001ca8:	73bb      	strb	r3, [r7, #14]
    if (led_ctrl_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8001caa:	f107 0110 	add.w	r1, r7, #16
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fa6b 	bl	8001190 <led_ctrl_resp_encoder>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00c      	beq.n	8001cda <led_push_response+0x4e>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "resp", "failed to encode led ack");
 8001cc0:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <led_push_response+0x80>)
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <led_push_response+0x84>)
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <led_push_response+0x88>)
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	f06f 0201 	mvn.w	r2, #1
 8001cd0:	2164      	movs	r1, #100	@ 0x64
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 fc9a 	bl	800260c <log_event_auto>
 8001cd8:	e014      	b.n	8001d04 <led_push_response+0x78>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	2107      	movs	r1, #7
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fc6f 	bl	80055c4 <app_resp_push>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <led_push_response+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "resp", "failed to queue led ack");
 8001cec:	4a07      	ldr	r2, [pc, #28]	@ (8001d0c <led_push_response+0x80>)
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <led_push_response+0x8c>)
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <led_push_response+0x88>)
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	f06f 0203 	mvn.w	r2, #3
 8001cfc:	2164      	movs	r1, #100	@ 0x64
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f000 fc84 	bl	800260c <log_event_auto>
    }
}
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	080104a8 	.word	0x080104a8
 8001d10:	080104ac 	.word	0x080104ac
 8001d14:	080104c8 	.word	0x080104c8
 8001d18:	080104d0 	.word	0x080104d0

08001d1c <led_timer_get_clock>:

static uint32_t led_timer_get_clock(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
    uint32_t clk = HAL_RCC_GetPCLK2Freq();
 8001d22:	f007 faa7 	bl	8009274 <HAL_RCC_GetPCLK2Freq>
 8001d26:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_PPRE2) && defined(RCC_CFGR_PPRE2_DIV1)
    uint32_t presc = (RCC->CFGR & RCC_CFGR_PPRE2);
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <led_timer_get_clock+0x34>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001d30:	603b      	str	r3, [r7, #0]
    if (presc != RCC_CFGR_PPRE2_DIV1 && presc != 0u) {
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <led_timer_get_clock+0x28>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <led_timer_get_clock+0x28>
        clk *= 2u;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
    }
#endif
    return clk;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000

08001d54 <led_compute_period_ticks>:
 * ~1,22 kHz (80 MHz / 65 536). Para atingir frequências como 1 Hz ou 0,2 Hz
 * é necessário reduzir o clock efetivo do TIM15 via prescaler (por exemplo,
 * PSC = 7999 → divisor efetivo 8 000 → f_min ≈ 0,15 Hz).
 */

static uint32_t led_compute_period_ticks(uint16_t freq_centi_hz) {
 8001d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d58:	b094      	sub	sp, #80	@ 0x50
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (freq_centi_hz == 0u)
 8001d60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <led_compute_period_ticks+0x16>
        return 0u;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e066      	b.n	8001e38 <led_compute_period_ticks+0xe4>

    uint32_t timer_clk = led_timer_get_clock();
 8001d6a:	f7ff ffd7 	bl	8001d1c <led_timer_get_clock>
 8001d6e:	6478      	str	r0, [r7, #68]	@ 0x44
    uint32_t prescaler = (uint32_t)htim15.Init.Prescaler + 1u;
 8001d70:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <led_compute_period_ticks+0xf0>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	3301      	adds	r3, #1
 8001d76:	643b      	str	r3, [r7, #64]	@ 0x40
    if (prescaler == 0u)
 8001d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <led_compute_period_ticks+0x2e>
        return 0u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e05a      	b.n	8001e38 <led_compute_period_ticks+0xe4>

    uint32_t clk_per_second = timer_clk / prescaler;
 8001d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (clk_per_second == 0u)
 8001d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <led_compute_period_ticks+0x42>
        return 0u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e050      	b.n	8001e38 <led_compute_period_ticks+0xe4>

    uint64_t scaled_clock = (uint64_t)clk_per_second * 100u;
 8001d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	4642      	mov	r2, r8
 8001da0:	464b      	mov	r3, r9
 8001da2:	1891      	adds	r1, r2, r2
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	415b      	adcs	r3, r3
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dae:	eb12 0408 	adds.w	r4, r2, r8
 8001db2:	eb43 0509 	adc.w	r5, r3, r9
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	016b      	lsls	r3, r5, #5
 8001dc0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001dc4:	0162      	lsls	r2, r4, #5
 8001dc6:	eb14 0a02 	adds.w	sl, r4, r2
 8001dca:	eb45 0b03 	adc.w	fp, r5, r3
 8001dce:	eb1a 0308 	adds.w	r3, sl, r8
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	eb4b 0309 	adc.w	r3, fp, r9
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001dde:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    uint64_t ticks = (scaled_clock + ((uint64_t)freq_centi_hz / 2u)) / (uint64_t)freq_centi_hz;
 8001de2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2200      	movs	r2, #0
 8001dec:	623b      	str	r3, [r7, #32]
 8001dee:	627a      	str	r2, [r7, #36]	@ 0x24
 8001df0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001df4:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001df8:	4621      	mov	r1, r4
 8001dfa:	1889      	adds	r1, r1, r2
 8001dfc:	61b9      	str	r1, [r7, #24]
 8001dfe:	4629      	mov	r1, r5
 8001e00:	eb43 0101 	adc.w	r1, r3, r1
 8001e04:	61f9      	str	r1, [r7, #28]
 8001e06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001e08:	2200      	movs	r2, #0
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	617a      	str	r2, [r7, #20]
 8001e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e16:	f7fe fa7b 	bl	8000310 <__aeabi_uldivmod>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    if (ticks > 0xFFFFFFFFu)
 8001e22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d305      	bcc.n	8001e36 <led_compute_period_ticks+0xe2>
        ticks = 0xFFFFFFFFu;
 8001e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return (uint32_t)ticks;
 8001e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3750      	adds	r7, #80	@ 0x50
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e42:	bf00      	nop
 8001e44:	20001068 	.word	0x20001068

08001e48 <led_apply_pwm>:

static void led_apply_pwm(uint32_t period_ticks, uint32_t pulse_ticks) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
    if (period_ticks == 0u)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <led_apply_pwm+0x14>
        period_ticks = 1u;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	607b      	str	r3, [r7, #4]
    if (pulse_ticks > period_ticks)
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d901      	bls.n	8001e68 <led_apply_pwm+0x20>
        pulse_ticks = period_ticks;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]

    uint32_t arr = (period_ticks > 0u) ? (period_ticks - 1u) : 0u;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <led_apply_pwm+0x2c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	e000      	b.n	8001e76 <led_apply_pwm+0x2e>
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim15, arr);
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <led_apply_pwm+0x5c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e80:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <led_apply_pwm+0x5c>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse_ticks);
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <led_apply_pwm+0x5c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_GenerateEvent(&htim15, TIM_EVENTSOURCE_UPDATE);
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <led_apply_pwm+0x5c>)
 8001e92:	f00a fd61 	bl	800c958 <HAL_TIM_GenerateEvent>
    htim15.Init.Period = arr;
 8001e96:	4a03      	ldr	r2, [pc, #12]	@ (8001ea4 <led_apply_pwm+0x5c>)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20001068 	.word	0x20001068

08001ea8 <led_force_off>:

static void led_force_off(led_channel_state_t *led) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af04      	add	r7, sp, #16
 8001eae:	6078      	str	r0, [r7, #4]
    if (!led)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d029      	beq.n	8001f0a <led_force_off+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8001eb6:	f000 f913 	bl	80020e0 <led_pwm_stop>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00d      	beq.n	8001ee0 <led_force_off+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001ec4:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <led_force_off+0x6c>)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <led_force_off+0x70>)
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <led_force_off+0x74>)
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	f06f 0203 	mvn.w	r2, #3
 8001ed8:	2164      	movs	r1, #100	@ 0x64
 8001eda:	2001      	movs	r0, #1
 8001edc:	f000 fb96 	bl	800260c <log_event_auto>
    }
    led_gpio_config_output(led);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fe85 	bl	8001bf0 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_OFF_LEVEL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	889b      	ldrh	r3, [r3, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f005 fcb3 	bl	800785c <HAL_GPIO_WritePin>
    led->mode = LED_MODE_OFF;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	735a      	strb	r2, [r3, #13]
 8001f08:	e000      	b.n	8001f0c <led_force_off+0x64>
        return;
 8001f0a:	bf00      	nop
}
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	080104a8 	.word	0x080104a8
 8001f18:	080104e8 	.word	0x080104e8
 8001f1c:	0801050c 	.word	0x0801050c

08001f20 <led_force_on>:

static void led_force_on(led_channel_state_t *led) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af04      	add	r7, sp, #16
 8001f26:	6078      	str	r0, [r7, #4]
    if (!led)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d029      	beq.n	8001f82 <led_force_on+0x62>
        return;
    HAL_StatusTypeDef st = led_pwm_stop();
 8001f2e:	f000 f8d7 	bl	80020e0 <led_pwm_stop>
 8001f32:	4603      	mov	r3, r0
 8001f34:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <led_force_on+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao parar PWM do TIM15 (%d)", (int)st);
 8001f3c:	4a13      	ldr	r2, [pc, #76]	@ (8001f8c <led_force_on+0x6c>)
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	9302      	str	r3, [sp, #8]
 8001f42:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <led_force_on+0x70>)
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <led_force_on+0x74>)
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	f06f 0203 	mvn.w	r2, #3
 8001f50:	2164      	movs	r1, #100	@ 0x64
 8001f52:	2001      	movs	r0, #1
 8001f54:	f000 fb5a 	bl	800260c <log_event_auto>
    }
    led_gpio_config_output(led);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fe49 	bl	8001bf0 <led_gpio_config_output>
    HAL_GPIO_WritePin(led->port, led->pin, LED_GPIO_ON_LEVEL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	889b      	ldrh	r3, [r3, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f005 fc77 	bl	800785c <HAL_GPIO_WritePin>
    led->mode = LED_MODE_ON;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = 0u;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	81da      	strh	r2, [r3, #14]
    led->is_on = 1u;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	735a      	strb	r2, [r3, #13]
 8001f80:	e000      	b.n	8001f84 <led_force_on+0x64>
        return;
 8001f82:	bf00      	nop
}
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	080104a8 	.word	0x080104a8
 8001f90:	080104e8 	.word	0x080104e8
 8001f94:	0801050c 	.word	0x0801050c

08001f98 <led_force_blink>:

static void led_force_blink(led_channel_state_t *led, uint16_t freq_centi_hz) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
    if (!led || freq_centi_hz == 0u)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03c      	beq.n	8002024 <led_force_blink+0x8c>
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d039      	beq.n	8002024 <led_force_blink+0x8c>
        return;
    uint32_t period_ticks = led_compute_period_ticks(freq_centi_hz);
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fece 	bl	8001d54 <led_compute_period_ticks>
 8001fb8:	60f8      	str	r0, [r7, #12]
    if (period_ticks < 2u)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d801      	bhi.n	8001fc4 <led_force_blink+0x2c>
        period_ticks = 2u;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	60fb      	str	r3, [r7, #12]
    if (period_ticks > (uint32_t)0x10000u)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fca:	d902      	bls.n	8001fd2 <led_force_blink+0x3a>
        period_ticks = 0x10000u;
 8001fcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd0:	60fb      	str	r3, [r7, #12]

    uint32_t pulse_ticks = period_ticks / 2u;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
    led_gpio_config_pwm(led);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fe2e 	bl	8001c3a <led_gpio_config_pwm>
    led_apply_pwm(period_ticks, pulse_ticks);
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff ff31 	bl	8001e48 <led_apply_pwm>
    if (led_pwm_start() != HAL_OK) {
 8001fe6:	f000 f85d 	bl	80020a4 <led_pwm_start>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00f      	beq.n	8002010 <led_force_blink+0x78>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao iniciar PWM do TIM15");
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800202c <led_force_blink+0x94>)
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <led_force_blink+0x98>)
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <led_force_blink+0x9c>)
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	f06f 0203 	mvn.w	r2, #3
 8002000:	2164      	movs	r1, #100	@ 0x64
 8002002:	2001      	movs	r0, #1
 8002004:	f000 fb02 	bl	800260c <log_event_auto>
        led_force_off(led);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff4d 	bl	8001ea8 <led_force_off>
        return;
 800200e:	e00a      	b.n	8002026 <led_force_blink+0x8e>
    }
    led->mode = LED_MODE_BLINK;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	731a      	strb	r2, [r3, #12]
    led->frequency_centi_hz = freq_centi_hz;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	81da      	strh	r2, [r3, #14]
    led->is_on = 0u;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	735a      	strb	r2, [r3, #13]
 8002022:	e000      	b.n	8002026 <led_force_blink+0x8e>
        return;
 8002024:	bf00      	nop
}
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	080104a8 	.word	0x080104a8
 8002030:	08010514 	.word	0x08010514
 8002034:	0801050c 	.word	0x0801050c

08002038 <led_apply_config>:

static void led_apply_config(led_channel_state_t *led, uint8_t mode, uint16_t freq_centi_hz) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
 8002044:	4613      	mov	r3, r2
 8002046:	803b      	strh	r3, [r7, #0]
    if (!led)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d026      	beq.n	800209c <led_apply_config+0x64>
        return;

    if (mode > LED_MODE_BLINK)
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <led_apply_config+0x20>
        mode = LED_MODE_OFF;
 8002054:	2300      	movs	r3, #0
 8002056:	70fb      	strb	r3, [r7, #3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002058:	f3ef 8310 	mrs	r3, PRIMASK
 800205c:	60bb      	str	r3, [r7, #8]
  return(result);
 800205e:	68bb      	ldr	r3, [r7, #8]

    uint32_t primask = __get_PRIMASK();
 8002060:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002062:	b672      	cpsid	i
}
 8002064:	bf00      	nop
    __disable_irq();

    if (mode == LED_MODE_ON) {
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d103      	bne.n	8002074 <led_apply_config+0x3c>
        led_force_on(led);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff57 	bl	8001f20 <led_force_on>
 8002072:	e00e      	b.n	8002092 <led_apply_config+0x5a>
    } else if (mode == LED_MODE_BLINK && freq_centi_hz > 0u) {
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d108      	bne.n	800208c <led_apply_config+0x54>
 800207a:	883b      	ldrh	r3, [r7, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <led_apply_config+0x54>
        led_force_blink(led, freq_centi_hz);
 8002080:	883b      	ldrh	r3, [r7, #0]
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff87 	bl	8001f98 <led_force_blink>
 800208a:	e002      	b.n	8002092 <led_apply_config+0x5a>
    } else {
        led_force_off(led);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff0b 	bl	8001ea8 <led_force_off>
    }

    if (primask == 0u) {
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <led_apply_config+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 8002098:	b662      	cpsie	i
}
 800209a:	e000      	b.n	800209e <led_apply_config+0x66>
        return;
 800209c:	bf00      	nop
        __enable_irq();
    }
}
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <led_pwm_start>:

static HAL_StatusTypeDef led_pwm_start(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
    if (g_pwm_running)
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <led_pwm_start+0x34>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <led_pwm_start+0x12>
        return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e00c      	b.n	80020d0 <led_pwm_start+0x2c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80020b6:	2100      	movs	r1, #0
 80020b8:	4808      	ldr	r0, [pc, #32]	@ (80020dc <led_pwm_start+0x38>)
 80020ba:	f009 fb93 	bl	800b7e4 <HAL_TIM_PWM_Start>
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <led_pwm_start+0x2a>
        g_pwm_running = 1u;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <led_pwm_start+0x34>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
    }
    return st;
 80020ce:	79fb      	ldrb	r3, [r7, #7]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200000ce 	.word	0x200000ce
 80020dc:	20001068 	.word	0x20001068

080020e0 <led_pwm_stop>:

static HAL_StatusTypeDef led_pwm_stop(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
    if (!g_pwm_running)
 80020e6:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <led_pwm_stop+0x64>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <led_pwm_stop+0x12>
        return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e024      	b.n	800213c <led_pwm_stop+0x5c>

    HAL_StatusTypeDef st = HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 80020f2:	2100      	movs	r1, #0
 80020f4:	4814      	ldr	r0, [pc, #80]	@ (8002148 <led_pwm_stop+0x68>)
 80020f6:	f009 fd25 	bl	800bb44 <HAL_TIM_PWM_Stop>
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
#if defined(TIM_CHANNEL_1N)
    if (st == HAL_OK) {
        st = HAL_TIMEx_PWMN_Stop(&htim15, TIM_CHANNEL_1);
    }
#endif
    if (st == HAL_OK) {
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11a      	bne.n	800213a <led_pwm_stop+0x5a>
        __HAL_TIM_DISABLE(&htim15);
 8002104:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <led_pwm_stop+0x68>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <led_pwm_stop+0x54>
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <led_pwm_stop+0x68>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	f240 4344 	movw	r3, #1092	@ 0x444
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <led_pwm_stop+0x54>
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <led_pwm_stop+0x68>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <led_pwm_stop+0x68>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
        g_pwm_running = 0u;
 8002134:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <led_pwm_stop+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
    }
    return st;
 800213a:	79fb      	ldrb	r3, [r7, #7]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200000ce 	.word	0x200000ce
 8002148:	20001068 	.word	0x20001068

0800214c <led_service_init>:

void led_service_init(void) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af02      	add	r7, sp, #8
    g_pwm_running = 0u;
 8002152:	4b42      	ldr	r3, [pc, #264]	@ (800225c <led_service_init+0x110>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	e02d      	b.n	80021ba <led_service_init+0x6e>
        led_gpio_config_output(&g_leds[i]);
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	4a3f      	ldr	r2, [pc, #252]	@ (8002260 <led_service_init+0x114>)
 8002164:	4413      	add	r3, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fd42 	bl	8001bf0 <led_gpio_config_output>
        HAL_GPIO_WritePin(g_leds[i].port, g_leds[i].pin, LED_GPIO_OFF_LEVEL);
 800216c:	4a3c      	ldr	r2, [pc, #240]	@ (8002260 <led_service_init+0x114>)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4413      	add	r3, r2
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	4a3a      	ldr	r2, [pc, #232]	@ (8002260 <led_service_init+0x114>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	3304      	adds	r3, #4
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	2200      	movs	r2, #0
 8002184:	4619      	mov	r1, r3
 8002186:	f005 fb69 	bl	800785c <HAL_GPIO_WritePin>
        g_leds[i].mode = LED_MODE_OFF;
 800218a:	4a35      	ldr	r2, [pc, #212]	@ (8002260 <led_service_init+0x114>)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	330c      	adds	r3, #12
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
        g_leds[i].frequency_centi_hz = 0u;
 8002198:	4a31      	ldr	r2, [pc, #196]	@ (8002260 <led_service_init+0x114>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	4413      	add	r3, r2
 80021a0:	330e      	adds	r3, #14
 80021a2:	2200      	movs	r2, #0
 80021a4:	801a      	strh	r2, [r3, #0]
        g_leds[i].is_on = 0u;
 80021a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002260 <led_service_init+0x114>)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4413      	add	r3, r2
 80021ae:	330d      	adds	r3, #13
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ce      	beq.n	800215e <led_service_init+0x12>
    }

    if (htim15.Instance != TIM15) {
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <led_service_init+0x118>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a28      	ldr	r2, [pc, #160]	@ (8002268 <led_service_init+0x11c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d001      	beq.n	80021ce <led_service_init+0x82>
        MX_TIM15_Init();
 80021ca:	f004 f927 	bl	800641c <MX_TIM15_Init>
    }

    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 80021ce:	4825      	ldr	r0, [pc, #148]	@ (8002264 <led_service_init+0x118>)
 80021d0:	f009 f9f4 	bl	800b5bc <HAL_TIM_PWM_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <led_service_init+0xa8>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao inicializar PWM do TIM15");
 80021da:	4a24      	ldr	r2, [pc, #144]	@ (800226c <led_service_init+0x120>)
 80021dc:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <led_service_init+0x124>)
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	4b24      	ldr	r3, [pc, #144]	@ (8002274 <led_service_init+0x128>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	f06f 0203 	mvn.w	r2, #3
 80021ea:	2164      	movs	r1, #100	@ 0x64
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 fa0d 	bl	800260c <log_event_auto>
        return;
 80021f2:	e02f      	b.n	8002254 <led_service_init+0x108>
    }

    TIM_OC_InitTypeDef oc = {0};
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
 8002202:	615a      	str	r2, [r3, #20]
 8002204:	619a      	str	r2, [r3, #24]
    oc.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	@ 0x60
 8002208:	603b      	str	r3, [r7, #0]
#if LED_ACTIVE_HIGH
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
    oc.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
#else
    oc.OCPolarity = TIM_OCPOLARITY_LOW;
    oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
#endif
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
    oc.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
    oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
    oc.Pulse = 0u;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]

    if (HAL_TIM_PWM_ConfigChannel(&htim15, &oc, TIM_CHANNEL_1) != HAL_OK) {
 8002222:	463b      	mov	r3, r7
 8002224:	2200      	movs	r2, #0
 8002226:	4619      	mov	r1, r3
 8002228:	480e      	ldr	r0, [pc, #56]	@ (8002264 <led_service_init+0x118>)
 800222a:	f00a f947 	bl	800c4bc <HAL_TIM_PWM_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00c      	beq.n	800224e <led_service_init+0x102>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "timer", "falha ao configurar canal PWM do TIM15");
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <led_service_init+0x120>)
 8002236:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <led_service_init+0x12c>)
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <led_service_init+0x128>)
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	f06f 0203 	mvn.w	r2, #3
 8002244:	2164      	movs	r1, #100	@ 0x64
 8002246:	2001      	movs	r0, #1
 8002248:	f000 f9e0 	bl	800260c <log_event_auto>
        return;
 800224c:	e002      	b.n	8002254 <led_service_init+0x108>
    }

    led_force_off(&g_leds[0]);
 800224e:	4804      	ldr	r0, [pc, #16]	@ (8002260 <led_service_init+0x114>)
 8002250:	f7ff fe2a 	bl	8001ea8 <led_force_off>
}
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200000ce 	.word	0x200000ce
 8002260:	20000000 	.word	0x20000000
 8002264:	20001068 	.word	0x20001068
 8002268:	40014000 	.word	0x40014000
 800226c:	080104a8 	.word	0x080104a8
 8002270:	08010534 	.word	0x08010534
 8002274:	0801050c 	.word	0x0801050c
 8002278:	08010558 	.word	0x08010558

0800227c <led_on_led_ctrl>:

void led_on_led_ctrl(const uint8_t *frame, uint32_t len) {
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227e:	b097      	sub	sp, #92	@ 0x5c
 8002280:	af0a      	add	r7, sp, #40	@ 0x28
 8002282:	6178      	str	r0, [r7, #20]
 8002284:	6139      	str	r1, [r7, #16]
    led_ctrl_req_t req;
    if (!frame)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80d2 	beq.w	8002432 <led_on_led_ctrl+0x1b6>
        return;
    if (len < LED_CTRL_REQ_TOTAL_LEN || len > LED_CTRL_REQ_PADDED_TOTAL_LEN) {
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d902      	bls.n	800229a <led_on_led_ctrl+0x1e>
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b2a      	cmp	r3, #42	@ 0x2a
 8002298:	d90e      	bls.n	80022b8 <led_on_led_ctrl+0x3c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "len", "invalid led frame len=%lu", (unsigned long)len);
 800229a:	4a68      	ldr	r2, [pc, #416]	@ (800243c <led_on_led_ctrl+0x1c0>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	4b67      	ldr	r3, [pc, #412]	@ (8002440 <led_on_led_ctrl+0x1c4>)
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	4b67      	ldr	r3, [pc, #412]	@ (8002444 <led_on_led_ctrl+0x1c8>)
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	f06f 0203 	mvn.w	r2, #3
 80022ae:	2164      	movs	r1, #100	@ 0x64
 80022b0:	2001      	movs	r0, #1
 80022b2:	f000 f9ab 	bl	800260c <log_event_auto>
        return;
 80022b6:	e0bd      	b.n	8002434 <led_on_led_ctrl+0x1b8>
    }
    proto_result_t decode_status = led_ctrl_req_decoder(frame, len, &req);
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	461a      	mov	r2, r3
 80022be:	6939      	ldr	r1, [r7, #16]
 80022c0:	6978      	ldr	r0, [r7, #20]
 80022c2:	f7fe fa96 	bl	80007f2 <led_ctrl_req_decoder>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (decode_status != PROTO_OK) {
 80022cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00f      	beq.n	80022f4 <led_on_led_ctrl+0x78>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "decode", "failed to decode led request (%d)", (int)decode_status);
 80022d4:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80022d8:	4958      	ldr	r1, [pc, #352]	@ (800243c <led_on_led_ctrl+0x1c0>)
 80022da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022de:	9302      	str	r3, [sp, #8]
 80022e0:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <led_on_led_ctrl+0x1cc>)
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	4b59      	ldr	r3, [pc, #356]	@ (800244c <led_on_led_ctrl+0x1d0>)
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	460b      	mov	r3, r1
 80022ea:	2164      	movs	r1, #100	@ 0x64
 80022ec:	2001      	movs	r0, #1
 80022ee:	f000 f98d 	bl	800260c <log_event_auto>
        return;
 80022f2:	e09f      	b.n	8002434 <led_on_led_ctrl+0x1b8>
    }

    const uint8_t requested_mask = req.ledMask;
 80022f4:	7f7b      	ldrb	r3, [r7, #29]
 80022f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    const uint8_t valid_mask = LED_MASK_LED1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t ack_mask = 0u;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t status = PROTO_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002310:	e02d      	b.n	800236e <led_on_led_ctrl+0xf2>
        uint8_t mask_bit = LED_MASK_LED1;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if ((requested_mask & mask_bit) == 0u) {
 8002318:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800231c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002320:	4013      	ands	r3, r2
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01e      	beq.n	8002366 <led_on_led_ctrl+0xea>
            continue;
        }
        ack_mask |= mask_bit;
 8002328:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800232c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002330:	4313      	orrs	r3, r2
 8002332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        led_apply_config(&g_leds[i], req.channel[i].mode, req.channel[i].frequency);
 8002336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	4a45      	ldr	r2, [pc, #276]	@ (8002450 <led_on_led_ctrl+0x1d4>)
 800233c:	1898      	adds	r0, r3, r2
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	3320      	adds	r3, #32
 8002344:	f107 0210 	add.w	r2, r7, #16
 8002348:	4413      	add	r3, r2
 800234a:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 800234e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	3320      	adds	r3, #32
 8002354:	f107 0210 	add.w	r2, r7, #16
 8002358:	4413      	add	r3, r2
 800235a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800235e:	461a      	mov	r2, r3
 8002360:	f7ff fe6a 	bl	8002038 <led_apply_config>
 8002364:	e000      	b.n	8002368 <led_on_led_ctrl+0xec>
            continue;
 8002366:	bf00      	nop
    for (uint32_t i = 0; i < LED_CTRL_CHANNEL_COUNT; ++i) {
 8002368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236a:	3301      	adds	r3, #1
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800236e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ce      	beq.n	8002312 <led_on_led_ctrl+0x96>
    }

    if ((requested_mask & (uint8_t)~valid_mask) != 0u) {
 8002374:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002378:	43db      	mvns	r3, r3
 800237a:	b2da      	uxtb	r2, r3
 800237c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002380:	4013      	ands	r3, r2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <led_on_led_ctrl+0x114>
        status = PROTO_WARN;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800238e:	e00a      	b.n	80023a6 <led_on_led_ctrl+0x12a>
    } else if (ack_mask == 0u && requested_mask != 0u) {
 8002390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <led_on_led_ctrl+0x12a>
 8002398:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <led_on_led_ctrl+0x12a>
        status = PROTO_WARN;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    led_push_response(req.frameId, ack_mask, status);
 80023a6:	7f3b      	ldrb	r3, [r7, #28]
 80023a8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023ac:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fc6b 	bl	8001c8c <led_push_response>

    LOGA_THIS(LOG_STATE_APPLIED, status, "applied",
 80023b6:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80023ba:	4e20      	ldr	r6, [pc, #128]	@ (800243c <led_on_led_ctrl+0x1c0>)
 80023bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023c0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <led_on_led_ctrl+0x1d4>)
 80023c6:	7b1b      	ldrb	r3, [r3, #12]
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <led_on_led_ctrl+0x1d4>)
 80023cc:	89db      	ldrh	r3, [r3, #14]
 80023ce:	4821      	ldr	r0, [pc, #132]	@ (8002454 <led_on_led_ctrl+0x1d8>)
 80023d0:	fba0 0303 	umull	r0, r3, r0, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <led_on_led_ctrl+0x1d4>)
 80023dc:	89db      	ldrh	r3, [r3, #14]
 80023de:	481d      	ldr	r0, [pc, #116]	@ (8002454 <led_on_led_ctrl+0x1d8>)
 80023e0:	fba0 5003 	umull	r5, r0, r0, r3
 80023e4:	0940      	lsrs	r0, r0, #5
 80023e6:	2564      	movs	r5, #100	@ 0x64
 80023e8:	fb05 f000 	mul.w	r0, r5, r0
 80023ec:	1a1b      	subs	r3, r3, r0
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461d      	mov	r5, r3
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <led_on_led_ctrl+0x1d4>)
 80023f4:	7b5b      	ldrb	r3, [r3, #13]
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <led_on_led_ctrl+0x1dc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	3301      	adds	r3, #1
 8002400:	4815      	ldr	r0, [pc, #84]	@ (8002458 <led_on_led_ctrl+0x1dc>)
 8002402:	6800      	ldr	r0, [r0, #0]
 8002404:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002406:	9009      	str	r0, [sp, #36]	@ 0x24
 8002408:	9308      	str	r3, [sp, #32]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	9007      	str	r0, [sp, #28]
 800240e:	9506      	str	r5, [sp, #24]
 8002410:	68b8      	ldr	r0, [r7, #8]
 8002412:	9005      	str	r0, [sp, #20]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	9304      	str	r3, [sp, #16]
 8002418:	9103      	str	r1, [sp, #12]
 800241a:	9202      	str	r2, [sp, #8]
 800241c:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <led_on_led_ctrl+0x1e0>)
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <led_on_led_ctrl+0x1e4>)
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4633      	mov	r3, r6
 8002426:	4622      	mov	r2, r4
 8002428:	2102      	movs	r1, #2
 800242a:	2001      	movs	r0, #1
 800242c:	f000 f8ee 	bl	800260c <log_event_auto>
 8002430:	e000      	b.n	8002434 <led_on_led_ctrl+0x1b8>
        return;
 8002432:	bf00      	nop
              (unsigned long)(g_leds[0].frequency_centi_hz / 100u),
              (unsigned long)(g_leds[0].frequency_centi_hz % 100u),
              g_leds[0].is_on,
              (unsigned long)(__HAL_TIM_GET_AUTORELOAD(&htim15) + 1u),
              (unsigned long)__HAL_TIM_GET_COMPARE(&htim15, TIM_CHANNEL_1));
 8002434:	3734      	adds	r7, #52	@ 0x34
 8002436:	46bd      	mov	sp, r7
 8002438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800243a:	bf00      	nop
 800243c:	080104a8 	.word	0x080104a8
 8002440:	08010580 	.word	0x08010580
 8002444:	0801059c 	.word	0x0801059c
 8002448:	080105a0 	.word	0x080105a0
 800244c:	080105c4 	.word	0x080105c4
 8002450:	20000000 	.word	0x20000000
 8002454:	51eb851f 	.word	0x51eb851f
 8002458:	20001068 	.word	0x20001068
 800245c:	080105cc 	.word	0x080105cc
 8002460:	0801061c 	.word	0x0801061c

08002464 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800246c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002470:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800247c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002480:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002484:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800248c:	e000      	b.n	8002490 <ITM_SendChar+0x2c>
    {
      __NOP();
 800248e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002490:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f9      	beq.n	800248e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800249a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <log_service_init>:
#include <stdarg.h>
#include <string.h>
#include "usart.h"
#include "stm32l4xx.h"  // ITM_SendChar/CoreDebug/DBGMCU/TPI

void log_service_init(void){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    // Garante stdout sem buffer para que o printf descarregue imediatamente na UART.
    setvbuf(stdout, NULL, _IONBF, 0);
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <log_service_init+0x18>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6898      	ldr	r0, [r3, #8]
 80024be:	2300      	movs	r3, #0
 80024c0:	2202      	movs	r2, #2
 80024c2:	2100      	movs	r1, #0
 80024c4:	f00c ff78 	bl	800f3b8 <setvbuf>
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	2000002c 	.word	0x2000002c

080024d0 <log_event_ids>:

void log_poll(void){
    // No-op: a transmissão é síncrona via _write/HAL_UART_Transmit.
}

void log_event_ids(uint8_t service_id, uint8_t state_id, int32_t status){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	603a      	str	r2, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	460b      	mov	r3, r1
 80024de:	71bb      	strb	r3, [r7, #6]
    printf("L:svc=%u,state=%u,status=%ld\r\n", (unsigned)service_id, (unsigned)state_id, (long)status);
 80024e0:	79f9      	ldrb	r1, [r7, #7]
 80024e2:	79ba      	ldrb	r2, [r7, #6]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4803      	ldr	r0, [pc, #12]	@ (80024f4 <log_event_ids+0x24>)
 80024e8:	f00c fef6 	bl	800f2d8 <iprintf>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	08010624 	.word	0x08010624

080024f8 <log_event_names>:

void log_event_names(const char* service_name, const char* state_name, const char* status_text){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
    if(!service_name) service_name = "?";
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <log_event_names+0x16>
 800250a:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <log_event_names+0x40>)
 800250c:	60fb      	str	r3, [r7, #12]
    if(!state_name) state_name = "?";
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <log_event_names+0x20>
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <log_event_names+0x40>)
 8002516:	60bb      	str	r3, [r7, #8]
    if(!status_text) status_text = "?";
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <log_event_names+0x2a>
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <log_event_names+0x40>)
 8002520:	607b      	str	r3, [r7, #4]
    printf("LOG:service=%s,state=%s,status=%s\r\n", service_name, state_name, status_text);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	4804      	ldr	r0, [pc, #16]	@ (800253c <log_event_names+0x44>)
 800252a:	f00c fed5 	bl	800f2d8 <iprintf>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	08010644 	.word	0x08010644
 800253c:	08010648 	.word	0x08010648

08002540 <log_swo_enabled>:

// Verifica em tempo de execução se o SWO/ITM está habilitado (porta 0).
static inline int log_swo_enabled(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <log_swo_enabled+0x4c>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d017      	beq.n	8002580 <log_swo_enabled+0x40>
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8002550:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <log_swo_enabled+0x50>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0320 	and.w	r3, r3, #32
    return ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) &&
 8002558:	2b00      	cmp	r3, #0
 800255a:	d011      	beq.n	8002580 <log_swo_enabled+0x40>
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 800255c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002560:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002564:	f003 0301 	and.w	r3, r3, #1
            (DBGMCU->CR & DBGMCU_CR_TRACE_IOEN) &&
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <log_swo_enabled+0x40>
            (ITM->TER & (1UL << 0)));
 800256c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002570:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002574:	f003 0301 	and.w	r3, r3, #1
            (ITM->TCR & ITM_TCR_ITMENA_Msk) &&
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <log_swo_enabled+0x40>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <log_swo_enabled+0x42>
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000edf0 	.word	0xe000edf0
 8002590:	e0042000 	.word	0xe0042000

08002594 <_write>:

// Retarget de printf: usa SWO quando disponível; senão, USART1.
int _write(int fd, char *ptr, int len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
    if (fd != 1 && fd != 2)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d005      	beq.n	80025b2 <_write+0x1e>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d002      	beq.n	80025b2 <_write+0x1e>
        return -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
 80025b0:	e026      	b.n	8002600 <_write+0x6c>

    if (log_swo_enabled()) {
 80025b2:	f7ff ffc5 	bl	8002540 <log_swo_enabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d012      	beq.n	80025e2 <_write+0x4e>
        for (int i = 0; i < len; ++i) {
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e009      	b.n	80025d6 <_write+0x42>
            ITM_SendChar((uint32_t)ptr[i]);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff4a 	bl	8002464 <ITM_SendChar>
        for (int i = 0; i < len; ++i) {
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbf1      	blt.n	80025c2 <_write+0x2e>
        }
        return len;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	e00e      	b.n	8002600 <_write+0x6c>
    }

    // Fallback: UART1 síncrona
    if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, HAL_MAX_DELAY) == HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	4806      	ldr	r0, [pc, #24]	@ (8002608 <_write+0x74>)
 80025ee:	f00b fe15 	bl	800e21c <HAL_UART_Transmit>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <_write+0x68>
        return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	e001      	b.n	8002600 <_write+0x6c>
    return -1;
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200010b4 	.word	0x200010b4

0800260c <log_event_auto>:

void log_event_auto(log_service_id_t service_id, log_state_id_t state_id, int32_t status,
                    const char* service_name, const char* state_name,
                    const char* fmt, ...){
 800260c:	b580      	push	{r7, lr}
 800260e:	b0a8      	sub	sp, #160	@ 0xa0
 8002610:	af00      	add	r7, sp, #0
 8002612:	60ba      	str	r2, [r7, #8]
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	460b      	mov	r3, r1
 800261c:	73bb      	strb	r3, [r7, #14]
    (void)service_id;
    (void)state_id;
    (void)status;

    char text[128];
    if(fmt && fmt[0]){
 800261e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002622:	2b00      	cmp	r3, #0
 8002624:	d010      	beq.n	8002648 <log_event_auto+0x3c>
 8002626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <log_event_auto+0x3c>
        va_list ap;
        va_start(ap, fmt);
 8002630:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002634:	617b      	str	r3, [r7, #20]
        (void)vsnprintf(text, sizeof text, fmt, ap);
 8002636:	f107 0018 	add.w	r0, r7, #24
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	f00c ffdf 	bl	800f604 <vsniprintf>
    if(fmt && fmt[0]){
 8002646:	e003      	b.n	8002650 <log_event_auto+0x44>
        va_end(ap);
    }else{
        text[0] = '?';
 8002648:	233f      	movs	r3, #63	@ 0x3f
 800264a:	763b      	strb	r3, [r7, #24]
        text[1] = '\0';
 800264c:	2300      	movs	r3, #0
 800264e:	767b      	strb	r3, [r7, #25]
    }
    const char* svc = service_name ? service_name : "?";
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <log_event_auto+0x4e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	e000      	b.n	800265c <log_event_auto+0x50>
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <log_event_auto+0x84>)
 800265c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    const char* stn = state_name ? state_name : "?";
 8002660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <log_event_auto+0x62>
 8002668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800266c:	e000      	b.n	8002670 <log_event_auto+0x64>
 800266e:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <log_event_auto+0x84>)
 8002670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    printf("LOG:service=%s,state=%s,status=%s\r\n", svc, stn, text);
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800267c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8002680:	4804      	ldr	r0, [pc, #16]	@ (8002694 <log_event_auto+0x88>)
 8002682:	f00c fe29 	bl	800f2d8 <iprintf>
}
 8002686:	bf00      	nop
 8002688:	37a0      	adds	r7, #160	@ 0xa0
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	08010644 	.word	0x08010644
 8002694:	08010648 	.word	0x08010648

08002698 <gpio_bsrr_set>:
    { GPIOB, GPIO_PIN_1, GPIOA, GPIO_PIN_2, GPIOD, GPIO_PIN_14,
      MOTION_ENCODER_TYPE_TIM, &htim5, NULL, 32u },
};

static inline void gpio_bsrr_set(GPIO_TypeDef *port, uint16_t pin)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <gpio_bsrr_set+0x1a>
    port->BSRR = pin;
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	619a      	str	r2, [r3, #24]
 80026b0:	e000      	b.n	80026b4 <gpio_bsrr_set+0x1c>
    if (!port) return;
 80026b2:	bf00      	nop
}
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <gpio_bsrr_reset>:
static inline void gpio_bsrr_reset(GPIO_TypeDef *port, uint16_t pin)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	807b      	strh	r3, [r7, #2]
    if (!port) return;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <gpio_bsrr_reset+0x1c>
    port->BSRR = ((uint32_t)pin) << 16u;
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	041a      	lsls	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
 80026d8:	e000      	b.n	80026dc <gpio_bsrr_reset+0x1e>
    if (!port) return;
 80026da:	bf00      	nop
}
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <motion_hw_init>:

void motion_hw_init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
    // Garante STEP baixo e drivers desabilitados
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 80026ee:	2300      	movs	r3, #0
 80026f0:	71fb      	strb	r3, [r7, #7]
 80026f2:	e02b      	b.n	800274c <motion_hw_init+0x64>
        gpio_bsrr_reset(g_axis[i].step_port, g_axis[i].step_pin);
 80026f4:	79fa      	ldrb	r2, [r7, #7]
 80026f6:	493d      	ldr	r1, [pc, #244]	@ (80027ec <motion_hw_init+0x104>)
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	79fa      	ldrb	r2, [r7, #7]
 8002706:	4939      	ldr	r1, [pc, #228]	@ (80027ec <motion_hw_init+0x104>)
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3304      	adds	r3, #4
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	f7ff ffd1 	bl	80026be <gpio_bsrr_reset>
        // Enable ativo em baixo: mantém alto (desabilitado)
        gpio_bsrr_set(g_axis[i].ena_port, g_axis[i].ena_pin);
 800271c:	79fa      	ldrb	r2, [r7, #7]
 800271e:	4933      	ldr	r1, [pc, #204]	@ (80027ec <motion_hw_init+0x104>)
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3310      	adds	r3, #16
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	79fa      	ldrb	r2, [r7, #7]
 8002730:	492e      	ldr	r1, [pc, #184]	@ (80027ec <motion_hw_init+0x104>)
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	3314      	adds	r3, #20
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f7ff ffa9 	bl	8002698 <gpio_bsrr_set>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	3301      	adds	r3, #1
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d9d0      	bls.n	80026f4 <motion_hw_init+0xc>
    }

    // Zera contadores e inicia encoders conforme o tipo de periférico
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 8002752:	2300      	movs	r3, #0
 8002754:	71bb      	strb	r3, [r7, #6]
 8002756:	e034      	b.n	80027c2 <motion_hw_init+0xda>
        const motion_axis_hw_t *axis = &g_axis[i];
 8002758:	79ba      	ldrb	r2, [r7, #6]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4a22      	ldr	r2, [pc, #136]	@ (80027ec <motion_hw_init+0x104>)
 8002764:	4413      	add	r3, r2
 8002766:	603b      	str	r3, [r7, #0]
        if (axis->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	7d9b      	ldrb	r3, [r3, #22]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d110      	bne.n	8002792 <motion_hw_init+0xaa>
            __HAL_TIM_SET_COUNTER(axis->tim, 0u);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24
            if (HAL_TIM_Encoder_Start(axis->tim, TIM_CHANNEL_ALL) != HAL_OK) {
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	213c      	movs	r1, #60	@ 0x3c
 8002780:	4618      	mov	r0, r3
 8002782:	f009 fcd5 	bl	800c130 <HAL_TIM_Encoder_Start>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d017      	beq.n	80027bc <motion_hw_init+0xd4>
                Error_Handler();
 800278c:	f003 fae6 	bl	8005d5c <Error_Handler>
 8002790:	e014      	b.n	80027bc <motion_hw_init+0xd4>
            }
        } else if (axis->encoder_type == MOTION_ENCODER_TYPE_LPTIM) {
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7d9b      	ldrb	r3, [r3, #22]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d110      	bne.n	80027bc <motion_hw_init+0xd4>
            (void)HAL_LPTIM_Encoder_Stop(axis->lptim);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4618      	mov	r0, r3
 80027a0:	f005 fb56 	bl	8007e50 <HAL_LPTIM_Encoder_Stop>
            if (HAL_LPTIM_Encoder_Start(axis->lptim, LPTIM_ENCODER_PERIOD) != HAL_OK) {
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80027ac:	4618      	mov	r0, r3
 80027ae:	f005 fac5 	bl	8007d3c <HAL_LPTIM_Encoder_Start>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <motion_hw_init+0xd4>
                Error_Handler();
 80027b8:	f003 fad0 	bl	8005d5c <Error_Handler>
    for (uint8_t i = 0; i < MOTION_AXIS_COUNT; ++i) {
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	3301      	adds	r3, #1
 80027c0:	71bb      	strb	r3, [r7, #6]
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d9c7      	bls.n	8002758 <motion_hw_init+0x70>
#endif
        }
    }

    // Mantém os EN dos eixos Y (1) e Z (2) ativados (nível baixo) conforme solicitado
    gpio_bsrr_reset(g_axis[1].ena_port, g_axis[1].ena_pin);
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <motion_hw_init+0x108>)
 80027ca:	2220      	movs	r2, #32
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff75 	bl	80026be <gpio_bsrr_reset>
    gpio_bsrr_reset(g_axis[2].ena_port, g_axis[2].ena_pin);
 80027d4:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <motion_hw_init+0x10c>)
 80027d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff6e 	bl	80026be <gpio_bsrr_reset>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	08010cd8 	.word	0x08010cd8
 80027f0:	48000800 	.word	0x48000800
 80027f4:	48000c00 	.word	0x48000c00

080027f8 <motion_hw_set_dir>:

void motion_hw_set_dir(uint8_t axis, uint8_t dir)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	460a      	mov	r2, r1
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	4613      	mov	r3, r2
 8002806:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d82e      	bhi.n	800286c <motion_hw_set_dir+0x74>
    if (dir) gpio_bsrr_set(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d015      	beq.n	8002840 <motion_hw_set_dir+0x48>
 8002814:	79fa      	ldrb	r2, [r7, #7]
 8002816:	4917      	ldr	r1, [pc, #92]	@ (8002874 <motion_hw_set_dir+0x7c>)
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3308      	adds	r3, #8
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	79fa      	ldrb	r2, [r7, #7]
 8002828:	4912      	ldr	r1, [pc, #72]	@ (8002874 <motion_hw_set_dir+0x7c>)
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	330c      	adds	r3, #12
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	f7ff ff2d 	bl	8002698 <gpio_bsrr_set>
 800283e:	e016      	b.n	800286e <motion_hw_set_dir+0x76>
    else     gpio_bsrr_reset(g_axis[axis].dir_port, g_axis[axis].dir_pin);
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	490c      	ldr	r1, [pc, #48]	@ (8002874 <motion_hw_set_dir+0x7c>)
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	3308      	adds	r3, #8
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	4907      	ldr	r1, [pc, #28]	@ (8002874 <motion_hw_set_dir+0x7c>)
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	330c      	adds	r3, #12
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f7ff ff2a 	bl	80026be <gpio_bsrr_reset>
 800286a:	e000      	b.n	800286e <motion_hw_set_dir+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 800286c:	bf00      	nop
}
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	08010cd8 	.word	0x08010cd8

08002878 <motion_hw_enable>:

void motion_hw_enable(uint8_t axis, uint8_t enable)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	460a      	mov	r2, r1
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	4613      	mov	r3, r2
 8002886:	71bb      	strb	r3, [r7, #6]
    if (axis >= MOTION_AXIS_COUNT) return;
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d82e      	bhi.n	80028ec <motion_hw_enable+0x74>
    // Enable ativo em baixo: enable=1 -> força baixo
    if (enable) gpio_bsrr_reset(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 800288e:	79bb      	ldrb	r3, [r7, #6]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <motion_hw_enable+0x48>
 8002894:	79fa      	ldrb	r2, [r7, #7]
 8002896:	4917      	ldr	r1, [pc, #92]	@ (80028f4 <motion_hw_enable+0x7c>)
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3310      	adds	r3, #16
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	79fa      	ldrb	r2, [r7, #7]
 80028a8:	4912      	ldr	r1, [pc, #72]	@ (80028f4 <motion_hw_enable+0x7c>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3314      	adds	r3, #20
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7ff ff00 	bl	80026be <gpio_bsrr_reset>
 80028be:	e016      	b.n	80028ee <motion_hw_enable+0x76>
    else        gpio_bsrr_set(g_axis[axis].ena_port, g_axis[axis].ena_pin);
 80028c0:	79fa      	ldrb	r2, [r7, #7]
 80028c2:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <motion_hw_enable+0x7c>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3310      	adds	r3, #16
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	4907      	ldr	r1, [pc, #28]	@ (80028f4 <motion_hw_enable+0x7c>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	3314      	adds	r3, #20
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7ff fed7 	bl	8002698 <gpio_bsrr_set>
 80028ea:	e000      	b.n	80028ee <motion_hw_enable+0x76>
    if (axis >= MOTION_AXIS_COUNT) return;
 80028ec:	bf00      	nop
}
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08010cd8 	.word	0x08010cd8

080028f8 <motion_hw_step_high>:

void motion_hw_step_high(uint8_t axis)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d814      	bhi.n	8002932 <motion_hw_step_high+0x3a>
    gpio_bsrr_set(g_axis[axis].step_port, g_axis[axis].step_pin);
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	490c      	ldr	r1, [pc, #48]	@ (800293c <motion_hw_step_high+0x44>)
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	79fa      	ldrb	r2, [r7, #7]
 800291a:	4908      	ldr	r1, [pc, #32]	@ (800293c <motion_hw_step_high+0x44>)
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3304      	adds	r3, #4
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	f7ff feb4 	bl	8002698 <gpio_bsrr_set>
 8002930:	e000      	b.n	8002934 <motion_hw_step_high+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 8002932:	bf00      	nop
}
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	08010cd8 	.word	0x08010cd8

08002940 <motion_hw_step_low>:
void motion_hw_step_low(uint8_t axis)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return;
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d814      	bhi.n	800297a <motion_hw_step_low+0x3a>
    gpio_bsrr_reset(g_axis[axis].step_port, g_axis[axis].step_pin);
 8002950:	79fa      	ldrb	r2, [r7, #7]
 8002952:	490c      	ldr	r1, [pc, #48]	@ (8002984 <motion_hw_step_low+0x44>)
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	79fa      	ldrb	r2, [r7, #7]
 8002962:	4908      	ldr	r1, [pc, #32]	@ (8002984 <motion_hw_step_low+0x44>)
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3304      	adds	r3, #4
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	4619      	mov	r1, r3
 8002974:	f7ff fea3 	bl	80026be <gpio_bsrr_reset>
 8002978:	e000      	b.n	800297c <motion_hw_step_low+0x3c>
    if (axis >= MOTION_AXIS_COUNT) return;
 800297a:	bf00      	nop
}
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	08010cd8 	.word	0x08010cd8

08002988 <motion_hw_encoder_read_raw>:

uint32_t motion_hw_encoder_read_raw(uint8_t axis)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0;
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <motion_hw_encoder_read_raw+0x14>
 8002998:	2300      	movs	r3, #0
 800299a:	e015      	b.n	80029c8 <motion_hw_encoder_read_raw+0x40>
    const motion_axis_hw_t *hw = &g_axis[axis];
 800299c:	79fa      	ldrb	r2, [r7, #7]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4a0b      	ldr	r2, [pc, #44]	@ (80029d4 <motion_hw_encoder_read_raw+0x4c>)
 80029a8:	4413      	add	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
    if (hw->encoder_type == MOTION_ENCODER_TYPE_TIM) {
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	7d9b      	ldrb	r3, [r3, #22]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d104      	bne.n	80029be <motion_hw_encoder_read_raw+0x36>
        return (uint32_t)__HAL_TIM_GET_COUNTER(hw->tim);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	e004      	b.n	80029c8 <motion_hw_encoder_read_raw+0x40>
    } else {
        return (uint32_t)(hw->lptim->Instance->CNT & 0xFFFFu);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	b29b      	uxth	r3, r3
    }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	08010cd8 	.word	0x08010cd8

080029d8 <motion_hw_encoder_bits>:

uint8_t motion_hw_encoder_bits(uint8_t axis)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
    if (axis >= MOTION_AXIS_COUNT) return 0u;
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <motion_hw_encoder_bits+0x14>
 80029e8:	2300      	movs	r3, #0
 80029ea:	e008      	b.n	80029fe <motion_hw_encoder_bits+0x26>
    return g_axis[axis].counter_bits;
 80029ec:	79fa      	ldrb	r2, [r7, #7]
 80029ee:	4907      	ldr	r1, [pc, #28]	@ (8002a0c <motion_hw_encoder_bits+0x34>)
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3320      	adds	r3, #32
 80029fc:	781b      	ldrb	r3, [r3, #0]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	08010cd8 	.word	0x08010cd8

08002a10 <dda_steps_per_rev>:
#define STEPS_PER_REV_BASE   400u
#define DDA_STEPS_PER_REV    (STEPS_PER_REV_BASE * MICROSTEP_FACTOR)
/* Encoders por rotação (fornecido): X/Z = 40000, Y = 2500 */
static const uint32_t ENC_COUNTS_PER_REV[3] = { 40000u, 2500u, 40000u}; // X,Y,Z 
static volatile uint16_t g_microstep_factor = MICROSTEP_FACTOR;
static inline uint32_t dda_steps_per_rev(void) { return STEPS_PER_REV_BASE * (uint32_t)g_microstep_factor; }
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <dda_steps_per_rev+0x20>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000010 	.word	0x20000010

08002a34 <motion_lock>:
static volatile uint8_t g_demo_speed_idx = 1u;

/* =======================
 *  Helpers de lock
 * ======================= */
static inline uint32_t motion_lock(void) {
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a40:	683b      	ldr	r3, [r7, #0]
    uint32_t primask = __get_PRIMASK();
 8002a42:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	bf00      	nop
    __disable_irq();
    return primask;
 8002a48:	687b      	ldr	r3, [r7, #4]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <motion_unlock>:
static inline void motion_unlock(uint32_t primask) {
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f383 8810 	msr	PRIMASK, r3
}
 8002a68:	bf00      	nop
    __set_PRIMASK(primask);
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <motion_total_for_axis>:

/* =======================
 *  Helpers de acesso por eixo
 * ======================= */
static inline uint32_t motion_total_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <motion_total_for_axis+0x18>
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d003      	beq.n	8002a94 <motion_total_for_axis+0x1e>
 8002a8c:	e005      	b.n	8002a9a <motion_total_for_axis+0x24>
        case AXIS_X: return req->sx;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	e004      	b.n	8002a9e <motion_total_for_axis+0x28>
        case AXIS_Y: return req->sy;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	e001      	b.n	8002a9e <motion_total_for_axis+0x28>
        case AXIS_Z:
        default:     return req->sz;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
    }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <motion_velocity_for_axis>:

static inline uint16_t motion_velocity_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <motion_velocity_for_axis+0x18>
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d003      	beq.n	8002ac8 <motion_velocity_for_axis+0x1e>
 8002ac0:	e005      	b.n	8002ace <motion_velocity_for_axis+0x24>
        case AXIS_X: return req->vx;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	885b      	ldrh	r3, [r3, #2]
 8002ac6:	e004      	b.n	8002ad2 <motion_velocity_for_axis+0x28>
        case AXIS_Y: return req->vy;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	891b      	ldrh	r3, [r3, #8]
 8002acc:	e001      	b.n	8002ad2 <motion_velocity_for_axis+0x28>
        case AXIS_Z:
        default:     return req->vz;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8a1b      	ldrh	r3, [r3, #16]
    }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <motion_kp_for_axis>:

static inline uint16_t motion_kp_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <motion_kp_for_axis+0x18>
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d003      	beq.n	8002afc <motion_kp_for_axis+0x1e>
 8002af4:	e005      	b.n	8002b02 <motion_kp_for_axis+0x24>
        case AXIS_X: return req->kp_x;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8b1b      	ldrh	r3, [r3, #24]
 8002afa:	e004      	b.n	8002b06 <motion_kp_for_axis+0x28>
        case AXIS_Y: return req->kp_y;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8bdb      	ldrh	r3, [r3, #30]
 8002b00:	e001      	b.n	8002b06 <motion_kp_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kp_z;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <motion_ki_for_axis>:

static inline uint16_t motion_ki_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <motion_ki_for_axis+0x18>
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d003      	beq.n	8002b30 <motion_ki_for_axis+0x1e>
 8002b28:	e005      	b.n	8002b36 <motion_ki_for_axis+0x24>
        case AXIS_X: return req->ki_x;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8b5b      	ldrh	r3, [r3, #26]
 8002b2e:	e004      	b.n	8002b3a <motion_ki_for_axis+0x28>
        case AXIS_Y: return req->ki_y;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8c1b      	ldrh	r3, [r3, #32]
 8002b34:	e001      	b.n	8002b3a <motion_ki_for_axis+0x28>
        case AXIS_Z:
        default:     return req->ki_z;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
    }
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <motion_kd_for_axis>:

static inline uint16_t motion_kd_for_axis(const move_queue_add_req_t *req, uint8_t axis) {
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	70fb      	strb	r3, [r7, #3]
    switch (axis) {
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <motion_kd_for_axis+0x18>
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d003      	beq.n	8002b64 <motion_kd_for_axis+0x1e>
 8002b5c:	e005      	b.n	8002b6a <motion_kd_for_axis+0x24>
        case AXIS_X: return req->kd_x;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8b9b      	ldrh	r3, [r3, #28]
 8002b62:	e004      	b.n	8002b6e <motion_kd_for_axis+0x28>
        case AXIS_Y: return req->kd_y;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002b68:	e001      	b.n	8002b6e <motion_kd_for_axis+0x28>
        case AXIS_Z:
        default:     return req->kd_z;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <motion_clamp_error>:

static inline int8_t motion_clamp_error(int32_t value) {
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
    if (value > 127)  return 127;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b86:	dd01      	ble.n	8002b8c <motion_clamp_error+0x12>
 8002b88:	237f      	movs	r3, #127	@ 0x7f
 8002b8a:	e008      	b.n	8002b9e <motion_clamp_error+0x24>
    if (value < -128) return -128;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002b92:	da02      	bge.n	8002b9a <motion_clamp_error+0x20>
 8002b94:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8002b98:	e001      	b.n	8002b9e <motion_clamp_error+0x24>
    return (int8_t)value;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	b25b      	sxtb	r3, r3
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <motion_remaining_steps_total_for_axis>:

/* Soma restante (em passos) no eixo, incluindo segmento ativo + fila
 * Usado para decidir desaceleração suave no final da lista de movimentos. */
static uint32_t motion_remaining_steps_total_for_axis(uint8_t axis)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
    uint32_t rem = 0u;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
    if (axis < MOTION_AXIS_COUNT) {
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d815      	bhi.n	8002bec <motion_remaining_steps_total_for_axis+0x40>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 8002bc0:	79fa      	ldrb	r2, [r7, #7]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <motion_remaining_steps_total_for_axis+0x90>)
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
        if (ax->total_steps > ax->emitted_steps)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d907      	bls.n	8002bec <motion_remaining_steps_total_for_axis+0x40>
            rem += (ax->total_steps - ax->emitted_steps);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	61fb      	str	r3, [r7, #28]
    }
    for (uint8_t i = 0; i < g_queue_count; ++i) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	76fb      	strb	r3, [r7, #27]
 8002bf0:	e01a      	b.n	8002c28 <motion_remaining_steps_total_for_axis+0x7c>
        uint8_t idxq = (uint8_t)((g_queue_head + i) % MOTION_QUEUE_CAPACITY);
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <motion_remaining_steps_total_for_axis+0x94>)
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	7efb      	ldrb	r3, [r7, #27]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c00:	74fb      	strb	r3, [r7, #19]
        const move_queue_add_req_t *q = &g_queue[idxq].req;
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	222c      	movs	r2, #44	@ 0x2c
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c44 <motion_remaining_steps_total_for_axis+0x98>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
        rem += motion_total_for_axis(q, axis);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	4619      	mov	r1, r3
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff ff2e 	bl	8002a76 <motion_total_for_axis>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < g_queue_count; ++i) {
 8002c22:	7efb      	ldrb	r3, [r7, #27]
 8002c24:	3301      	adds	r3, #1
 8002c26:	76fb      	strb	r3, [r7, #27]
 8002c28:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <motion_remaining_steps_total_for_axis+0x9c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	7efa      	ldrb	r2, [r7, #27]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d3df      	bcc.n	8002bf2 <motion_remaining_steps_total_for_axis+0x46>
    }
    return rem;
 8002c32:	69fb      	ldr	r3, [r7, #28]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200000d8 	.word	0x200000d8
 8002c40:	20000c6c 	.word	0x20000c6c
 8002c44:	2000016c 	.word	0x2000016c
 8002c48:	20000c6e 	.word	0x20000c6e

08002c4c <motion_refresh_status_locked>:

/* =======================
 *  Status e fila
 * ======================= */
static void motion_refresh_status_locked(void) {
 8002c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c50:	b0ab      	sub	sp, #172	@ 0xac
 8002c52:	af00      	add	r7, sp, #0
    g_status.queue_depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 8002c54:	4bc2      	ldr	r3, [pc, #776]	@ (8002f60 <motion_refresh_status_locked+0x314>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <motion_refresh_status_locked+0x16>
 8002c5e:	2201      	movs	r2, #1
 8002c60:	e000      	b.n	8002c64 <motion_refresh_status_locked+0x18>
 8002c62:	2200      	movs	r2, #0
 8002c64:	4bbf      	ldr	r3, [pc, #764]	@ (8002f64 <motion_refresh_status_locked+0x318>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4abe      	ldr	r2, [pc, #760]	@ (8002f68 <motion_refresh_status_locked+0x31c>)
 8002c6e:	7053      	strb	r3, [r2, #1]

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002c76:	e167      	b.n	8002f48 <motion_refresh_status_locked+0x2fc>
        const motion_axis_state_t *ax = &g_axis_state[axis];
 8002c78:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	4ab9      	ldr	r2, [pc, #740]	@ (8002f6c <motion_refresh_status_locked+0x320>)
 8002c86:	4413      	add	r3, r2
 8002c88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        uint32_t total = ax->total_steps;
 8002c8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        uint32_t emitted = ax->emitted_steps;
 8002c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        uint8_t pct = 0u;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6

        if (g_has_active_segment && total > 0u) {
 8002ca6:	4bae      	ldr	r3, [pc, #696]	@ (8002f60 <motion_refresh_status_locked+0x314>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d04c      	beq.n	8002d4a <motion_refresh_status_locked+0xfe>
 8002cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d048      	beq.n	8002d4a <motion_refresh_status_locked+0xfe>
            uint64_t scaled = (uint64_t)emitted * 100u;
 8002cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cc0:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002cc6:	1891      	adds	r1, r2, r2
 8002cc8:	6239      	str	r1, [r7, #32]
 8002cca:	415b      	adcs	r3, r3
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cd2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002cd4:	eb12 0801 	adds.w	r8, r2, r1
 8002cd8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002cda:	eb43 0901 	adc.w	r9, r3, r1
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002cea:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002cee:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002cf2:	eb18 0102 	adds.w	r1, r8, r2
 8002cf6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002cf8:	eb49 0303 	adc.w	r3, r9, r3
 8002cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002d04:	4602      	mov	r2, r0
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d0c:	460a      	mov	r2, r1
 8002d0e:	4153      	adcs	r3, r2
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d16:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
            pct = (uint8_t)(scaled / total);
 8002d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d1e:	2200      	movs	r2, #0
 8002d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d22:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d28:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d2c:	f7fd faf0 	bl	8000310 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
            if (pct > 100u) pct = 100u;
 8002d3a:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002d3e:	2b64      	cmp	r3, #100	@ 0x64
 8002d40:	d95a      	bls.n	8002df8 <motion_refresh_status_locked+0x1ac>
 8002d42:	2364      	movs	r3, #100	@ 0x64
 8002d44:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
        if (g_has_active_segment && total > 0u) {
 8002d48:	e056      	b.n	8002df8 <motion_refresh_status_locked+0x1ac>
        } else if (total == 0u && g_has_active_segment) {
 8002d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <motion_refresh_status_locked+0x118>
 8002d52:	4b83      	ldr	r3, [pc, #524]	@ (8002f60 <motion_refresh_status_locked+0x314>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <motion_refresh_status_locked+0x118>
            pct = 100u;
 8002d5c:	2364      	movs	r3, #100	@ 0x64
 8002d5e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002d62:	e04a      	b.n	8002dfa <motion_refresh_status_locked+0x1ae>
        } else if (!g_has_active_segment && total > 0u) {
 8002d64:	4b7e      	ldr	r3, [pc, #504]	@ (8002f60 <motion_refresh_status_locked+0x314>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d145      	bne.n	8002dfa <motion_refresh_status_locked+0x1ae>
 8002d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d041      	beq.n	8002dfa <motion_refresh_status_locked+0x1ae>
            pct = (emitted >= total) ? 100u : (uint8_t)(((uint64_t)emitted * 100u) / total);
 8002d76:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d236      	bcs.n	8002df0 <motion_refresh_status_locked+0x1a4>
 8002d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d86:	2200      	movs	r2, #0
 8002d88:	469a      	mov	sl, r3
 8002d8a:	4693      	mov	fp, r2
 8002d8c:	4652      	mov	r2, sl
 8002d8e:	465b      	mov	r3, fp
 8002d90:	1891      	adds	r1, r2, r2
 8002d92:	6139      	str	r1, [r7, #16]
 8002d94:	415b      	adcs	r3, r3
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d9c:	eb12 040a 	adds.w	r4, r2, sl
 8002da0:	eb43 050b 	adc.w	r5, r3, fp
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	016b      	lsls	r3, r5, #5
 8002dae:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002db2:	0162      	lsls	r2, r4, #5
 8002db4:	18a1      	adds	r1, r4, r2
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	eb45 0303 	adc.w	r3, r5, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	eb13 030a 	adds.w	r3, r3, sl
 8002dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dca:	4613      	mov	r3, r2
 8002dcc:	eb43 030b 	adc.w	r3, r3, fp
 8002dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dda:	637a      	str	r2, [r7, #52]	@ 0x34
 8002ddc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002de0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002de4:	f7fd fa94 	bl	8000310 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	b2d3      	uxtb	r3, r2
 8002dee:	e000      	b.n	8002df2 <motion_refresh_status_locked+0x1a6>
 8002df0:	2364      	movs	r3, #100	@ 0x64
 8002df2:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8002df6:	e000      	b.n	8002dfa <motion_refresh_status_locked+0x1ae>
        if (g_has_active_segment && total > 0u) {
 8002df8:	bf00      	nop

        /* Erro em UNIDADES DE PASSOS (alinhado ao PI de posição)
         * desired_steps = passos emitidos no segmento (target_steps)
         * actual_steps  = encoder_rel convertido para passos DDA
         */
        int64_t enc_rel = g_encoder_position[axis] - g_encoder_origin[axis];
 8002dfa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8002f70 <motion_refresh_status_locked+0x324>)
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e08:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002e0c:	4a59      	ldr	r2, [pc, #356]	@ (8002f74 <motion_refresh_status_locked+0x328>)
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	1a86      	subs	r6, r0, r2
 8002e18:	603e      	str	r6, [r7, #0]
 8002e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e24:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        if (enc_rel > (int64_t)INT32_MAX) enc_rel = INT32_MAX;
 8002e28:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002e2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002e30:	f173 0300 	sbcs.w	r3, r3, #0
 8002e34:	db06      	blt.n	8002e44 <motion_refresh_status_locked+0x1f8>
 8002e36:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 8002e42:	e00c      	b.n	8002e5e <motion_refresh_status_locked+0x212>
        else if (enc_rel < (int64_t)INT32_MIN) enc_rel = INT32_MIN;
 8002e44:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002e48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8002e4c:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8002e50:	da05      	bge.n	8002e5e <motion_refresh_status_locked+0x212>
 8002e52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        int64_t num = enc_rel * (int64_t)dda_steps_per_rev();
 8002e5e:	f7ff fdd7 	bl	8002a10 <dda_steps_per_rev>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2200      	movs	r2, #0
 8002e66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e68:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002e72:	4602      	mov	r2, r0
 8002e74:	fb02 f203 	mul.w	r2, r2, r3
 8002e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e7c:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	441a      	add	r2, r3
 8002e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e8a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e8c:	fba3 1301 	umull	r1, r3, r3, r1
 8002e90:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e92:	460b      	mov	r3, r1
 8002e94:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e98:	18d3      	adds	r3, r2, r3
 8002e9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ea0:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 8002ea4:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        int32_t actual_steps = (ENC_COUNTS_PER_REV[axis]
 8002ea8:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002eac:	4b32      	ldr	r3, [pc, #200]	@ (8002f78 <motion_refresh_status_locked+0x32c>)
 8002eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                                ? (int32_t)(num / (int64_t)ENC_COUNTS_PER_REV[axis])
                                : 0);
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <motion_refresh_status_locked+0x28e>
                                ? (int32_t)(num / (int64_t)ENC_COUNTS_PER_REV[axis])
 8002eb6:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8002eba:	4b2f      	ldr	r3, [pc, #188]	@ (8002f78 <motion_refresh_status_locked+0x32c>)
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ece:	f7fd f9cf 	bl	8000270 <__aeabi_ldivmod>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
                                : 0);
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	e000      	b.n	8002edc <motion_refresh_status_locked+0x290>
 8002eda:	2300      	movs	r3, #0
        int32_t actual_steps = (ENC_COUNTS_PER_REV[axis]
 8002edc:	677b      	str	r3, [r7, #116]	@ 0x74
        int32_t desired_steps = (int32_t)ax->target_steps;
 8002ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	673b      	str	r3, [r7, #112]	@ 0x70
        int32_t err = desired_steps - actual_steps;
 8002ee6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002ee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
        int8_t  err8 = motion_clamp_error(err);
 8002eee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002ef0:	f7ff fe43 	bl	8002b7a <motion_clamp_error>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        switch (axis) {
 8002efa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <motion_refresh_status_locked+0x2bc>
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d009      	beq.n	8002f1a <motion_refresh_status_locked+0x2ce>
 8002f06:	e011      	b.n	8002f2c <motion_refresh_status_locked+0x2e0>
            case AXIS_X: g_status.pctX = pct; g_status.pidErrX = err8; break;
 8002f08:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <motion_refresh_status_locked+0x31c>)
 8002f0a:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f0e:	7093      	strb	r3, [r2, #2]
 8002f10:	4a15      	ldr	r2, [pc, #84]	@ (8002f68 <motion_refresh_status_locked+0x31c>)
 8002f12:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002f16:	7153      	strb	r3, [r2, #5]
 8002f18:	e011      	b.n	8002f3e <motion_refresh_status_locked+0x2f2>
            case AXIS_Y: g_status.pctY = pct; g_status.pidErrY = err8; break;
 8002f1a:	4a13      	ldr	r2, [pc, #76]	@ (8002f68 <motion_refresh_status_locked+0x31c>)
 8002f1c:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f20:	70d3      	strb	r3, [r2, #3]
 8002f22:	4a11      	ldr	r2, [pc, #68]	@ (8002f68 <motion_refresh_status_locked+0x31c>)
 8002f24:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002f28:	7193      	strb	r3, [r2, #6]
 8002f2a:	e008      	b.n	8002f3e <motion_refresh_status_locked+0x2f2>
            case AXIS_Z:
            default:     g_status.pctZ = pct; g_status.pidErrZ = err8; break;
 8002f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f68 <motion_refresh_status_locked+0x31c>)
 8002f2e:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002f32:	7113      	strb	r3, [r2, #4]
 8002f34:	4a0c      	ldr	r2, [pc, #48]	@ (8002f68 <motion_refresh_status_locked+0x31c>)
 8002f36:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002f3a:	71d3      	strb	r3, [r2, #7]
 8002f3c:	bf00      	nop
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f3e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002f42:	3301      	adds	r3, #1
 8002f44:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002f48:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	f67f ae93 	bls.w	8002c78 <motion_refresh_status_locked+0x2c>
        }
    }
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	37ac      	adds	r7, #172	@ 0xac
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000168 	.word	0x20000168
 8002f64:	20000c6e 	.word	0x20000c6e
 8002f68:	200000d0 	.word	0x200000d0
 8002f6c:	200000d8 	.word	0x200000d8
 8002f70:	20000c70 	.word	0x20000c70
 8002f74:	20000c98 	.word	0x20000c98
 8002f78:	08010d44 	.word	0x08010d44

08002f7c <motion_stop_all_axes_locked>:


static void motion_stop_all_axes_locked(void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	e045      	b.n	8003014 <motion_stop_all_axes_locked+0x98>
        motion_hw_step_low(axis);
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fcd8 	bl	8002940 <motion_hw_step_low>
        motion_hw_enable(axis, 0u);
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fc6f 	bl	8002878 <motion_hw_enable>

        motion_axis_state_t *ax = &g_axis_state[axis];
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <motion_stop_all_axes_locked+0xa8>)
 8002fa6:	4413      	add	r3, r2
 8002fa8:	603b      	str	r3, [r7, #0]
        ax->total_steps       = 0u;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = 0u;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	819a      	strh	r2, [r3, #12]
        ax->kp = 0u; ax->ki = 0u; ax->kd = 0u;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	81da      	strh	r2, [r3, #14]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	821a      	strh	r2, [r3, #16]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	825a      	strh	r2, [r3, #18]

        /* limpa controle de pulso/guardas */
        ax->step_high         = 0u;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = 0u;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ax->dir_settle_ticks  = 0u;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* limpa DDA/rampa */
        ax->dda_accum_q16     = 0u;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = 0u;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	621a      	str	r2, [r3, #32]
        ax->v_actual_sps      = 0u;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	625a      	str	r2, [r3, #36]	@ 0x24
        ax->accel_sps2        = 0u;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	3301      	adds	r3, #1
 8003012:	71fb      	strb	r3, [r7, #7]
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d9b6      	bls.n	8002f88 <motion_stop_all_axes_locked+0xc>
    }
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200000d8 	.word	0x200000d8

08003028 <motion_queue_clear_locked>:


static void motion_queue_clear_locked(void) {
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
    g_queue_head = 0u;
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <motion_queue_clear_locked+0x20>)
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
    g_queue_tail = 0u;
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <motion_queue_clear_locked+0x24>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
    g_queue_count = 0u;
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <motion_queue_clear_locked+0x28>)
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	20000c6c 	.word	0x20000c6c
 800304c:	20000c6d 	.word	0x20000c6d
 8003050:	20000c6e 	.word	0x20000c6e

08003054 <motion_queue_push_locked>:

static proto_result_t motion_queue_push_locked(const move_queue_add_req_t *req) {
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
    if (g_queue_count >= MOTION_QUEUE_CAPACITY)
 800305c:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <motion_queue_push_locked+0x68>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b3f      	cmp	r3, #63	@ 0x3f
 8003062:	d902      	bls.n	800306a <motion_queue_push_locked+0x16>
        return PROTO_ERR_RANGE;
 8003064:	f06f 0303 	mvn.w	r3, #3
 8003068:	e024      	b.n	80030b4 <motion_queue_push_locked+0x60>
    g_queue[g_queue_tail].req = *req;
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <motion_queue_push_locked+0x6c>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4619      	mov	r1, r3
 8003070:	4a14      	ldr	r2, [pc, #80]	@ (80030c4 <motion_queue_push_locked+0x70>)
 8003072:	232c      	movs	r3, #44	@ 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4614      	mov	r4, r2
 800307e:	461d      	mov	r5, r3
 8003080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003088:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800308c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_tail = (uint8_t)((g_queue_tail + 1u) % MOTION_QUEUE_CAPACITY);
 8003090:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <motion_queue_push_locked+0x6c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <motion_queue_push_locked+0x6c>)
 80030a0:	701a      	strb	r2, [r3, #0]
    ++g_queue_count;
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <motion_queue_push_locked+0x68>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <motion_queue_push_locked+0x68>)
 80030ac:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 80030ae:	f7ff fdcd 	bl	8002c4c <motion_refresh_status_locked>
    return PROTO_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bdb0      	pop	{r4, r5, r7, pc}
 80030bc:	20000c6e 	.word	0x20000c6e
 80030c0:	20000c6d 	.word	0x20000c6d
 80030c4:	2000016c 	.word	0x2000016c

080030c8 <motion_queue_pop_locked>:

static int motion_queue_pop_locked(move_queue_add_req_t *out) {
 80030c8:	b4b0      	push	{r4, r5, r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
    if (g_queue_count == 0u) return 0;
 80030d0:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <motion_queue_pop_locked+0x6c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <motion_queue_pop_locked+0x14>
 80030d8:	2300      	movs	r3, #0
 80030da:	e025      	b.n	8003128 <motion_queue_pop_locked+0x60>
    if (out) *out = g_queue[g_queue_head].req;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <motion_queue_pop_locked+0x40>
 80030e2:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <motion_queue_pop_locked+0x70>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4a14      	ldr	r2, [pc, #80]	@ (800313c <motion_queue_pop_locked+0x74>)
 80030ec:	232c      	movs	r3, #44	@ 0x2c
 80030ee:	fb00 f303 	mul.w	r3, r0, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	460c      	mov	r4, r1
 80030f6:	461d      	mov	r5, r3
 80030f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    g_queue_head = (uint8_t)((g_queue_head + 1u) % MOTION_QUEUE_CAPACITY);
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <motion_queue_pop_locked+0x70>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <motion_queue_pop_locked+0x70>)
 8003118:	701a      	strb	r2, [r3, #0]
    --g_queue_count;
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <motion_queue_pop_locked+0x6c>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	3b01      	subs	r3, #1
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <motion_queue_pop_locked+0x6c>)
 8003124:	701a      	strb	r2, [r3, #0]
    return 1;
 8003126:	2301      	movs	r3, #1
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bcb0      	pop	{r4, r5, r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000c6e 	.word	0x20000c6e
 8003138:	20000c6c 	.word	0x20000c6c
 800313c:	2000016c 	.word	0x2000016c

08003140 <motion_begin_segment_locked>:

static void motion_begin_segment_locked(const move_queue_add_req_t *seg) {
 8003140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003144:	b08c      	sub	sp, #48	@ 0x30
 8003146:	af06      	add	r7, sp, #24
 8003148:	6078      	str	r0, [r7, #4]
    if (!seg) return;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80d9 	beq.w	8003304 <motion_begin_segment_locked+0x1c4>

    g_has_active_segment = 1u;
 8003152:	4b6f      	ldr	r3, [pc, #444]	@ (8003310 <motion_begin_segment_locked+0x1d0>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003158:	2300      	movs	r3, #0
 800315a:	75fb      	strb	r3, [r7, #23]
 800315c:	e0a3      	b.n	80032a6 <motion_begin_segment_locked+0x166>
        motion_axis_state_t *ax = &g_axis_state[axis];
 800315e:	7dfa      	ldrb	r2, [r7, #23]
 8003160:	4613      	mov	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	4a6a      	ldr	r2, [pc, #424]	@ (8003314 <motion_begin_segment_locked+0x1d4>)
 800316a:	4413      	add	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        uint32_t total   = motion_total_for_axis(seg, axis);
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fc7f 	bl	8002a76 <motion_total_for_axis>
 8003178:	60f8      	str	r0, [r7, #12]
        uint16_t velTick = motion_velocity_for_axis(seg, axis);
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fc93 	bl	8002aaa <motion_velocity_for_axis>
 8003184:	4603      	mov	r3, r0
 8003186:	817b      	strh	r3, [r7, #10]

        ax->total_steps       = total;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	601a      	str	r2, [r3, #0]
        ax->target_steps      = 0u;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2200      	movs	r2, #0
 8003192:	605a      	str	r2, [r3, #4]
        ax->emitted_steps     = 0u;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]

        ax->velocity_per_tick = velTick;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	897a      	ldrh	r2, [r7, #10]
 800319e:	819a      	strh	r2, [r3, #12]
        ax->kp = motion_kp_for_axis(seg, axis);
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fc9a 	bl	8002ade <motion_kp_for_axis>
 80031aa:	4603      	mov	r3, r0
 80031ac:	461a      	mov	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	81da      	strh	r2, [r3, #14]
        ax->ki = motion_ki_for_axis(seg, axis);
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fcab 	bl	8002b12 <motion_ki_for_axis>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	821a      	strh	r2, [r3, #16]
        ax->kd = motion_kd_for_axis(seg, axis);
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fcbc 	bl	8002b46 <motion_kd_for_axis>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	825a      	strh	r2, [r3, #18]

        /* guardas para atender DIR/ENABLE timings do TMC5160 */
        ax->step_high         = 0u;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2200      	movs	r2, #0
 80031da:	751a      	strb	r2, [r3, #20]
        ax->step_low          = 0u; 
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2200      	movs	r2, #0
 80031e0:	755a      	strb	r2, [r3, #21]
        ax->en_settle_ticks   = (total > 0u) ? MOTION_ENABLE_SETTLE_TICKS : 0u;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <motion_begin_segment_locked+0xac>
 80031e8:	2202      	movs	r2, #2
 80031ea:	e000      	b.n	80031ee <motion_begin_segment_locked+0xae>
 80031ec:	2200      	movs	r2, #0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        ax->dda_accum_q16     = 0u;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2200      	movs	r2, #0
 8003200:	619a      	str	r2, [r3, #24]
        ax->dda_inc_q16       = 0u;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2200      	movs	r2, #0
 8003206:	61da      	str	r2, [r3, #28]
        ax->v_target_sps      = ((uint32_t)velTick) * 1000u;  /* steps/s alvo (derivado do seu campo) */
 8003208:	897b      	ldrh	r3, [r7, #10]
 800320a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800320e:	fb03 f202 	mul.w	r2, r3, r2
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	621a      	str	r2, [r3, #32]
        if (ax->v_target_sps > MOTION_MAX_SPS) ax->v_target_sps = MOTION_MAX_SPS;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800321e:	4293      	cmp	r3, r2
 8003220:	d903      	bls.n	800322a <motion_begin_segment_locked+0xea>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8003228:	621a      	str	r2, [r3, #32]
        /* Preserva v_actual_sps ao encadear segmentos (rampa só no início da lista) */
        if (g_status.state != MOTION_RUNNING) {
 800322a:	4b3b      	ldr	r3, [pc, #236]	@ (8003318 <motion_begin_segment_locked+0x1d8>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d002      	beq.n	800323a <motion_begin_segment_locked+0xfa>
            ax->v_actual_sps  = 0u;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2200      	movs	r2, #0
 8003238:	625a      	str	r2, [r3, #36]	@ 0x24
        }
        ax->accel_sps2        = DEMO_ACCEL_SPS2;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4a37      	ldr	r2, [pc, #220]	@ (800331c <motion_begin_segment_locked+0x1dc>)
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28

        motion_hw_step_low(axis);
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fb7c 	bl	8002940 <motion_hw_step_low>
        motion_hw_set_dir(axis, (uint8_t)((seg->dirMask >> axis) & 0x1u));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	461a      	mov	r2, r3
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	fa42 f303 	asr.w	r3, r2, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	b2da      	uxtb	r2, r3
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fac9 	bl	80027f8 <motion_hw_set_dir>

        if (total > 0u) motion_hw_enable(axis, 1u);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <motion_begin_segment_locked+0x138>
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fb01 	bl	8002878 <motion_hw_enable>
 8003276:	e004      	b.n	8003282 <motion_begin_segment_locked+0x142>
        else            motion_hw_enable(axis, 0u);
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fafb 	bl	8002878 <motion_hw_enable>

        /* Não zera origem automaticamente; mantém a referência definida via set_origin */
        g_encoder_delta_tick[axis] = 0;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	4a26      	ldr	r2, [pc, #152]	@ (8003320 <motion_begin_segment_locked+0x1e0>)
 8003286:	2100      	movs	r1, #0
 8003288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_pi_i_accum[axis] = 0;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	4a25      	ldr	r2, [pc, #148]	@ (8003324 <motion_begin_segment_locked+0x1e4>)
 8003290:	2100      	movs	r1, #0
 8003292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        g_pi_prev_err[axis] = 0;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	4a23      	ldr	r2, [pc, #140]	@ (8003328 <motion_begin_segment_locked+0x1e8>)
 800329a:	2100      	movs	r1, #0
 800329c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	3301      	adds	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	f67f af58 	bls.w	800315e <motion_begin_segment_locked+0x1e>
    }
#if MOTION_DEBUG_FLOW
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
           (unsigned)seg->frameId,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	781b      	ldrb	r3, [r3, #0]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032b2:	4698      	mov	r8, r3
           (unsigned)seg->dirMask,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	785b      	ldrb	r3, [r3, #1]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032b8:	4699      	mov	r9, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	885b      	ldrh	r3, [r3, #2]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032be:	469a      	mov	sl, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	891b      	ldrh	r3, [r3, #8]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032c4:	461e      	mov	r6, r3
           (unsigned)seg->vx, (unsigned)seg->vy, (unsigned)seg->vz,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8a1b      	ldrh	r3, [r3, #16]
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032ca:	603b      	str	r3, [r7, #0]
           (unsigned long)motion_total_for_axis(seg, AXIS_X),
 80032cc:	2100      	movs	r1, #0
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fbd1 	bl	8002a76 <motion_total_for_axis>
 80032d4:	4604      	mov	r4, r0
           (unsigned long)motion_total_for_axis(seg, AXIS_Y),
 80032d6:	2101      	movs	r1, #1
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fbcc 	bl	8002a76 <motion_total_for_axis>
 80032de:	4605      	mov	r5, r0
           (unsigned long)motion_total_for_axis(seg, AXIS_Z));
 80032e0:	2102      	movs	r1, #2
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fbc7 	bl	8002a76 <motion_total_for_axis>
 80032e8:	4603      	mov	r3, r0
    printf("[FLOW begin_segment id=%u dirMask=0x%02X V(x,y,z)=(%u,%u,%u) S(x,y,z)=(%lu,%lu,%lu) ]\r\n",
 80032ea:	9304      	str	r3, [sp, #16]
 80032ec:	9503      	str	r5, [sp, #12]
 80032ee:	9402      	str	r4, [sp, #8]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	9600      	str	r6, [sp, #0]
 80032f6:	4653      	mov	r3, sl
 80032f8:	464a      	mov	r2, r9
 80032fa:	4641      	mov	r1, r8
 80032fc:	480b      	ldr	r0, [pc, #44]	@ (800332c <motion_begin_segment_locked+0x1ec>)
 80032fe:	f00b ffeb 	bl	800f2d8 <iprintf>
 8003302:	e000      	b.n	8003306 <motion_begin_segment_locked+0x1c6>
    if (!seg) return;
 8003304:	bf00      	nop
#endif
}
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330e:	bf00      	nop
 8003310:	20000168 	.word	0x20000168
 8003314:	200000d8 	.word	0x200000d8
 8003318:	200000d0 	.word	0x200000d0
 800331c:	00030d40 	.word	0x00030d40
 8003320:	20000cb0 	.word	0x20000cb0
 8003324:	20000ce0 	.word	0x20000ce0
 8003328:	20000cec 	.word	0x20000cec
 800332c:	08010674 	.word	0x08010674

08003330 <motion_try_start_next_locked>:

static uint8_t motion_try_start_next_locked(void) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	@ 0x30
 8003334:	af00      	add	r7, sp, #0
    move_queue_add_req_t next;
    if (!motion_queue_pop_locked(&next))
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fec5 	bl	80030c8 <motion_queue_pop_locked>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <motion_try_start_next_locked+0x18>
        return 0u;
 8003344:	2300      	movs	r3, #0
 8003346:	e010      	b.n	800336a <motion_try_start_next_locked+0x3a>
    motion_begin_segment_locked(&next);
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fef8 	bl	8003140 <motion_begin_segment_locked>
    g_active_frame_id = next.frameId;
 8003350:	793a      	ldrb	r2, [r7, #4]
 8003352:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <motion_try_start_next_locked+0x44>)
 8003354:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_FLOW
    printf("[FLOW pop_next id=%u remaining=%u]\\r\\n", (unsigned)g_active_frame_id, (unsigned)g_queue_count);
 8003356:	4b07      	ldr	r3, [pc, #28]	@ (8003374 <motion_try_start_next_locked+0x44>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <motion_try_start_next_locked+0x48>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4806      	ldr	r0, [pc, #24]	@ (800337c <motion_try_start_next_locked+0x4c>)
 8003364:	f00b ffb8 	bl	800f2d8 <iprintf>
#endif
    return 1u;
 8003368:	2301      	movs	r3, #1
}
 800336a:	4618      	mov	r0, r3
 800336c:	3730      	adds	r7, #48	@ 0x30
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000c6f 	.word	0x20000c6f
 8003378:	20000c6e 	.word	0x20000c6e
 800337c:	080106cc 	.word	0x080106cc

08003380 <motion_update_encoders>:

/* =======================
 *  Encoders
 * ======================= */
static void motion_update_encoders(void) {
 8003380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003384:	b08e      	sub	sp, #56	@ 0x38
 8003386:	af02      	add	r7, sp, #8
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003388:	2300      	movs	r3, #0
 800338a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800338e:	e0cc      	b.n	800352a <motion_update_encoders+0x1aa>
        uint32_t now = motion_hw_encoder_read_raw(axis);
 8003390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff faf7 	bl	8002988 <motion_hw_encoder_read_raw>
 800339a:	62b8      	str	r0, [r7, #40]	@ 0x28
        uint8_t bits = motion_hw_encoder_bits(axis);
 800339c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fb19 	bl	80029d8 <motion_hw_encoder_bits>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (bits == 16u) {
 80033ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d15e      	bne.n	8003472 <motion_update_encoders+0xf2>
            uint16_t prev = (uint16_t)g_encoder_last_raw[axis];
 80033b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033b8:	4a61      	ldr	r2, [pc, #388]	@ (8003540 <motion_update_encoders+0x1c0>)
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	82fb      	strh	r3, [r7, #22]
            int16_t delta = (int16_t)((uint16_t)now - prev);
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	8afb      	ldrh	r3, [r7, #22]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	82bb      	strh	r3, [r7, #20]
            g_encoder_last_raw[axis] = (uint16_t)now;
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033d4:	4611      	mov	r1, r2
 80033d6:	4a5a      	ldr	r2, [pc, #360]	@ (8003540 <motion_update_encoders+0x1c0>)
 80033d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_encoder_position[axis] += delta;
 80033dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033e0:	4a58      	ldr	r2, [pc, #352]	@ (8003544 <motion_update_encoders+0x1c4>)
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80033ee:	17c8      	asrs	r0, r1, #31
 80033f0:	460c      	mov	r4, r1
 80033f2:	4605      	mov	r5, r0
 80033f4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80033f8:	eb12 0a04 	adds.w	sl, r2, r4
 80033fc:	eb43 0b05 	adc.w	fp, r3, r5
 8003400:	4a50      	ldr	r2, [pc, #320]	@ (8003544 <motion_update_encoders+0x1c4>)
 8003402:	00cb      	lsls	r3, r1, #3
 8003404:	4413      	add	r3, r2
 8003406:	e9c3 ab00 	strd	sl, fp, [r3]
            g_encoder_delta_tick[axis] = (int32_t)delta;
 800340a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800340e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003412:	494d      	ldr	r1, [pc, #308]	@ (8003548 <motion_update_encoders+0x1c8>)
 8003414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 8003418:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d07f      	beq.n	8003520 <motion_update_encoders+0x1a0>
                long abs = (long)g_encoder_position[axis];
 8003420:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003424:	4a47      	ldr	r2, [pc, #284]	@ (8003544 <motion_update_encoders+0x1c4>)
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	4613      	mov	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
                long rel = (long)(g_encoder_position[axis] - g_encoder_origin[axis]);
 8003432:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003436:	4a43      	ldr	r2, [pc, #268]	@ (8003544 <motion_update_encoders+0x1c4>)
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	4611      	mov	r1, r2
 8003442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003446:	4a41      	ldr	r2, [pc, #260]	@ (800354c <motion_update_encoders+0x1cc>)
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	4613      	mov	r3, r2
 8003452:	1acb      	subs	r3, r1, r3
 8003454:	60fb      	str	r3, [r7, #12]
                printf("[ENC axis=%u raw=%u delta=%d abs=%ld rel=%ld]\r\n",
 8003456:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800345a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800346a:	4839      	ldr	r0, [pc, #228]	@ (8003550 <motion_update_encoders+0x1d0>)
 800346c:	f00b ff34 	bl	800f2d8 <iprintf>
 8003470:	e056      	b.n	8003520 <motion_update_encoders+0x1a0>
                       abs,
                       rel);
            }
#endif
        } else {
            int32_t delta = (int32_t)(now - g_encoder_last_raw[axis]);
 8003472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003476:	4a32      	ldr	r2, [pc, #200]	@ (8003540 <motion_update_encoders+0x1c0>)
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	623b      	str	r3, [r7, #32]
            g_encoder_last_raw[axis] = now;
 8003482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003486:	492e      	ldr	r1, [pc, #184]	@ (8003540 <motion_update_encoders+0x1c0>)
 8003488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800348a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            g_encoder_position[axis] += delta;
 800348e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003492:	4a2c      	ldr	r2, [pc, #176]	@ (8003544 <motion_update_encoders+0x1c4>)
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	6a39      	ldr	r1, [r7, #32]
 800349e:	17c8      	asrs	r0, r1, #31
 80034a0:	4688      	mov	r8, r1
 80034a2:	4681      	mov	r9, r0
 80034a4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80034a8:	eb12 0008 	adds.w	r0, r2, r8
 80034ac:	6038      	str	r0, [r7, #0]
 80034ae:	eb43 0309 	adc.w	r3, r3, r9
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	4a23      	ldr	r2, [pc, #140]	@ (8003544 <motion_update_encoders+0x1c4>)
 80034b6:	00cb      	lsls	r3, r1, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034be:	e9c3 1200 	strd	r1, r2, [r3]
            g_encoder_delta_tick[axis] = delta;
 80034c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034c6:	4920      	ldr	r1, [pc, #128]	@ (8003548 <motion_update_encoders+0x1c8>)
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MOTION_DEBUG_ENCODERS
            if (delta != 0) {
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d025      	beq.n	8003520 <motion_update_encoders+0x1a0>
                long abs = (long)g_encoder_position[axis];
 80034d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <motion_update_encoders+0x1c4>)
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	4613      	mov	r3, r2
 80034e4:	61fb      	str	r3, [r7, #28]
                long rel = (long)(g_encoder_position[axis] - g_encoder_origin[axis]);
 80034e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ea:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <motion_update_encoders+0x1c4>)
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	4611      	mov	r1, r2
 80034f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034fa:	4a14      	ldr	r2, [pc, #80]	@ (800354c <motion_update_encoders+0x1cc>)
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	4613      	mov	r3, r2
 8003506:	1acb      	subs	r3, r1, r3
 8003508:	61bb      	str	r3, [r7, #24]
                printf("[ENC axis=%u raw=%lu delta=%ld abs=%ld rel=%ld]\r\n",
 800350a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800351a:	480e      	ldr	r0, [pc, #56]	@ (8003554 <motion_update_encoders+0x1d4>)
 800351c:	f00b fedc 	bl	800f2d8 <iprintf>
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003520:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003524:	3301      	adds	r3, #1
 8003526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800352a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800352e:	2b02      	cmp	r3, #2
 8003530:	f67f af2e 	bls.w	8003390 <motion_update_encoders+0x10>
                       rel);
            }
#endif
        }
    }
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	3730      	adds	r7, #48	@ 0x30
 800353a:	46bd      	mov	sp, r7
 800353c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003540:	20000c88 	.word	0x20000c88
 8003544:	20000c70 	.word	0x20000c70
 8003548:	20000cb0 	.word	0x20000cb0
 800354c:	20000c98 	.word	0x20000c98
 8003550:	080106f4 	.word	0x080106f4
 8003554:	08010724 	.word	0x08010724

08003558 <motion_send_queue_add_ack>:

/* =======================
 *  Envio de respostas
 * ======================= */
static void motion_send_queue_add_ack(uint8_t frame_id, uint8_t status) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	4603      	mov	r3, r0
 8003560:	460a      	mov	r2, r1
 8003562:	71fb      	strb	r3, [r7, #7]
 8003564:	4613      	mov	r3, r2
 8003566:	71bb      	strb	r3, [r7, #6]
    uint8_t raw[6];
    move_queue_add_ack_resp_t resp = { frame_id, status };
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	733b      	strb	r3, [r7, #12]
 800356c:	79bb      	ldrb	r3, [r7, #6]
 800356e:	737b      	strb	r3, [r7, #13]
    if (move_queue_add_ack_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 8003570:	f107 0110 	add.w	r1, r7, #16
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	2206      	movs	r2, #6
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd ff11 	bl	80013a2 <move_queue_add_ack_resp_encoder>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <motion_send_queue_add_ack+0x48>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "ack", "encode_fail");
 8003586:	4a12      	ldr	r2, [pc, #72]	@ (80035d0 <motion_send_queue_add_ack+0x78>)
 8003588:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <motion_send_queue_add_ack+0x7c>)
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <motion_send_queue_add_ack+0x80>)
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	f06f 0201 	mvn.w	r2, #1
 8003596:	2164      	movs	r1, #100	@ 0x64
 8003598:	2002      	movs	r0, #2
 800359a:	f7ff f837 	bl	800260c <log_event_auto>
 800359e:	e014      	b.n	80035ca <motion_send_queue_add_ack+0x72>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 80035a0:	f107 0310 	add.w	r3, r7, #16
 80035a4:	2106      	movs	r1, #6
 80035a6:	4618      	mov	r0, r3
 80035a8:	f002 f80c 	bl	80055c4 <app_resp_push>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <motion_send_queue_add_ack+0x72>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "ack", "queue_full");
 80035b2:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <motion_send_queue_add_ack+0x78>)
 80035b4:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <motion_send_queue_add_ack+0x84>)
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <motion_send_queue_add_ack+0x80>)
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	f06f 0203 	mvn.w	r2, #3
 80035c2:	2164      	movs	r1, #100	@ 0x64
 80035c4:	2002      	movs	r0, #2
 80035c6:	f7ff f821 	bl	800260c <log_event_auto>
    }
}
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	0801066c 	.word	0x0801066c
 80035d4:	08010758 	.word	0x08010758
 80035d8:	08010764 	.word	0x08010764
 80035dc:	08010768 	.word	0x08010768

080035e0 <motion_send_queue_status_response>:

static void motion_send_queue_status_response(uint8_t frame_id) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	@ 0x28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
    uint8_t raw[12];
    move_queue_status_resp_t resp = {
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	733b      	strb	r3, [r7, #12]
        .frameId = frame_id,
        .status  = (uint8_t)g_status.state,
 80035ee:	4b27      	ldr	r3, [pc, #156]	@ (800368c <motion_send_queue_status_response+0xac>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035f4:	737b      	strb	r3, [r7, #13]
        .pidErrX = (uint8_t)g_status.pidErrX,
 80035f6:	4b25      	ldr	r3, [pc, #148]	@ (800368c <motion_send_queue_status_response+0xac>)
 80035f8:	795b      	ldrb	r3, [r3, #5]
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 80035fe:	73bb      	strb	r3, [r7, #14]
        .pidErrY = (uint8_t)g_status.pidErrY,
 8003600:	4b22      	ldr	r3, [pc, #136]	@ (800368c <motion_send_queue_status_response+0xac>)
 8003602:	799b      	ldrb	r3, [r3, #6]
 8003604:	b25b      	sxtb	r3, r3
 8003606:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8003608:	73fb      	strb	r3, [r7, #15]
        .pidErrZ = (uint8_t)g_status.pidErrZ,
 800360a:	4b20      	ldr	r3, [pc, #128]	@ (800368c <motion_send_queue_status_response+0xac>)
 800360c:	79db      	ldrb	r3, [r3, #7]
 800360e:	b25b      	sxtb	r3, r3
 8003610:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8003612:	743b      	strb	r3, [r7, #16]
        .pctX    = g_status.pctX,
 8003614:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <motion_send_queue_status_response+0xac>)
 8003616:	789b      	ldrb	r3, [r3, #2]
 8003618:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 800361a:	747b      	strb	r3, [r7, #17]
        .pctY    = g_status.pctY,
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <motion_send_queue_status_response+0xac>)
 800361e:	78db      	ldrb	r3, [r3, #3]
 8003620:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 8003622:	74bb      	strb	r3, [r7, #18]
        .pctZ    = g_status.pctZ,
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <motion_send_queue_status_response+0xac>)
 8003626:	791b      	ldrb	r3, [r3, #4]
 8003628:	b2db      	uxtb	r3, r3
    move_queue_status_resp_t resp = {
 800362a:	74fb      	strb	r3, [r7, #19]
    };
    if (move_queue_status_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) {
 800362c:	f107 0114 	add.w	r1, r7, #20
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	220c      	movs	r2, #12
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd ff6b 	bl	8001512 <move_queue_status_resp_encoder>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <motion_send_queue_status_response+0x7c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "status", "encode_fail");
 8003642:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <motion_send_queue_status_response+0xb0>)
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <motion_send_queue_status_response+0xb4>)
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <motion_send_queue_status_response+0xb8>)
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	f06f 0201 	mvn.w	r2, #1
 8003652:	2164      	movs	r1, #100	@ 0x64
 8003654:	2002      	movs	r0, #2
 8003656:	f7fe ffd9 	bl	800260c <log_event_auto>
 800365a:	e014      	b.n	8003686 <motion_send_queue_status_response+0xa6>
        return;
    }
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	210c      	movs	r1, #12
 8003662:	4618      	mov	r0, r3
 8003664:	f001 ffae 	bl	80055c4 <app_resp_push>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <motion_send_queue_status_response+0xa6>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "status", "queue_full");
 800366e:	4a08      	ldr	r2, [pc, #32]	@ (8003690 <motion_send_queue_status_response+0xb0>)
 8003670:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <motion_send_queue_status_response+0xbc>)
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <motion_send_queue_status_response+0xb8>)
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	f06f 0203 	mvn.w	r2, #3
 800367e:	2164      	movs	r1, #100	@ 0x64
 8003680:	2002      	movs	r0, #2
 8003682:	f7fe ffc3 	bl	800260c <log_event_auto>
    }
}
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200000d0 	.word	0x200000d0
 8003690:	0801066c 	.word	0x0801066c
 8003694:	08010758 	.word	0x08010758
 8003698:	08010774 	.word	0x08010774
 800369c:	08010768 	.word	0x08010768

080036a0 <motion_send_start_response>:

static void motion_send_start_response(uint8_t frame_id, uint8_t status, uint8_t depth) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
 80036aa:	460b      	mov	r3, r1
 80036ac:	71bb      	strb	r3, [r7, #6]
 80036ae:	4613      	mov	r3, r2
 80036b0:	717b      	strb	r3, [r7, #5]
    uint8_t raw[6];
    start_move_resp_t resp; resp.frameId = frame_id; resp.status = status; resp.depth = depth;
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	733b      	strb	r3, [r7, #12]
 80036b6:	79bb      	ldrb	r3, [r7, #6]
 80036b8:	737b      	strb	r3, [r7, #13]
 80036ba:	797b      	ldrb	r3, [r7, #5]
 80036bc:	73bb      	strb	r3, [r7, #14]
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 80036be:	f107 0110 	add.w	r1, r7, #16
 80036c2:	f107 030c 	add.w	r3, r7, #12
 80036c6:	2206      	movs	r2, #6
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe f812 	bl	80016f2 <start_move_resp_encoder>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d115      	bne.n	8003700 <motion_send_start_response+0x60>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	2106      	movs	r1, #6
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 ff72 	bl	80055c4 <app_resp_push>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <motion_send_start_response+0x62>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "start", "resp_queue_full");
 80036e6:	4a08      	ldr	r2, [pc, #32]	@ (8003708 <motion_send_start_response+0x68>)
 80036e8:	4b08      	ldr	r3, [pc, #32]	@ (800370c <motion_send_start_response+0x6c>)
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	4b08      	ldr	r3, [pc, #32]	@ (8003710 <motion_send_start_response+0x70>)
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	f06f 0203 	mvn.w	r2, #3
 80036f6:	2164      	movs	r1, #100	@ 0x64
 80036f8:	2002      	movs	r0, #2
 80036fa:	f7fe ff87 	bl	800260c <log_event_auto>
 80036fe:	e000      	b.n	8003702 <motion_send_start_response+0x62>
    if (start_move_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 8003700:	bf00      	nop
    }
}
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	0801066c 	.word	0x0801066c
 800370c:	0801077c 	.word	0x0801077c
 8003710:	0801078c 	.word	0x0801078c

08003714 <motion_send_move_end_response>:

static void motion_send_move_end_response(uint8_t frame_id, uint8_t status) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af02      	add	r7, sp, #8
 800371a:	4603      	mov	r3, r0
 800371c:	460a      	mov	r2, r1
 800371e:	71fb      	strb	r3, [r7, #7]
 8003720:	4613      	mov	r3, r2
 8003722:	71bb      	strb	r3, [r7, #6]
    uint8_t raw[5];
    move_end_resp_t resp; resp.frameId = frame_id; resp.status = status;
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	733b      	strb	r3, [r7, #12]
 8003728:	79bb      	ldrb	r3, [r7, #6]
 800372a:	737b      	strb	r3, [r7, #13]
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 800372c:	f107 0110 	add.w	r1, r7, #16
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	2205      	movs	r2, #5
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fd80 	bl	800123c <move_end_resp_encoder>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d115      	bne.n	800376e <motion_send_move_end_response+0x5a>
    if (app_resp_push(raw, (uint32_t)sizeof raw) != PROTO_OK) {
 8003742:	f107 0310 	add.w	r3, r7, #16
 8003746:	2105      	movs	r1, #5
 8003748:	4618      	mov	r0, r3
 800374a:	f001 ff3b 	bl	80055c4 <app_resp_push>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <motion_send_move_end_response+0x5c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "move_end", "resp_queue_full");
 8003754:	4a08      	ldr	r2, [pc, #32]	@ (8003778 <motion_send_move_end_response+0x64>)
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <motion_send_move_end_response+0x68>)
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <motion_send_move_end_response+0x6c>)
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	f06f 0203 	mvn.w	r2, #3
 8003764:	2164      	movs	r1, #100	@ 0x64
 8003766:	2002      	movs	r0, #2
 8003768:	f7fe ff50 	bl	800260c <log_event_auto>
 800376c:	e000      	b.n	8003770 <motion_send_move_end_response+0x5c>
    if (move_end_resp_encoder(&resp, raw, sizeof raw) != PROTO_OK) return;
 800376e:	bf00      	nop
    }
}
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	0801066c 	.word	0x0801066c
 800377c:	0801077c 	.word	0x0801077c
 8003780:	08010794 	.word	0x08010794

08003784 <motion_service_init>:


/* =======================
 *  Init
 * ======================= */
void motion_service_init(void) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af04      	add	r7, sp, #16
    uint32_t primask = motion_lock();
 800378a:	f7ff f953 	bl	8002a34 <motion_lock>
 800378e:	60b8      	str	r0, [r7, #8]

    memset(&g_status, 0, sizeof g_status);
 8003790:	2208      	movs	r2, #8
 8003792:	2100      	movs	r1, #0
 8003794:	484b      	ldr	r0, [pc, #300]	@ (80038c4 <motion_service_init+0x140>)
 8003796:	f00b ffd7 	bl	800f748 <memset>
    memset(g_axis_state, 0, sizeof g_axis_state);
 800379a:	2290      	movs	r2, #144	@ 0x90
 800379c:	2100      	movs	r1, #0
 800379e:	484a      	ldr	r0, [pc, #296]	@ (80038c8 <motion_service_init+0x144>)
 80037a0:	f00b ffd2 	bl	800f748 <memset>
    memset(g_queue, 0, sizeof g_queue);
 80037a4:	f44f 6230 	mov.w	r2, #2816	@ 0xb00
 80037a8:	2100      	movs	r1, #0
 80037aa:	4848      	ldr	r0, [pc, #288]	@ (80038cc <motion_service_init+0x148>)
 80037ac:	f00b ffcc 	bl	800f748 <memset>
    memset(g_encoder_position, 0, sizeof g_encoder_position);
 80037b0:	2218      	movs	r2, #24
 80037b2:	2100      	movs	r1, #0
 80037b4:	4846      	ldr	r0, [pc, #280]	@ (80038d0 <motion_service_init+0x14c>)
 80037b6:	f00b ffc7 	bl	800f748 <memset>
    memset(g_encoder_last_raw, 0, sizeof g_encoder_last_raw);
 80037ba:	220c      	movs	r2, #12
 80037bc:	2100      	movs	r1, #0
 80037be:	4845      	ldr	r0, [pc, #276]	@ (80038d4 <motion_service_init+0x150>)
 80037c0:	f00b ffc2 	bl	800f748 <memset>
    memset(g_encoder_origin, 0, sizeof g_encoder_origin);
 80037c4:	2218      	movs	r2, #24
 80037c6:	2100      	movs	r1, #0
 80037c8:	4843      	ldr	r0, [pc, #268]	@ (80038d8 <motion_service_init+0x154>)
 80037ca:	f00b ffbd 	bl	800f748 <memset>
    memset(g_encoder_delta_tick, 0, sizeof g_encoder_delta_tick);
 80037ce:	220c      	movs	r2, #12
 80037d0:	2100      	movs	r1, #0
 80037d2:	4842      	ldr	r0, [pc, #264]	@ (80038dc <motion_service_init+0x158>)
 80037d4:	f00b ffb8 	bl	800f748 <memset>
    memset(g_pi_i_accum, 0, sizeof g_pi_i_accum);
 80037d8:	220c      	movs	r2, #12
 80037da:	2100      	movs	r1, #0
 80037dc:	4840      	ldr	r0, [pc, #256]	@ (80038e0 <motion_service_init+0x15c>)
 80037de:	f00b ffb3 	bl	800f748 <memset>
    memset(g_pi_prev_err, 0, sizeof g_pi_prev_err);
 80037e2:	220c      	movs	r2, #12
 80037e4:	2100      	movs	r1, #0
 80037e6:	483f      	ldr	r0, [pc, #252]	@ (80038e4 <motion_service_init+0x160>)
 80037e8:	f00b ffae 	bl	800f748 <memset>
    memset(g_origin_base32, 0, sizeof g_origin_base32);
 80037ec:	220c      	movs	r2, #12
 80037ee:	2100      	movs	r1, #0
 80037f0:	483d      	ldr	r0, [pc, #244]	@ (80038e8 <motion_service_init+0x164>)
 80037f2:	f00b ffa9 	bl	800f748 <memset>
    memset(g_pi_d_filt, 0, sizeof g_pi_d_filt);
 80037f6:	220c      	movs	r2, #12
 80037f8:	2100      	movs	r1, #0
 80037fa:	483c      	ldr	r0, [pc, #240]	@ (80038ec <motion_service_init+0x168>)
 80037fc:	f00b ffa4 	bl	800f748 <memset>
    memset(g_v_accum, 0, sizeof g_v_accum);
 8003800:	220c      	movs	r2, #12
 8003802:	2100      	movs	r1, #0
 8003804:	483a      	ldr	r0, [pc, #232]	@ (80038f0 <motion_service_init+0x16c>)
 8003806:	f00b ff9f 	bl	800f748 <memset>

    g_status.state = MOTION_IDLE;
 800380a:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <motion_service_init+0x140>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
    g_queue_head = g_queue_tail = g_queue_count = 0u;
 8003810:	4b38      	ldr	r3, [pc, #224]	@ (80038f4 <motion_service_init+0x170>)
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	4b37      	ldr	r3, [pc, #220]	@ (80038f4 <motion_service_init+0x170>)
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	4b37      	ldr	r3, [pc, #220]	@ (80038f8 <motion_service_init+0x174>)
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	4b36      	ldr	r3, [pc, #216]	@ (80038f8 <motion_service_init+0x174>)
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	4b36      	ldr	r3, [pc, #216]	@ (80038fc <motion_service_init+0x178>)
 8003824:	701a      	strb	r2, [r3, #0]
    g_has_active_segment = 0u;
 8003826:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <motion_service_init+0x17c>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]

    motion_stop_all_axes_locked();
 800382c:	f7ff fba6 	bl	8002f7c <motion_stop_all_axes_locked>
    motion_refresh_status_locked();
 8003830:	f7ff fa0c 	bl	8002c4c <motion_refresh_status_locked>
    motion_unlock(primask);
 8003834:	68b8      	ldr	r0, [r7, #8]
 8003836:	f7ff f90e 	bl	8002a56 <motion_unlock>

    motion_hw_init();
 800383a:	f7fe ff55 	bl	80026e8 <motion_hw_init>

    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	e01a      	b.n	800387a <motion_service_init+0xf6>
        uint32_t raw = motion_hw_encoder_read_raw(axis);
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff f89e 	bl	8002988 <motion_hw_encoder_read_raw>
 800384c:	6078      	str	r0, [r7, #4]
        if (motion_hw_encoder_bits(axis) == 16u) {
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff f8c1 	bl	80029d8 <motion_hw_encoder_bits>
 8003856:	4603      	mov	r3, r0
 8003858:	2b10      	cmp	r3, #16
 800385a:	d106      	bne.n	800386a <motion_service_init+0xe6>
            g_encoder_last_raw[axis] = raw & 0xFFFFu;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	b292      	uxth	r2, r2
 8003862:	491c      	ldr	r1, [pc, #112]	@ (80038d4 <motion_service_init+0x150>)
 8003864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003868:	e004      	b.n	8003874 <motion_service_init+0xf0>
        } else {
            g_encoder_last_raw[axis] = raw;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	4919      	ldr	r1, [pc, #100]	@ (80038d4 <motion_service_init+0x150>)
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	3301      	adds	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d9e1      	bls.n	8003844 <motion_service_init+0xc0>
        }
    }

    if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) Error_Handler();
 8003880:	4820      	ldr	r0, [pc, #128]	@ (8003904 <motion_service_init+0x180>)
 8003882:	f007 fd67 	bl	800b354 <HAL_TIM_Base_Start_IT>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <motion_service_init+0x10c>
 800388c:	f002 fa66 	bl	8005d5c <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) Error_Handler();
 8003890:	481d      	ldr	r0, [pc, #116]	@ (8003908 <motion_service_init+0x184>)
 8003892:	f007 fd5f 	bl	800b354 <HAL_TIM_Base_Start_IT>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <motion_service_init+0x11c>
 800389c:	f002 fa5e 	bl	8005d5c <Error_Handler>

    LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "timers_ready");
 80038a0:	4a1a      	ldr	r2, [pc, #104]	@ (800390c <motion_service_init+0x188>)
 80038a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <motion_service_init+0x18c>)
 80038a4:	9302      	str	r3, [sp, #8]
 80038a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003914 <motion_service_init+0x190>)
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <motion_service_init+0x194>)
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	2200      	movs	r2, #0
 80038b2:	2100      	movs	r1, #0
 80038b4:	2002      	movs	r0, #2
 80038b6:	f7fe fea9 	bl	800260c <log_event_auto>
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200000d0 	.word	0x200000d0
 80038c8:	200000d8 	.word	0x200000d8
 80038cc:	2000016c 	.word	0x2000016c
 80038d0:	20000c70 	.word	0x20000c70
 80038d4:	20000c88 	.word	0x20000c88
 80038d8:	20000c98 	.word	0x20000c98
 80038dc:	20000cb0 	.word	0x20000cb0
 80038e0:	20000ce0 	.word	0x20000ce0
 80038e4:	20000cec 	.word	0x20000cec
 80038e8:	20000cbc 	.word	0x20000cbc
 80038ec:	20000cc8 	.word	0x20000cc8
 80038f0:	20000cd4 	.word	0x20000cd4
 80038f4:	20000c6e 	.word	0x20000c6e
 80038f8:	20000c6d 	.word	0x20000c6d
 80038fc:	20000c6c 	.word	0x20000c6c
 8003900:	20000168 	.word	0x20000168
 8003904:	20000fd0 	.word	0x20000fd0
 8003908:	2000101c 	.word	0x2000101c
 800390c:	0801066c 	.word	0x0801066c
 8003910:	080107a0 	.word	0x080107a0
 8003914:	080107b0 	.word	0x080107b0
 8003918:	080107b4 	.word	0x080107b4

0800391c <motion_on_tim6_tick>:
 *  - fecha largura de pulso
 *  - DEMO: DDA suave
 *  - Fila: caminho original
 * ======================= */
void motion_on_tim6_tick(void)
{
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391e:	b091      	sub	sp, #68	@ 0x44
 8003920:	af06      	add	r7, sp, #24
    if (g_status.state != MOTION_RUNNING || !g_has_active_segment)
 8003922:	4ba1      	ldr	r3, [pc, #644]	@ (8003ba8 <motion_on_tim6_tick+0x28c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	f040 8192 	bne.w	8003c52 <motion_on_tim6_tick+0x336>
 800392e:	4b9f      	ldr	r3, [pc, #636]	@ (8003bac <motion_on_tim6_tick+0x290>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 818c 	beq.w	8003c52 <motion_on_tim6_tick+0x336>
        return;

    /* 1) Fecha pulsos altos pendentes (garante largura do STEP) */
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800393a:	2300      	movs	r3, #0
 800393c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003940:	e02e      	b.n	80039a0 <motion_on_tim6_tick+0x84>
        motion_axis_state_t *ax = &g_axis_state[axis];
 8003942:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	4a98      	ldr	r2, [pc, #608]	@ (8003bb0 <motion_on_tim6_tick+0x294>)
 8003950:	4413      	add	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
        if (ax->step_high) {
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	7d1b      	ldrb	r3, [r3, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d012      	beq.n	8003982 <motion_on_tim6_tick+0x66>
            if (--ax->step_high == 0u) {
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	7d1b      	ldrb	r3, [r3, #20]
 8003960:	3b01      	subs	r3, #1
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	751a      	strb	r2, [r3, #20]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	7d1b      	ldrb	r3, [r3, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d112      	bne.n	8003996 <motion_on_tim6_tick+0x7a>
                motion_hw_step_low(axis);
 8003970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe ffe3 	bl	8002940 <motion_hw_step_low>
                ax->step_low = MOTION_STEP_LOW_TICKS; /* Para voltar ao comportamento anterior, defina MOTION_STEP_LOW_TICKS=0u */
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	755a      	strb	r2, [r3, #21]
 8003980:	e009      	b.n	8003996 <motion_on_tim6_tick+0x7a>
            }
        } else if (ax->step_low) {
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	7d5b      	ldrb	r3, [r3, #21]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <motion_on_tim6_tick+0x7a>
            --ax->step_low;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	7d5b      	ldrb	r3, [r3, #21]
 800398e:	3b01      	subs	r3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	755a      	strb	r2, [r3, #21]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800399a:	3301      	adds	r3, #1
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d9cc      	bls.n	8003942 <motion_on_tim6_tick+0x26>
        }
    }

    if (g_demo_continuous) {
 80039a8:	4b82      	ldr	r3, [pc, #520]	@ (8003bb4 <motion_on_tim6_tick+0x298>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d065      	beq.n	8003a7e <motion_on_tim6_tick+0x162>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80039b8:	e05c      	b.n	8003a74 <motion_on_tim6_tick+0x158>
            motion_axis_state_t *ax = &g_axis_state[axis];
 80039ba:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb0 <motion_on_tim6_tick+0x294>)
 80039c8:	4413      	add	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]

            if (ax->emitted_steps >= ax->total_steps) continue;
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d243      	bcs.n	8003a60 <motion_on_tim6_tick+0x144>

            /* guardas de ENABLE e DIR (atendem setup/hold do TMC5160) */
            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <motion_on_tim6_tick+0xd8>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80039f2:	e03a      	b.n	8003a6a <motion_on_tim6_tick+0x14e>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <motion_on_tim6_tick+0xf4>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003a0e:	e02c      	b.n	8003a6a <motion_on_tim6_tick+0x14e>

            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	7d1b      	ldrb	r3, [r3, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d125      	bne.n	8003a64 <motion_on_tim6_tick+0x148>
            if (ax->step_low)  continue; 
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	7d5b      	ldrb	r3, [r3, #21]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d123      	bne.n	8003a68 <motion_on_tim6_tick+0x14c>

            /* DDA: acumula fase e emite STEP ao cruzar 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	441a      	add	r2, r3
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a36:	d318      	bcc.n	8003a6a <motion_on_tim6_tick+0x14e>
                ax->dda_accum_q16 -= Q16_1;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	619a      	str	r2, [r3, #24]

                motion_hw_step_high(axis);
 8003a44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe ff55 	bl	80028f8 <motion_hw_step_high>
                ax->step_high = MOTION_STEP_HIGH_TICKS;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2201      	movs	r2, #1
 8003a52:	751a      	strb	r2, [r3, #20]
                ++ax->emitted_steps;
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	e004      	b.n	8003a6a <motion_on_tim6_tick+0x14e>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003a60:	bf00      	nop
 8003a62:	e002      	b.n	8003a6a <motion_on_tim6_tick+0x14e>
            if (ax->step_high) continue; /* ainda segurando pulso ALTO */
 8003a64:	bf00      	nop
 8003a66:	e000      	b.n	8003a6a <motion_on_tim6_tick+0x14e>
            if (ax->step_low)  continue; 
 8003a68:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003a74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d99e      	bls.n	80039ba <motion_on_tim6_tick+0x9e>
 8003a7c:	e06e      	b.n	8003b5c <motion_on_tim6_tick+0x240>
            }
        }
    }
    else {
        /* 3) Caminho original (fila): preservado */
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003a84:	e066      	b.n	8003b54 <motion_on_tim6_tick+0x238>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003a86:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	4a47      	ldr	r2, [pc, #284]	@ (8003bb0 <motion_on_tim6_tick+0x294>)
 8003a94:	4413      	add	r3, r2
 8003a96:	61fb      	str	r3, [r7, #28]

            if (ax->step_high) continue;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	7d1b      	ldrb	r3, [r3, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d14f      	bne.n	8003b40 <motion_on_tim6_tick+0x224>
            if (ax->step_low)  continue; 
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	7d5b      	ldrb	r3, [r3, #21]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d14d      	bne.n	8003b44 <motion_on_tim6_tick+0x228>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d249      	bcs.n	8003b48 <motion_on_tim6_tick+0x22c>

            if (ax->en_settle_ticks)  { ax->en_settle_ticks--;  continue; }
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <motion_on_tim6_tick+0x1b4>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003ace:	e03c      	b.n	8003b4a <motion_on_tim6_tick+0x22e>
            if (ax->dir_settle_ticks) { ax->dir_settle_ticks--; continue; }
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <motion_on_tim6_tick+0x1d0>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003aea:	e02e      	b.n	8003b4a <motion_on_tim6_tick+0x22e>

            /* DDA (fila): acumula fase e emite STEP no cruzamento de 1.0 */
            ax->dda_accum_q16 += ax->dda_inc_q16;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	441a      	add	r2, r3
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	619a      	str	r2, [r3, #24]
            if (ax->dda_accum_q16 >= Q16_1) {
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b02:	d322      	bcc.n	8003b4a <motion_on_tim6_tick+0x22e>
                ax->dda_accum_q16 -= Q16_1;
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	619a      	str	r2, [r3, #24]
                if (ax->emitted_steps < ax->total_steps) {
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d216      	bcs.n	8003b4a <motion_on_tim6_tick+0x22e>
                    motion_hw_step_high(axis);
 8003b1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fee9 	bl	80028f8 <motion_hw_step_high>
                    ax->step_high = MOTION_STEP_HIGH_TICKS;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	751a      	strb	r2, [r3, #20]
                    ++ax->emitted_steps;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	609a      	str	r2, [r3, #8]
                    ax->target_steps = ax->emitted_steps;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e004      	b.n	8003b4a <motion_on_tim6_tick+0x22e>
            if (ax->step_high) continue;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <motion_on_tim6_tick+0x22e>
            if (ax->step_low)  continue; 
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <motion_on_tim6_tick+0x22e>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003b48:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b4a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003b54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d994      	bls.n	8003a86 <motion_on_tim6_tick+0x16a>
#endif
                }
            }
        }
    }
    uint32_t primask = motion_lock();
 8003b5c:	f7fe ff6a 	bl	8002a34 <motion_lock>
 8003b60:	6178      	str	r0, [r7, #20]
    if (g_has_active_segment) {
 8003b62:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <motion_on_tim6_tick+0x290>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d06e      	beq.n	8003c4a <motion_on_tim6_tick+0x32e>
        uint8_t confirm = 1u;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003b72:	2300      	movs	r3, #0
 8003b74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b78:	e023      	b.n	8003bc2 <motion_on_tim6_tick+0x2a6>
            const motion_axis_state_t *ax = &g_axis_state[axis];
 8003b7a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb0 <motion_on_tim6_tick+0x294>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
            if (ax->emitted_steps < ax->total_steps || ax->step_high) {
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d303      	bcc.n	8003ba0 <motion_on_tim6_tick+0x284>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	7d1b      	ldrb	r3, [r3, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00b      	beq.n	8003bb8 <motion_on_tim6_tick+0x29c>
                confirm = 0u; break;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8003ba6:	e010      	b.n	8003bca <motion_on_tim6_tick+0x2ae>
 8003ba8:	200000d0 	.word	0x200000d0
 8003bac:	20000168 	.word	0x20000168
 8003bb0:	200000d8 	.word	0x200000d8
 8003bb4:	20000d10 	.word	0x20000d10
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d9d7      	bls.n	8003b7a <motion_on_tim6_tick+0x25e>
            }
        }
        if (confirm) {
 8003bca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d03b      	beq.n	8003c4a <motion_on_tim6_tick+0x32e>
            if (motion_try_start_next_locked()) {
 8003bd2:	f7ff fbad 	bl	8003330 <motion_try_start_next_locked>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <motion_on_tim6_tick+0x2ce>
                g_status.state = MOTION_RUNNING;
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c5c <motion_on_tim6_tick+0x340>)
 8003bde:	2202      	movs	r2, #2
 8003be0:	701a      	strb	r2, [r3, #0]
#if MOTION_DEBUG_FLOW
                printf("[FLOW next_segment started]\r\n");
 8003be2:	481f      	ldr	r0, [pc, #124]	@ (8003c60 <motion_on_tim6_tick+0x344>)
 8003be4:	f00b fbe0 	bl	800f3a8 <puts>
 8003be8:	e02d      	b.n	8003c46 <motion_on_tim6_tick+0x32a>
#endif
            } else {
                g_has_active_segment = 0u;
 8003bea:	4b1e      	ldr	r3, [pc, #120]	@ (8003c64 <motion_on_tim6_tick+0x348>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
                motion_stop_all_axes_locked();
 8003bf0:	f7ff f9c4 	bl	8002f7c <motion_stop_all_axes_locked>
                g_status.state = MOTION_DONE;
 8003bf4:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <motion_on_tim6_tick+0x340>)
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	701a      	strb	r2, [r3, #0]
                motion_send_move_end_response(g_active_frame_id, 0u /* natural_done */);
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <motion_on_tim6_tick+0x34c>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fd87 	bl	8003714 <motion_send_move_end_response>
#if MOTION_DEBUG_ENCODERS
                printf("[ENC DONE abs=(%ld,%ld,%ld) rel=(%ld,%ld,%ld) target=(%lu,%lu,%lu)]\r\n",
                       (long)g_enc_abs32[AXIS_X],
 8003c06:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <motion_on_tim6_tick+0x350>)
 8003c08:	681e      	ldr	r6, [r3, #0]
                       (long)g_enc_abs32[AXIS_Y],
 8003c0a:	4b18      	ldr	r3, [pc, #96]	@ (8003c6c <motion_on_tim6_tick+0x350>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	607b      	str	r3, [r7, #4]
                       (long)g_enc_abs32[AXIS_Z],
 8003c10:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <motion_on_tim6_tick+0x350>)
 8003c12:	6899      	ldr	r1, [r3, #8]
 8003c14:	6039      	str	r1, [r7, #0]
                       (long)g_enc_rel32[AXIS_X],
 8003c16:	4b16      	ldr	r3, [pc, #88]	@ (8003c70 <motion_on_tim6_tick+0x354>)
 8003c18:	681b      	ldr	r3, [r3, #0]
                       (long)g_enc_rel32[AXIS_Y],
 8003c1a:	4a15      	ldr	r2, [pc, #84]	@ (8003c70 <motion_on_tim6_tick+0x354>)
 8003c1c:	6852      	ldr	r2, [r2, #4]
                       (long)g_enc_rel32[AXIS_Z],
 8003c1e:	4914      	ldr	r1, [pc, #80]	@ (8003c70 <motion_on_tim6_tick+0x354>)
 8003c20:	6889      	ldr	r1, [r1, #8]
                       (unsigned long)g_axis_state[AXIS_X].total_steps,
 8003c22:	4814      	ldr	r0, [pc, #80]	@ (8003c74 <motion_on_tim6_tick+0x358>)
 8003c24:	6800      	ldr	r0, [r0, #0]
                       (unsigned long)g_axis_state[AXIS_Y].total_steps,
 8003c26:	4c13      	ldr	r4, [pc, #76]	@ (8003c74 <motion_on_tim6_tick+0x358>)
 8003c28:	6b24      	ldr	r4, [r4, #48]	@ 0x30
                       (unsigned long)g_axis_state[AXIS_Z].total_steps);
 8003c2a:	4d12      	ldr	r5, [pc, #72]	@ (8003c74 <motion_on_tim6_tick+0x358>)
 8003c2c:	6e2d      	ldr	r5, [r5, #96]	@ 0x60
                printf("[ENC DONE abs=(%ld,%ld,%ld) rel=(%ld,%ld,%ld) target=(%lu,%lu,%lu)]\r\n",
 8003c2e:	9505      	str	r5, [sp, #20]
 8003c30:	9404      	str	r4, [sp, #16]
 8003c32:	9003      	str	r0, [sp, #12]
 8003c34:	9102      	str	r1, [sp, #8]
 8003c36:	9201      	str	r2, [sp, #4]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4631      	mov	r1, r6
 8003c40:	480d      	ldr	r0, [pc, #52]	@ (8003c78 <motion_on_tim6_tick+0x35c>)
 8003c42:	f00b fb49 	bl	800f2d8 <iprintf>
#endif
            }
            motion_refresh_status_locked();
 8003c46:	f7ff f801 	bl	8002c4c <motion_refresh_status_locked>
        }
    }
    motion_unlock(primask);
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7fe ff03 	bl	8002a56 <motion_unlock>
 8003c50:	e000      	b.n	8003c54 <motion_on_tim6_tick+0x338>
        return;
 8003c52:	bf00      	nop
}
 8003c54:	372c      	adds	r7, #44	@ 0x2c
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200000d0 	.word	0x200000d0
 8003c60:	080107bc 	.word	0x080107bc
 8003c64:	20000168 	.word	0x20000168
 8003c68:	20000c6f 	.word	0x20000c6f
 8003c6c:	20000cf8 	.word	0x20000cf8
 8003c70:	20000d04 	.word	0x20000d04
 8003c74:	200000d8 	.word	0x200000d8
 8003c78:	080107dc 	.word	0x080107dc

08003c7c <motion_on_tim7_tick>:
 *  - Atualiza encoders
 *  - DEMO: rampa e dda_inc
 *  - Fila: sua original de target_steps
 * ======================= */
void motion_on_tim7_tick(void)
{
 8003c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c80:	b0b4      	sub	sp, #208	@ 0xd0
 8003c82:	af00      	add	r7, sp, #0
    motion_update_encoders();
 8003c84:	f7ff fb7c 	bl	8003380 <motion_update_encoders>

    // Atualiza sombras 32-bit para SWV/Data Trace (4 bytes por amostra)
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8003c8e:	e027      	b.n	8003ce0 <motion_on_tim7_tick+0x64>
        g_enc_abs32[axis] = (int32_t)g_encoder_position[axis];
 8003c90:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003c94:	4ac9      	ldr	r2, [pc, #804]	@ (8003fbc <motion_on_tim7_tick+0x340>)
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	f897 10cf 	ldrb.w	r1, [r7, #207]	@ 0xcf
 8003ca2:	4bc7      	ldr	r3, [pc, #796]	@ (8003fc0 <motion_on_tim7_tick+0x344>)
 8003ca4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        g_enc_rel32[axis] = (int32_t)(g_encoder_position[axis] - g_encoder_origin[axis]);
 8003ca8:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003cac:	4ac3      	ldr	r2, [pc, #780]	@ (8003fbc <motion_on_tim7_tick+0x340>)
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003cbc:	4ac1      	ldr	r2, [pc, #772]	@ (8003fc4 <motion_on_tim7_tick+0x348>)
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	1acb      	subs	r3, r1, r3
 8003cca:	f897 20cf 	ldrb.w	r2, [r7, #207]	@ 0xcf
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4bbd      	ldr	r3, [pc, #756]	@ (8003fc8 <motion_on_tim7_tick+0x34c>)
 8003cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003cd6:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
 8003ce0:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d9d3      	bls.n	8003c90 <motion_on_tim7_tick+0x14>
    }

    /* DEMO: aplica rampa e calcula incremento do DDA */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && g_demo_continuous) {
 8003ce8:	4bb8      	ldr	r3, [pc, #736]	@ (8003fcc <motion_on_tim7_tick+0x350>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	f040 80c5 	bne.w	8003e7e <motion_on_tim7_tick+0x202>
 8003cf4:	4bb6      	ldr	r3, [pc, #728]	@ (8003fd0 <motion_on_tim7_tick+0x354>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80bf 	beq.w	8003e7e <motion_on_tim7_tick+0x202>
 8003d00:	4bb4      	ldr	r3, [pc, #720]	@ (8003fd4 <motion_on_tim7_tick+0x358>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80b9 	beq.w	8003e7e <motion_on_tim7_tick+0x202>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8003d12:	e0af      	b.n	8003e74 <motion_on_tim7_tick+0x1f8>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003d14:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	4aad      	ldr	r2, [pc, #692]	@ (8003fd8 <motion_on_tim7_tick+0x35c>)
 8003d22:	4413      	add	r3, r2
 8003d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003d28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	f080 8097 	bcs.w	8003e68 <motion_on_tim7_tick+0x1ec>

            /* Aceleração integrada: acumula a/1000 e aplica passos discretos em v */
            g_v_accum[axis] += ax->accel_sps2; /* steps/s^2 * 1ms */
 8003d3a:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d3e:	4ba7      	ldr	r3, [pc, #668]	@ (8003fdc <motion_on_tim7_tick+0x360>)
 8003d40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	f897 10ce 	ldrb.w	r1, [r7, #206]	@ 0xce
 8003d4e:	441a      	add	r2, r3
 8003d50:	4ba2      	ldr	r3, [pc, #648]	@ (8003fdc <motion_on_tim7_tick+0x360>)
 8003d52:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            uint32_t steps_avail = 0u;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            while (g_v_accum[axis] >= 1000u) { g_v_accum[axis] -= 1000u; steps_avail++; }
 8003d5c:	e010      	b.n	8003d80 <motion_on_tim7_tick+0x104>
 8003d5e:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d62:	4b9e      	ldr	r3, [pc, #632]	@ (8003fdc <motion_on_tim7_tick+0x360>)
 8003d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d68:	f897 10ce 	ldrb.w	r1, [r7, #206]	@ 0xce
 8003d6c:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003d70:	4b9a      	ldr	r3, [pc, #616]	@ (8003fdc <motion_on_tim7_tick+0x360>)
 8003d72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003d76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d80:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 8003d84:	4b95      	ldr	r3, [pc, #596]	@ (8003fdc <motion_on_tim7_tick+0x360>)
 8003d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d8e:	d2e6      	bcs.n	8003d5e <motion_on_tim7_tick+0xe2>
            while (steps_avail--) {
 8003d90:	e03f      	b.n	8003e12 <motion_on_tim7_tick+0x196>
                if (ax->v_actual_sps < ax->v_target_sps) {
 8003d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d215      	bcs.n	8003dce <motion_on_tim7_tick+0x152>
                    ax->v_actual_sps++;
 8003da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dae:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps > ax->v_target_sps) ax->v_actual_sps = ax->v_target_sps;
 8003db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d928      	bls.n	8003e12 <motion_on_tim7_tick+0x196>
 8003dc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dc4:	6a1a      	ldr	r2, [r3, #32]
 8003dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dca:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dcc:	e021      	b.n	8003e12 <motion_on_tim7_tick+0x196>
                } else if (ax->v_actual_sps > ax->v_target_sps) {
 8003dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d919      	bls.n	8003e12 <motion_on_tim7_tick+0x196>
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 8003dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d006      	beq.n	8003df6 <motion_on_tim7_tick+0x17a>
 8003de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	1e5a      	subs	r2, r3, #1
 8003df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps < ax->v_target_sps) ax->v_actual_sps = ax->v_target_sps;
 8003df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d205      	bcs.n	8003e12 <motion_on_tim7_tick+0x196>
 8003e06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24
            while (steps_avail--) {
 8003e12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e16:	1e53      	subs	r3, r2, #1
 8003e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	d1b8      	bne.n	8003d92 <motion_on_tim7_tick+0x116>
                }
            }
            if (ax->v_actual_sps > MOTION_MAX_SPS) ax->v_actual_sps = MOTION_MAX_SPS;
 8003e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e26:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d904      	bls.n	8003e38 <motion_on_tim7_tick+0x1bc>
 8003e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e32:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8003e36:	6253      	str	r3, [r2, #36]	@ 0x24
            ax->dda_inc_q16 = Q16_DIV_UINT(ax->v_actual_sps, MOTION_TIM6_HZ);
 8003e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	2200      	movs	r2, #0
 8003e40:	461c      	mov	r4, r3
 8003e42:	4615      	mov	r5, r2
 8003e44:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8003e48:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8003e4c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	4640      	mov	r0, r8
 8003e56:	4649      	mov	r1, r9
 8003e58:	f7fc fa5a 	bl	8000310 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e64:	61da      	str	r2, [r3, #28]
 8003e66:	e000      	b.n	8003e6a <motion_on_tim7_tick+0x1ee>
            if (ax->emitted_steps >= ax->total_steps) continue;
 8003e68:	bf00      	nop
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003e6a:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
 8003e74:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	f67f af4b 	bls.w	8003d14 <motion_on_tim7_tick+0x98>
        }
    }
    /* Caminho da fila: rampa trapezoidal (acelera/cruza/desacelera) e define incremento DDA */
    if (g_status.state == MOTION_RUNNING && g_has_active_segment && !g_demo_continuous) {
 8003e7e:	4b53      	ldr	r3, [pc, #332]	@ (8003fcc <motion_on_tim7_tick+0x350>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	f040 82a7 	bne.w	80043d8 <motion_on_tim7_tick+0x75c>
 8003e8a:	4b51      	ldr	r3, [pc, #324]	@ (8003fd0 <motion_on_tim7_tick+0x354>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 82a1 	beq.w	80043d8 <motion_on_tim7_tick+0x75c>
 8003e96:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd4 <motion_on_tim7_tick+0x358>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 829b 	bne.w	80043d8 <motion_on_tim7_tick+0x75c>
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8003ea8:	e291      	b.n	80043ce <motion_on_tim7_tick+0x752>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8003eaa:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	4a48      	ldr	r2, [pc, #288]	@ (8003fd8 <motion_on_tim7_tick+0x35c>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            /* Mesmo que o segmento ativo para este eixo tenha zerado, podemos ter
               passos remanescentes na fila — mantemos a rampa global da lista. */

            uint32_t v_cmd_sps = ((uint32_t)ax->velocity_per_tick) * 1000u; /* alvo/cruzeiro */
 8003ebe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ec2:	899b      	ldrh	r3, [r3, #12]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            /* PI de posição: ajusta v_cmd_sps com base no erro posicional */
#if MOTION_PI_ENABLE
            if ((ax->kp | ax->ki | ax->kd) != 0u) {
 8003ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ed6:	89da      	ldrh	r2, [r3, #14]
 8003ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003edc:	8a1b      	ldrh	r3, [r3, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ee6:	8a5b      	ldrh	r3, [r3, #18]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 814e 	beq.w	800418e <motion_on_tim7_tick+0x512>
                /* desired (em passos DDA) vs actual convertido de contagens do encoder para passos DDA */
                int32_t desired = (int32_t)ax->target_steps;
 8003ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                int64_t enc_rel = g_encoder_position[axis] - g_encoder_origin[axis];
 8003efc:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003f00:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <motion_on_tim7_tick+0x340>)
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f0a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8003f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc4 <motion_on_tim7_tick+0x348>)
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	1a84      	subs	r4, r0, r2
 8003f1a:	60bc      	str	r4, [r7, #8]
 8003f1c:	eb61 0303 	sbc.w	r3, r1, r3
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003f26:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
                /* actual_steps ≈ enc_rel * (DDA_STEPS_PER_REV / ENC_COUNTS_PER_REV) */
                int64_t num = enc_rel * (int64_t)dda_steps_per_rev();
 8003f2a:	f7fe fd71 	bl	8002a10 <dda_steps_per_rev>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2200      	movs	r2, #0
 8003f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f3a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003f3e:	4622      	mov	r2, r4
 8003f40:	fb02 f203 	mul.w	r2, r2, r3
 8003f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f48:	4629      	mov	r1, r5
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	441a      	add	r2, r3
 8003f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f54:	4621      	mov	r1, r4
 8003f56:	fba3 ab01 	umull	sl, fp, r3, r1
 8003f5a:	eb02 030b 	add.w	r3, r2, fp
 8003f5e:	469b      	mov	fp, r3
 8003f60:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8003f64:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
                int32_t actual = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                if (ENC_COUNTS_PER_REV[axis] > 0u) {
 8003f6e:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <motion_on_tim7_tick+0x364>)
 8003f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d044      	beq.n	8004006 <motion_on_tim7_tick+0x38a>
                    int64_t q = num / (int64_t)ENC_COUNTS_PER_REV[axis];
 8003f7c:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8003f80:	4b17      	ldr	r3, [pc, #92]	@ (8003fe0 <motion_on_tim7_tick+0x364>)
 8003f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f86:	2200      	movs	r2, #0
 8003f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003f90:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003f94:	f7fc f96c 	bl	8000270 <__aeabi_ldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
                    if (q > INT32_MAX) q = INT32_MAX; else if (q < INT32_MIN) q = INT32_MIN;
 8003fa0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003fa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003fa8:	f173 0300 	sbcs.w	r3, r3, #0
 8003fac:	db1a      	blt.n	8003fe4 <motion_on_tim7_tick+0x368>
 8003fae:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
 8003fba:	e020      	b.n	8003ffe <motion_on_tim7_tick+0x382>
 8003fbc:	20000c70 	.word	0x20000c70
 8003fc0:	20000cf8 	.word	0x20000cf8
 8003fc4:	20000c98 	.word	0x20000c98
 8003fc8:	20000d04 	.word	0x20000d04
 8003fcc:	200000d0 	.word	0x200000d0
 8003fd0:	20000168 	.word	0x20000168
 8003fd4:	20000d10 	.word	0x20000d10
 8003fd8:	200000d8 	.word	0x200000d8
 8003fdc:	20000cd4 	.word	0x20000cd4
 8003fe0:	08010d44 	.word	0x08010d44
 8003fe4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003fe8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003fec:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8003ff0:	da05      	bge.n	8003ffe <motion_on_tim7_tick+0x382>
 8003ff2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
                    actual = (int32_t)q;
 8003ffe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004002:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                }
                int32_t err = desired - actual;
 8004006:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800400a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                /* Deadband simples */
                if (err > -((int32_t)MOTION_PI_DEADBAND_STEPS) && err < (int32_t)MOTION_PI_DEADBAND_STEPS) {
 8004014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004018:	f113 0f09 	cmn.w	r3, #9
 800401c:	db06      	blt.n	800402c <motion_on_tim7_tick+0x3b0>
 800401e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004022:	2b09      	cmp	r3, #9
 8004024:	dc02      	bgt.n	800402c <motion_on_tim7_tick+0x3b0>
                    err = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                }
                /* Integral com anti-windup (em unidades de passos) */
                int32_t iacc = g_pi_i_accum[axis] + err;
 800402c:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004030:	4bae      	ldr	r3, [pc, #696]	@ (80042ec <motion_on_tim7_tick+0x670>)
 8004032:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800403a:	4413      	add	r3, r2
 800403c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                if (iacc > MOTION_PI_I_CLAMP) iacc = MOTION_PI_I_CLAMP;
 8004040:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004044:	4baa      	ldr	r3, [pc, #680]	@ (80042f0 <motion_on_tim7_tick+0x674>)
 8004046:	429a      	cmp	r2, r3
 8004048:	dd03      	ble.n	8004052 <motion_on_tim7_tick+0x3d6>
 800404a:	4ba9      	ldr	r3, [pc, #676]	@ (80042f0 <motion_on_tim7_tick+0x674>)
 800404c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004050:	e007      	b.n	8004062 <motion_on_tim7_tick+0x3e6>
                else if (iacc < -MOTION_PI_I_CLAMP) iacc = -MOTION_PI_I_CLAMP;
 8004052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004056:	4ba7      	ldr	r3, [pc, #668]	@ (80042f4 <motion_on_tim7_tick+0x678>)
 8004058:	429a      	cmp	r2, r3
 800405a:	da02      	bge.n	8004062 <motion_on_tim7_tick+0x3e6>
 800405c:	4ba5      	ldr	r3, [pc, #660]	@ (80042f4 <motion_on_tim7_tick+0x678>)
 800405e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                int32_t draw = err - g_pi_prev_err[axis];
 8004062:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004066:	4ba4      	ldr	r3, [pc, #656]	@ (80042f8 <motion_on_tim7_tick+0x67c>)
 8004068:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800406c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	677b      	str	r3, [r7, #116]	@ 0x74
                g_pi_prev_err[axis] = err;
 8004074:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004078:	4a9f      	ldr	r2, [pc, #636]	@ (80042f8 <motion_on_tim7_tick+0x67c>)
 800407a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800407e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                /* Derivada filtrada: g_pi_d_filt += (draw - g_pi_d_filt) >> alpha */
                const int32_t alpha = 8; /* filtro leve (1..16) */
 8004082:	2308      	movs	r3, #8
 8004084:	673b      	str	r3, [r7, #112]	@ 0x70
                g_pi_d_filt[axis] = g_pi_d_filt[axis] + ((draw - g_pi_d_filt[axis]) >> alpha);
 8004086:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 800408a:	4b9c      	ldr	r3, [pc, #624]	@ (80042fc <motion_on_tim7_tick+0x680>)
 800408c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004090:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004094:	4b99      	ldr	r3, [pc, #612]	@ (80042fc <motion_on_tim7_tick+0x680>)
 8004096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800409a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800409c:	1a9a      	subs	r2, r3, r2
 800409e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040a0:	fa42 f303 	asr.w	r3, r2, r3
 80040a4:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 80040a8:	18c2      	adds	r2, r0, r3
 80040aa:	4b94      	ldr	r3, [pc, #592]	@ (80042fc <motion_on_tim7_tick+0x680>)
 80040ac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                int32_t pterm = ((int32_t)ax->kp * err) >> MOTION_PI_SHIFT;      /* steps/s */
 80040b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040b4:	89db      	ldrh	r3, [r3, #14]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040bc:	fb02 f303 	mul.w	r3, r2, r3
 80040c0:	121b      	asrs	r3, r3, #8
 80040c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                int32_t iterm = ((int32_t)ax->ki * iacc) >> MOTION_PI_SHIFT;     /* steps/s */
 80040c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040c8:	8a1b      	ldrh	r3, [r3, #16]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	121b      	asrs	r3, r3, #8
 80040d6:	66bb      	str	r3, [r7, #104]	@ 0x68
                int32_t dterm = (ax->kd != 0u) ? (((int32_t)ax->kd * g_pi_d_filt[axis]) >> MOTION_PI_SHIFT) : 0; /* steps/s */
 80040d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040dc:	8a5b      	ldrh	r3, [r3, #18]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <motion_on_tim7_tick+0x480>
 80040e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040e6:	8a5b      	ldrh	r3, [r3, #18]
 80040e8:	4619      	mov	r1, r3
 80040ea:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 80040ee:	4b83      	ldr	r3, [pc, #524]	@ (80042fc <motion_on_tim7_tick+0x680>)
 80040f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	121b      	asrs	r3, r3, #8
 80040fa:	e000      	b.n	80040fe <motion_on_tim7_tick+0x482>
 80040fc:	2300      	movs	r3, #0
 80040fe:	667b      	str	r3, [r7, #100]	@ 0x64
                int32_t corr = pterm + iterm + dterm; /* correção em steps/s */
 8004100:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004104:	441a      	add	r2, r3
 8004106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004108:	4413      	add	r3, r2
 800410a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                if (corr > (int32_t)MOTION_PI_CORR_MAX_SPS) corr = (int32_t)MOTION_PI_CORR_MAX_SPS;
 800410e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004112:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004116:	429a      	cmp	r2, r3
 8004118:	dd04      	ble.n	8004124 <motion_on_tim7_tick+0x4a8>
 800411a:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800411e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004122:	e007      	b.n	8004134 <motion_on_tim7_tick+0x4b8>
                else if (corr < -(int32_t)MOTION_PI_CORR_MAX_SPS) corr = -(int32_t)MOTION_PI_CORR_MAX_SPS;
 8004124:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004128:	4b75      	ldr	r3, [pc, #468]	@ (8004300 <motion_on_tim7_tick+0x684>)
 800412a:	429a      	cmp	r2, r3
 800412c:	da02      	bge.n	8004134 <motion_on_tim7_tick+0x4b8>
 800412e:	4b74      	ldr	r3, [pc, #464]	@ (8004300 <motion_on_tim7_tick+0x684>)
 8004130:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                int32_t v_adj = (int32_t)v_cmd_sps + corr;
 8004134:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800413c:	4413      	add	r3, r2
 800413e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                if (v_adj < 0) v_adj = 0;
 8004142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004146:	2b00      	cmp	r3, #0
 8004148:	da02      	bge.n	8004150 <motion_on_tim7_tick+0x4d4>
 800414a:	2300      	movs	r3, #0
 800414c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                if (v_adj > (int32_t)MOTION_MAX_SPS) v_adj = (int32_t)MOTION_MAX_SPS; /* limite físico */
 8004150:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004154:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004158:	429a      	cmp	r2, r3
 800415a:	dd03      	ble.n	8004164 <motion_on_tim7_tick+0x4e8>
 800415c:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004160:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                v_cmd_sps = (uint32_t)v_adj;
 8004164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
                /* Anti-windup por saturação: só aceita a integral quando não saturou */
                if (!(v_adj == 0 || v_adj == (int32_t)MOTION_MAX_SPS)) {
 800416c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00c      	beq.n	800418e <motion_on_tim7_tick+0x512>
 8004174:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004178:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800417c:	429a      	cmp	r2, r3
 800417e:	d006      	beq.n	800418e <motion_on_tim7_tick+0x512>
                    g_pi_i_accum[axis] = iacc;
 8004180:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 8004184:	4a59      	ldr	r2, [pc, #356]	@ (80042ec <motion_on_tim7_tick+0x670>)
 8004186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800418a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                }
            }
#endif
            uint32_t a_sps2    = (ax->accel_sps2 > 0u) ? ax->accel_sps2 : DEMO_ACCEL_SPS2;
 800418e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <motion_on_tim7_tick+0x524>
 8004198:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	e000      	b.n	80041a2 <motion_on_tim7_tick+0x526>
 80041a0:	4b53      	ldr	r3, [pc, #332]	@ (80042f0 <motion_on_tim7_tick+0x674>)
 80041a2:	663b      	str	r3, [r7, #96]	@ 0x60

            /* Distância restante total (ativo + fila) em passos */
            uint32_t rem_steps = motion_remaining_steps_total_for_axis(axis);
 80041a4:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fcff 	bl	8002bac <motion_remaining_steps_total_for_axis>
 80041ae:	65f8      	str	r0, [r7, #92]	@ 0x5c

            /* Distância necessária para frear de v para 0: s = v^2 / (2a) */
            uint32_t v_now = ax->v_actual_sps;
 80041b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	65bb      	str	r3, [r7, #88]	@ 0x58
            uint32_t s_brake = 0u;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            if (a_sps2 > 0u && v_now > 0u) {
 80041be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d03b      	beq.n	800423c <motion_on_tim7_tick+0x5c0>
 80041c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d038      	beq.n	800423c <motion_on_tim7_tick+0x5c0>
                uint64_t vv = (uint64_t)v_now * (uint64_t)v_now;
 80041ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041cc:	2200      	movs	r2, #0
 80041ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041d4:	2200      	movs	r2, #0
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80041da:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80041de:	462b      	mov	r3, r5
 80041e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041e4:	4642      	mov	r2, r8
 80041e6:	fb02 f203 	mul.w	r2, r2, r3
 80041ea:	464b      	mov	r3, r9
 80041ec:	4621      	mov	r1, r4
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	4622      	mov	r2, r4
 80041f6:	4641      	mov	r1, r8
 80041f8:	fba2 1201 	umull	r1, r2, r2, r1
 80041fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80041fe:	460a      	mov	r2, r1
 8004200:	643a      	str	r2, [r7, #64]	@ 0x40
 8004202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004204:	4413      	add	r3, r2
 8004206:	647b      	str	r3, [r7, #68]	@ 0x44
 8004208:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800420c:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 8004210:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
                uint64_t denom = (uint64_t)(2u * a_sps2);
 8004214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	2200      	movs	r2, #0
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004222:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
                s_brake = (uint32_t)(vv / denom);
 8004226:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800422a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800422e:	f7fc f86f 	bl	8000310 <__aeabi_uldivmod>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4613      	mov	r3, r2
 8004238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

            /* Política de rampa:
             * - Se já estamos perto do final (rem_steps <= s_brake): desacelera.
             * - Caso contrário, acelera até v_cmd_sps; se passou, reduz até v_cmd_sps. */
            /* Aceleração integrada: usa g_v_accum para passos discretos de v */
            g_v_accum[axis] += a_sps2; /* steps/s^2 * 1ms */
 800423c:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004240:	4b30      	ldr	r3, [pc, #192]	@ (8004304 <motion_on_tim7_tick+0x688>)
 8004242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004246:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 800424a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800424c:	441a      	add	r2, r3
 800424e:	4b2d      	ldr	r3, [pc, #180]	@ (8004304 <motion_on_tim7_tick+0x688>)
 8004250:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            uint32_t steps_avail = 0u;
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            while (g_v_accum[axis] >= 1000u) { g_v_accum[axis] -= 1000u; steps_avail++; }
 800425a:	e010      	b.n	800427e <motion_on_tim7_tick+0x602>
 800425c:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004260:	4b28      	ldr	r3, [pc, #160]	@ (8004304 <motion_on_tim7_tick+0x688>)
 8004262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004266:	f897 10c7 	ldrb.w	r1, [r7, #199]	@ 0xc7
 800426a:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800426e:	4b25      	ldr	r3, [pc, #148]	@ (8004304 <motion_on_tim7_tick+0x688>)
 8004270:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004278:	3301      	adds	r3, #1
 800427a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800427e:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8004282:	4b20      	ldr	r3, [pc, #128]	@ (8004304 <motion_on_tim7_tick+0x688>)
 8004284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800428c:	d2e6      	bcs.n	800425c <motion_on_tim7_tick+0x5e0>
            while (steps_avail--) {
 800428e:	e05a      	b.n	8004346 <motion_on_tim7_tick+0x6ca>
                if (rem_steps <= s_brake) {
 8004290:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004292:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004296:	429a      	cmp	r2, r3
 8004298:	d80c      	bhi.n	80042b4 <motion_on_tim7_tick+0x638>
                    /* Desacelera */
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 800429a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d050      	beq.n	8004346 <motion_on_tim7_tick+0x6ca>
 80042a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80042b2:	e048      	b.n	8004346 <motion_on_tim7_tick+0x6ca>
                } else if (ax->v_actual_sps < v_cmd_sps) {
 80042b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042be:	4293      	cmp	r3, r2
 80042c0:	d922      	bls.n	8004308 <motion_on_tim7_tick+0x68c>
                    ax->v_actual_sps++;
 80042c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ce:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps > v_cmd_sps) ax->v_actual_sps = v_cmd_sps;
 80042d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042da:	4293      	cmp	r3, r2
 80042dc:	d233      	bcs.n	8004346 <motion_on_tim7_tick+0x6ca>
 80042de:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80042e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042e6:	6253      	str	r3, [r2, #36]	@ 0x24
 80042e8:	e02d      	b.n	8004346 <motion_on_tim7_tick+0x6ca>
 80042ea:	bf00      	nop
 80042ec:	20000ce0 	.word	0x20000ce0
 80042f0:	00030d40 	.word	0x00030d40
 80042f4:	fffcf2c0 	.word	0xfffcf2c0
 80042f8:	20000cec 	.word	0x20000cec
 80042fc:	20000cc8 	.word	0x20000cc8
 8004300:	ffff9e58 	.word	0xffff9e58
 8004304:	20000cd4 	.word	0x20000cd4
                } else if (ax->v_actual_sps > v_cmd_sps) {
 8004308:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800430c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800430e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004312:	4293      	cmp	r3, r2
 8004314:	d217      	bcs.n	8004346 <motion_on_tim7_tick+0x6ca>
                    if (ax->v_actual_sps > 0u) ax->v_actual_sps--;
 8004316:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <motion_on_tim7_tick+0x6b2>
 8004320:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	1e5a      	subs	r2, r3, #1
 8004328:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800432c:	625a      	str	r2, [r3, #36]	@ 0x24
                    if (ax->v_actual_sps < v_cmd_sps) ax->v_actual_sps = v_cmd_sps;
 800432e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004338:	4293      	cmp	r3, r2
 800433a:	d904      	bls.n	8004346 <motion_on_tim7_tick+0x6ca>
 800433c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004344:	6253      	str	r3, [r2, #36]	@ 0x24
            while (steps_avail--) {
 8004346:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800434a:	1e53      	subs	r3, r2, #1
 800434c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004350:	2a00      	cmp	r2, #0
 8004352:	d19d      	bne.n	8004290 <motion_on_tim7_tick+0x614>
                }
            }

            /* Se não há mais nada a emitir neste eixo, força zero */
            if (rem_steps == 0u) ax->v_actual_sps = 0u;
 8004354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <motion_on_tim7_tick+0x6e6>
 800435a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800435e:	2300      	movs	r3, #0
 8004360:	6253      	str	r3, [r2, #36]	@ 0x24
            if (v_cmd_sps > MOTION_MAX_SPS) v_cmd_sps = MOTION_MAX_SPS;
 8004362:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004366:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800436a:	429a      	cmp	r2, r3
 800436c:	d903      	bls.n	8004376 <motion_on_tim7_tick+0x6fa>
 800436e:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004372:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            if (ax->v_actual_sps > MOTION_MAX_SPS) ax->v_actual_sps = MOTION_MAX_SPS;
 8004376:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800437a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800437c:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004380:	429a      	cmp	r2, r3
 8004382:	d904      	bls.n	800438e <motion_on_tim7_tick+0x712>
 8004384:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004388:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800438c:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Incremento do DDA a 50 kHz */
            ax->dda_inc_q16 = Q16_DIV_UINT(ax->v_actual_sps, MOTION_TIM6_HZ);
 800438e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	2200      	movs	r2, #0
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	61fa      	str	r2, [r7, #28]
 800439a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800439e:	460b      	mov	r3, r1
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	460b      	mov	r3, r1
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043b6:	f7fb ffab 	bl	8000310 <__aeabi_uldivmod>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043c2:	61da      	str	r2, [r3, #28]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80043c4:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80043c8:	3301      	adds	r3, #1
 80043ca:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 80043ce:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	f67f ad69 	bls.w	8003eaa <motion_on_tim7_tick+0x22e>
        }
    }

}
 80043d8:	bf00      	nop
 80043da:	37d0      	adds	r7, #208	@ 0xd0
 80043dc:	46bd      	mov	sp, r7
 80043de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e2:	bf00      	nop

080043e4 <motion_on_move_queue_add>:

/* =======================
 *  Handlers de protocolo
 * ======================= */
void motion_on_move_queue_add(const uint8_t *frame, uint32_t len) {
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b097      	sub	sp, #92	@ 0x5c
 80043e8:	af06      	add	r7, sp, #24
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]

    move_queue_add_req_t req;
    uint8_t ack_status = MOTION_ACK_INVALID;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t frame_id = 0u;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    if (!frame) return;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80a3 	beq.w	8004548 <motion_on_move_queue_add+0x164>
    proto_result_t decode_status = move_queue_add_req_decoder(frame, len, &req);
 8004402:	f107 0308 	add.w	r3, r7, #8
 8004406:	461a      	mov	r2, r3
 8004408:	6839      	ldr	r1, [r7, #0]
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fb25 	bl	8000a5a <move_queue_add_req_decoder>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    if (decode_status != PROTO_OK) {
 8004416:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 800441a:	2b00      	cmp	r3, #0
 800441c:	d014      	beq.n	8004448 <motion_on_move_queue_add+0x64>
        motion_send_queue_add_ack(frame_id, ack_status);
 800441e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004422:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff f895 	bl	8003558 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, decode_status, "queue_add", "decode_fail");
 800442e:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8004432:	4947      	ldr	r1, [pc, #284]	@ (8004550 <motion_on_move_queue_add+0x16c>)
 8004434:	4b47      	ldr	r3, [pc, #284]	@ (8004554 <motion_on_move_queue_add+0x170>)
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	4b47      	ldr	r3, [pc, #284]	@ (8004558 <motion_on_move_queue_add+0x174>)
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	460b      	mov	r3, r1
 800443e:	2164      	movs	r1, #100	@ 0x64
 8004440:	2002      	movs	r0, #2
 8004442:	f7fe f8e3 	bl	800260c <log_event_auto>
        return;
 8004446:	e080      	b.n	800454a <motion_on_move_queue_add+0x166>
    }
    frame_id = req.frameId;
 8004448:	7a3b      	ldrb	r3, [r7, #8]
 800444a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    if (!safety_is_safe()) {
 800444e:	f000 fe41 	bl	80050d4 <safety_is_safe>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d114      	bne.n	8004482 <motion_on_move_queue_add+0x9e>
        motion_send_queue_add_ack(frame_id, ack_status);
 8004458:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800445c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff f878 	bl	8003558 <motion_send_queue_add_ack>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "queue_add", "blocked_safety");
 8004468:	4a39      	ldr	r2, [pc, #228]	@ (8004550 <motion_on_move_queue_add+0x16c>)
 800446a:	4b3c      	ldr	r3, [pc, #240]	@ (800455c <motion_on_move_queue_add+0x178>)
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	4b3a      	ldr	r3, [pc, #232]	@ (8004558 <motion_on_move_queue_add+0x174>)
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	f06f 0203 	mvn.w	r2, #3
 8004478:	2164      	movs	r1, #100	@ 0x64
 800447a:	2002      	movs	r0, #2
 800447c:	f7fe f8c6 	bl	800260c <log_event_auto>
        return;
 8004480:	e063      	b.n	800454a <motion_on_move_queue_add+0x166>
    }

    uint32_t primask = motion_lock();
 8004482:	f7fe fad7 	bl	8002a34 <motion_lock>
 8004486:	63b8      	str	r0, [r7, #56]	@ 0x38
    proto_result_t push_status = motion_queue_push_locked(&req);
 8004488:	f107 0308 	add.w	r3, r7, #8
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fde1 	bl	8003054 <motion_queue_push_locked>
 8004492:	4603      	mov	r3, r0
 8004494:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (push_status == PROTO_OK) {
 8004498:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800449c:	2b00      	cmp	r3, #0
 800449e:	d12e      	bne.n	80044fe <motion_on_move_queue_add+0x11a>
        ack_status = MOTION_ACK_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (g_status.state == MOTION_IDLE || g_status.state == MOTION_DONE)
 80044a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004560 <motion_on_move_queue_add+0x17c>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d004      	beq.n	80044ba <motion_on_move_queue_add+0xd6>
 80044b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <motion_on_move_queue_add+0x17c>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d102      	bne.n	80044c0 <motion_on_move_queue_add+0xdc>
            g_status.state = MOTION_QUEUED;
 80044ba:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <motion_on_move_queue_add+0x17c>)
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 80044c0:	f7fe fbc4 	bl	8002c4c <motion_refresh_status_locked>
#if MOTION_DEBUG_FLOW
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044c4:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
               (unsigned)frame_id,
               (unsigned)req.dirMask,
 80044c8:	7a7b      	ldrb	r3, [r7, #9]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044ca:	469c      	mov	ip, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 80044cc:	897b      	ldrh	r3, [r7, #10]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044ce:	469e      	mov	lr, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 80044d0:	8a3b      	ldrh	r3, [r7, #16]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044d2:	461d      	mov	r5, r3
               (unsigned)req.vx, (unsigned)req.vy, (unsigned)req.vz,
 80044d4:	8b3b      	ldrh	r3, [r7, #24]
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044d6:	461e      	mov	r6, r3
               (unsigned long)req.sx, (unsigned long)req.sy, (unsigned long)req.sz,
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	69f9      	ldr	r1, [r7, #28]
               (unsigned)g_status.queue_depth);
 80044de:	4c20      	ldr	r4, [pc, #128]	@ (8004560 <motion_on_move_queue_add+0x17c>)
 80044e0:	7864      	ldrb	r4, [r4, #1]
 80044e2:	b2e4      	uxtb	r4, r4
        printf("[FLOW queue_add ok id=%u dir=0x%02X V=(%u,%u,%u) S=(%lu,%lu,%lu) depth=%u]\r\n",
 80044e4:	9405      	str	r4, [sp, #20]
 80044e6:	9104      	str	r1, [sp, #16]
 80044e8:	9203      	str	r2, [sp, #12]
 80044ea:	9302      	str	r3, [sp, #8]
 80044ec:	9601      	str	r6, [sp, #4]
 80044ee:	9500      	str	r5, [sp, #0]
 80044f0:	4673      	mov	r3, lr
 80044f2:	4662      	mov	r2, ip
 80044f4:	4601      	mov	r1, r0
 80044f6:	481b      	ldr	r0, [pc, #108]	@ (8004564 <motion_on_move_queue_add+0x180>)
 80044f8:	f00a feee 	bl	800f2d8 <iprintf>
 80044fc:	e002      	b.n	8004504 <motion_on_move_queue_add+0x120>
#endif
    } else {
        ack_status = MOTION_ACK_QUEUE_FULL;
 80044fe:	2302      	movs	r3, #2
 8004500:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    motion_unlock(primask);
 8004504:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004506:	f7fe faa6 	bl	8002a56 <motion_unlock>

    motion_send_queue_add_ack(frame_id, ack_status);
 800450a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800450e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff f81f 	bl	8003558 <motion_send_queue_add_ack>
    LOGA_THIS(LOG_STATE_RECEIVED, ack_status, "queue_add",
 800451a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800451e:	480c      	ldr	r0, [pc, #48]	@ (8004550 <motion_on_move_queue_add+0x16c>)
 8004520:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004524:	7a79      	ldrb	r1, [r7, #9]
 8004526:	460c      	mov	r4, r1
 8004528:	490d      	ldr	r1, [pc, #52]	@ (8004560 <motion_on_move_queue_add+0x17c>)
 800452a:	7849      	ldrb	r1, [r1, #1]
 800452c:	b2c9      	uxtb	r1, r1
 800452e:	9104      	str	r1, [sp, #16]
 8004530:	9403      	str	r4, [sp, #12]
 8004532:	9302      	str	r3, [sp, #8]
 8004534:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <motion_on_move_queue_add+0x184>)
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <motion_on_move_queue_add+0x174>)
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	4603      	mov	r3, r0
 800453e:	2101      	movs	r1, #1
 8004540:	2002      	movs	r0, #2
 8004542:	f7fe f863 	bl	800260c <log_event_auto>
 8004546:	e000      	b.n	800454a <motion_on_move_queue_add+0x166>
    if (!frame) return;
 8004548:	bf00      	nop
              "frame=%u dirMask=0x%02X queue=%u",
              (unsigned)frame_id, (unsigned)req.dirMask, (unsigned)g_status.queue_depth);
}
 800454a:	3744      	adds	r7, #68	@ 0x44
 800454c:	46bd      	mov	sp, r7
 800454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004550:	0801066c 	.word	0x0801066c
 8004554:	08010824 	.word	0x08010824
 8004558:	08010830 	.word	0x08010830
 800455c:	0801083c 	.word	0x0801083c
 8004560:	200000d0 	.word	0x200000d0
 8004564:	0801084c 	.word	0x0801084c
 8004568:	0801089c 	.word	0x0801089c

0800456c <motion_on_move_queue_status>:

void motion_on_move_queue_status(const uint8_t *frame, uint32_t len) {
 800456c:	b5b0      	push	{r4, r5, r7, lr}
 800456e:	b08c      	sub	sp, #48	@ 0x30
 8004570:	af08      	add	r7, sp, #32
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    move_queue_status_req_t req;
    if (move_queue_status_req_decoder(frame, len, &req) != PROTO_OK) {
 8004576:	f107 0308 	add.w	r3, r7, #8
 800457a:	461a      	mov	r2, r3
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fb69 	bl	8000c56 <move_queue_status_req_decoder>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <motion_on_move_queue_status+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "queue_status", "decode_fail");
 800458a:	4a1f      	ldr	r2, [pc, #124]	@ (8004608 <motion_on_move_queue_status+0x9c>)
 800458c:	4b1f      	ldr	r3, [pc, #124]	@ (800460c <motion_on_move_queue_status+0xa0>)
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	4b1f      	ldr	r3, [pc, #124]	@ (8004610 <motion_on_move_queue_status+0xa4>)
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	f06f 0201 	mvn.w	r2, #1
 800459a:	2164      	movs	r1, #100	@ 0x64
 800459c:	2002      	movs	r0, #2
 800459e:	f7fe f835 	bl	800260c <log_event_auto>
 80045a2:	e02e      	b.n	8004602 <motion_on_move_queue_status+0x96>
        return;
    }
    uint32_t primask = motion_lock();
 80045a4:	f7fe fa46 	bl	8002a34 <motion_lock>
 80045a8:	60f8      	str	r0, [r7, #12]
    motion_refresh_status_locked();
 80045aa:	f7fe fb4f 	bl	8002c4c <motion_refresh_status_locked>
    motion_unlock(primask);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7fe fa51 	bl	8002a56 <motion_unlock>

    motion_send_queue_status_response(req.frameId);
 80045b4:	7a3b      	ldrb	r3, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff f812 	bl	80035e0 <motion_send_queue_status_response>
    LOGA_THIS(LOG_STATE_RECEIVED, PROTO_OK, "queue_status",
 80045bc:	4a12      	ldr	r2, [pc, #72]	@ (8004608 <motion_on_move_queue_status+0x9c>)
 80045be:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <motion_on_move_queue_status+0xa8>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4619      	mov	r1, r3
 80045c6:	4b13      	ldr	r3, [pc, #76]	@ (8004614 <motion_on_move_queue_status+0xa8>)
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	4618      	mov	r0, r3
 80045ce:	4b11      	ldr	r3, [pc, #68]	@ (8004614 <motion_on_move_queue_status+0xa8>)
 80045d0:	789b      	ldrb	r3, [r3, #2]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461c      	mov	r4, r3
 80045d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004614 <motion_on_move_queue_status+0xa8>)
 80045d8:	78db      	ldrb	r3, [r3, #3]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461d      	mov	r5, r3
 80045de:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <motion_on_move_queue_status+0xa8>)
 80045e0:	791b      	ldrb	r3, [r3, #4]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	9306      	str	r3, [sp, #24]
 80045e6:	9505      	str	r5, [sp, #20]
 80045e8:	9404      	str	r4, [sp, #16]
 80045ea:	9003      	str	r0, [sp, #12]
 80045ec:	9102      	str	r1, [sp, #8]
 80045ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <motion_on_move_queue_status+0xac>)
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <motion_on_move_queue_status+0xa4>)
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4613      	mov	r3, r2
 80045f8:	2200      	movs	r2, #0
 80045fa:	2101      	movs	r1, #1
 80045fc:	2002      	movs	r0, #2
 80045fe:	f7fe f805 	bl	800260c <log_event_auto>
              "state=%u depth=%u pct=(%u,%u,%u)",
              (unsigned)g_status.state, (unsigned)g_status.queue_depth,
              (unsigned)g_status.pctX, (unsigned)g_status.pctY, (unsigned)g_status.pctZ);
}
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bdb0      	pop	{r4, r5, r7, pc}
 8004608:	0801066c 	.word	0x0801066c
 800460c:	08010824 	.word	0x08010824
 8004610:	080108c0 	.word	0x080108c0
 8004614:	200000d0 	.word	0x200000d0
 8004618:	080108d0 	.word	0x080108d0

0800461c <motion_on_start_move>:

void motion_on_start_move(const uint8_t *frame, uint32_t len) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	@ 0x28
 8004620:	af02      	add	r7, sp, #8
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
    start_move_req_t req;
    if (start_move_req_decoder(frame, len, &req) != PROTO_OK) {
 8004626:	f107 030c 	add.w	r3, r7, #12
 800462a:	461a      	mov	r2, r3
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fc83 	bl	8000f3a <start_move_req_decoder>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <motion_on_start_move+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "start_move", "decode_fail");
 800463a:	4a50      	ldr	r2, [pc, #320]	@ (800477c <motion_on_start_move+0x160>)
 800463c:	4b50      	ldr	r3, [pc, #320]	@ (8004780 <motion_on_start_move+0x164>)
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	4b50      	ldr	r3, [pc, #320]	@ (8004784 <motion_on_start_move+0x168>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	f06f 0201 	mvn.w	r2, #1
 800464a:	2164      	movs	r1, #100	@ 0x64
 800464c:	2002      	movs	r0, #2
 800464e:	f7fd ffdd 	bl	800260c <log_event_auto>
 8004652:	e08f      	b.n	8004774 <motion_on_start_move+0x158>
        return;
    }
    uint8_t started = 0u;
 8004654:	2300      	movs	r3, #0
 8004656:	77fb      	strb	r3, [r7, #31]
    uint32_t primask = motion_lock();
 8004658:	f7fe f9ec 	bl	8002a34 <motion_lock>
 800465c:	61b8      	str	r0, [r7, #24]

#if MOTION_DEBUG_FLOW
    {
        uint8_t depth = (uint8_t)(g_queue_count + (g_has_active_segment ? 1u : 0u));
 800465e:	4b4a      	ldr	r3, [pc, #296]	@ (8004788 <motion_on_start_move+0x16c>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <motion_on_start_move+0x50>
 8004668:	2201      	movs	r2, #1
 800466a:	e000      	b.n	800466e <motion_on_start_move+0x52>
 800466c:	2200      	movs	r2, #0
 800466e:	4b47      	ldr	r3, [pc, #284]	@ (800478c <motion_on_start_move+0x170>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	4413      	add	r3, r2
 8004674:	75fb      	strb	r3, [r7, #23]
        printf("[FLOW start_move request depth=%u active=%u ids=(",
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	4a45      	ldr	r2, [pc, #276]	@ (8004790 <motion_on_start_move+0x174>)
 800467a:	7812      	ldrb	r2, [r2, #0]
 800467c:	4619      	mov	r1, r3
 800467e:	4845      	ldr	r0, [pc, #276]	@ (8004794 <motion_on_start_move+0x178>)
 8004680:	f00a fe2a 	bl	800f2d8 <iprintf>
               (unsigned)depth, (unsigned)g_active_frame_id);
        for (uint8_t i = 0; i < g_queue_count; ++i) {
 8004684:	2300      	movs	r3, #0
 8004686:	77bb      	strb	r3, [r7, #30]
 8004688:	e01c      	b.n	80046c4 <motion_on_start_move+0xa8>
            uint8_t idxq = (uint8_t)((g_queue_head + i) % MOTION_QUEUE_CAPACITY);
 800468a:	4b43      	ldr	r3, [pc, #268]	@ (8004798 <motion_on_start_move+0x17c>)
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	7fbb      	ldrb	r3, [r7, #30]
 8004690:	4413      	add	r3, r2
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004698:	75bb      	strb	r3, [r7, #22]
            unsigned id = (unsigned)g_queue[idxq].req.frameId;
 800469a:	7dbb      	ldrb	r3, [r7, #22]
 800469c:	4a3f      	ldr	r2, [pc, #252]	@ (800479c <motion_on_start_move+0x180>)
 800469e:	212c      	movs	r1, #44	@ 0x2c
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	613b      	str	r3, [r7, #16]
            printf(i ? ",%u" : "%u", id);
 80046aa:	7fbb      	ldrb	r3, [r7, #30]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <motion_on_start_move+0x98>
 80046b0:	4b3b      	ldr	r3, [pc, #236]	@ (80047a0 <motion_on_start_move+0x184>)
 80046b2:	e000      	b.n	80046b6 <motion_on_start_move+0x9a>
 80046b4:	4b3b      	ldr	r3, [pc, #236]	@ (80047a4 <motion_on_start_move+0x188>)
 80046b6:	6939      	ldr	r1, [r7, #16]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f00a fe0d 	bl	800f2d8 <iprintf>
        for (uint8_t i = 0; i < g_queue_count; ++i) {
 80046be:	7fbb      	ldrb	r3, [r7, #30]
 80046c0:	3301      	adds	r3, #1
 80046c2:	77bb      	strb	r3, [r7, #30]
 80046c4:	4b31      	ldr	r3, [pc, #196]	@ (800478c <motion_on_start_move+0x170>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	7fba      	ldrb	r2, [r7, #30]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d3dd      	bcc.n	800468a <motion_on_start_move+0x6e>
        }
        printf(") ]\r\n");
 80046ce:	4836      	ldr	r0, [pc, #216]	@ (80047a8 <motion_on_start_move+0x18c>)
 80046d0:	f00a fe6a 	bl	800f3a8 <puts>
    }
#endif

    if (!safety_is_safe()) {
 80046d4:	f000 fcfe 	bl	80050d4 <safety_is_safe>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <motion_on_start_move+0xc8>
        started = 0u;
 80046de:	2300      	movs	r3, #0
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e014      	b.n	800470e <motion_on_start_move+0xf2>
    } else if (!g_has_active_segment) {
 80046e4:	4b28      	ldr	r3, [pc, #160]	@ (8004788 <motion_on_start_move+0x16c>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <motion_on_start_move+0xe8>
        if (motion_try_start_next_locked()) {
 80046ee:	f7fe fe1f 	bl	8003330 <motion_try_start_next_locked>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <motion_on_start_move+0xf2>
            g_status.state = MOTION_RUNNING;
 80046f8:	4b2c      	ldr	r3, [pc, #176]	@ (80047ac <motion_on_start_move+0x190>)
 80046fa:	2202      	movs	r2, #2
 80046fc:	701a      	strb	r2, [r3, #0]
            started = 1u;
 80046fe:	2301      	movs	r3, #1
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e004      	b.n	800470e <motion_on_start_move+0xf2>
        }
    } else {
        g_status.state = MOTION_RUNNING;
 8004704:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <motion_on_start_move+0x190>)
 8004706:	2202      	movs	r2, #2
 8004708:	701a      	strb	r2, [r3, #0]
        started = 1u;
 800470a:	2301      	movs	r3, #1
 800470c:	77fb      	strb	r3, [r7, #31]
    }

    motion_refresh_status_locked();
 800470e:	f7fe fa9d 	bl	8002c4c <motion_refresh_status_locked>
    motion_unlock(primask);
 8004712:	69b8      	ldr	r0, [r7, #24]
 8004714:	f7fe f99f 	bl	8002a56 <motion_unlock>

    (void)HAL_TIM_Base_Start_IT(&htim6);
 8004718:	4825      	ldr	r0, [pc, #148]	@ (80047b0 <motion_on_start_move+0x194>)
 800471a:	f006 fe1b 	bl	800b354 <HAL_TIM_Base_Start_IT>
    (void)HAL_TIM_Base_Start_IT(&htim7);
 800471e:	4825      	ldr	r0, [pc, #148]	@ (80047b4 <motion_on_start_move+0x198>)
 8004720:	f006 fe18 	bl	800b354 <HAL_TIM_Base_Start_IT>

    motion_send_start_response(req.frameId, started ? 0u : 1u, g_status.queue_depth);
 8004724:	7b38      	ldrb	r0, [r7, #12]
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4619      	mov	r1, r3
 8004734:	4b1d      	ldr	r3, [pc, #116]	@ (80047ac <motion_on_start_move+0x190>)
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	f7fe ffb0 	bl	80036a0 <motion_send_start_response>
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "start_move", started ? "running" : "ignored");
 8004740:	4a0e      	ldr	r2, [pc, #56]	@ (800477c <motion_on_start_move+0x160>)
 8004742:	7ffb      	ldrb	r3, [r7, #31]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <motion_on_start_move+0x130>
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <motion_on_start_move+0x19c>)
 800474a:	e000      	b.n	800474e <motion_on_start_move+0x132>
 800474c:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <motion_on_start_move+0x1a0>)
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <motion_on_start_move+0x168>)
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	2200      	movs	r2, #0
 8004758:	2102      	movs	r1, #2
 800475a:	2002      	movs	r0, #2
 800475c:	f7fd ff56 	bl	800260c <log_event_auto>
#if MOTION_DEBUG_FLOW
    printf("[FLOW start_move %s]\r\n", started ? "running" : "ignored");
 8004760:	7ffb      	ldrb	r3, [r7, #31]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <motion_on_start_move+0x14e>
 8004766:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <motion_on_start_move+0x19c>)
 8004768:	e000      	b.n	800476c <motion_on_start_move+0x150>
 800476a:	4b14      	ldr	r3, [pc, #80]	@ (80047bc <motion_on_start_move+0x1a0>)
 800476c:	4619      	mov	r1, r3
 800476e:	4814      	ldr	r0, [pc, #80]	@ (80047c0 <motion_on_start_move+0x1a4>)
 8004770:	f00a fdb2 	bl	800f2d8 <iprintf>
#endif
}
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	0801066c 	.word	0x0801066c
 8004780:	08010824 	.word	0x08010824
 8004784:	080108f4 	.word	0x080108f4
 8004788:	20000168 	.word	0x20000168
 800478c:	20000c6e 	.word	0x20000c6e
 8004790:	20000c6f 	.word	0x20000c6f
 8004794:	08010900 	.word	0x08010900
 8004798:	20000c6c 	.word	0x20000c6c
 800479c:	2000016c 	.word	0x2000016c
 80047a0:	08010934 	.word	0x08010934
 80047a4:	08010938 	.word	0x08010938
 80047a8:	0801093c 	.word	0x0801093c
 80047ac:	200000d0 	.word	0x200000d0
 80047b0:	20000fd0 	.word	0x20000fd0
 80047b4:	2000101c 	.word	0x2000101c
 80047b8:	08010944 	.word	0x08010944
 80047bc:	0801094c 	.word	0x0801094c
 80047c0:	08010954 	.word	0x08010954

080047c4 <motion_on_move_end>:

void motion_on_move_end(const uint8_t *frame, uint32_t len) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af04      	add	r7, sp, #16
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
    move_end_req_t req;
    if (move_end_req_decoder(frame, len, &req) != PROTO_OK) {
 80047ce:	f107 0308 	add.w	r3, r7, #8
 80047d2:	461a      	mov	r2, r3
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc f899 	bl	800090e <move_end_req_decoder>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00c      	beq.n	80047fc <motion_on_move_end+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "move_end", "decode_fail");
 80047e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004860 <motion_on_move_end+0x9c>)
 80047e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004864 <motion_on_move_end+0xa0>)
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004868 <motion_on_move_end+0xa4>)
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	f06f 0201 	mvn.w	r2, #1
 80047f2:	2164      	movs	r1, #100	@ 0x64
 80047f4:	2002      	movs	r0, #2
 80047f6:	f7fd ff09 	bl	800260c <log_event_auto>
 80047fa:	e02e      	b.n	800485a <motion_on_move_end+0x96>
        return;
    }
    uint32_t primask = motion_lock();
 80047fc:	f7fe f91a 	bl	8002a34 <motion_lock>
 8004800:	60f8      	str	r0, [r7, #12]
    motion_stop_all_axes_locked();
 8004802:	f7fe fbbb 	bl	8002f7c <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 8004806:	f7fe fc0f 	bl	8003028 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 800480a:	4b18      	ldr	r3, [pc, #96]	@ (800486c <motion_on_move_end+0xa8>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
    g_status.state = MOTION_STOPPING;
 8004810:	4b17      	ldr	r3, [pc, #92]	@ (8004870 <motion_on_move_end+0xac>)
 8004812:	2204      	movs	r2, #4
 8004814:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8004816:	f7fe fa19 	bl	8002c4c <motion_refresh_status_locked>
    motion_unlock(primask);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7fe f91b 	bl	8002a56 <motion_unlock>

    motion_send_move_end_response(req.frameId, 1u /* stopped by host */);
 8004820:	7a3b      	ldrb	r3, [r7, #8]
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe ff75 	bl	8003714 <motion_send_move_end_response>

    primask = motion_lock();
 800482a:	f7fe f903 	bl	8002a34 <motion_lock>
 800482e:	60f8      	str	r0, [r7, #12]
    g_status.state = MOTION_IDLE;
 8004830:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <motion_on_move_end+0xac>)
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8004836:	f7fe fa09 	bl	8002c4c <motion_refresh_status_locked>
    motion_unlock(primask);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7fe f90b 	bl	8002a56 <motion_unlock>

    LOGT_THIS(LOG_STATE_APPLIED, PROTO_OK, "move_end", "stopped");
 8004840:	4a07      	ldr	r2, [pc, #28]	@ (8004860 <motion_on_move_end+0x9c>)
 8004842:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <motion_on_move_end+0xb0>)
 8004844:	9302      	str	r3, [sp, #8]
 8004846:	4b0c      	ldr	r3, [pc, #48]	@ (8004878 <motion_on_move_end+0xb4>)
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <motion_on_move_end+0xa4>)
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	2200      	movs	r2, #0
 8004852:	2102      	movs	r1, #2
 8004854:	2002      	movs	r0, #2
 8004856:	f7fd fed9 	bl	800260c <log_event_auto>
}
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	0801066c 	.word	0x0801066c
 8004864:	08010824 	.word	0x08010824
 8004868:	08010794 	.word	0x08010794
 800486c:	20000168 	.word	0x20000168
 8004870:	200000d0 	.word	0x200000d0
 8004874:	0801096c 	.word	0x0801096c
 8004878:	080107b0 	.word	0x080107b0

0800487c <motion_on_set_origin>:

/* =======================
 *  set_origin e encoder_status (telemetria)
 * ======================= */
void motion_on_set_origin(const uint8_t *frame, uint32_t len) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b094      	sub	sp, #80	@ 0x50
 8004880:	af04      	add	r7, sp, #16
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
    set_origin_req_t req;
    if (set_origin_req_decoder(frame, len, &req) != PROTO_OK) {
 8004886:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800488a:	461a      	mov	r2, r3
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc fad1 	bl	8000e36 <set_origin_req_decoder>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <motion_on_set_origin+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "set_origin", "decode_fail");
 800489a:	4a49      	ldr	r2, [pc, #292]	@ (80049c0 <motion_on_set_origin+0x144>)
 800489c:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <motion_on_set_origin+0x148>)
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	4b49      	ldr	r3, [pc, #292]	@ (80049c8 <motion_on_set_origin+0x14c>)
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	f06f 0201 	mvn.w	r2, #1
 80048aa:	2164      	movs	r1, #100	@ 0x64
 80048ac:	2002      	movs	r0, #2
 80048ae:	f7fd fead 	bl	800260c <log_event_auto>
 80048b2:	e082      	b.n	80049ba <motion_on_set_origin+0x13e>
        return;
    }
    uint8_t m = req.mask & 0x07u;
 80048b4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80048c6:	e046      	b.n	8004956 <motion_on_set_origin+0xda>
        if (m & (1u << axis)) {
 80048c8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80048cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d037      	beq.n	800494c <motion_on_set_origin+0xd0>
            /* Define base externa como a posição absoluta atual e zera relativo */
            int64_t pos = g_encoder_position[axis];
 80048dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048e0:	4a3a      	ldr	r2, [pc, #232]	@ (80049cc <motion_on_set_origin+0x150>)
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            if (pos > INT32_MAX) pos = INT32_MAX; else if (pos < INT32_MIN) pos = INT32_MIN;
 80048ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80048f2:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80048f6:	f173 0300 	sbcs.w	r3, r3, #0
 80048fa:	db06      	blt.n	800490a <motion_on_set_origin+0x8e>
 80048fc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8004908:	e00c      	b.n	8004924 <motion_on_set_origin+0xa8>
 800490a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800490e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004912:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8004916:	da05      	bge.n	8004924 <motion_on_set_origin+0xa8>
 8004918:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800491c:	f04f 33ff 	mov.w	r3, #4294967295
 8004920:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            g_origin_base32[axis] = (int32_t)pos;
 8004924:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800492a:	4929      	ldr	r1, [pc, #164]	@ (80049d0 <motion_on_set_origin+0x154>)
 800492c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            g_encoder_origin[axis] = g_encoder_position[axis];
 8004930:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004934:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8004938:	4a24      	ldr	r2, [pc, #144]	@ (80049cc <motion_on_set_origin+0x150>)
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4413      	add	r3, r2
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	4824      	ldr	r0, [pc, #144]	@ (80049d4 <motion_on_set_origin+0x158>)
 8004944:	00c9      	lsls	r1, r1, #3
 8004946:	4401      	add	r1, r0
 8004948:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 800494c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004950:	3301      	adds	r3, #1
 8004952:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004956:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800495a:	2b02      	cmp	r3, #2
 800495c:	d9b4      	bls.n	80048c8 <motion_on_set_origin+0x4c>
        }
    }
    set_origin_resp_t resp;
    resp.frameId = req.frameId;
 800495e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004962:	773b      	strb	r3, [r7, #28]
    resp.x0 = g_origin_base32[AXIS_X];
 8004964:	4b1a      	ldr	r3, [pc, #104]	@ (80049d0 <motion_on_set_origin+0x154>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	623b      	str	r3, [r7, #32]
    resp.y0 = g_origin_base32[AXIS_Y];
 800496a:	4b19      	ldr	r3, [pc, #100]	@ (80049d0 <motion_on_set_origin+0x154>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
    resp.z0 = g_origin_base32[AXIS_Z];
 8004970:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <motion_on_set_origin+0x154>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t raw[16];
    if (set_origin_resp_encoder(&resp, raw, sizeof raw) == PROTO_OK) {
 8004976:	f107 010c 	add.w	r1, r7, #12
 800497a:	f107 031c 	add.w	r3, r7, #28
 800497e:	2210      	movs	r2, #16
 8004980:	4618      	mov	r0, r3
 8004982:	f7fc fe56 	bl	8001632 <set_origin_resp_encoder>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <motion_on_set_origin+0x11c>
        (void)app_resp_push(raw, (uint32_t)sizeof raw);
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	2110      	movs	r1, #16
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fe16 	bl	80055c4 <app_resp_push>
    }
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "set_origin", "mask=0x%02X mode=%u", (unsigned)req.mask, (unsigned)req.mode);
 8004998:	4a09      	ldr	r2, [pc, #36]	@ (80049c0 <motion_on_set_origin+0x144>)
 800499a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800499e:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80049a2:	9103      	str	r1, [sp, #12]
 80049a4:	9302      	str	r3, [sp, #8]
 80049a6:	4b0c      	ldr	r3, [pc, #48]	@ (80049d8 <motion_on_set_origin+0x15c>)
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	4b07      	ldr	r3, [pc, #28]	@ (80049c8 <motion_on_set_origin+0x14c>)
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	2200      	movs	r2, #0
 80049b2:	2102      	movs	r1, #2
 80049b4:	2002      	movs	r0, #2
 80049b6:	f7fd fe29 	bl	800260c <log_event_auto>
}
 80049ba:	3740      	adds	r7, #64	@ 0x40
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	0801066c 	.word	0x0801066c
 80049c4:	08010824 	.word	0x08010824
 80049c8:	08010974 	.word	0x08010974
 80049cc:	20000c70 	.word	0x20000c70
 80049d0:	20000cbc 	.word	0x20000cbc
 80049d4:	20000c98 	.word	0x20000c98
 80049d8:	08010980 	.word	0x08010980

080049dc <motion_on_encoder_status>:

void motion_on_encoder_status(const uint8_t *frame, uint32_t len) {
 80049dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e0:	b09e      	sub	sp, #120	@ 0x78
 80049e2:	af02      	add	r7, sp, #8
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
    encoder_status_req_t req;
    if (encoder_status_req_decoder(frame, len, &req) != PROTO_OK) {
 80049e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80049ec:	461a      	mov	r2, r3
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f7fb fe73 	bl	80006dc <encoder_status_req_decoder>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <motion_on_encoder_status+0x3a>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "enc_status", "decode_fail");
 80049fc:	4a65      	ldr	r2, [pc, #404]	@ (8004b94 <motion_on_encoder_status+0x1b8>)
 80049fe:	4b66      	ldr	r3, [pc, #408]	@ (8004b98 <motion_on_encoder_status+0x1bc>)
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	4b66      	ldr	r3, [pc, #408]	@ (8004b9c <motion_on_encoder_status+0x1c0>)
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	f06f 0201 	mvn.w	r2, #1
 8004a0c:	2164      	movs	r1, #100	@ 0x64
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7fd fdfc 	bl	800260c <log_event_auto>
 8004a14:	e0b9      	b.n	8004b8a <motion_on_encoder_status+0x1ae>
        return;
    }
    /* posição_rel = position - origin; posição_abs = origin_base + posição_rel */
    int32_t rel[3];
    int32_t abs[3];
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004a1c:	e080      	b.n	8004b20 <motion_on_encoder_status+0x144>
        int64_t r = g_encoder_position[axis] - g_encoder_origin[axis];
 8004a1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a22:	4a5f      	ldr	r2, [pc, #380]	@ (8004ba0 <motion_on_encoder_status+0x1c4>)
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a2c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a30:	4a5c      	ldr	r2, [pc, #368]	@ (8004ba4 <motion_on_encoder_status+0x1c8>)
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	ebb0 0a02 	subs.w	sl, r0, r2
 8004a3e:	eb61 0b03 	sbc.w	fp, r1, r3
 8004a42:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
        if (r > INT32_MAX) r = INT32_MAX; else if (r < INT32_MIN) r = INT32_MIN;
 8004a46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004a4a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004a4e:	f173 0300 	sbcs.w	r3, r3, #0
 8004a52:	db06      	blt.n	8004a62 <motion_on_encoder_status+0x86>
 8004a54:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8004a60:	e00c      	b.n	8004a7c <motion_on_encoder_status+0xa0>
 8004a62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004a66:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004a6a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8004a6e:	da05      	bge.n	8004a7c <motion_on_encoder_status+0xa0>
 8004a70:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295
 8004a78:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        rel[axis] = (int32_t)r;
 8004a7c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	3368      	adds	r3, #104	@ 0x68
 8004a86:	f107 0108 	add.w	r1, r7, #8
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f843 2c28 	str.w	r2, [r3, #-40]
        int64_t a = (int64_t)g_origin_base32[axis] + (int64_t)rel[axis];
 8004a90:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004a94:	4a44      	ldr	r2, [pc, #272]	@ (8004ba8 <motion_on_encoder_status+0x1cc>)
 8004a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9a:	17da      	asrs	r2, r3, #31
 8004a9c:	461c      	mov	r4, r3
 8004a9e:	4615      	mov	r5, r2
 8004aa0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	3368      	adds	r3, #104	@ 0x68
 8004aa8:	f107 0208 	add.w	r2, r7, #8
 8004aac:	4413      	add	r3, r2
 8004aae:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004ab2:	17da      	asrs	r2, r3, #31
 8004ab4:	4698      	mov	r8, r3
 8004ab6:	4691      	mov	r9, r2
 8004ab8:	eb14 0308 	adds.w	r3, r4, r8
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	eb45 0309 	adc.w	r3, r5, r9
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        if (a > INT32_MAX) a = INT32_MAX; else if (a < INT32_MIN) a = INT32_MIN;
 8004acc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004ad4:	f173 0300 	sbcs.w	r3, r3, #0
 8004ad8:	db06      	blt.n	8004ae8 <motion_on_encoder_status+0x10c>
 8004ada:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8004ae6:	e00c      	b.n	8004b02 <motion_on_encoder_status+0x126>
 8004ae8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8004af0:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8004af4:	da05      	bge.n	8004b02 <motion_on_encoder_status+0x126>
 8004af6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        abs[axis] = (int32_t)a;
 8004b02:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004b06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	3368      	adds	r3, #104	@ 0x68
 8004b0c:	f107 0108 	add.w	r1, r7, #8
 8004b10:	440b      	add	r3, r1
 8004b12:	f843 2c34 	str.w	r2, [r3, #-52]
    for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004b16:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004b20:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	f67f af7a 	bls.w	8004a1e <motion_on_encoder_status+0x42>
    }
    encoder_status_resp_t resp;
    resp.frameId = req.frameId;
 8004b2a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004b2e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    resp.pidErrX = (uint8_t)g_status.pidErrX;
 8004b32:	4b1e      	ldr	r3, [pc, #120]	@ (8004bac <motion_on_encoder_status+0x1d0>)
 8004b34:	795b      	ldrb	r3, [r3, #5]
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    resp.pidErrY = (uint8_t)g_status.pidErrY;
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bac <motion_on_encoder_status+0x1d0>)
 8004b40:	799b      	ldrb	r3, [r3, #6]
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    resp.pidErrZ = (uint8_t)g_status.pidErrZ;
 8004b4a:	4b18      	ldr	r3, [pc, #96]	@ (8004bac <motion_on_encoder_status+0x1d0>)
 8004b4c:	79db      	ldrb	r3, [r3, #7]
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    resp.delta = 0; /* opcional */
 8004b56:	2300      	movs	r3, #0
 8004b58:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    resp.absX = abs[AXIS_X];
 8004b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    resp.absY = abs[AXIS_Y];
 8004b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b62:	637b      	str	r3, [r7, #52]	@ 0x34
    resp.absZ = abs[AXIS_Z];
 8004b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b66:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint8_t raw[20];
    if (encoder_status_resp_encoder(&resp, raw, sizeof raw) == PROTO_OK) {
 8004b68:	f107 0114 	add.w	r1, r7, #20
 8004b6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b70:	2214      	movs	r2, #20
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fc fa4a 	bl	800100c <encoder_status_resp_encoder>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d105      	bne.n	8004b8a <motion_on_encoder_status+0x1ae>
        (void)app_resp_push(raw, (uint32_t)sizeof raw);
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	2114      	movs	r1, #20
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fd1d 	bl	80055c4 <app_resp_push>
    }
}
 8004b8a:	3770      	adds	r7, #112	@ 0x70
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b92:	bf00      	nop
 8004b94:	0801066c 	.word	0x0801066c
 8004b98:	08010824 	.word	0x08010824
 8004b9c:	08010994 	.word	0x08010994
 8004ba0:	20000c70 	.word	0x20000c70
 8004ba4:	20000c98 	.word	0x20000c98
 8004ba8:	20000cbc 	.word	0x20000cbc
 8004bac:	200000d0 	.word	0x200000d0

08004bb0 <motion_on_set_microsteps>:

void motion_on_set_microsteps(const uint8_t *frame, uint32_t len) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af04      	add	r7, sp, #16
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
    set_microsteps_req_t req;
    if (set_microsteps_req_decoder(frame, len, &req) != PROTO_OK) {
 8004bba:	f107 0308 	add.w	r3, r7, #8
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc f8bc 	bl	8000d40 <set_microsteps_req_decoder>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <motion_on_set_microsteps+0x38>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_FRAME, "set_microsteps", "decode_fail");
 8004bce:	4a20      	ldr	r2, [pc, #128]	@ (8004c50 <motion_on_set_microsteps+0xa0>)
 8004bd0:	4b20      	ldr	r3, [pc, #128]	@ (8004c54 <motion_on_set_microsteps+0xa4>)
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	4b20      	ldr	r3, [pc, #128]	@ (8004c58 <motion_on_set_microsteps+0xa8>)
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	f06f 0201 	mvn.w	r2, #1
 8004bde:	2164      	movs	r1, #100	@ 0x64
 8004be0:	2002      	movs	r0, #2
 8004be2:	f7fd fd13 	bl	800260c <log_event_auto>
        return;
 8004be6:	e02f      	b.n	8004c48 <motion_on_set_microsteps+0x98>
    }
    if (g_status.state == MOTION_RUNNING) {
 8004be8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c5c <motion_on_set_microsteps+0xac>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d10c      	bne.n	8004c0c <motion_on_set_microsteps+0x5c>
        LOGA_THIS(LOG_STATE_ERROR, PROTO_ERR_RANGE, "set_microsteps", "busy_running");
 8004bf2:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <motion_on_set_microsteps+0xa0>)
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c60 <motion_on_set_microsteps+0xb0>)
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	4b17      	ldr	r3, [pc, #92]	@ (8004c58 <motion_on_set_microsteps+0xa8>)
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	f06f 0203 	mvn.w	r2, #3
 8004c02:	2164      	movs	r1, #100	@ 0x64
 8004c04:	2002      	movs	r0, #2
 8004c06:	f7fd fd01 	bl	800260c <log_event_auto>
        return;
 8004c0a:	e01d      	b.n	8004c48 <motion_on_set_microsteps+0x98>
    }
    uint16_t ms = (req.microsteps == 0u) ? 1u : req.microsteps;
 8004c0c:	897b      	ldrh	r3, [r7, #10]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <motion_on_set_microsteps+0x66>
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	e000      	b.n	8004c18 <motion_on_set_microsteps+0x68>
 8004c16:	2301      	movs	r3, #1
 8004c18:	81fb      	strh	r3, [r7, #14]
    if (ms > 256u) ms = 256u;
 8004c1a:	89fb      	ldrh	r3, [r7, #14]
 8004c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c20:	d902      	bls.n	8004c28 <motion_on_set_microsteps+0x78>
 8004c22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c26:	81fb      	strh	r3, [r7, #14]
    g_microstep_factor = ms;
 8004c28:	4a0e      	ldr	r2, [pc, #56]	@ (8004c64 <motion_on_set_microsteps+0xb4>)
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	8013      	strh	r3, [r2, #0]
    LOGA_THIS(LOG_STATE_APPLIED, PROTO_OK, "set_microsteps", "ms=%u", (unsigned)ms);
 8004c2e:	4a08      	ldr	r2, [pc, #32]	@ (8004c50 <motion_on_set_microsteps+0xa0>)
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	9302      	str	r3, [sp, #8]
 8004c34:	4b0c      	ldr	r3, [pc, #48]	@ (8004c68 <motion_on_set_microsteps+0xb8>)
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <motion_on_set_microsteps+0xa8>)
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2102      	movs	r1, #2
 8004c42:	2002      	movs	r0, #2
 8004c44:	f7fd fce2 	bl	800260c <log_event_auto>
}
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	0801066c 	.word	0x0801066c
 8004c54:	08010824 	.word	0x08010824
 8004c58:	080109a0 	.word	0x080109a0
 8004c5c:	200000d0 	.word	0x200000d0
 8004c60:	080109b0 	.word	0x080109b0
 8004c64:	20000010 	.word	0x20000010
 8004c68:	080109c0 	.word	0x080109c0

08004c6c <motion_demo_set_continuous>:
    }
    motion_unlock(primask);
}

void motion_demo_set_continuous(uint8_t enable)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
    uint32_t primask = motion_lock();
 8004c76:	f7fd fedd 	bl	8002a34 <motion_lock>
 8004c7a:	6138      	str	r0, [r7, #16]
    g_demo_continuous = (enable ? 1u : 0u);
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <motion_demo_set_continuous+0x1a>
 8004c82:	2201      	movs	r2, #1
 8004c84:	e000      	b.n	8004c88 <motion_demo_set_continuous+0x1c>
 8004c86:	2200      	movs	r2, #0
 8004c88:	4b48      	ldr	r3, [pc, #288]	@ (8004dac <motion_demo_set_continuous+0x140>)
 8004c8a:	701a      	strb	r2, [r3, #0]

    if (g_demo_continuous) {
 8004c8c:	4b47      	ldr	r3, [pc, #284]	@ (8004dac <motion_demo_set_continuous+0x140>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d077      	beq.n	8004d86 <motion_demo_set_continuous+0x11a>
        g_has_active_segment = 1u;
 8004c96:	4b46      	ldr	r3, [pc, #280]	@ (8004db0 <motion_demo_set_continuous+0x144>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]

        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	75fb      	strb	r3, [r7, #23]
 8004ca0:	e068      	b.n	8004d74 <motion_demo_set_continuous+0x108>
            motion_axis_state_t *ax = &g_axis_state[axis];
 8004ca2:	7dfa      	ldrb	r2, [r7, #23]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	4a41      	ldr	r2, [pc, #260]	@ (8004db4 <motion_demo_set_continuous+0x148>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

            ax->total_steps       = 0xFFFFFFFFu; 
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb8:	601a      	str	r2, [r3, #0]
            ax->target_steps      = 0u;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]
            ax->emitted_steps     = 0u;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]

            /* tabela em "k steps/s" (~1 kHz) -> converte para steps/s */
            uint16_t vtab         = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8004cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8004db8 <motion_demo_set_continuous+0x14c>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8004dbc <motion_demo_set_continuous+0x150>)
 8004cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cd6:	817b      	strh	r3, [r7, #10]
            ax->velocity_per_tick = vtab;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	897a      	ldrh	r2, [r7, #10]
 8004cdc:	819a      	strh	r2, [r3, #12]
            ax->v_target_sps      = ((uint32_t)vtab) * 1000u;
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ce4:	fb03 f202 	mul.w	r2, r3, r2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	621a      	str	r2, [r3, #32]
            if (ax->v_target_sps > MOTION_MAX_SPS) ax->v_target_sps = MOTION_MAX_SPS;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d903      	bls.n	8004d00 <motion_demo_set_continuous+0x94>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004cfe:	621a      	str	r2, [r3, #32]
            ax->v_actual_sps      = 0u;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	625a      	str	r2, [r3, #36]	@ 0x24
            ax->accel_sps2        = DEMO_ACCEL_SPS2;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc0 <motion_demo_set_continuous+0x154>)
 8004d0a:	629a      	str	r2, [r3, #40]	@ 0x28

            ax->dda_accum_q16     = 0u;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	619a      	str	r2, [r3, #24]
            ax->dda_inc_q16       = 0u;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	61da      	str	r2, [r3, #28]

            ax->step_high         = 0u;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	751a      	strb	r2, [r3, #20]
            ax->step_low          = 0u;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	755a      	strb	r2, [r3, #21]
            ax->en_settle_ticks   = MOTION_ENABLE_SETTLE_TICKS;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
            ax->dir_settle_ticks  = MOTION_DIR_SETUP_TICKS;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

            motion_hw_step_low(axis);
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd fe02 	bl	8002940 <motion_hw_step_low>
            motion_hw_set_dir(axis, 1u);     /* forward */
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fd fd59 	bl	80027f8 <motion_hw_set_dir>
            motion_hw_enable(axis, 1u);      /* ativo em baixo no TMC5160 */
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fd fd94 	bl	8002878 <motion_hw_enable>
            /* Não zera origem automaticamente; mantém a referência definida via set_origin */
            g_encoder_delta_tick[axis] = 0;
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <motion_demo_set_continuous+0x158>)
 8004d54:	2100      	movs	r1, #0
 8004d56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_pi_i_accum[axis] = 0;
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
 8004d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc8 <motion_demo_set_continuous+0x15c>)
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            g_pi_prev_err[axis] = 0;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	4a19      	ldr	r2, [pc, #100]	@ (8004dcc <motion_demo_set_continuous+0x160>)
 8004d68:	2100      	movs	r1, #0
 8004d6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	3301      	adds	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d993      	bls.n	8004ca2 <motion_demo_set_continuous+0x36>
        }
        g_status.state = MOTION_RUNNING;
 8004d7a:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <motion_demo_set_continuous+0x164>)
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8004d80:	f7fd ff64 	bl	8002c4c <motion_refresh_status_locked>
 8004d84:	e00b      	b.n	8004d9e <motion_demo_set_continuous+0x132>
    } else {
        motion_stop_all_axes_locked();
 8004d86:	f7fe f8f9 	bl	8002f7c <motion_stop_all_axes_locked>
        motion_queue_clear_locked();
 8004d8a:	f7fe f94d 	bl	8003028 <motion_queue_clear_locked>
        g_has_active_segment = 0u;
 8004d8e:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <motion_demo_set_continuous+0x144>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	701a      	strb	r2, [r3, #0]
        g_status.state = MOTION_IDLE;
 8004d94:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd0 <motion_demo_set_continuous+0x164>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
        motion_refresh_status_locked();
 8004d9a:	f7fd ff57 	bl	8002c4c <motion_refresh_status_locked>
    }
    motion_unlock(primask);
 8004d9e:	6938      	ldr	r0, [r7, #16]
 8004da0:	f7fd fe59 	bl	8002a56 <motion_unlock>
}
 8004da4:	bf00      	nop
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000d10 	.word	0x20000d10
 8004db0:	20000168 	.word	0x20000168
 8004db4:	200000d8 	.word	0x200000d8
 8004db8:	20000012 	.word	0x20000012
 8004dbc:	08010d50 	.word	0x08010d50
 8004dc0:	00030d40 	.word	0x00030d40
 8004dc4:	20000cb0 	.word	0x20000cb0
 8004dc8:	20000ce0 	.word	0x20000ce0
 8004dcc:	20000cec 	.word	0x20000cec
 8004dd0:	200000d0 	.word	0x200000d0

08004dd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
    if (!htim) return;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00f      	beq.n	8004e02 <HAL_TIM_PeriodElapsedCallback+0x2e>
    if (htim->Instance == TIM6) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a09      	ldr	r2, [pc, #36]	@ (8004e0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d102      	bne.n	8004df2 <HAL_TIM_PeriodElapsedCallback+0x1e>
        motion_on_tim6_tick();
 8004dec:	f7fe fd96 	bl	800391c <motion_on_tim6_tick>
 8004df0:	e008      	b.n	8004e04 <HAL_TIM_PeriodElapsedCallback+0x30>
    } else if (htim->Instance == TIM7) {
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a06      	ldr	r2, [pc, #24]	@ (8004e10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d103      	bne.n	8004e04 <HAL_TIM_PeriodElapsedCallback+0x30>
        motion_on_tim7_tick();
 8004dfc:	f7fe ff3e 	bl	8003c7c <motion_on_tim7_tick>
 8004e00:	e000      	b.n	8004e04 <HAL_TIM_PeriodElapsedCallback+0x30>
    if (!htim) return;
 8004e02:	bf00      	nop
    } else {
        (void)htim;
    }
}
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40001000 	.word	0x40001000
 8004e10:	40001400 	.word	0x40001400

08004e14 <motion_emergency_stop>:

void motion_emergency_stop(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
    uint32_t primask = motion_lock();
 8004e1a:	f7fd fe0b 	bl	8002a34 <motion_lock>
 8004e1e:	6078      	str	r0, [r7, #4]

    g_demo_continuous = 0u;
 8004e20:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <motion_emergency_stop+0x64>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
    motion_stop_all_axes_locked();
 8004e26:	f7fe f8a9 	bl	8002f7c <motion_stop_all_axes_locked>
    motion_queue_clear_locked();
 8004e2a:	f7fe f8fd 	bl	8003028 <motion_queue_clear_locked>
    g_has_active_segment = 0u;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <motion_emergency_stop+0x68>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]

    g_status.state = MOTION_STOPPING;
 8004e34:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <motion_emergency_stop+0x6c>)
 8004e36:	2204      	movs	r2, #4
 8004e38:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8004e3a:	f7fd ff07 	bl	8002c4c <motion_refresh_status_locked>
    motion_unlock(primask);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fd fe09 	bl	8002a56 <motion_unlock>

    primask = motion_lock();
 8004e44:	f7fd fdf6 	bl	8002a34 <motion_lock>
 8004e48:	6078      	str	r0, [r7, #4]
    g_status.state = MOTION_IDLE;
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <motion_emergency_stop+0x6c>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
    motion_refresh_status_locked();
 8004e50:	f7fd fefc 	bl	8002c4c <motion_refresh_status_locked>
    motion_unlock(primask);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fd fdfe 	bl	8002a56 <motion_unlock>
    /* Notifica término por emergência (se houver frame ativo) */
    if (g_active_frame_id) {
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <motion_emergency_stop+0x70>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <motion_emergency_stop+0x5a>
        motion_send_move_end_response(g_active_frame_id, 2u /* emergency */);
 8004e62:	4b08      	ldr	r3, [pc, #32]	@ (8004e84 <motion_emergency_stop+0x70>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2102      	movs	r1, #2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe fc53 	bl	8003714 <motion_send_move_end_response>
    }
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000d10 	.word	0x20000d10
 8004e7c:	20000168 	.word	0x20000168
 8004e80:	200000d0 	.word	0x200000d0
 8004e84:	20000c6f 	.word	0x20000c6f

08004e88 <motion_demo_is_active>:

uint8_t motion_demo_is_active(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
    return g_demo_continuous ? 1u : 0u;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <motion_demo_is_active+0x20>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <motion_demo_is_active+0x12>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <motion_demo_is_active+0x14>
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000d10 	.word	0x20000d10

08004eac <motion_demo_cycle_speed>:

void motion_demo_cycle_speed(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
    g_demo_speed_idx = (uint8_t)((g_demo_speed_idx + 1u) & 0x3u);
 8004eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f68 <motion_demo_cycle_speed+0xbc>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	4b29      	ldr	r3, [pc, #164]	@ (8004f68 <motion_demo_cycle_speed+0xbc>)
 8004ec4:	701a      	strb	r2, [r3, #0]

    /* Se demo  ativo, atualiza v_target_sps imediatamente (rampa cuida do resto) */
    if (g_demo_continuous) {
 8004ec6:	4b29      	ldr	r3, [pc, #164]	@ (8004f6c <motion_demo_cycle_speed+0xc0>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d047      	beq.n	8004f60 <motion_demo_cycle_speed+0xb4>
        uint16_t vtab = g_demo_speed_table[g_demo_speed_idx & 0x3u];
 8004ed0:	4b25      	ldr	r3, [pc, #148]	@ (8004f68 <motion_demo_cycle_speed+0xbc>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	4a25      	ldr	r2, [pc, #148]	@ (8004f70 <motion_demo_cycle_speed+0xc4>)
 8004edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ee0:	80bb      	strh	r3, [r7, #4]
        uint32_t primask = motion_lock();
 8004ee2:	f7fd fda7 	bl	8002a34 <motion_lock>
 8004ee6:	6038      	str	r0, [r7, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004ee8:	2300      	movs	r3, #0
 8004eea:	71fb      	strb	r3, [r7, #7]
 8004eec:	e032      	b.n	8004f54 <motion_demo_cycle_speed+0xa8>
            g_axis_state[axis].velocity_per_tick = vtab;
 8004eee:	79fa      	ldrb	r2, [r7, #7]
 8004ef0:	4920      	ldr	r1, [pc, #128]	@ (8004f74 <motion_demo_cycle_speed+0xc8>)
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	440b      	add	r3, r1
 8004efc:	330c      	adds	r3, #12
 8004efe:	88ba      	ldrh	r2, [r7, #4]
 8004f00:	801a      	strh	r2, [r3, #0]
            g_axis_state[axis].v_target_sps      = ((uint32_t)vtab) * 1000u;
 8004f02:	88bb      	ldrh	r3, [r7, #4]
 8004f04:	79fa      	ldrb	r2, [r7, #7]
 8004f06:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004f0a:	fb03 f101 	mul.w	r1, r3, r1
 8004f0e:	4819      	ldr	r0, [pc, #100]	@ (8004f74 <motion_demo_cycle_speed+0xc8>)
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	4403      	add	r3, r0
 8004f1a:	3320      	adds	r3, #32
 8004f1c:	6019      	str	r1, [r3, #0]
            if (g_axis_state[axis].v_target_sps > MOTION_MAX_SPS) g_axis_state[axis].v_target_sps = MOTION_MAX_SPS;
 8004f1e:	79fa      	ldrb	r2, [r7, #7]
 8004f20:	4914      	ldr	r1, [pc, #80]	@ (8004f74 <motion_demo_cycle_speed+0xc8>)
 8004f22:	4613      	mov	r3, r2
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	4413      	add	r3, r2
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3320      	adds	r3, #32
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d90a      	bls.n	8004f4e <motion_demo_cycle_speed+0xa2>
 8004f38:	79fa      	ldrb	r2, [r7, #7]
 8004f3a:	490e      	ldr	r1, [pc, #56]	@ (8004f74 <motion_demo_cycle_speed+0xc8>)
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	440b      	add	r3, r1
 8004f46:	3320      	adds	r3, #32
 8004f48:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8004f4c:	601a      	str	r2, [r3, #0]
        for (uint8_t axis = 0; axis < MOTION_AXIS_COUNT; ++axis) {
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	3301      	adds	r3, #1
 8004f52:	71fb      	strb	r3, [r7, #7]
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d9c9      	bls.n	8004eee <motion_demo_cycle_speed+0x42>
        }
        motion_unlock(primask);
 8004f5a:	6838      	ldr	r0, [r7, #0]
 8004f5c:	f7fd fd7b 	bl	8002a56 <motion_unlock>
    }
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000012 	.word	0x20000012
 8004f6c:	20000d10 	.word	0x20000d10
 8004f70:	08010d50 	.word	0x08010d50
 8004f74:	200000d8 	.word	0x200000d8

08004f78 <probe_service_init>:

LOG_SVC_DEFINE(LOG_SVC_PROBE, "probe");

static probe_status_t g_probe;

void probe_service_init(void) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af04      	add	r7, sp, #16
	g_probe.axis_done_mask = 0;
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb8 <probe_service_init+0x40>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
	g_probe.error_flags = 0;
 8004f84:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb8 <probe_service_init+0x40>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	705a      	strb	r2, [r3, #1]
	g_probe.latched_pos_x = g_probe.latched_pos_y = g_probe.latched_pos_z = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb8 <probe_service_init+0x40>)
 8004f8e:	60d3      	str	r3, [r2, #12]
 8004f90:	4a09      	ldr	r2, [pc, #36]	@ (8004fb8 <probe_service_init+0x40>)
 8004f92:	6093      	str	r3, [r2, #8]
 8004f94:	4a08      	ldr	r2, [pc, #32]	@ (8004fb8 <probe_service_init+0x40>)
 8004f96:	6053      	str	r3, [r2, #4]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "ok");
 8004f98:	4a08      	ldr	r2, [pc, #32]	@ (8004fbc <probe_service_init+0x44>)
 8004f9a:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <probe_service_init+0x48>)
 8004f9c:	9302      	str	r3, [sp, #8]
 8004f9e:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <probe_service_init+0x4c>)
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <probe_service_init+0x50>)
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2100      	movs	r1, #0
 8004fac:	2004      	movs	r0, #4
 8004fae:	f7fd fb2d 	bl	800260c <log_event_auto>
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000d14 	.word	0x20000d14
 8004fbc:	080109c8 	.word	0x080109c8
 8004fc0:	080109d0 	.word	0x080109d0
 8004fc4:	080109d4 	.word	0x080109d4
 8004fc8:	080109d8 	.word	0x080109d8

08004fcc <probe_on_move_probe_level>:
const probe_status_t* probe_status_get(void) {
	return &g_probe;
}

void probe_on_move_probe_level(const uint8_t *frame, uint32_t len) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af04      	add	r7, sp, #16
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
	(void) frame;
	(void) len; /* implementar FSM de probe */

	LOGT_THIS(LOG_STATE_RECEIVED, PROTO_OK, "move_probe_level", "not_implemented");
 8004fd6:	4a08      	ldr	r2, [pc, #32]	@ (8004ff8 <probe_on_move_probe_level+0x2c>)
 8004fd8:	4b08      	ldr	r3, [pc, #32]	@ (8004ffc <probe_on_move_probe_level+0x30>)
 8004fda:	9302      	str	r3, [sp, #8]
 8004fdc:	4b08      	ldr	r3, [pc, #32]	@ (8005000 <probe_on_move_probe_level+0x34>)
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	4b08      	ldr	r3, [pc, #32]	@ (8005004 <probe_on_move_probe_level+0x38>)
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2101      	movs	r1, #1
 8004fea:	2004      	movs	r0, #4
 8004fec:	f7fd fb0e 	bl	800260c <log_event_auto>
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	080109c8 	.word	0x080109c8
 8004ffc:	080109e0 	.word	0x080109e0
 8005000:	080109d4 	.word	0x080109d4
 8005004:	080109f0 	.word	0x080109f0

08005008 <safety_service_init>:

LOG_SVC_DEFINE(LOG_SVC_SAFETY, "safety");

static volatile safety_state_t g_state = SAFETY_NORMAL;

void safety_service_init(void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af04      	add	r7, sp, #16
	g_state = SAFETY_NORMAL;
 800500e:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <safety_service_init+0x2c>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_START, PROTO_OK, "init", "normal");
 8005014:	4a08      	ldr	r2, [pc, #32]	@ (8005038 <safety_service_init+0x30>)
 8005016:	4b09      	ldr	r3, [pc, #36]	@ (800503c <safety_service_init+0x34>)
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	4b09      	ldr	r3, [pc, #36]	@ (8005040 <safety_service_init+0x38>)
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	4b09      	ldr	r3, [pc, #36]	@ (8005044 <safety_service_init+0x3c>)
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	2200      	movs	r2, #0
 8005026:	2100      	movs	r1, #0
 8005028:	2005      	movs	r0, #5
 800502a:	f7fd faef 	bl	800260c <log_event_auto>
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000d24 	.word	0x20000d24
 8005038:	08010a04 	.word	0x08010a04
 800503c:	08010a0c 	.word	0x08010a0c
 8005040:	08010a14 	.word	0x08010a14
 8005044:	08010a18 	.word	0x08010a18

08005048 <safety_estop_assert>:
void safety_estop_assert(void) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af04      	add	r7, sp, #16
	g_state = SAFETY_ESTOP;
 800504e:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <safety_estop_assert+0x2c>)
 8005050:	2201      	movs	r2, #1
 8005052:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_ASSERT, PROTO_OK, "estop", "assert");
 8005054:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <safety_estop_assert+0x30>)
 8005056:	4b09      	ldr	r3, [pc, #36]	@ (800507c <safety_estop_assert+0x34>)
 8005058:	9302      	str	r3, [sp, #8]
 800505a:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <safety_estop_assert+0x38>)
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <safety_estop_assert+0x3c>)
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	2200      	movs	r2, #0
 8005066:	210a      	movs	r1, #10
 8005068:	2005      	movs	r0, #5
 800506a:	f7fd facf 	bl	800260c <log_event_auto>
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000d24 	.word	0x20000d24
 8005078:	08010a04 	.word	0x08010a04
 800507c:	08010a20 	.word	0x08010a20
 8005080:	08010a14 	.word	0x08010a14
 8005084:	08010a28 	.word	0x08010a28

08005088 <safety_estop_release>:
void safety_estop_release(void) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af04      	add	r7, sp, #16
	if (g_state == SAFETY_ESTOP)
 800508e:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <safety_estop_release+0x38>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d102      	bne.n	800509e <safety_estop_release+0x16>
		g_state = SAFETY_RECOVERY_WAIT;
 8005098:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <safety_estop_release+0x38>)
 800509a:	2202      	movs	r2, #2
 800509c:	701a      	strb	r2, [r3, #0]

	LOGT_THIS(LOG_STATE_ESTOP_RELEASE, PROTO_OK, "estop", "release");
 800509e:	4a09      	ldr	r2, [pc, #36]	@ (80050c4 <safety_estop_release+0x3c>)
 80050a0:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <safety_estop_release+0x40>)
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <safety_estop_release+0x44>)
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <safety_estop_release+0x48>)
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	2200      	movs	r2, #0
 80050b0:	210b      	movs	r1, #11
 80050b2:	2005      	movs	r0, #5
 80050b4:	f7fd faaa 	bl	800260c <log_event_auto>
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000d24 	.word	0x20000d24
 80050c4:	08010a04 	.word	0x08010a04
 80050c8:	08010a30 	.word	0x08010a30
 80050cc:	08010a14 	.word	0x08010a14
 80050d0:	08010a28 	.word	0x08010a28

080050d4 <safety_is_safe>:
int safety_is_safe(void) {
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
	return g_state == SAFETY_NORMAL;
 80050d8:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <safety_is_safe+0x20>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf0c      	ite	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	2300      	movne	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000d24 	.word	0x20000d24

080050f8 <h_move_queue_add>:
#include "Services/Probe/probe_service.h"
#include "Services/Led/led_service.h"
#include "Services/Test/test_spi_service.h"

// Funções estáticas de adaptação compatíveis com os callbacks do roteador
static void h_move_queue_add(router_t *r, const uint8_t *f, uint32_t l) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_add(f, l);
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f7ff f96c 	bl	80043e4 <motion_on_move_queue_add>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <h_move_queue_status>:
static void h_move_queue_status(router_t *r, const uint8_t *f, uint32_t l) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_queue_status(f, l);
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68b8      	ldr	r0, [r7, #8]
 8005124:	f7ff fa22 	bl	800456c <motion_on_move_queue_status>
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <h_start_move>:
static void h_start_move(router_t *r, const uint8_t *f, uint32_t l) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_start_move(f, l);
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	68b8      	ldr	r0, [r7, #8]
 8005140:	f7ff fa6c 	bl	800461c <motion_on_start_move>
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <h_move_home>:
static void h_move_home(router_t *r, const uint8_t *f, uint32_t l) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	(void) r;
	home_on_move_home(f, l);
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	68b8      	ldr	r0, [r7, #8]
 800515c:	f7fc fd2a 	bl	8001bb4 <home_on_move_home>
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <h_move_probe_level>:
static void h_move_probe_level(router_t *r, const uint8_t *f, uint32_t l) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
	(void) r;
	probe_on_move_probe_level(f, l);
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7ff ff28 	bl	8004fcc <probe_on_move_probe_level>
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <h_move_end>:
static void h_move_end(router_t *r, const uint8_t *f, uint32_t l) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
	(void) r;
	motion_on_move_end(f, l);
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	68b8      	ldr	r0, [r7, #8]
 8005194:	f7ff fb16 	bl	80047c4 <motion_on_move_end>
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <h_led_ctrl>:
static void h_led_ctrl(router_t *r, const uint8_t *f, uint32_t l) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
	(void) r;
	led_on_led_ctrl(f, l);
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	68b8      	ldr	r0, [r7, #8]
 80051b0:	f7fd f864 	bl	800227c <led_on_led_ctrl>
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <h_fpga_status>:
static void h_fpga_status(router_t *r, const uint8_t *f, uint32_t l) {
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
    (void) r;
    (void) f;
    (void) l; /* opcional */
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <h_set_origin>:

// Novos serviços: set_origin e encoder_status (telemetria)
static void h_set_origin(router_t *r, const uint8_t *f, uint32_t l) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_set_origin(f, l);
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	68b8      	ldr	r0, [r7, #8]
 80051e4:	f7ff fb4a 	bl	800487c <motion_on_set_origin>
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <h_encoder_status>:
static void h_encoder_status(router_t *r, const uint8_t *f, uint32_t l) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_encoder_status(f, l);
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f7ff fbec 	bl	80049dc <motion_on_encoder_status>
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <h_set_microsteps>:
static void h_set_microsteps(router_t *r, const uint8_t *f, uint32_t l) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
    (void) r; motion_on_set_microsteps(f, l);
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	68b8      	ldr	r0, [r7, #8]
 800521c:	f7ff fcc8 	bl	8004bb0 <motion_on_set_microsteps>
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <h_test_hello>:

static void h_test_hello(router_t *r, const uint8_t *f, uint32_t l) {
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
	(void) r;
	//test_spi_on_hello(f, l);
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <services_register_handlers>:

void services_register_handlers(router_handlers_t *h) {
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	if (!h)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d024      	beq.n	8005298 <services_register_handlers+0x58>
		return;
	h->on_move_queue_add = h_move_queue_add;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a14      	ldr	r2, [pc, #80]	@ (80052a4 <services_register_handlers+0x64>)
 8005252:	601a      	str	r2, [r3, #0]
	h->on_move_queue_status = h_move_queue_status;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a14      	ldr	r2, [pc, #80]	@ (80052a8 <services_register_handlers+0x68>)
 8005258:	605a      	str	r2, [r3, #4]
	h->on_start_move = h_start_move;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a13      	ldr	r2, [pc, #76]	@ (80052ac <services_register_handlers+0x6c>)
 800525e:	609a      	str	r2, [r3, #8]
	h->on_move_home = h_move_home;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a13      	ldr	r2, [pc, #76]	@ (80052b0 <services_register_handlers+0x70>)
 8005264:	60da      	str	r2, [r3, #12]
	h->on_move_probe_level = h_move_probe_level;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a12      	ldr	r2, [pc, #72]	@ (80052b4 <services_register_handlers+0x74>)
 800526a:	611a      	str	r2, [r3, #16]
	h->on_move_end = h_move_end;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a12      	ldr	r2, [pc, #72]	@ (80052b8 <services_register_handlers+0x78>)
 8005270:	615a      	str	r2, [r3, #20]
    h->on_led_ctrl = h_led_ctrl;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a11      	ldr	r2, [pc, #68]	@ (80052bc <services_register_handlers+0x7c>)
 8005276:	619a      	str	r2, [r3, #24]
    h->on_fpga_status = h_fpga_status;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a11      	ldr	r2, [pc, #68]	@ (80052c0 <services_register_handlers+0x80>)
 800527c:	61da      	str	r2, [r3, #28]
    h->on_set_origin = h_set_origin;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a10      	ldr	r2, [pc, #64]	@ (80052c4 <services_register_handlers+0x84>)
 8005282:	621a      	str	r2, [r3, #32]
    h->on_encoder_status = h_encoder_status;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a10      	ldr	r2, [pc, #64]	@ (80052c8 <services_register_handlers+0x88>)
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24
    h->on_set_microsteps = h_set_microsteps;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a0f      	ldr	r2, [pc, #60]	@ (80052cc <services_register_handlers+0x8c>)
 800528e:	629a      	str	r2, [r3, #40]	@ 0x28
    h->on_test_hello = h_test_hello;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a0f      	ldr	r2, [pc, #60]	@ (80052d0 <services_register_handlers+0x90>)
 8005294:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005296:	e000      	b.n	800529a <services_register_handlers+0x5a>
		return;
 8005298:	bf00      	nop
}
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	080050f9 	.word	0x080050f9
 80052a8:	08005115 	.word	0x08005115
 80052ac:	08005131 	.word	0x08005131
 80052b0:	0800514d 	.word	0x0800514d
 80052b4:	08005169 	.word	0x08005169
 80052b8:	08005185 	.word	0x08005185
 80052bc:	080051a1 	.word	0x080051a1
 80052c0:	080051bd 	.word	0x080051bd
 80052c4:	080051d5 	.word	0x080051d5
 80052c8:	080051f1 	.word	0x080051f1
 80052cc:	0800520d 	.word	0x0800520d
 80052d0:	08005229 	.word	0x08005229

080052d4 <tx_fill_left_zero_right_filler>:
/**
 * @brief Preenche o buffer de TX com 22×0x00 à esquerda e 20×SPI_FILL_BYTE à direita.
 * @param dst Ponteiro para o buffer de TX (tamanho = 42).
 */
static inline void tx_fill_left_zero_right_filler(uint8_t *dst)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    memset(&dst[0],                 0x00,           RESP_LEFT_PAD_LEN); /* 22×0x00  */
 80052dc:	2216      	movs	r2, #22
 80052de:	2100      	movs	r1, #0
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f00a fa31 	bl	800f748 <memset>
    memset(&dst[RESP_LEFT_PAD_LEN], SPI_FILL_BYTE,  RESP_RIGHT_LEN);    /* 20×filler */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3316      	adds	r3, #22
 80052ea:	2214      	movs	r2, #20
 80052ec:	21a5      	movs	r1, #165	@ 0xa5
 80052ee:	4618      	mov	r0, r3
 80052f0:	f00a fa2a 	bl	800f748 <memset>
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <is_fill42>:
 * @param buf Buffer de entrada (tamanho = 42).
 * @param val Valor esperado em todos os bytes.
 * @return 1 se todos os bytes são 'val', 0 caso contrário.
 */
static int is_fill42(const uint8_t *buf, uint8_t val)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	e00b      	b.n	8005326 <is_fill42+0x2a>
        if (buf[i] != val) return 0;
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <is_fill42+0x24>
 800531c:	2300      	movs	r3, #0
 800531e:	e006      	b.n	800532e <is_fill42+0x32>
    for (uint32_t i = 0; i < APP_SPI_DMA_BUF_LEN; ++i)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b29      	cmp	r3, #41	@ 0x29
 800532a:	d9f0      	bls.n	800530e <is_fill42+0x12>
    return 1;
 800532c:	2301      	movs	r3, #1
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <find_frame>:
 * @param off  (out) Offset de início do quadro (REQ_HEADER).
 * @param len  (out) Comprimento do quadro (inclui REQ_TAIL).
 * @return 1 se encontrou, 0 caso contrário.
 */
static int find_frame(const uint8_t *buf, uint16_t *off, uint16_t *len)
{
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
    uint16_t i = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	82fb      	strh	r3, [r7, #22]
    while (i < APP_SPI_DMA_BUF_LEN && buf[i] != REQ_HEADER) i++;
 800534a:	e002      	b.n	8005352 <find_frame+0x18>
 800534c:	8afb      	ldrh	r3, [r7, #22]
 800534e:	3301      	adds	r3, #1
 8005350:	82fb      	strh	r3, [r7, #22]
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	2b29      	cmp	r3, #41	@ 0x29
 8005356:	d805      	bhi.n	8005364 <find_frame+0x2a>
 8005358:	8afb      	ldrh	r3, [r7, #22]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2baa      	cmp	r3, #170	@ 0xaa
 8005362:	d1f3      	bne.n	800534c <find_frame+0x12>
    if (i >= APP_SPI_DMA_BUF_LEN) return 0;
 8005364:	8afb      	ldrh	r3, [r7, #22]
 8005366:	2b29      	cmp	r3, #41	@ 0x29
 8005368:	d901      	bls.n	800536e <find_frame+0x34>
 800536a:	2300      	movs	r3, #0
 800536c:	e01d      	b.n	80053aa <find_frame+0x70>

    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 800536e:	8afb      	ldrh	r3, [r7, #22]
 8005370:	3301      	adds	r3, #1
 8005372:	82bb      	strh	r3, [r7, #20]
 8005374:	e015      	b.n	80053a2 <find_frame+0x68>
        if (buf[j] == REQ_TAIL) {
 8005376:	8abb      	ldrh	r3, [r7, #20]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b55      	cmp	r3, #85	@ 0x55
 8005380:	d10c      	bne.n	800539c <find_frame+0x62>
            *off = i;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	8afa      	ldrh	r2, [r7, #22]
 8005386:	801a      	strh	r2, [r3, #0]
            *len = (uint16_t)(j - i + 1u);
 8005388:	8aba      	ldrh	r2, [r7, #20]
 800538a:	8afb      	ldrh	r3, [r7, #22]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	b29b      	uxth	r3, r3
 8005390:	3301      	adds	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	801a      	strh	r2, [r3, #0]
            return 1;
 8005398:	2301      	movs	r3, #1
 800539a:	e006      	b.n	80053aa <find_frame+0x70>
    for (uint16_t j = (uint16_t)(i + 1); j < APP_SPI_DMA_BUF_LEN; ++j) {
 800539c:	8abb      	ldrh	r3, [r7, #20]
 800539e:	3301      	adds	r3, #1
 80053a0:	82bb      	strh	r3, [r7, #20]
 80053a2:	8abb      	ldrh	r3, [r7, #20]
 80053a4:	2b29      	cmp	r3, #41	@ 0x29
 80053a6:	d9e6      	bls.n	8005376 <find_frame+0x3c>
        }
    }
    return 0;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <prepare_next_tx>:
 *      * Se n > 20, trunca para os 20 últimos bytes.
 *  - SEM resposta:
 *      * 22×0x00 + 20×SPI_FILL_BYTE (poll).
 */
static void prepare_next_tx(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	@ 0x38
 80053bc:	af00      	add	r7, sp, #0
    uint8_t tmp[APP_SPI_DMA_BUF_LEN];
    int n = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	637b      	str	r3, [r7, #52]	@ 0x34

    if (!g_resp_fifo) {
 80053c2:	4b21      	ldr	r3, [pc, #132]	@ (8005448 <prepare_next_tx+0x90>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <prepare_next_tx+0x20>
        /* Sem fila -> 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80053ca:	4820      	ldr	r0, [pc, #128]	@ (800544c <prepare_next_tx+0x94>)
 80053cc:	f7ff ff82 	bl	80052d4 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 80053d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005450 <prepare_next_tx+0x98>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	e034      	b.n	8005442 <prepare_next_tx+0x8a>
        return;
    }

    n = resp_fifo_pop(g_resp_fifo, tmp, (int)APP_SPI_DMA_BUF_LEN);
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <prepare_next_tx+0x90>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	1d39      	adds	r1, r7, #4
 80053de:	222a      	movs	r2, #42	@ 0x2a
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fc fa11 	bl	8001808 <resp_fifo_pop>
 80053e6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (n > 0) {
 80053e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	dd23      	ble.n	8005436 <prepare_next_tx+0x7e>
        /* Zera TODO o frame para evitar A5 antes do payload */
        memset(g_spi_tx_dma_buf, 0x00, APP_SPI_DMA_BUF_LEN);
 80053ee:	222a      	movs	r2, #42	@ 0x2a
 80053f0:	2100      	movs	r1, #0
 80053f2:	4816      	ldr	r0, [pc, #88]	@ (800544c <prepare_next_tx+0x94>)
 80053f4:	f00a f9a8 	bl	800f748 <memset>

        /* Copia o payload alinhado à direita (trunca se necessário) */
        uint16_t to_copy = (uint16_t)((n > (int)RESP_RIGHT_LEN) ? RESP_RIGHT_LEN : n);
 80053f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fa:	2b14      	cmp	r3, #20
 80053fc:	dc02      	bgt.n	8005404 <prepare_next_tx+0x4c>
 80053fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005400:	b29b      	uxth	r3, r3
 8005402:	e000      	b.n	8005406 <prepare_next_tx+0x4e>
 8005404:	2314      	movs	r3, #20
 8005406:	867b      	strh	r3, [r7, #50]	@ 0x32
        uint16_t dst_off = (uint16_t)(APP_SPI_DMA_BUF_LEN - to_copy); /* 42 - to_copy */
 8005408:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800540a:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800540e:	863b      	strh	r3, [r7, #48]	@ 0x30
        uint16_t src_off = (uint16_t)(n - to_copy);                   /* últimos 'to_copy' bytes */
 8005410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005412:	b29a      	uxth	r2, r3
 8005414:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        memcpy(&g_spi_tx_dma_buf[dst_off], &tmp[src_off], to_copy);
 800541a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800541c:	4a0b      	ldr	r2, [pc, #44]	@ (800544c <prepare_next_tx+0x94>)
 800541e:	1898      	adds	r0, r3, r2
 8005420:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005422:	1d3a      	adds	r2, r7, #4
 8005424:	4413      	add	r3, r2
 8005426:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8005428:	4619      	mov	r1, r3
 800542a:	f00a fa18 	bl	800f85e <memcpy>
        g_state = APP_SPI_PENDING;
 800542e:	4b08      	ldr	r3, [pc, #32]	@ (8005450 <prepare_next_tx+0x98>)
 8005430:	2202      	movs	r2, #2
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	e005      	b.n	8005442 <prepare_next_tx+0x8a>
    } else {
        /* Sem resposta -> mantém contrato visual: 22×0x00 + 20×filler */
        tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 8005436:	4805      	ldr	r0, [pc, #20]	@ (800544c <prepare_next_tx+0x94>)
 8005438:	f7ff ff4c 	bl	80052d4 <tx_fill_left_zero_right_filler>
        g_state = APP_SPI_READY;
 800543c:	4b04      	ldr	r3, [pc, #16]	@ (8005450 <prepare_next_tx+0x98>)
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
    }
}
 8005442:	3738      	adds	r7, #56	@ 0x38
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000da0 	.word	0x20000da0
 800544c:	20000dd0 	.word	0x20000dd0
 8005450:	20000dfc 	.word	0x20000dfc

08005454 <restart_spi_dma>:
/**
 * @brief Reinicia uma transação SPI por DMA (não bloqueante).
 * Seta g_state=BUSY em caso de sucesso; seta g_spi_error_flag em erro.
 */
static void restart_spi_dma(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY) {
 8005458:	480d      	ldr	r0, [pc, #52]	@ (8005490 <restart_spi_dma+0x3c>)
 800545a:	f005 fbb9 	bl	800abd0 <HAL_SPI_GetState>
 800545e:	4603      	mov	r3, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d003      	beq.n	800546c <restart_spi_dma+0x18>
        g_spi_error_flag = 1u;
 8005464:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <restart_spi_dma+0x40>)
 8005466:	2201      	movs	r2, #1
 8005468:	701a      	strb	r2, [r3, #0]
        return;
 800546a:	e00f      	b.n	800548c <restart_spi_dma+0x38>
    }

    if (HAL_SPI_TransmitReceive_DMA(&hspi2,
 800546c:	232a      	movs	r3, #42	@ 0x2a
 800546e:	4a0a      	ldr	r2, [pc, #40]	@ (8005498 <restart_spi_dma+0x44>)
 8005470:	490a      	ldr	r1, [pc, #40]	@ (800549c <restart_spi_dma+0x48>)
 8005472:	4807      	ldr	r0, [pc, #28]	@ (8005490 <restart_spi_dma+0x3c>)
 8005474:	f005 f8ea 	bl	800a64c <HAL_SPI_TransmitReceive_DMA>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <restart_spi_dma+0x32>
            g_spi_tx_dma_buf, g_spi_rx_dma_buf,
            (uint16_t)APP_SPI_DMA_BUF_LEN) != HAL_OK) {
        g_spi_error_flag = 1u;
 800547e:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <restart_spi_dma+0x40>)
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
        return;
 8005484:	e002      	b.n	800548c <restart_spi_dma+0x38>
    }

    g_state = APP_SPI_BUSY;
 8005486:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <restart_spi_dma+0x4c>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
}
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000e40 	.word	0x20000e40
 8005494:	20000dfb 	.word	0x20000dfb
 8005498:	20000da4 	.word	0x20000da4
 800549c:	20000dd0 	.word	0x20000dd0
 80054a0:	20000dfc 	.word	0x20000dfc

080054a4 <app_init>:
/**
 * @brief Inicializa roteador, fila de respostas e a primeira rodada DMA.
 * Preenche o primeiro TX como 22×0x00 + 20×filler.
 */
void app_init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
    /* Registra serviços no router (o projeto deve prover os handlers) */
    memset(&g_handlers, 0, sizeof g_handlers);
 80054a8:	2230      	movs	r2, #48	@ 0x30
 80054aa:	2100      	movs	r1, #0
 80054ac:	4813      	ldr	r0, [pc, #76]	@ (80054fc <app_init+0x58>)
 80054ae:	f00a f94b 	bl	800f748 <memset>
    services_register_handlers(&g_handlers);
 80054b2:	4812      	ldr	r0, [pc, #72]	@ (80054fc <app_init+0x58>)
 80054b4:	f7ff fec4 	bl	8005240 <services_register_handlers>

    /* Inicializa serviços (ordem: log/diag, safety, periféricos simples, motion) */
#if LOG_ENABLE
    log_service_init();
 80054b8:	f7fc fffc 	bl	80024b4 <log_service_init>
#endif
    safety_service_init();
 80054bc:	f7ff fda4 	bl	8005008 <safety_service_init>
    led_service_init();
 80054c0:	f7fc fe44 	bl	800214c <led_service_init>
    home_service_init();
 80054c4:	f7fc fb52 	bl	8001b6c <home_service_init>
    probe_service_init();
 80054c8:	f7ff fd56 	bl	8004f78 <probe_service_init>
    motion_service_init();
 80054cc:	f7fe f95a 	bl	8003784 <motion_service_init>

    g_resp_fifo = resp_fifo_create();
 80054d0:	f7fc f93d 	bl	800174e <resp_fifo_create>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005500 <app_init+0x5c>)
 80054d8:	6013      	str	r3, [r2, #0]
    router_init(&g_router, g_resp_fifo, &g_handlers);
 80054da:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <app_init+0x5c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a07      	ldr	r2, [pc, #28]	@ (80054fc <app_init+0x58>)
 80054e0:	4619      	mov	r1, r3
 80054e2:	4808      	ldr	r0, [pc, #32]	@ (8005504 <app_init+0x60>)
 80054e4:	f7fc f9d6 	bl	8001894 <router_init>

    /* Primeiro frame: 22×0x00 + 20×filler (evita A5 no início quando não há resposta) */
    tx_fill_left_zero_right_filler(g_spi_tx_dma_buf);
 80054e8:	4807      	ldr	r0, [pc, #28]	@ (8005508 <app_init+0x64>)
 80054ea:	f7ff fef3 	bl	80052d4 <tx_fill_left_zero_right_filler>

    restart_spi_dma();
 80054ee:	f7ff ffb1 	bl	8005454 <restart_spi_dma>
    g_state = APP_SPI_READY;
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <app_init+0x68>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]
}
 80054f8:	bf00      	nop
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20000d70 	.word	0x20000d70
 8005500:	20000da0 	.word	0x20000da0
 8005504:	20000d28 	.word	0x20000d28
 8005508:	20000dd0 	.word	0x20000dd0
 800550c:	20000dfc 	.word	0x20000dfc

08005510 <app_poll>:
/**
 * @brief Loop de serviço: processa RX (quando há rodada concluída),
 *        prepara o próximo TX e rearma o DMA.
 */
void app_poll(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
    /* Só processa quando um round DMA foi concluído pelo HAL */
    if (!g_spi_round_done) return;
 8005516:	4b19      	ldr	r3, [pc, #100]	@ (800557c <app_poll+0x6c>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d028      	beq.n	8005572 <app_poll+0x62>
    g_spi_round_done = 0u;
 8005520:	4b16      	ldr	r3, [pc, #88]	@ (800557c <app_poll+0x6c>)
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]

    /* 1) Interpretar o RX atual */
    if (is_fill42(g_spi_rx_dma_buf, SPI_POLL_BYTE)) {
 8005526:	213c      	movs	r1, #60	@ 0x3c
 8005528:	4815      	ldr	r0, [pc, #84]	@ (8005580 <app_poll+0x70>)
 800552a:	f7ff fee7 	bl	80052fc <is_fill42>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d119      	bne.n	8005568 <app_poll+0x58>
        /* 42×0x3C => cliente apenas leu respostas; não alimenta router */
    } else {
        /* Tenta extrair [REQ_HEADER ... REQ_TAIL] e empurra para o router */
        uint16_t off = 0, len = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	80fb      	strh	r3, [r7, #6]
 8005538:	2300      	movs	r3, #0
 800553a:	80bb      	strh	r3, [r7, #4]
        if (find_frame(g_spi_rx_dma_buf, &off, &len)) {
 800553c:	1d3a      	adds	r2, r7, #4
 800553e:	1dbb      	adds	r3, r7, #6
 8005540:	4619      	mov	r1, r3
 8005542:	480f      	ldr	r0, [pc, #60]	@ (8005580 <app_poll+0x70>)
 8005544:	f7ff fef9 	bl	800533a <find_frame>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <app_poll+0x52>
            router_feed_bytes(&g_router, &g_spi_rx_dma_buf[off], len);
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	461a      	mov	r2, r3
 8005552:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <app_poll+0x70>)
 8005554:	4413      	add	r3, r2
 8005556:	88ba      	ldrh	r2, [r7, #4]
 8005558:	4619      	mov	r1, r3
 800555a:	480a      	ldr	r0, [pc, #40]	@ (8005584 <app_poll+0x74>)
 800555c:	f7fc fade 	bl	8001b1c <router_feed_bytes>
 8005560:	e002      	b.n	8005568 <app_poll+0x58>
        } else {
            /* Quadro inválido/parcial ou outro padrão -> marca erro leve */
            g_spi_error_flag = 1u;
 8005562:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <app_poll+0x78>)
 8005564:	2201      	movs	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
        }
    }

    /* 2) Preparar TX (resposta à direita ou 22×0x00 + 20×filler) */
    prepare_next_tx();
 8005568:	f7ff ff26 	bl	80053b8 <prepare_next_tx>

    /* 3) Reiniciar DMA para o próximo round */
    restart_spi_dma();
 800556c:	f7ff ff72 	bl	8005454 <restart_spi_dma>
 8005570:	e000      	b.n	8005574 <app_poll+0x64>
    if (!g_spi_round_done) return;
 8005572:	bf00      	nop
}
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000dfa 	.word	0x20000dfa
 8005580:	20000da4 	.word	0x20000da4
 8005584:	20000d28 	.word	0x20000d28
 8005588:	20000dfb 	.word	0x20000dfb

0800558c <app_spi_isr_txrx_done>:
/**
 * @brief Callback para “transfer complete” do SPI+DMA.
 * Apenas sinaliza o loop principal (app_poll) via g_spi_round_done.
 */
void app_spi_isr_txrx_done(SPI_HandleTypeDef *hspi)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
    if (!hspi) return;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <app_spi_isr_txrx_done+0x20>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a07      	ldr	r2, [pc, #28]	@ (80055bc <app_spi_isr_txrx_done+0x30>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d105      	bne.n	80055b0 <app_spi_isr_txrx_done+0x24>
    g_spi_round_done = 1u;
 80055a4:	4b06      	ldr	r3, [pc, #24]	@ (80055c0 <app_spi_isr_txrx_done+0x34>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	e002      	b.n	80055b2 <app_spi_isr_txrx_done+0x26>
    if (!hspi) return;
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <app_spi_isr_txrx_done+0x26>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 80055b0:	bf00      	nop
}
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	40003800 	.word	0x40003800
 80055c0:	20000dfa 	.word	0x20000dfa

080055c4 <app_resp_push>:
 * @param frame Buffer com a resposta (número de bytes = len).
 * @param len   Tamanho da resposta (até 20 bytes). >20 retorna erro.
 * @return 0 em sucesso; PROTO_ERR_ARG ou PROTO_ERR_RANGE em erro.
 */
int app_resp_push(const uint8_t *frame, uint32_t len)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
    if (!g_resp_fifo || !frame || len == 0u) {
 80055ce:	4b0f      	ldr	r3, [pc, #60]	@ (800560c <app_resp_push+0x48>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <app_resp_push+0x1e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <app_resp_push+0x1e>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <app_resp_push+0x24>
        return PROTO_ERR_ARG;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295
 80055e6:	e00d      	b.n	8005604 <app_resp_push+0x40>
    }
    if (len > RESP_RIGHT_LEN) {
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b14      	cmp	r3, #20
 80055ec:	d902      	bls.n	80055f4 <app_resp_push+0x30>
        return PROTO_ERR_RANGE; /* impede >20 bytes */
 80055ee:	f06f 0303 	mvn.w	r3, #3
 80055f2:	e007      	b.n	8005604 <app_resp_push+0x40>
    }
    return resp_fifo_push(g_resp_fifo, frame, len);
 80055f4:	4b05      	ldr	r3, [pc, #20]	@ (800560c <app_resp_push+0x48>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fc f8af 	bl	8001760 <resp_fifo_push>
 8005602:	4603      	mov	r3, r0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000da0 	.word	0x20000da0

08005610 <configure_encoder_timer>:
 * A estrutura gerada pelo CubeMX usa TI1 por padrão. Esta função sobrescreve a
 * configuração para capturar os dois canais do encoder, mantendo todos os
 * filtros e *prescalers* em 0/1 para preservar a resolução máxima.
 */
static void configure_encoder_timer(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08e      	sub	sp, #56	@ 0x38
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
    TIM_Encoder_InitTypeDef config = {0};
 8005618:	f107 0314 	add.w	r3, r7, #20
 800561c:	2224      	movs	r2, #36	@ 0x24
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f00a f891 	bl	800f748 <memset>
    TIM_MasterConfigTypeDef master = {0};
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	605a      	str	r2, [r3, #4]
 8005630:	609a      	str	r2, [r3, #8]

    config.EncoderMode = TIM_ENCODERMODE_TI12;
 8005632:	2303      	movs	r3, #3
 8005634:	617b      	str	r3, [r7, #20]
    config.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005636:	2300      	movs	r3, #0
 8005638:	61bb      	str	r3, [r7, #24]
    config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800563a:	2301      	movs	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
    config.IC1Prescaler = TIM_ICPSC_DIV1;
 800563e:	2300      	movs	r3, #0
 8005640:	623b      	str	r3, [r7, #32]
    config.IC1Filter = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
    config.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005646:	2300      	movs	r3, #0
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800564a:	2301      	movs	r3, #1
 800564c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    config.IC2Prescaler = TIM_ICPSC_DIV1;
 800564e:	2300      	movs	r3, #0
 8005650:	633b      	str	r3, [r7, #48]	@ 0x30
    config.IC2Filter = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_TIM_Encoder_Init(htim, &config) != HAL_OK)
 8005656:	f107 0314 	add.w	r3, r7, #20
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f006 fba5 	bl	800bdac <HAL_TIM_Encoder_Init>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <configure_encoder_timer+0x5c>
    {
        Error_Handler();
 8005668:	f000 fb78 	bl	8005d5c <Error_Handler>
    }

    master.MasterOutputTrigger = TIM_TRGO_RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	60bb      	str	r3, [r7, #8]
    master.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &master) != HAL_OK)
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f008 fa7a 	bl	800db74 <HAL_TIMEx_MasterConfigSynchronization>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <configure_encoder_timer+0x7a>
    {
        Error_Handler();
 8005686:	f000 fb69 	bl	8005d5c <Error_Handler>
    }
}
 800568a:	bf00      	nop
 800568c:	3738      	adds	r7, #56	@ 0x38
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <configure_output>:

/**
 * @brief Ajusta um conjunto de saídas STEP/DIR/ENABLE para modo *push-pull*.
 */
static void configure_output(GPIO_TypeDef *port, uint32_t pins, uint32_t speed)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b08a      	sub	sp, #40	@ 0x28
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
    GPIO_InitTypeDef init = {0};
 800569e:	f107 0314 	add.w	r3, r7, #20
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	605a      	str	r2, [r3, #4]
 80056a8:	609a      	str	r2, [r3, #8]
 80056aa:	60da      	str	r2, [r3, #12]
 80056ac:	611a      	str	r2, [r3, #16]
    init.Pin = pins;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	617b      	str	r3, [r7, #20]
    init.Mode = GPIO_MODE_OUTPUT_PP;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
    init.Pull = GPIO_NOPULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
    init.Speed = speed;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &init);
 80056be:	f107 0314 	add.w	r3, r7, #20
 80056c2:	4619      	mov	r1, r3
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f001 fe1d 	bl	8007304 <HAL_GPIO_Init>
}
 80056ca:	bf00      	nop
 80056cc:	3728      	adds	r7, #40	@ 0x28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <board_config_apply_motion_gpio>:
//        Error_Handler();
//    }
//}

void board_config_apply_motion_gpio(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef init = {0};
 80056da:	1d3b      	adds	r3, r7, #4
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	60da      	str	r2, [r3, #12]
 80056e6:	611a      	str	r2, [r3, #16]

    /* Saídas de movimento com tempos de borda compatíveis com STEP/DIR */
    configure_output(GPIOB, GPIO_PIN_4 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_SPEED_FREQ_VERY_HIGH);
 80056e8:	2203      	movs	r2, #3
 80056ea:	2113      	movs	r1, #19
 80056ec:	4825      	ldr	r0, [pc, #148]	@ (8005784 <board_config_apply_motion_gpio+0xb0>)
 80056ee:	f7ff ffd0 	bl	8005692 <configure_output>
    configure_output(GPIOB, GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80056f2:	2203      	movs	r2, #3
 80056f4:	2104      	movs	r1, #4
 80056f6:	4823      	ldr	r0, [pc, #140]	@ (8005784 <board_config_apply_motion_gpio+0xb0>)
 80056f8:	f7ff ffcb 	bl	8005692 <configure_output>
    configure_output(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_SPEED_FREQ_VERY_HIGH);
 80056fc:	2203      	movs	r2, #3
 80056fe:	210c      	movs	r1, #12
 8005700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005704:	f7ff ffc5 	bl	8005692 <configure_output>
    configure_output(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8005708:	2200      	movs	r2, #0
 800570a:	2130      	movs	r1, #48	@ 0x30
 800570c:	481e      	ldr	r0, [pc, #120]	@ (8005788 <board_config_apply_motion_gpio+0xb4>)
 800570e:	f7ff ffc0 	bl	8005692 <configure_output>
    configure_output(GPIOD, GPIO_PIN_14, GPIO_SPEED_FREQ_LOW);
 8005712:	2200      	movs	r2, #0
 8005714:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005718:	481c      	ldr	r0, [pc, #112]	@ (800578c <board_config_apply_motion_gpio+0xb8>)
 800571a:	f7ff ffba 	bl	8005692 <configure_output>

    /* Estados seguros antes de habilitar drivers: ENA alto, STEP/DIR baixos */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 800571e:	2200      	movs	r2, #0
 8005720:	2117      	movs	r1, #23
 8005722:	4818      	ldr	r0, [pc, #96]	@ (8005784 <board_config_apply_motion_gpio+0xb0>)
 8005724:	f002 f89a 	bl	800785c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_2, GPIO_PIN_RESET);
 8005728:	2200      	movs	r2, #0
 800572a:	210c      	movs	r1, #12
 800572c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005730:	f002 f894 	bl	800785c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);     /* EN_X desabilitado (alto) */
 8005734:	2201      	movs	r2, #1
 8005736:	2110      	movs	r1, #16
 8005738:	4813      	ldr	r0, [pc, #76]	@ (8005788 <board_config_apply_motion_gpio+0xb4>)
 800573a:	f002 f88f 	bl	800785c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);   /* EN_Y habilitado (baixo) */
 800573e:	2200      	movs	r2, #0
 8005740:	2120      	movs	r1, #32
 8005742:	4811      	ldr	r0, [pc, #68]	@ (8005788 <board_config_apply_motion_gpio+0xb4>)
 8005744:	f002 f88a 	bl	800785c <HAL_GPIO_WritePin>
    // EN_Z (PD14) ativo em nível baixo por solicitação: inicia habilitado
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8005748:	2200      	movs	r2, #0
 800574a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800574e:	480f      	ldr	r0, [pc, #60]	@ (800578c <board_config_apply_motion_gpio+0xb8>)
 8005750:	f002 f884 	bl	800785c <HAL_GPIO_WritePin>

    /* Entradas de segurança em *pull-up* com detecção de bordas de ambos os sentidos */
    init.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005754:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8005758:	60bb      	str	r3, [r7, #8]
    init.Pull = GPIO_PULLUP;
 800575a:	2301      	movs	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
     */
#if 0
    init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;  /* PC0/PC1/PC2 como EXTI */
    HAL_GPIO_Init(GPIOC, &init);
#else
    init.Pin = GPIO_PIN_1;                             /* Somente PC1 como EXTI */
 800575e:	2302      	movs	r3, #2
 8005760:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4808      	ldr	r0, [pc, #32]	@ (8005788 <board_config_apply_motion_gpio+0xb4>)
 8005768:	f001 fdcc 	bl	8007304 <HAL_GPIO_Init>
#endif

    init.Pin = GPIO_PIN_13;                            /* EXTI do PC13 permanece */
 800576c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005770:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOC, &init);
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4804      	ldr	r0, [pc, #16]	@ (8005788 <board_config_apply_motion_gpio+0xb4>)
 8005778:	f001 fdc4 	bl	8007304 <HAL_GPIO_Init>
}
 800577c:	bf00      	nop
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	48000400 	.word	0x48000400
 8005788:	48000800 	.word	0x48000800
 800578c:	48000c00 	.word	0x48000c00

08005790 <board_config_force_encoder_quadrature>:

void board_config_force_encoder_quadrature(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
    configure_encoder_timer(&htim3);
 8005794:	4803      	ldr	r0, [pc, #12]	@ (80057a4 <board_config_force_encoder_quadrature+0x14>)
 8005796:	f7ff ff3b 	bl	8005610 <configure_encoder_timer>
    configure_encoder_timer(&htim5);
 800579a:	4803      	ldr	r0, [pc, #12]	@ (80057a8 <board_config_force_encoder_quadrature+0x18>)
 800579c:	f7ff ff38 	bl	8005610 <configure_encoder_timer>
}
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000f38 	.word	0x20000f38
 80057a8:	20000f84 	.word	0x20000f84

080057ac <board_config_apply_interrupt_priorities>:

void board_config_apply_interrupt_priorities(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
    /* EXTI de segurança: interrupções mais altas para abortar movimento */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80057b0:	2200      	movs	r2, #0
 80057b2:	2100      	movs	r1, #0
 80057b4:	2006      	movs	r0, #6
 80057b6:	f001 fa0f 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80057ba:	2006      	movs	r0, #6
 80057bc:	f001 fa38 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80057c0:	2200      	movs	r2, #0
 80057c2:	2100      	movs	r1, #0
 80057c4:	2007      	movs	r0, #7
 80057c6:	f001 fa07 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80057ca:	2007      	movs	r0, #7
 80057cc:	f001 fa30 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80057d0:	2200      	movs	r2, #0
 80057d2:	2100      	movs	r1, #0
 80057d4:	2008      	movs	r0, #8
 80057d6:	f001 f9ff 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80057da:	2008      	movs	r0, #8
 80057dc:	f001 fa28 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	2028      	movs	r0, #40	@ 0x28
 80057e6:	f001 f9f7 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80057ea:	2028      	movs	r0, #40	@ 0x28
 80057ec:	f001 fa20 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    /* Temporização do núcleo de movimento (TIM6/TIM7) e transporte SPI */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80057f0:	2200      	movs	r2, #0
 80057f2:	2101      	movs	r1, #1
 80057f4:	2036      	movs	r0, #54	@ 0x36
 80057f6:	f001 f9ef 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80057fa:	2036      	movs	r0, #54	@ 0x36
 80057fc:	f001 fa18 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 8005800:	2200      	movs	r2, #0
 8005802:	2102      	movs	r1, #2
 8005804:	200e      	movs	r0, #14
 8005806:	f001 f9e7 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800580a:	200e      	movs	r0, #14
 800580c:	f001 fa10 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8005810:	2200      	movs	r2, #0
 8005812:	2102      	movs	r1, #2
 8005814:	200f      	movs	r0, #15
 8005816:	f001 f9df 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800581a:	200f      	movs	r0, #15
 800581c:	f001 fa08 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8005820:	2200      	movs	r2, #0
 8005822:	2103      	movs	r1, #3
 8005824:	2037      	movs	r0, #55	@ 0x37
 8005826:	f001 f9d7 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800582a:	2037      	movs	r0, #55	@ 0x37
 800582c:	f001 fa00 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8005830:	2200      	movs	r2, #0
 8005832:	2104      	movs	r1, #4
 8005834:	2025      	movs	r0, #37	@ 0x25
 8005836:	f001 f9cf 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800583a:	2025      	movs	r0, #37	@ 0x25
 800583c:	f001 f9f8 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8005840:	2200      	movs	r2, #0
 8005842:	2105      	movs	r1, #5
 8005844:	2024      	movs	r0, #36	@ 0x24
 8005846:	f001 f9c7 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800584a:	2024      	movs	r0, #36	@ 0x24
 800584c:	f001 f9f0 	bl	8006c30 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 6, 0);
 8005850:	2200      	movs	r2, #0
 8005852:	2106      	movs	r1, #6
 8005854:	2018      	movs	r0, #24
 8005856:	f001 f9bf 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800585a:	2018      	movs	r0, #24
 800585c:	f001 f9e8 	bl	8006c30 <HAL_NVIC_EnableIRQ>
}
 8005860:	bf00      	nop
 8005862:	bd80      	pop	{r7, pc}

08005864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800586a:	4b10      	ldr	r3, [pc, #64]	@ (80058ac <MX_DMA_Init+0x48>)
 800586c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800586e:	4a0f      	ldr	r2, [pc, #60]	@ (80058ac <MX_DMA_Init+0x48>)
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	6493      	str	r3, [r2, #72]	@ 0x48
 8005876:	4b0d      	ldr	r3, [pc, #52]	@ (80058ac <MX_DMA_Init+0x48>)
 8005878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005882:	2200      	movs	r2, #0
 8005884:	2100      	movs	r1, #0
 8005886:	200e      	movs	r0, #14
 8005888:	f001 f9a6 	bl	8006bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800588c:	200e      	movs	r0, #14
 800588e:	f001 f9cf 	bl	8006c30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005892:	2200      	movs	r2, #0
 8005894:	2100      	movs	r1, #0
 8005896:	200f      	movs	r0, #15
 8005898:	f001 f99e 	bl	8006bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800589c:	200f      	movs	r0, #15
 800589e:	f001 f9c7 	bl	8006c30 <HAL_NVIC_EnableIRQ>

}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40021000 	.word	0x40021000

080058b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	@ 0x30
 80058b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b6:	f107 031c 	add.w	r3, r7, #28
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	605a      	str	r2, [r3, #4]
 80058c0:	609a      	str	r2, [r3, #8]
 80058c2:	60da      	str	r2, [r3, #12]
 80058c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058c6:	4b4d      	ldr	r3, [pc, #308]	@ (80059fc <MX_GPIO_Init+0x14c>)
 80058c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ca:	4a4c      	ldr	r2, [pc, #304]	@ (80059fc <MX_GPIO_Init+0x14c>)
 80058cc:	f043 0310 	orr.w	r3, r3, #16
 80058d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058d2:	4b4a      	ldr	r3, [pc, #296]	@ (80059fc <MX_GPIO_Init+0x14c>)
 80058d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058de:	4b47      	ldr	r3, [pc, #284]	@ (80059fc <MX_GPIO_Init+0x14c>)
 80058e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e2:	4a46      	ldr	r2, [pc, #280]	@ (80059fc <MX_GPIO_Init+0x14c>)
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058ea:	4b44      	ldr	r3, [pc, #272]	@ (80059fc <MX_GPIO_Init+0x14c>)
 80058ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058f6:	4b41      	ldr	r3, [pc, #260]	@ (80059fc <MX_GPIO_Init+0x14c>)
 80058f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058fa:	4a40      	ldr	r2, [pc, #256]	@ (80059fc <MX_GPIO_Init+0x14c>)
 80058fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005902:	4b3e      	ldr	r3, [pc, #248]	@ (80059fc <MX_GPIO_Init+0x14c>)
 8005904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800590e:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <MX_GPIO_Init+0x14c>)
 8005910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005912:	4a3a      	ldr	r2, [pc, #232]	@ (80059fc <MX_GPIO_Init+0x14c>)
 8005914:	f043 0301 	orr.w	r3, r3, #1
 8005918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800591a:	4b38      	ldr	r3, [pc, #224]	@ (80059fc <MX_GPIO_Init+0x14c>)
 800591c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005926:	4b35      	ldr	r3, [pc, #212]	@ (80059fc <MX_GPIO_Init+0x14c>)
 8005928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592a:	4a34      	ldr	r2, [pc, #208]	@ (80059fc <MX_GPIO_Init+0x14c>)
 800592c:	f043 0302 	orr.w	r3, r3, #2
 8005930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005932:	4b32      	ldr	r3, [pc, #200]	@ (80059fc <MX_GPIO_Init+0x14c>)
 8005934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	60bb      	str	r3, [r7, #8]
 800593c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800593e:	4b2f      	ldr	r3, [pc, #188]	@ (80059fc <MX_GPIO_Init+0x14c>)
 8005940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005942:	4a2e      	ldr	r2, [pc, #184]	@ (80059fc <MX_GPIO_Init+0x14c>)
 8005944:	f043 0308 	orr.w	r3, r3, #8
 8005948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800594a:	4b2c      	ldr	r3, [pc, #176]	@ (80059fc <MX_GPIO_Init+0x14c>)
 800594c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8005956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800595a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800595c:	2303      	movs	r3, #3
 800595e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005960:	2300      	movs	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005964:	f107 031c 	add.w	r3, r7, #28
 8005968:	4619      	mov	r1, r3
 800596a:	4825      	ldr	r0, [pc, #148]	@ (8005a00 <MX_GPIO_Init+0x150>)
 800596c:	f001 fcca 	bl	8007304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8005970:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 8005974:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005976:	2303      	movs	r3, #3
 8005978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800597e:	f107 031c 	add.w	r3, r7, #28
 8005982:	4619      	mov	r1, r3
 8005984:	481f      	ldr	r0, [pc, #124]	@ (8005a04 <MX_GPIO_Init+0x154>)
 8005986:	f001 fcbd 	bl	8007304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800598a:	2303      	movs	r3, #3
 800598c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800598e:	2303      	movs	r3, #3
 8005990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	2300      	movs	r3, #0
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005996:	f107 031c 	add.w	r3, r7, #28
 800599a:	4619      	mov	r1, r3
 800599c:	481a      	ldr	r0, [pc, #104]	@ (8005a08 <MX_GPIO_Init+0x158>)
 800599e:	f001 fcb1 	bl	8007304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 80059a2:	f649 7338 	movw	r3, #40760	@ 0x9f38
 80059a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059a8:	2303      	movs	r3, #3
 80059aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b0:	f107 031c 	add.w	r3, r7, #28
 80059b4:	4619      	mov	r1, r3
 80059b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80059ba:	f001 fca3 	bl	8007304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80059be:	f64d 7337 	movw	r3, #57143	@ 0xdf37
 80059c2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059c4:	2303      	movs	r3, #3
 80059c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059cc:	f107 031c 	add.w	r3, r7, #28
 80059d0:	4619      	mov	r1, r3
 80059d2:	480e      	ldr	r0, [pc, #56]	@ (8005a0c <MX_GPIO_Init+0x15c>)
 80059d4:	f001 fc96 	bl	8007304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80059d8:	f64f 73e4 	movw	r3, #65508	@ 0xffe4
 80059dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059de:	2303      	movs	r3, #3
 80059e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059e6:	f107 031c 	add.w	r3, r7, #28
 80059ea:	4619      	mov	r1, r3
 80059ec:	4808      	ldr	r0, [pc, #32]	@ (8005a10 <MX_GPIO_Init+0x160>)
 80059ee:	f001 fc89 	bl	8007304 <HAL_GPIO_Init>

}
 80059f2:	bf00      	nop
 80059f4:	3730      	adds	r7, #48	@ 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40021000 	.word	0x40021000
 8005a00:	48001000 	.word	0x48001000
 8005a04:	48000800 	.word	0x48000800
 8005a08:	48001c00 	.word	0x48001c00
 8005a0c:	48000400 	.word	0x48000400
 8005a10:	48000c00 	.word	0x48000c00

08005a14 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8005a18:	4b16      	ldr	r3, [pc, #88]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a1a:	4a17      	ldr	r2, [pc, #92]	@ (8005a78 <MX_LPTIM1_Init+0x64>)
 8005a1c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8005a1e:	4b15      	ldr	r3, [pc, #84]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8005a24:	4b13      	ldr	r3, [pc, #76]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8005a2a:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8005a30:	4b10      	ldr	r3, [pc, #64]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005a36:	4b0f      	ldr	r3, [pc, #60]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a3c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8005a44:	4b0b      	ldr	r3, [pc, #44]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005a50:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8005a52:	4b08      	ldr	r3, [pc, #32]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8005a58:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8005a5e:	4805      	ldr	r0, [pc, #20]	@ (8005a74 <MX_LPTIM1_Init+0x60>)
 8005a60:	f001 ff62 	bl	8007928 <HAL_LPTIM_Init>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8005a6a:	f000 f977 	bl	8005d5c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000e00 	.word	0x20000e00
 8005a78:	40007c00 	.word	0x40007c00

08005a7c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b0ac      	sub	sp, #176	@ 0xb0
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	2288      	movs	r2, #136	@ 0x88
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f009 fe53 	bl	800f748 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a25      	ldr	r2, [pc, #148]	@ (8005b3c <HAL_LPTIM_MspInit+0xc0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d143      	bne.n	8005b34 <HAL_LPTIM_MspInit+0xb8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8005aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ab0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ab6:	f107 0314 	add.w	r3, r7, #20
 8005aba:	4618      	mov	r0, r3
 8005abc:	f003 fc50 	bl	8009360 <HAL_RCCEx_PeriphCLKConfig>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8005ac6:	f000 f949 	bl	8005d5c <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005aca:	4b1d      	ldr	r3, [pc, #116]	@ (8005b40 <HAL_LPTIM_MspInit+0xc4>)
 8005acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ace:	4a1c      	ldr	r2, [pc, #112]	@ (8005b40 <HAL_LPTIM_MspInit+0xc4>)
 8005ad0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <HAL_LPTIM_MspInit+0xc4>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ada:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ae2:	4b17      	ldr	r3, [pc, #92]	@ (8005b40 <HAL_LPTIM_MspInit+0xc4>)
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae6:	4a16      	ldr	r2, [pc, #88]	@ (8005b40 <HAL_LPTIM_MspInit+0xc4>)
 8005ae8:	f043 0304 	orr.w	r3, r3, #4
 8005aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aee:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <HAL_LPTIM_MspInit+0xc4>)
 8005af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC0     ------> LPTIM1_IN1
    PC2     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8005afa:	2305      	movs	r3, #5
 8005afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b00:	2302      	movs	r3, #2
 8005b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4809      	ldr	r0, [pc, #36]	@ (8005b44 <HAL_LPTIM_MspInit+0xc8>)
 8005b20:	f001 fbf0 	bl	8007304 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8005b24:	2200      	movs	r2, #0
 8005b26:	2100      	movs	r1, #0
 8005b28:	2041      	movs	r0, #65	@ 0x41
 8005b2a:	f001 f855 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8005b2e:	2041      	movs	r0, #65	@ 0x41
 8005b30:	f001 f87e 	bl	8006c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8005b34:	bf00      	nop
 8005b36:	37b0      	adds	r7, #176	@ 0xb0
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40007c00 	.word	0x40007c00
 8005b40:	40021000 	.word	0x40021000
 8005b44:	48000800 	.word	0x48000800

08005b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b4c:	f000 fedf 	bl	800690e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b50:	f000 f82a 	bl	8005ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b54:	f7ff feac 	bl	80058b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005b58:	f7ff fe84 	bl	8005864 <MX_DMA_Init>
  MX_SPI2_Init();
 8005b5c:	f000 f922 	bl	8005da4 <MX_SPI2_Init>
  MX_TIM6_Init();
 8005b60:	f000 fbf0 	bl	8006344 <MX_TIM6_Init>
  MX_TIM5_Init();
 8005b64:	f000 fb98 	bl	8006298 <MX_TIM5_Init>
  MX_TIM7_Init();
 8005b68:	f000 fc22 	bl	80063b0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8005b6c:	f000 fb3e 	bl	80061ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8005b70:	f000 fe16 	bl	80067a0 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8005b74:	f000 fc52 	bl	800641c <MX_TIM15_Init>
  MX_LPTIM1_Init();
 8005b78:	f7ff ff4c 	bl	8005a14 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
    board_config_apply_motion_gpio();
 8005b7c:	f7ff fdaa 	bl	80056d4 <board_config_apply_motion_gpio>
    board_config_force_encoder_quadrature();
 8005b80:	f7ff fe06 	bl	8005790 <board_config_force_encoder_quadrature>
    board_config_apply_interrupt_priorities();
 8005b84:	f7ff fe12 	bl	80057ac <board_config_apply_interrupt_priorities>
    app_init();
 8005b88:	f7ff fc8c 	bl	80054a4 <app_init>
    // Inicia timers do laço de passos (TIM6) e controle/status (TIM7)
    HAL_TIM_Base_Start_IT(&htim6);
 8005b8c:	4804      	ldr	r0, [pc, #16]	@ (8005ba0 <main+0x58>)
 8005b8e:	f005 fbe1 	bl	800b354 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8005b92:	4804      	ldr	r0, [pc, #16]	@ (8005ba4 <main+0x5c>)
 8005b94:	f005 fbde 	bl	800b354 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //printf("oioioioioioi2\r\n");
    //HAL_Delay(1000);
    app_poll();
 8005b98:	f7ff fcba 	bl	8005510 <app_poll>
 8005b9c:	e7fc      	b.n	8005b98 <main+0x50>
 8005b9e:	bf00      	nop
 8005ba0:	20000fd0 	.word	0x20000fd0
 8005ba4:	2000101c 	.word	0x2000101c

08005ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b096      	sub	sp, #88	@ 0x58
 8005bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	2244      	movs	r2, #68	@ 0x44
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f009 fdc6 	bl	800f748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	605a      	str	r2, [r3, #4]
 8005bc4:	609a      	str	r2, [r3, #8]
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005bca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005bce:	f002 fb9f 	bl	8008310 <HAL_PWREx_ControlVoltageScaling>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005bd8:	f000 f8c0 	bl	8005d5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005bdc:	2310      	movs	r3, #16
 8005bde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005be0:	2301      	movs	r3, #1
 8005be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005be8:	2360      	movs	r3, #96	@ 0x60
 8005bea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005bec:	2302      	movs	r3, #2
 8005bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005bf8:	2328      	movs	r3, #40	@ 0x28
 8005bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005bfc:	2307      	movs	r3, #7
 8005bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005c00:	2302      	movs	r3, #2
 8005c02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005c04:	2302      	movs	r3, #2
 8005c06:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c08:	f107 0314 	add.w	r3, r7, #20
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f002 fbe1 	bl	80083d4 <HAL_RCC_OscConfig>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8005c18:	f000 f8a0 	bl	8005d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c1c:	230f      	movs	r3, #15
 8005c1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c20:	2303      	movs	r3, #3
 8005c22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005c32:	463b      	mov	r3, r7
 8005c34:	2104      	movs	r1, #4
 8005c36:	4618      	mov	r0, r3
 8005c38:	f003 f8ce 	bl	8008dd8 <HAL_RCC_ClockConfig>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8005c42:	f000 f88b 	bl	8005d5c <Error_Handler>
  }
}
 8005c46:	bf00      	nop
 8005c48:	3758      	adds	r7, #88	@ 0x58
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
    app_spi_isr_txrx_done(hspi);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff fc98 	bl	800558c <app_spi_isr_txrx_done>
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
    if (hspi == NULL) return;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d013      	beq.n	8005c9a <HAL_SPI_ErrorCallback+0x36>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca8 <HAL_SPI_ErrorCallback+0x44>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d110      	bne.n	8005c9e <HAL_SPI_ErrorCallback+0x3a>

    g_spi_last_error = hspi->ErrorCode;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c80:	4a0a      	ldr	r2, [pc, #40]	@ (8005cac <HAL_SPI_ErrorCallback+0x48>)
 8005c82:	6013      	str	r3, [r2, #0]
    g_spi_error_count++;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <HAL_SPI_ErrorCallback+0x4c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	4a09      	ldr	r2, [pc, #36]	@ (8005cb0 <HAL_SPI_ErrorCallback+0x4c>)
 8005c8c:	6013      	str	r3, [r2, #0]

    /* Indicação visual simples para diagnóstico */
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8005c8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005c92:	4808      	ldr	r0, [pc, #32]	@ (8005cb4 <HAL_SPI_ErrorCallback+0x50>)
 8005c94:	f001 fe0e 	bl	80078b4 <HAL_GPIO_TogglePin>
 8005c98:	e002      	b.n	8005ca0 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi == NULL) return;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_SPI_ErrorCallback+0x3c>
    if (hspi->Instance != APP_SPI_INSTANCE) return;
 8005c9e:	bf00      	nop
}
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40003800 	.word	0x40003800
 8005cac:	20000e3c 	.word	0x20000e3c
 8005cb0:	20000e38 	.word	0x20000e38
 8005cb4:	48000400 	.word	0x48000400

08005cb8 <HAL_GPIO_EXTI_Callback>:
/* Botões de segurança (EXTI):
 * - B1 (PC13): E-STOP imediato (pressionado = nível baixo)
 * - B2 (PC0): Release/recover + funções extras do demo (pressionado = baixo)
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d019      	beq.n	8005cfc <HAL_GPIO_EXTI_Callback+0x44>
 8005cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ccc:	d135      	bne.n	8005d3a <HAL_GPIO_EXTI_Callback+0x82>
    case GPIO_PIN_13: /* B1 - E-STOP */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8005cce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005cd2:	481e      	ldr	r0, [pc, #120]	@ (8005d4c <HAL_GPIO_EXTI_Callback+0x94>)
 8005cd4:	f001 fda2 	bl	800781c <HAL_GPIO_ReadPin>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d12f      	bne.n	8005d3e <HAL_GPIO_EXTI_Callback+0x86>
            /* Pressionado: aciona E-STOP e para tudo agora */
            safety_estop_assert();
 8005cde:	f7ff f9b3 	bl	8005048 <safety_estop_assert>
            motion_emergency_stop();
 8005ce2:	f7ff f897 	bl	8004e14 <motion_emergency_stop>
            /* Opcionalmente interrompe os timers para cessar qualquer atividade em ISR */
            HAL_TIM_Base_Stop_IT(&htim6);
 8005ce6:	481a      	ldr	r0, [pc, #104]	@ (8005d50 <HAL_GPIO_EXTI_Callback+0x98>)
 8005ce8:	f005 fbe8 	bl	800b4bc <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim7);
 8005cec:	4819      	ldr	r0, [pc, #100]	@ (8005d54 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005cee:	f005 fbe5 	bl	800b4bc <HAL_TIM_Base_Stop_IT>
            /* Se houver PWM em TIM15 (LED/auxiliar), pare também */
            HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4818      	ldr	r0, [pc, #96]	@ (8005d58 <HAL_GPIO_EXTI_Callback+0xa0>)
 8005cf6:	f005 ff25 	bl	800bb44 <HAL_TIM_PWM_Stop>
        }
        break;
 8005cfa:	e020      	b.n	8005d3e <HAL_GPIO_EXTI_Callback+0x86>
    case GPIO_PIN_0:  /* B2 - Release/Resume + demo speed step */
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	4813      	ldr	r0, [pc, #76]	@ (8005d4c <HAL_GPIO_EXTI_Callback+0x94>)
 8005d00:	f001 fd8c 	bl	800781c <HAL_GPIO_ReadPin>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d11b      	bne.n	8005d42 <HAL_GPIO_EXTI_Callback+0x8a>
            /* Libera segurança */
            safety_estop_release();
 8005d0a:	f7ff f9bd 	bl	8005088 <safety_estop_release>
            /* Garante que os timers base voltem a rodar */
            HAL_TIM_Base_Start_IT(&htim6);
 8005d0e:	4810      	ldr	r0, [pc, #64]	@ (8005d50 <HAL_GPIO_EXTI_Callback+0x98>)
 8005d10:	f005 fb20 	bl	800b354 <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim7);
 8005d14:	480f      	ldr	r0, [pc, #60]	@ (8005d54 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005d16:	f005 fb1d 	bl	800b354 <HAL_TIM_Base_Start_IT>
            /* Reativa movimentos conforme contexto */
            if (motion_demo_is_active()) {
 8005d1a:	f7ff f8b5 	bl	8004e88 <motion_demo_is_active>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_GPIO_EXTI_Callback+0x72>
                /* Cicla velocidade no modo demo contínuo */
                motion_demo_cycle_speed();
 8005d24:	f7ff f8c2 	bl	8004eac <motion_demo_cycle_speed>
                motion_demo_set_continuous(1);
                /* Se usa PWM em TIM15 para indicação, retome */
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
            }
        }
        break;
 8005d28:	e00b      	b.n	8005d42 <HAL_GPIO_EXTI_Callback+0x8a>
                motion_demo_set_continuous(1);
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	f7fe ff9e 	bl	8004c6c <motion_demo_set_continuous>
                HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8005d30:	2100      	movs	r1, #0
 8005d32:	4809      	ldr	r0, [pc, #36]	@ (8005d58 <HAL_GPIO_EXTI_Callback+0xa0>)
 8005d34:	f005 fd56 	bl	800b7e4 <HAL_TIM_PWM_Start>
        break;
 8005d38:	e003      	b.n	8005d42 <HAL_GPIO_EXTI_Callback+0x8a>
    case GPIO_PIN_1:
    case GPIO_PIN_2:
    default:
        /* Reservado para sensores PROX/limites; sem ação específica aqui */
        break;
 8005d3a:	bf00      	nop
 8005d3c:	e002      	b.n	8005d44 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 8005d3e:	bf00      	nop
 8005d40:	e000      	b.n	8005d44 <HAL_GPIO_EXTI_Callback+0x8c>
        break;
 8005d42:	bf00      	nop
    }
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	48000800 	.word	0x48000800
 8005d50:	20000fd0 	.word	0x20000fd0
 8005d54:	2000101c 	.word	0x2000101c
 8005d58:	20001068 	.word	0x20001068

08005d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
#if LOG_ENABLE
	log_event_ids(LOG_SVC_APP, LOG_STATE_ERROR, -1);
 8005d60:	f04f 32ff 	mov.w	r2, #4294967295
 8005d64:	2164      	movs	r1, #100	@ 0x64
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7fc fbb2 	bl	80024d0 <log_event_ids>
	log_event_names("app", "error", "Error_Handler");
 8005d6c:	4a04      	ldr	r2, [pc, #16]	@ (8005d80 <Error_Handler+0x24>)
 8005d6e:	4905      	ldr	r1, [pc, #20]	@ (8005d84 <Error_Handler+0x28>)
 8005d70:	4805      	ldr	r0, [pc, #20]	@ (8005d88 <Error_Handler+0x2c>)
 8005d72:	f7fc fbc1 	bl	80024f8 <log_event_names>
  __ASM volatile ("cpsid i" : : : "memory");
 8005d76:	b672      	cpsid	i
}
 8005d78:	bf00      	nop
#endif
	__disable_irq();
	while (1) {
 8005d7a:	bf00      	nop
 8005d7c:	e7fd      	b.n	8005d7a <Error_Handler+0x1e>
 8005d7e:	bf00      	nop
 8005d80:	08010a38 	.word	0x08010a38
 8005d84:	08010a48 	.word	0x08010a48
 8005d88:	08010a50 	.word	0x08010a50

08005d8c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005da8:	4b18      	ldr	r3, [pc, #96]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005daa:	4a19      	ldr	r2, [pc, #100]	@ (8005e10 <MX_SPI2_Init+0x6c>)
 8005dac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8005dae:	4b17      	ldr	r3, [pc, #92]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005db4:	4b15      	ldr	r3, [pc, #84]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005dba:	4b14      	ldr	r3, [pc, #80]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005dbc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005dc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005dc2:	4b12      	ldr	r3, [pc, #72]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005dc8:	4b10      	ldr	r3, [pc, #64]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8005dce:	4b0f      	ldr	r3, [pc, #60]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005dda:	4b0c      	ldr	r3, [pc, #48]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de0:	4b0a      	ldr	r3, [pc, #40]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005de6:	4b09      	ldr	r3, [pc, #36]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005de8:	2207      	movs	r2, #7
 8005dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005dec:	4b07      	ldr	r3, [pc, #28]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005df2:	4b06      	ldr	r3, [pc, #24]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005df8:	4804      	ldr	r0, [pc, #16]	@ (8005e0c <MX_SPI2_Init+0x68>)
 8005dfa:	f004 fa39 	bl	800a270 <HAL_SPI_Init>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8005e04:	f7ff ffaa 	bl	8005d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005e08:	bf00      	nop
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000e40 	.word	0x20000e40
 8005e10:	40003800 	.word	0x40003800

08005e14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	@ 0x28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e1c:	f107 0314 	add.w	r3, r7, #20
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	609a      	str	r2, [r3, #8]
 8005e28:	60da      	str	r2, [r3, #12]
 8005e2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a44      	ldr	r2, [pc, #272]	@ (8005f44 <HAL_SPI_MspInit+0x130>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	f040 8082 	bne.w	8005f3c <HAL_SPI_MspInit+0x128>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005e38:	4b43      	ldr	r3, [pc, #268]	@ (8005f48 <HAL_SPI_MspInit+0x134>)
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3c:	4a42      	ldr	r2, [pc, #264]	@ (8005f48 <HAL_SPI_MspInit+0x134>)
 8005e3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e44:	4b40      	ldr	r3, [pc, #256]	@ (8005f48 <HAL_SPI_MspInit+0x134>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e50:	4b3d      	ldr	r3, [pc, #244]	@ (8005f48 <HAL_SPI_MspInit+0x134>)
 8005e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e54:	4a3c      	ldr	r2, [pc, #240]	@ (8005f48 <HAL_SPI_MspInit+0x134>)
 8005e56:	f043 0308 	orr.w	r3, r3, #8
 8005e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f48 <HAL_SPI_MspInit+0x134>)
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
    PD0     ------> SPI2_NSS
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8005e68:	231b      	movs	r3, #27
 8005e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e74:	2303      	movs	r3, #3
 8005e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005e78:	2305      	movs	r3, #5
 8005e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e7c:	f107 0314 	add.w	r3, r7, #20
 8005e80:	4619      	mov	r1, r3
 8005e82:	4832      	ldr	r0, [pc, #200]	@ (8005f4c <HAL_SPI_MspInit+0x138>)
 8005e84:	f001 fa3e 	bl	8007304 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005e88:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005e8a:	4a32      	ldr	r2, [pc, #200]	@ (8005f54 <HAL_SPI_MspInit+0x140>)
 8005e8c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8005e8e:	4b30      	ldr	r3, [pc, #192]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005e90:	2201      	movs	r2, #1
 8005e92:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e94:	4b2e      	ldr	r3, [pc, #184]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005ea2:	2280      	movs	r2, #128	@ 0x80
 8005ea4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eac:	4b28      	ldr	r3, [pc, #160]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005eb2:	4b27      	ldr	r3, [pc, #156]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005eb8:	4b25      	ldr	r3, [pc, #148]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005ebe:	4824      	ldr	r0, [pc, #144]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005ec0:	f000 feda 	bl	8006c78 <HAL_DMA_Init>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8005eca:	f7ff ff47 	bl	8005d5c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005ed2:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8005f50 <HAL_SPI_MspInit+0x13c>)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8005eda:	4b1f      	ldr	r3, [pc, #124]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005edc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f5c <HAL_SPI_MspInit+0x148>)
 8005ede:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8005ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005ee8:	2210      	movs	r2, #16
 8005eea:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eec:	4b1a      	ldr	r3, [pc, #104]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ef2:	4b19      	ldr	r3, [pc, #100]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005ef4:	2280      	movs	r2, #128	@ 0x80
 8005ef6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ef8:	4b17      	ldr	r3, [pc, #92]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005efe:	4b16      	ldr	r3, [pc, #88]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8005f04:	4b14      	ldr	r3, [pc, #80]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005f06:	2220      	movs	r2, #32
 8005f08:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f0a:	4b13      	ldr	r3, [pc, #76]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005f10:	4811      	ldr	r0, [pc, #68]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005f12:	f000 feb1 	bl	8006c78 <HAL_DMA_Init>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8005f1c:	f7ff ff1e 	bl	8005d5c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a0d      	ldr	r2, [pc, #52]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005f24:	655a      	str	r2, [r3, #84]	@ 0x54
 8005f26:	4a0c      	ldr	r2, [pc, #48]	@ (8005f58 <HAL_SPI_MspInit+0x144>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	2024      	movs	r0, #36	@ 0x24
 8005f32:	f000 fe51 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005f36:	2024      	movs	r0, #36	@ 0x24
 8005f38:	f000 fe7a 	bl	8006c30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3728      	adds	r7, #40	@ 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40003800 	.word	0x40003800
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	48000c00 	.word	0x48000c00
 8005f50:	20000ea4 	.word	0x20000ea4
 8005f54:	40020044 	.word	0x40020044
 8005f58:	20000eec 	.word	0x20000eec
 8005f5c:	40020058 	.word	0x40020058

08005f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f66:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <HAL_MspInit+0x44>)
 8005f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8005fa4 <HAL_MspInit+0x44>)
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f72:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <HAL_MspInit+0x44>)
 8005f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	4b09      	ldr	r3, [pc, #36]	@ (8005fa4 <HAL_MspInit+0x44>)
 8005f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f82:	4a08      	ldr	r2, [pc, #32]	@ (8005fa4 <HAL_MspInit+0x44>)
 8005f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f8a:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <HAL_MspInit+0x44>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40021000 	.word	0x40021000

08005fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <NMI_Handler+0x4>

08005fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <HardFault_Handler+0x4>

08005fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fbc:	bf00      	nop
 8005fbe:	e7fd      	b.n	8005fbc <MemManage_Handler+0x4>

08005fc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <BusFault_Handler+0x4>

08005fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fcc:	bf00      	nop
 8005fce:	e7fd      	b.n	8005fcc <UsageFault_Handler+0x4>

08005fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fe2:	bf00      	nop
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ffe:	f000 fcdb 	bl	80069b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006002:	bf00      	nop
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800600c:	4802      	ldr	r0, [pc, #8]	@ (8006018 <DMA1_Channel4_IRQHandler+0x10>)
 800600e:	f001 f89a 	bl	8007146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006012:	bf00      	nop
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20000ea4 	.word	0x20000ea4

0800601c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006020:	4802      	ldr	r0, [pc, #8]	@ (800602c <DMA1_Channel5_IRQHandler+0x10>)
 8006022:	f001 f890 	bl	8007146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006026:	bf00      	nop
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000eec 	.word	0x20000eec

08006030 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006034:	4802      	ldr	r0, [pc, #8]	@ (8006040 <SPI2_IRQHandler+0x10>)
 8006036:	f004 fcad 	bl	800a994 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800603a:	bf00      	nop
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000e40 	.word	0x20000e40

08006044 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006048:	4802      	ldr	r0, [pc, #8]	@ (8006054 <TIM6_DAC_IRQHandler+0x10>)
 800604a:	f006 f92f 	bl	800c2ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800604e:	bf00      	nop
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000fd0 	.word	0x20000fd0

08006058 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800605c:	4802      	ldr	r0, [pc, #8]	@ (8006068 <TIM7_IRQHandler+0x10>)
 800605e:	f006 f925 	bl	800c2ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006062:	bf00      	nop
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	2000101c 	.word	0x2000101c

0800606c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8006070:	4802      	ldr	r0, [pc, #8]	@ (800607c <LPTIM1_IRQHandler+0x10>)
 8006072:	f001 ff1f 	bl	8007eb4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8006076:	bf00      	nop
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000e00 	.word	0x20000e00

08006080 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006084:	2001      	movs	r0, #1
 8006086:	f001 fc37 	bl	80078f8 <HAL_GPIO_EXTI_IRQHandler>
}
 800608a:	bf00      	nop
 800608c:	bd80      	pop	{r7, pc}

0800608e <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006092:	2002      	movs	r0, #2
 8006094:	f001 fc30 	bl	80078f8 <HAL_GPIO_EXTI_IRQHandler>
}
 8006098:	bf00      	nop
 800609a:	bd80      	pop	{r7, pc}

0800609c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80060a0:	2004      	movs	r0, #4
 80060a2:	f001 fc29 	bl	80078f8 <HAL_GPIO_EXTI_IRQHandler>
}
 80060a6:	bf00      	nop
 80060a8:	bd80      	pop	{r7, pc}

080060aa <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80060ae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80060b2:	f001 fc21 	bl	80078f8 <HAL_GPIO_EXTI_IRQHandler>
}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}

080060ba <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e00a      	b.n	80060e2 <_read+0x28>
		*ptr++ = __io_getchar();
 80060cc:	f3af 8000 	nop.w
 80060d0:	4601      	mov	r1, r0
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	60ba      	str	r2, [r7, #8]
 80060d8:	b2ca      	uxtb	r2, r1
 80060da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	3301      	adds	r3, #1
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	dbf0      	blt.n	80060cc <_read+0x12>
	}

	return len;
 80060ea:	687b      	ldr	r3, [r7, #4]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <_fstat>:

int _fstat(int file, struct stat *st) {
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800611c:	605a      	str	r2, [r3, #4]
	return 0;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <_isatty>:

int _isatty(int file) {
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8006134:	2301      	movs	r3, #1
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8006164:	4a14      	ldr	r2, [pc, #80]	@ (80061b8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8006166:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8006170:	4b13      	ldr	r3, [pc, #76]	@ (80061c0 <_sbrk+0x64>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8006178:	4b11      	ldr	r3, [pc, #68]	@ (80061c0 <_sbrk+0x64>)
 800617a:	4a12      	ldr	r2, [pc, #72]	@ (80061c4 <_sbrk+0x68>)
 800617c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800617e:	4b10      	ldr	r3, [pc, #64]	@ (80061c0 <_sbrk+0x64>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	429a      	cmp	r2, r3
 800618a:	d207      	bcs.n	800619c <_sbrk+0x40>
		errno = ENOMEM;
 800618c:	f009 fb3a 	bl	800f804 <__errno>
 8006190:	4603      	mov	r3, r0
 8006192:	220c      	movs	r2, #12
 8006194:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8006196:	f04f 33ff 	mov.w	r3, #4294967295
 800619a:	e009      	b.n	80061b0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800619c:	4b08      	ldr	r3, [pc, #32]	@ (80061c0 <_sbrk+0x64>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80061a2:	4b07      	ldr	r3, [pc, #28]	@ (80061c0 <_sbrk+0x64>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4413      	add	r3, r2
 80061aa:	4a05      	ldr	r2, [pc, #20]	@ (80061c0 <_sbrk+0x64>)
 80061ac:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80061ae:	68fb      	ldr	r3, [r7, #12]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20018000 	.word	0x20018000
 80061bc:	00000400 	.word	0x00000400
 80061c0:	20000f34 	.word	0x20000f34
 80061c4:	20001290 	.word	0x20001290

080061c8 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <SystemInit+0x20>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d2:	4a05      	ldr	r2, [pc, #20]	@ (80061e8 <SystemInit+0x20>)
 80061d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	e000ed00 	.word	0xe000ed00

080061ec <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	@ 0x30
 80061f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80061f2:	f107 030c 	add.w	r3, r7, #12
 80061f6:	2224      	movs	r2, #36	@ 0x24
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f009 faa4 	bl	800f748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006200:	463b      	mov	r3, r7
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	605a      	str	r2, [r3, #4]
 8006208:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800620a:	4b21      	ldr	r3, [pc, #132]	@ (8006290 <MX_TIM3_Init+0xa4>)
 800620c:	4a21      	ldr	r2, [pc, #132]	@ (8006294 <MX_TIM3_Init+0xa8>)
 800620e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006210:	4b1f      	ldr	r3, [pc, #124]	@ (8006290 <MX_TIM3_Init+0xa4>)
 8006212:	2200      	movs	r2, #0
 8006214:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006216:	4b1e      	ldr	r3, [pc, #120]	@ (8006290 <MX_TIM3_Init+0xa4>)
 8006218:	2200      	movs	r2, #0
 800621a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800621c:	4b1c      	ldr	r3, [pc, #112]	@ (8006290 <MX_TIM3_Init+0xa4>)
 800621e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006222:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006224:	4b1a      	ldr	r3, [pc, #104]	@ (8006290 <MX_TIM3_Init+0xa4>)
 8006226:	2200      	movs	r2, #0
 8006228:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800622a:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <MX_TIM3_Init+0xa4>)
 800622c:	2200      	movs	r2, #0
 800622e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006230:	2301      	movs	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800623c:	2300      	movs	r3, #0
 800623e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006244:	2300      	movs	r3, #0
 8006246:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006248:	2301      	movs	r3, #1
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800624c:	2300      	movs	r3, #0
 800624e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006254:	f107 030c 	add.w	r3, r7, #12
 8006258:	4619      	mov	r1, r3
 800625a:	480d      	ldr	r0, [pc, #52]	@ (8006290 <MX_TIM3_Init+0xa4>)
 800625c:	f005 fda6 	bl	800bdac <HAL_TIM_Encoder_Init>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8006266:	f7ff fd79 	bl	8005d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800626a:	2300      	movs	r3, #0
 800626c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006272:	463b      	mov	r3, r7
 8006274:	4619      	mov	r1, r3
 8006276:	4806      	ldr	r0, [pc, #24]	@ (8006290 <MX_TIM3_Init+0xa4>)
 8006278:	f007 fc7c 	bl	800db74 <HAL_TIMEx_MasterConfigSynchronization>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8006282:	f7ff fd6b 	bl	8005d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006286:	bf00      	nop
 8006288:	3730      	adds	r7, #48	@ 0x30
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000f38 	.word	0x20000f38
 8006294:	40000400 	.word	0x40000400

08006298 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08c      	sub	sp, #48	@ 0x30
 800629c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	2224      	movs	r2, #36	@ 0x24
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f009 fa4e 	bl	800f748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062ac:	463b      	mov	r3, r7
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	605a      	str	r2, [r3, #4]
 80062b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80062b6:	4b21      	ldr	r3, [pc, #132]	@ (800633c <MX_TIM5_Init+0xa4>)
 80062b8:	4a21      	ldr	r2, [pc, #132]	@ (8006340 <MX_TIM5_Init+0xa8>)
 80062ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80062bc:	4b1f      	ldr	r3, [pc, #124]	@ (800633c <MX_TIM5_Init+0xa4>)
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062c2:	4b1e      	ldr	r3, [pc, #120]	@ (800633c <MX_TIM5_Init+0xa4>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80062c8:	4b1c      	ldr	r3, [pc, #112]	@ (800633c <MX_TIM5_Init+0xa4>)
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062d0:	4b1a      	ldr	r3, [pc, #104]	@ (800633c <MX_TIM5_Init+0xa4>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062d6:	4b19      	ldr	r3, [pc, #100]	@ (800633c <MX_TIM5_Init+0xa4>)
 80062d8:	2200      	movs	r2, #0
 80062da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80062dc:	2301      	movs	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80062e0:	2300      	movs	r3, #0
 80062e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80062f0:	2300      	movs	r3, #0
 80062f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80062f4:	2301      	movs	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80062f8:	2300      	movs	r3, #0
 80062fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8006300:	f107 030c 	add.w	r3, r7, #12
 8006304:	4619      	mov	r1, r3
 8006306:	480d      	ldr	r0, [pc, #52]	@ (800633c <MX_TIM5_Init+0xa4>)
 8006308:	f005 fd50 	bl	800bdac <HAL_TIM_Encoder_Init>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8006312:	f7ff fd23 	bl	8005d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006316:	2300      	movs	r3, #0
 8006318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800631e:	463b      	mov	r3, r7
 8006320:	4619      	mov	r1, r3
 8006322:	4806      	ldr	r0, [pc, #24]	@ (800633c <MX_TIM5_Init+0xa4>)
 8006324:	f007 fc26 	bl	800db74 <HAL_TIMEx_MasterConfigSynchronization>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800632e:	f7ff fd15 	bl	8005d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006332:	bf00      	nop
 8006334:	3730      	adds	r7, #48	@ 0x30
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000f84 	.word	0x20000f84
 8006340:	40000c00 	.word	0x40000c00

08006344 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006354:	4b14      	ldr	r3, [pc, #80]	@ (80063a8 <MX_TIM6_Init+0x64>)
 8006356:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <MX_TIM6_Init+0x68>)
 8006358:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800635a:	4b13      	ldr	r3, [pc, #76]	@ (80063a8 <MX_TIM6_Init+0x64>)
 800635c:	224f      	movs	r2, #79	@ 0x4f
 800635e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006360:	4b11      	ldr	r3, [pc, #68]	@ (80063a8 <MX_TIM6_Init+0x64>)
 8006362:	2200      	movs	r2, #0
 8006364:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8006366:	4b10      	ldr	r3, [pc, #64]	@ (80063a8 <MX_TIM6_Init+0x64>)
 8006368:	2213      	movs	r2, #19
 800636a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800636c:	4b0e      	ldr	r3, [pc, #56]	@ (80063a8 <MX_TIM6_Init+0x64>)
 800636e:	2280      	movs	r2, #128	@ 0x80
 8006370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006372:	480d      	ldr	r0, [pc, #52]	@ (80063a8 <MX_TIM6_Init+0x64>)
 8006374:	f004 fee4 	bl	800b140 <HAL_TIM_Base_Init>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800637e:	f7ff fced 	bl	8005d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006382:	2320      	movs	r3, #32
 8006384:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	4619      	mov	r1, r3
 800638e:	4806      	ldr	r0, [pc, #24]	@ (80063a8 <MX_TIM6_Init+0x64>)
 8006390:	f007 fbf0 	bl	800db74 <HAL_TIMEx_MasterConfigSynchronization>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800639a:	f7ff fcdf 	bl	8005d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000fd0 	.word	0x20000fd0
 80063ac:	40001000 	.word	0x40001000

080063b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80063c0:	4b14      	ldr	r3, [pc, #80]	@ (8006414 <MX_TIM7_Init+0x64>)
 80063c2:	4a15      	ldr	r2, [pc, #84]	@ (8006418 <MX_TIM7_Init+0x68>)
 80063c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80063c6:	4b13      	ldr	r3, [pc, #76]	@ (8006414 <MX_TIM7_Init+0x64>)
 80063c8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80063cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063ce:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <MX_TIM7_Init+0x64>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80063d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006414 <MX_TIM7_Init+0x64>)
 80063d6:	2209      	movs	r2, #9
 80063d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063da:	4b0e      	ldr	r3, [pc, #56]	@ (8006414 <MX_TIM7_Init+0x64>)
 80063dc:	2280      	movs	r2, #128	@ 0x80
 80063de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80063e0:	480c      	ldr	r0, [pc, #48]	@ (8006414 <MX_TIM7_Init+0x64>)
 80063e2:	f004 fead 	bl	800b140 <HAL_TIM_Base_Init>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80063ec:	f7ff fcb6 	bl	8005d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063f0:	2300      	movs	r3, #0
 80063f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	4805      	ldr	r0, [pc, #20]	@ (8006414 <MX_TIM7_Init+0x64>)
 80063fe:	f007 fbb9 	bl	800db74 <HAL_TIMEx_MasterConfigSynchronization>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006408:	f7ff fca8 	bl	8005d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	2000101c 	.word	0x2000101c
 8006418:	40001400 	.word	0x40001400

0800641c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b09a      	sub	sp, #104	@ 0x68
 8006420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006422:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	605a      	str	r2, [r3, #4]
 800642c:	609a      	str	r2, [r3, #8]
 800642e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006430:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	605a      	str	r2, [r3, #4]
 800643a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800643c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	605a      	str	r2, [r3, #4]
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	60da      	str	r2, [r3, #12]
 800644a:	611a      	str	r2, [r3, #16]
 800644c:	615a      	str	r2, [r3, #20]
 800644e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	222c      	movs	r2, #44	@ 0x2c
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f009 f976 	bl	800f748 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800645c:	4b3e      	ldr	r3, [pc, #248]	@ (8006558 <MX_TIM15_Init+0x13c>)
 800645e:	4a3f      	ldr	r2, [pc, #252]	@ (800655c <MX_TIM15_Init+0x140>)
 8006460:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8191;
 8006462:	4b3d      	ldr	r3, [pc, #244]	@ (8006558 <MX_TIM15_Init+0x13c>)
 8006464:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8006468:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800646a:	4b3b      	ldr	r3, [pc, #236]	@ (8006558 <MX_TIM15_Init+0x13c>)
 800646c:	2200      	movs	r2, #0
 800646e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8006470:	4b39      	ldr	r3, [pc, #228]	@ (8006558 <MX_TIM15_Init+0x13c>)
 8006472:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006476:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006478:	4b37      	ldr	r3, [pc, #220]	@ (8006558 <MX_TIM15_Init+0x13c>)
 800647a:	2200      	movs	r2, #0
 800647c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800647e:	4b36      	ldr	r3, [pc, #216]	@ (8006558 <MX_TIM15_Init+0x13c>)
 8006480:	2200      	movs	r2, #0
 8006482:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006484:	4b34      	ldr	r3, [pc, #208]	@ (8006558 <MX_TIM15_Init+0x13c>)
 8006486:	2200      	movs	r2, #0
 8006488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800648a:	4833      	ldr	r0, [pc, #204]	@ (8006558 <MX_TIM15_Init+0x13c>)
 800648c:	f004 fe58 	bl	800b140 <HAL_TIM_Base_Init>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8006496:	f7ff fc61 	bl	8005d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800649a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800649e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80064a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80064a4:	4619      	mov	r1, r3
 80064a6:	482c      	ldr	r0, [pc, #176]	@ (8006558 <MX_TIM15_Init+0x13c>)
 80064a8:	f006 fada 	bl	800ca60 <HAL_TIM_ConfigClockSource>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 80064b2:	f7ff fc53 	bl	8005d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80064b6:	4828      	ldr	r0, [pc, #160]	@ (8006558 <MX_TIM15_Init+0x13c>)
 80064b8:	f005 f880 	bl	800b5bc <HAL_TIM_PWM_Init>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 80064c2:	f7ff fc4b 	bl	8005d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064c6:	2300      	movs	r3, #0
 80064c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80064ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80064d2:	4619      	mov	r1, r3
 80064d4:	4820      	ldr	r0, [pc, #128]	@ (8006558 <MX_TIM15_Init+0x13c>)
 80064d6:	f007 fb4d 	bl	800db74 <HAL_TIMEx_MasterConfigSynchronization>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 80064e0:	f7ff fc3c 	bl	8005d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064e4:	2360      	movs	r3, #96	@ 0x60
 80064e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064ec:	2300      	movs	r3, #0
 80064ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80064f0:	2300      	movs	r3, #0
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064f8:	2300      	movs	r3, #0
 80064fa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064fc:	2300      	movs	r3, #0
 80064fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006500:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006504:	2200      	movs	r2, #0
 8006506:	4619      	mov	r1, r3
 8006508:	4813      	ldr	r0, [pc, #76]	@ (8006558 <MX_TIM15_Init+0x13c>)
 800650a:	f005 ffd7 	bl	800c4bc <HAL_TIM_PWM_ConfigChannel>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8006514:	f7ff fc22 	bl	8005d5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006518:	2300      	movs	r3, #0
 800651a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800651c:	2300      	movs	r3, #0
 800651e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800652c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006530:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006532:	2300      	movs	r3, #0
 8006534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	4619      	mov	r1, r3
 800653a:	4807      	ldr	r0, [pc, #28]	@ (8006558 <MX_TIM15_Init+0x13c>)
 800653c:	f007 fc70 	bl	800de20 <HAL_TIMEx_ConfigBreakDeadTime>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 8006546:	f7ff fc09 	bl	8005d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800654a:	4803      	ldr	r0, [pc, #12]	@ (8006558 <MX_TIM15_Init+0x13c>)
 800654c:	f000 f8d2 	bl	80066f4 <HAL_TIM_MspPostInit>

}
 8006550:	bf00      	nop
 8006552:	3768      	adds	r7, #104	@ 0x68
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20001068 	.word	0x20001068
 800655c:	40014000 	.word	0x40014000

08006560 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	@ 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006568:	f107 031c 	add.w	r3, r7, #28
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	609a      	str	r2, [r3, #8]
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a2f      	ldr	r2, [pc, #188]	@ (800663c <HAL_TIM_Encoder_MspInit+0xdc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d129      	bne.n	80065d6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006582:	4b2f      	ldr	r3, [pc, #188]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006586:	4a2e      	ldr	r2, [pc, #184]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006588:	f043 0302 	orr.w	r3, r3, #2
 800658c:	6593      	str	r3, [r2, #88]	@ 0x58
 800658e:	4b2c      	ldr	r3, [pc, #176]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800659a:	4b29      	ldr	r3, [pc, #164]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 800659c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659e:	4a28      	ldr	r2, [pc, #160]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065a6:	4b26      	ldr	r3, [pc, #152]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80065b2:	23c0      	movs	r3, #192	@ 0xc0
 80065b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b6:	2302      	movs	r3, #2
 80065b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065be:	2300      	movs	r3, #0
 80065c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80065c2:	2302      	movs	r3, #2
 80065c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065c6:	f107 031c 	add.w	r3, r7, #28
 80065ca:	4619      	mov	r1, r3
 80065cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80065d0:	f000 fe98 	bl	8007304 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80065d4:	e02d      	b.n	8006632 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM5)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1a      	ldr	r2, [pc, #104]	@ (8006644 <HAL_TIM_Encoder_MspInit+0xe4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d128      	bne.n	8006632 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80065e0:	4b17      	ldr	r3, [pc, #92]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e4:	4a16      	ldr	r2, [pc, #88]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065e6:	f043 0308 	orr.w	r3, r3, #8
 80065ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ec:	4b14      	ldr	r3, [pc, #80]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065f8:	4b11      	ldr	r3, [pc, #68]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065fc:	4a10      	ldr	r2, [pc, #64]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006604:	4b0e      	ldr	r3, [pc, #56]	@ (8006640 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006610:	2303      	movs	r3, #3
 8006612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006614:	2302      	movs	r3, #2
 8006616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006618:	2300      	movs	r3, #0
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800661c:	2300      	movs	r3, #0
 800661e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006620:	2302      	movs	r3, #2
 8006622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006624:	f107 031c 	add.w	r3, r7, #28
 8006628:	4619      	mov	r1, r3
 800662a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800662e:	f000 fe69 	bl	8007304 <HAL_GPIO_Init>
}
 8006632:	bf00      	nop
 8006634:	3730      	adds	r7, #48	@ 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	40000400 	.word	0x40000400
 8006640:	40021000 	.word	0x40021000
 8006644:	40000c00 	.word	0x40000c00

08006648 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a23      	ldr	r2, [pc, #140]	@ (80066e4 <HAL_TIM_Base_MspInit+0x9c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d114      	bne.n	8006684 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800665a:	4b23      	ldr	r3, [pc, #140]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 800665c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665e:	4a22      	ldr	r2, [pc, #136]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 8006660:	f043 0310 	orr.w	r3, r3, #16
 8006664:	6593      	str	r3, [r2, #88]	@ 0x58
 8006666:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 8006668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006672:	2200      	movs	r2, #0
 8006674:	2100      	movs	r1, #0
 8006676:	2036      	movs	r0, #54	@ 0x36
 8006678:	f000 faae 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800667c:	2036      	movs	r0, #54	@ 0x36
 800667e:	f000 fad7 	bl	8006c30 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8006682:	e02a      	b.n	80066da <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a18      	ldr	r2, [pc, #96]	@ (80066ec <HAL_TIM_Base_MspInit+0xa4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d114      	bne.n	80066b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800668e:	4b16      	ldr	r3, [pc, #88]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 8006690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006692:	4a15      	ldr	r2, [pc, #84]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 8006694:	f043 0320 	orr.w	r3, r3, #32
 8006698:	6593      	str	r3, [r2, #88]	@ 0x58
 800669a:	4b13      	ldr	r3, [pc, #76]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 800669c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80066a6:	2200      	movs	r2, #0
 80066a8:	2100      	movs	r1, #0
 80066aa:	2037      	movs	r0, #55	@ 0x37
 80066ac:	f000 fa94 	bl	8006bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80066b0:	2037      	movs	r0, #55	@ 0x37
 80066b2:	f000 fabd 	bl	8006c30 <HAL_NVIC_EnableIRQ>
}
 80066b6:	e010      	b.n	80066da <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM15)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a0c      	ldr	r2, [pc, #48]	@ (80066f0 <HAL_TIM_Base_MspInit+0xa8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d10b      	bne.n	80066da <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80066c2:	4b09      	ldr	r3, [pc, #36]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 80066c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c6:	4a08      	ldr	r2, [pc, #32]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 80066c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80066ce:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <HAL_TIM_Base_MspInit+0xa0>)
 80066d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
}
 80066da:	bf00      	nop
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40001000 	.word	0x40001000
 80066e8:	40021000 	.word	0x40021000
 80066ec:	40001400 	.word	0x40001400
 80066f0:	40014000 	.word	0x40014000

080066f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	@ 0x28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066fc:	f107 0314 	add.w	r3, r7, #20
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a20      	ldr	r2, [pc, #128]	@ (8006794 <HAL_TIM_MspPostInit+0xa0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d139      	bne.n	800678a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006716:	4b20      	ldr	r3, [pc, #128]	@ (8006798 <HAL_TIM_MspPostInit+0xa4>)
 8006718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800671a:	4a1f      	ldr	r2, [pc, #124]	@ (8006798 <HAL_TIM_MspPostInit+0xa4>)
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006722:	4b1d      	ldr	r3, [pc, #116]	@ (8006798 <HAL_TIM_MspPostInit+0xa4>)
 8006724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800672e:	4b1a      	ldr	r3, [pc, #104]	@ (8006798 <HAL_TIM_MspPostInit+0xa4>)
 8006730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006732:	4a19      	ldr	r2, [pc, #100]	@ (8006798 <HAL_TIM_MspPostInit+0xa4>)
 8006734:	f043 0302 	orr.w	r3, r3, #2
 8006738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800673a:	4b17      	ldr	r3, [pc, #92]	@ (8006798 <HAL_TIM_MspPostInit+0xa4>)
 800673c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006746:	2304      	movs	r3, #4
 8006748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674a:	2302      	movs	r3, #2
 800674c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674e:	2300      	movs	r3, #0
 8006750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006752:	2300      	movs	r3, #0
 8006754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8006756:	230e      	movs	r3, #14
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800675a:	f107 0314 	add.w	r3, r7, #20
 800675e:	4619      	mov	r1, r3
 8006760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006764:	f000 fdce 	bl	8007304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800676c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800676e:	2302      	movs	r3, #2
 8006770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006776:	2300      	movs	r3, #0
 8006778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800677a:	230e      	movs	r3, #14
 800677c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800677e:	f107 0314 	add.w	r3, r7, #20
 8006782:	4619      	mov	r1, r3
 8006784:	4805      	ldr	r0, [pc, #20]	@ (800679c <HAL_TIM_MspPostInit+0xa8>)
 8006786:	f000 fdbd 	bl	8007304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800678a:	bf00      	nop
 800678c:	3728      	adds	r7, #40	@ 0x28
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	40014000 	.word	0x40014000
 8006798:	40021000 	.word	0x40021000
 800679c:	48000400 	.word	0x48000400

080067a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067a4:	4b14      	ldr	r3, [pc, #80]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067a6:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <MX_USART1_UART_Init+0x5c>)
 80067a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067aa:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80067b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067b2:	4b11      	ldr	r3, [pc, #68]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067b8:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067be:	4b0e      	ldr	r3, [pc, #56]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067c4:	4b0c      	ldr	r3, [pc, #48]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067c6:	220c      	movs	r2, #12
 80067c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067ca:	4b0b      	ldr	r3, [pc, #44]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067d0:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067d6:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067d8:	2200      	movs	r2, #0
 80067da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067dc:	4b06      	ldr	r3, [pc, #24]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067de:	2200      	movs	r2, #0
 80067e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067e2:	4805      	ldr	r0, [pc, #20]	@ (80067f8 <MX_USART1_UART_Init+0x58>)
 80067e4:	f007 fc72 	bl	800e0cc <HAL_UART_Init>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80067ee:	f7ff fab5 	bl	8005d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80067f2:	bf00      	nop
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	200010b4 	.word	0x200010b4
 80067fc:	40013800 	.word	0x40013800

08006800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b0ac      	sub	sp, #176	@ 0xb0
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006808:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006818:	f107 0314 	add.w	r3, r7, #20
 800681c:	2288      	movs	r2, #136	@ 0x88
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f008 ff91 	bl	800f748 <memset>
  if(uartHandle->Instance==USART1)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <HAL_UART_MspInit+0xb0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d13a      	bne.n	80068a6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006830:	2301      	movs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006834:	2300      	movs	r3, #0
 8006836:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006838:	f107 0314 	add.w	r3, r7, #20
 800683c:	4618      	mov	r0, r3
 800683e:	f002 fd8f 	bl	8009360 <HAL_RCCEx_PeriphCLKConfig>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006848:	f7ff fa88 	bl	8005d5c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800684c:	4b19      	ldr	r3, [pc, #100]	@ (80068b4 <HAL_UART_MspInit+0xb4>)
 800684e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006850:	4a18      	ldr	r2, [pc, #96]	@ (80068b4 <HAL_UART_MspInit+0xb4>)
 8006852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006856:	6613      	str	r3, [r2, #96]	@ 0x60
 8006858:	4b16      	ldr	r3, [pc, #88]	@ (80068b4 <HAL_UART_MspInit+0xb4>)
 800685a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800685c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006864:	4b13      	ldr	r3, [pc, #76]	@ (80068b4 <HAL_UART_MspInit+0xb4>)
 8006866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006868:	4a12      	ldr	r2, [pc, #72]	@ (80068b4 <HAL_UART_MspInit+0xb4>)
 800686a:	f043 0302 	orr.w	r3, r3, #2
 800686e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006870:	4b10      	ldr	r3, [pc, #64]	@ (80068b4 <HAL_UART_MspInit+0xb4>)
 8006872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800687c:	23c0      	movs	r3, #192	@ 0xc0
 800687e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006882:	2302      	movs	r3, #2
 8006884:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800688e:	2303      	movs	r3, #3
 8006890:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006894:	2307      	movs	r3, #7
 8006896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800689a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800689e:	4619      	mov	r1, r3
 80068a0:	4805      	ldr	r0, [pc, #20]	@ (80068b8 <HAL_UART_MspInit+0xb8>)
 80068a2:	f000 fd2f 	bl	8007304 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80068a6:	bf00      	nop
 80068a8:	37b0      	adds	r7, #176	@ 0xb0
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40013800 	.word	0x40013800
 80068b4:	40021000 	.word	0x40021000
 80068b8:	48000400 	.word	0x48000400

080068bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80068bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80068f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80068c0:	f7ff fc82 	bl	80061c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068c4:	480c      	ldr	r0, [pc, #48]	@ (80068f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80068c6:	490d      	ldr	r1, [pc, #52]	@ (80068fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80068c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006900 <LoopForever+0xe>)
  movs r3, #0
 80068ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068cc:	e002      	b.n	80068d4 <LoopCopyDataInit>

080068ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068d2:	3304      	adds	r3, #4

080068d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068d8:	d3f9      	bcc.n	80068ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068da:	4a0a      	ldr	r2, [pc, #40]	@ (8006904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80068dc:	4c0a      	ldr	r4, [pc, #40]	@ (8006908 <LoopForever+0x16>)
  movs r3, #0
 80068de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068e0:	e001      	b.n	80068e6 <LoopFillZerobss>

080068e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068e4:	3204      	adds	r2, #4

080068e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068e8:	d3fb      	bcc.n	80068e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80068ea:	f008 ff91 	bl	800f810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80068ee:	f7ff f92b 	bl	8005b48 <main>

080068f2 <LoopForever>:

LoopForever:
    b LoopForever
 80068f2:	e7fe      	b.n	80068f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80068f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80068f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068fc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8006900:	08010de4 	.word	0x08010de4
  ldr r2, =_sbss
 8006904:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8006908:	2000128c 	.word	0x2000128c

0800690c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800690c:	e7fe      	b.n	800690c <ADC1_2_IRQHandler>

0800690e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006918:	2003      	movs	r0, #3
 800691a:	f000 f93d 	bl	8006b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800691e:	200f      	movs	r0, #15
 8006920:	f000 f80e 	bl	8006940 <HAL_InitTick>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	71fb      	strb	r3, [r7, #7]
 800692e:	e001      	b.n	8006934 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006930:	f7ff fb16 	bl	8005f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006934:	79fb      	ldrb	r3, [r7, #7]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800694c:	4b17      	ldr	r3, [pc, #92]	@ (80069ac <HAL_InitTick+0x6c>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d023      	beq.n	800699c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006954:	4b16      	ldr	r3, [pc, #88]	@ (80069b0 <HAL_InitTick+0x70>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	4b14      	ldr	r3, [pc, #80]	@ (80069ac <HAL_InitTick+0x6c>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	4619      	mov	r1, r3
 800695e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006962:	fbb3 f3f1 	udiv	r3, r3, r1
 8006966:	fbb2 f3f3 	udiv	r3, r2, r3
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f978 	bl	8006c60 <HAL_SYSTICK_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10f      	bne.n	8006996 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b0f      	cmp	r3, #15
 800697a:	d809      	bhi.n	8006990 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800697c:	2200      	movs	r2, #0
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	f000 f928 	bl	8006bd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006988:	4a0a      	ldr	r2, [pc, #40]	@ (80069b4 <HAL_InitTick+0x74>)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e007      	b.n	80069a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
 8006994:	e004      	b.n	80069a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	73fb      	strb	r3, [r7, #15]
 800699a:	e001      	b.n	80069a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	2000001c 	.word	0x2000001c
 80069b0:	20000014 	.word	0x20000014
 80069b4:	20000018 	.word	0x20000018

080069b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80069bc:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <HAL_IncTick+0x20>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_IncTick+0x24>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4413      	add	r3, r2
 80069c8:	4a04      	ldr	r2, [pc, #16]	@ (80069dc <HAL_IncTick+0x24>)
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	2000001c 	.word	0x2000001c
 80069dc:	2000113c 	.word	0x2000113c

080069e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  return uwTick;
 80069e4:	4b03      	ldr	r3, [pc, #12]	@ (80069f4 <HAL_GetTick+0x14>)
 80069e6:	681b      	ldr	r3, [r3, #0]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000113c 	.word	0x2000113c

080069f8 <__NVIC_SetPriorityGrouping>:
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a08:	4b0c      	ldr	r3, [pc, #48]	@ (8006a3c <__NVIC_SetPriorityGrouping+0x44>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a14:	4013      	ands	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a2a:	4a04      	ldr	r2, [pc, #16]	@ (8006a3c <__NVIC_SetPriorityGrouping+0x44>)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	60d3      	str	r3, [r2, #12]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <__NVIC_GetPriorityGrouping>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a44:	4b04      	ldr	r3, [pc, #16]	@ (8006a58 <__NVIC_GetPriorityGrouping+0x18>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	f003 0307 	and.w	r3, r3, #7
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	e000ed00 	.word	0xe000ed00

08006a5c <__NVIC_EnableIRQ>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	db0b      	blt.n	8006a86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	f003 021f 	and.w	r2, r3, #31
 8006a74:	4907      	ldr	r1, [pc, #28]	@ (8006a94 <__NVIC_EnableIRQ+0x38>)
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	e000e100 	.word	0xe000e100

08006a98 <__NVIC_SetPriority>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	db0a      	blt.n	8006ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	490c      	ldr	r1, [pc, #48]	@ (8006ae4 <__NVIC_SetPriority+0x4c>)
 8006ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab6:	0112      	lsls	r2, r2, #4
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	440b      	add	r3, r1
 8006abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006ac0:	e00a      	b.n	8006ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	4908      	ldr	r1, [pc, #32]	@ (8006ae8 <__NVIC_SetPriority+0x50>)
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	3b04      	subs	r3, #4
 8006ad0:	0112      	lsls	r2, r2, #4
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	761a      	strb	r2, [r3, #24]
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	e000e100 	.word	0xe000e100
 8006ae8:	e000ed00 	.word	0xe000ed00

08006aec <NVIC_EncodePriority>:
{
 8006aec:	b480      	push	{r7}
 8006aee:	b089      	sub	sp, #36	@ 0x24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f1c3 0307 	rsb	r3, r3, #7
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	bf28      	it	cs
 8006b0a:	2304      	movcs	r3, #4
 8006b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	3304      	adds	r3, #4
 8006b12:	2b06      	cmp	r3, #6
 8006b14:	d902      	bls.n	8006b1c <NVIC_EncodePriority+0x30>
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3b03      	subs	r3, #3
 8006b1a:	e000      	b.n	8006b1e <NVIC_EncodePriority+0x32>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2a:	43da      	mvns	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	401a      	ands	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b34:	f04f 31ff 	mov.w	r1, #4294967295
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3e:	43d9      	mvns	r1, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b44:	4313      	orrs	r3, r2
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3724      	adds	r7, #36	@ 0x24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <SysTick_Config>:
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b64:	d301      	bcc.n	8006b6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006b66:	2301      	movs	r3, #1
 8006b68:	e00f      	b.n	8006b8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b94 <SysTick_Config+0x40>)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b72:	210f      	movs	r1, #15
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	f7ff ff8e 	bl	8006a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b7c:	4b05      	ldr	r3, [pc, #20]	@ (8006b94 <SysTick_Config+0x40>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b82:	4b04      	ldr	r3, [pc, #16]	@ (8006b94 <SysTick_Config+0x40>)
 8006b84:	2207      	movs	r2, #7
 8006b86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	e000e010 	.word	0xe000e010

08006b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b07      	cmp	r3, #7
 8006ba4:	d00f      	beq.n	8006bc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b06      	cmp	r3, #6
 8006baa:	d00c      	beq.n	8006bc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b05      	cmp	r3, #5
 8006bb0:	d009      	beq.n	8006bc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d006      	beq.n	8006bc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d003      	beq.n	8006bc6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006bbe:	21a6      	movs	r1, #166	@ 0xa6
 8006bc0:	4804      	ldr	r0, [pc, #16]	@ (8006bd4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8006bc2:	f7ff f8e3 	bl	8005d8c <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff ff16 	bl	80069f8 <__NVIC_SetPriorityGrouping>
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	08010a54 	.word	0x08010a54

08006bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b0f      	cmp	r3, #15
 8006bee:	d903      	bls.n	8006bf8 <HAL_NVIC_SetPriority+0x20>
 8006bf0:	21be      	movs	r1, #190	@ 0xbe
 8006bf2:	480e      	ldr	r0, [pc, #56]	@ (8006c2c <HAL_NVIC_SetPriority+0x54>)
 8006bf4:	f7ff f8ca 	bl	8005d8c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b0f      	cmp	r3, #15
 8006bfc:	d903      	bls.n	8006c06 <HAL_NVIC_SetPriority+0x2e>
 8006bfe:	21bf      	movs	r1, #191	@ 0xbf
 8006c00:	480a      	ldr	r0, [pc, #40]	@ (8006c2c <HAL_NVIC_SetPriority+0x54>)
 8006c02:	f7ff f8c3 	bl	8005d8c <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c06:	f7ff ff1b 	bl	8006a40 <__NVIC_GetPriorityGrouping>
 8006c0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	68b9      	ldr	r1, [r7, #8]
 8006c10:	6978      	ldr	r0, [r7, #20]
 8006c12:	f7ff ff6b 	bl	8006aec <NVIC_EncodePriority>
 8006c16:	4602      	mov	r2, r0
 8006c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff ff3a 	bl	8006a98 <__NVIC_SetPriority>
}
 8006c24:	bf00      	nop
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	08010a54 	.word	0x08010a54

08006c30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da03      	bge.n	8006c4a <HAL_NVIC_EnableIRQ+0x1a>
 8006c42:	21d2      	movs	r1, #210	@ 0xd2
 8006c44:	4805      	ldr	r0, [pc, #20]	@ (8006c5c <HAL_NVIC_EnableIRQ+0x2c>)
 8006c46:	f7ff f8a1 	bl	8005d8c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff ff04 	bl	8006a5c <__NVIC_EnableIRQ>
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	08010a54 	.word	0x08010a54

08006c60 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff ff73 	bl	8006b54 <SysTick_Config>
 8006c6e:	4603      	mov	r3, r0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e19d      	b.n	8006fc6 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a79      	ldr	r2, [pc, #484]	@ (8006e74 <HAL_DMA_Init+0x1fc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d044      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a77      	ldr	r2, [pc, #476]	@ (8006e78 <HAL_DMA_Init+0x200>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d03f      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a76      	ldr	r2, [pc, #472]	@ (8006e7c <HAL_DMA_Init+0x204>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d03a      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a74      	ldr	r2, [pc, #464]	@ (8006e80 <HAL_DMA_Init+0x208>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d035      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a73      	ldr	r2, [pc, #460]	@ (8006e84 <HAL_DMA_Init+0x20c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d030      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a71      	ldr	r2, [pc, #452]	@ (8006e88 <HAL_DMA_Init+0x210>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d02b      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a70      	ldr	r2, [pc, #448]	@ (8006e8c <HAL_DMA_Init+0x214>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d026      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6e      	ldr	r2, [pc, #440]	@ (8006e90 <HAL_DMA_Init+0x218>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d021      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a6d      	ldr	r2, [pc, #436]	@ (8006e94 <HAL_DMA_Init+0x21c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d01c      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8006e98 <HAL_DMA_Init+0x220>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d017      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a6a      	ldr	r2, [pc, #424]	@ (8006e9c <HAL_DMA_Init+0x224>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d012      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a68      	ldr	r2, [pc, #416]	@ (8006ea0 <HAL_DMA_Init+0x228>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00d      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a67      	ldr	r2, [pc, #412]	@ (8006ea4 <HAL_DMA_Init+0x22c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d008      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a65      	ldr	r2, [pc, #404]	@ (8006ea8 <HAL_DMA_Init+0x230>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d003      	beq.n	8006d1e <HAL_DMA_Init+0xa6>
 8006d16:	21a5      	movs	r1, #165	@ 0xa5
 8006d18:	4864      	ldr	r0, [pc, #400]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006d1a:	f7ff f837 	bl	8005d8c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00c      	beq.n	8006d40 <HAL_DMA_Init+0xc8>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d008      	beq.n	8006d40 <HAL_DMA_Init+0xc8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d36:	d003      	beq.n	8006d40 <HAL_DMA_Init+0xc8>
 8006d38:	21a6      	movs	r1, #166	@ 0xa6
 8006d3a:	485c      	ldr	r0, [pc, #368]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006d3c:	f7ff f826 	bl	8005d8c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b40      	cmp	r3, #64	@ 0x40
 8006d46:	d007      	beq.n	8006d58 <HAL_DMA_Init+0xe0>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <HAL_DMA_Init+0xe0>
 8006d50:	21a7      	movs	r1, #167	@ 0xa7
 8006d52:	4856      	ldr	r0, [pc, #344]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006d54:	f7ff f81a 	bl	8005d8c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b80      	cmp	r3, #128	@ 0x80
 8006d5e:	d007      	beq.n	8006d70 <HAL_DMA_Init+0xf8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_DMA_Init+0xf8>
 8006d68:	21a8      	movs	r1, #168	@ 0xa8
 8006d6a:	4850      	ldr	r0, [pc, #320]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006d6c:	f7ff f80e 	bl	8005d8c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00d      	beq.n	8006d94 <HAL_DMA_Init+0x11c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d80:	d008      	beq.n	8006d94 <HAL_DMA_Init+0x11c>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d8a:	d003      	beq.n	8006d94 <HAL_DMA_Init+0x11c>
 8006d8c:	21a9      	movs	r1, #169	@ 0xa9
 8006d8e:	4847      	ldr	r0, [pc, #284]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006d90:	f7fe fffc 	bl	8005d8c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <HAL_DMA_Init+0x140>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da4:	d008      	beq.n	8006db8 <HAL_DMA_Init+0x140>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dae:	d003      	beq.n	8006db8 <HAL_DMA_Init+0x140>
 8006db0:	21aa      	movs	r1, #170	@ 0xaa
 8006db2:	483e      	ldr	r0, [pc, #248]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006db4:	f7fe ffea 	bl	8005d8c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <HAL_DMA_Init+0x158>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d003      	beq.n	8006dd0 <HAL_DMA_Init+0x158>
 8006dc8:	21ab      	movs	r1, #171	@ 0xab
 8006dca:	4838      	ldr	r0, [pc, #224]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006dcc:	f7fe ffde 	bl	8005d8c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <HAL_DMA_Init+0x186>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de0:	d00d      	beq.n	8006dfe <HAL_DMA_Init+0x186>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dea:	d008      	beq.n	8006dfe <HAL_DMA_Init+0x186>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006df4:	d003      	beq.n	8006dfe <HAL_DMA_Init+0x186>
 8006df6:	21ac      	movs	r1, #172	@ 0xac
 8006df8:	482c      	ldr	r0, [pc, #176]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006dfa:	f7fe ffc7 	bl	8005d8c <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01f      	beq.n	8006e46 <HAL_DMA_Init+0x1ce>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d01b      	beq.n	8006e46 <HAL_DMA_Init+0x1ce>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d017      	beq.n	8006e46 <HAL_DMA_Init+0x1ce>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d013      	beq.n	8006e46 <HAL_DMA_Init+0x1ce>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d00f      	beq.n	8006e46 <HAL_DMA_Init+0x1ce>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d00b      	beq.n	8006e46 <HAL_DMA_Init+0x1ce>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d007      	beq.n	8006e46 <HAL_DMA_Init+0x1ce>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b07      	cmp	r3, #7
 8006e3c:	d003      	beq.n	8006e46 <HAL_DMA_Init+0x1ce>
 8006e3e:	21ae      	movs	r1, #174	@ 0xae
 8006e40:	481a      	ldr	r0, [pc, #104]	@ (8006eac <HAL_DMA_Init+0x234>)
 8006e42:	f7fe ffa3 	bl	8005d8c <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4b18      	ldr	r3, [pc, #96]	@ (8006eb0 <HAL_DMA_Init+0x238>)
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d836      	bhi.n	8006ec0 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b16      	ldr	r3, [pc, #88]	@ (8006eb4 <HAL_DMA_Init+0x23c>)
 8006e5a:	4413      	add	r3, r2
 8006e5c:	4a16      	ldr	r2, [pc, #88]	@ (8006eb8 <HAL_DMA_Init+0x240>)
 8006e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e62:	091b      	lsrs	r3, r3, #4
 8006e64:	009a      	lsls	r2, r3, #2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	@ (8006ebc <HAL_DMA_Init+0x244>)
 8006e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006e70:	e035      	b.n	8006ede <HAL_DMA_Init+0x266>
 8006e72:	bf00      	nop
 8006e74:	40020008 	.word	0x40020008
 8006e78:	4002001c 	.word	0x4002001c
 8006e7c:	40020030 	.word	0x40020030
 8006e80:	40020044 	.word	0x40020044
 8006e84:	40020058 	.word	0x40020058
 8006e88:	4002006c 	.word	0x4002006c
 8006e8c:	40020080 	.word	0x40020080
 8006e90:	40020408 	.word	0x40020408
 8006e94:	4002041c 	.word	0x4002041c
 8006e98:	40020430 	.word	0x40020430
 8006e9c:	40020444 	.word	0x40020444
 8006ea0:	40020458 	.word	0x40020458
 8006ea4:	4002046c 	.word	0x4002046c
 8006ea8:	40020480 	.word	0x40020480
 8006eac:	08010a90 	.word	0x08010a90
 8006eb0:	40020407 	.word	0x40020407
 8006eb4:	bffdfff8 	.word	0xbffdfff8
 8006eb8:	cccccccd 	.word	0xcccccccd
 8006ebc:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4b42      	ldr	r3, [pc, #264]	@ (8006fd0 <HAL_DMA_Init+0x358>)
 8006ec8:	4413      	add	r3, r2
 8006eca:	4a42      	ldr	r2, [pc, #264]	@ (8006fd4 <HAL_DMA_Init+0x35c>)
 8006ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed0:	091b      	lsrs	r3, r3, #4
 8006ed2:	009a      	lsls	r2, r3, #2
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd8 <HAL_DMA_Init+0x360>)
 8006edc:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f38:	d039      	beq.n	8006fae <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3e:	4a27      	ldr	r2, [pc, #156]	@ (8006fdc <HAL_DMA_Init+0x364>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d11a      	bne.n	8006f7a <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f44:	4b26      	ldr	r3, [pc, #152]	@ (8006fe0 <HAL_DMA_Init+0x368>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4c:	f003 031c 	and.w	r3, r3, #28
 8006f50:	210f      	movs	r1, #15
 8006f52:	fa01 f303 	lsl.w	r3, r1, r3
 8006f56:	43db      	mvns	r3, r3
 8006f58:	4921      	ldr	r1, [pc, #132]	@ (8006fe0 <HAL_DMA_Init+0x368>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f5e:	4b20      	ldr	r3, [pc, #128]	@ (8006fe0 <HAL_DMA_Init+0x368>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6859      	ldr	r1, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6a:	f003 031c 	and.w	r3, r3, #28
 8006f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f72:	491b      	ldr	r1, [pc, #108]	@ (8006fe0 <HAL_DMA_Init+0x368>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	600b      	str	r3, [r1, #0]
 8006f78:	e019      	b.n	8006fae <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe4 <HAL_DMA_Init+0x36c>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f82:	f003 031c 	and.w	r3, r3, #28
 8006f86:	210f      	movs	r1, #15
 8006f88:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	4915      	ldr	r1, [pc, #84]	@ (8006fe4 <HAL_DMA_Init+0x36c>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006f94:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <HAL_DMA_Init+0x36c>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6859      	ldr	r1, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa0:	f003 031c 	and.w	r3, r3, #28
 8006fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa8:	490e      	ldr	r1, [pc, #56]	@ (8006fe4 <HAL_DMA_Init+0x36c>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	bffdfbf8 	.word	0xbffdfbf8
 8006fd4:	cccccccd 	.word	0xcccccccd
 8006fd8:	40020400 	.word	0x40020400
 8006fdc:	40020000 	.word	0x40020000
 8006fe0:	400200a8 	.word	0x400200a8
 8006fe4:	400204a8 	.word	0x400204a8

08006fe8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <HAL_DMA_Start_IT+0x20>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007006:	d304      	bcc.n	8007012 <HAL_DMA_Start_IT+0x2a>
 8007008:	f240 11df 	movw	r1, #479	@ 0x1df
 800700c:	482c      	ldr	r0, [pc, #176]	@ (80070c0 <HAL_DMA_Start_IT+0xd8>)
 800700e:	f7fe febd 	bl	8005d8c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_DMA_Start_IT+0x38>
 800701c:	2302      	movs	r3, #2
 800701e:	e04b      	b.n	80070b8 <HAL_DMA_Start_IT+0xd0>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d13a      	bne.n	80070aa <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f923 	bl	80072a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 020e 	orr.w	r2, r2, #14
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e00f      	b.n	8007098 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0204 	bic.w	r2, r2, #4
 8007086:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 020a 	orr.w	r2, r2, #10
 8007096:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e005      	b.n	80070b6 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80070b2:	2302      	movs	r3, #2
 80070b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	08010a90 	.word	0x08010a90

080070c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d005      	beq.n	80070e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2204      	movs	r2, #4
 80070e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
 80070e6:	e029      	b.n	800713c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 020e 	bic.w	r2, r2, #14
 80070f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0201 	bic.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710c:	f003 021c 	and.w	r2, r3, #28
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007114:	2101      	movs	r1, #1
 8007116:	fa01 f202 	lsl.w	r2, r1, r2
 800711a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	4798      	blx	r3
    }
  }
  return status;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007162:	f003 031c 	and.w	r3, r3, #28
 8007166:	2204      	movs	r2, #4
 8007168:	409a      	lsls	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4013      	ands	r3, r2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d026      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x7a>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d021      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d107      	bne.n	800719a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0204 	bic.w	r2, r2, #4
 8007198:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719e:	f003 021c 	and.w	r2, r3, #28
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a6:	2104      	movs	r1, #4
 80071a8:	fa01 f202 	lsl.w	r2, r1, r2
 80071ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d071      	beq.n	800729a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80071be:	e06c      	b.n	800729a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c4:	f003 031c 	and.w	r3, r3, #28
 80071c8:	2202      	movs	r2, #2
 80071ca:	409a      	lsls	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d02e      	beq.n	8007232 <HAL_DMA_IRQHandler+0xec>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d029      	beq.n	8007232 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 020a 	bic.w	r2, r2, #10
 80071fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007208:	f003 021c 	and.w	r2, r3, #28
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007210:	2102      	movs	r1, #2
 8007212:	fa01 f202 	lsl.w	r2, r1, r2
 8007216:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d038      	beq.n	800729a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007230:	e033      	b.n	800729a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007236:	f003 031c 	and.w	r3, r3, #28
 800723a:	2208      	movs	r2, #8
 800723c:	409a      	lsls	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4013      	ands	r3, r2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d02a      	beq.n	800729c <HAL_DMA_IRQHandler+0x156>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f003 0308 	and.w	r3, r3, #8
 800724c:	2b00      	cmp	r3, #0
 800724e:	d025      	beq.n	800729c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 020e 	bic.w	r2, r2, #14
 800725e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007264:	f003 021c 	and.w	r2, r3, #28
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726c:	2101      	movs	r1, #1
 800726e:	fa01 f202 	lsl.w	r2, r1, r2
 8007272:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800729a:	bf00      	nop
 800729c:	bf00      	nop
}
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b6:	f003 021c 	and.w	r2, r3, #28
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072be:	2101      	movs	r1, #1
 80072c0:	fa01 f202 	lsl.w	r2, r1, r2
 80072c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d108      	bne.n	80072e8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80072e6:	e007      	b.n	80072f8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	60da      	str	r2, [r3, #12]
}
 80072f8:	bf00      	nop
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007318:	d01f      	beq.n	800735a <HAL_GPIO_Init+0x56>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a3c      	ldr	r2, [pc, #240]	@ (8007410 <HAL_GPIO_Init+0x10c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01b      	beq.n	800735a <HAL_GPIO_Init+0x56>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a3b      	ldr	r2, [pc, #236]	@ (8007414 <HAL_GPIO_Init+0x110>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d017      	beq.n	800735a <HAL_GPIO_Init+0x56>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a3a      	ldr	r2, [pc, #232]	@ (8007418 <HAL_GPIO_Init+0x114>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_GPIO_Init+0x56>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a39      	ldr	r2, [pc, #228]	@ (800741c <HAL_GPIO_Init+0x118>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00f      	beq.n	800735a <HAL_GPIO_Init+0x56>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a38      	ldr	r2, [pc, #224]	@ (8007420 <HAL_GPIO_Init+0x11c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00b      	beq.n	800735a <HAL_GPIO_Init+0x56>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a37      	ldr	r2, [pc, #220]	@ (8007424 <HAL_GPIO_Init+0x120>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d007      	beq.n	800735a <HAL_GPIO_Init+0x56>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a36      	ldr	r2, [pc, #216]	@ (8007428 <HAL_GPIO_Init+0x124>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d003      	beq.n	800735a <HAL_GPIO_Init+0x56>
 8007352:	21aa      	movs	r1, #170	@ 0xaa
 8007354:	4835      	ldr	r0, [pc, #212]	@ (800742c <HAL_GPIO_Init+0x128>)
 8007356:	f7fe fd19 	bl	8005d8c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <HAL_GPIO_Init+0x6a>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800736c:	d303      	bcc.n	8007376 <HAL_GPIO_Init+0x72>
 800736e:	21ab      	movs	r1, #171	@ 0xab
 8007370:	482e      	ldr	r0, [pc, #184]	@ (800742c <HAL_GPIO_Init+0x128>)
 8007372:	f7fe fd0b 	bl	8005d8c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 823d 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b01      	cmp	r3, #1
 8007386:	f000 8238 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b11      	cmp	r3, #17
 8007390:	f000 8233 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b02      	cmp	r3, #2
 800739a:	f000 822e 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	2b12      	cmp	r3, #18
 80073a4:	f000 8229 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80073b0:	f000 8223 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80073bc:	f000 821d 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80073c8:	f000 8217 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80073d4:	f000 8211 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80073e0:	f000 820b 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80073ec:	f000 8205 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	f000 8200 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b0b      	cmp	r3, #11
 8007400:	f000 81fb 	beq.w	80077fa <HAL_GPIO_Init+0x4f6>
 8007404:	21ac      	movs	r1, #172	@ 0xac
 8007406:	4809      	ldr	r0, [pc, #36]	@ (800742c <HAL_GPIO_Init+0x128>)
 8007408:	f7fe fcc0 	bl	8005d8c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800740c:	e1f5      	b.n	80077fa <HAL_GPIO_Init+0x4f6>
 800740e:	bf00      	nop
 8007410:	48000400 	.word	0x48000400
 8007414:	48000800 	.word	0x48000800
 8007418:	48000c00 	.word	0x48000c00
 800741c:	48001000 	.word	0x48001000
 8007420:	48001400 	.word	0x48001400
 8007424:	48001800 	.word	0x48001800
 8007428:	48001c00 	.word	0x48001c00
 800742c:	08010ac8 	.word	0x08010ac8
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	2101      	movs	r1, #1
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	fa01 f303 	lsl.w	r3, r1, r3
 800743c:	4013      	ands	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 81d6 	beq.w	80077f4 <HAL_GPIO_Init+0x4f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d005      	beq.n	8007460 <HAL_GPIO_Init+0x15c>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f003 0303 	and.w	r3, r3, #3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d144      	bne.n	80074ea <HAL_GPIO_Init+0x1e6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00f      	beq.n	8007488 <HAL_GPIO_Init+0x184>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d00b      	beq.n	8007488 <HAL_GPIO_Init+0x184>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d007      	beq.n	8007488 <HAL_GPIO_Init+0x184>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	2b03      	cmp	r3, #3
 800747e:	d003      	beq.n	8007488 <HAL_GPIO_Init+0x184>
 8007480:	21bb      	movs	r1, #187	@ 0xbb
 8007482:	489c      	ldr	r0, [pc, #624]	@ (80076f4 <HAL_GPIO_Init+0x3f0>)
 8007484:	f7fe fc82 	bl	8005d8c <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	2203      	movs	r2, #3
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	43db      	mvns	r3, r3
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4013      	ands	r3, r2
 800749e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074be:	2201      	movs	r2, #1
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	43db      	mvns	r3, r3
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4013      	ands	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	091b      	lsrs	r3, r3, #4
 80074d4:	f003 0201 	and.w	r2, r3, #1
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d118      	bne.n	8007528 <HAL_GPIO_Init+0x224>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80074fc:	2201      	movs	r2, #1
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	fa02 f303 	lsl.w	r3, r2, r3
 8007504:	43db      	mvns	r3, r3
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4013      	ands	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	08db      	lsrs	r3, r3, #3
 8007512:	f003 0201 	and.w	r2, r3, #1
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	2b03      	cmp	r3, #3
 8007532:	d027      	beq.n	8007584 <HAL_GPIO_Init+0x280>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <HAL_GPIO_Init+0x250>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d007      	beq.n	8007554 <HAL_GPIO_Init+0x250>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d003      	beq.n	8007554 <HAL_GPIO_Init+0x250>
 800754c:	21dc      	movs	r1, #220	@ 0xdc
 800754e:	4869      	ldr	r0, [pc, #420]	@ (80076f4 <HAL_GPIO_Init+0x3f0>)
 8007550:	f7fe fc1c 	bl	8005d8c <assert_failed>

        temp = GPIOx->PUPDR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	2203      	movs	r2, #3
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	43db      	mvns	r3, r3
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	4013      	ands	r3, r2
 800756a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	2b02      	cmp	r3, #2
 800758e:	d14f      	bne.n	8007630 <HAL_GPIO_Init+0x32c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007596:	d01f      	beq.n	80075d8 <HAL_GPIO_Init+0x2d4>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a57      	ldr	r2, [pc, #348]	@ (80076f8 <HAL_GPIO_Init+0x3f4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d01b      	beq.n	80075d8 <HAL_GPIO_Init+0x2d4>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a56      	ldr	r2, [pc, #344]	@ (80076fc <HAL_GPIO_Init+0x3f8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d017      	beq.n	80075d8 <HAL_GPIO_Init+0x2d4>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a55      	ldr	r2, [pc, #340]	@ (8007700 <HAL_GPIO_Init+0x3fc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d013      	beq.n	80075d8 <HAL_GPIO_Init+0x2d4>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a54      	ldr	r2, [pc, #336]	@ (8007704 <HAL_GPIO_Init+0x400>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00f      	beq.n	80075d8 <HAL_GPIO_Init+0x2d4>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a53      	ldr	r2, [pc, #332]	@ (8007708 <HAL_GPIO_Init+0x404>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00b      	beq.n	80075d8 <HAL_GPIO_Init+0x2d4>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a52      	ldr	r2, [pc, #328]	@ (800770c <HAL_GPIO_Init+0x408>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d007      	beq.n	80075d8 <HAL_GPIO_Init+0x2d4>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a51      	ldr	r2, [pc, #324]	@ (8007710 <HAL_GPIO_Init+0x40c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <HAL_GPIO_Init+0x2d4>
 80075d0:	21e8      	movs	r1, #232	@ 0xe8
 80075d2:	4848      	ldr	r0, [pc, #288]	@ (80076f4 <HAL_GPIO_Init+0x3f0>)
 80075d4:	f7fe fbda 	bl	8005d8c <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b0f      	cmp	r3, #15
 80075de:	d903      	bls.n	80075e8 <HAL_GPIO_Init+0x2e4>
 80075e0:	21e9      	movs	r1, #233	@ 0xe9
 80075e2:	4844      	ldr	r0, [pc, #272]	@ (80076f4 <HAL_GPIO_Init+0x3f0>)
 80075e4:	f7fe fbd2 	bl	8005d8c <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	08da      	lsrs	r2, r3, #3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3208      	adds	r2, #8
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	220f      	movs	r2, #15
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	43db      	mvns	r3, r3
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4013      	ands	r3, r2
 800760a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	08da      	lsrs	r2, r3, #3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3208      	adds	r2, #8
 800762a:	6939      	ldr	r1, [r7, #16]
 800762c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	2203      	movs	r2, #3
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	43db      	mvns	r3, r3
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4013      	ands	r3, r2
 8007646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f003 0203 	and.w	r2, r3, #3
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	fa02 f303 	lsl.w	r3, r2, r3
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80c1 	beq.w	80077f4 <HAL_GPIO_Init+0x4f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007672:	4b28      	ldr	r3, [pc, #160]	@ (8007714 <HAL_GPIO_Init+0x410>)
 8007674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007676:	4a27      	ldr	r2, [pc, #156]	@ (8007714 <HAL_GPIO_Init+0x410>)
 8007678:	f043 0301 	orr.w	r3, r3, #1
 800767c:	6613      	str	r3, [r2, #96]	@ 0x60
 800767e:	4b25      	ldr	r3, [pc, #148]	@ (8007714 <HAL_GPIO_Init+0x410>)
 8007680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	60bb      	str	r3, [r7, #8]
 8007688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800768a:	4a23      	ldr	r2, [pc, #140]	@ (8007718 <HAL_GPIO_Init+0x414>)
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	3302      	adds	r3, #2
 8007692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	220f      	movs	r2, #15
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43db      	mvns	r3, r3
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4013      	ands	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80076b4:	d03a      	beq.n	800772c <HAL_GPIO_Init+0x428>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a0f      	ldr	r2, [pc, #60]	@ (80076f8 <HAL_GPIO_Init+0x3f4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d034      	beq.n	8007728 <HAL_GPIO_Init+0x424>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a0e      	ldr	r2, [pc, #56]	@ (80076fc <HAL_GPIO_Init+0x3f8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d02e      	beq.n	8007724 <HAL_GPIO_Init+0x420>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007700 <HAL_GPIO_Init+0x3fc>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d028      	beq.n	8007720 <HAL_GPIO_Init+0x41c>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007704 <HAL_GPIO_Init+0x400>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d022      	beq.n	800771c <HAL_GPIO_Init+0x418>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a0b      	ldr	r2, [pc, #44]	@ (8007708 <HAL_GPIO_Init+0x404>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d007      	beq.n	80076ee <HAL_GPIO_Init+0x3ea>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a0a      	ldr	r2, [pc, #40]	@ (800770c <HAL_GPIO_Init+0x408>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d101      	bne.n	80076ea <HAL_GPIO_Init+0x3e6>
 80076e6:	2306      	movs	r3, #6
 80076e8:	e021      	b.n	800772e <HAL_GPIO_Init+0x42a>
 80076ea:	2307      	movs	r3, #7
 80076ec:	e01f      	b.n	800772e <HAL_GPIO_Init+0x42a>
 80076ee:	2305      	movs	r3, #5
 80076f0:	e01d      	b.n	800772e <HAL_GPIO_Init+0x42a>
 80076f2:	bf00      	nop
 80076f4:	08010ac8 	.word	0x08010ac8
 80076f8:	48000400 	.word	0x48000400
 80076fc:	48000800 	.word	0x48000800
 8007700:	48000c00 	.word	0x48000c00
 8007704:	48001000 	.word	0x48001000
 8007708:	48001400 	.word	0x48001400
 800770c:	48001800 	.word	0x48001800
 8007710:	48001c00 	.word	0x48001c00
 8007714:	40021000 	.word	0x40021000
 8007718:	40010000 	.word	0x40010000
 800771c:	2304      	movs	r3, #4
 800771e:	e006      	b.n	800772e <HAL_GPIO_Init+0x42a>
 8007720:	2303      	movs	r3, #3
 8007722:	e004      	b.n	800772e <HAL_GPIO_Init+0x42a>
 8007724:	2302      	movs	r3, #2
 8007726:	e002      	b.n	800772e <HAL_GPIO_Init+0x42a>
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <HAL_GPIO_Init+0x42a>
 800772c:	2300      	movs	r3, #0
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	f002 0203 	and.w	r2, r2, #3
 8007734:	0092      	lsls	r2, r2, #2
 8007736:	4093      	lsls	r3, r2
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800773e:	4935      	ldr	r1, [pc, #212]	@ (8007814 <HAL_GPIO_Init+0x510>)
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	089b      	lsrs	r3, r3, #2
 8007744:	3302      	adds	r3, #2
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800774c:	4b32      	ldr	r3, [pc, #200]	@ (8007818 <HAL_GPIO_Init+0x514>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	43db      	mvns	r3, r3
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4013      	ands	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_GPIO_Init+0x46c>
        {
          temp |= iocurrent;
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007770:	4a29      	ldr	r2, [pc, #164]	@ (8007818 <HAL_GPIO_Init+0x514>)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007776:	4b28      	ldr	r3, [pc, #160]	@ (8007818 <HAL_GPIO_Init+0x514>)
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	43db      	mvns	r3, r3
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	4013      	ands	r3, r2
 8007784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_GPIO_Init+0x496>
        {
          temp |= iocurrent;
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800779a:	4a1f      	ldr	r2, [pc, #124]	@ (8007818 <HAL_GPIO_Init+0x514>)
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80077a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007818 <HAL_GPIO_Init+0x514>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4013      	ands	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_GPIO_Init+0x4c0>
        {
          temp |= iocurrent;
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80077c4:	4a14      	ldr	r2, [pc, #80]	@ (8007818 <HAL_GPIO_Init+0x514>)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80077ca:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <HAL_GPIO_Init+0x514>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	43db      	mvns	r3, r3
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4013      	ands	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_GPIO_Init+0x4ea>
        {
          temp |= iocurrent;
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80077ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007818 <HAL_GPIO_Init+0x514>)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	3301      	adds	r3, #1
 80077f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	fa22 f303 	lsr.w	r3, r2, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	f47f ae13 	bne.w	8007430 <HAL_GPIO_Init+0x12c>
  }
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40010000 	.word	0x40010000
 8007818:	40010400 	.word	0x40010400

0800781c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8007828:	887b      	ldrh	r3, [r7, #2]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <HAL_GPIO_ReadPin+0x1c>
 800782e:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 8007832:	4809      	ldr	r0, [pc, #36]	@ (8007858 <HAL_GPIO_ReadPin+0x3c>)
 8007834:	f7fe faaa 	bl	8005d8c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	887b      	ldrh	r3, [r7, #2]
 800783e:	4013      	ands	r3, r2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	e001      	b.n	800784e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	08010ac8 	.word	0x08010ac8

0800785c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	807b      	strh	r3, [r7, #2]
 8007868:	4613      	mov	r3, r2
 800786a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800786c:	887b      	ldrh	r3, [r7, #2]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d104      	bne.n	800787c <HAL_GPIO_WritePin+0x20>
 8007872:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8007876:	480e      	ldr	r0, [pc, #56]	@ (80078b0 <HAL_GPIO_WritePin+0x54>)
 8007878:	f7fe fa88 	bl	8005d8c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800787c:	787b      	ldrb	r3, [r7, #1]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <HAL_GPIO_WritePin+0x36>
 8007882:	787b      	ldrb	r3, [r7, #1]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d004      	beq.n	8007892 <HAL_GPIO_WritePin+0x36>
 8007888:	f240 11af 	movw	r1, #431	@ 0x1af
 800788c:	4808      	ldr	r0, [pc, #32]	@ (80078b0 <HAL_GPIO_WritePin+0x54>)
 800788e:	f7fe fa7d 	bl	8005d8c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8007892:	787b      	ldrb	r3, [r7, #1]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007898:	887a      	ldrh	r2, [r7, #2]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800789e:	e002      	b.n	80078a6 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80078a0:	887a      	ldrh	r2, [r7, #2]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	08010ac8 	.word	0x08010ac8

080078b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80078c0:	887b      	ldrh	r3, [r7, #2]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d104      	bne.n	80078d0 <HAL_GPIO_TogglePin+0x1c>
 80078c6:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 80078ca:	480a      	ldr	r0, [pc, #40]	@ (80078f4 <HAL_GPIO_TogglePin+0x40>)
 80078cc:	f7fe fa5e 	bl	8005d8c <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80078d6:	887a      	ldrh	r2, [r7, #2]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4013      	ands	r3, r2
 80078dc:	041a      	lsls	r2, r3, #16
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	43d9      	mvns	r1, r3
 80078e2:	887b      	ldrh	r3, [r7, #2]
 80078e4:	400b      	ands	r3, r1
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	619a      	str	r2, [r3, #24]
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	08010ac8 	.word	0x08010ac8

080078f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007902:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007904:	695a      	ldr	r2, [r3, #20]
 8007906:	88fb      	ldrh	r3, [r7, #6]
 8007908:	4013      	ands	r3, r2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d006      	beq.n	800791c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800790e:	4a05      	ldr	r2, [pc, #20]	@ (8007924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007914:	88fb      	ldrh	r3, [r7, #6]
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe f9ce 	bl	8005cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40010400 	.word	0x40010400

08007928 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e1f3      	b.n	8007d22 <HAL_LPTIM_Init+0x3fa>
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a8e      	ldr	r2, [pc, #568]	@ (8007b78 <HAL_LPTIM_Init+0x250>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d008      	beq.n	8007956 <HAL_LPTIM_Init+0x2e>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a8c      	ldr	r2, [pc, #560]	@ (8007b7c <HAL_LPTIM_Init+0x254>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d003      	beq.n	8007956 <HAL_LPTIM_Init+0x2e>
 800794e:	21fc      	movs	r1, #252	@ 0xfc
 8007950:	488b      	ldr	r0, [pc, #556]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 8007952:	f7fe fa1b 	bl	8005d8c <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d007      	beq.n	800796e <HAL_LPTIM_Init+0x46>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_LPTIM_Init+0x46>
 8007966:	21fe      	movs	r1, #254	@ 0xfe
 8007968:	4885      	ldr	r0, [pc, #532]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 800796a:	f7fe fa0f 	bl	8005d8c <assert_failed>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d026      	beq.n	80079c4 <HAL_LPTIM_Init+0x9c>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800797e:	d021      	beq.n	80079c4 <HAL_LPTIM_Init+0x9c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007988:	d01c      	beq.n	80079c4 <HAL_LPTIM_Init+0x9c>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007992:	d017      	beq.n	80079c4 <HAL_LPTIM_Init+0x9c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800799c:	d012      	beq.n	80079c4 <HAL_LPTIM_Init+0x9c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80079a6:	d00d      	beq.n	80079c4 <HAL_LPTIM_Init+0x9c>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079b0:	d008      	beq.n	80079c4 <HAL_LPTIM_Init+0x9c>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80079ba:	d003      	beq.n	80079c4 <HAL_LPTIM_Init+0x9c>
 80079bc:	21ff      	movs	r1, #255	@ 0xff
 80079be:	4870      	ldr	r0, [pc, #448]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 80079c0:	f7fe f9e4 	bl	8005d8c <assert_failed>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d004      	beq.n	80079d6 <HAL_LPTIM_Init+0xae>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079d4:	d125      	bne.n	8007a22 <HAL_LPTIM_Init+0xfa>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00c      	beq.n	80079f8 <HAL_LPTIM_Init+0xd0>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d008      	beq.n	80079f8 <HAL_LPTIM_Init+0xd0>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d004      	beq.n	80079f8 <HAL_LPTIM_Init+0xd0>
 80079ee:	f240 1103 	movw	r1, #259	@ 0x103
 80079f2:	4863      	ldr	r0, [pc, #396]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 80079f4:	f7fe f9ca 	bl	8005d8c <assert_failed>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d010      	beq.n	8007a22 <HAL_LPTIM_Init+0xfa>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d00c      	beq.n	8007a22 <HAL_LPTIM_Init+0xfa>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2b10      	cmp	r3, #16
 8007a0e:	d008      	beq.n	8007a22 <HAL_LPTIM_Init+0xfa>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b18      	cmp	r3, #24
 8007a16:	d004      	beq.n	8007a22 <HAL_LPTIM_Init+0xfa>
 8007a18:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8007a1c:	4858      	ldr	r0, [pc, #352]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 8007a1e:	f7fe f9b5 	bl	8005d8c <assert_failed>
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d02b      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d027      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a3e:	d022      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a48:	d01d      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a52:	d018      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a5c:	d013      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a66:	d00e      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007a70:	d009      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8007a7a:	d004      	beq.n	8007a86 <HAL_LPTIM_Init+0x15e>
 8007a7c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8007a80:	483f      	ldr	r0, [pc, #252]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 8007a82:	f7fe f983 	bl	8005d8c <assert_failed>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d028      	beq.n	8007ae4 <HAL_LPTIM_Init+0x1bc>
  {
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a9a:	d00e      	beq.n	8007aba <HAL_LPTIM_Init+0x192>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007aa4:	d009      	beq.n	8007aba <HAL_LPTIM_Init+0x192>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007aae:	d004      	beq.n	8007aba <HAL_LPTIM_Init+0x192>
 8007ab0:	f240 1109 	movw	r1, #265	@ 0x109
 8007ab4:	4832      	ldr	r0, [pc, #200]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 8007ab6:	f7fe f969 	bl	8005d8c <assert_failed>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d010      	beq.n	8007ae4 <HAL_LPTIM_Init+0x1bc>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	2b40      	cmp	r3, #64	@ 0x40
 8007ac8:	d00c      	beq.n	8007ae4 <HAL_LPTIM_Init+0x1bc>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	2b80      	cmp	r3, #128	@ 0x80
 8007ad0:	d008      	beq.n	8007ae4 <HAL_LPTIM_Init+0x1bc>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ad8:	d004      	beq.n	8007ae4 <HAL_LPTIM_Init+0x1bc>
 8007ada:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8007ade:	4828      	ldr	r0, [pc, #160]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 8007ae0:	f7fe f954 	bl	8005d8c <assert_failed>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007aec:	d008      	beq.n	8007b00 <HAL_LPTIM_Init+0x1d8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <HAL_LPTIM_Init+0x1d8>
 8007af6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8007afa:	4821      	ldr	r0, [pc, #132]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 8007afc:	f7fe f946 	bl	8005d8c <assert_failed>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d009      	beq.n	8007b1c <HAL_LPTIM_Init+0x1f4>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b10:	d004      	beq.n	8007b1c <HAL_LPTIM_Init+0x1f4>
 8007b12:	f240 110d 	movw	r1, #269	@ 0x10d
 8007b16:	481a      	ldr	r0, [pc, #104]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 8007b18:	f7fe f938 	bl	8005d8c <assert_failed>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <HAL_LPTIM_Init+0x210>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b2c:	d004      	beq.n	8007b38 <HAL_LPTIM_Init+0x210>
 8007b2e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8007b32:	4813      	ldr	r0, [pc, #76]	@ (8007b80 <HAL_LPTIM_Init+0x258>)
 8007b34:	f7fe f92a 	bl	8005d8c <assert_failed>
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <HAL_LPTIM_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7fd ff95 	bl	8005a7c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d00c      	beq.n	8007b84 <HAL_LPTIM_Init+0x25c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b72:	d10b      	bne.n	8007b8c <HAL_LPTIM_Init+0x264>
 8007b74:	e006      	b.n	8007b84 <HAL_LPTIM_Init+0x25c>
 8007b76:	bf00      	nop
 8007b78:	40007c00 	.word	0x40007c00
 8007b7c:	40009400 	.word	0x40009400
 8007b80:	08010b04 	.word	0x08010b04
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 031e 	bic.w	r3, r3, #30
 8007b8a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d005      	beq.n	8007ba4 <HAL_LPTIM_Init+0x27c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007b9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4b61      	ldr	r3, [pc, #388]	@ (8007d2c <HAL_LPTIM_Init+0x404>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007bb4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007bba:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8007bc0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8007bc6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d107      	bne.n	8007be6 <HAL_LPTIM_Init+0x2be>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007bde:	4313      	orrs	r3, r2
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d004      	beq.n	8007bf8 <HAL_LPTIM_Init+0x2d0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bf6:	d107      	bne.n	8007c08 <HAL_LPTIM_Init+0x2e0>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007c00:	4313      	orrs	r3, r2
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d00a      	beq.n	8007c2a <HAL_LPTIM_Init+0x302>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c1c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007c22:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a3e      	ldr	r2, [pc, #248]	@ (8007d30 <HAL_LPTIM_Init+0x408>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d141      	bne.n	8007cc0 <HAL_LPTIM_Init+0x398>
  {
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a3b      	ldr	r2, [pc, #236]	@ (8007d30 <HAL_LPTIM_Init+0x408>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d107      	bne.n	8007c56 <HAL_LPTIM_Init+0x32e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01d      	beq.n	8007c8a <HAL_LPTIM_Init+0x362>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d019      	beq.n	8007c8a <HAL_LPTIM_Init+0x362>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a36      	ldr	r2, [pc, #216]	@ (8007d34 <HAL_LPTIM_Init+0x40c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10f      	bne.n	8007c80 <HAL_LPTIM_Init+0x358>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d010      	beq.n	8007c8a <HAL_LPTIM_Init+0x362>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d00c      	beq.n	8007c8a <HAL_LPTIM_Init+0x362>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d008      	beq.n	8007c8a <HAL_LPTIM_Init+0x362>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d004      	beq.n	8007c8a <HAL_LPTIM_Init+0x362>
 8007c80:	f240 117f 	movw	r1, #383	@ 0x17f
 8007c84:	482c      	ldr	r0, [pc, #176]	@ (8007d38 <HAL_LPTIM_Init+0x410>)
 8007c86:	f7fe f881 	bl	8005d8c <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a28      	ldr	r2, [pc, #160]	@ (8007d30 <HAL_LPTIM_Init+0x408>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d107      	bne.n	8007ca4 <HAL_LPTIM_Init+0x37c>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d008      	beq.n	8007cae <HAL_LPTIM_Init+0x386>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d004      	beq.n	8007cae <HAL_LPTIM_Init+0x386>
 8007ca4:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007ca8:	4823      	ldr	r0, [pc, #140]	@ (8007d38 <HAL_LPTIM_Init+0x410>)
 8007caa:	f7fe f86f 	bl	8005d8c <assert_failed>

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	621a      	str	r2, [r3, #32]
 8007cbe:	e02b      	b.n	8007d18 <HAL_LPTIM_Init+0x3f0>
  }
  else
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8007d30 <HAL_LPTIM_Init+0x408>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d107      	bne.n	8007cda <HAL_LPTIM_Init+0x3b2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01d      	beq.n	8007d0e <HAL_LPTIM_Init+0x3e6>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d019      	beq.n	8007d0e <HAL_LPTIM_Init+0x3e6>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a15      	ldr	r2, [pc, #84]	@ (8007d34 <HAL_LPTIM_Init+0x40c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d10f      	bne.n	8007d04 <HAL_LPTIM_Init+0x3dc>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <HAL_LPTIM_Init+0x3e6>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d00c      	beq.n	8007d0e <HAL_LPTIM_Init+0x3e6>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d008      	beq.n	8007d0e <HAL_LPTIM_Init+0x3e6>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d004      	beq.n	8007d0e <HAL_LPTIM_Init+0x3e6>
 8007d04:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8007d08:	480b      	ldr	r0, [pc, #44]	@ (8007d38 <HAL_LPTIM_Init+0x410>)
 8007d0a:	f7fe f83f 	bl	8005d8c <assert_failed>

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d16:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	ff19f1fe 	.word	0xff19f1fe
 8007d30:	40007c00 	.word	0x40007c00
 8007d34:	40009400 	.word	0x40009400
 8007d38:	08010b04 	.word	0x08010b04

08007d3c <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t          tmpcfgr;

  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8007e48 <HAL_LPTIM_Encoder_Start+0x10c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_LPTIM_Encoder_Start+0x1e>
 8007d50:	f240 41ca 	movw	r1, #1226	@ 0x4ca
 8007d54:	483d      	ldr	r0, [pc, #244]	@ (8007e4c <HAL_LPTIM_Encoder_Start+0x110>)
 8007d56:	f7fe f819 	bl	8005d8c <assert_failed>
  assert_param(IS_LPTIM_PERIOD(Period));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_LPTIM_Encoder_Start+0x2c>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d66:	d304      	bcc.n	8007d72 <HAL_LPTIM_Encoder_Start+0x36>
 8007d68:	f240 41cb 	movw	r1, #1227	@ 0x4cb
 8007d6c:	4837      	ldr	r0, [pc, #220]	@ (8007e4c <HAL_LPTIM_Encoder_Start+0x110>)
 8007d6e:	f7fe f80d 	bl	8005d8c <assert_failed>
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d004      	beq.n	8007d84 <HAL_LPTIM_Encoder_Start+0x48>
 8007d7a:	f240 41cc 	movw	r1, #1228	@ 0x4cc
 8007d7e:	4833      	ldr	r0, [pc, #204]	@ (8007e4c <HAL_LPTIM_Encoder_Start+0x110>)
 8007d80:	f7fe f804 	bl	8005d8c <assert_failed>
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <HAL_LPTIM_Encoder_Start+0x5a>
 8007d8c:	f240 41cd 	movw	r1, #1229	@ 0x4cd
 8007d90:	482e      	ldr	r0, [pc, #184]	@ (8007e4c <HAL_LPTIM_Encoder_Start+0x110>)
 8007d92:	f7fd fffb 	bl	8005d8c <assert_failed>
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <HAL_LPTIM_Encoder_Start+0x7c>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d008      	beq.n	8007db8 <HAL_LPTIM_Encoder_Start+0x7c>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d004      	beq.n	8007db8 <HAL_LPTIM_Encoder_Start+0x7c>
 8007dae:	f240 41ce 	movw	r1, #1230	@ 0x4ce
 8007db2:	4826      	ldr	r0, [pc, #152]	@ (8007e4c <HAL_LPTIM_Encoder_Start+0x110>)
 8007db4:	f7fd ffea 	bl	8005d8c <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0306 	bic.w	r3, r3, #6
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007df0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f042 0201 	orr.w	r2, r2, #1
 8007e00:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2210      	movs	r2, #16
 8007e08:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007e12:	2110      	movs	r1, #16
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f93d 	bl	8008094 <LPTIM_WaitForFlag>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d101      	bne.n	8007e24 <HAL_LPTIM_Encoder_Start+0xe8>
  {
    return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e00c      	b.n	8007e3e <HAL_LPTIM_Encoder_Start+0x102>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691a      	ldr	r2, [r3, #16]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0204 	orr.w	r2, r2, #4
 8007e32:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40007c00 	.word	0x40007c00
 8007e4c:	08010b04 	.word	0x08010b04

08007e50 <HAL_LPTIM_Encoder_Stop>:
  * @brief  Stop the Encoder interface.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a13      	ldr	r2, [pc, #76]	@ (8007eac <HAL_LPTIM_Encoder_Stop+0x5c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_LPTIM_Encoder_Stop+0x1c>
 8007e62:	f240 5103 	movw	r1, #1283	@ 0x503
 8007e66:	4812      	ldr	r0, [pc, #72]	@ (8007eb0 <HAL_LPTIM_Encoder_Stop+0x60>)
 8007e68:	f7fd ff90 	bl	8005d8c <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f93d 	bl	80080f4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f8fb 	bl	8008076 <HAL_LPTIM_GetState>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d101      	bne.n	8007e8a <HAL_LPTIM_Encoder_Stop+0x3a>
  {
    return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e00c      	b.n	8007ea4 <HAL_LPTIM_Encoder_Stop+0x54>
  }

  /* Reset ENC bit to disable the encoder interface */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007e98:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40007c00 	.word	0x40007c00
 8007eb0:	08010b04 	.word	0x08010b04

08007eb4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d10d      	bne.n	8007ee6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d106      	bne.n	8007ee6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2201      	movs	r2, #1
 8007ede:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f882 	bl	8007fea <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d10d      	bne.n	8007f10 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d106      	bne.n	8007f10 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2202      	movs	r2, #2
 8007f08:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f877 	bl	8007ffe <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d10d      	bne.n	8007f3a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d106      	bne.n	8007f3a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2204      	movs	r2, #4
 8007f32:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f86c 	bl	8008012 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d10d      	bne.n	8007f64 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b08      	cmp	r3, #8
 8007f54:	d106      	bne.n	8007f64 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2208      	movs	r2, #8
 8007f5c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f861 	bl	8008026 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	2b10      	cmp	r3, #16
 8007f70:	d10d      	bne.n	8007f8e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d106      	bne.n	8007f8e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2210      	movs	r2, #16
 8007f86:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f856 	bl	800803a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d10d      	bne.n	8007fb8 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d106      	bne.n	8007fb8 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f84b 	bl	800804e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc2:	2b40      	cmp	r3, #64	@ 0x40
 8007fc4:	d10d      	bne.n	8007fe2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd0:	2b40      	cmp	r3, #64	@ 0x40
 8007fd2:	d106      	bne.n	8007fe2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2240      	movs	r2, #64	@ 0x40
 8007fda:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f840 	bl	8008062 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008084:	b2db      	uxtb	r3, r3
}
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
	...

08008094 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80080a2:	4b12      	ldr	r3, [pc, #72]	@ (80080ec <LPTIM_WaitForFlag+0x58>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a12      	ldr	r2, [pc, #72]	@ (80080f0 <LPTIM_WaitForFlag+0x5c>)
 80080a8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ac:	0b9b      	lsrs	r3, r3, #14
 80080ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080b2:	fb02 f303 	mul.w	r3, r2, r3
 80080b6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	4013      	ands	r3, r2
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d002      	beq.n	80080de <LPTIM_WaitForFlag+0x4a>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1ec      	bne.n	80080b8 <LPTIM_WaitForFlag+0x24>

  return result;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	20000014 	.word	0x20000014
 80080f0:	d1b71759 	.word	0xd1b71759

080080f4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08c      	sub	sp, #48	@ 0x30
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008100:	f3ef 8310 	mrs	r3, PRIMASK
 8008104:	60fb      	str	r3, [r7, #12]
  return(result);
 8008106:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800810a:	2301      	movs	r3, #1
 800810c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f383 8810 	msr	PRIMASK, r3
}
 8008114:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a73      	ldr	r2, [pc, #460]	@ (80082e8 <LPTIM_Disable+0x1f4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d003      	beq.n	8008128 <LPTIM_Disable+0x34>
 8008120:	4a72      	ldr	r2, [pc, #456]	@ (80082ec <LPTIM_Disable+0x1f8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d007      	beq.n	8008136 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008126:	e00d      	b.n	8008144 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008128:	4b71      	ldr	r3, [pc, #452]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 800812a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008132:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008134:	e006      	b.n	8008144 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008136:	4b6e      	ldr	r3, [pc, #440]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800813c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008140:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008142:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a5d      	ldr	r2, [pc, #372]	@ (80082e8 <LPTIM_Disable+0x1f4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d003      	beq.n	800817e <LPTIM_Disable+0x8a>
 8008176:	4a5d      	ldr	r2, [pc, #372]	@ (80082ec <LPTIM_Disable+0x1f8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00d      	beq.n	8008198 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800817c:	e019      	b.n	80081b2 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800817e:	4b5c      	ldr	r3, [pc, #368]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 8008180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008182:	4a5b      	ldr	r2, [pc, #364]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 8008184:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008188:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800818a:	4b59      	ldr	r3, [pc, #356]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 800818c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818e:	4a58      	ldr	r2, [pc, #352]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 8008190:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008194:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8008196:	e00c      	b.n	80081b2 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008198:	4b55      	ldr	r3, [pc, #340]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 800819a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819c:	4a54      	ldr	r2, [pc, #336]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 800819e:	f043 0320 	orr.w	r3, r3, #32
 80081a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80081a4:	4b52      	ldr	r3, [pc, #328]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 80081a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a8:	4a51      	ldr	r2, [pc, #324]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 80081aa:	f023 0320 	bic.w	r3, r3, #32
 80081ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 80081b0:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d102      	bne.n	80081be <LPTIM_Disable+0xca>
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d075      	beq.n	80082aa <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a49      	ldr	r2, [pc, #292]	@ (80082e8 <LPTIM_Disable+0x1f4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <LPTIM_Disable+0xdc>
 80081c8:	4a48      	ldr	r2, [pc, #288]	@ (80082ec <LPTIM_Disable+0x1f8>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d009      	beq.n	80081e2 <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80081ce:	e011      	b.n	80081f4 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80081d0:	4b47      	ldr	r3, [pc, #284]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 80081d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d6:	4a46      	ldr	r2, [pc, #280]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 80081d8:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80081dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80081e0:	e008      	b.n	80081f4 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80081e2:	4b43      	ldr	r3, [pc, #268]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 80081e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e8:	4a41      	ldr	r2, [pc, #260]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 80081ea:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80081ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80081f2:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01a      	beq.n	8008230 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691a      	ldr	r2, [r3, #16]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f042 0201 	orr.w	r2, r2, #1
 8008208:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008212:	2108      	movs	r1, #8
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff ff3d 	bl	8008094 <LPTIM_WaitForFlag>
 800821a:	4603      	mov	r3, r0
 800821c:	2b03      	cmp	r3, #3
 800821e:	d103      	bne.n	8008228 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2203      	movs	r2, #3
 8008224:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2208      	movs	r2, #8
 800822e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d01a      	beq.n	800826c <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0201 	orr.w	r2, r2, #1
 8008244:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800824e:	2110      	movs	r1, #16
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff ff1f 	bl	8008094 <LPTIM_WaitForFlag>
 8008256:	4603      	mov	r3, r0
 8008258:	2b03      	cmp	r3, #3
 800825a:	d103      	bne.n	8008264 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2203      	movs	r2, #3
 8008260:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2210      	movs	r2, #16
 800826a:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1d      	ldr	r2, [pc, #116]	@ (80082e8 <LPTIM_Disable+0x1f4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d003      	beq.n	800827e <LPTIM_Disable+0x18a>
 8008276:	4a1d      	ldr	r2, [pc, #116]	@ (80082ec <LPTIM_Disable+0x1f8>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00b      	beq.n	8008294 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800827c:	e015      	b.n	80082aa <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800827e:	4b1c      	ldr	r3, [pc, #112]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 8008280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008284:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008288:	4919      	ldr	r1, [pc, #100]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 800828a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828c:	4313      	orrs	r3, r2
 800828e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8008292:	e00a      	b.n	80082aa <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008294:	4b16      	ldr	r3, [pc, #88]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 8008296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800829a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800829e:	4914      	ldr	r1, [pc, #80]	@ (80082f0 <LPTIM_Disable+0x1fc>)
 80082a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 80082a8:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691a      	ldr	r2, [r3, #16]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0201 	bic.w	r2, r2, #1
 80082b8:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c0:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6a3a      	ldr	r2, [r7, #32]
 80082c8:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	621a      	str	r2, [r3, #32]
 80082d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f383 8810 	msr	PRIMASK, r3
}
 80082dc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80082de:	bf00      	nop
 80082e0:	3730      	adds	r7, #48	@ 0x30
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40007c00 	.word	0x40007c00
 80082ec:	40009400 	.word	0x40009400
 80082f0:	40021000 	.word	0x40021000

080082f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80082f8:	4b04      	ldr	r3, [pc, #16]	@ (800830c <HAL_PWREx_GetVoltageRange+0x18>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8008300:	4618      	mov	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	40007000 	.word	0x40007000

08008310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800831e:	d007      	beq.n	8008330 <HAL_PWREx_ControlVoltageScaling+0x20>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008326:	d003      	beq.n	8008330 <HAL_PWREx_ControlVoltageScaling+0x20>
 8008328:	21a7      	movs	r1, #167	@ 0xa7
 800832a:	4826      	ldr	r0, [pc, #152]	@ (80083c4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800832c:	f7fd fd2e 	bl	8005d8c <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008336:	d130      	bne.n	800839a <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008338:	4b23      	ldr	r3, [pc, #140]	@ (80083c8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008344:	d038      	beq.n	80083b8 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008346:	4b20      	ldr	r3, [pc, #128]	@ (80083c8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800834e:	4a1e      	ldr	r2, [pc, #120]	@ (80083c8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8008350:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008354:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008356:	4b1d      	ldr	r3, [pc, #116]	@ (80083cc <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2232      	movs	r2, #50	@ 0x32
 800835c:	fb02 f303 	mul.w	r3, r2, r3
 8008360:	4a1b      	ldr	r2, [pc, #108]	@ (80083d0 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	0c9b      	lsrs	r3, r3, #18
 8008368:	3301      	adds	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800836c:	e002      	b.n	8008374 <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3b01      	subs	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008374:	4b14      	ldr	r3, [pc, #80]	@ (80083c8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800837c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008380:	d102      	bne.n	8008388 <HAL_PWREx_ControlVoltageScaling+0x78>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1f2      	bne.n	800836e <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008388:	4b0f      	ldr	r3, [pc, #60]	@ (80083c8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008394:	d110      	bne.n	80083b8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e00f      	b.n	80083ba <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800839a:	4b0b      	ldr	r3, [pc, #44]	@ (80083c8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80083a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083a6:	d007      	beq.n	80083b8 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083a8:	4b07      	ldr	r3, [pc, #28]	@ (80083c8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80083b0:	4a05      	ldr	r2, [pc, #20]	@ (80083c8 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80083b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80083b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	08010b40 	.word	0x08010b40
 80083c8:	40007000 	.word	0x40007000
 80083cc:	20000014 	.word	0x20000014
 80083d0:	431bde83 	.word	0x431bde83

080083d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f000 bcef 	b.w	8008dc6 <HAL_RCC_OscConfig+0x9f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d008      	beq.n	8008402 <HAL_RCC_OscConfig+0x2e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b1f      	cmp	r3, #31
 80083f6:	d904      	bls.n	8008402 <HAL_RCC_OscConfig+0x2e>
 80083f8:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80083fc:	489a      	ldr	r0, [pc, #616]	@ (8008668 <HAL_RCC_OscConfig+0x294>)
 80083fe:	f7fd fcc5 	bl	8005d8c <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008402:	4b9a      	ldr	r3, [pc, #616]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 030c 	and.w	r3, r3, #12
 800840a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800840c:	4b97      	ldr	r3, [pc, #604]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 813d 	beq.w	800869e <HAL_RCC_OscConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <HAL_RCC_OscConfig+0x6a>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d004      	beq.n	800843e <HAL_RCC_OscConfig+0x6a>
 8008434:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8008438:	488b      	ldr	r0, [pc, #556]	@ (8008668 <HAL_RCC_OscConfig+0x294>)
 800843a:	f7fd fca7 	bl	8005d8c <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	2bff      	cmp	r3, #255	@ 0xff
 8008444:	d904      	bls.n	8008450 <HAL_RCC_OscConfig+0x7c>
 8008446:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800844a:	4887      	ldr	r0, [pc, #540]	@ (8008668 <HAL_RCC_OscConfig+0x294>)
 800844c:	f7fd fc9e 	bl	8005d8c <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d030      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	2b10      	cmp	r3, #16
 800845e:	d02c      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	2b20      	cmp	r3, #32
 8008466:	d028      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	2b30      	cmp	r3, #48	@ 0x30
 800846e:	d024      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	2b40      	cmp	r3, #64	@ 0x40
 8008476:	d020      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	2b50      	cmp	r3, #80	@ 0x50
 800847e:	d01c      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	2b60      	cmp	r3, #96	@ 0x60
 8008486:	d018      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	2b70      	cmp	r3, #112	@ 0x70
 800848e:	d014      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	2b80      	cmp	r3, #128	@ 0x80
 8008496:	d010      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	2b90      	cmp	r3, #144	@ 0x90
 800849e:	d00c      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80084a6:	d008      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	2bb0      	cmp	r3, #176	@ 0xb0
 80084ae:	d004      	beq.n	80084ba <HAL_RCC_OscConfig+0xe6>
 80084b0:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80084b4:	486c      	ldr	r0, [pc, #432]	@ (8008668 <HAL_RCC_OscConfig+0x294>)
 80084b6:	f7fd fc69 	bl	8005d8c <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d007      	beq.n	80084d0 <HAL_RCC_OscConfig+0xfc>
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	2b0c      	cmp	r3, #12
 80084c4:	f040 808e 	bne.w	80085e4 <HAL_RCC_OscConfig+0x210>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	f040 808a 	bne.w	80085e4 <HAL_RCC_OscConfig+0x210>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80084d0:	4b66      	ldr	r3, [pc, #408]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d006      	beq.n	80084ea <HAL_RCC_OscConfig+0x116>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f000 bc6e 	b.w	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1a      	ldr	r2, [r3, #32]
 80084ee:	4b5f      	ldr	r3, [pc, #380]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0308 	and.w	r3, r3, #8
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <HAL_RCC_OscConfig+0x130>
 80084fa:	4b5c      	ldr	r3, [pc, #368]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008502:	e005      	b.n	8008510 <HAL_RCC_OscConfig+0x13c>
 8008504:	4b59      	ldr	r3, [pc, #356]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800850a:	091b      	lsrs	r3, r3, #4
 800850c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008510:	4293      	cmp	r3, r2
 8008512:	d224      	bcs.n	800855e <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fec1 	bl	80092a0 <RCC_SetFlashLatencyFromMSIRange>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	f000 bc4e 	b.w	8008dc6 <HAL_RCC_OscConfig+0x9f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800852a:	4b50      	ldr	r3, [pc, #320]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a4f      	ldr	r2, [pc, #316]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008530:	f043 0308 	orr.w	r3, r3, #8
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	4b4d      	ldr	r3, [pc, #308]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	494a      	ldr	r1, [pc, #296]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008544:	4313      	orrs	r3, r2
 8008546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008548:	4b48      	ldr	r3, [pc, #288]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	4945      	ldr	r1, [pc, #276]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008558:	4313      	orrs	r3, r2
 800855a:	604b      	str	r3, [r1, #4]
 800855c:	e026      	b.n	80085ac <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800855e:	4b43      	ldr	r3, [pc, #268]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a42      	ldr	r2, [pc, #264]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008564:	f043 0308 	orr.w	r3, r3, #8
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	4b40      	ldr	r3, [pc, #256]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	493d      	ldr	r1, [pc, #244]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008578:	4313      	orrs	r3, r2
 800857a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800857c:	4b3b      	ldr	r3, [pc, #236]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	4938      	ldr	r1, [pc, #224]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800858c:	4313      	orrs	r3, r2
 800858e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fe80 	bl	80092a0 <RCC_SetFlashLatencyFromMSIRange>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	f000 bc0d 	b.w	8008dc6 <HAL_RCC_OscConfig+0x9f2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80085ac:	f000 fdb4 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 80085b0:	4602      	mov	r2, r0
 80085b2:	4b2e      	ldr	r3, [pc, #184]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	091b      	lsrs	r3, r3, #4
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	492c      	ldr	r1, [pc, #176]	@ (8008670 <HAL_RCC_OscConfig+0x29c>)
 80085be:	5ccb      	ldrb	r3, [r1, r3]
 80085c0:	f003 031f 	and.w	r3, r3, #31
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
 80085c8:	4a2a      	ldr	r2, [pc, #168]	@ (8008674 <HAL_RCC_OscConfig+0x2a0>)
 80085ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80085cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008678 <HAL_RCC_OscConfig+0x2a4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe f9b5 	bl	8006940 <HAL_InitTick>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d05d      	beq.n	800869c <HAL_RCC_OscConfig+0x2c8>
        {
          return status;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	e3f0      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d032      	beq.n	8008652 <HAL_RCC_OscConfig+0x27e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80085ec:	4b1f      	ldr	r3, [pc, #124]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a1e      	ldr	r2, [pc, #120]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 80085f2:	f043 0301 	orr.w	r3, r3, #1
 80085f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085f8:	f7fe f9f2 	bl	80069e0 <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085fe:	e008      	b.n	8008612 <HAL_RCC_OscConfig+0x23e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008600:	f7fe f9ee 	bl	80069e0 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b02      	cmp	r3, #2
 800860c:	d901      	bls.n	8008612 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e3d9      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008612:	4b16      	ldr	r3, [pc, #88]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0f0      	beq.n	8008600 <HAL_RCC_OscConfig+0x22c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800861e:	4b13      	ldr	r3, [pc, #76]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a12      	ldr	r2, [pc, #72]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008624:	f043 0308 	orr.w	r3, r3, #8
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	4b10      	ldr	r3, [pc, #64]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	490d      	ldr	r1, [pc, #52]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008638:	4313      	orrs	r3, r2
 800863a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800863c:	4b0b      	ldr	r3, [pc, #44]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	4908      	ldr	r1, [pc, #32]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 800864c:	4313      	orrs	r3, r2
 800864e:	604b      	str	r3, [r1, #4]
 8008650:	e025      	b.n	800869e <HAL_RCC_OscConfig+0x2ca>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008652:	4b06      	ldr	r3, [pc, #24]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a05      	ldr	r2, [pc, #20]	@ (800866c <HAL_RCC_OscConfig+0x298>)
 8008658:	f023 0301 	bic.w	r3, r3, #1
 800865c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800865e:	f7fe f9bf 	bl	80069e0 <HAL_GetTick>
 8008662:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008664:	e013      	b.n	800868e <HAL_RCC_OscConfig+0x2ba>
 8008666:	bf00      	nop
 8008668:	08010b7c 	.word	0x08010b7c
 800866c:	40021000 	.word	0x40021000
 8008670:	08010d58 	.word	0x08010d58
 8008674:	20000014 	.word	0x20000014
 8008678:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800867c:	f7fe f9b0 	bl	80069e0 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e39b      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800868e:	4b97      	ldr	r3, [pc, #604]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0302 	and.w	r3, r3, #2
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1f0      	bne.n	800867c <HAL_RCC_OscConfig+0x2a8>
 800869a:	e000      	b.n	800869e <HAL_RCC_OscConfig+0x2ca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800869c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d07e      	beq.n	80087a8 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00e      	beq.n	80086d0 <HAL_RCC_OscConfig+0x2fc>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086ba:	d009      	beq.n	80086d0 <HAL_RCC_OscConfig+0x2fc>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086c4:	d004      	beq.n	80086d0 <HAL_RCC_OscConfig+0x2fc>
 80086c6:	f240 2119 	movw	r1, #537	@ 0x219
 80086ca:	4889      	ldr	r0, [pc, #548]	@ (80088f0 <HAL_RCC_OscConfig+0x51c>)
 80086cc:	f7fd fb5e 	bl	8005d8c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	2b08      	cmp	r3, #8
 80086d4:	d005      	beq.n	80086e2 <HAL_RCC_OscConfig+0x30e>
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b0c      	cmp	r3, #12
 80086da:	d10e      	bne.n	80086fa <HAL_RCC_OscConfig+0x326>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d10b      	bne.n	80086fa <HAL_RCC_OscConfig+0x326>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e2:	4b82      	ldr	r3, [pc, #520]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d05b      	beq.n	80087a6 <HAL_RCC_OscConfig+0x3d2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d157      	bne.n	80087a6 <HAL_RCC_OscConfig+0x3d2>
      {
        return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e365      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008702:	d106      	bne.n	8008712 <HAL_RCC_OscConfig+0x33e>
 8008704:	4b79      	ldr	r3, [pc, #484]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a78      	ldr	r2, [pc, #480]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800870a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	e01d      	b.n	800874e <HAL_RCC_OscConfig+0x37a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800871a:	d10c      	bne.n	8008736 <HAL_RCC_OscConfig+0x362>
 800871c:	4b73      	ldr	r3, [pc, #460]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a72      	ldr	r2, [pc, #456]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008722:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	4b70      	ldr	r3, [pc, #448]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a6f      	ldr	r2, [pc, #444]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800872e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	e00b      	b.n	800874e <HAL_RCC_OscConfig+0x37a>
 8008736:	4b6d      	ldr	r3, [pc, #436]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a6c      	ldr	r2, [pc, #432]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800873c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	4b6a      	ldr	r3, [pc, #424]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a69      	ldr	r2, [pc, #420]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800874c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d013      	beq.n	800877e <HAL_RCC_OscConfig+0x3aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008756:	f7fe f943 	bl	80069e0 <HAL_GetTick>
 800875a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800875c:	e008      	b.n	8008770 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800875e:	f7fe f93f 	bl	80069e0 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	2b64      	cmp	r3, #100	@ 0x64
 800876a:	d901      	bls.n	8008770 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e32a      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008770:	4b5e      	ldr	r3, [pc, #376]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0f0      	beq.n	800875e <HAL_RCC_OscConfig+0x38a>
 800877c:	e014      	b.n	80087a8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800877e:	f7fe f92f 	bl	80069e0 <HAL_GetTick>
 8008782:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008784:	e008      	b.n	8008798 <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008786:	f7fe f92b 	bl	80069e0 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b64      	cmp	r3, #100	@ 0x64
 8008792:	d901      	bls.n	8008798 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e316      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008798:	4b54      	ldr	r3, [pc, #336]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1f0      	bne.n	8008786 <HAL_RCC_OscConfig+0x3b2>
 80087a4:	e000      	b.n	80087a8 <HAL_RCC_OscConfig+0x3d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d077      	beq.n	80088a4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d009      	beq.n	80087d0 <HAL_RCC_OscConfig+0x3fc>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087c4:	d004      	beq.n	80087d0 <HAL_RCC_OscConfig+0x3fc>
 80087c6:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80087ca:	4849      	ldr	r0, [pc, #292]	@ (80088f0 <HAL_RCC_OscConfig+0x51c>)
 80087cc:	f7fd fade 	bl	8005d8c <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b1f      	cmp	r3, #31
 80087d6:	d904      	bls.n	80087e2 <HAL_RCC_OscConfig+0x40e>
 80087d8:	f240 214d 	movw	r1, #589	@ 0x24d
 80087dc:	4844      	ldr	r0, [pc, #272]	@ (80088f0 <HAL_RCC_OscConfig+0x51c>)
 80087de:	f7fd fad5 	bl	8005d8c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d005      	beq.n	80087f4 <HAL_RCC_OscConfig+0x420>
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	2b0c      	cmp	r3, #12
 80087ec:	d119      	bne.n	8008822 <HAL_RCC_OscConfig+0x44e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d116      	bne.n	8008822 <HAL_RCC_OscConfig+0x44e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087f4:	4b3d      	ldr	r3, [pc, #244]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_RCC_OscConfig+0x438>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e2dc      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800880c:	4b37      	ldr	r3, [pc, #220]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	061b      	lsls	r3, r3, #24
 800881a:	4934      	ldr	r1, [pc, #208]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800881c:	4313      	orrs	r3, r2
 800881e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008820:	e040      	b.n	80088a4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d023      	beq.n	8008872 <HAL_RCC_OscConfig+0x49e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800882a:	4b30      	ldr	r3, [pc, #192]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a2f      	ldr	r2, [pc, #188]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008836:	f7fe f8d3 	bl	80069e0 <HAL_GetTick>
 800883a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800883c:	e008      	b.n	8008850 <HAL_RCC_OscConfig+0x47c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800883e:	f7fe f8cf 	bl	80069e0 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e2ba      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008850:	4b26      	ldr	r3, [pc, #152]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f0      	beq.n	800883e <HAL_RCC_OscConfig+0x46a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800885c:	4b23      	ldr	r3, [pc, #140]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	061b      	lsls	r3, r3, #24
 800886a:	4920      	ldr	r1, [pc, #128]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800886c:	4313      	orrs	r3, r2
 800886e:	604b      	str	r3, [r1, #4]
 8008870:	e018      	b.n	80088a4 <HAL_RCC_OscConfig+0x4d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008872:	4b1e      	ldr	r3, [pc, #120]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a1d      	ldr	r2, [pc, #116]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 8008878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800887c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887e:	f7fe f8af 	bl	80069e0 <HAL_GetTick>
 8008882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008884:	e008      	b.n	8008898 <HAL_RCC_OscConfig+0x4c4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008886:	f7fe f8ab 	bl	80069e0 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d901      	bls.n	8008898 <HAL_RCC_OscConfig+0x4c4>
          {
            return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e296      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008898:	4b14      	ldr	r3, [pc, #80]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1f0      	bne.n	8008886 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d04e      	beq.n	800894e <HAL_RCC_OscConfig+0x57a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <HAL_RCC_OscConfig+0x4f6>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d004      	beq.n	80088ca <HAL_RCC_OscConfig+0x4f6>
 80088c0:	f240 218d 	movw	r1, #653	@ 0x28d
 80088c4:	480a      	ldr	r0, [pc, #40]	@ (80088f0 <HAL_RCC_OscConfig+0x51c>)
 80088c6:	f7fd fa61 	bl	8005d8c <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d021      	beq.n	8008916 <HAL_RCC_OscConfig+0x542>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088d2:	4b06      	ldr	r3, [pc, #24]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 80088d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088d8:	4a04      	ldr	r2, [pc, #16]	@ (80088ec <HAL_RCC_OscConfig+0x518>)
 80088da:	f043 0301 	orr.w	r3, r3, #1
 80088de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e2:	f7fe f87d 	bl	80069e0 <HAL_GetTick>
 80088e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088e8:	e00d      	b.n	8008906 <HAL_RCC_OscConfig+0x532>
 80088ea:	bf00      	nop
 80088ec:	40021000 	.word	0x40021000
 80088f0:	08010b7c 	.word	0x08010b7c
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f4:	f7fe f874 	bl	80069e0 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e25f      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008906:	4b66      	ldr	r3, [pc, #408]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d0ef      	beq.n	80088f4 <HAL_RCC_OscConfig+0x520>
 8008914:	e01b      	b.n	800894e <HAL_RCC_OscConfig+0x57a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008916:	4b62      	ldr	r3, [pc, #392]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800891c:	4a60      	ldr	r2, [pc, #384]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008926:	f7fe f85b 	bl	80069e0 <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800892c:	e008      	b.n	8008940 <HAL_RCC_OscConfig+0x56c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800892e:	f7fe f857 	bl	80069e0 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e242      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008940:	4b57      	ldr	r3, [pc, #348]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1ef      	bne.n	800892e <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 80b8 	beq.w	8008acc <HAL_RCC_OscConfig+0x6f8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800895c:	2300      	movs	r3, #0
 800895e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00c      	beq.n	8008982 <HAL_RCC_OscConfig+0x5ae>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d008      	beq.n	8008982 <HAL_RCC_OscConfig+0x5ae>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b05      	cmp	r3, #5
 8008976:	d004      	beq.n	8008982 <HAL_RCC_OscConfig+0x5ae>
 8008978:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 800897c:	4849      	ldr	r0, [pc, #292]	@ (8008aa4 <HAL_RCC_OscConfig+0x6d0>)
 800897e:	f7fd fa05 	bl	8005d8c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008982:	4b47      	ldr	r3, [pc, #284]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10d      	bne.n	80089aa <HAL_RCC_OscConfig+0x5d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800898e:	4b44      	ldr	r3, [pc, #272]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008992:	4a43      	ldr	r2, [pc, #268]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008998:	6593      	str	r3, [r2, #88]	@ 0x58
 800899a:	4b41      	ldr	r3, [pc, #260]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 800899c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089a2:	60bb      	str	r3, [r7, #8]
 80089a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089a6:	2301      	movs	r3, #1
 80089a8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089aa:	4b3f      	ldr	r3, [pc, #252]	@ (8008aa8 <HAL_RCC_OscConfig+0x6d4>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d118      	bne.n	80089e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089b6:	4b3c      	ldr	r3, [pc, #240]	@ (8008aa8 <HAL_RCC_OscConfig+0x6d4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a3b      	ldr	r2, [pc, #236]	@ (8008aa8 <HAL_RCC_OscConfig+0x6d4>)
 80089bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089c2:	f7fe f80d 	bl	80069e0 <HAL_GetTick>
 80089c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ca:	f7fe f809 	bl	80069e0 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e1f4      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089dc:	4b32      	ldr	r3, [pc, #200]	@ (8008aa8 <HAL_RCC_OscConfig+0x6d4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0f0      	beq.n	80089ca <HAL_RCC_OscConfig+0x5f6>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d108      	bne.n	8008a02 <HAL_RCC_OscConfig+0x62e>
 80089f0:	4b2b      	ldr	r3, [pc, #172]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 80089f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f6:	4a2a      	ldr	r2, [pc, #168]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 80089f8:	f043 0301 	orr.w	r3, r3, #1
 80089fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a00:	e024      	b.n	8008a4c <HAL_RCC_OscConfig+0x678>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d110      	bne.n	8008a2c <HAL_RCC_OscConfig+0x658>
 8008a0a:	4b25      	ldr	r3, [pc, #148]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a10:	4a23      	ldr	r2, [pc, #140]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a12:	f043 0304 	orr.w	r3, r3, #4
 8008a16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a1a:	4b21      	ldr	r3, [pc, #132]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a20:	4a1f      	ldr	r2, [pc, #124]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a2a:	e00f      	b.n	8008a4c <HAL_RCC_OscConfig+0x678>
 8008a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a32:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a3c:	4b18      	ldr	r3, [pc, #96]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a42:	4a17      	ldr	r2, [pc, #92]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a44:	f023 0304 	bic.w	r3, r3, #4
 8008a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d016      	beq.n	8008a82 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a54:	f7fd ffc4 	bl	80069e0 <HAL_GetTick>
 8008a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a5a:	e00a      	b.n	8008a72 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a5c:	f7fd ffc0 	bl	80069e0 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e1a9      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a72:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <HAL_RCC_OscConfig+0x6cc>)
 8008a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0ed      	beq.n	8008a5c <HAL_RCC_OscConfig+0x688>
 8008a80:	e01b      	b.n	8008aba <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a82:	f7fd ffad 	bl	80069e0 <HAL_GetTick>
 8008a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a88:	e010      	b.n	8008aac <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a8a:	f7fd ffa9 	bl	80069e0 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d907      	bls.n	8008aac <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e192      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
 8008aa0:	40021000 	.word	0x40021000
 8008aa4:	08010b7c 	.word	0x08010b7c
 8008aa8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008aac:	4b98      	ldr	r3, [pc, #608]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e7      	bne.n	8008a8a <HAL_RCC_OscConfig+0x6b6>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008aba:	7ffb      	ldrb	r3, [r7, #31]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d105      	bne.n	8008acc <HAL_RCC_OscConfig+0x6f8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ac0:	4b93      	ldr	r3, [pc, #588]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac4:	4a92      	ldr	r2, [pc, #584]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008aca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00c      	beq.n	8008aee <HAL_RCC_OscConfig+0x71a>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d008      	beq.n	8008aee <HAL_RCC_OscConfig+0x71a>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d004      	beq.n	8008aee <HAL_RCC_OscConfig+0x71a>
 8008ae4:	f240 316e 	movw	r1, #878	@ 0x36e
 8008ae8:	488a      	ldr	r0, [pc, #552]	@ (8008d14 <HAL_RCC_OscConfig+0x940>)
 8008aea:	f7fd f94f 	bl	8005d8c <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8166 	beq.w	8008dc4 <HAL_RCC_OscConfig+0x9f0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	f040 813c 	bne.w	8008d7a <HAL_RCC_OscConfig+0x9a6>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d010      	beq.n	8008b2c <HAL_RCC_OscConfig+0x758>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d00c      	beq.n	8008b2c <HAL_RCC_OscConfig+0x758>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d008      	beq.n	8008b2c <HAL_RCC_OscConfig+0x758>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d004      	beq.n	8008b2c <HAL_RCC_OscConfig+0x758>
 8008b22:	f240 3176 	movw	r1, #886	@ 0x376
 8008b26:	487b      	ldr	r0, [pc, #492]	@ (8008d14 <HAL_RCC_OscConfig+0x940>)
 8008b28:	f7fd f930 	bl	8005d8c <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <HAL_RCC_OscConfig+0x768>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d904      	bls.n	8008b46 <HAL_RCC_OscConfig+0x772>
 8008b3c:	f240 3177 	movw	r1, #887	@ 0x377
 8008b40:	4874      	ldr	r0, [pc, #464]	@ (8008d14 <HAL_RCC_OscConfig+0x940>)
 8008b42:	f7fd f923 	bl	8005d8c <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b4a:	2b07      	cmp	r3, #7
 8008b4c:	d903      	bls.n	8008b56 <HAL_RCC_OscConfig+0x782>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b52:	2b56      	cmp	r3, #86	@ 0x56
 8008b54:	d904      	bls.n	8008b60 <HAL_RCC_OscConfig+0x78c>
 8008b56:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8008b5a:	486e      	ldr	r0, [pc, #440]	@ (8008d14 <HAL_RCC_OscConfig+0x940>)
 8008b5c:	f7fd f916 	bl	8005d8c <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b64:	2b07      	cmp	r3, #7
 8008b66:	d008      	beq.n	8008b7a <HAL_RCC_OscConfig+0x7a6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6c:	2b11      	cmp	r3, #17
 8008b6e:	d004      	beq.n	8008b7a <HAL_RCC_OscConfig+0x7a6>
 8008b70:	f240 317a 	movw	r1, #890	@ 0x37a
 8008b74:	4867      	ldr	r0, [pc, #412]	@ (8008d14 <HAL_RCC_OscConfig+0x940>)
 8008b76:	f7fd f909 	bl	8005d8c <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d010      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x7d0>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d00c      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x7d0>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8e:	2b06      	cmp	r3, #6
 8008b90:	d008      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x7d0>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b96:	2b08      	cmp	r3, #8
 8008b98:	d004      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x7d0>
 8008b9a:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8008b9e:	485d      	ldr	r0, [pc, #372]	@ (8008d14 <HAL_RCC_OscConfig+0x940>)
 8008ba0:	f7fd f8f4 	bl	8005d8c <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d010      	beq.n	8008bce <HAL_RCC_OscConfig+0x7fa>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	d00c      	beq.n	8008bce <HAL_RCC_OscConfig+0x7fa>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb8:	2b06      	cmp	r3, #6
 8008bba:	d008      	beq.n	8008bce <HAL_RCC_OscConfig+0x7fa>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d004      	beq.n	8008bce <HAL_RCC_OscConfig+0x7fa>
 8008bc4:	f240 317d 	movw	r1, #893	@ 0x37d
 8008bc8:	4852      	ldr	r0, [pc, #328]	@ (8008d14 <HAL_RCC_OscConfig+0x940>)
 8008bca:	f7fd f8df 	bl	8005d8c <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008bce:	4b50      	ldr	r3, [pc, #320]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f003 0203 	and.w	r2, r3, #3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d130      	bne.n	8008c44 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bec:	3b01      	subs	r3, #1
 8008bee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d127      	bne.n	8008c44 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bfe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d11f      	bne.n	8008c44 <HAL_RCC_OscConfig+0x870>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008c0e:	2a07      	cmp	r2, #7
 8008c10:	bf14      	ite	ne
 8008c12:	2201      	movne	r2, #1
 8008c14:	2200      	moveq	r2, #0
 8008c16:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d113      	bne.n	8008c44 <HAL_RCC_OscConfig+0x870>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d109      	bne.n	8008c44 <HAL_RCC_OscConfig+0x870>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d074      	beq.n	8008d2e <HAL_RCC_OscConfig+0x95a>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b0c      	cmp	r3, #12
 8008c48:	d06f      	beq.n	8008d2a <HAL_RCC_OscConfig+0x956>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008c4a:	4b31      	ldr	r3, [pc, #196]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d105      	bne.n	8008c62 <HAL_RCC_OscConfig+0x88e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008c56:	4b2e      	ldr	r3, [pc, #184]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <HAL_RCC_OscConfig+0x892>
#endif
            )
          {
            return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e0af      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008c66:	4b2a      	ldr	r3, [pc, #168]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a29      	ldr	r2, [pc, #164]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c72:	f7fd feb5 	bl	80069e0 <HAL_GetTick>
 8008c76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c78:	e008      	b.n	8008c8c <HAL_RCC_OscConfig+0x8b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c7a:	f7fd feb1 	bl	80069e0 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d901      	bls.n	8008c8c <HAL_RCC_OscConfig+0x8b8>
              {
                return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e09c      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c8c:	4b20      	ldr	r3, [pc, #128]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1f0      	bne.n	8008c7a <HAL_RCC_OscConfig+0x8a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c98:	4b1d      	ldr	r3, [pc, #116]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8008d18 <HAL_RCC_OscConfig+0x944>)
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008ca8:	3a01      	subs	r2, #1
 8008caa:	0112      	lsls	r2, r2, #4
 8008cac:	4311      	orrs	r1, r2
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008cb2:	0212      	lsls	r2, r2, #8
 8008cb4:	4311      	orrs	r1, r2
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008cba:	0852      	lsrs	r2, r2, #1
 8008cbc:	3a01      	subs	r2, #1
 8008cbe:	0552      	lsls	r2, r2, #21
 8008cc0:	4311      	orrs	r1, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008cc6:	0852      	lsrs	r2, r2, #1
 8008cc8:	3a01      	subs	r2, #1
 8008cca:	0652      	lsls	r2, r2, #25
 8008ccc:	4311      	orrs	r1, r2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008cd2:	0912      	lsrs	r2, r2, #4
 8008cd4:	0452      	lsls	r2, r2, #17
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	490d      	ldr	r1, [pc, #52]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008cde:	4b0c      	ldr	r3, [pc, #48]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008ce4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ce8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cea:	4b09      	ldr	r3, [pc, #36]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	4a08      	ldr	r2, [pc, #32]	@ (8008d10 <HAL_RCC_OscConfig+0x93c>)
 8008cf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cf4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008cf6:	f7fd fe73 	bl	80069e0 <HAL_GetTick>
 8008cfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cfc:	e00e      	b.n	8008d1c <HAL_RCC_OscConfig+0x948>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cfe:	f7fd fe6f 	bl	80069e0 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d907      	bls.n	8008d1c <HAL_RCC_OscConfig+0x948>
              {
                return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e05a      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
 8008d10:	40021000 	.word	0x40021000
 8008d14:	08010b7c 	.word	0x08010b7c
 8008d18:	f99d808c 	.word	0xf99d808c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0ea      	beq.n	8008cfe <HAL_RCC_OscConfig+0x92a>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d28:	e04c      	b.n	8008dc4 <HAL_RCC_OscConfig+0x9f0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e04b      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d2e:	4b28      	ldr	r3, [pc, #160]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d144      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x9f0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008d3a:	4b25      	ldr	r3, [pc, #148]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a24      	ldr	r2, [pc, #144]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d44:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d46:	4b22      	ldr	r3, [pc, #136]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	4a21      	ldr	r2, [pc, #132]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d50:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d52:	f7fd fe45 	bl	80069e0 <HAL_GetTick>
 8008d56:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d58:	e008      	b.n	8008d6c <HAL_RCC_OscConfig+0x998>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d5a:	f7fd fe41 	bl	80069e0 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d901      	bls.n	8008d6c <HAL_RCC_OscConfig+0x998>
            {
              return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e02c      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d6c:	4b18      	ldr	r3, [pc, #96]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0f0      	beq.n	8008d5a <HAL_RCC_OscConfig+0x986>
 8008d78:	e024      	b.n	8008dc4 <HAL_RCC_OscConfig+0x9f0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	2b0c      	cmp	r3, #12
 8008d7e:	d01f      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d80:	4b13      	ldr	r3, [pc, #76]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a12      	ldr	r2, [pc, #72]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8c:	f7fd fe28 	bl	80069e0 <HAL_GetTick>
 8008d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d92:	e008      	b.n	8008da6 <HAL_RCC_OscConfig+0x9d2>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d94:	f7fd fe24 	bl	80069e0 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0x9d2>
          {
            return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e00f      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008da6:	4b0a      	ldr	r3, [pc, #40]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f0      	bne.n	8008d94 <HAL_RCC_OscConfig+0x9c0>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008db2:	4b07      	ldr	r3, [pc, #28]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	4906      	ldr	r1, [pc, #24]	@ (8008dd0 <HAL_RCC_OscConfig+0x9fc>)
 8008db8:	4b06      	ldr	r3, [pc, #24]	@ (8008dd4 <HAL_RCC_OscConfig+0xa00>)
 8008dba:	4013      	ands	r3, r2
 8008dbc:	60cb      	str	r3, [r1, #12]
 8008dbe:	e001      	b.n	8008dc4 <HAL_RCC_OscConfig+0x9f0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <HAL_RCC_OscConfig+0x9f2>
      }
    }
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	feeefffc 	.word	0xfeeefffc

08008dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e186      	b.n	80090fa <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_RCC_ClockConfig+0x24>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b0f      	cmp	r3, #15
 8008dfa:	d904      	bls.n	8008e06 <HAL_RCC_ClockConfig+0x2e>
 8008dfc:	f240 4159 	movw	r1, #1113	@ 0x459
 8008e00:	4882      	ldr	r0, [pc, #520]	@ (800900c <HAL_RCC_ClockConfig+0x234>)
 8008e02:	f7fc ffc3 	bl	8005d8c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d010      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x56>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d00d      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x56>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d00a      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x56>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d007      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x56>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d004      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x56>
 8008e24:	f240 415a 	movw	r1, #1114	@ 0x45a
 8008e28:	4878      	ldr	r0, [pc, #480]	@ (800900c <HAL_RCC_ClockConfig+0x234>)
 8008e2a:	f7fc ffaf 	bl	8005d8c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e2e:	4b78      	ldr	r3, [pc, #480]	@ (8009010 <HAL_RCC_ClockConfig+0x238>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d910      	bls.n	8008e5e <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e3c:	4b74      	ldr	r3, [pc, #464]	@ (8009010 <HAL_RCC_ClockConfig+0x238>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f023 0207 	bic.w	r2, r3, #7
 8008e44:	4972      	ldr	r1, [pc, #456]	@ (8009010 <HAL_RCC_ClockConfig+0x238>)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e4c:	4b70      	ldr	r3, [pc, #448]	@ (8009010 <HAL_RCC_ClockConfig+0x238>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d001      	beq.n	8008e5e <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e14d      	b.n	80090fa <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d039      	beq.n	8008ede <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d024      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	2b80      	cmp	r3, #128	@ 0x80
 8008e78:	d020      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	2b90      	cmp	r3, #144	@ 0x90
 8008e80:	d01c      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	2ba0      	cmp	r3, #160	@ 0xa0
 8008e88:	d018      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	2bb0      	cmp	r3, #176	@ 0xb0
 8008e90:	d014      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e98:	d010      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	2bd0      	cmp	r3, #208	@ 0xd0
 8008ea0:	d00c      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	2be0      	cmp	r3, #224	@ 0xe0
 8008ea8:	d008      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2bf0      	cmp	r3, #240	@ 0xf0
 8008eb0:	d004      	beq.n	8008ebc <HAL_RCC_ClockConfig+0xe4>
 8008eb2:	f240 4172 	movw	r1, #1138	@ 0x472
 8008eb6:	4855      	ldr	r0, [pc, #340]	@ (800900c <HAL_RCC_ClockConfig+0x234>)
 8008eb8:	f7fc ff68 	bl	8005d8c <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689a      	ldr	r2, [r3, #8]
 8008ec0:	4b54      	ldr	r3, [pc, #336]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d908      	bls.n	8008ede <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ecc:	4b51      	ldr	r3, [pc, #324]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	494e      	ldr	r1, [pc, #312]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d061      	beq.n	8008fae <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d010      	beq.n	8008f14 <HAL_RCC_ClockConfig+0x13c>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d00c      	beq.n	8008f14 <HAL_RCC_ClockConfig+0x13c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d008      	beq.n	8008f14 <HAL_RCC_ClockConfig+0x13c>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d004      	beq.n	8008f14 <HAL_RCC_ClockConfig+0x13c>
 8008f0a:	f240 417d 	movw	r1, #1149	@ 0x47d
 8008f0e:	483f      	ldr	r0, [pc, #252]	@ (800900c <HAL_RCC_ClockConfig+0x234>)
 8008f10:	f7fc ff3c 	bl	8005d8c <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d107      	bne.n	8008f2c <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d121      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0e6      	b.n	80090fa <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d107      	bne.n	8008f44 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f34:	4b37      	ldr	r3, [pc, #220]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d115      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e0da      	b.n	80090fa <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d107      	bne.n	8008f5c <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f4c:	4b31      	ldr	r3, [pc, #196]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e0ce      	b.n	80090fa <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0c6      	b.n	80090fa <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f6c:	4b29      	ldr	r3, [pc, #164]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f023 0203 	bic.w	r2, r3, #3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4926      	ldr	r1, [pc, #152]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7e:	f7fd fd2f 	bl	80069e0 <HAL_GetTick>
 8008f82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f84:	e00a      	b.n	8008f9c <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f86:	f7fd fd2b 	bl	80069e0 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d901      	bls.n	8008f9c <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e0ae      	b.n	80090fa <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f003 020c 	and.w	r2, r3, #12
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d1eb      	bne.n	8008f86 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d010      	beq.n	8008fdc <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	4b15      	ldr	r3, [pc, #84]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d208      	bcs.n	8008fdc <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fca:	4b12      	ldr	r3, [pc, #72]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	490f      	ldr	r1, [pc, #60]	@ (8009014 <HAL_RCC_ClockConfig+0x23c>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8009010 <HAL_RCC_ClockConfig+0x238>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d216      	bcs.n	8009018 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fea:	4b09      	ldr	r3, [pc, #36]	@ (8009010 <HAL_RCC_ClockConfig+0x238>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f023 0207 	bic.w	r2, r3, #7
 8008ff2:	4907      	ldr	r1, [pc, #28]	@ (8009010 <HAL_RCC_ClockConfig+0x238>)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ffa:	4b05      	ldr	r3, [pc, #20]	@ (8009010 <HAL_RCC_ClockConfig+0x238>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d007      	beq.n	8009018 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e076      	b.n	80090fa <HAL_RCC_ClockConfig+0x322>
 800900c:	08010b7c 	.word	0x08010b7c
 8009010:	40022000 	.word	0x40022000
 8009014:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d025      	beq.n	8009070 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d018      	beq.n	800905e <HAL_RCC_ClockConfig+0x286>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009034:	d013      	beq.n	800905e <HAL_RCC_ClockConfig+0x286>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800903e:	d00e      	beq.n	800905e <HAL_RCC_ClockConfig+0x286>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009048:	d009      	beq.n	800905e <HAL_RCC_ClockConfig+0x286>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009052:	d004      	beq.n	800905e <HAL_RCC_ClockConfig+0x286>
 8009054:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8009058:	482a      	ldr	r0, [pc, #168]	@ (8009104 <HAL_RCC_ClockConfig+0x32c>)
 800905a:	f7fc fe97 	bl	8005d8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800905e:	4b2a      	ldr	r3, [pc, #168]	@ (8009108 <HAL_RCC_ClockConfig+0x330>)
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	4927      	ldr	r1, [pc, #156]	@ (8009108 <HAL_RCC_ClockConfig+0x330>)
 800906c:	4313      	orrs	r3, r2
 800906e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d026      	beq.n	80090ca <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d018      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x2de>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800908c:	d013      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x2de>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009096:	d00e      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x2de>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80090a0:	d009      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x2de>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090aa:	d004      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x2de>
 80090ac:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 80090b0:	4814      	ldr	r0, [pc, #80]	@ (8009104 <HAL_RCC_ClockConfig+0x32c>)
 80090b2:	f7fc fe6b 	bl	8005d8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090b6:	4b14      	ldr	r3, [pc, #80]	@ (8009108 <HAL_RCC_ClockConfig+0x330>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	4910      	ldr	r1, [pc, #64]	@ (8009108 <HAL_RCC_ClockConfig+0x330>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090ca:	f000 f825 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 80090ce:	4602      	mov	r2, r0
 80090d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009108 <HAL_RCC_ClockConfig+0x330>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	091b      	lsrs	r3, r3, #4
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	490c      	ldr	r1, [pc, #48]	@ (800910c <HAL_RCC_ClockConfig+0x334>)
 80090dc:	5ccb      	ldrb	r3, [r1, r3]
 80090de:	f003 031f 	and.w	r3, r3, #31
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009110 <HAL_RCC_ClockConfig+0x338>)
 80090e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80090ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009114 <HAL_RCC_ClockConfig+0x33c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fd fc26 	bl	8006940 <HAL_InitTick>
 80090f4:	4603      	mov	r3, r0
 80090f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80090f8:	7afb      	ldrb	r3, [r7, #11]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	08010b7c 	.word	0x08010b7c
 8009108:	40021000 	.word	0x40021000
 800910c:	08010d58 	.word	0x08010d58
 8009110:	20000014 	.word	0x20000014
 8009114:	20000018 	.word	0x20000018

08009118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009118:	b480      	push	{r7}
 800911a:	b089      	sub	sp, #36	@ 0x24
 800911c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	61fb      	str	r3, [r7, #28]
 8009122:	2300      	movs	r3, #0
 8009124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009126:	4b3e      	ldr	r3, [pc, #248]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 030c 	and.w	r3, r3, #12
 800912e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009130:	4b3b      	ldr	r3, [pc, #236]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0303 	and.w	r3, r3, #3
 8009138:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <HAL_RCC_GetSysClockFreq+0x34>
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b0c      	cmp	r3, #12
 8009144:	d121      	bne.n	800918a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d11e      	bne.n	800918a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800914c:	4b34      	ldr	r3, [pc, #208]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d107      	bne.n	8009168 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009158:	4b31      	ldr	r3, [pc, #196]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 800915a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800915e:	0a1b      	lsrs	r3, r3, #8
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	61fb      	str	r3, [r7, #28]
 8009166:	e005      	b.n	8009174 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009168:	4b2d      	ldr	r3, [pc, #180]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	091b      	lsrs	r3, r3, #4
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009174:	4a2b      	ldr	r2, [pc, #172]	@ (8009224 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800917c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10d      	bne.n	80091a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009188:	e00a      	b.n	80091a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b04      	cmp	r3, #4
 800918e:	d102      	bne.n	8009196 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009190:	4b25      	ldr	r3, [pc, #148]	@ (8009228 <HAL_RCC_GetSysClockFreq+0x110>)
 8009192:	61bb      	str	r3, [r7, #24]
 8009194:	e004      	b.n	80091a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b08      	cmp	r3, #8
 800919a:	d101      	bne.n	80091a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800919c:	4b23      	ldr	r3, [pc, #140]	@ (800922c <HAL_RCC_GetSysClockFreq+0x114>)
 800919e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	2b0c      	cmp	r3, #12
 80091a4:	d134      	bne.n	8009210 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d003      	beq.n	80091be <HAL_RCC_GetSysClockFreq+0xa6>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d003      	beq.n	80091c4 <HAL_RCC_GetSysClockFreq+0xac>
 80091bc:	e005      	b.n	80091ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80091be:	4b1a      	ldr	r3, [pc, #104]	@ (8009228 <HAL_RCC_GetSysClockFreq+0x110>)
 80091c0:	617b      	str	r3, [r7, #20]
      break;
 80091c2:	e005      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80091c4:	4b19      	ldr	r3, [pc, #100]	@ (800922c <HAL_RCC_GetSysClockFreq+0x114>)
 80091c6:	617b      	str	r3, [r7, #20]
      break;
 80091c8:	e002      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	617b      	str	r3, [r7, #20]
      break;
 80091ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091d0:	4b13      	ldr	r3, [pc, #76]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	091b      	lsrs	r3, r3, #4
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	3301      	adds	r3, #1
 80091dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80091de:	4b10      	ldr	r3, [pc, #64]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	0a1b      	lsrs	r3, r3, #8
 80091e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	fb03 f202 	mul.w	r2, r3, r2
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x108>)
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	0e5b      	lsrs	r3, r3, #25
 80091fc:	f003 0303 	and.w	r3, r3, #3
 8009200:	3301      	adds	r3, #1
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	fbb2 f3f3 	udiv	r3, r2, r3
 800920e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009210:	69bb      	ldr	r3, [r7, #24]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3724      	adds	r7, #36	@ 0x24
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40021000 	.word	0x40021000
 8009224:	08010d70 	.word	0x08010d70
 8009228:	00f42400 	.word	0x00f42400
 800922c:	007a1200 	.word	0x007a1200

08009230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009234:	4b03      	ldr	r3, [pc, #12]	@ (8009244 <HAL_RCC_GetHCLKFreq+0x14>)
 8009236:	681b      	ldr	r3, [r3, #0]
}
 8009238:	4618      	mov	r0, r3
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	20000014 	.word	0x20000014

08009248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800924c:	f7ff fff0 	bl	8009230 <HAL_RCC_GetHCLKFreq>
 8009250:	4602      	mov	r2, r0
 8009252:	4b06      	ldr	r3, [pc, #24]	@ (800926c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	4904      	ldr	r1, [pc, #16]	@ (8009270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800925e:	5ccb      	ldrb	r3, [r1, r3]
 8009260:	f003 031f 	and.w	r3, r3, #31
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009268:	4618      	mov	r0, r3
 800926a:	bd80      	pop	{r7, pc}
 800926c:	40021000 	.word	0x40021000
 8009270:	08010d68 	.word	0x08010d68

08009274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009278:	f7ff ffda 	bl	8009230 <HAL_RCC_GetHCLKFreq>
 800927c:	4602      	mov	r2, r0
 800927e:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	0adb      	lsrs	r3, r3, #11
 8009284:	f003 0307 	and.w	r3, r3, #7
 8009288:	4904      	ldr	r1, [pc, #16]	@ (800929c <HAL_RCC_GetPCLK2Freq+0x28>)
 800928a:	5ccb      	ldrb	r3, [r1, r3]
 800928c:	f003 031f 	and.w	r3, r3, #31
 8009290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009294:	4618      	mov	r0, r3
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40021000 	.word	0x40021000
 800929c:	08010d68 	.word	0x08010d68

080092a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80092a8:	2300      	movs	r3, #0
 80092aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80092ac:	4b2a      	ldr	r3, [pc, #168]	@ (8009358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80092b8:	f7ff f81c 	bl	80082f4 <HAL_PWREx_GetVoltageRange>
 80092bc:	6178      	str	r0, [r7, #20]
 80092be:	e014      	b.n	80092ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80092c0:	4b25      	ldr	r3, [pc, #148]	@ (8009358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c4:	4a24      	ldr	r2, [pc, #144]	@ (8009358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80092cc:	4b22      	ldr	r3, [pc, #136]	@ (8009358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80092d8:	f7ff f80c 	bl	80082f4 <HAL_PWREx_GetVoltageRange>
 80092dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80092de:	4b1e      	ldr	r3, [pc, #120]	@ (8009358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80092e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092f0:	d10b      	bne.n	800930a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b80      	cmp	r3, #128	@ 0x80
 80092f6:	d919      	bls.n	800932c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80092fc:	d902      	bls.n	8009304 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80092fe:	2302      	movs	r3, #2
 8009300:	613b      	str	r3, [r7, #16]
 8009302:	e013      	b.n	800932c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009304:	2301      	movs	r3, #1
 8009306:	613b      	str	r3, [r7, #16]
 8009308:	e010      	b.n	800932c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b80      	cmp	r3, #128	@ 0x80
 800930e:	d902      	bls.n	8009316 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009310:	2303      	movs	r3, #3
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	e00a      	b.n	800932c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b80      	cmp	r3, #128	@ 0x80
 800931a:	d102      	bne.n	8009322 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800931c:	2302      	movs	r3, #2
 800931e:	613b      	str	r3, [r7, #16]
 8009320:	e004      	b.n	800932c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b70      	cmp	r3, #112	@ 0x70
 8009326:	d101      	bne.n	800932c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009328:	2301      	movs	r3, #1
 800932a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800932c:	4b0b      	ldr	r3, [pc, #44]	@ (800935c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f023 0207 	bic.w	r2, r3, #7
 8009334:	4909      	ldr	r1, [pc, #36]	@ (800935c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	4313      	orrs	r3, r2
 800933a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800933c:	4b07      	ldr	r3, [pc, #28]	@ (800935c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	429a      	cmp	r2, r3
 8009348:	d001      	beq.n	800934e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	40021000 	.word	0x40021000
 800935c:	40022000 	.word	0x40022000

08009360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009368:	2300      	movs	r3, #0
 800936a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800936c:	2300      	movs	r3, #0
 800936e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009384:	d303      	bcc.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8009386:	21c9      	movs	r1, #201	@ 0xc9
 8009388:	4889      	ldr	r0, [pc, #548]	@ (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800938a:	f7fc fcff 	bl	8005d8c <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009396:	2b00      	cmp	r3, #0
 8009398:	d058      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d012      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093aa:	d00d      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093b4:	d008      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80093be:	d003      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80093c0:	21d1      	movs	r1, #209	@ 0xd1
 80093c2:	487b      	ldr	r0, [pc, #492]	@ (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80093c4:	f7fc fce2 	bl	8005d8c <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80093d0:	d02a      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80093d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80093d6:	d824      	bhi.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80093d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093dc:	d008      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80093e2:	d81e      	bhi.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00a      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80093e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80093ec:	d010      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80093ee:	e018      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80093f0:	4b70      	ldr	r3, [pc, #448]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	4a6f      	ldr	r2, [pc, #444]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80093f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093fc:	e015      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xca>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3304      	adds	r3, #4
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fc69 	bl	8009cdc <RCCEx_PLLSAI1_Config>
 800940a:	4603      	mov	r3, r0
 800940c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800940e:	e00c      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xca>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3320      	adds	r3, #32
 8009414:	2100      	movs	r1, #0
 8009416:	4618      	mov	r0, r3
 8009418:	f000 fde0 	bl	8009fdc <RCCEx_PLLSAI2_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009420:	e003      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xca>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	74fb      	strb	r3, [r7, #19]
      break;
 8009426:	e000      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xca>
      break;
 8009428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800942a:	7cfb      	ldrb	r3, [r7, #19]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10b      	bne.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009430:	4b60      	ldr	r3, [pc, #384]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800943e:	495d      	ldr	r1, [pc, #372]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009440:	4313      	orrs	r3, r2
 8009442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009446:	e001      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009448:	7cfb      	ldrb	r3, [r7, #19]
 800944a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d059      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800945c:	2b00      	cmp	r3, #0
 800945e:	d013      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009468:	d00e      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800946e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009472:	d009      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009478:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800947c:	d004      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800947e:	f240 110f 	movw	r1, #271	@ 0x10f
 8009482:	484b      	ldr	r0, [pc, #300]	@ (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009484:	f7fc fc82 	bl	8005d8c <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800948c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009490:	d02a      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8009492:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009496:	d824      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8009498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800949c:	d008      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800949e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094a2:	d81e      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80094a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094ac:	d010      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80094ae:	e018      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80094b0:	4b40      	ldr	r3, [pc, #256]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	4a3f      	ldr	r2, [pc, #252]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80094b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80094bc:	e015      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	3304      	adds	r3, #4
 80094c2:	2100      	movs	r1, #0
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fc09 	bl	8009cdc <RCCEx_PLLSAI1_Config>
 80094ca:	4603      	mov	r3, r0
 80094cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80094ce:	e00c      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x18a>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3320      	adds	r3, #32
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fd80 	bl	8009fdc <RCCEx_PLLSAI2_Config>
 80094dc:	4603      	mov	r3, r0
 80094de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80094e0:	e003      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	74fb      	strb	r3, [r7, #19]
      break;
 80094e6:	e000      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
      break;
 80094e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ea:	7cfb      	ldrb	r3, [r7, #19]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10b      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80094f0:	4b30      	ldr	r3, [pc, #192]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094fe:	492d      	ldr	r1, [pc, #180]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009500:	4313      	orrs	r3, r2
 8009502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009506:	e001      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009508:	7cfb      	ldrb	r3, [r7, #19]
 800950a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80c2 	beq.w	800969e <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800951a:	2300      	movs	r3, #0
 800951c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009524:	2b00      	cmp	r3, #0
 8009526:	d016      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800952e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009532:	d010      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800953a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800953e:	d00a      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800954a:	d004      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800954c:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8009550:	4817      	ldr	r0, [pc, #92]	@ (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009552:	f7fc fc1b 	bl	8005d8c <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009556:	4b17      	ldr	r3, [pc, #92]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800955a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8009566:	2300      	movs	r3, #0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00d      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800956c:	4b11      	ldr	r3, [pc, #68]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800956e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009570:	4a10      	ldr	r2, [pc, #64]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009576:	6593      	str	r3, [r2, #88]	@ 0x58
 8009578:	4b0e      	ldr	r3, [pc, #56]	@ (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800957a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800957c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009580:	60bb      	str	r3, [r7, #8]
 8009582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009584:	2301      	movs	r3, #1
 8009586:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009588:	4b0b      	ldr	r3, [pc, #44]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a0a      	ldr	r2, [pc, #40]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800958e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009592:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009594:	f7fd fa24 	bl	80069e0 <HAL_GetTick>
 8009598:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800959a:	e00f      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800959c:	f7fd fa20 	bl	80069e0 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d908      	bls.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x25c>
      {
        ret = HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	74fb      	strb	r3, [r7, #19]
        break;
 80095ae:	e00b      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80095b0:	08010bb4 	.word	0x08010bb4
 80095b4:	40021000 	.word	0x40021000
 80095b8:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095bc:	4b30      	ldr	r3, [pc, #192]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0e9      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      }
    }

    if(ret == HAL_OK)
 80095c8:	7cfb      	ldrb	r3, [r7, #19]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d15c      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095ce:	4b2d      	ldr	r3, [pc, #180]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01f      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d019      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095ec:	4b25      	ldr	r3, [pc, #148]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80095f8:	4b22      	ldr	r3, [pc, #136]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80095fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095fe:	4a21      	ldr	r2, [pc, #132]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009608:	4b1e      	ldr	r3, [pc, #120]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800960a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960e:	4a1d      	ldr	r2, [pc, #116]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009618:	4a1a      	ldr	r2, [pc, #104]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d016      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800962a:	f7fd f9d9 	bl	80069e0 <HAL_GetTick>
 800962e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009630:	e00b      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009632:	f7fd f9d5 	bl	80069e0 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009640:	4293      	cmp	r3, r2
 8009642:	d902      	bls.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
          {
            ret = HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	74fb      	strb	r3, [r7, #19]
            break;
 8009648:	e006      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800964a:	4b0e      	ldr	r3, [pc, #56]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800964c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009650:	f003 0302 	and.w	r3, r3, #2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0ec      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
          }
        }
      }

      if(ret == HAL_OK)
 8009658:	7cfb      	ldrb	r3, [r7, #19]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10c      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800965e:	4b09      	ldr	r3, [pc, #36]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800966e:	4905      	ldr	r1, [pc, #20]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8009670:	4313      	orrs	r3, r2
 8009672:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009676:	e009      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x32c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009678:	7cfb      	ldrb	r3, [r7, #19]
 800967a:	74bb      	strb	r3, [r7, #18]
 800967c:	e006      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 800967e:	bf00      	nop
 8009680:	40007000 	.word	0x40007000
 8009684:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009688:	7cfb      	ldrb	r3, [r7, #19]
 800968a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800968c:	7c7b      	ldrb	r3, [r7, #17]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d105      	bne.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009692:	4b8d      	ldr	r3, [pc, #564]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009696:	4a8c      	ldr	r2, [pc, #560]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800969c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d01f      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d010      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d00c      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096be:	2b03      	cmp	r3, #3
 80096c0:	d008      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d004      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80096ca:	f240 1199 	movw	r1, #409	@ 0x199
 80096ce:	487f      	ldr	r0, [pc, #508]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80096d0:	f7fc fb5c 	bl	8005d8c <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096d4:	4b7c      	ldr	r3, [pc, #496]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80096d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096da:	f023 0203 	bic.w	r2, r3, #3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e2:	4979      	ldr	r1, [pc, #484]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d01f      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d010      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009702:	2b04      	cmp	r3, #4
 8009704:	d00c      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800970a:	2b0c      	cmp	r3, #12
 800970c:	d008      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009712:	2b08      	cmp	r3, #8
 8009714:	d004      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009716:	f240 11a3 	movw	r1, #419	@ 0x1a3
 800971a:	486c      	ldr	r0, [pc, #432]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800971c:	f7fc fb36 	bl	8005d8c <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009720:	4b69      	ldr	r3, [pc, #420]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009726:	f023 020c 	bic.w	r2, r3, #12
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972e:	4966      	ldr	r1, [pc, #408]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009730:	4313      	orrs	r3, r2
 8009732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0304 	and.w	r3, r3, #4
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01f      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	d010      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974e:	2b10      	cmp	r3, #16
 8009750:	d00c      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009756:	2b30      	cmp	r3, #48	@ 0x30
 8009758:	d008      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975e:	2b20      	cmp	r3, #32
 8009760:	d004      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009762:	f240 11af 	movw	r1, #431	@ 0x1af
 8009766:	4859      	ldr	r0, [pc, #356]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009768:	f7fc fb10 	bl	8005d8c <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800976c:	4b56      	ldr	r3, [pc, #344]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800976e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009772:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977a:	4953      	ldr	r1, [pc, #332]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800977c:	4313      	orrs	r3, r2
 800977e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d01f      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x46e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009792:	2b00      	cmp	r3, #0
 8009794:	d010      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800979a:	2b40      	cmp	r3, #64	@ 0x40
 800979c:	d00c      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80097a4:	d008      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097aa:	2b80      	cmp	r3, #128	@ 0x80
 80097ac:	d004      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 80097ae:	f240 11bd 	movw	r1, #445	@ 0x1bd
 80097b2:	4846      	ldr	r0, [pc, #280]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80097b4:	f7fc faea 	bl	8005d8c <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80097b8:	4b43      	ldr	r3, [pc, #268]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80097ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097c6:	4940      	ldr	r1, [pc, #256]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0310 	and.w	r3, r3, #16
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d022      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d013      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ea:	d00e      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097f4:	d009      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097fe:	d004      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8009800:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8009804:	4831      	ldr	r0, [pc, #196]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009806:	f7fc fac1 	bl	8005d8c <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800980a:	4b2f      	ldr	r3, [pc, #188]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800980c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009818:	492b      	ldr	r1, [pc, #172]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800981a:	4313      	orrs	r3, r2
 800981c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b00      	cmp	r3, #0
 800982a:	d022      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d013      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800983c:	d00e      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009842:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009846:	d009      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009850:	d004      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8009852:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8009856:	481d      	ldr	r0, [pc, #116]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009858:	f7fc fa98 	bl	8005d8c <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800985c:	4b1a      	ldr	r3, [pc, #104]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800985e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009862:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800986a:	4917      	ldr	r1, [pc, #92]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800986c:	4313      	orrs	r3, r2
 800986e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800987a:	2b00      	cmp	r3, #0
 800987c:	d028      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d013      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800988a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800988e:	d00e      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009894:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009898:	d009      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800989e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80098a2:	d004      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80098a4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80098a8:	4808      	ldr	r0, [pc, #32]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80098aa:	f7fc fa6f 	bl	8005d8c <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098ae:	4b06      	ldr	r3, [pc, #24]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80098b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098bc:	4902      	ldr	r1, [pc, #8]	@ (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80098c4:	e004      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80098c6:	bf00      	nop
 80098c8:	40021000 	.word	0x40021000
 80098cc:	08010bb4 	.word	0x08010bb4
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d022      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d013      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098ec:	d00e      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098f6:	d009      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009900:	d004      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009902:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8009906:	489e      	ldr	r0, [pc, #632]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009908:	f7fc fa40 	bl	8005d8c <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800990c:	4b9d      	ldr	r3, [pc, #628]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800990e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009912:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800991a:	499a      	ldr	r1, [pc, #616]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800991c:	4313      	orrs	r3, r2
 800991e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d01d      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x60a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00e      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800993a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800993e:	d009      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009948:	d004      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800994a:	f240 11ef 	movw	r1, #495	@ 0x1ef
 800994e:	488c      	ldr	r0, [pc, #560]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009950:	f7fc fa1c 	bl	8005d8c <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009954:	4b8b      	ldr	r3, [pc, #556]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800995a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009962:	4988      	ldr	r1, [pc, #544]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009964:	4313      	orrs	r3, r2
 8009966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009972:	2b00      	cmp	r3, #0
 8009974:	d01d      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x652>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00e      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009986:	d009      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800998c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009990:	d004      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8009992:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8009996:	487a      	ldr	r0, [pc, #488]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009998:	f7fc f9f8 	bl	8005d8c <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800999c:	4b79      	ldr	r3, [pc, #484]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800999e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099aa:	4976      	ldr	r1, [pc, #472]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d01d      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00e      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ce:	d009      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099d8:	d004      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80099da:	f240 2107 	movw	r1, #519	@ 0x207
 80099de:	4868      	ldr	r0, [pc, #416]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 80099e0:	f7fc f9d4 	bl	8005d8c <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80099e4:	4b67      	ldr	r3, [pc, #412]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099f2:	4964      	ldr	r1, [pc, #400]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d040      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d013      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a16:	d00e      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a20:	d009      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a26:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009a2a:	d004      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8009a2c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8009a30:	4853      	ldr	r0, [pc, #332]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009a32:	f7fc f9ab 	bl	8005d8c <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a36:	4b53      	ldr	r3, [pc, #332]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a44:	494f      	ldr	r1, [pc, #316]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a54:	d106      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x704>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a56:	4b4b      	ldr	r3, [pc, #300]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a60:	60d3      	str	r3, [r2, #12]
 8009a62:	e011      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a6c:	d10c      	bne.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3304      	adds	r3, #4
 8009a72:	2101      	movs	r1, #1
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 f931 	bl	8009cdc <RCCEx_PLLSAI1_Config>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009a7e:	7cfb      	ldrb	r3, [r7, #19]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
        {
          /* set overall return value */
          status = ret;
 8009a84:	7cfb      	ldrb	r3, [r7, #19]
 8009a86:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d040      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d013      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009aa4:	d00e      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009aae:	d009      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009ab8:	d004      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x764>
 8009aba:	f240 2141 	movw	r1, #577	@ 0x241
 8009abe:	4830      	ldr	r0, [pc, #192]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009ac0:	f7fc f964 	bl	8005d8c <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ad2:	492c      	ldr	r1, [pc, #176]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ae2:	d106      	bne.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ae4:	4b27      	ldr	r3, [pc, #156]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	4a26      	ldr	r2, [pc, #152]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009aee:	60d3      	str	r3, [r2, #12]
 8009af0:	e011      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009af6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009afa:	d10c      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3304      	adds	r3, #4
 8009b00:	2101      	movs	r1, #1
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 f8ea 	bl	8009cdc <RCCEx_PLLSAI1_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b0c:	7cfb      	ldrb	r3, [r7, #19]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      {
        /* set overall return value */
        status = ret;
 8009b12:	7cfb      	ldrb	r3, [r7, #19]
 8009b14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d044      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d013      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b32:	d00e      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b3c:	d009      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009b46:	d004      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009b48:	f240 2166 	movw	r1, #614	@ 0x266
 8009b4c:	480c      	ldr	r0, [pc, #48]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8009b4e:	f7fc f91d 	bl	8005d8c <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b52:	4b0c      	ldr	r3, [pc, #48]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b60:	4908      	ldr	r1, [pc, #32]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b70:	d10a      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x828>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b72:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	4a03      	ldr	r2, [pc, #12]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009b78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b7c:	60d3      	str	r3, [r2, #12]
 8009b7e:	e015      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8009b80:	08010bb4 	.word	0x08010bb4
 8009b84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b90:	d10c      	bne.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3304      	adds	r3, #4
 8009b96:	2101      	movs	r1, #1
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f89f 	bl	8009cdc <RCCEx_PLLSAI1_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009ba2:	7cfb      	ldrb	r3, [r7, #19]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x84c>
      {
        /* set overall return value */
        status = ret;
 8009ba8:	7cfb      	ldrb	r3, [r7, #19]
 8009baa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d047      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d013      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bc8:	d00e      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bd2:	d009      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009bdc:	d004      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009bde:	f240 2186 	movw	r1, #646	@ 0x286
 8009be2:	483c      	ldr	r0, [pc, #240]	@ (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009be4:	f7fc f8d2 	bl	8005d8c <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009be8:	4b3b      	ldr	r3, [pc, #236]	@ (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bf6:	4938      	ldr	r1, [pc, #224]	@ (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c06:	d10d      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	2102      	movs	r1, #2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 f864 	bl	8009cdc <RCCEx_PLLSAI1_Config>
 8009c14:	4603      	mov	r3, r0
 8009c16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c18:	7cfb      	ldrb	r3, [r7, #19]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d014      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8009c1e:	7cfb      	ldrb	r3, [r7, #19]
 8009c20:	74bb      	strb	r3, [r7, #18]
 8009c22:	e011      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c2c:	d10c      	bne.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3320      	adds	r3, #32
 8009c32:	2102      	movs	r1, #2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 f9d1 	bl	8009fdc <RCCEx_PLLSAI2_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c3e:	7cfb      	ldrb	r3, [r7, #19]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      {
        /* set overall return value */
        status = ret;
 8009c44:	7cfb      	ldrb	r3, [r7, #19]
 8009c46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d018      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x926>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c64:	d004      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8009c66:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8009c6a:	481a      	ldr	r0, [pc, #104]	@ (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009c6c:	f7fc f88e 	bl	8005d8c <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c70:	4b19      	ldr	r3, [pc, #100]	@ (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c7e:	4916      	ldr	r1, [pc, #88]	@ (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009c80:	4313      	orrs	r3, r2
 8009c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d01b      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x96a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ca6:	d004      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009ca8:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8009cac:	4809      	ldr	r0, [pc, #36]	@ (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8009cae:	f7fc f86d 	bl	8005d8c <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009cb2:	4b09      	ldr	r3, [pc, #36]	@ (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc2:	4905      	ldr	r1, [pc, #20]	@ (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009cca:	7cbb      	ldrb	r3, [r7, #18]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	08010bb4 	.word	0x08010bb4
 8009cd8:	40021000 	.word	0x40021000

08009cdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d010      	beq.n	8009d14 <RCCEx_PLLSAI1_Config+0x38>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d00c      	beq.n	8009d14 <RCCEx_PLLSAI1_Config+0x38>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d008      	beq.n	8009d14 <RCCEx_PLLSAI1_Config+0x38>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d004      	beq.n	8009d14 <RCCEx_PLLSAI1_Config+0x38>
 8009d0a:	f640 3162 	movw	r1, #2914	@ 0xb62
 8009d0e:	4887      	ldr	r0, [pc, #540]	@ (8009f2c <RCCEx_PLLSAI1_Config+0x250>)
 8009d10:	f7fc f83c 	bl	8005d8c <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <RCCEx_PLLSAI1_Config+0x48>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	2b08      	cmp	r3, #8
 8009d22:	d904      	bls.n	8009d2e <RCCEx_PLLSAI1_Config+0x52>
 8009d24:	f640 3163 	movw	r1, #2915	@ 0xb63
 8009d28:	4880      	ldr	r0, [pc, #512]	@ (8009f2c <RCCEx_PLLSAI1_Config+0x250>)
 8009d2a:	f7fc f82f 	bl	8005d8c <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	2b07      	cmp	r3, #7
 8009d34:	d903      	bls.n	8009d3e <RCCEx_PLLSAI1_Config+0x62>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	2b56      	cmp	r3, #86	@ 0x56
 8009d3c:	d904      	bls.n	8009d48 <RCCEx_PLLSAI1_Config+0x6c>
 8009d3e:	f640 3164 	movw	r1, #2916	@ 0xb64
 8009d42:	487a      	ldr	r0, [pc, #488]	@ (8009f2c <RCCEx_PLLSAI1_Config+0x250>)
 8009d44:	f7fc f822 	bl	8005d8c <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10b      	bne.n	8009d6c <RCCEx_PLLSAI1_Config+0x90>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d105      	bne.n	8009d6c <RCCEx_PLLSAI1_Config+0x90>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d007      	beq.n	8009d7c <RCCEx_PLLSAI1_Config+0xa0>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8009d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d004      	beq.n	8009d86 <RCCEx_PLLSAI1_Config+0xaa>
 8009d7c:	f640 3165 	movw	r1, #2917	@ 0xb65
 8009d80:	486a      	ldr	r0, [pc, #424]	@ (8009f2c <RCCEx_PLLSAI1_Config+0x250>)
 8009d82:	f7fc f803 	bl	8005d8c <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009d86:	4b6a      	ldr	r3, [pc, #424]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	f003 0303 	and.w	r3, r3, #3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d018      	beq.n	8009dc4 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009d92:	4b67      	ldr	r3, [pc, #412]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f003 0203 	and.w	r2, r3, #3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d10d      	bne.n	8009dbe <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
       ||
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d009      	beq.n	8009dbe <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009daa:	4b61      	ldr	r3, [pc, #388]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	091b      	lsrs	r3, r3, #4
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
       ||
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d047      	beq.n	8009e4e <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	73fb      	strb	r3, [r7, #15]
 8009dc2:	e044      	b.n	8009e4e <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d018      	beq.n	8009dfe <RCCEx_PLLSAI1_Config+0x122>
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d825      	bhi.n	8009e1c <RCCEx_PLLSAI1_Config+0x140>
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d002      	beq.n	8009dda <RCCEx_PLLSAI1_Config+0xfe>
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d009      	beq.n	8009dec <RCCEx_PLLSAI1_Config+0x110>
 8009dd8:	e020      	b.n	8009e1c <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009dda:	4b55      	ldr	r3, [pc, #340]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d11d      	bne.n	8009e22 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009dea:	e01a      	b.n	8009e22 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009dec:	4b50      	ldr	r3, [pc, #320]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d116      	bne.n	8009e26 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009dfc:	e013      	b.n	8009e26 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10f      	bne.n	8009e2a <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009e0a:	4b49      	ldr	r3, [pc, #292]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d109      	bne.n	8009e2a <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e1a:	e006      	b.n	8009e2a <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e20:	e004      	b.n	8009e2c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009e22:	bf00      	nop
 8009e24:	e002      	b.n	8009e2c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009e26:	bf00      	nop
 8009e28:	e000      	b.n	8009e2c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8009e2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10d      	bne.n	8009e4e <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009e32:	4b3f      	ldr	r3, [pc, #252]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6819      	ldr	r1, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	430b      	orrs	r3, r1
 8009e48:	4939      	ldr	r1, [pc, #228]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f040 80ba 	bne.w	8009fca <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009e56:	4b36      	ldr	r3, [pc, #216]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a35      	ldr	r2, [pc, #212]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009e5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e62:	f7fc fdbd 	bl	80069e0 <HAL_GetTick>
 8009e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e68:	e009      	b.n	8009e7e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e6a:	f7fc fdb9 	bl	80069e0 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d902      	bls.n	8009e7e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	73fb      	strb	r3, [r7, #15]
        break;
 8009e7c:	e005      	b.n	8009e8a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1ef      	bne.n	8009e6a <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f040 809c 	bne.w	8009fca <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d11e      	bne.n	8009ed6 <RCCEx_PLLSAI1_Config+0x1fa>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	2b07      	cmp	r3, #7
 8009e9e:	d008      	beq.n	8009eb2 <RCCEx_PLLSAI1_Config+0x1d6>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	2b11      	cmp	r3, #17
 8009ea6:	d004      	beq.n	8009eb2 <RCCEx_PLLSAI1_Config+0x1d6>
 8009ea8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8009eac:	481f      	ldr	r0, [pc, #124]	@ (8009f2c <RCCEx_PLLSAI1_Config+0x250>)
 8009eae:	f7fb ff6d 	bl	8005d8c <assert_failed>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8009eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6892      	ldr	r2, [r2, #8]
 8009ec2:	0211      	lsls	r1, r2, #8
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	68d2      	ldr	r2, [r2, #12]
 8009ec8:	0912      	lsrs	r2, r2, #4
 8009eca:	0452      	lsls	r2, r2, #17
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	4918      	ldr	r1, [pc, #96]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	610b      	str	r3, [r1, #16]
 8009ed4:	e055      	b.n	8009f82 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d12b      	bne.n	8009f34 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d010      	beq.n	8009f06 <RCCEx_PLLSAI1_Config+0x22a>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d00c      	beq.n	8009f06 <RCCEx_PLLSAI1_Config+0x22a>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b06      	cmp	r3, #6
 8009ef2:	d008      	beq.n	8009f06 <RCCEx_PLLSAI1_Config+0x22a>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	2b08      	cmp	r3, #8
 8009efa:	d004      	beq.n	8009f06 <RCCEx_PLLSAI1_Config+0x22a>
 8009efc:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 8009f00:	480a      	ldr	r0, [pc, #40]	@ (8009f2c <RCCEx_PLLSAI1_Config+0x250>)
 8009f02:	f7fb ff43 	bl	8005d8c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009f06:	4b0a      	ldr	r3, [pc, #40]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009f0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6892      	ldr	r2, [r2, #8]
 8009f16:	0211      	lsls	r1, r2, #8
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6912      	ldr	r2, [r2, #16]
 8009f1c:	0852      	lsrs	r2, r2, #1
 8009f1e:	3a01      	subs	r2, #1
 8009f20:	0552      	lsls	r2, r2, #21
 8009f22:	430a      	orrs	r2, r1
 8009f24:	4902      	ldr	r1, [pc, #8]	@ (8009f30 <RCCEx_PLLSAI1_Config+0x254>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	610b      	str	r3, [r1, #16]
 8009f2a:	e02a      	b.n	8009f82 <RCCEx_PLLSAI1_Config+0x2a6>
 8009f2c:	08010bb4 	.word	0x08010bb4
 8009f30:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d010      	beq.n	8009f5e <RCCEx_PLLSAI1_Config+0x282>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	695b      	ldr	r3, [r3, #20]
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d00c      	beq.n	8009f5e <RCCEx_PLLSAI1_Config+0x282>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	2b06      	cmp	r3, #6
 8009f4a:	d008      	beq.n	8009f5e <RCCEx_PLLSAI1_Config+0x282>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d004      	beq.n	8009f5e <RCCEx_PLLSAI1_Config+0x282>
 8009f54:	f640 31ee 	movw	r1, #3054	@ 0xbee
 8009f58:	481e      	ldr	r0, [pc, #120]	@ (8009fd4 <RCCEx_PLLSAI1_Config+0x2f8>)
 8009f5a:	f7fb ff17 	bl	8005d8c <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fd8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009f66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6892      	ldr	r2, [r2, #8]
 8009f6e:	0211      	lsls	r1, r2, #8
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	6952      	ldr	r2, [r2, #20]
 8009f74:	0852      	lsrs	r2, r2, #1
 8009f76:	3a01      	subs	r2, #1
 8009f78:	0652      	lsls	r2, r2, #25
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	4916      	ldr	r1, [pc, #88]	@ (8009fd8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009f82:	4b15      	ldr	r3, [pc, #84]	@ (8009fd8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a14      	ldr	r2, [pc, #80]	@ (8009fd8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009f88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f8e:	f7fc fd27 	bl	80069e0 <HAL_GetTick>
 8009f92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009f94:	e009      	b.n	8009faa <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f96:	f7fc fd23 	bl	80069e0 <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d902      	bls.n	8009faa <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	73fb      	strb	r3, [r7, #15]
          break;
 8009fa8:	e005      	b.n	8009fb6 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009faa:	4b0b      	ldr	r3, [pc, #44]	@ (8009fd8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0ef      	beq.n	8009f96 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009fbc:	4b06      	ldr	r3, [pc, #24]	@ (8009fd8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009fbe:	691a      	ldr	r2, [r3, #16]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	4904      	ldr	r1, [pc, #16]	@ (8009fd8 <RCCEx_PLLSAI1_Config+0x2fc>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	08010bb4 	.word	0x08010bb4
 8009fd8:	40021000 	.word	0x40021000

08009fdc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d010      	beq.n	800a014 <RCCEx_PLLSAI2_Config+0x38>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d00c      	beq.n	800a014 <RCCEx_PLLSAI2_Config+0x38>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d008      	beq.n	800a014 <RCCEx_PLLSAI2_Config+0x38>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b03      	cmp	r3, #3
 800a008:	d004      	beq.n	800a014 <RCCEx_PLLSAI2_Config+0x38>
 800a00a:	f640 412f 	movw	r1, #3119	@ 0xc2f
 800a00e:	4896      	ldr	r0, [pc, #600]	@ (800a268 <RCCEx_PLLSAI2_Config+0x28c>)
 800a010:	f7fb febc 	bl	8005d8c <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <RCCEx_PLLSAI2_Config+0x48>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	2b08      	cmp	r3, #8
 800a022:	d904      	bls.n	800a02e <RCCEx_PLLSAI2_Config+0x52>
 800a024:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 800a028:	488f      	ldr	r0, [pc, #572]	@ (800a268 <RCCEx_PLLSAI2_Config+0x28c>)
 800a02a:	f7fb feaf 	bl	8005d8c <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2b07      	cmp	r3, #7
 800a034:	d903      	bls.n	800a03e <RCCEx_PLLSAI2_Config+0x62>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	2b56      	cmp	r3, #86	@ 0x56
 800a03c:	d904      	bls.n	800a048 <RCCEx_PLLSAI2_Config+0x6c>
 800a03e:	f640 4131 	movw	r1, #3121	@ 0xc31
 800a042:	4889      	ldr	r0, [pc, #548]	@ (800a268 <RCCEx_PLLSAI2_Config+0x28c>)
 800a044:	f7fb fea2 	bl	8005d8c <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d105      	bne.n	800a060 <RCCEx_PLLSAI2_Config+0x84>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d007      	beq.n	800a070 <RCCEx_PLLSAI2_Config+0x94>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d004      	beq.n	800a07a <RCCEx_PLLSAI2_Config+0x9e>
 800a070:	f640 4132 	movw	r1, #3122	@ 0xc32
 800a074:	487c      	ldr	r0, [pc, #496]	@ (800a268 <RCCEx_PLLSAI2_Config+0x28c>)
 800a076:	f7fb fe89 	bl	8005d8c <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a07a:	4b7c      	ldr	r3, [pc, #496]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d018      	beq.n	800a0b8 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a086:	4b79      	ldr	r3, [pc, #484]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f003 0203 	and.w	r2, r3, #3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	429a      	cmp	r2, r3
 800a094:	d10d      	bne.n	800a0b2 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
       ||
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d009      	beq.n	800a0b2 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a09e:	4b73      	ldr	r3, [pc, #460]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	091b      	lsrs	r3, r3, #4
 800a0a4:	f003 0307 	and.w	r3, r3, #7
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
       ||
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d047      	beq.n	800a142 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	73fb      	strb	r3, [r7, #15]
 800a0b6:	e044      	b.n	800a142 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d018      	beq.n	800a0f2 <RCCEx_PLLSAI2_Config+0x116>
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d825      	bhi.n	800a110 <RCCEx_PLLSAI2_Config+0x134>
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d002      	beq.n	800a0ce <RCCEx_PLLSAI2_Config+0xf2>
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d009      	beq.n	800a0e0 <RCCEx_PLLSAI2_Config+0x104>
 800a0cc:	e020      	b.n	800a110 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0ce:	4b67      	ldr	r3, [pc, #412]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d11d      	bne.n	800a116 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0de:	e01a      	b.n	800a116 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0e0:	4b62      	ldr	r3, [pc, #392]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d116      	bne.n	800a11a <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0f0:	e013      	b.n	800a11a <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a0f2:	4b5e      	ldr	r3, [pc, #376]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10f      	bne.n	800a11e <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a0fe:	4b5b      	ldr	r3, [pc, #364]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d109      	bne.n	800a11e <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a10e:	e006      	b.n	800a11e <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	73fb      	strb	r3, [r7, #15]
      break;
 800a114:	e004      	b.n	800a120 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a116:	bf00      	nop
 800a118:	e002      	b.n	800a120 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a11a:	bf00      	nop
 800a11c:	e000      	b.n	800a120 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800a11e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10d      	bne.n	800a142 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a126:	4b51      	ldr	r3, [pc, #324]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6819      	ldr	r1, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	3b01      	subs	r3, #1
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	430b      	orrs	r3, r1
 800a13c:	494b      	ldr	r1, [pc, #300]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f040 808a 	bne.w	800a25e <RCCEx_PLLSAI2_Config+0x282>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a14a:	4b48      	ldr	r3, [pc, #288]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a47      	ldr	r2, [pc, #284]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a156:	f7fc fc43 	bl	80069e0 <HAL_GetTick>
 800a15a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a15c:	e009      	b.n	800a172 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a15e:	f7fc fc3f 	bl	80069e0 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d902      	bls.n	800a172 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	73fb      	strb	r3, [r7, #15]
        break;
 800a170:	e005      	b.n	800a17e <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a172:	4b3e      	ldr	r3, [pc, #248]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1ef      	bne.n	800a15e <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d16c      	bne.n	800a25e <RCCEx_PLLSAI2_Config+0x282>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d11e      	bne.n	800a1c8 <RCCEx_PLLSAI2_Config+0x1ec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	2b07      	cmp	r3, #7
 800a190:	d008      	beq.n	800a1a4 <RCCEx_PLLSAI2_Config+0x1c8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	2b11      	cmp	r3, #17
 800a198:	d004      	beq.n	800a1a4 <RCCEx_PLLSAI2_Config+0x1c8>
 800a19a:	f640 4185 	movw	r1, #3205	@ 0xc85
 800a19e:	4832      	ldr	r0, [pc, #200]	@ (800a268 <RCCEx_PLLSAI2_Config+0x28c>)
 800a1a0:	f7fb fdf4 	bl	8005d8c <assert_failed>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1a4:	4b31      	ldr	r3, [pc, #196]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800a1ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	6892      	ldr	r2, [r2, #8]
 800a1b4:	0211      	lsls	r1, r2, #8
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	68d2      	ldr	r2, [r2, #12]
 800a1ba:	0912      	lsrs	r2, r2, #4
 800a1bc:	0452      	lsls	r2, r2, #17
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	492a      	ldr	r1, [pc, #168]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	614b      	str	r3, [r1, #20]
 800a1c6:	e026      	b.n	800a216 <RCCEx_PLLSAI2_Config+0x23a>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d010      	beq.n	800a1f2 <RCCEx_PLLSAI2_Config+0x216>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	2b04      	cmp	r3, #4
 800a1d6:	d00c      	beq.n	800a1f2 <RCCEx_PLLSAI2_Config+0x216>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	2b06      	cmp	r3, #6
 800a1de:	d008      	beq.n	800a1f2 <RCCEx_PLLSAI2_Config+0x216>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	d004      	beq.n	800a1f2 <RCCEx_PLLSAI2_Config+0x216>
 800a1e8:	f640 41bd 	movw	r1, #3261	@ 0xcbd
 800a1ec:	481e      	ldr	r0, [pc, #120]	@ (800a268 <RCCEx_PLLSAI2_Config+0x28c>)
 800a1ee:	f7fb fdcd 	bl	8005d8c <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800a1fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	6892      	ldr	r2, [r2, #8]
 800a202:	0211      	lsls	r1, r2, #8
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6912      	ldr	r2, [r2, #16]
 800a208:	0852      	lsrs	r2, r2, #1
 800a20a:	3a01      	subs	r2, #1
 800a20c:	0652      	lsls	r2, r2, #25
 800a20e:	430a      	orrs	r2, r1
 800a210:	4916      	ldr	r1, [pc, #88]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a212:	4313      	orrs	r3, r2
 800a214:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a216:	4b15      	ldr	r3, [pc, #84]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a14      	ldr	r2, [pc, #80]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a21c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a220:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a222:	f7fc fbdd 	bl	80069e0 <HAL_GetTick>
 800a226:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a228:	e009      	b.n	800a23e <RCCEx_PLLSAI2_Config+0x262>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a22a:	f7fc fbd9 	bl	80069e0 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d902      	bls.n	800a23e <RCCEx_PLLSAI2_Config+0x262>
        {
          status = HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	73fb      	strb	r3, [r7, #15]
          break;
 800a23c:	e005      	b.n	800a24a <RCCEx_PLLSAI2_Config+0x26e>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a23e:	4b0b      	ldr	r3, [pc, #44]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0ef      	beq.n	800a22a <RCCEx_PLLSAI2_Config+0x24e>
        }
      }

      if(status == HAL_OK)
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <RCCEx_PLLSAI2_Config+0x282>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a250:	4b06      	ldr	r3, [pc, #24]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a252:	695a      	ldr	r2, [r3, #20]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	4904      	ldr	r1, [pc, #16]	@ (800a26c <RCCEx_PLLSAI2_Config+0x290>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	08010bb4 	.word	0x08010bb4
 800a26c:	40021000 	.word	0x40021000

0800a270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e1dd      	b.n	800a63e <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a7b      	ldr	r2, [pc, #492]	@ (800a474 <HAL_SPI_Init+0x204>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d00e      	beq.n	800a2aa <HAL_SPI_Init+0x3a>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a79      	ldr	r2, [pc, #484]	@ (800a478 <HAL_SPI_Init+0x208>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d009      	beq.n	800a2aa <HAL_SPI_Init+0x3a>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a78      	ldr	r2, [pc, #480]	@ (800a47c <HAL_SPI_Init+0x20c>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d004      	beq.n	800a2aa <HAL_SPI_Init+0x3a>
 800a2a0:	f240 1147 	movw	r1, #327	@ 0x147
 800a2a4:	4876      	ldr	r0, [pc, #472]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a2a6:	f7fb fd71 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d009      	beq.n	800a2c6 <HAL_SPI_Init+0x56>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2ba:	d004      	beq.n	800a2c6 <HAL_SPI_Init+0x56>
 800a2bc:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800a2c0:	486f      	ldr	r0, [pc, #444]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a2c2:	f7fb fd63 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00e      	beq.n	800a2ec <HAL_SPI_Init+0x7c>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2d6:	d009      	beq.n	800a2ec <HAL_SPI_Init+0x7c>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2e0:	d004      	beq.n	800a2ec <HAL_SPI_Init+0x7c>
 800a2e2:	f240 1149 	movw	r1, #329	@ 0x149
 800a2e6:	4866      	ldr	r0, [pc, #408]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a2e8:	f7fb fd50 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a2f4:	d040      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800a2fe:	d03b      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 800a308:	d036      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a312:	d031      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800a31c:	d02c      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a326:	d027      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800a330:	d022      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a33a:	d01d      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a344:	d018      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a34e:	d013      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a358:	d00e      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a362:	d009      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a36c:	d004      	beq.n	800a378 <HAL_SPI_Init+0x108>
 800a36e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800a372:	4843      	ldr	r0, [pc, #268]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a374:	f7fb fd0a 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a380:	d00d      	beq.n	800a39e <HAL_SPI_Init+0x12e>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d009      	beq.n	800a39e <HAL_SPI_Init+0x12e>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a392:	d004      	beq.n	800a39e <HAL_SPI_Init+0x12e>
 800a394:	f240 114b 	movw	r1, #331	@ 0x14b
 800a398:	4839      	ldr	r0, [pc, #228]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a39a:	f7fb fcf7 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a2:	2b08      	cmp	r3, #8
 800a3a4:	d008      	beq.n	800a3b8 <HAL_SPI_Init+0x148>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <HAL_SPI_Init+0x148>
 800a3ae:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800a3b2:	4833      	ldr	r0, [pc, #204]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a3b4:	f7fb fcea 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d020      	beq.n	800a402 <HAL_SPI_Init+0x192>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d01c      	beq.n	800a402 <HAL_SPI_Init+0x192>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	2b10      	cmp	r3, #16
 800a3ce:	d018      	beq.n	800a402 <HAL_SPI_Init+0x192>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	69db      	ldr	r3, [r3, #28]
 800a3d4:	2b18      	cmp	r3, #24
 800a3d6:	d014      	beq.n	800a402 <HAL_SPI_Init+0x192>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	d010      	beq.n	800a402 <HAL_SPI_Init+0x192>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	2b28      	cmp	r3, #40	@ 0x28
 800a3e6:	d00c      	beq.n	800a402 <HAL_SPI_Init+0x192>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	2b30      	cmp	r3, #48	@ 0x30
 800a3ee:	d008      	beq.n	800a402 <HAL_SPI_Init+0x192>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	2b38      	cmp	r3, #56	@ 0x38
 800a3f6:	d004      	beq.n	800a402 <HAL_SPI_Init+0x192>
 800a3f8:	f240 114d 	movw	r1, #333	@ 0x14d
 800a3fc:	4820      	ldr	r0, [pc, #128]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a3fe:	f7fb fcc5 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d008      	beq.n	800a41c <HAL_SPI_Init+0x1ac>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	2b80      	cmp	r3, #128	@ 0x80
 800a410:	d004      	beq.n	800a41c <HAL_SPI_Init+0x1ac>
 800a412:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 800a416:	481a      	ldr	r0, [pc, #104]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a418:	f7fb fcb8 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a420:	2b00      	cmp	r3, #0
 800a422:	d008      	beq.n	800a436 <HAL_SPI_Init+0x1c6>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a428:	2b10      	cmp	r3, #16
 800a42a:	d004      	beq.n	800a436 <HAL_SPI_Init+0x1c6>
 800a42c:	f240 114f 	movw	r1, #335	@ 0x14f
 800a430:	4813      	ldr	r0, [pc, #76]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a432:	f7fb fcab 	bl	8005d8c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d151      	bne.n	800a4e2 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d008      	beq.n	800a458 <HAL_SPI_Init+0x1e8>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d004      	beq.n	800a458 <HAL_SPI_Init+0x1e8>
 800a44e:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800a452:	480b      	ldr	r0, [pc, #44]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a454:	f7fb fc9a 	bl	8005d8c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d011      	beq.n	800a484 <HAL_SPI_Init+0x214>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d00d      	beq.n	800a484 <HAL_SPI_Init+0x214>
 800a468:	f240 1153 	movw	r1, #339	@ 0x153
 800a46c:	4804      	ldr	r0, [pc, #16]	@ (800a480 <HAL_SPI_Init+0x210>)
 800a46e:	f7fb fc8d 	bl	8005d8c <assert_failed>
 800a472:	e007      	b.n	800a484 <HAL_SPI_Init+0x214>
 800a474:	40013000 	.word	0x40013000
 800a478:	40003800 	.word	0x40003800
 800a47c:	40003c00 	.word	0x40003c00
 800a480:	08010bf0 	.word	0x08010bf0

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a48c:	d125      	bne.n	800a4da <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d050      	beq.n	800a538 <HAL_SPI_Init+0x2c8>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d04c      	beq.n	800a538 <HAL_SPI_Init+0x2c8>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	69db      	ldr	r3, [r3, #28]
 800a4a2:	2b10      	cmp	r3, #16
 800a4a4:	d048      	beq.n	800a538 <HAL_SPI_Init+0x2c8>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	2b18      	cmp	r3, #24
 800a4ac:	d044      	beq.n	800a538 <HAL_SPI_Init+0x2c8>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	2b20      	cmp	r3, #32
 800a4b4:	d040      	beq.n	800a538 <HAL_SPI_Init+0x2c8>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	2b28      	cmp	r3, #40	@ 0x28
 800a4bc:	d03c      	beq.n	800a538 <HAL_SPI_Init+0x2c8>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	2b30      	cmp	r3, #48	@ 0x30
 800a4c4:	d038      	beq.n	800a538 <HAL_SPI_Init+0x2c8>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	2b38      	cmp	r3, #56	@ 0x38
 800a4cc:	d034      	beq.n	800a538 <HAL_SPI_Init+0x2c8>
 800a4ce:	f240 1157 	movw	r1, #343	@ 0x157
 800a4d2:	485d      	ldr	r0, [pc, #372]	@ (800a648 <HAL_SPI_Init+0x3d8>)
 800a4d4:	f7fb fc5a 	bl	8005d8c <assert_failed>
 800a4d8:	e02e      	b.n	800a538 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	61da      	str	r2, [r3, #28]
 800a4e0:	e02a      	b.n	800a538 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d020      	beq.n	800a52c <HAL_SPI_Init+0x2bc>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	2b08      	cmp	r3, #8
 800a4f0:	d01c      	beq.n	800a52c <HAL_SPI_Init+0x2bc>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	2b10      	cmp	r3, #16
 800a4f8:	d018      	beq.n	800a52c <HAL_SPI_Init+0x2bc>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	2b18      	cmp	r3, #24
 800a500:	d014      	beq.n	800a52c <HAL_SPI_Init+0x2bc>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	2b20      	cmp	r3, #32
 800a508:	d010      	beq.n	800a52c <HAL_SPI_Init+0x2bc>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	2b28      	cmp	r3, #40	@ 0x28
 800a510:	d00c      	beq.n	800a52c <HAL_SPI_Init+0x2bc>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	2b30      	cmp	r3, #48	@ 0x30
 800a518:	d008      	beq.n	800a52c <HAL_SPI_Init+0x2bc>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	2b38      	cmp	r3, #56	@ 0x38
 800a520:	d004      	beq.n	800a52c <HAL_SPI_Init+0x2bc>
 800a522:	f240 1161 	movw	r1, #353	@ 0x161
 800a526:	4848      	ldr	r0, [pc, #288]	@ (800a648 <HAL_SPI_Init+0x3d8>)
 800a528:	f7fb fc30 	bl	8005d8c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7fb fc5e 	bl	8005e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a56e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a578:	d902      	bls.n	800a580 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	e002      	b.n	800a586 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a584:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a58e:	d007      	beq.n	800a5a0 <HAL_SPI_Init+0x330>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a598:	d002      	beq.n	800a5a0 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5e2:	ea42 0103 	orr.w	r1, r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	0c1b      	lsrs	r3, r3, #16
 800a5fc:	f003 0204 	and.w	r2, r3, #4
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a604:	f003 0310 	and.w	r3, r3, #16
 800a608:	431a      	orrs	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	431a      	orrs	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a61c:	ea42 0103 	orr.w	r1, r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	08010bf0 	.word	0x08010bf0

0800a64c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d104      	bne.n	800a66c <HAL_SPI_TransmitReceive_DMA+0x20>
 800a662:	f640 0172 	movw	r1, #2162	@ 0x872
 800a666:	487f      	ldr	r0, [pc, #508]	@ (800a864 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a668:	f7fb fb90 	bl	8005d8c <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <HAL_SPI_TransmitReceive_DMA+0x32>
 800a674:	f640 0173 	movw	r1, #2163	@ 0x873
 800a678:	487a      	ldr	r0, [pc, #488]	@ (800a864 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a67a:	f7fb fb87 	bl	8005d8c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d004      	beq.n	800a690 <HAL_SPI_TransmitReceive_DMA+0x44>
 800a686:	f640 0176 	movw	r1, #2166	@ 0x876
 800a68a:	4876      	ldr	r0, [pc, #472]	@ (800a864 <HAL_SPI_TransmitReceive_DMA+0x218>)
 800a68c:	f7fb fb7e 	bl	8005d8c <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a696:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d00c      	beq.n	800a6be <HAL_SPI_TransmitReceive_DMA+0x72>
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6aa:	d106      	bne.n	800a6ba <HAL_SPI_TransmitReceive_DMA+0x6e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <HAL_SPI_TransmitReceive_DMA+0x6e>
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
 800a6b6:	2b04      	cmp	r3, #4
 800a6b8:	d001      	beq.n	800a6be <HAL_SPI_TransmitReceive_DMA+0x72>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	e15f      	b.n	800a97e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a6ca:	887b      	ldrh	r3, [r7, #2]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <HAL_SPI_TransmitReceive_DMA+0x88>
  {
    return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e154      	b.n	800a97e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d101      	bne.n	800a6e2 <HAL_SPI_TransmitReceive_DMA+0x96>
 800a6de:	2302      	movs	r3, #2
 800a6e0:	e14d      	b.n	800a97e <HAL_SPI_TransmitReceive_DMA+0x332>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	d003      	beq.n	800a6fe <HAL_SPI_TransmitReceive_DMA+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2205      	movs	r2, #5
 800a6fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	887a      	ldrh	r2, [r7, #2]
 800a70e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	887a      	ldrh	r2, [r7, #2]
 800a714:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	887a      	ldrh	r2, [r7, #2]
 800a720:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	887a      	ldrh	r2, [r7, #2]
 800a728:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800a746:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a750:	d908      	bls.n	800a764 <HAL_SPI_TransmitReceive_DMA+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a760:	605a      	str	r2, [r3, #4]
 800a762:	e06f      	b.n	800a844 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a772:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a77e:	d126      	bne.n	800a7ce <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10f      	bne.n	800a7ac <HAL_SPI_TransmitReceive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a79a:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	085b      	lsrs	r3, r3, #1
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a7aa:	e010      	b.n	800a7ce <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a7ba:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	085b      	lsrs	r3, r3, #1
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7d8:	d134      	bne.n	800a844 <HAL_SPI_TransmitReceive_DMA+0x1f8>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a7e8:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d111      	bne.n	800a81e <HAL_SPI_TransmitReceive_DMA+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a808:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a810:	b29b      	uxth	r3, r3
 800a812:	085b      	lsrs	r3, r3, #1
 800a814:	b29a      	uxth	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800a81c:	e012      	b.n	800a844 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a82c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a834:	b29b      	uxth	r3, r3
 800a836:	085b      	lsrs	r3, r3, #1
 800a838:	b29b      	uxth	r3, r3
 800a83a:	3301      	adds	r3, #1
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d10f      	bne.n	800a870 <HAL_SPI_TransmitReceive_DMA+0x224>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a854:	4a04      	ldr	r2, [pc, #16]	@ (800a868 <HAL_SPI_TransmitReceive_DMA+0x21c>)
 800a856:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a85c:	4a03      	ldr	r2, [pc, #12]	@ (800a86c <HAL_SPI_TransmitReceive_DMA+0x220>)
 800a85e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a860:	e00e      	b.n	800a880 <HAL_SPI_TransmitReceive_DMA+0x234>
 800a862:	bf00      	nop
 800a864:	08010bf0 	.word	0x08010bf0
 800a868:	0800ad25 	.word	0x0800ad25
 800a86c:	0800abed 	.word	0x0800abed
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a874:	4a44      	ldr	r2, [pc, #272]	@ (800a988 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800a876:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a87c:	4a43      	ldr	r2, [pc, #268]	@ (800a98c <HAL_SPI_TransmitReceive_DMA+0x340>)
 800a87e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a884:	4a42      	ldr	r2, [pc, #264]	@ (800a990 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a886:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a88c:	2200      	movs	r2, #0
 800a88e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	330c      	adds	r3, #12
 800a89a:	4619      	mov	r1, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a8a8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a8aa:	f7fc fb9d 	bl	8006fe8 <HAL_DMA_Start_IT>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00b      	beq.n	800a8cc <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8b8:	f043 0210 	orr.w	r2, r3, #16
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e058      	b.n	800a97e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f042 0201 	orr.w	r2, r2, #1
 800a8da:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a904:	4619      	mov	r1, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	330c      	adds	r3, #12
 800a90c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a912:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a914:	f7fc fb68 	bl	8006fe8 <HAL_DMA_Start_IT>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00b      	beq.n	800a936 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a922:	f043 0210 	orr.w	r2, r3, #16
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e023      	b.n	800a97e <HAL_SPI_TransmitReceive_DMA+0x332>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a940:	2b40      	cmp	r3, #64	@ 0x40
 800a942:	d007      	beq.n	800a954 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a952:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0220 	orr.w	r2, r2, #32
 800a96a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f042 0202 	orr.w	r2, r2, #2
 800a97a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	0800ad41 	.word	0x0800ad41
 800a98c:	0800ac95 	.word	0x0800ac95
 800a990:	0800ad5d 	.word	0x0800ad5d

0800a994 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	099b      	lsrs	r3, r3, #6
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10f      	bne.n	800a9d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00a      	beq.n	800a9d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	099b      	lsrs	r3, r3, #6
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d004      	beq.n	800a9d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	4798      	blx	r3
    return;
 800a9d6:	e0d7      	b.n	800ab88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	085b      	lsrs	r3, r3, #1
 800a9dc:	f003 0301 	and.w	r3, r3, #1
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00a      	beq.n	800a9fa <HAL_SPI_IRQHandler+0x66>
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	09db      	lsrs	r3, r3, #7
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d004      	beq.n	800a9fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	4798      	blx	r3
    return;
 800a9f8:	e0c6      	b.n	800ab88 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	095b      	lsrs	r3, r3, #5
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10c      	bne.n	800aa20 <HAL_SPI_IRQHandler+0x8c>
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	099b      	lsrs	r3, r3, #6
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d106      	bne.n	800aa20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	0a1b      	lsrs	r3, r3, #8
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 80b4 	beq.w	800ab88 <HAL_SPI_IRQHandler+0x1f4>
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	095b      	lsrs	r3, r3, #5
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 80ad 	beq.w	800ab88 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	099b      	lsrs	r3, r3, #6
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d023      	beq.n	800aa82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	d011      	beq.n	800aa6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa4a:	f043 0204 	orr.w	r2, r3, #4
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	617b      	str	r3, [r7, #20]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	e00b      	b.n	800aa82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	613b      	str	r3, [r7, #16]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	613b      	str	r3, [r7, #16]
 800aa7e:	693b      	ldr	r3, [r7, #16]
        return;
 800aa80:	e082      	b.n	800ab88 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	095b      	lsrs	r3, r3, #5
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d014      	beq.n	800aab8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa92:	f043 0201 	orr.w	r2, r3, #1
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	60fb      	str	r3, [r7, #12]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	0a1b      	lsrs	r3, r3, #8
 800aabc:	f003 0301 	and.w	r3, r3, #1
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00c      	beq.n	800aade <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aac8:	f043 0208 	orr.w	r2, r3, #8
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aad0:	2300      	movs	r3, #0
 800aad2:	60bb      	str	r3, [r7, #8]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	60bb      	str	r3, [r7, #8]
 800aadc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d04f      	beq.n	800ab86 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aaf4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d104      	bne.n	800ab12 <HAL_SPI_IRQHandler+0x17e>
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d034      	beq.n	800ab7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f022 0203 	bic.w	r2, r2, #3
 800ab20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d011      	beq.n	800ab4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab2e:	4a18      	ldr	r2, [pc, #96]	@ (800ab90 <HAL_SPI_IRQHandler+0x1fc>)
 800ab30:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fc fac4 	bl	80070c4 <HAL_DMA_Abort_IT>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d016      	beq.n	800ab84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab5a:	4a0d      	ldr	r2, [pc, #52]	@ (800ab90 <HAL_SPI_IRQHandler+0x1fc>)
 800ab5c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fc faae 	bl	80070c4 <HAL_DMA_Abort_IT>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00a      	beq.n	800ab84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800ab7a:	e003      	b.n	800ab84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7fb f871 	bl	8005c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ab82:	e000      	b.n	800ab86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ab84:	bf00      	nop
    return;
 800ab86:	bf00      	nop
  }
}
 800ab88:	3720      	adds	r7, #32
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	0800ad9d 	.word	0x0800ad9d

0800ab94 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800abde:	b2db      	uxtb	r3, r3
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abfa:	f7fb fef1 	bl	80069e0 <HAL_GetTick>
 800abfe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0320 	and.w	r3, r3, #32
 800ac0a:	2b20      	cmp	r3, #32
 800ac0c:	d03c      	beq.n	800ac88 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685a      	ldr	r2, [r3, #4]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0220 	bic.w	r2, r2, #32
 800ac1c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d10d      	bne.n	800ac42 <SPI_DMAReceiveCplt+0x56>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac2e:	d108      	bne.n	800ac42 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f022 0203 	bic.w	r2, r2, #3
 800ac3e:	605a      	str	r2, [r3, #4]
 800ac40:	e007      	b.n	800ac52 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0201 	bic.w	r2, r2, #1
 800ac50:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	2164      	movs	r1, #100	@ 0x64
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 f9d4 	bl	800b004 <SPI_EndRxTransaction>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2220      	movs	r2, #32
 800ac66:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7fa ffef 	bl	8005c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac86:	e002      	b.n	800ac8e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7ff ff83 	bl	800ab94 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aca2:	f7fb fe9d 	bl	80069e0 <HAL_GetTick>
 800aca6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b20      	cmp	r3, #32
 800acb4:	d030      	beq.n	800ad18 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 0220 	bic.w	r2, r2, #32
 800acc4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	2164      	movs	r1, #100	@ 0x64
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 f9f2 	bl	800b0b4 <SPI_EndRxTxTransaction>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d005      	beq.n	800ace2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acda:	f043 0220 	orr.w	r2, r3, #32
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0203 	bic.w	r2, r2, #3
 800acf0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f7fa ffa7 	bl	8005c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ad16:	e002      	b.n	800ad1e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7fa ff98 	bl	8005c4e <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff ff38 	bl	800aba8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad38:	bf00      	nop
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff ff34 	bl	800abbc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad54:	bf00      	nop
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad68:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f022 0203 	bic.w	r2, r2, #3
 800ad78:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad7e:	f043 0210 	orr.w	r2, r3, #16
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f7fa ff68 	bl	8005c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad94:	bf00      	nop
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f7fa ff53 	bl	8005c64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	4613      	mov	r3, r2
 800add6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800add8:	f7fb fe02 	bl	80069e0 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade0:	1a9b      	subs	r3, r3, r2
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	4413      	add	r3, r2
 800ade6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ade8:	f7fb fdfa 	bl	80069e0 <HAL_GetTick>
 800adec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800adee:	4b39      	ldr	r3, [pc, #228]	@ (800aed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	015b      	lsls	r3, r3, #5
 800adf4:	0d1b      	lsrs	r3, r3, #20
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	fb02 f303 	mul.w	r3, r2, r3
 800adfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adfe:	e054      	b.n	800aeaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae06:	d050      	beq.n	800aeaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae08:	f7fb fdea 	bl	80069e0 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	69fa      	ldr	r2, [r7, #28]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d902      	bls.n	800ae1e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d13d      	bne.n	800ae9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ae2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ae36:	d111      	bne.n	800ae5c <SPI_WaitFlagStateUntilTimeout+0x94>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae40:	d004      	beq.n	800ae4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae4a:	d107      	bne.n	800ae5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae64:	d10f      	bne.n	800ae86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e017      	b.n	800aeca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	bf0c      	ite	eq
 800aeba:	2301      	moveq	r3, #1
 800aebc:	2300      	movne	r3, #0
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	461a      	mov	r2, r3
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d19b      	bne.n	800ae00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3720      	adds	r7, #32
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20000014 	.word	0x20000014

0800aed8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08a      	sub	sp, #40	@ 0x28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
 800aee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800aeea:	f7fb fd79 	bl	80069e0 <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef2:	1a9b      	subs	r3, r3, r2
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	4413      	add	r3, r2
 800aef8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800aefa:	f7fb fd71 	bl	80069e0 <HAL_GetTick>
 800aefe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	330c      	adds	r3, #12
 800af06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800af08:	4b3d      	ldr	r3, [pc, #244]	@ (800b000 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	00da      	lsls	r2, r3, #3
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	0d1b      	lsrs	r3, r3, #20
 800af18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af1a:	fb02 f303 	mul.w	r3, r2, r3
 800af1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800af20:	e060      	b.n	800afe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800af28:	d107      	bne.n	800af3a <SPI_WaitFifoStateUntilTimeout+0x62>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d104      	bne.n	800af3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800af38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af40:	d050      	beq.n	800afe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af42:	f7fb fd4d 	bl	80069e0 <HAL_GetTick>
 800af46:	4602      	mov	r2, r0
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af4e:	429a      	cmp	r2, r3
 800af50:	d902      	bls.n	800af58 <SPI_WaitFifoStateUntilTimeout+0x80>
 800af52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af54:	2b00      	cmp	r3, #0
 800af56:	d13d      	bne.n	800afd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800af66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af70:	d111      	bne.n	800af96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af7a:	d004      	beq.n	800af86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af84:	d107      	bne.n	800af96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af9e:	d10f      	bne.n	800afc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800afbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e010      	b.n	800aff6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800afda:	2300      	movs	r3, #0
 800afdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689a      	ldr	r2, [r3, #8]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	4013      	ands	r3, r2
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d196      	bne.n	800af22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3728      	adds	r7, #40	@ 0x28
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20000014 	.word	0x20000014

0800b004 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af02      	add	r7, sp, #8
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b018:	d111      	bne.n	800b03e <SPI_EndRxTransaction+0x3a>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b022:	d004      	beq.n	800b02e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b02c:	d107      	bne.n	800b03e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b03c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2200      	movs	r2, #0
 800b046:	2180      	movs	r1, #128	@ 0x80
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7ff febd 	bl	800adc8 <SPI_WaitFlagStateUntilTimeout>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d007      	beq.n	800b064 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b058:	f043 0220 	orr.w	r2, r3, #32
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e023      	b.n	800b0ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b06c:	d11d      	bne.n	800b0aa <SPI_EndRxTransaction+0xa6>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b076:	d004      	beq.n	800b082 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b080:	d113      	bne.n	800b0aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2200      	movs	r2, #0
 800b08a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f7ff ff22 	bl	800aed8 <SPI_WaitFifoStateUntilTimeout>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d007      	beq.n	800b0aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b09e:	f043 0220 	orr.w	r2, r3, #32
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e000      	b.n	800b0ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f7ff ff03 	bl	800aed8 <SPI_WaitFifoStateUntilTimeout>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d007      	beq.n	800b0e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0dc:	f043 0220 	orr.w	r2, r3, #32
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e027      	b.n	800b138 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	2180      	movs	r1, #128	@ 0x80
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f7ff fe68 	bl	800adc8 <SPI_WaitFlagStateUntilTimeout>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d007      	beq.n	800b10e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b102:	f043 0220 	orr.w	r2, r3, #32
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e014      	b.n	800b138 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2200      	movs	r2, #0
 800b116:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff fedc 	bl	800aed8 <SPI_WaitFifoStateUntilTimeout>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d007      	beq.n	800b136 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b12a:	f043 0220 	orr.w	r2, r3, #32
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e000      	b.n	800b138 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e0e6      	b.n	800b320 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a74      	ldr	r2, [pc, #464]	@ (800b328 <HAL_TIM_Base_Init+0x1e8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d036      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b164:	d031      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a70      	ldr	r2, [pc, #448]	@ (800b32c <HAL_TIM_Base_Init+0x1ec>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d02c      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a6e      	ldr	r2, [pc, #440]	@ (800b330 <HAL_TIM_Base_Init+0x1f0>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d027      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a6d      	ldr	r2, [pc, #436]	@ (800b334 <HAL_TIM_Base_Init+0x1f4>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d022      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a6b      	ldr	r2, [pc, #428]	@ (800b338 <HAL_TIM_Base_Init+0x1f8>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d01d      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a6a      	ldr	r2, [pc, #424]	@ (800b33c <HAL_TIM_Base_Init+0x1fc>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d018      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a68      	ldr	r2, [pc, #416]	@ (800b340 <HAL_TIM_Base_Init+0x200>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d013      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a67      	ldr	r2, [pc, #412]	@ (800b344 <HAL_TIM_Base_Init+0x204>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d00e      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a65      	ldr	r2, [pc, #404]	@ (800b348 <HAL_TIM_Base_Init+0x208>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d009      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a64      	ldr	r2, [pc, #400]	@ (800b34c <HAL_TIM_Base_Init+0x20c>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d004      	beq.n	800b1ca <HAL_TIM_Base_Init+0x8a>
 800b1c0:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800b1c4:	4862      	ldr	r0, [pc, #392]	@ (800b350 <HAL_TIM_Base_Init+0x210>)
 800b1c6:	f7fa fde1 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d014      	beq.n	800b1fc <HAL_TIM_Base_Init+0xbc>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	2b10      	cmp	r3, #16
 800b1d8:	d010      	beq.n	800b1fc <HAL_TIM_Base_Init+0xbc>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	2b20      	cmp	r3, #32
 800b1e0:	d00c      	beq.n	800b1fc <HAL_TIM_Base_Init+0xbc>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	2b40      	cmp	r3, #64	@ 0x40
 800b1e8:	d008      	beq.n	800b1fc <HAL_TIM_Base_Init+0xbc>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	2b60      	cmp	r3, #96	@ 0x60
 800b1f0:	d004      	beq.n	800b1fc <HAL_TIM_Base_Init+0xbc>
 800b1f2:	f240 1117 	movw	r1, #279	@ 0x117
 800b1f6:	4856      	ldr	r0, [pc, #344]	@ (800b350 <HAL_TIM_Base_Init+0x210>)
 800b1f8:	f7fa fdc8 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00e      	beq.n	800b222 <HAL_TIM_Base_Init+0xe2>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b20c:	d009      	beq.n	800b222 <HAL_TIM_Base_Init+0xe2>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b216:	d004      	beq.n	800b222 <HAL_TIM_Base_Init+0xe2>
 800b218:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800b21c:	484c      	ldr	r0, [pc, #304]	@ (800b350 <HAL_TIM_Base_Init+0x210>)
 800b21e:	f7fa fdb5 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b22a:	d004      	beq.n	800b236 <HAL_TIM_Base_Init+0xf6>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a40      	ldr	r2, [pc, #256]	@ (800b334 <HAL_TIM_Base_Init+0x1f4>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d107      	bne.n	800b246 <HAL_TIM_Base_Init+0x106>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bf14      	ite	ne
 800b23e:	2301      	movne	r3, #1
 800b240:	2300      	moveq	r3, #0
 800b242:	b2db      	uxtb	r3, r3
 800b244:	e00e      	b.n	800b264 <HAL_TIM_Base_Init+0x124>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d006      	beq.n	800b25c <HAL_TIM_Base_Init+0x11c>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b256:	d201      	bcs.n	800b25c <HAL_TIM_Base_Init+0x11c>
 800b258:	2301      	movs	r3, #1
 800b25a:	e000      	b.n	800b25e <HAL_TIM_Base_Init+0x11e>
 800b25c:	2300      	movs	r3, #0
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	d104      	bne.n	800b272 <HAL_TIM_Base_Init+0x132>
 800b268:	f240 1119 	movw	r1, #281	@ 0x119
 800b26c:	4838      	ldr	r0, [pc, #224]	@ (800b350 <HAL_TIM_Base_Init+0x210>)
 800b26e:	f7fa fd8d 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d008      	beq.n	800b28c <HAL_TIM_Base_Init+0x14c>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	2b80      	cmp	r3, #128	@ 0x80
 800b280:	d004      	beq.n	800b28c <HAL_TIM_Base_Init+0x14c>
 800b282:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800b286:	4832      	ldr	r0, [pc, #200]	@ (800b350 <HAL_TIM_Base_Init+0x210>)
 800b288:	f7fa fd80 	bl	8005d8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b00      	cmp	r3, #0
 800b296:	d106      	bne.n	800b2a6 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7fb f9d1 	bl	8006648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f001 ff43 	bl	800d144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	40012c00 	.word	0x40012c00
 800b32c:	40000400 	.word	0x40000400
 800b330:	40000800 	.word	0x40000800
 800b334:	40000c00 	.word	0x40000c00
 800b338:	40001000 	.word	0x40001000
 800b33c:	40001400 	.word	0x40001400
 800b340:	40013400 	.word	0x40013400
 800b344:	40014000 	.word	0x40014000
 800b348:	40014400 	.word	0x40014400
 800b34c:	40014800 	.word	0x40014800
 800b350:	08010c28 	.word	0x08010c28

0800b354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a4a      	ldr	r2, [pc, #296]	@ (800b48c <HAL_TIM_Base_Start_IT+0x138>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d036      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b36e:	d031      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a46      	ldr	r2, [pc, #280]	@ (800b490 <HAL_TIM_Base_Start_IT+0x13c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d02c      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a45      	ldr	r2, [pc, #276]	@ (800b494 <HAL_TIM_Base_Start_IT+0x140>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d027      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a43      	ldr	r2, [pc, #268]	@ (800b498 <HAL_TIM_Base_Start_IT+0x144>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d022      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a42      	ldr	r2, [pc, #264]	@ (800b49c <HAL_TIM_Base_Start_IT+0x148>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d01d      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a40      	ldr	r2, [pc, #256]	@ (800b4a0 <HAL_TIM_Base_Start_IT+0x14c>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d018      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a3f      	ldr	r2, [pc, #252]	@ (800b4a4 <HAL_TIM_Base_Start_IT+0x150>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d013      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a3d      	ldr	r2, [pc, #244]	@ (800b4a8 <HAL_TIM_Base_Start_IT+0x154>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d00e      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a3c      	ldr	r2, [pc, #240]	@ (800b4ac <HAL_TIM_Base_Start_IT+0x158>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d009      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a3a      	ldr	r2, [pc, #232]	@ (800b4b0 <HAL_TIM_Base_Start_IT+0x15c>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d004      	beq.n	800b3d4 <HAL_TIM_Base_Start_IT+0x80>
 800b3ca:	f240 11d3 	movw	r1, #467	@ 0x1d3
 800b3ce:	4839      	ldr	r0, [pc, #228]	@ (800b4b4 <HAL_TIM_Base_Start_IT+0x160>)
 800b3d0:	f7fa fcdc 	bl	8005d8c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d001      	beq.n	800b3e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e04f      	b.n	800b484 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68da      	ldr	r2, [r3, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0201 	orr.w	r2, r2, #1
 800b3fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a22      	ldr	r2, [pc, #136]	@ (800b48c <HAL_TIM_Base_Start_IT+0x138>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d01d      	beq.n	800b442 <HAL_TIM_Base_Start_IT+0xee>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b40e:	d018      	beq.n	800b442 <HAL_TIM_Base_Start_IT+0xee>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a1e      	ldr	r2, [pc, #120]	@ (800b490 <HAL_TIM_Base_Start_IT+0x13c>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d013      	beq.n	800b442 <HAL_TIM_Base_Start_IT+0xee>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a1d      	ldr	r2, [pc, #116]	@ (800b494 <HAL_TIM_Base_Start_IT+0x140>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d00e      	beq.n	800b442 <HAL_TIM_Base_Start_IT+0xee>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a1b      	ldr	r2, [pc, #108]	@ (800b498 <HAL_TIM_Base_Start_IT+0x144>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d009      	beq.n	800b442 <HAL_TIM_Base_Start_IT+0xee>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a1c      	ldr	r2, [pc, #112]	@ (800b4a4 <HAL_TIM_Base_Start_IT+0x150>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d004      	beq.n	800b442 <HAL_TIM_Base_Start_IT+0xee>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a1a      	ldr	r2, [pc, #104]	@ (800b4a8 <HAL_TIM_Base_Start_IT+0x154>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d115      	bne.n	800b46e <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	4b1b      	ldr	r3, [pc, #108]	@ (800b4b8 <HAL_TIM_Base_Start_IT+0x164>)
 800b44a:	4013      	ands	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b06      	cmp	r3, #6
 800b452:	d015      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x12c>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b45a:	d011      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f042 0201 	orr.w	r2, r2, #1
 800b46a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b46c:	e008      	b.n	800b480 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f042 0201 	orr.w	r2, r2, #1
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	e000      	b.n	800b482 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	40012c00 	.word	0x40012c00
 800b490:	40000400 	.word	0x40000400
 800b494:	40000800 	.word	0x40000800
 800b498:	40000c00 	.word	0x40000c00
 800b49c:	40001000 	.word	0x40001000
 800b4a0:	40001400 	.word	0x40001400
 800b4a4:	40013400 	.word	0x40013400
 800b4a8:	40014000 	.word	0x40014000
 800b4ac:	40014400 	.word	0x40014400
 800b4b0:	40014800 	.word	0x40014800
 800b4b4:	08010c28 	.word	0x08010c28
 800b4b8:	00010007 	.word	0x00010007

0800b4bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a31      	ldr	r2, [pc, #196]	@ (800b590 <HAL_TIM_Base_Stop_IT+0xd4>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d036      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4d6:	d031      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a2d      	ldr	r2, [pc, #180]	@ (800b594 <HAL_TIM_Base_Stop_IT+0xd8>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d02c      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b598 <HAL_TIM_Base_Stop_IT+0xdc>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d027      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a2a      	ldr	r2, [pc, #168]	@ (800b59c <HAL_TIM_Base_Stop_IT+0xe0>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d022      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a29      	ldr	r2, [pc, #164]	@ (800b5a0 <HAL_TIM_Base_Stop_IT+0xe4>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d01d      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a27      	ldr	r2, [pc, #156]	@ (800b5a4 <HAL_TIM_Base_Stop_IT+0xe8>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d018      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a26      	ldr	r2, [pc, #152]	@ (800b5a8 <HAL_TIM_Base_Stop_IT+0xec>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d013      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a24      	ldr	r2, [pc, #144]	@ (800b5ac <HAL_TIM_Base_Stop_IT+0xf0>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d00e      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a23      	ldr	r2, [pc, #140]	@ (800b5b0 <HAL_TIM_Base_Stop_IT+0xf4>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d009      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a21      	ldr	r2, [pc, #132]	@ (800b5b4 <HAL_TIM_Base_Stop_IT+0xf8>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d004      	beq.n	800b53c <HAL_TIM_Base_Stop_IT+0x80>
 800b532:	f240 11fb 	movw	r1, #507	@ 0x1fb
 800b536:	4820      	ldr	r0, [pc, #128]	@ (800b5b8 <HAL_TIM_Base_Stop_IT+0xfc>)
 800b538:	f7fa fc28 	bl	8005d8c <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68da      	ldr	r2, [r3, #12]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 0201 	bic.w	r2, r2, #1
 800b54a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6a1a      	ldr	r2, [r3, #32]
 800b552:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b556:	4013      	ands	r3, r2
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10f      	bne.n	800b57c <HAL_TIM_Base_Stop_IT+0xc0>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6a1a      	ldr	r2, [r3, #32]
 800b562:	f240 4344 	movw	r3, #1092	@ 0x444
 800b566:	4013      	ands	r3, r2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d107      	bne.n	800b57c <HAL_TIM_Base_Stop_IT+0xc0>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 0201 	bic.w	r2, r2, #1
 800b57a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	40012c00 	.word	0x40012c00
 800b594:	40000400 	.word	0x40000400
 800b598:	40000800 	.word	0x40000800
 800b59c:	40000c00 	.word	0x40000c00
 800b5a0:	40001000 	.word	0x40001000
 800b5a4:	40001400 	.word	0x40001400
 800b5a8:	40013400 	.word	0x40013400
 800b5ac:	40014000 	.word	0x40014000
 800b5b0:	40014400 	.word	0x40014400
 800b5b4:	40014800 	.word	0x40014800
 800b5b8:	08010c28 	.word	0x08010c28

0800b5bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e0e6      	b.n	800b79c <HAL_TIM_PWM_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a74      	ldr	r2, [pc, #464]	@ (800b7a4 <HAL_TIM_PWM_Init+0x1e8>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d036      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5e0:	d031      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a70      	ldr	r2, [pc, #448]	@ (800b7a8 <HAL_TIM_PWM_Init+0x1ec>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d02c      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a6e      	ldr	r2, [pc, #440]	@ (800b7ac <HAL_TIM_PWM_Init+0x1f0>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d027      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a6d      	ldr	r2, [pc, #436]	@ (800b7b0 <HAL_TIM_PWM_Init+0x1f4>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d022      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a6b      	ldr	r2, [pc, #428]	@ (800b7b4 <HAL_TIM_PWM_Init+0x1f8>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d01d      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a6a      	ldr	r2, [pc, #424]	@ (800b7b8 <HAL_TIM_PWM_Init+0x1fc>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d018      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a68      	ldr	r2, [pc, #416]	@ (800b7bc <HAL_TIM_PWM_Init+0x200>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d013      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a67      	ldr	r2, [pc, #412]	@ (800b7c0 <HAL_TIM_PWM_Init+0x204>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d00e      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a65      	ldr	r2, [pc, #404]	@ (800b7c4 <HAL_TIM_PWM_Init+0x208>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d009      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a64      	ldr	r2, [pc, #400]	@ (800b7c8 <HAL_TIM_PWM_Init+0x20c>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d004      	beq.n	800b646 <HAL_TIM_PWM_Init+0x8a>
 800b63c:	f240 5133 	movw	r1, #1331	@ 0x533
 800b640:	4862      	ldr	r0, [pc, #392]	@ (800b7cc <HAL_TIM_PWM_Init+0x210>)
 800b642:	f7fa fba3 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d014      	beq.n	800b678 <HAL_TIM_PWM_Init+0xbc>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	2b10      	cmp	r3, #16
 800b654:	d010      	beq.n	800b678 <HAL_TIM_PWM_Init+0xbc>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	2b20      	cmp	r3, #32
 800b65c:	d00c      	beq.n	800b678 <HAL_TIM_PWM_Init+0xbc>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	2b40      	cmp	r3, #64	@ 0x40
 800b664:	d008      	beq.n	800b678 <HAL_TIM_PWM_Init+0xbc>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	2b60      	cmp	r3, #96	@ 0x60
 800b66c:	d004      	beq.n	800b678 <HAL_TIM_PWM_Init+0xbc>
 800b66e:	f240 5134 	movw	r1, #1332	@ 0x534
 800b672:	4856      	ldr	r0, [pc, #344]	@ (800b7cc <HAL_TIM_PWM_Init+0x210>)
 800b674:	f7fa fb8a 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00e      	beq.n	800b69e <HAL_TIM_PWM_Init+0xe2>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b688:	d009      	beq.n	800b69e <HAL_TIM_PWM_Init+0xe2>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b692:	d004      	beq.n	800b69e <HAL_TIM_PWM_Init+0xe2>
 800b694:	f240 5135 	movw	r1, #1333	@ 0x535
 800b698:	484c      	ldr	r0, [pc, #304]	@ (800b7cc <HAL_TIM_PWM_Init+0x210>)
 800b69a:	f7fa fb77 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6a6:	d004      	beq.n	800b6b2 <HAL_TIM_PWM_Init+0xf6>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a40      	ldr	r2, [pc, #256]	@ (800b7b0 <HAL_TIM_PWM_Init+0x1f4>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d107      	bne.n	800b6c2 <HAL_TIM_PWM_Init+0x106>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bf14      	ite	ne
 800b6ba:	2301      	movne	r3, #1
 800b6bc:	2300      	moveq	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	e00e      	b.n	800b6e0 <HAL_TIM_PWM_Init+0x124>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d006      	beq.n	800b6d8 <HAL_TIM_PWM_Init+0x11c>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6d2:	d201      	bcs.n	800b6d8 <HAL_TIM_PWM_Init+0x11c>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e000      	b.n	800b6da <HAL_TIM_PWM_Init+0x11e>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <HAL_TIM_PWM_Init+0x132>
 800b6e4:	f240 5136 	movw	r1, #1334	@ 0x536
 800b6e8:	4838      	ldr	r0, [pc, #224]	@ (800b7cc <HAL_TIM_PWM_Init+0x210>)
 800b6ea:	f7fa fb4f 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d008      	beq.n	800b708 <HAL_TIM_PWM_Init+0x14c>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	2b80      	cmp	r3, #128	@ 0x80
 800b6fc:	d004      	beq.n	800b708 <HAL_TIM_PWM_Init+0x14c>
 800b6fe:	f240 5137 	movw	r1, #1335	@ 0x537
 800b702:	4832      	ldr	r0, [pc, #200]	@ (800b7cc <HAL_TIM_PWM_Init+0x210>)
 800b704:	f7fa fb42 	bl	8005d8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b00      	cmp	r3, #0
 800b712:	d106      	bne.n	800b722 <HAL_TIM_PWM_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f857 	bl	800b7d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2202      	movs	r2, #2
 800b726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3304      	adds	r3, #4
 800b732:	4619      	mov	r1, r3
 800b734:	4610      	mov	r0, r2
 800b736:	f001 fd05 	bl	800d144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2201      	movs	r2, #1
 800b75e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	40012c00 	.word	0x40012c00
 800b7a8:	40000400 	.word	0x40000400
 800b7ac:	40000800 	.word	0x40000800
 800b7b0:	40000c00 	.word	0x40000c00
 800b7b4:	40001000 	.word	0x40001000
 800b7b8:	40001400 	.word	0x40001400
 800b7bc:	40013400 	.word	0x40013400
 800b7c0:	40014000 	.word	0x40014000
 800b7c4:	40014400 	.word	0x40014400
 800b7c8:	40014800 	.word	0x40014800
 800b7cc:	08010c28 	.word	0x08010c28

0800b7d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a85      	ldr	r2, [pc, #532]	@ (800ba08 <HAL_TIM_PWM_Start+0x224>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d115      	bne.n	800b824 <HAL_TIM_PWM_Start+0x40>
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 808d 	beq.w	800b91a <HAL_TIM_PWM_Start+0x136>
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2b04      	cmp	r3, #4
 800b804:	f000 8089 	beq.w	800b91a <HAL_TIM_PWM_Start+0x136>
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2b08      	cmp	r3, #8
 800b80c:	f000 8085 	beq.w	800b91a <HAL_TIM_PWM_Start+0x136>
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b0c      	cmp	r3, #12
 800b814:	f000 8081 	beq.w	800b91a <HAL_TIM_PWM_Start+0x136>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b10      	cmp	r3, #16
 800b81c:	d07d      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b14      	cmp	r3, #20
 800b822:	d07a      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82c:	d10b      	bne.n	800b846 <HAL_TIM_PWM_Start+0x62>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d072      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b04      	cmp	r3, #4
 800b838:	d06f      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b08      	cmp	r3, #8
 800b83e:	d06c      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b0c      	cmp	r3, #12
 800b844:	d069      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a70      	ldr	r2, [pc, #448]	@ (800ba0c <HAL_TIM_PWM_Start+0x228>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d10b      	bne.n	800b868 <HAL_TIM_PWM_Start+0x84>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d061      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d05e      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b08      	cmp	r3, #8
 800b860:	d05b      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b0c      	cmp	r3, #12
 800b866:	d058      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a68      	ldr	r2, [pc, #416]	@ (800ba10 <HAL_TIM_PWM_Start+0x22c>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d10b      	bne.n	800b88a <HAL_TIM_PWM_Start+0xa6>
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d050      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2b04      	cmp	r3, #4
 800b87c:	d04d      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	2b08      	cmp	r3, #8
 800b882:	d04a      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	2b0c      	cmp	r3, #12
 800b888:	d047      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a61      	ldr	r2, [pc, #388]	@ (800ba14 <HAL_TIM_PWM_Start+0x230>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d10b      	bne.n	800b8ac <HAL_TIM_PWM_Start+0xc8>
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d03f      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d03c      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2b08      	cmp	r3, #8
 800b8a4:	d039      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b0c      	cmp	r3, #12
 800b8aa:	d036      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a59      	ldr	r2, [pc, #356]	@ (800ba18 <HAL_TIM_PWM_Start+0x234>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d111      	bne.n	800b8da <HAL_TIM_PWM_Start+0xf6>
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d02e      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d02b      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2b08      	cmp	r3, #8
 800b8c6:	d028      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2b0c      	cmp	r3, #12
 800b8cc:	d025      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b10      	cmp	r3, #16
 800b8d2:	d022      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	2b14      	cmp	r3, #20
 800b8d8:	d01f      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a4f      	ldr	r2, [pc, #316]	@ (800ba1c <HAL_TIM_PWM_Start+0x238>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d105      	bne.n	800b8f0 <HAL_TIM_PWM_Start+0x10c>
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d017      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b04      	cmp	r3, #4
 800b8ee:	d014      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a4a      	ldr	r2, [pc, #296]	@ (800ba20 <HAL_TIM_PWM_Start+0x23c>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d102      	bne.n	800b900 <HAL_TIM_PWM_Start+0x11c>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00c      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a47      	ldr	r2, [pc, #284]	@ (800ba24 <HAL_TIM_PWM_Start+0x240>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d102      	bne.n	800b910 <HAL_TIM_PWM_Start+0x12c>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d004      	beq.n	800b91a <HAL_TIM_PWM_Start+0x136>
 800b910:	f240 51bc 	movw	r1, #1468	@ 0x5bc
 800b914:	4844      	ldr	r0, [pc, #272]	@ (800ba28 <HAL_TIM_PWM_Start+0x244>)
 800b916:	f7fa fa39 	bl	8005d8c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d109      	bne.n	800b934 <HAL_TIM_PWM_Start+0x150>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b01      	cmp	r3, #1
 800b92a:	bf14      	ite	ne
 800b92c:	2301      	movne	r3, #1
 800b92e:	2300      	moveq	r3, #0
 800b930:	b2db      	uxtb	r3, r3
 800b932:	e03c      	b.n	800b9ae <HAL_TIM_PWM_Start+0x1ca>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b04      	cmp	r3, #4
 800b938:	d109      	bne.n	800b94e <HAL_TIM_PWM_Start+0x16a>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b01      	cmp	r3, #1
 800b944:	bf14      	ite	ne
 800b946:	2301      	movne	r3, #1
 800b948:	2300      	moveq	r3, #0
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	e02f      	b.n	800b9ae <HAL_TIM_PWM_Start+0x1ca>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b08      	cmp	r3, #8
 800b952:	d109      	bne.n	800b968 <HAL_TIM_PWM_Start+0x184>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	bf14      	ite	ne
 800b960:	2301      	movne	r3, #1
 800b962:	2300      	moveq	r3, #0
 800b964:	b2db      	uxtb	r3, r3
 800b966:	e022      	b.n	800b9ae <HAL_TIM_PWM_Start+0x1ca>
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	2b0c      	cmp	r3, #12
 800b96c:	d109      	bne.n	800b982 <HAL_TIM_PWM_Start+0x19e>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b01      	cmp	r3, #1
 800b978:	bf14      	ite	ne
 800b97a:	2301      	movne	r3, #1
 800b97c:	2300      	moveq	r3, #0
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	e015      	b.n	800b9ae <HAL_TIM_PWM_Start+0x1ca>
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b10      	cmp	r3, #16
 800b986:	d109      	bne.n	800b99c <HAL_TIM_PWM_Start+0x1b8>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b01      	cmp	r3, #1
 800b992:	bf14      	ite	ne
 800b994:	2301      	movne	r3, #1
 800b996:	2300      	moveq	r3, #0
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	e008      	b.n	800b9ae <HAL_TIM_PWM_Start+0x1ca>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	bf14      	ite	ne
 800b9a8:	2301      	movne	r3, #1
 800b9aa:	2300      	moveq	r3, #0
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <HAL_TIM_PWM_Start+0x1d2>
  {
    return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e0af      	b.n	800bb16 <HAL_TIM_PWM_Start+0x332>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d104      	bne.n	800b9c6 <HAL_TIM_PWM_Start+0x1e2>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b9c4:	e036      	b.n	800ba34 <HAL_TIM_PWM_Start+0x250>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	d104      	bne.n	800b9d6 <HAL_TIM_PWM_Start+0x1f2>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b9d4:	e02e      	b.n	800ba34 <HAL_TIM_PWM_Start+0x250>
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	2b08      	cmp	r3, #8
 800b9da:	d104      	bne.n	800b9e6 <HAL_TIM_PWM_Start+0x202>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2202      	movs	r2, #2
 800b9e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b9e4:	e026      	b.n	800ba34 <HAL_TIM_PWM_Start+0x250>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b0c      	cmp	r3, #12
 800b9ea:	d104      	bne.n	800b9f6 <HAL_TIM_PWM_Start+0x212>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b9f4:	e01e      	b.n	800ba34 <HAL_TIM_PWM_Start+0x250>
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b10      	cmp	r3, #16
 800b9fa:	d117      	bne.n	800ba2c <HAL_TIM_PWM_Start+0x248>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2202      	movs	r2, #2
 800ba00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba04:	e016      	b.n	800ba34 <HAL_TIM_PWM_Start+0x250>
 800ba06:	bf00      	nop
 800ba08:	40012c00 	.word	0x40012c00
 800ba0c:	40000400 	.word	0x40000400
 800ba10:	40000800 	.word	0x40000800
 800ba14:	40000c00 	.word	0x40000c00
 800ba18:	40013400 	.word	0x40013400
 800ba1c:	40014000 	.word	0x40014000
 800ba20:	40014400 	.word	0x40014400
 800ba24:	40014800 	.word	0x40014800
 800ba28:	08010c28 	.word	0x08010c28
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f002 f821 	bl	800da84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a36      	ldr	r2, [pc, #216]	@ (800bb20 <HAL_TIM_PWM_Start+0x33c>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d013      	beq.n	800ba74 <HAL_TIM_PWM_Start+0x290>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a34      	ldr	r2, [pc, #208]	@ (800bb24 <HAL_TIM_PWM_Start+0x340>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d00e      	beq.n	800ba74 <HAL_TIM_PWM_Start+0x290>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a33      	ldr	r2, [pc, #204]	@ (800bb28 <HAL_TIM_PWM_Start+0x344>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d009      	beq.n	800ba74 <HAL_TIM_PWM_Start+0x290>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a31      	ldr	r2, [pc, #196]	@ (800bb2c <HAL_TIM_PWM_Start+0x348>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d004      	beq.n	800ba74 <HAL_TIM_PWM_Start+0x290>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a30      	ldr	r2, [pc, #192]	@ (800bb30 <HAL_TIM_PWM_Start+0x34c>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d101      	bne.n	800ba78 <HAL_TIM_PWM_Start+0x294>
 800ba74:	2301      	movs	r3, #1
 800ba76:	e000      	b.n	800ba7a <HAL_TIM_PWM_Start+0x296>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d007      	beq.n	800ba8e <HAL_TIM_PWM_Start+0x2aa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a23      	ldr	r2, [pc, #140]	@ (800bb20 <HAL_TIM_PWM_Start+0x33c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d01d      	beq.n	800bad4 <HAL_TIM_PWM_Start+0x2f0>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baa0:	d018      	beq.n	800bad4 <HAL_TIM_PWM_Start+0x2f0>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a23      	ldr	r2, [pc, #140]	@ (800bb34 <HAL_TIM_PWM_Start+0x350>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d013      	beq.n	800bad4 <HAL_TIM_PWM_Start+0x2f0>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a21      	ldr	r2, [pc, #132]	@ (800bb38 <HAL_TIM_PWM_Start+0x354>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d00e      	beq.n	800bad4 <HAL_TIM_PWM_Start+0x2f0>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a20      	ldr	r2, [pc, #128]	@ (800bb3c <HAL_TIM_PWM_Start+0x358>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d009      	beq.n	800bad4 <HAL_TIM_PWM_Start+0x2f0>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a17      	ldr	r2, [pc, #92]	@ (800bb24 <HAL_TIM_PWM_Start+0x340>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d004      	beq.n	800bad4 <HAL_TIM_PWM_Start+0x2f0>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a16      	ldr	r2, [pc, #88]	@ (800bb28 <HAL_TIM_PWM_Start+0x344>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d115      	bne.n	800bb00 <HAL_TIM_PWM_Start+0x31c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	689a      	ldr	r2, [r3, #8]
 800bada:	4b19      	ldr	r3, [pc, #100]	@ (800bb40 <HAL_TIM_PWM_Start+0x35c>)
 800badc:	4013      	ands	r3, r2
 800bade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b06      	cmp	r3, #6
 800bae4:	d015      	beq.n	800bb12 <HAL_TIM_PWM_Start+0x32e>
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baec:	d011      	beq.n	800bb12 <HAL_TIM_PWM_Start+0x32e>
    {
      __HAL_TIM_ENABLE(htim);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f042 0201 	orr.w	r2, r2, #1
 800bafc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bafe:	e008      	b.n	800bb12 <HAL_TIM_PWM_Start+0x32e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f042 0201 	orr.w	r2, r2, #1
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	e000      	b.n	800bb14 <HAL_TIM_PWM_Start+0x330>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	40012c00 	.word	0x40012c00
 800bb24:	40013400 	.word	0x40013400
 800bb28:	40014000 	.word	0x40014000
 800bb2c:	40014400 	.word	0x40014400
 800bb30:	40014800 	.word	0x40014800
 800bb34:	40000400 	.word	0x40000400
 800bb38:	40000800 	.word	0x40000800
 800bb3c:	40000c00 	.word	0x40000c00
 800bb40:	00010007 	.word	0x00010007

0800bb44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a8d      	ldr	r2, [pc, #564]	@ (800bd88 <HAL_TIM_PWM_Stop+0x244>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d115      	bne.n	800bb84 <HAL_TIM_PWM_Stop+0x40>
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 808d 	beq.w	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	2b04      	cmp	r3, #4
 800bb64:	f000 8089 	beq.w	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b08      	cmp	r3, #8
 800bb6c:	f000 8085 	beq.w	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b0c      	cmp	r3, #12
 800bb74:	f000 8081 	beq.w	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b10      	cmp	r3, #16
 800bb7c:	d07d      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	2b14      	cmp	r3, #20
 800bb82:	d07a      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb8c:	d10b      	bne.n	800bba6 <HAL_TIM_PWM_Stop+0x62>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d072      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b04      	cmp	r3, #4
 800bb98:	d06f      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2b08      	cmp	r3, #8
 800bb9e:	d06c      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	2b0c      	cmp	r3, #12
 800bba4:	d069      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a78      	ldr	r2, [pc, #480]	@ (800bd8c <HAL_TIM_PWM_Stop+0x248>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d10b      	bne.n	800bbc8 <HAL_TIM_PWM_Stop+0x84>
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d061      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b04      	cmp	r3, #4
 800bbba:	d05e      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b08      	cmp	r3, #8
 800bbc0:	d05b      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b0c      	cmp	r3, #12
 800bbc6:	d058      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a70      	ldr	r2, [pc, #448]	@ (800bd90 <HAL_TIM_PWM_Stop+0x24c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d10b      	bne.n	800bbea <HAL_TIM_PWM_Stop+0xa6>
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d050      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b04      	cmp	r3, #4
 800bbdc:	d04d      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	2b08      	cmp	r3, #8
 800bbe2:	d04a      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b0c      	cmp	r3, #12
 800bbe8:	d047      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a69      	ldr	r2, [pc, #420]	@ (800bd94 <HAL_TIM_PWM_Stop+0x250>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d10b      	bne.n	800bc0c <HAL_TIM_PWM_Stop+0xc8>
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d03f      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	2b04      	cmp	r3, #4
 800bbfe:	d03c      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	d039      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b0c      	cmp	r3, #12
 800bc0a:	d036      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a61      	ldr	r2, [pc, #388]	@ (800bd98 <HAL_TIM_PWM_Stop+0x254>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d111      	bne.n	800bc3a <HAL_TIM_PWM_Stop+0xf6>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d02e      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b04      	cmp	r3, #4
 800bc20:	d02b      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2b08      	cmp	r3, #8
 800bc26:	d028      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b0c      	cmp	r3, #12
 800bc2c:	d025      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	2b10      	cmp	r3, #16
 800bc32:	d022      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2b14      	cmp	r3, #20
 800bc38:	d01f      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a57      	ldr	r2, [pc, #348]	@ (800bd9c <HAL_TIM_PWM_Stop+0x258>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d105      	bne.n	800bc50 <HAL_TIM_PWM_Stop+0x10c>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d017      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	d014      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a52      	ldr	r2, [pc, #328]	@ (800bda0 <HAL_TIM_PWM_Stop+0x25c>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d102      	bne.n	800bc60 <HAL_TIM_PWM_Stop+0x11c>
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00c      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a4f      	ldr	r2, [pc, #316]	@ (800bda4 <HAL_TIM_PWM_Stop+0x260>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d102      	bne.n	800bc70 <HAL_TIM_PWM_Stop+0x12c>
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d004      	beq.n	800bc7a <HAL_TIM_PWM_Stop+0x136>
 800bc70:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 800bc74:	484c      	ldr	r0, [pc, #304]	@ (800bda8 <HAL_TIM_PWM_Stop+0x264>)
 800bc76:	f7fa f889 	bl	8005d8c <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 fefe 	bl	800da84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a3e      	ldr	r2, [pc, #248]	@ (800bd88 <HAL_TIM_PWM_Stop+0x244>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d013      	beq.n	800bcba <HAL_TIM_PWM_Stop+0x176>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a40      	ldr	r2, [pc, #256]	@ (800bd98 <HAL_TIM_PWM_Stop+0x254>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d00e      	beq.n	800bcba <HAL_TIM_PWM_Stop+0x176>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a3e      	ldr	r2, [pc, #248]	@ (800bd9c <HAL_TIM_PWM_Stop+0x258>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d009      	beq.n	800bcba <HAL_TIM_PWM_Stop+0x176>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a3d      	ldr	r2, [pc, #244]	@ (800bda0 <HAL_TIM_PWM_Stop+0x25c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d004      	beq.n	800bcba <HAL_TIM_PWM_Stop+0x176>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a3b      	ldr	r2, [pc, #236]	@ (800bda4 <HAL_TIM_PWM_Stop+0x260>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d101      	bne.n	800bcbe <HAL_TIM_PWM_Stop+0x17a>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e000      	b.n	800bcc0 <HAL_TIM_PWM_Stop+0x17c>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d017      	beq.n	800bcf4 <HAL_TIM_PWM_Stop+0x1b0>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6a1a      	ldr	r2, [r3, #32]
 800bcca:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bcce:	4013      	ands	r3, r2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10f      	bne.n	800bcf4 <HAL_TIM_PWM_Stop+0x1b0>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6a1a      	ldr	r2, [r3, #32]
 800bcda:	f240 4344 	movw	r3, #1092	@ 0x444
 800bcde:	4013      	ands	r3, r2
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d107      	bne.n	800bcf4 <HAL_TIM_PWM_Stop+0x1b0>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bcf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	6a1a      	ldr	r2, [r3, #32]
 800bcfa:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bcfe:	4013      	ands	r3, r2
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10f      	bne.n	800bd24 <HAL_TIM_PWM_Stop+0x1e0>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6a1a      	ldr	r2, [r3, #32]
 800bd0a:	f240 4344 	movw	r3, #1092	@ 0x444
 800bd0e:	4013      	ands	r3, r2
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d107      	bne.n	800bd24 <HAL_TIM_PWM_Stop+0x1e0>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f022 0201 	bic.w	r2, r2, #1
 800bd22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d104      	bne.n	800bd34 <HAL_TIM_PWM_Stop+0x1f0>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd32:	e023      	b.n	800bd7c <HAL_TIM_PWM_Stop+0x238>
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2b04      	cmp	r3, #4
 800bd38:	d104      	bne.n	800bd44 <HAL_TIM_PWM_Stop+0x200>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd42:	e01b      	b.n	800bd7c <HAL_TIM_PWM_Stop+0x238>
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b08      	cmp	r3, #8
 800bd48:	d104      	bne.n	800bd54 <HAL_TIM_PWM_Stop+0x210>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd52:	e013      	b.n	800bd7c <HAL_TIM_PWM_Stop+0x238>
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2b0c      	cmp	r3, #12
 800bd58:	d104      	bne.n	800bd64 <HAL_TIM_PWM_Stop+0x220>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd62:	e00b      	b.n	800bd7c <HAL_TIM_PWM_Stop+0x238>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2b10      	cmp	r3, #16
 800bd68:	d104      	bne.n	800bd74 <HAL_TIM_PWM_Stop+0x230>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd72:	e003      	b.n	800bd7c <HAL_TIM_PWM_Stop+0x238>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	40012c00 	.word	0x40012c00
 800bd8c:	40000400 	.word	0x40000400
 800bd90:	40000800 	.word	0x40000800
 800bd94:	40000c00 	.word	0x40000c00
 800bd98:	40013400 	.word	0x40013400
 800bd9c:	40014000 	.word	0x40014000
 800bda0:	40014400 	.word	0x40014400
 800bda4:	40014800 	.word	0x40014800
 800bda8:	08010c28 	.word	0x08010c28

0800bdac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e1b0      	b.n	800c122 <HAL_TIM_Encoder_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a7f      	ldr	r2, [pc, #508]	@ (800bfc4 <HAL_TIM_Encoder_Init+0x218>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d01d      	beq.n	800be06 <HAL_TIM_Encoder_Init+0x5a>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdd2:	d018      	beq.n	800be06 <HAL_TIM_Encoder_Init+0x5a>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a7b      	ldr	r2, [pc, #492]	@ (800bfc8 <HAL_TIM_Encoder_Init+0x21c>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d013      	beq.n	800be06 <HAL_TIM_Encoder_Init+0x5a>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a7a      	ldr	r2, [pc, #488]	@ (800bfcc <HAL_TIM_Encoder_Init+0x220>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d00e      	beq.n	800be06 <HAL_TIM_Encoder_Init+0x5a>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a78      	ldr	r2, [pc, #480]	@ (800bfd0 <HAL_TIM_Encoder_Init+0x224>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d009      	beq.n	800be06 <HAL_TIM_Encoder_Init+0x5a>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a77      	ldr	r2, [pc, #476]	@ (800bfd4 <HAL_TIM_Encoder_Init+0x228>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d004      	beq.n	800be06 <HAL_TIM_Encoder_Init+0x5a>
 800bdfc:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800be00:	4875      	ldr	r0, [pc, #468]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800be02:	f7f9 ffc3 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d014      	beq.n	800be38 <HAL_TIM_Encoder_Init+0x8c>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	2b10      	cmp	r3, #16
 800be14:	d010      	beq.n	800be38 <HAL_TIM_Encoder_Init+0x8c>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	d00c      	beq.n	800be38 <HAL_TIM_Encoder_Init+0x8c>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	2b40      	cmp	r3, #64	@ 0x40
 800be24:	d008      	beq.n	800be38 <HAL_TIM_Encoder_Init+0x8c>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	2b60      	cmp	r3, #96	@ 0x60
 800be2c:	d004      	beq.n	800be38 <HAL_TIM_Encoder_Init+0x8c>
 800be2e:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800be32:	4869      	ldr	r0, [pc, #420]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800be34:	f7f9 ffaa 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00e      	beq.n	800be5e <HAL_TIM_Encoder_Init+0xb2>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be48:	d009      	beq.n	800be5e <HAL_TIM_Encoder_Init+0xb2>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be52:	d004      	beq.n	800be5e <HAL_TIM_Encoder_Init+0xb2>
 800be54:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 800be58:	485f      	ldr	r0, [pc, #380]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800be5a:	f7f9 ff97 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d008      	beq.n	800be78 <HAL_TIM_Encoder_Init+0xcc>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	2b80      	cmp	r3, #128	@ 0x80
 800be6c:	d004      	beq.n	800be78 <HAL_TIM_Encoder_Init+0xcc>
 800be6e:	f640 31e6 	movw	r1, #3046	@ 0xbe6
 800be72:	4859      	ldr	r0, [pc, #356]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800be74:	f7f9 ff8a 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d00c      	beq.n	800be9a <HAL_TIM_Encoder_Init+0xee>
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d008      	beq.n	800be9a <HAL_TIM_Encoder_Init+0xee>
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b03      	cmp	r3, #3
 800be8e:	d004      	beq.n	800be9a <HAL_TIM_Encoder_Init+0xee>
 800be90:	f640 31e7 	movw	r1, #3047	@ 0xbe7
 800be94:	4850      	ldr	r0, [pc, #320]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800be96:	f7f9 ff79 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d00c      	beq.n	800bebc <HAL_TIM_Encoder_Init+0x110>
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d008      	beq.n	800bebc <HAL_TIM_Encoder_Init+0x110>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d004      	beq.n	800bebc <HAL_TIM_Encoder_Init+0x110>
 800beb2:	f640 31e8 	movw	r1, #3048	@ 0xbe8
 800beb6:	4848      	ldr	r0, [pc, #288]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800beb8:	f7f9 ff68 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d00c      	beq.n	800bede <HAL_TIM_Encoder_Init+0x132>
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d008      	beq.n	800bede <HAL_TIM_Encoder_Init+0x132>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	2b03      	cmp	r3, #3
 800bed2:	d004      	beq.n	800bede <HAL_TIM_Encoder_Init+0x132>
 800bed4:	f640 31e9 	movw	r1, #3049	@ 0xbe9
 800bed8:	483f      	ldr	r0, [pc, #252]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800beda:	f7f9 ff57 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d008      	beq.n	800bef8 <HAL_TIM_Encoder_Init+0x14c>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	2b02      	cmp	r3, #2
 800beec:	d004      	beq.n	800bef8 <HAL_TIM_Encoder_Init+0x14c>
 800beee:	f640 31ea 	movw	r1, #3050	@ 0xbea
 800bef2:	4839      	ldr	r0, [pc, #228]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800bef4:	f7f9 ff4a 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d008      	beq.n	800bf12 <HAL_TIM_Encoder_Init+0x166>
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	695b      	ldr	r3, [r3, #20]
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d004      	beq.n	800bf12 <HAL_TIM_Encoder_Init+0x166>
 800bf08:	f640 31eb 	movw	r1, #3051	@ 0xbeb
 800bf0c:	4832      	ldr	r0, [pc, #200]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800bf0e:	f7f9 ff3d 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d010      	beq.n	800bf3c <HAL_TIM_Encoder_Init+0x190>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	d00c      	beq.n	800bf3c <HAL_TIM_Encoder_Init+0x190>
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	2b08      	cmp	r3, #8
 800bf28:	d008      	beq.n	800bf3c <HAL_TIM_Encoder_Init+0x190>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	2b0c      	cmp	r3, #12
 800bf30:	d004      	beq.n	800bf3c <HAL_TIM_Encoder_Init+0x190>
 800bf32:	f640 31ec 	movw	r1, #3052	@ 0xbec
 800bf36:	4828      	ldr	r0, [pc, #160]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800bf38:	f7f9 ff28 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d010      	beq.n	800bf66 <HAL_TIM_Encoder_Init+0x1ba>
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d00c      	beq.n	800bf66 <HAL_TIM_Encoder_Init+0x1ba>
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	2b08      	cmp	r3, #8
 800bf52:	d008      	beq.n	800bf66 <HAL_TIM_Encoder_Init+0x1ba>
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	2b0c      	cmp	r3, #12
 800bf5a:	d004      	beq.n	800bf66 <HAL_TIM_Encoder_Init+0x1ba>
 800bf5c:	f640 31ed 	movw	r1, #3053	@ 0xbed
 800bf60:	481d      	ldr	r0, [pc, #116]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800bf62:	f7f9 ff13 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	691b      	ldr	r3, [r3, #16]
 800bf6a:	2b0f      	cmp	r3, #15
 800bf6c:	d904      	bls.n	800bf78 <HAL_TIM_Encoder_Init+0x1cc>
 800bf6e:	f640 31ee 	movw	r1, #3054	@ 0xbee
 800bf72:	4819      	ldr	r0, [pc, #100]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800bf74:	f7f9 ff0a 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	6a1b      	ldr	r3, [r3, #32]
 800bf7c:	2b0f      	cmp	r3, #15
 800bf7e:	d904      	bls.n	800bf8a <HAL_TIM_Encoder_Init+0x1de>
 800bf80:	f640 31ef 	movw	r1, #3055	@ 0xbef
 800bf84:	4814      	ldr	r0, [pc, #80]	@ (800bfd8 <HAL_TIM_Encoder_Init+0x22c>)
 800bf86:	f7f9 ff01 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf92:	d004      	beq.n	800bf9e <HAL_TIM_Encoder_Init+0x1f2>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a0d      	ldr	r2, [pc, #52]	@ (800bfd0 <HAL_TIM_Encoder_Init+0x224>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d107      	bne.n	800bfae <HAL_TIM_Encoder_Init+0x202>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	bf14      	ite	ne
 800bfa6:	2301      	movne	r3, #1
 800bfa8:	2300      	moveq	r3, #0
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	e01a      	b.n	800bfe4 <HAL_TIM_Encoder_Init+0x238>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d012      	beq.n	800bfdc <HAL_TIM_Encoder_Init+0x230>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfbe:	d20d      	bcs.n	800bfdc <HAL_TIM_Encoder_Init+0x230>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e00c      	b.n	800bfde <HAL_TIM_Encoder_Init+0x232>
 800bfc4:	40012c00 	.word	0x40012c00
 800bfc8:	40000400 	.word	0x40000400
 800bfcc:	40000800 	.word	0x40000800
 800bfd0:	40000c00 	.word	0x40000c00
 800bfd4:	40013400 	.word	0x40013400
 800bfd8:	08010c28 	.word	0x08010c28
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d104      	bne.n	800bff2 <HAL_TIM_Encoder_Init+0x246>
 800bfe8:	f44f 613f 	mov.w	r1, #3056	@ 0xbf0
 800bfec:	484f      	ldr	r0, [pc, #316]	@ (800c12c <HAL_TIM_Encoder_Init+0x380>)
 800bfee:	f7f9 fecd 	bl	8005d8c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <HAL_TIM_Encoder_Init+0x260>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7fa faaa 	bl	8006560 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2202      	movs	r2, #2
 800c010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	6812      	ldr	r2, [r2, #0]
 800c01e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800c022:	f023 0307 	bic.w	r3, r3, #7
 800c026:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3304      	adds	r3, #4
 800c030:	4619      	mov	r1, r3
 800c032:	4610      	mov	r0, r2
 800c034:	f001 f886 	bl	800d144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	697a      	ldr	r2, [r7, #20]
 800c056:	4313      	orrs	r3, r2
 800c058:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c060:	f023 0303 	bic.w	r3, r3, #3
 800c064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	689a      	ldr	r2, [r3, #8]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	021b      	lsls	r3, r3, #8
 800c070:	4313      	orrs	r3, r2
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	4313      	orrs	r3, r2
 800c076:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c07e:	f023 030c 	bic.w	r3, r3, #12
 800c082:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c08a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c08e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	68da      	ldr	r2, [r3, #12]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	69db      	ldr	r3, [r3, #28]
 800c098:	021b      	lsls	r3, r3, #8
 800c09a:	4313      	orrs	r3, r2
 800c09c:	693a      	ldr	r2, [r7, #16]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	011a      	lsls	r2, r3, #4
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	031b      	lsls	r3, r3, #12
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c0bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c0c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	011b      	lsls	r3, r3, #4
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3718      	adds	r7, #24
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	08010c28 	.word	0x08010c28

0800c130 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c140:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c148:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c150:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c158:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a4d      	ldr	r2, [pc, #308]	@ (800c294 <HAL_TIM_Encoder_Start+0x164>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d01d      	beq.n	800c1a0 <HAL_TIM_Encoder_Start+0x70>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c16c:	d018      	beq.n	800c1a0 <HAL_TIM_Encoder_Start+0x70>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a49      	ldr	r2, [pc, #292]	@ (800c298 <HAL_TIM_Encoder_Start+0x168>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d013      	beq.n	800c1a0 <HAL_TIM_Encoder_Start+0x70>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a47      	ldr	r2, [pc, #284]	@ (800c29c <HAL_TIM_Encoder_Start+0x16c>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00e      	beq.n	800c1a0 <HAL_TIM_Encoder_Start+0x70>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a46      	ldr	r2, [pc, #280]	@ (800c2a0 <HAL_TIM_Encoder_Start+0x170>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d009      	beq.n	800c1a0 <HAL_TIM_Encoder_Start+0x70>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a44      	ldr	r2, [pc, #272]	@ (800c2a4 <HAL_TIM_Encoder_Start+0x174>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d004      	beq.n	800c1a0 <HAL_TIM_Encoder_Start+0x70>
 800c196:	f640 41a1 	movw	r1, #3233	@ 0xca1
 800c19a:	4843      	ldr	r0, [pc, #268]	@ (800c2a8 <HAL_TIM_Encoder_Start+0x178>)
 800c19c:	f7f9 fdf6 	bl	8005d8c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d110      	bne.n	800c1c8 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1a6:	7bfb      	ldrb	r3, [r7, #15]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d102      	bne.n	800c1b2 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1ac:	7b7b      	ldrb	r3, [r7, #13]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d001      	beq.n	800c1b6 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e069      	b.n	800c28a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1c6:	e031      	b.n	800c22c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	d110      	bne.n	800c1f0 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1ce:	7bbb      	ldrb	r3, [r7, #14]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d102      	bne.n	800c1da <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c1d4:	7b3b      	ldrb	r3, [r7, #12]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d001      	beq.n	800c1de <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e055      	b.n	800c28a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2202      	movs	r2, #2
 800c1e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1ee:	e01d      	b.n	800c22c <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1f0:	7bfb      	ldrb	r3, [r7, #15]
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d108      	bne.n	800c208 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d105      	bne.n	800c208 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c1fc:	7b7b      	ldrb	r3, [r7, #13]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d102      	bne.n	800c208 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c202:	7b3b      	ldrb	r3, [r7, #12]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d001      	beq.n	800c20c <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e03e      	b.n	800c28a <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2202      	movs	r2, #2
 800c210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2202      	movs	r2, #2
 800c220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <HAL_TIM_Encoder_Start+0x10a>
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	2b04      	cmp	r3, #4
 800c236:	d008      	beq.n	800c24a <HAL_TIM_Encoder_Start+0x11a>
 800c238:	e00f      	b.n	800c25a <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2201      	movs	r2, #1
 800c240:	2100      	movs	r1, #0
 800c242:	4618      	mov	r0, r3
 800c244:	f001 fc1e 	bl	800da84 <TIM_CCxChannelCmd>
      break;
 800c248:	e016      	b.n	800c278 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2201      	movs	r2, #1
 800c250:	2104      	movs	r1, #4
 800c252:	4618      	mov	r0, r3
 800c254:	f001 fc16 	bl	800da84 <TIM_CCxChannelCmd>
      break;
 800c258:	e00e      	b.n	800c278 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2201      	movs	r2, #1
 800c260:	2100      	movs	r1, #0
 800c262:	4618      	mov	r0, r3
 800c264:	f001 fc0e 	bl	800da84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2201      	movs	r2, #1
 800c26e:	2104      	movs	r1, #4
 800c270:	4618      	mov	r0, r3
 800c272:	f001 fc07 	bl	800da84 <TIM_CCxChannelCmd>
      break;
 800c276:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f042 0201 	orr.w	r2, r2, #1
 800c286:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	40012c00 	.word	0x40012c00
 800c298:	40000400 	.word	0x40000400
 800c29c:	40000800 	.word	0x40000800
 800c2a0:	40000c00 	.word	0x40000c00
 800c2a4:	40013400 	.word	0x40013400
 800c2a8:	08010c28 	.word	0x08010c28

0800c2ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d020      	beq.n	800c310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f003 0302 	and.w	r3, r3, #2
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d01b      	beq.n	800c310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f06f 0202 	mvn.w	r2, #2
 800c2e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d003      	beq.n	800c2fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 ff06 	bl	800d108 <HAL_TIM_IC_CaptureCallback>
 800c2fc:	e005      	b.n	800c30a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fef8 	bl	800d0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 ff09 	bl	800d11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f003 0304 	and.w	r3, r3, #4
 800c316:	2b00      	cmp	r3, #0
 800c318:	d020      	beq.n	800c35c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f003 0304 	and.w	r3, r3, #4
 800c320:	2b00      	cmp	r3, #0
 800c322:	d01b      	beq.n	800c35c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f06f 0204 	mvn.w	r2, #4
 800c32c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2202      	movs	r2, #2
 800c332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fee0 	bl	800d108 <HAL_TIM_IC_CaptureCallback>
 800c348:	e005      	b.n	800c356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fed2 	bl	800d0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fee3 	bl	800d11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f003 0308 	and.w	r3, r3, #8
 800c362:	2b00      	cmp	r3, #0
 800c364:	d020      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f003 0308 	and.w	r3, r3, #8
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d01b      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f06f 0208 	mvn.w	r2, #8
 800c378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2204      	movs	r2, #4
 800c37e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	69db      	ldr	r3, [r3, #28]
 800c386:	f003 0303 	and.w	r3, r3, #3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d003      	beq.n	800c396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 feba 	bl	800d108 <HAL_TIM_IC_CaptureCallback>
 800c394:	e005      	b.n	800c3a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 feac 	bl	800d0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 febd 	bl	800d11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f003 0310 	and.w	r3, r3, #16
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d020      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f003 0310 	and.w	r3, r3, #16
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d01b      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f06f 0210 	mvn.w	r2, #16
 800c3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2208      	movs	r2, #8
 800c3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fe94 	bl	800d108 <HAL_TIM_IC_CaptureCallback>
 800c3e0:	e005      	b.n	800c3ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fe86 	bl	800d0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fe97 	bl	800d11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00c      	beq.n	800c418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d007      	beq.n	800c418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f06f 0201 	mvn.w	r2, #1
 800c410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7f8 fcde 	bl	8004dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d104      	bne.n	800c42c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00c      	beq.n	800c446 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c432:	2b00      	cmp	r3, #0
 800c434:	d007      	beq.n	800c446 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c43e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f001 fe2f 	bl	800e0a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00c      	beq.n	800c46a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f001 fe27 	bl	800e0b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00c      	beq.n	800c48e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d007      	beq.n	800c48e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fe51 	bl	800d130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	f003 0320 	and.w	r3, r3, #32
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00c      	beq.n	800c4b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f003 0320 	and.w	r3, r3, #32
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d007      	beq.n	800c4b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f06f 0220 	mvn.w	r2, #32
 800c4aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f001 fdef 	bl	800e090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c4b2:	bf00      	nop
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
	...

0800c4bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d016      	beq.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	d013      	beq.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b08      	cmp	r3, #8
 800c4dc:	d010      	beq.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b0c      	cmp	r3, #12
 800c4e2:	d00d      	beq.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b10      	cmp	r3, #16
 800c4e8:	d00a      	beq.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2b14      	cmp	r3, #20
 800c4ee:	d007      	beq.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b3c      	cmp	r3, #60	@ 0x3c
 800c4f4:	d004      	beq.n	800c500 <HAL_TIM_PWM_ConfigChannel+0x44>
 800c4f6:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 800c4fa:	488b      	ldr	r0, [pc, #556]	@ (800c728 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c4fc:	f7f9 fc46 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b60      	cmp	r3, #96	@ 0x60
 800c506:	d01c      	beq.n	800c542 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b70      	cmp	r3, #112	@ 0x70
 800c50e:	d018      	beq.n	800c542 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a85      	ldr	r2, [pc, #532]	@ (800c72c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d013      	beq.n	800c542 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a84      	ldr	r2, [pc, #528]	@ (800c730 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d00e      	beq.n	800c542 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a82      	ldr	r2, [pc, #520]	@ (800c734 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d009      	beq.n	800c542 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a81      	ldr	r2, [pc, #516]	@ (800c738 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d004      	beq.n	800c542 <HAL_TIM_PWM_ConfigChannel+0x86>
 800c538:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800c53c:	487a      	ldr	r0, [pc, #488]	@ (800c728 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c53e:	f7f9 fc25 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d008      	beq.n	800c55c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d004      	beq.n	800c55c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800c552:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 800c556:	4874      	ldr	r0, [pc, #464]	@ (800c728 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c558:	f7f9 fc18 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d008      	beq.n	800c576 <HAL_TIM_PWM_ConfigChannel+0xba>
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	2b04      	cmp	r3, #4
 800c56a:	d004      	beq.n	800c576 <HAL_TIM_PWM_ConfigChannel+0xba>
 800c56c:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 800c570:	486d      	ldr	r0, [pc, #436]	@ (800c728 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c572:	f7f9 fc0b 	bl	8005d8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d101      	bne.n	800c584 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800c580:	2302      	movs	r3, #2
 800c582:	e1d9      	b.n	800c938 <HAL_TIM_PWM_ConfigChannel+0x47c>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b14      	cmp	r3, #20
 800c590:	f200 81ca 	bhi.w	800c928 <HAL_TIM_PWM_ConfigChannel+0x46c>
 800c594:	a201      	add	r2, pc, #4	@ (adr r2, 800c59c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800c596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59a:	bf00      	nop
 800c59c:	0800c5f1 	.word	0x0800c5f1
 800c5a0:	0800c929 	.word	0x0800c929
 800c5a4:	0800c929 	.word	0x0800c929
 800c5a8:	0800c929 	.word	0x0800c929
 800c5ac:	0800c695 	.word	0x0800c695
 800c5b0:	0800c929 	.word	0x0800c929
 800c5b4:	0800c929 	.word	0x0800c929
 800c5b8:	0800c929 	.word	0x0800c929
 800c5bc:	0800c75d 	.word	0x0800c75d
 800c5c0:	0800c929 	.word	0x0800c929
 800c5c4:	0800c929 	.word	0x0800c929
 800c5c8:	0800c929 	.word	0x0800c929
 800c5cc:	0800c7e3 	.word	0x0800c7e3
 800c5d0:	0800c929 	.word	0x0800c929
 800c5d4:	0800c929 	.word	0x0800c929
 800c5d8:	0800c929 	.word	0x0800c929
 800c5dc:	0800c86b 	.word	0x0800c86b
 800c5e0:	0800c929 	.word	0x0800c929
 800c5e4:	0800c929 	.word	0x0800c929
 800c5e8:	0800c929 	.word	0x0800c929
 800c5ec:	0800c8c9 	.word	0x0800c8c9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a51      	ldr	r2, [pc, #324]	@ (800c73c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d02c      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c602:	d027      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a4d      	ldr	r2, [pc, #308]	@ (800c740 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d022      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a4c      	ldr	r2, [pc, #304]	@ (800c744 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d01d      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a4a      	ldr	r2, [pc, #296]	@ (800c748 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d018      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a49      	ldr	r2, [pc, #292]	@ (800c74c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d013      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a47      	ldr	r2, [pc, #284]	@ (800c750 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d00e      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a46      	ldr	r2, [pc, #280]	@ (800c754 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d009      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a44      	ldr	r2, [pc, #272]	@ (800c758 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d004      	beq.n	800c654 <HAL_TIM_PWM_ConfigChannel+0x198>
 800c64a:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800c64e:	4836      	ldr	r0, [pc, #216]	@ (800c728 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c650:	f7f9 fb9c 	bl	8005d8c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68b9      	ldr	r1, [r7, #8]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fe18 	bl	800d290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	699a      	ldr	r2, [r3, #24]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f042 0208 	orr.w	r2, r2, #8
 800c66e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	699a      	ldr	r2, [r3, #24]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f022 0204 	bic.w	r2, r2, #4
 800c67e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6999      	ldr	r1, [r3, #24]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	691a      	ldr	r2, [r3, #16]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	430a      	orrs	r2, r1
 800c690:	619a      	str	r2, [r3, #24]
      break;
 800c692:	e14c      	b.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a28      	ldr	r2, [pc, #160]	@ (800c73c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d022      	beq.n	800c6e4 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6a6:	d01d      	beq.n	800c6e4 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a24      	ldr	r2, [pc, #144]	@ (800c740 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d018      	beq.n	800c6e4 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a23      	ldr	r2, [pc, #140]	@ (800c744 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d013      	beq.n	800c6e4 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a21      	ldr	r2, [pc, #132]	@ (800c748 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d00e      	beq.n	800c6e4 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a20      	ldr	r2, [pc, #128]	@ (800c74c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d009      	beq.n	800c6e4 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a1e      	ldr	r2, [pc, #120]	@ (800c750 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d004      	beq.n	800c6e4 <HAL_TIM_PWM_ConfigChannel+0x228>
 800c6da:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 800c6de:	4812      	ldr	r0, [pc, #72]	@ (800c728 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800c6e0:	f7f9 fb54 	bl	8005d8c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68b9      	ldr	r1, [r7, #8]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fe8a 	bl	800d404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	699a      	ldr	r2, [r3, #24]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	699a      	ldr	r2, [r3, #24]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c70e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	6999      	ldr	r1, [r3, #24]
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	021a      	lsls	r2, r3, #8
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	619a      	str	r2, [r3, #24]
      break;
 800c724:	e103      	b.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x472>
 800c726:	bf00      	nop
 800c728:	08010c28 	.word	0x08010c28
 800c72c:	00010040 	.word	0x00010040
 800c730:	00010050 	.word	0x00010050
 800c734:	00010060 	.word	0x00010060
 800c738:	00010070 	.word	0x00010070
 800c73c:	40012c00 	.word	0x40012c00
 800c740:	40000400 	.word	0x40000400
 800c744:	40000800 	.word	0x40000800
 800c748:	40000c00 	.word	0x40000c00
 800c74c:	40013400 	.word	0x40013400
 800c750:	40014000 	.word	0x40014000
 800c754:	40014400 	.word	0x40014400
 800c758:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a77      	ldr	r2, [pc, #476]	@ (800c940 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d01d      	beq.n	800c7a2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c76e:	d018      	beq.n	800c7a2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a73      	ldr	r2, [pc, #460]	@ (800c944 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d013      	beq.n	800c7a2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a72      	ldr	r2, [pc, #456]	@ (800c948 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d00e      	beq.n	800c7a2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a70      	ldr	r2, [pc, #448]	@ (800c94c <HAL_TIM_PWM_ConfigChannel+0x490>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d009      	beq.n	800c7a2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a6f      	ldr	r2, [pc, #444]	@ (800c950 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d004      	beq.n	800c7a2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800c798:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 800c79c:	486d      	ldr	r0, [pc, #436]	@ (800c954 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c79e:	f7f9 faf5 	bl	8005d8c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68b9      	ldr	r1, [r7, #8]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fedd 	bl	800d568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	69da      	ldr	r2, [r3, #28]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f042 0208 	orr.w	r2, r2, #8
 800c7bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	69da      	ldr	r2, [r3, #28]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 0204 	bic.w	r2, r2, #4
 800c7cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	69d9      	ldr	r1, [r3, #28]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	691a      	ldr	r2, [r3, #16]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	61da      	str	r2, [r3, #28]
      break;
 800c7e0:	e0a5      	b.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a56      	ldr	r2, [pc, #344]	@ (800c940 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d01d      	beq.n	800c828 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7f4:	d018      	beq.n	800c828 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a52      	ldr	r2, [pc, #328]	@ (800c944 <HAL_TIM_PWM_ConfigChannel+0x488>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d013      	beq.n	800c828 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a50      	ldr	r2, [pc, #320]	@ (800c948 <HAL_TIM_PWM_ConfigChannel+0x48c>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d00e      	beq.n	800c828 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a4f      	ldr	r2, [pc, #316]	@ (800c94c <HAL_TIM_PWM_ConfigChannel+0x490>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d009      	beq.n	800c828 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a4d      	ldr	r2, [pc, #308]	@ (800c950 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d004      	beq.n	800c828 <HAL_TIM_PWM_ConfigChannel+0x36c>
 800c81e:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 800c822:	484c      	ldr	r0, [pc, #304]	@ (800c954 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c824:	f7f9 fab2 	bl	8005d8c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68b9      	ldr	r1, [r7, #8]
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 ff4c 	bl	800d6cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	69da      	ldr	r2, [r3, #28]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c842:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	69da      	ldr	r2, [r3, #28]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c852:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	69d9      	ldr	r1, [r3, #28]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	021a      	lsls	r2, r3, #8
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	430a      	orrs	r2, r1
 800c866:	61da      	str	r2, [r3, #28]
      break;
 800c868:	e061      	b.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a34      	ldr	r2, [pc, #208]	@ (800c940 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d009      	beq.n	800c888 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a35      	ldr	r2, [pc, #212]	@ (800c950 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d004      	beq.n	800c888 <HAL_TIM_PWM_ConfigChannel+0x3cc>
 800c87e:	f241 1104 	movw	r1, #4356	@ 0x1104
 800c882:	4834      	ldr	r0, [pc, #208]	@ (800c954 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c884:	f7f9 fa82 	bl	8005d8c <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68b9      	ldr	r1, [r7, #8]
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 ff94 	bl	800d7bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f042 0208 	orr.w	r2, r2, #8
 800c8a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f022 0204 	bic.w	r2, r2, #4
 800c8b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	691a      	ldr	r2, [r3, #16]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	430a      	orrs	r2, r1
 800c8c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c8c6:	e032      	b.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a1c      	ldr	r2, [pc, #112]	@ (800c940 <HAL_TIM_PWM_ConfigChannel+0x484>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d009      	beq.n	800c8e6 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c950 <HAL_TIM_PWM_ConfigChannel+0x494>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d004      	beq.n	800c8e6 <HAL_TIM_PWM_ConfigChannel+0x42a>
 800c8dc:	f241 1115 	movw	r1, #4373	@ 0x1115
 800c8e0:	481c      	ldr	r0, [pc, #112]	@ (800c954 <HAL_TIM_PWM_ConfigChannel+0x498>)
 800c8e2:	f7f9 fa53 	bl	8005d8c <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68b9      	ldr	r1, [r7, #8]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f000 ffc9 	bl	800d884 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c900:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c910:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	021a      	lsls	r2, r3, #8
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	430a      	orrs	r2, r1
 800c924:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c926:	e002      	b.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x472>
    }

    default:
      status = HAL_ERROR;
 800c928:	2301      	movs	r3, #1
 800c92a:	75fb      	strb	r3, [r7, #23]
      break;
 800c92c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c936:	7dfb      	ldrb	r3, [r7, #23]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3718      	adds	r7, #24
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	40012c00 	.word	0x40012c00
 800c944:	40000400 	.word	0x40000400
 800c948:	40000800 	.word	0x40000800
 800c94c:	40000c00 	.word	0x40000c00
 800c950:	40013400 	.word	0x40013400
 800c954:	08010c28 	.word	0x08010c28

0800c958 <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a33      	ldr	r2, [pc, #204]	@ (800ca34 <HAL_TIM_GenerateEvent+0xdc>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d036      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c974:	d031      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a2f      	ldr	r2, [pc, #188]	@ (800ca38 <HAL_TIM_GenerateEvent+0xe0>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d02c      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a2d      	ldr	r2, [pc, #180]	@ (800ca3c <HAL_TIM_GenerateEvent+0xe4>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d027      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a2c      	ldr	r2, [pc, #176]	@ (800ca40 <HAL_TIM_GenerateEvent+0xe8>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d022      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a2a      	ldr	r2, [pc, #168]	@ (800ca44 <HAL_TIM_GenerateEvent+0xec>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d01d      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a29      	ldr	r2, [pc, #164]	@ (800ca48 <HAL_TIM_GenerateEvent+0xf0>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d018      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a27      	ldr	r2, [pc, #156]	@ (800ca4c <HAL_TIM_GenerateEvent+0xf4>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d013      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a26      	ldr	r2, [pc, #152]	@ (800ca50 <HAL_TIM_GenerateEvent+0xf8>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00e      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a24      	ldr	r2, [pc, #144]	@ (800ca54 <HAL_TIM_GenerateEvent+0xfc>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d009      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a23      	ldr	r2, [pc, #140]	@ (800ca58 <HAL_TIM_GenerateEvent+0x100>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d004      	beq.n	800c9da <HAL_TIM_GenerateEvent+0x82>
 800c9d0:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 800c9d4:	4821      	ldr	r0, [pc, #132]	@ (800ca5c <HAL_TIM_GenerateEvent+0x104>)
 800c9d6:	f7f9 f9d9 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9e0:	d202      	bcs.n	800c9e8 <HAL_TIM_GenerateEvent+0x90>
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d104      	bne.n	800c9f2 <HAL_TIM_GenerateEvent+0x9a>
 800c9e8:	f241 4181 	movw	r1, #5249	@ 0x1481
 800c9ec:	481b      	ldr	r0, [pc, #108]	@ (800ca5c <HAL_TIM_GenerateEvent+0x104>)
 800c9ee:	f7f9 f9cd 	bl	8005d8c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d101      	bne.n	800ca00 <HAL_TIM_GenerateEvent+0xa8>
 800c9fc:	2302      	movs	r3, #2
 800c9fe:	e014      	b.n	800ca2a <HAL_TIM_GenerateEvent+0xd2>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	40012c00 	.word	0x40012c00
 800ca38:	40000400 	.word	0x40000400
 800ca3c:	40000800 	.word	0x40000800
 800ca40:	40000c00 	.word	0x40000c00
 800ca44:	40001000 	.word	0x40001000
 800ca48:	40001400 	.word	0x40001400
 800ca4c:	40013400 	.word	0x40013400
 800ca50:	40014000 	.word	0x40014000
 800ca54:	40014400 	.word	0x40014400
 800ca58:	40014800 	.word	0x40014800
 800ca5c:	08010c28 	.word	0x08010c28

0800ca60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d101      	bne.n	800ca7c <HAL_TIM_ConfigClockSource+0x1c>
 800ca78:	2302      	movs	r3, #2
 800ca7a:	e329      	b.n	800d0d0 <HAL_TIM_ConfigClockSource+0x670>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2202      	movs	r2, #2
 800ca88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca94:	d029      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b70      	cmp	r3, #112	@ 0x70
 800ca9c:	d025      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800caa6:	d020      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2b40      	cmp	r3, #64	@ 0x40
 800caae:	d01c      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b50      	cmp	r3, #80	@ 0x50
 800cab6:	d018      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b60      	cmp	r3, #96	@ 0x60
 800cabe:	d014      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d010      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b10      	cmp	r3, #16
 800cace:	d00c      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b20      	cmp	r3, #32
 800cad6:	d008      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b30      	cmp	r3, #48	@ 0x30
 800cade:	d004      	beq.n	800caea <HAL_TIM_ConfigClockSource+0x8a>
 800cae0:	f241 5156 	movw	r1, #5462	@ 0x1556
 800cae4:	4888      	ldr	r0, [pc, #544]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cae6:	f7f9 f951 	bl	8005d8c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800caf8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cafc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb16:	f000 810d 	beq.w	800cd34 <HAL_TIM_ConfigClockSource+0x2d4>
 800cb1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb1e:	f200 82ca 	bhi.w	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
 800cb22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb26:	d02d      	beq.n	800cb84 <HAL_TIM_ConfigClockSource+0x124>
 800cb28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb2c:	f200 82c3 	bhi.w	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
 800cb30:	2b70      	cmp	r3, #112	@ 0x70
 800cb32:	d06f      	beq.n	800cc14 <HAL_TIM_ConfigClockSource+0x1b4>
 800cb34:	2b70      	cmp	r3, #112	@ 0x70
 800cb36:	f200 82be 	bhi.w	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
 800cb3a:	2b60      	cmp	r3, #96	@ 0x60
 800cb3c:	f000 81d4 	beq.w	800cee8 <HAL_TIM_ConfigClockSource+0x488>
 800cb40:	2b60      	cmp	r3, #96	@ 0x60
 800cb42:	f200 82b8 	bhi.w	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
 800cb46:	2b50      	cmp	r3, #80	@ 0x50
 800cb48:	f000 8165 	beq.w	800ce16 <HAL_TIM_ConfigClockSource+0x3b6>
 800cb4c:	2b50      	cmp	r3, #80	@ 0x50
 800cb4e:	f200 82b2 	bhi.w	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
 800cb52:	2b40      	cmp	r3, #64	@ 0x40
 800cb54:	f000 8223 	beq.w	800cf9e <HAL_TIM_ConfigClockSource+0x53e>
 800cb58:	2b40      	cmp	r3, #64	@ 0x40
 800cb5a:	f200 82ac 	bhi.w	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
 800cb5e:	2b30      	cmp	r3, #48	@ 0x30
 800cb60:	f000 8278 	beq.w	800d054 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb64:	2b30      	cmp	r3, #48	@ 0x30
 800cb66:	f200 82a6 	bhi.w	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
 800cb6a:	2b20      	cmp	r3, #32
 800cb6c:	f000 8272 	beq.w	800d054 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb70:	2b20      	cmp	r3, #32
 800cb72:	f200 82a0 	bhi.w	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f000 826c 	beq.w	800d054 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb7c:	2b10      	cmp	r3, #16
 800cb7e:	f000 8269 	beq.w	800d054 <HAL_TIM_ConfigClockSource+0x5f4>
 800cb82:	e298      	b.n	800d0b6 <HAL_TIM_ConfigClockSource+0x656>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a60      	ldr	r2, [pc, #384]	@ (800cd0c <HAL_TIM_ConfigClockSource+0x2ac>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	f000 8296 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb98:	f000 8290 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a5b      	ldr	r2, [pc, #364]	@ (800cd10 <HAL_TIM_ConfigClockSource+0x2b0>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	f000 828a 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a59      	ldr	r2, [pc, #356]	@ (800cd14 <HAL_TIM_ConfigClockSource+0x2b4>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	f000 8284 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a57      	ldr	r2, [pc, #348]	@ (800cd18 <HAL_TIM_ConfigClockSource+0x2b8>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	f000 827e 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a55      	ldr	r2, [pc, #340]	@ (800cd1c <HAL_TIM_ConfigClockSource+0x2bc>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	f000 8278 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a53      	ldr	r2, [pc, #332]	@ (800cd20 <HAL_TIM_ConfigClockSource+0x2c0>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	f000 8272 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a51      	ldr	r2, [pc, #324]	@ (800cd24 <HAL_TIM_ConfigClockSource+0x2c4>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	f000 826c 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a4f      	ldr	r2, [pc, #316]	@ (800cd28 <HAL_TIM_ConfigClockSource+0x2c8>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	f000 8266 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a4d      	ldr	r2, [pc, #308]	@ (800cd2c <HAL_TIM_ConfigClockSource+0x2cc>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	f000 8260 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a4b      	ldr	r2, [pc, #300]	@ (800cd30 <HAL_TIM_ConfigClockSource+0x2d0>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	f000 825a 	beq.w	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
 800cc08:	f241 5162 	movw	r1, #5474	@ 0x1562
 800cc0c:	483e      	ldr	r0, [pc, #248]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cc0e:	f7f9 f8bd 	bl	8005d8c <assert_failed>
      break;
 800cc12:	e253      	b.n	800d0bc <HAL_TIM_ConfigClockSource+0x65c>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a3c      	ldr	r2, [pc, #240]	@ (800cd0c <HAL_TIM_ConfigClockSource+0x2ac>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d022      	beq.n	800cc64 <HAL_TIM_ConfigClockSource+0x204>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc26:	d01d      	beq.n	800cc64 <HAL_TIM_ConfigClockSource+0x204>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a38      	ldr	r2, [pc, #224]	@ (800cd10 <HAL_TIM_ConfigClockSource+0x2b0>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d018      	beq.n	800cc64 <HAL_TIM_ConfigClockSource+0x204>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a37      	ldr	r2, [pc, #220]	@ (800cd14 <HAL_TIM_ConfigClockSource+0x2b4>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d013      	beq.n	800cc64 <HAL_TIM_ConfigClockSource+0x204>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a35      	ldr	r2, [pc, #212]	@ (800cd18 <HAL_TIM_ConfigClockSource+0x2b8>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d00e      	beq.n	800cc64 <HAL_TIM_ConfigClockSource+0x204>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a36      	ldr	r2, [pc, #216]	@ (800cd24 <HAL_TIM_ConfigClockSource+0x2c4>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d009      	beq.n	800cc64 <HAL_TIM_ConfigClockSource+0x204>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a34      	ldr	r2, [pc, #208]	@ (800cd28 <HAL_TIM_ConfigClockSource+0x2c8>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d004      	beq.n	800cc64 <HAL_TIM_ConfigClockSource+0x204>
 800cc5a:	f241 5169 	movw	r1, #5481	@ 0x1569
 800cc5e:	482a      	ldr	r0, [pc, #168]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cc60:	f7f9 f894 	bl	8005d8c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d013      	beq.n	800cc94 <HAL_TIM_ConfigClockSource+0x234>
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc74:	d00e      	beq.n	800cc94 <HAL_TIM_ConfigClockSource+0x234>
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc7e:	d009      	beq.n	800cc94 <HAL_TIM_ConfigClockSource+0x234>
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cc88:	d004      	beq.n	800cc94 <HAL_TIM_ConfigClockSource+0x234>
 800cc8a:	f241 516c 	movw	r1, #5484	@ 0x156c
 800cc8e:	481e      	ldr	r0, [pc, #120]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x2a8>)
 800cc90:	f7f9 f87c 	bl	8005d8c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc9c:	d014      	beq.n	800ccc8 <HAL_TIM_ConfigClockSource+0x268>
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d010      	beq.n	800ccc8 <HAL_TIM_ConfigClockSource+0x268>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00c      	beq.n	800ccc8 <HAL_TIM_ConfigClockSource+0x268>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	d008      	beq.n	800ccc8 <HAL_TIM_ConfigClockSource+0x268>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	2b0a      	cmp	r3, #10
 800ccbc:	d004      	beq.n	800ccc8 <HAL_TIM_ConfigClockSource+0x268>
 800ccbe:	f241 516d 	movw	r1, #5485	@ 0x156d
 800ccc2:	4811      	ldr	r0, [pc, #68]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x2a8>)
 800ccc4:	f7f9 f862 	bl	8005d8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	2b0f      	cmp	r3, #15
 800ccce:	d904      	bls.n	800ccda <HAL_TIM_ConfigClockSource+0x27a>
 800ccd0:	f241 516e 	movw	r1, #5486	@ 0x156e
 800ccd4:	480c      	ldr	r0, [pc, #48]	@ (800cd08 <HAL_TIM_ConfigClockSource+0x2a8>)
 800ccd6:	f7f9 f859 	bl	8005d8c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ccea:	f000 feab 	bl	800da44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ccfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	609a      	str	r2, [r3, #8]
      break;
 800cd06:	e1da      	b.n	800d0be <HAL_TIM_ConfigClockSource+0x65e>
 800cd08:	08010c28 	.word	0x08010c28
 800cd0c:	40012c00 	.word	0x40012c00
 800cd10:	40000400 	.word	0x40000400
 800cd14:	40000800 	.word	0x40000800
 800cd18:	40000c00 	.word	0x40000c00
 800cd1c:	40001000 	.word	0x40001000
 800cd20:	40001400 	.word	0x40001400
 800cd24:	40013400 	.word	0x40013400
 800cd28:	40014000 	.word	0x40014000
 800cd2c:	40014400 	.word	0x40014400
 800cd30:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a64      	ldr	r2, [pc, #400]	@ (800cecc <HAL_TIM_ConfigClockSource+0x46c>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d01d      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x31a>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd46:	d018      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x31a>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a60      	ldr	r2, [pc, #384]	@ (800ced0 <HAL_TIM_ConfigClockSource+0x470>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d013      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x31a>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a5f      	ldr	r2, [pc, #380]	@ (800ced4 <HAL_TIM_ConfigClockSource+0x474>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d00e      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x31a>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a5d      	ldr	r2, [pc, #372]	@ (800ced8 <HAL_TIM_ConfigClockSource+0x478>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d009      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x31a>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a5c      	ldr	r2, [pc, #368]	@ (800cedc <HAL_TIM_ConfigClockSource+0x47c>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d004      	beq.n	800cd7a <HAL_TIM_ConfigClockSource+0x31a>
 800cd70:	f241 5181 	movw	r1, #5505	@ 0x1581
 800cd74:	485a      	ldr	r0, [pc, #360]	@ (800cee0 <HAL_TIM_ConfigClockSource+0x480>)
 800cd76:	f7f9 f809 	bl	8005d8c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d013      	beq.n	800cdaa <HAL_TIM_ConfigClockSource+0x34a>
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd8a:	d00e      	beq.n	800cdaa <HAL_TIM_ConfigClockSource+0x34a>
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd94:	d009      	beq.n	800cdaa <HAL_TIM_ConfigClockSource+0x34a>
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd9e:	d004      	beq.n	800cdaa <HAL_TIM_ConfigClockSource+0x34a>
 800cda0:	f241 5184 	movw	r1, #5508	@ 0x1584
 800cda4:	484e      	ldr	r0, [pc, #312]	@ (800cee0 <HAL_TIM_ConfigClockSource+0x480>)
 800cda6:	f7f8 fff1 	bl	8005d8c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdb2:	d014      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x37e>
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d010      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x37e>
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00c      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x37e>
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d008      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x37e>
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	2b0a      	cmp	r3, #10
 800cdd2:	d004      	beq.n	800cdde <HAL_TIM_ConfigClockSource+0x37e>
 800cdd4:	f241 5185 	movw	r1, #5509	@ 0x1585
 800cdd8:	4841      	ldr	r0, [pc, #260]	@ (800cee0 <HAL_TIM_ConfigClockSource+0x480>)
 800cdda:	f7f8 ffd7 	bl	8005d8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	2b0f      	cmp	r3, #15
 800cde4:	d904      	bls.n	800cdf0 <HAL_TIM_ConfigClockSource+0x390>
 800cde6:	f241 5186 	movw	r1, #5510	@ 0x1586
 800cdea:	483d      	ldr	r0, [pc, #244]	@ (800cee0 <HAL_TIM_ConfigClockSource+0x480>)
 800cdec:	f7f8 ffce 	bl	8005d8c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ce00:	f000 fe20 	bl	800da44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	689a      	ldr	r2, [r3, #8]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce12:	609a      	str	r2, [r3, #8]
      break;
 800ce14:	e153      	b.n	800d0be <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a2c      	ldr	r2, [pc, #176]	@ (800cecc <HAL_TIM_ConfigClockSource+0x46c>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d022      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x406>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce28:	d01d      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x406>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a28      	ldr	r2, [pc, #160]	@ (800ced0 <HAL_TIM_ConfigClockSource+0x470>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d018      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x406>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a26      	ldr	r2, [pc, #152]	@ (800ced4 <HAL_TIM_ConfigClockSource+0x474>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d013      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x406>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a25      	ldr	r2, [pc, #148]	@ (800ced8 <HAL_TIM_ConfigClockSource+0x478>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00e      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x406>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a23      	ldr	r2, [pc, #140]	@ (800cedc <HAL_TIM_ConfigClockSource+0x47c>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d009      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x406>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a23      	ldr	r2, [pc, #140]	@ (800cee4 <HAL_TIM_ConfigClockSource+0x484>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d004      	beq.n	800ce66 <HAL_TIM_ConfigClockSource+0x406>
 800ce5c:	f241 5195 	movw	r1, #5525	@ 0x1595
 800ce60:	481f      	ldr	r0, [pc, #124]	@ (800cee0 <HAL_TIM_ConfigClockSource+0x480>)
 800ce62:	f7f8 ff93 	bl	8005d8c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce6e:	d014      	beq.n	800ce9a <HAL_TIM_ConfigClockSource+0x43a>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d010      	beq.n	800ce9a <HAL_TIM_ConfigClockSource+0x43a>
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00c      	beq.n	800ce9a <HAL_TIM_ConfigClockSource+0x43a>
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d008      	beq.n	800ce9a <HAL_TIM_ConfigClockSource+0x43a>
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	2b0a      	cmp	r3, #10
 800ce8e:	d004      	beq.n	800ce9a <HAL_TIM_ConfigClockSource+0x43a>
 800ce90:	f241 5198 	movw	r1, #5528	@ 0x1598
 800ce94:	4812      	ldr	r0, [pc, #72]	@ (800cee0 <HAL_TIM_ConfigClockSource+0x480>)
 800ce96:	f7f8 ff79 	bl	8005d8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	2b0f      	cmp	r3, #15
 800cea0:	d904      	bls.n	800ceac <HAL_TIM_ConfigClockSource+0x44c>
 800cea2:	f241 5199 	movw	r1, #5529	@ 0x1599
 800cea6:	480e      	ldr	r0, [pc, #56]	@ (800cee0 <HAL_TIM_ConfigClockSource+0x480>)
 800cea8:	f7f8 ff70 	bl	8005d8c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ceb8:	461a      	mov	r2, r3
 800ceba:	f000 fd49 	bl	800d950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2150      	movs	r1, #80	@ 0x50
 800cec4:	4618      	mov	r0, r3
 800cec6:	f000 fda2 	bl	800da0e <TIM_ITRx_SetConfig>
      break;
 800ceca:	e0f8      	b.n	800d0be <HAL_TIM_ConfigClockSource+0x65e>
 800cecc:	40012c00 	.word	0x40012c00
 800ced0:	40000400 	.word	0x40000400
 800ced4:	40000800 	.word	0x40000800
 800ced8:	40000c00 	.word	0x40000c00
 800cedc:	40013400 	.word	0x40013400
 800cee0:	08010c28 	.word	0x08010c28
 800cee4:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a7a      	ldr	r2, [pc, #488]	@ (800d0d8 <HAL_TIM_ConfigClockSource+0x678>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d022      	beq.n	800cf38 <HAL_TIM_ConfigClockSource+0x4d8>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cefa:	d01d      	beq.n	800cf38 <HAL_TIM_ConfigClockSource+0x4d8>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a76      	ldr	r2, [pc, #472]	@ (800d0dc <HAL_TIM_ConfigClockSource+0x67c>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d018      	beq.n	800cf38 <HAL_TIM_ConfigClockSource+0x4d8>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a75      	ldr	r2, [pc, #468]	@ (800d0e0 <HAL_TIM_ConfigClockSource+0x680>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d013      	beq.n	800cf38 <HAL_TIM_ConfigClockSource+0x4d8>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a73      	ldr	r2, [pc, #460]	@ (800d0e4 <HAL_TIM_ConfigClockSource+0x684>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d00e      	beq.n	800cf38 <HAL_TIM_ConfigClockSource+0x4d8>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a72      	ldr	r2, [pc, #456]	@ (800d0e8 <HAL_TIM_ConfigClockSource+0x688>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d009      	beq.n	800cf38 <HAL_TIM_ConfigClockSource+0x4d8>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a70      	ldr	r2, [pc, #448]	@ (800d0ec <HAL_TIM_ConfigClockSource+0x68c>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d004      	beq.n	800cf38 <HAL_TIM_ConfigClockSource+0x4d8>
 800cf2e:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800cf32:	486f      	ldr	r0, [pc, #444]	@ (800d0f0 <HAL_TIM_ConfigClockSource+0x690>)
 800cf34:	f7f8 ff2a 	bl	8005d8c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf40:	d014      	beq.n	800cf6c <HAL_TIM_ConfigClockSource+0x50c>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d010      	beq.n	800cf6c <HAL_TIM_ConfigClockSource+0x50c>
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00c      	beq.n	800cf6c <HAL_TIM_ConfigClockSource+0x50c>
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d008      	beq.n	800cf6c <HAL_TIM_ConfigClockSource+0x50c>
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	2b0a      	cmp	r3, #10
 800cf60:	d004      	beq.n	800cf6c <HAL_TIM_ConfigClockSource+0x50c>
 800cf62:	f241 51a8 	movw	r1, #5544	@ 0x15a8
 800cf66:	4862      	ldr	r0, [pc, #392]	@ (800d0f0 <HAL_TIM_ConfigClockSource+0x690>)
 800cf68:	f7f8 ff10 	bl	8005d8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	2b0f      	cmp	r3, #15
 800cf72:	d904      	bls.n	800cf7e <HAL_TIM_ConfigClockSource+0x51e>
 800cf74:	f241 51a9 	movw	r1, #5545	@ 0x15a9
 800cf78:	485d      	ldr	r0, [pc, #372]	@ (800d0f0 <HAL_TIM_ConfigClockSource+0x690>)
 800cf7a:	f7f8 ff07 	bl	8005d8c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f000 fd0f 	bl	800d9ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2160      	movs	r1, #96	@ 0x60
 800cf96:	4618      	mov	r0, r3
 800cf98:	f000 fd39 	bl	800da0e <TIM_ITRx_SetConfig>
      break;
 800cf9c:	e08f      	b.n	800d0be <HAL_TIM_ConfigClockSource+0x65e>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a4d      	ldr	r2, [pc, #308]	@ (800d0d8 <HAL_TIM_ConfigClockSource+0x678>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d022      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x58e>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfb0:	d01d      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x58e>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a49      	ldr	r2, [pc, #292]	@ (800d0dc <HAL_TIM_ConfigClockSource+0x67c>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d018      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x58e>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a47      	ldr	r2, [pc, #284]	@ (800d0e0 <HAL_TIM_ConfigClockSource+0x680>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d013      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x58e>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a46      	ldr	r2, [pc, #280]	@ (800d0e4 <HAL_TIM_ConfigClockSource+0x684>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d00e      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x58e>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a44      	ldr	r2, [pc, #272]	@ (800d0e8 <HAL_TIM_ConfigClockSource+0x688>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d009      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x58e>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a43      	ldr	r2, [pc, #268]	@ (800d0ec <HAL_TIM_ConfigClockSource+0x68c>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d004      	beq.n	800cfee <HAL_TIM_ConfigClockSource+0x58e>
 800cfe4:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 800cfe8:	4841      	ldr	r0, [pc, #260]	@ (800d0f0 <HAL_TIM_ConfigClockSource+0x690>)
 800cfea:	f7f8 fecf 	bl	8005d8c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cff6:	d014      	beq.n	800d022 <HAL_TIM_ConfigClockSource+0x5c2>
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d010      	beq.n	800d022 <HAL_TIM_ConfigClockSource+0x5c2>
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00c      	beq.n	800d022 <HAL_TIM_ConfigClockSource+0x5c2>
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d008      	beq.n	800d022 <HAL_TIM_ConfigClockSource+0x5c2>
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	2b0a      	cmp	r3, #10
 800d016:	d004      	beq.n	800d022 <HAL_TIM_ConfigClockSource+0x5c2>
 800d018:	f241 51b8 	movw	r1, #5560	@ 0x15b8
 800d01c:	4834      	ldr	r0, [pc, #208]	@ (800d0f0 <HAL_TIM_ConfigClockSource+0x690>)
 800d01e:	f7f8 feb5 	bl	8005d8c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	2b0f      	cmp	r3, #15
 800d028:	d904      	bls.n	800d034 <HAL_TIM_ConfigClockSource+0x5d4>
 800d02a:	f241 51b9 	movw	r1, #5561	@ 0x15b9
 800d02e:	4830      	ldr	r0, [pc, #192]	@ (800d0f0 <HAL_TIM_ConfigClockSource+0x690>)
 800d030:	f7f8 feac 	bl	8005d8c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d040:	461a      	mov	r2, r3
 800d042:	f000 fc85 	bl	800d950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2140      	movs	r1, #64	@ 0x40
 800d04c:	4618      	mov	r0, r3
 800d04e:	f000 fcde 	bl	800da0e <TIM_ITRx_SetConfig>
      break;
 800d052:	e034      	b.n	800d0be <HAL_TIM_ConfigClockSource+0x65e>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a1f      	ldr	r2, [pc, #124]	@ (800d0d8 <HAL_TIM_ConfigClockSource+0x678>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d022      	beq.n	800d0a4 <HAL_TIM_ConfigClockSource+0x644>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d066:	d01d      	beq.n	800d0a4 <HAL_TIM_ConfigClockSource+0x644>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a1b      	ldr	r2, [pc, #108]	@ (800d0dc <HAL_TIM_ConfigClockSource+0x67c>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d018      	beq.n	800d0a4 <HAL_TIM_ConfigClockSource+0x644>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a1a      	ldr	r2, [pc, #104]	@ (800d0e0 <HAL_TIM_ConfigClockSource+0x680>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d013      	beq.n	800d0a4 <HAL_TIM_ConfigClockSource+0x644>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a18      	ldr	r2, [pc, #96]	@ (800d0e4 <HAL_TIM_ConfigClockSource+0x684>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d00e      	beq.n	800d0a4 <HAL_TIM_ConfigClockSource+0x644>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a17      	ldr	r2, [pc, #92]	@ (800d0e8 <HAL_TIM_ConfigClockSource+0x688>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d009      	beq.n	800d0a4 <HAL_TIM_ConfigClockSource+0x644>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a15      	ldr	r2, [pc, #84]	@ (800d0ec <HAL_TIM_ConfigClockSource+0x68c>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d004      	beq.n	800d0a4 <HAL_TIM_ConfigClockSource+0x644>
 800d09a:	f241 51c8 	movw	r1, #5576	@ 0x15c8
 800d09e:	4814      	ldr	r0, [pc, #80]	@ (800d0f0 <HAL_TIM_ConfigClockSource+0x690>)
 800d0a0:	f7f8 fe74 	bl	8005d8c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	f000 fcad 	bl	800da0e <TIM_ITRx_SetConfig>
      break;
 800d0b4:	e003      	b.n	800d0be <HAL_TIM_ConfigClockSource+0x65e>
    }

    default:
      status = HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d0ba:	e000      	b.n	800d0be <HAL_TIM_ConfigClockSource+0x65e>
      break;
 800d0bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	40012c00 	.word	0x40012c00
 800d0dc:	40000400 	.word	0x40000400
 800d0e0:	40000800 	.word	0x40000800
 800d0e4:	40000c00 	.word	0x40000c00
 800d0e8:	40013400 	.word	0x40013400
 800d0ec:	40014000 	.word	0x40014000
 800d0f0:	08010c28 	.word	0x08010c28

0800d0f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a46      	ldr	r2, [pc, #280]	@ (800d270 <TIM_Base_SetConfig+0x12c>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d013      	beq.n	800d184 <TIM_Base_SetConfig+0x40>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d162:	d00f      	beq.n	800d184 <TIM_Base_SetConfig+0x40>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4a43      	ldr	r2, [pc, #268]	@ (800d274 <TIM_Base_SetConfig+0x130>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d00b      	beq.n	800d184 <TIM_Base_SetConfig+0x40>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a42      	ldr	r2, [pc, #264]	@ (800d278 <TIM_Base_SetConfig+0x134>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d007      	beq.n	800d184 <TIM_Base_SetConfig+0x40>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a41      	ldr	r2, [pc, #260]	@ (800d27c <TIM_Base_SetConfig+0x138>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d003      	beq.n	800d184 <TIM_Base_SetConfig+0x40>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a40      	ldr	r2, [pc, #256]	@ (800d280 <TIM_Base_SetConfig+0x13c>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d108      	bne.n	800d196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	4313      	orrs	r3, r2
 800d194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a35      	ldr	r2, [pc, #212]	@ (800d270 <TIM_Base_SetConfig+0x12c>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d01f      	beq.n	800d1de <TIM_Base_SetConfig+0x9a>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1a4:	d01b      	beq.n	800d1de <TIM_Base_SetConfig+0x9a>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a32      	ldr	r2, [pc, #200]	@ (800d274 <TIM_Base_SetConfig+0x130>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d017      	beq.n	800d1de <TIM_Base_SetConfig+0x9a>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a31      	ldr	r2, [pc, #196]	@ (800d278 <TIM_Base_SetConfig+0x134>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d013      	beq.n	800d1de <TIM_Base_SetConfig+0x9a>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a30      	ldr	r2, [pc, #192]	@ (800d27c <TIM_Base_SetConfig+0x138>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d00f      	beq.n	800d1de <TIM_Base_SetConfig+0x9a>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a2f      	ldr	r2, [pc, #188]	@ (800d280 <TIM_Base_SetConfig+0x13c>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d00b      	beq.n	800d1de <TIM_Base_SetConfig+0x9a>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4a2e      	ldr	r2, [pc, #184]	@ (800d284 <TIM_Base_SetConfig+0x140>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d007      	beq.n	800d1de <TIM_Base_SetConfig+0x9a>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	4a2d      	ldr	r2, [pc, #180]	@ (800d288 <TIM_Base_SetConfig+0x144>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d003      	beq.n	800d1de <TIM_Base_SetConfig+0x9a>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a2c      	ldr	r2, [pc, #176]	@ (800d28c <TIM_Base_SetConfig+0x148>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d108      	bne.n	800d1f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	695b      	ldr	r3, [r3, #20]
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	689a      	ldr	r2, [r3, #8]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a16      	ldr	r2, [pc, #88]	@ (800d270 <TIM_Base_SetConfig+0x12c>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d00f      	beq.n	800d23c <TIM_Base_SetConfig+0xf8>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a18      	ldr	r2, [pc, #96]	@ (800d280 <TIM_Base_SetConfig+0x13c>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d00b      	beq.n	800d23c <TIM_Base_SetConfig+0xf8>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a17      	ldr	r2, [pc, #92]	@ (800d284 <TIM_Base_SetConfig+0x140>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d007      	beq.n	800d23c <TIM_Base_SetConfig+0xf8>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a16      	ldr	r2, [pc, #88]	@ (800d288 <TIM_Base_SetConfig+0x144>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d003      	beq.n	800d23c <TIM_Base_SetConfig+0xf8>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a15      	ldr	r2, [pc, #84]	@ (800d28c <TIM_Base_SetConfig+0x148>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d103      	bne.n	800d244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	691a      	ldr	r2, [r3, #16]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	2b01      	cmp	r3, #1
 800d254:	d105      	bne.n	800d262 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	f023 0201 	bic.w	r2, r3, #1
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	611a      	str	r2, [r3, #16]
  }
}
 800d262:	bf00      	nop
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	40012c00 	.word	0x40012c00
 800d274:	40000400 	.word	0x40000400
 800d278:	40000800 	.word	0x40000800
 800d27c:	40000c00 	.word	0x40000c00
 800d280:	40013400 	.word	0x40013400
 800d284:	40014000 	.word	0x40014000
 800d288:	40014400 	.word	0x40014400
 800d28c:	40014800 	.word	0x40014800

0800d290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a1b      	ldr	r3, [r3, #32]
 800d29e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	f023 0201 	bic.w	r2, r3, #1
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f023 0303 	bic.w	r3, r3, #3
 800d2ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f023 0302 	bic.w	r3, r3, #2
 800d2dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4a40      	ldr	r2, [pc, #256]	@ (800d3ec <TIM_OC1_SetConfig+0x15c>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d00f      	beq.n	800d310 <TIM_OC1_SetConfig+0x80>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4a3f      	ldr	r2, [pc, #252]	@ (800d3f0 <TIM_OC1_SetConfig+0x160>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d00b      	beq.n	800d310 <TIM_OC1_SetConfig+0x80>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a3e      	ldr	r2, [pc, #248]	@ (800d3f4 <TIM_OC1_SetConfig+0x164>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d007      	beq.n	800d310 <TIM_OC1_SetConfig+0x80>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a3d      	ldr	r2, [pc, #244]	@ (800d3f8 <TIM_OC1_SetConfig+0x168>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d003      	beq.n	800d310 <TIM_OC1_SetConfig+0x80>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a3c      	ldr	r2, [pc, #240]	@ (800d3fc <TIM_OC1_SetConfig+0x16c>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d119      	bne.n	800d344 <TIM_OC1_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d008      	beq.n	800d32a <TIM_OC1_SetConfig+0x9a>
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	2b08      	cmp	r3, #8
 800d31e:	d004      	beq.n	800d32a <TIM_OC1_SetConfig+0x9a>
 800d320:	f641 316e 	movw	r1, #7022	@ 0x1b6e
 800d324:	4836      	ldr	r0, [pc, #216]	@ (800d400 <TIM_OC1_SetConfig+0x170>)
 800d326:	f7f8 fd31 	bl	8005d8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	f023 0308 	bic.w	r3, r3, #8
 800d330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	4313      	orrs	r3, r2
 800d33a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	f023 0304 	bic.w	r3, r3, #4
 800d342:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	4a29      	ldr	r2, [pc, #164]	@ (800d3ec <TIM_OC1_SetConfig+0x15c>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d00f      	beq.n	800d36c <TIM_OC1_SetConfig+0xdc>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4a28      	ldr	r2, [pc, #160]	@ (800d3f0 <TIM_OC1_SetConfig+0x160>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d00b      	beq.n	800d36c <TIM_OC1_SetConfig+0xdc>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a27      	ldr	r2, [pc, #156]	@ (800d3f4 <TIM_OC1_SetConfig+0x164>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d007      	beq.n	800d36c <TIM_OC1_SetConfig+0xdc>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a26      	ldr	r2, [pc, #152]	@ (800d3f8 <TIM_OC1_SetConfig+0x168>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d003      	beq.n	800d36c <TIM_OC1_SetConfig+0xdc>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a25      	ldr	r2, [pc, #148]	@ (800d3fc <TIM_OC1_SetConfig+0x16c>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d12d      	bne.n	800d3c8 <TIM_OC1_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d374:	d008      	beq.n	800d388 <TIM_OC1_SetConfig+0xf8>
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	699b      	ldr	r3, [r3, #24]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d004      	beq.n	800d388 <TIM_OC1_SetConfig+0xf8>
 800d37e:	f641 317b 	movw	r1, #7035	@ 0x1b7b
 800d382:	481f      	ldr	r0, [pc, #124]	@ (800d400 <TIM_OC1_SetConfig+0x170>)
 800d384:	f7f8 fd02 	bl	8005d8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d390:	d008      	beq.n	800d3a4 <TIM_OC1_SetConfig+0x114>
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	695b      	ldr	r3, [r3, #20]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d004      	beq.n	800d3a4 <TIM_OC1_SetConfig+0x114>
 800d39a:	f641 317c 	movw	r1, #7036	@ 0x1b7c
 800d39e:	4818      	ldr	r0, [pc, #96]	@ (800d400 <TIM_OC1_SetConfig+0x170>)
 800d3a0:	f7f8 fcf4 	bl	8005d8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d3b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	693a      	ldr	r2, [r7, #16]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	699b      	ldr	r3, [r3, #24]
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	621a      	str	r2, [r3, #32]
}
 800d3e2:	bf00      	nop
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	40012c00 	.word	0x40012c00
 800d3f0:	40013400 	.word	0x40013400
 800d3f4:	40014000 	.word	0x40014000
 800d3f8:	40014400 	.word	0x40014400
 800d3fc:	40014800 	.word	0x40014800
 800d400:	08010c28 	.word	0x08010c28

0800d404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a1b      	ldr	r3, [r3, #32]
 800d418:	f023 0210 	bic.w	r2, r3, #16
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d43e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	021b      	lsls	r3, r3, #8
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	4313      	orrs	r3, r2
 800d44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	f023 0320 	bic.w	r3, r3, #32
 800d452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	011b      	lsls	r3, r3, #4
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	4313      	orrs	r3, r2
 800d45e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a3b      	ldr	r2, [pc, #236]	@ (800d550 <TIM_OC2_SetConfig+0x14c>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d003      	beq.n	800d470 <TIM_OC2_SetConfig+0x6c>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a3a      	ldr	r2, [pc, #232]	@ (800d554 <TIM_OC2_SetConfig+0x150>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d11a      	bne.n	800d4a6 <TIM_OC2_SetConfig+0xa2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d008      	beq.n	800d48a <TIM_OC2_SetConfig+0x86>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	2b08      	cmp	r3, #8
 800d47e:	d004      	beq.n	800d48a <TIM_OC2_SetConfig+0x86>
 800d480:	f641 31ba 	movw	r1, #7098	@ 0x1bba
 800d484:	4834      	ldr	r0, [pc, #208]	@ (800d558 <TIM_OC2_SetConfig+0x154>)
 800d486:	f7f8 fc81 	bl	8005d8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	011b      	lsls	r3, r3, #4
 800d498:	697a      	ldr	r2, [r7, #20]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4a29      	ldr	r2, [pc, #164]	@ (800d550 <TIM_OC2_SetConfig+0x14c>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d00f      	beq.n	800d4ce <TIM_OC2_SetConfig+0xca>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4a28      	ldr	r2, [pc, #160]	@ (800d554 <TIM_OC2_SetConfig+0x150>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d00b      	beq.n	800d4ce <TIM_OC2_SetConfig+0xca>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4a28      	ldr	r2, [pc, #160]	@ (800d55c <TIM_OC2_SetConfig+0x158>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d007      	beq.n	800d4ce <TIM_OC2_SetConfig+0xca>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4a27      	ldr	r2, [pc, #156]	@ (800d560 <TIM_OC2_SetConfig+0x15c>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d003      	beq.n	800d4ce <TIM_OC2_SetConfig+0xca>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	4a26      	ldr	r2, [pc, #152]	@ (800d564 <TIM_OC2_SetConfig+0x160>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d12f      	bne.n	800d52e <TIM_OC2_SetConfig+0x12a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	699b      	ldr	r3, [r3, #24]
 800d4d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4d6:	d008      	beq.n	800d4ea <TIM_OC2_SetConfig+0xe6>
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	699b      	ldr	r3, [r3, #24]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <TIM_OC2_SetConfig+0xe6>
 800d4e0:	f641 31c7 	movw	r1, #7111	@ 0x1bc7
 800d4e4:	481c      	ldr	r0, [pc, #112]	@ (800d558 <TIM_OC2_SetConfig+0x154>)
 800d4e6:	f7f8 fc51 	bl	8005d8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	695b      	ldr	r3, [r3, #20]
 800d4ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4f2:	d008      	beq.n	800d506 <TIM_OC2_SetConfig+0x102>
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	695b      	ldr	r3, [r3, #20]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d004      	beq.n	800d506 <TIM_OC2_SetConfig+0x102>
 800d4fc:	f641 31c8 	movw	r1, #7112	@ 0x1bc8
 800d500:	4815      	ldr	r0, [pc, #84]	@ (800d558 <TIM_OC2_SetConfig+0x154>)
 800d502:	f7f8 fc43 	bl	8005d8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d50c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	4313      	orrs	r3, r2
 800d520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	693a      	ldr	r2, [r7, #16]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	685a      	ldr	r2, [r3, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	697a      	ldr	r2, [r7, #20]
 800d546:	621a      	str	r2, [r3, #32]
}
 800d548:	bf00      	nop
 800d54a:	3718      	adds	r7, #24
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	40012c00 	.word	0x40012c00
 800d554:	40013400 	.word	0x40013400
 800d558:	08010c28 	.word	0x08010c28
 800d55c:	40014000 	.word	0x40014000
 800d560:	40014400 	.word	0x40014400
 800d564:	40014800 	.word	0x40014800

0800d568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b086      	sub	sp, #24
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6a1b      	ldr	r3, [r3, #32]
 800d57c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	69db      	ldr	r3, [r3, #28]
 800d58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f023 0303 	bic.w	r3, r3, #3
 800d5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d5b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	021b      	lsls	r3, r3, #8
 800d5bc:	697a      	ldr	r2, [r7, #20]
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4a3b      	ldr	r2, [pc, #236]	@ (800d6b4 <TIM_OC3_SetConfig+0x14c>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d003      	beq.n	800d5d2 <TIM_OC3_SetConfig+0x6a>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4a3a      	ldr	r2, [pc, #232]	@ (800d6b8 <TIM_OC3_SetConfig+0x150>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d11a      	bne.n	800d608 <TIM_OC3_SetConfig+0xa0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d008      	beq.n	800d5ec <TIM_OC3_SetConfig+0x84>
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	2b08      	cmp	r3, #8
 800d5e0:	d004      	beq.n	800d5ec <TIM_OC3_SetConfig+0x84>
 800d5e2:	f641 4105 	movw	r1, #7173	@ 0x1c05
 800d5e6:	4835      	ldr	r0, [pc, #212]	@ (800d6bc <TIM_OC3_SetConfig+0x154>)
 800d5e8:	f7f8 fbd0 	bl	8005d8c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	021b      	lsls	r3, r3, #8
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d606:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4a2a      	ldr	r2, [pc, #168]	@ (800d6b4 <TIM_OC3_SetConfig+0x14c>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d00f      	beq.n	800d630 <TIM_OC3_SetConfig+0xc8>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a29      	ldr	r2, [pc, #164]	@ (800d6b8 <TIM_OC3_SetConfig+0x150>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d00b      	beq.n	800d630 <TIM_OC3_SetConfig+0xc8>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a29      	ldr	r2, [pc, #164]	@ (800d6c0 <TIM_OC3_SetConfig+0x158>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d007      	beq.n	800d630 <TIM_OC3_SetConfig+0xc8>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a28      	ldr	r2, [pc, #160]	@ (800d6c4 <TIM_OC3_SetConfig+0x15c>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d003      	beq.n	800d630 <TIM_OC3_SetConfig+0xc8>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a27      	ldr	r2, [pc, #156]	@ (800d6c8 <TIM_OC3_SetConfig+0x160>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d12f      	bne.n	800d690 <TIM_OC3_SetConfig+0x128>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d638:	d008      	beq.n	800d64c <TIM_OC3_SetConfig+0xe4>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d004      	beq.n	800d64c <TIM_OC3_SetConfig+0xe4>
 800d642:	f641 4112 	movw	r1, #7186	@ 0x1c12
 800d646:	481d      	ldr	r0, [pc, #116]	@ (800d6bc <TIM_OC3_SetConfig+0x154>)
 800d648:	f7f8 fba0 	bl	8005d8c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	695b      	ldr	r3, [r3, #20]
 800d650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d654:	d008      	beq.n	800d668 <TIM_OC3_SetConfig+0x100>
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d004      	beq.n	800d668 <TIM_OC3_SetConfig+0x100>
 800d65e:	f641 4113 	movw	r1, #7187	@ 0x1c13
 800d662:	4816      	ldr	r0, [pc, #88]	@ (800d6bc <TIM_OC3_SetConfig+0x154>)
 800d664:	f7f8 fb92 	bl	8005d8c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d66e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	011b      	lsls	r3, r3, #4
 800d67e:	693a      	ldr	r2, [r7, #16]
 800d680:	4313      	orrs	r3, r2
 800d682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	011b      	lsls	r3, r3, #4
 800d68a:	693a      	ldr	r2, [r7, #16]
 800d68c:	4313      	orrs	r3, r2
 800d68e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	693a      	ldr	r2, [r7, #16]
 800d694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	685a      	ldr	r2, [r3, #4]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	621a      	str	r2, [r3, #32]
}
 800d6aa:	bf00      	nop
 800d6ac:	3718      	adds	r7, #24
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	40012c00 	.word	0x40012c00
 800d6b8:	40013400 	.word	0x40013400
 800d6bc:	08010c28 	.word	0x08010c28
 800d6c0:	40014000 	.word	0x40014000
 800d6c4:	40014400 	.word	0x40014400
 800d6c8:	40014800 	.word	0x40014800

0800d6cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a1b      	ldr	r3, [r3, #32]
 800d6e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	69db      	ldr	r3, [r3, #28]
 800d6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d6fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	021b      	lsls	r3, r3, #8
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	4313      	orrs	r3, r2
 800d712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d71a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	031b      	lsls	r3, r3, #12
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	4313      	orrs	r3, r2
 800d726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4a1e      	ldr	r2, [pc, #120]	@ (800d7a4 <TIM_OC4_SetConfig+0xd8>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d00f      	beq.n	800d750 <TIM_OC4_SetConfig+0x84>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4a1d      	ldr	r2, [pc, #116]	@ (800d7a8 <TIM_OC4_SetConfig+0xdc>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d00b      	beq.n	800d750 <TIM_OC4_SetConfig+0x84>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a1c      	ldr	r2, [pc, #112]	@ (800d7ac <TIM_OC4_SetConfig+0xe0>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d007      	beq.n	800d750 <TIM_OC4_SetConfig+0x84>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4a1b      	ldr	r2, [pc, #108]	@ (800d7b0 <TIM_OC4_SetConfig+0xe4>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d003      	beq.n	800d750 <TIM_OC4_SetConfig+0x84>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a1a      	ldr	r2, [pc, #104]	@ (800d7b4 <TIM_OC4_SetConfig+0xe8>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d117      	bne.n	800d780 <TIM_OC4_SetConfig+0xb4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	695b      	ldr	r3, [r3, #20]
 800d754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d758:	d008      	beq.n	800d76c <TIM_OC4_SetConfig+0xa0>
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d004      	beq.n	800d76c <TIM_OC4_SetConfig+0xa0>
 800d762:	f641 4152 	movw	r1, #7250	@ 0x1c52
 800d766:	4814      	ldr	r0, [pc, #80]	@ (800d7b8 <TIM_OC4_SetConfig+0xec>)
 800d768:	f7f8 fb10 	bl	8005d8c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	019b      	lsls	r3, r3, #6
 800d77a:	697a      	ldr	r2, [r7, #20]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	697a      	ldr	r2, [r7, #20]
 800d784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	693a      	ldr	r2, [r7, #16]
 800d798:	621a      	str	r2, [r3, #32]
}
 800d79a:	bf00      	nop
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	40012c00 	.word	0x40012c00
 800d7a8:	40013400 	.word	0x40013400
 800d7ac:	40014000 	.word	0x40014000
 800d7b0:	40014400 	.word	0x40014400
 800d7b4:	40014800 	.word	0x40014800
 800d7b8:	08010c28 	.word	0x08010c28

0800d7bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b087      	sub	sp, #28
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6a1b      	ldr	r3, [r3, #32]
 800d7ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a1b      	ldr	r3, [r3, #32]
 800d7d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d7ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d800:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	041b      	lsls	r3, r3, #16
 800d808:	693a      	ldr	r2, [r7, #16]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a17      	ldr	r2, [pc, #92]	@ (800d870 <TIM_OC5_SetConfig+0xb4>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d00f      	beq.n	800d836 <TIM_OC5_SetConfig+0x7a>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a16      	ldr	r2, [pc, #88]	@ (800d874 <TIM_OC5_SetConfig+0xb8>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d00b      	beq.n	800d836 <TIM_OC5_SetConfig+0x7a>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a15      	ldr	r2, [pc, #84]	@ (800d878 <TIM_OC5_SetConfig+0xbc>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d007      	beq.n	800d836 <TIM_OC5_SetConfig+0x7a>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a14      	ldr	r2, [pc, #80]	@ (800d87c <TIM_OC5_SetConfig+0xc0>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d003      	beq.n	800d836 <TIM_OC5_SetConfig+0x7a>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a13      	ldr	r2, [pc, #76]	@ (800d880 <TIM_OC5_SetConfig+0xc4>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d109      	bne.n	800d84a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d83c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	021b      	lsls	r3, r3, #8
 800d844:	697a      	ldr	r2, [r7, #20]
 800d846:	4313      	orrs	r3, r2
 800d848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	697a      	ldr	r2, [r7, #20]
 800d84e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	621a      	str	r2, [r3, #32]
}
 800d864:	bf00      	nop
 800d866:	371c      	adds	r7, #28
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	40012c00 	.word	0x40012c00
 800d874:	40013400 	.word	0x40013400
 800d878:	40014000 	.word	0x40014000
 800d87c:	40014400 	.word	0x40014400
 800d880:	40014800 	.word	0x40014800

0800d884 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d884:	b480      	push	{r7}
 800d886:	b087      	sub	sp, #28
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6a1b      	ldr	r3, [r3, #32]
 800d898:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d8b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	021b      	lsls	r3, r3, #8
 800d8be:	68fa      	ldr	r2, [r7, #12]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d8ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	051b      	lsls	r3, r3, #20
 800d8d2:	693a      	ldr	r2, [r7, #16]
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a18      	ldr	r2, [pc, #96]	@ (800d93c <TIM_OC6_SetConfig+0xb8>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d00f      	beq.n	800d900 <TIM_OC6_SetConfig+0x7c>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a17      	ldr	r2, [pc, #92]	@ (800d940 <TIM_OC6_SetConfig+0xbc>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00b      	beq.n	800d900 <TIM_OC6_SetConfig+0x7c>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a16      	ldr	r2, [pc, #88]	@ (800d944 <TIM_OC6_SetConfig+0xc0>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d007      	beq.n	800d900 <TIM_OC6_SetConfig+0x7c>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a15      	ldr	r2, [pc, #84]	@ (800d948 <TIM_OC6_SetConfig+0xc4>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d003      	beq.n	800d900 <TIM_OC6_SetConfig+0x7c>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a14      	ldr	r2, [pc, #80]	@ (800d94c <TIM_OC6_SetConfig+0xc8>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d109      	bne.n	800d914 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d906:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	695b      	ldr	r3, [r3, #20]
 800d90c:	029b      	lsls	r3, r3, #10
 800d90e:	697a      	ldr	r2, [r7, #20]
 800d910:	4313      	orrs	r3, r2
 800d912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	697a      	ldr	r2, [r7, #20]
 800d918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	685a      	ldr	r2, [r3, #4]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	693a      	ldr	r2, [r7, #16]
 800d92c:	621a      	str	r2, [r3, #32]
}
 800d92e:	bf00      	nop
 800d930:	371c      	adds	r7, #28
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	40012c00 	.word	0x40012c00
 800d940:	40013400 	.word	0x40013400
 800d944:	40014000 	.word	0x40014000
 800d948:	40014400 	.word	0x40014400
 800d94c:	40014800 	.word	0x40014800

0800d950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6a1b      	ldr	r3, [r3, #32]
 800d960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	f023 0201 	bic.w	r2, r3, #1
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d97a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	011b      	lsls	r3, r3, #4
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	4313      	orrs	r3, r2
 800d984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	f023 030a 	bic.w	r3, r3, #10
 800d98c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	4313      	orrs	r3, r2
 800d994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	693a      	ldr	r2, [r7, #16]
 800d99a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	621a      	str	r2, [r3, #32]
}
 800d9a2:	bf00      	nop
 800d9a4:	371c      	adds	r7, #28
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr

0800d9ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9ae:	b480      	push	{r7}
 800d9b0:	b087      	sub	sp, #28
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	60f8      	str	r0, [r7, #12]
 800d9b6:	60b9      	str	r1, [r7, #8]
 800d9b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6a1b      	ldr	r3, [r3, #32]
 800d9c4:	f023 0210 	bic.w	r2, r3, #16
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d9d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	031b      	lsls	r3, r3, #12
 800d9de:	693a      	ldr	r2, [r7, #16]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d9ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	011b      	lsls	r3, r3, #4
 800d9f0:	697a      	ldr	r2, [r7, #20]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	693a      	ldr	r2, [r7, #16]
 800d9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	621a      	str	r2, [r3, #32]
}
 800da02:	bf00      	nop
 800da04:	371c      	adds	r7, #28
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da0e:	b480      	push	{r7}
 800da10:	b085      	sub	sp, #20
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da26:	683a      	ldr	r2, [r7, #0]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	f043 0307 	orr.w	r3, r3, #7
 800da30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	609a      	str	r2, [r3, #8]
}
 800da38:	bf00      	nop
 800da3a:	3714      	adds	r7, #20
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da44:	b480      	push	{r7}
 800da46:	b087      	sub	sp, #28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	607a      	str	r2, [r7, #4]
 800da50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800da5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	021a      	lsls	r2, r3, #8
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	431a      	orrs	r2, r3
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	697a      	ldr	r2, [r7, #20]
 800da6e:	4313      	orrs	r3, r2
 800da70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	697a      	ldr	r2, [r7, #20]
 800da76:	609a      	str	r2, [r3, #8]
}
 800da78:	bf00      	nop
 800da7a:	371c      	adds	r7, #28
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	4a2f      	ldr	r2, [pc, #188]	@ (800db50 <TIM_CCxChannelCmd+0xcc>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d024      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da9e:	d020      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	4a2c      	ldr	r2, [pc, #176]	@ (800db54 <TIM_CCxChannelCmd+0xd0>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d01c      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	4a2b      	ldr	r2, [pc, #172]	@ (800db58 <TIM_CCxChannelCmd+0xd4>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d018      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	4a2a      	ldr	r2, [pc, #168]	@ (800db5c <TIM_CCxChannelCmd+0xd8>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d014      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4a29      	ldr	r2, [pc, #164]	@ (800db60 <TIM_CCxChannelCmd+0xdc>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d010      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	4a28      	ldr	r2, [pc, #160]	@ (800db64 <TIM_CCxChannelCmd+0xe0>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d00c      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	4a27      	ldr	r2, [pc, #156]	@ (800db68 <TIM_CCxChannelCmd+0xe4>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d008      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	4a26      	ldr	r2, [pc, #152]	@ (800db6c <TIM_CCxChannelCmd+0xe8>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d004      	beq.n	800dae2 <TIM_CCxChannelCmd+0x5e>
 800dad8:	f641 61ac 	movw	r1, #7852	@ 0x1eac
 800dadc:	4824      	ldr	r0, [pc, #144]	@ (800db70 <TIM_CCxChannelCmd+0xec>)
 800dade:	f7f8 f955 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d016      	beq.n	800db16 <TIM_CCxChannelCmd+0x92>
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	2b04      	cmp	r3, #4
 800daec:	d013      	beq.n	800db16 <TIM_CCxChannelCmd+0x92>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b08      	cmp	r3, #8
 800daf2:	d010      	beq.n	800db16 <TIM_CCxChannelCmd+0x92>
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b0c      	cmp	r3, #12
 800daf8:	d00d      	beq.n	800db16 <TIM_CCxChannelCmd+0x92>
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b10      	cmp	r3, #16
 800dafe:	d00a      	beq.n	800db16 <TIM_CCxChannelCmd+0x92>
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	2b14      	cmp	r3, #20
 800db04:	d007      	beq.n	800db16 <TIM_CCxChannelCmd+0x92>
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	2b3c      	cmp	r3, #60	@ 0x3c
 800db0a:	d004      	beq.n	800db16 <TIM_CCxChannelCmd+0x92>
 800db0c:	f641 61ad 	movw	r1, #7853	@ 0x1ead
 800db10:	4817      	ldr	r0, [pc, #92]	@ (800db70 <TIM_CCxChannelCmd+0xec>)
 800db12:	f7f8 f93b 	bl	8005d8c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f003 031f 	and.w	r3, r3, #31
 800db1c:	2201      	movs	r2, #1
 800db1e:	fa02 f303 	lsl.w	r3, r2, r3
 800db22:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6a1a      	ldr	r2, [r3, #32]
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	43db      	mvns	r3, r3
 800db2c:	401a      	ands	r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6a1a      	ldr	r2, [r3, #32]
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	f003 031f 	and.w	r3, r3, #31
 800db3c:	6879      	ldr	r1, [r7, #4]
 800db3e:	fa01 f303 	lsl.w	r3, r1, r3
 800db42:	431a      	orrs	r2, r3
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	621a      	str	r2, [r3, #32]
}
 800db48:	bf00      	nop
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	40012c00 	.word	0x40012c00
 800db54:	40000400 	.word	0x40000400
 800db58:	40000800 	.word	0x40000800
 800db5c:	40000c00 	.word	0x40000c00
 800db60:	40013400 	.word	0x40013400
 800db64:	40014000 	.word	0x40014000
 800db68:	40014400 	.word	0x40014400
 800db6c:	40014800 	.word	0x40014800
 800db70:	08010c28 	.word	0x08010c28

0800db74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a34      	ldr	r2, [pc, #208]	@ (800dc54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d02c      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db90:	d027      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a30      	ldr	r2, [pc, #192]	@ (800dc58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d022      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a2e      	ldr	r2, [pc, #184]	@ (800dc5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d01d      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a2d      	ldr	r2, [pc, #180]	@ (800dc60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d018      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a2b      	ldr	r2, [pc, #172]	@ (800dc64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d013      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a2a      	ldr	r2, [pc, #168]	@ (800dc68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d00e      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a28      	ldr	r2, [pc, #160]	@ (800dc6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d009      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a27      	ldr	r2, [pc, #156]	@ (800dc70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d004      	beq.n	800dbe2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800dbd8:	f240 71ac 	movw	r1, #1964	@ 0x7ac
 800dbdc:	4825      	ldr	r0, [pc, #148]	@ (800dc74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbde:	f7f8 f8d5 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d020      	beq.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b10      	cmp	r3, #16
 800dbf0:	d01c      	beq.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b20      	cmp	r3, #32
 800dbf8:	d018      	beq.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b30      	cmp	r3, #48	@ 0x30
 800dc00:	d014      	beq.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b40      	cmp	r3, #64	@ 0x40
 800dc08:	d010      	beq.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b50      	cmp	r3, #80	@ 0x50
 800dc10:	d00c      	beq.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b60      	cmp	r3, #96	@ 0x60
 800dc18:	d008      	beq.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b70      	cmp	r3, #112	@ 0x70
 800dc20:	d004      	beq.n	800dc2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dc22:	f240 71ad 	movw	r1, #1965	@ 0x7ad
 800dc26:	4813      	ldr	r0, [pc, #76]	@ (800dc74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc28:	f7f8 f8b0 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	2b80      	cmp	r3, #128	@ 0x80
 800dc32:	d008      	beq.n	800dc46 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d004      	beq.n	800dc46 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800dc3c:	f240 71ae 	movw	r1, #1966	@ 0x7ae
 800dc40:	480c      	ldr	r0, [pc, #48]	@ (800dc74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc42:	f7f8 f8a3 	bl	8005d8c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d113      	bne.n	800dc78 <HAL_TIMEx_MasterConfigSynchronization+0x104>
 800dc50:	2302      	movs	r3, #2
 800dc52:	e0d3      	b.n	800ddfc <HAL_TIMEx_MasterConfigSynchronization+0x288>
 800dc54:	40012c00 	.word	0x40012c00
 800dc58:	40000400 	.word	0x40000400
 800dc5c:	40000800 	.word	0x40000800
 800dc60:	40000c00 	.word	0x40000c00
 800dc64:	40001000 	.word	0x40001000
 800dc68:	40001400 	.word	0x40001400
 800dc6c:	40013400 	.word	0x40013400
 800dc70:	40014000 	.word	0x40014000
 800dc74:	08010c60 	.word	0x08010c60
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2202      	movs	r2, #2
 800dc84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	689b      	ldr	r3, [r3, #8]
 800dc96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a59      	ldr	r2, [pc, #356]	@ (800de04 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d004      	beq.n	800dcac <HAL_TIMEx_MasterConfigSynchronization+0x138>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4a58      	ldr	r2, [pc, #352]	@ (800de08 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d161      	bne.n	800dd70 <HAL_TIMEx_MasterConfigSynchronization+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d054      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcbc:	d04f      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dcc6:	d04a      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dcd0:	d045      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dcda:	d040      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800dce4:	d03b      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dcee:	d036      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dcf8:	d031      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 800dd02:	d02c      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dd0c:	d027      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 800dd16:	d022      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dd20:	d01d      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 800dd2a:	d018      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dd34:	d013      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 800dd3e:	d00e      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 800dd48:	d009      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 800dd52:	d004      	beq.n	800dd5e <HAL_TIMEx_MasterConfigSynchronization+0x1ea>
 800dd54:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 800dd58:	482c      	ldr	r0, [pc, #176]	@ (800de0c <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 800dd5a:	f7f8 f817 	bl	8005d8c <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dd64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a1d      	ldr	r2, [pc, #116]	@ (800de04 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d01d      	beq.n	800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd9c:	d018      	beq.n	800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a1b      	ldr	r2, [pc, #108]	@ (800de10 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d013      	beq.n	800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a19      	ldr	r2, [pc, #100]	@ (800de14 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d00e      	beq.n	800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a18      	ldr	r2, [pc, #96]	@ (800de18 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d009      	beq.n	800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a11      	ldr	r2, [pc, #68]	@ (800de08 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d004      	beq.n	800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x25c>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a14      	ldr	r2, [pc, #80]	@ (800de1c <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d10c      	bne.n	800ddea <HAL_TIMEx_MasterConfigSynchronization+0x276>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ddd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	68ba      	ldr	r2, [r7, #8]
 800dde8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ddfa:	2300      	movs	r3, #0
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	40012c00 	.word	0x40012c00
 800de08:	40013400 	.word	0x40013400
 800de0c:	08010c60 	.word	0x08010c60
 800de10:	40000400 	.word	0x40000400
 800de14:	40000800 	.word	0x40000800
 800de18:	40000c00 	.word	0x40000c00
 800de1c:	40014000 	.word	0x40014000

0800de20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800de2a:	2300      	movs	r3, #0
 800de2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4a91      	ldr	r2, [pc, #580]	@ (800e078 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d018      	beq.n	800de6a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a8f      	ldr	r2, [pc, #572]	@ (800e07c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d013      	beq.n	800de6a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a8e      	ldr	r2, [pc, #568]	@ (800e080 <HAL_TIMEx_ConfigBreakDeadTime+0x260>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d00e      	beq.n	800de6a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a8c      	ldr	r2, [pc, #560]	@ (800e084 <HAL_TIMEx_ConfigBreakDeadTime+0x264>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d009      	beq.n	800de6a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a8b      	ldr	r2, [pc, #556]	@ (800e088 <HAL_TIMEx_ConfigBreakDeadTime+0x268>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d004      	beq.n	800de6a <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
 800de60:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 800de64:	4889      	ldr	r0, [pc, #548]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de66:	f7f7 ff91 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de72:	d008      	beq.n	800de86 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d004      	beq.n	800de86 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800de7c:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 800de80:	4882      	ldr	r0, [pc, #520]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de82:	f7f7 ff83 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de8e:	d008      	beq.n	800dea2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d004      	beq.n	800dea2 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
 800de98:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 800de9c:	487b      	ldr	r0, [pc, #492]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800de9e:	f7f7 ff75 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d013      	beq.n	800ded2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800deb2:	d00e      	beq.n	800ded2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800debc:	d009      	beq.n	800ded2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dec6:	d004      	beq.n	800ded2 <HAL_TIMEx_ConfigBreakDeadTime+0xb2>
 800dec8:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 800decc:	486f      	ldr	r0, [pc, #444]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dece:	f7f7 ff5d 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	2bff      	cmp	r3, #255	@ 0xff
 800ded8:	d904      	bls.n	800dee4 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>
 800deda:	f240 71f9 	movw	r1, #2041	@ 0x7f9
 800dede:	486b      	ldr	r0, [pc, #428]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dee0:	f7f7 ff54 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800deec:	d008      	beq.n	800df00 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d004      	beq.n	800df00 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800def6:	f240 71fa 	movw	r1, #2042	@ 0x7fa
 800defa:	4864      	ldr	r0, [pc, #400]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800defc:	f7f7 ff46 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	695b      	ldr	r3, [r3, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d009      	beq.n	800df1c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	695b      	ldr	r3, [r3, #20]
 800df0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df10:	d004      	beq.n	800df1c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800df12:	f240 71fb 	movw	r1, #2043	@ 0x7fb
 800df16:	485d      	ldr	r0, [pc, #372]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800df18:	f7f7 ff38 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	2b0f      	cmp	r3, #15
 800df22:	d904      	bls.n	800df2e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800df24:	f240 71fc 	movw	r1, #2044	@ 0x7fc
 800df28:	4858      	ldr	r0, [pc, #352]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800df2a:	f7f7 ff2f 	bl	8005d8c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df36:	d008      	beq.n	800df4a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d004      	beq.n	800df4a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800df40:	f240 71fd 	movw	r1, #2045	@ 0x7fd
 800df44:	4851      	ldr	r0, [pc, #324]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800df46:	f7f7 ff21 	bl	8005d8c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df50:	2b01      	cmp	r3, #1
 800df52:	d101      	bne.n	800df58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
 800df54:	2302      	movs	r3, #2
 800df56:	e08a      	b.n	800e06e <HAL_TIMEx_ConfigBreakDeadTime+0x24e>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	4313      	orrs	r3, r2
 800df6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	4313      	orrs	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	4313      	orrs	r3, r2
 800df88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4313      	orrs	r3, r2
 800df96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	691b      	ldr	r3, [r3, #16]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	695b      	ldr	r3, [r3, #20]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	699b      	ldr	r3, [r3, #24]
 800dfcc:	041b      	lsls	r3, r3, #16
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a28      	ldr	r2, [pc, #160]	@ (800e078 <HAL_TIMEx_ConfigBreakDeadTime+0x258>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d004      	beq.n	800dfe6 <HAL_TIMEx_ConfigBreakDeadTime+0x1c6>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a26      	ldr	r2, [pc, #152]	@ (800e07c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d13a      	bne.n	800e05c <HAL_TIMEx_ConfigBreakDeadTime+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	69db      	ldr	r3, [r3, #28]
 800dfea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfee:	d008      	beq.n	800e002 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	69db      	ldr	r3, [r3, #28]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d004      	beq.n	800e002 <HAL_TIMEx_ConfigBreakDeadTime+0x1e2>
 800dff8:	f640 0112 	movw	r1, #2066	@ 0x812
 800dffc:	4823      	ldr	r0, [pc, #140]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800dffe:	f7f7 fec5 	bl	8005d8c <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d009      	beq.n	800e01e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	6a1b      	ldr	r3, [r3, #32]
 800e00e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e012:	d004      	beq.n	800e01e <HAL_TIMEx_ConfigBreakDeadTime+0x1fe>
 800e014:	f640 0113 	movw	r1, #2067	@ 0x813
 800e018:	481c      	ldr	r0, [pc, #112]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800e01a:	f7f7 feb7 	bl	8005d8c <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e022:	2b0f      	cmp	r3, #15
 800e024:	d904      	bls.n	800e030 <HAL_TIMEx_ConfigBreakDeadTime+0x210>
 800e026:	f640 0114 	movw	r1, #2068	@ 0x814
 800e02a:	4818      	ldr	r0, [pc, #96]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x26c>)
 800e02c:	f7f7 feae 	bl	8005d8c <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e03a:	051b      	lsls	r3, r3, #20
 800e03c:	4313      	orrs	r3, r2
 800e03e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	69db      	ldr	r3, [r3, #28]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	6a1b      	ldr	r3, [r3, #32]
 800e058:	4313      	orrs	r3, r2
 800e05a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	40012c00 	.word	0x40012c00
 800e07c:	40013400 	.word	0x40013400
 800e080:	40014000 	.word	0x40014000
 800e084:	40014400 	.word	0x40014400
 800e088:	40014800 	.word	0x40014800
 800e08c:	08010c60 	.word	0x08010c60

0800e090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0ac:	bf00      	nop
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0c0:	bf00      	nop
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e08b      	b.n	800e1f6 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	699b      	ldr	r3, [r3, #24]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d023      	beq.n	800e12e <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a45      	ldr	r2, [pc, #276]	@ (800e200 <HAL_UART_Init+0x134>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d041      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a43      	ldr	r2, [pc, #268]	@ (800e204 <HAL_UART_Init+0x138>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d03c      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a42      	ldr	r2, [pc, #264]	@ (800e208 <HAL_UART_Init+0x13c>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d037      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a40      	ldr	r2, [pc, #256]	@ (800e20c <HAL_UART_Init+0x140>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d032      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a3f      	ldr	r2, [pc, #252]	@ (800e210 <HAL_UART_Init+0x144>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d02d      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a3d      	ldr	r2, [pc, #244]	@ (800e214 <HAL_UART_Init+0x148>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d028      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e122:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800e126:	483c      	ldr	r0, [pc, #240]	@ (800e218 <HAL_UART_Init+0x14c>)
 800e128:	f7f7 fe30 	bl	8005d8c <assert_failed>
 800e12c:	e022      	b.n	800e174 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a33      	ldr	r2, [pc, #204]	@ (800e200 <HAL_UART_Init+0x134>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d01d      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a31      	ldr	r2, [pc, #196]	@ (800e204 <HAL_UART_Init+0x138>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d018      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a30      	ldr	r2, [pc, #192]	@ (800e208 <HAL_UART_Init+0x13c>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d013      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a2e      	ldr	r2, [pc, #184]	@ (800e20c <HAL_UART_Init+0x140>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d00e      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a2d      	ldr	r2, [pc, #180]	@ (800e210 <HAL_UART_Init+0x144>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d009      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a2b      	ldr	r2, [pc, #172]	@ (800e214 <HAL_UART_Init+0x148>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d004      	beq.n	800e174 <HAL_UART_Init+0xa8>
 800e16a:	f240 1157 	movw	r1, #343	@ 0x157
 800e16e:	482a      	ldr	r0, [pc, #168]	@ (800e218 <HAL_UART_Init+0x14c>)
 800e170:	f7f7 fe0c 	bl	8005d8c <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d106      	bne.n	800e18a <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7f8 fb3b 	bl	8006800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2224      	movs	r2, #36	@ 0x24
 800e18e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f022 0201 	bic.w	r2, r2, #1
 800e19e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d002      	beq.n	800e1ae <HAL_UART_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 fc1f 	bl	800e9ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f8be 	bl	800e330 <UART_SetConfig>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d101      	bne.n	800e1be <HAL_UART_Init+0xf2>
  {
    return HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e01b      	b.n	800e1f6 <HAL_UART_Init+0x12a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	685a      	ldr	r2, [r3, #4]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e1cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	689a      	ldr	r2, [r3, #8]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e1dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f042 0201 	orr.w	r2, r2, #1
 800e1ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fd5c 	bl	800ecac <UART_CheckIdleState>
 800e1f4:	4603      	mov	r3, r0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	40013800 	.word	0x40013800
 800e204:	40004400 	.word	0x40004400
 800e208:	40004800 	.word	0x40004800
 800e20c:	40004c00 	.word	0x40004c00
 800e210:	40005000 	.word	0x40005000
 800e214:	40008000 	.word	0x40008000
 800e218:	08010c9c 	.word	0x08010c9c

0800e21c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08a      	sub	sp, #40	@ 0x28
 800e220:	af02      	add	r7, sp, #8
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	603b      	str	r3, [r7, #0]
 800e228:	4613      	mov	r3, r2
 800e22a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e230:	2b20      	cmp	r3, #32
 800e232:	d177      	bne.n	800e324 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d002      	beq.n	800e240 <HAL_UART_Transmit+0x24>
 800e23a:	88fb      	ldrh	r3, [r7, #6]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d101      	bne.n	800e244 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	e070      	b.n	800e326 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2221      	movs	r2, #33	@ 0x21
 800e250:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e252:	f7f8 fbc5 	bl	80069e0 <HAL_GetTick>
 800e256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	88fa      	ldrh	r2, [r7, #6]
 800e25c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	88fa      	ldrh	r2, [r7, #6]
 800e264:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e270:	d108      	bne.n	800e284 <HAL_UART_Transmit+0x68>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d104      	bne.n	800e284 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	61bb      	str	r3, [r7, #24]
 800e282:	e003      	b.n	800e28c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e288:	2300      	movs	r3, #0
 800e28a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e28c:	e02f      	b.n	800e2ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	2200      	movs	r2, #0
 800e296:	2180      	movs	r1, #128	@ 0x80
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 fdaf 	bl	800edfc <UART_WaitOnFlagUntilTimeout>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d004      	beq.n	800e2ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2220      	movs	r2, #32
 800e2a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	e03b      	b.n	800e326 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10b      	bne.n	800e2cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	881a      	ldrh	r2, [r3, #0]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2c0:	b292      	uxth	r2, r2
 800e2c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	3302      	adds	r3, #2
 800e2c8:	61bb      	str	r3, [r7, #24]
 800e2ca:	e007      	b.n	800e2dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	781a      	ldrb	r2, [r3, #0]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e2e2:	b29b      	uxth	r3, r3
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1c9      	bne.n	800e28e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	2200      	movs	r2, #0
 800e302:	2140      	movs	r1, #64	@ 0x40
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f000 fd79 	bl	800edfc <UART_WaitOnFlagUntilTimeout>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d004      	beq.n	800e31a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2220      	movs	r2, #32
 800e314:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e316:	2303      	movs	r3, #3
 800e318:	e005      	b.n	800e326 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2220      	movs	r2, #32
 800e31e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	e000      	b.n	800e326 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e324:	2302      	movs	r3, #2
  }
}
 800e326:	4618      	mov	r0, r3
 800e328:	3720      	adds	r7, #32
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
	...

0800e330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e334:	b08a      	sub	sp, #40	@ 0x28
 800e336:	af00      	add	r7, sp, #0
 800e338:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	4a9e      	ldr	r2, [pc, #632]	@ (800e5c0 <UART_SetConfig+0x290>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d904      	bls.n	800e354 <UART_SetConfig+0x24>
 800e34a:	f640 4158 	movw	r1, #3160	@ 0xc58
 800e34e:	489d      	ldr	r0, [pc, #628]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e350:	f7f7 fd1c 	bl	8005d8c <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e35c:	d00d      	beq.n	800e37a <UART_SetConfig+0x4a>
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d009      	beq.n	800e37a <UART_SetConfig+0x4a>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e36e:	d004      	beq.n	800e37a <UART_SetConfig+0x4a>
 800e370:	f640 4159 	movw	r1, #3161	@ 0xc59
 800e374:	4893      	ldr	r0, [pc, #588]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e376:	f7f7 fd09 	bl	8005d8c <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a92      	ldr	r2, [pc, #584]	@ (800e5c8 <UART_SetConfig+0x298>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d10e      	bne.n	800e3a2 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d030      	beq.n	800e3ee <UART_SetConfig+0xbe>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e394:	d02b      	beq.n	800e3ee <UART_SetConfig+0xbe>
 800e396:	f640 415c 	movw	r1, #3164	@ 0xc5c
 800e39a:	488a      	ldr	r0, [pc, #552]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e39c:	f7f7 fcf6 	bl	8005d8c <assert_failed>
 800e3a0:	e025      	b.n	800e3ee <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3aa:	d012      	beq.n	800e3d2 <UART_SetConfig+0xa2>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00e      	beq.n	800e3d2 <UART_SetConfig+0xa2>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e3bc:	d009      	beq.n	800e3d2 <UART_SetConfig+0xa2>
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3c6:	d004      	beq.n	800e3d2 <UART_SetConfig+0xa2>
 800e3c8:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 800e3cc:	487d      	ldr	r0, [pc, #500]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e3ce:	f7f7 fcdd 	bl	8005d8c <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d009      	beq.n	800e3ee <UART_SetConfig+0xbe>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e3e2:	d004      	beq.n	800e3ee <UART_SetConfig+0xbe>
 800e3e4:	f640 4161 	movw	r1, #3169	@ 0xc61
 800e3e8:	4876      	ldr	r0, [pc, #472]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e3ea:	f7f7 fccf 	bl	8005d8c <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00e      	beq.n	800e414 <UART_SetConfig+0xe4>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	691b      	ldr	r3, [r3, #16]
 800e3fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3fe:	d009      	beq.n	800e414 <UART_SetConfig+0xe4>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e408:	d004      	beq.n	800e414 <UART_SetConfig+0xe4>
 800e40a:	f640 4164 	movw	r1, #3172	@ 0xc64
 800e40e:	486d      	ldr	r0, [pc, #436]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e410:	f7f7 fcbc 	bl	8005d8c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	695b      	ldr	r3, [r3, #20]
 800e418:	f023 030c 	bic.w	r3, r3, #12
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d103      	bne.n	800e428 <UART_SetConfig+0xf8>
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	695b      	ldr	r3, [r3, #20]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d104      	bne.n	800e432 <UART_SetConfig+0x102>
 800e428:	f640 4165 	movw	r1, #3173	@ 0xc65
 800e42c:	4865      	ldr	r0, [pc, #404]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e42e:	f7f7 fcad 	bl	8005d8c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d013      	beq.n	800e462 <UART_SetConfig+0x132>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	699b      	ldr	r3, [r3, #24]
 800e43e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e442:	d00e      	beq.n	800e462 <UART_SetConfig+0x132>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	699b      	ldr	r3, [r3, #24]
 800e448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e44c:	d009      	beq.n	800e462 <UART_SetConfig+0x132>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e456:	d004      	beq.n	800e462 <UART_SetConfig+0x132>
 800e458:	f640 4166 	movw	r1, #3174	@ 0xc66
 800e45c:	4859      	ldr	r0, [pc, #356]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e45e:	f7f7 fc95 	bl	8005d8c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d009      	beq.n	800e47e <UART_SetConfig+0x14e>
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e472:	d004      	beq.n	800e47e <UART_SetConfig+0x14e>
 800e474:	f640 4167 	movw	r1, #3175	@ 0xc67
 800e478:	4852      	ldr	r0, [pc, #328]	@ (800e5c4 <UART_SetConfig+0x294>)
 800e47a:	f7f7 fc87 	bl	8005d8c <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	689a      	ldr	r2, [r3, #8]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	691b      	ldr	r3, [r3, #16]
 800e486:	431a      	orrs	r2, r3
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	695b      	ldr	r3, [r3, #20]
 800e48c:	431a      	orrs	r2, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	69db      	ldr	r3, [r3, #28]
 800e492:	4313      	orrs	r3, r2
 800e494:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	4b4b      	ldr	r3, [pc, #300]	@ (800e5cc <UART_SetConfig+0x29c>)
 800e49e:	4013      	ands	r3, r2
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	6812      	ldr	r2, [r2, #0]
 800e4a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e4a6:	430b      	orrs	r3, r1
 800e4a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	68da      	ldr	r2, [r3, #12]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	430a      	orrs	r2, r1
 800e4be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a3f      	ldr	r2, [pc, #252]	@ (800e5c8 <UART_SetConfig+0x298>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d004      	beq.n	800e4da <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6a1b      	ldr	r3, [r3, #32]
 800e4d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4ea:	430a      	orrs	r2, r1
 800e4ec:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a37      	ldr	r2, [pc, #220]	@ (800e5d0 <UART_SetConfig+0x2a0>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d125      	bne.n	800e544 <UART_SetConfig+0x214>
 800e4f8:	4b36      	ldr	r3, [pc, #216]	@ (800e5d4 <UART_SetConfig+0x2a4>)
 800e4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4fe:	f003 0303 	and.w	r3, r3, #3
 800e502:	2b03      	cmp	r3, #3
 800e504:	d81a      	bhi.n	800e53c <UART_SetConfig+0x20c>
 800e506:	a201      	add	r2, pc, #4	@ (adr r2, 800e50c <UART_SetConfig+0x1dc>)
 800e508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50c:	0800e51d 	.word	0x0800e51d
 800e510:	0800e52d 	.word	0x0800e52d
 800e514:	0800e525 	.word	0x0800e525
 800e518:	0800e535 	.word	0x0800e535
 800e51c:	2301      	movs	r3, #1
 800e51e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e522:	e114      	b.n	800e74e <UART_SetConfig+0x41e>
 800e524:	2302      	movs	r3, #2
 800e526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e52a:	e110      	b.n	800e74e <UART_SetConfig+0x41e>
 800e52c:	2304      	movs	r3, #4
 800e52e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e532:	e10c      	b.n	800e74e <UART_SetConfig+0x41e>
 800e534:	2308      	movs	r3, #8
 800e536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e53a:	e108      	b.n	800e74e <UART_SetConfig+0x41e>
 800e53c:	2310      	movs	r3, #16
 800e53e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e542:	e104      	b.n	800e74e <UART_SetConfig+0x41e>
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a23      	ldr	r2, [pc, #140]	@ (800e5d8 <UART_SetConfig+0x2a8>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d146      	bne.n	800e5dc <UART_SetConfig+0x2ac>
 800e54e:	4b21      	ldr	r3, [pc, #132]	@ (800e5d4 <UART_SetConfig+0x2a4>)
 800e550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e554:	f003 030c 	and.w	r3, r3, #12
 800e558:	2b0c      	cmp	r3, #12
 800e55a:	d82d      	bhi.n	800e5b8 <UART_SetConfig+0x288>
 800e55c:	a201      	add	r2, pc, #4	@ (adr r2, 800e564 <UART_SetConfig+0x234>)
 800e55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e562:	bf00      	nop
 800e564:	0800e599 	.word	0x0800e599
 800e568:	0800e5b9 	.word	0x0800e5b9
 800e56c:	0800e5b9 	.word	0x0800e5b9
 800e570:	0800e5b9 	.word	0x0800e5b9
 800e574:	0800e5a9 	.word	0x0800e5a9
 800e578:	0800e5b9 	.word	0x0800e5b9
 800e57c:	0800e5b9 	.word	0x0800e5b9
 800e580:	0800e5b9 	.word	0x0800e5b9
 800e584:	0800e5a1 	.word	0x0800e5a1
 800e588:	0800e5b9 	.word	0x0800e5b9
 800e58c:	0800e5b9 	.word	0x0800e5b9
 800e590:	0800e5b9 	.word	0x0800e5b9
 800e594:	0800e5b1 	.word	0x0800e5b1
 800e598:	2300      	movs	r3, #0
 800e59a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e59e:	e0d6      	b.n	800e74e <UART_SetConfig+0x41e>
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5a6:	e0d2      	b.n	800e74e <UART_SetConfig+0x41e>
 800e5a8:	2304      	movs	r3, #4
 800e5aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5ae:	e0ce      	b.n	800e74e <UART_SetConfig+0x41e>
 800e5b0:	2308      	movs	r3, #8
 800e5b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5b6:	e0ca      	b.n	800e74e <UART_SetConfig+0x41e>
 800e5b8:	2310      	movs	r3, #16
 800e5ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e5be:	e0c6      	b.n	800e74e <UART_SetConfig+0x41e>
 800e5c0:	00989680 	.word	0x00989680
 800e5c4:	08010c9c 	.word	0x08010c9c
 800e5c8:	40008000 	.word	0x40008000
 800e5cc:	efff69f3 	.word	0xefff69f3
 800e5d0:	40013800 	.word	0x40013800
 800e5d4:	40021000 	.word	0x40021000
 800e5d8:	40004400 	.word	0x40004400
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4aae      	ldr	r2, [pc, #696]	@ (800e89c <UART_SetConfig+0x56c>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d125      	bne.n	800e632 <UART_SetConfig+0x302>
 800e5e6:	4bae      	ldr	r3, [pc, #696]	@ (800e8a0 <UART_SetConfig+0x570>)
 800e5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e5f0:	2b30      	cmp	r3, #48	@ 0x30
 800e5f2:	d016      	beq.n	800e622 <UART_SetConfig+0x2f2>
 800e5f4:	2b30      	cmp	r3, #48	@ 0x30
 800e5f6:	d818      	bhi.n	800e62a <UART_SetConfig+0x2fa>
 800e5f8:	2b20      	cmp	r3, #32
 800e5fa:	d00a      	beq.n	800e612 <UART_SetConfig+0x2e2>
 800e5fc:	2b20      	cmp	r3, #32
 800e5fe:	d814      	bhi.n	800e62a <UART_SetConfig+0x2fa>
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <UART_SetConfig+0x2da>
 800e604:	2b10      	cmp	r3, #16
 800e606:	d008      	beq.n	800e61a <UART_SetConfig+0x2ea>
 800e608:	e00f      	b.n	800e62a <UART_SetConfig+0x2fa>
 800e60a:	2300      	movs	r3, #0
 800e60c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e610:	e09d      	b.n	800e74e <UART_SetConfig+0x41e>
 800e612:	2302      	movs	r3, #2
 800e614:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e618:	e099      	b.n	800e74e <UART_SetConfig+0x41e>
 800e61a:	2304      	movs	r3, #4
 800e61c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e620:	e095      	b.n	800e74e <UART_SetConfig+0x41e>
 800e622:	2308      	movs	r3, #8
 800e624:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e628:	e091      	b.n	800e74e <UART_SetConfig+0x41e>
 800e62a:	2310      	movs	r3, #16
 800e62c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e630:	e08d      	b.n	800e74e <UART_SetConfig+0x41e>
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a9b      	ldr	r2, [pc, #620]	@ (800e8a4 <UART_SetConfig+0x574>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d125      	bne.n	800e688 <UART_SetConfig+0x358>
 800e63c:	4b98      	ldr	r3, [pc, #608]	@ (800e8a0 <UART_SetConfig+0x570>)
 800e63e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e642:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e646:	2bc0      	cmp	r3, #192	@ 0xc0
 800e648:	d016      	beq.n	800e678 <UART_SetConfig+0x348>
 800e64a:	2bc0      	cmp	r3, #192	@ 0xc0
 800e64c:	d818      	bhi.n	800e680 <UART_SetConfig+0x350>
 800e64e:	2b80      	cmp	r3, #128	@ 0x80
 800e650:	d00a      	beq.n	800e668 <UART_SetConfig+0x338>
 800e652:	2b80      	cmp	r3, #128	@ 0x80
 800e654:	d814      	bhi.n	800e680 <UART_SetConfig+0x350>
 800e656:	2b00      	cmp	r3, #0
 800e658:	d002      	beq.n	800e660 <UART_SetConfig+0x330>
 800e65a:	2b40      	cmp	r3, #64	@ 0x40
 800e65c:	d008      	beq.n	800e670 <UART_SetConfig+0x340>
 800e65e:	e00f      	b.n	800e680 <UART_SetConfig+0x350>
 800e660:	2300      	movs	r3, #0
 800e662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e666:	e072      	b.n	800e74e <UART_SetConfig+0x41e>
 800e668:	2302      	movs	r3, #2
 800e66a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e66e:	e06e      	b.n	800e74e <UART_SetConfig+0x41e>
 800e670:	2304      	movs	r3, #4
 800e672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e676:	e06a      	b.n	800e74e <UART_SetConfig+0x41e>
 800e678:	2308      	movs	r3, #8
 800e67a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e67e:	e066      	b.n	800e74e <UART_SetConfig+0x41e>
 800e680:	2310      	movs	r3, #16
 800e682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e686:	e062      	b.n	800e74e <UART_SetConfig+0x41e>
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a86      	ldr	r2, [pc, #536]	@ (800e8a8 <UART_SetConfig+0x578>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d12a      	bne.n	800e6e8 <UART_SetConfig+0x3b8>
 800e692:	4b83      	ldr	r3, [pc, #524]	@ (800e8a0 <UART_SetConfig+0x570>)
 800e694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e69c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e6a0:	d01a      	beq.n	800e6d8 <UART_SetConfig+0x3a8>
 800e6a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e6a6:	d81b      	bhi.n	800e6e0 <UART_SetConfig+0x3b0>
 800e6a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6ac:	d00c      	beq.n	800e6c8 <UART_SetConfig+0x398>
 800e6ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6b2:	d815      	bhi.n	800e6e0 <UART_SetConfig+0x3b0>
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d003      	beq.n	800e6c0 <UART_SetConfig+0x390>
 800e6b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6bc:	d008      	beq.n	800e6d0 <UART_SetConfig+0x3a0>
 800e6be:	e00f      	b.n	800e6e0 <UART_SetConfig+0x3b0>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6c6:	e042      	b.n	800e74e <UART_SetConfig+0x41e>
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6ce:	e03e      	b.n	800e74e <UART_SetConfig+0x41e>
 800e6d0:	2304      	movs	r3, #4
 800e6d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6d6:	e03a      	b.n	800e74e <UART_SetConfig+0x41e>
 800e6d8:	2308      	movs	r3, #8
 800e6da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6de:	e036      	b.n	800e74e <UART_SetConfig+0x41e>
 800e6e0:	2310      	movs	r3, #16
 800e6e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6e6:	e032      	b.n	800e74e <UART_SetConfig+0x41e>
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a6f      	ldr	r2, [pc, #444]	@ (800e8ac <UART_SetConfig+0x57c>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d12a      	bne.n	800e748 <UART_SetConfig+0x418>
 800e6f2:	4b6b      	ldr	r3, [pc, #428]	@ (800e8a0 <UART_SetConfig+0x570>)
 800e6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e6fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e700:	d01a      	beq.n	800e738 <UART_SetConfig+0x408>
 800e702:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e706:	d81b      	bhi.n	800e740 <UART_SetConfig+0x410>
 800e708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e70c:	d00c      	beq.n	800e728 <UART_SetConfig+0x3f8>
 800e70e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e712:	d815      	bhi.n	800e740 <UART_SetConfig+0x410>
 800e714:	2b00      	cmp	r3, #0
 800e716:	d003      	beq.n	800e720 <UART_SetConfig+0x3f0>
 800e718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e71c:	d008      	beq.n	800e730 <UART_SetConfig+0x400>
 800e71e:	e00f      	b.n	800e740 <UART_SetConfig+0x410>
 800e720:	2300      	movs	r3, #0
 800e722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e726:	e012      	b.n	800e74e <UART_SetConfig+0x41e>
 800e728:	2302      	movs	r3, #2
 800e72a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e72e:	e00e      	b.n	800e74e <UART_SetConfig+0x41e>
 800e730:	2304      	movs	r3, #4
 800e732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e736:	e00a      	b.n	800e74e <UART_SetConfig+0x41e>
 800e738:	2308      	movs	r3, #8
 800e73a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e73e:	e006      	b.n	800e74e <UART_SetConfig+0x41e>
 800e740:	2310      	movs	r3, #16
 800e742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e746:	e002      	b.n	800e74e <UART_SetConfig+0x41e>
 800e748:	2310      	movs	r3, #16
 800e74a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4a56      	ldr	r2, [pc, #344]	@ (800e8ac <UART_SetConfig+0x57c>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d17a      	bne.n	800e84e <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e758:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e75c:	2b08      	cmp	r3, #8
 800e75e:	d824      	bhi.n	800e7aa <UART_SetConfig+0x47a>
 800e760:	a201      	add	r2, pc, #4	@ (adr r2, 800e768 <UART_SetConfig+0x438>)
 800e762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e766:	bf00      	nop
 800e768:	0800e78d 	.word	0x0800e78d
 800e76c:	0800e7ab 	.word	0x0800e7ab
 800e770:	0800e795 	.word	0x0800e795
 800e774:	0800e7ab 	.word	0x0800e7ab
 800e778:	0800e79b 	.word	0x0800e79b
 800e77c:	0800e7ab 	.word	0x0800e7ab
 800e780:	0800e7ab 	.word	0x0800e7ab
 800e784:	0800e7ab 	.word	0x0800e7ab
 800e788:	0800e7a3 	.word	0x0800e7a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e78c:	f7fa fd5c 	bl	8009248 <HAL_RCC_GetPCLK1Freq>
 800e790:	61f8      	str	r0, [r7, #28]
        break;
 800e792:	e010      	b.n	800e7b6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e794:	4b46      	ldr	r3, [pc, #280]	@ (800e8b0 <UART_SetConfig+0x580>)
 800e796:	61fb      	str	r3, [r7, #28]
        break;
 800e798:	e00d      	b.n	800e7b6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e79a:	f7fa fcbd 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800e79e:	61f8      	str	r0, [r7, #28]
        break;
 800e7a0:	e009      	b.n	800e7b6 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e7a6:	61fb      	str	r3, [r7, #28]
        break;
 800e7a8:	e005      	b.n	800e7b6 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e7b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f000 8107 	beq.w	800e9cc <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	685a      	ldr	r2, [r3, #4]
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	005b      	lsls	r3, r3, #1
 800e7c6:	4413      	add	r3, r2
 800e7c8:	69fa      	ldr	r2, [r7, #28]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d305      	bcc.n	800e7da <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e7d4:	69fa      	ldr	r2, [r7, #28]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d903      	bls.n	800e7e2 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e7e0:	e0f4      	b.n	800e9cc <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	461c      	mov	r4, r3
 800e7e8:	4615      	mov	r5, r2
 800e7ea:	f04f 0200 	mov.w	r2, #0
 800e7ee:	f04f 0300 	mov.w	r3, #0
 800e7f2:	022b      	lsls	r3, r5, #8
 800e7f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e7f8:	0222      	lsls	r2, r4, #8
 800e7fa:	68f9      	ldr	r1, [r7, #12]
 800e7fc:	6849      	ldr	r1, [r1, #4]
 800e7fe:	0849      	lsrs	r1, r1, #1
 800e800:	2000      	movs	r0, #0
 800e802:	4688      	mov	r8, r1
 800e804:	4681      	mov	r9, r0
 800e806:	eb12 0a08 	adds.w	sl, r2, r8
 800e80a:	eb43 0b09 	adc.w	fp, r3, r9
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	603b      	str	r3, [r7, #0]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e81c:	4650      	mov	r0, sl
 800e81e:	4659      	mov	r1, fp
 800e820:	f7f1 fd76 	bl	8000310 <__aeabi_uldivmod>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	4613      	mov	r3, r2
 800e82a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e832:	d308      	bcc.n	800e846 <UART_SetConfig+0x516>
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e83a:	d204      	bcs.n	800e846 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	60da      	str	r2, [r3, #12]
 800e844:	e0c2      	b.n	800e9cc <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e84c:	e0be      	b.n	800e9cc <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	69db      	ldr	r3, [r3, #28]
 800e852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e856:	d16a      	bne.n	800e92e <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 800e858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e85c:	2b08      	cmp	r3, #8
 800e85e:	d834      	bhi.n	800e8ca <UART_SetConfig+0x59a>
 800e860:	a201      	add	r2, pc, #4	@ (adr r2, 800e868 <UART_SetConfig+0x538>)
 800e862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e866:	bf00      	nop
 800e868:	0800e88d 	.word	0x0800e88d
 800e86c:	0800e895 	.word	0x0800e895
 800e870:	0800e8b5 	.word	0x0800e8b5
 800e874:	0800e8cb 	.word	0x0800e8cb
 800e878:	0800e8bb 	.word	0x0800e8bb
 800e87c:	0800e8cb 	.word	0x0800e8cb
 800e880:	0800e8cb 	.word	0x0800e8cb
 800e884:	0800e8cb 	.word	0x0800e8cb
 800e888:	0800e8c3 	.word	0x0800e8c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e88c:	f7fa fcdc 	bl	8009248 <HAL_RCC_GetPCLK1Freq>
 800e890:	61f8      	str	r0, [r7, #28]
        break;
 800e892:	e020      	b.n	800e8d6 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e894:	f7fa fcee 	bl	8009274 <HAL_RCC_GetPCLK2Freq>
 800e898:	61f8      	str	r0, [r7, #28]
        break;
 800e89a:	e01c      	b.n	800e8d6 <UART_SetConfig+0x5a6>
 800e89c:	40004800 	.word	0x40004800
 800e8a0:	40021000 	.word	0x40021000
 800e8a4:	40004c00 	.word	0x40004c00
 800e8a8:	40005000 	.word	0x40005000
 800e8ac:	40008000 	.word	0x40008000
 800e8b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e8b4:	4b4c      	ldr	r3, [pc, #304]	@ (800e9e8 <UART_SetConfig+0x6b8>)
 800e8b6:	61fb      	str	r3, [r7, #28]
        break;
 800e8b8:	e00d      	b.n	800e8d6 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8ba:	f7fa fc2d 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800e8be:	61f8      	str	r0, [r7, #28]
        break;
 800e8c0:	e009      	b.n	800e8d6 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e8c6:	61fb      	str	r3, [r7, #28]
        break;
 800e8c8:	e005      	b.n	800e8d6 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e8d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d077      	beq.n	800e9cc <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	005a      	lsls	r2, r3, #1
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	085b      	lsrs	r3, r3, #1
 800e8e6:	441a      	add	r2, r3
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	2b0f      	cmp	r3, #15
 800e8f6:	d916      	bls.n	800e926 <UART_SetConfig+0x5f6>
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8fe:	d212      	bcs.n	800e926 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	b29b      	uxth	r3, r3
 800e904:	f023 030f 	bic.w	r3, r3, #15
 800e908:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e90a:	69bb      	ldr	r3, [r7, #24]
 800e90c:	085b      	lsrs	r3, r3, #1
 800e90e:	b29b      	uxth	r3, r3
 800e910:	f003 0307 	and.w	r3, r3, #7
 800e914:	b29a      	uxth	r2, r3
 800e916:	8afb      	ldrh	r3, [r7, #22]
 800e918:	4313      	orrs	r3, r2
 800e91a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	8afa      	ldrh	r2, [r7, #22]
 800e922:	60da      	str	r2, [r3, #12]
 800e924:	e052      	b.n	800e9cc <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e92c:	e04e      	b.n	800e9cc <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e92e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e932:	2b08      	cmp	r3, #8
 800e934:	d827      	bhi.n	800e986 <UART_SetConfig+0x656>
 800e936:	a201      	add	r2, pc, #4	@ (adr r2, 800e93c <UART_SetConfig+0x60c>)
 800e938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e93c:	0800e961 	.word	0x0800e961
 800e940:	0800e969 	.word	0x0800e969
 800e944:	0800e971 	.word	0x0800e971
 800e948:	0800e987 	.word	0x0800e987
 800e94c:	0800e977 	.word	0x0800e977
 800e950:	0800e987 	.word	0x0800e987
 800e954:	0800e987 	.word	0x0800e987
 800e958:	0800e987 	.word	0x0800e987
 800e95c:	0800e97f 	.word	0x0800e97f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e960:	f7fa fc72 	bl	8009248 <HAL_RCC_GetPCLK1Freq>
 800e964:	61f8      	str	r0, [r7, #28]
        break;
 800e966:	e014      	b.n	800e992 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e968:	f7fa fc84 	bl	8009274 <HAL_RCC_GetPCLK2Freq>
 800e96c:	61f8      	str	r0, [r7, #28]
        break;
 800e96e:	e010      	b.n	800e992 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e970:	4b1d      	ldr	r3, [pc, #116]	@ (800e9e8 <UART_SetConfig+0x6b8>)
 800e972:	61fb      	str	r3, [r7, #28]
        break;
 800e974:	e00d      	b.n	800e992 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e976:	f7fa fbcf 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800e97a:	61f8      	str	r0, [r7, #28]
        break;
 800e97c:	e009      	b.n	800e992 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e97e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e982:	61fb      	str	r3, [r7, #28]
        break;
 800e984:	e005      	b.n	800e992 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 800e986:	2300      	movs	r3, #0
 800e988:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e990:	bf00      	nop
    }

    if (pclk != 0U)
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d019      	beq.n	800e9cc <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	085a      	lsrs	r2, r3, #1
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	441a      	add	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	2b0f      	cmp	r3, #15
 800e9b0:	d909      	bls.n	800e9c6 <UART_SetConfig+0x696>
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9b8:	d205      	bcs.n	800e9c6 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	60da      	str	r2, [r3, #12]
 800e9c4:	e002      	b.n	800e9cc <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e9d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3728      	adds	r7, #40	@ 0x28
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9e6:	bf00      	nop
 800e9e8:	00f42400 	.word	0x00f42400

0800e9ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f8:	2bff      	cmp	r3, #255	@ 0xff
 800e9fa:	d904      	bls.n	800ea06 <UART_AdvFeatureConfig+0x1a>
 800e9fc:	f640 514d 	movw	r1, #3405	@ 0xd4d
 800ea00:	4891      	ldr	r0, [pc, #580]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800ea02:	f7f7 f9c3 	bl	8005d8c <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea0a:	f003 0308 	and.w	r3, r3, #8
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d018      	beq.n	800ea44 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d009      	beq.n	800ea2e <UART_AdvFeatureConfig+0x42>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea22:	d004      	beq.n	800ea2e <UART_AdvFeatureConfig+0x42>
 800ea24:	f640 5152 	movw	r1, #3410	@ 0xd52
 800ea28:	4887      	ldr	r0, [pc, #540]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800ea2a:	f7f7 f9af 	bl	8005d8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	430a      	orrs	r2, r1
 800ea42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea48:	f003 0301 	and.w	r3, r3, #1
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d018      	beq.n	800ea82 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d009      	beq.n	800ea6c <UART_AdvFeatureConfig+0x80>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea60:	d004      	beq.n	800ea6c <UART_AdvFeatureConfig+0x80>
 800ea62:	f640 5159 	movw	r1, #3417	@ 0xd59
 800ea66:	4878      	ldr	r0, [pc, #480]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800ea68:	f7f7 f990 	bl	8005d8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	430a      	orrs	r2, r1
 800ea80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea86:	f003 0302 	and.w	r3, r3, #2
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d018      	beq.n	800eac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d009      	beq.n	800eaaa <UART_AdvFeatureConfig+0xbe>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea9e:	d004      	beq.n	800eaaa <UART_AdvFeatureConfig+0xbe>
 800eaa0:	f44f 6156 	mov.w	r1, #3424	@ 0xd60
 800eaa4:	4868      	ldr	r0, [pc, #416]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800eaa6:	f7f7 f971 	bl	8005d8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	430a      	orrs	r2, r1
 800eabe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eac4:	f003 0304 	and.w	r3, r3, #4
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d018      	beq.n	800eafe <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d009      	beq.n	800eae8 <UART_AdvFeatureConfig+0xfc>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ead8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eadc:	d004      	beq.n	800eae8 <UART_AdvFeatureConfig+0xfc>
 800eade:	f640 5167 	movw	r1, #3431	@ 0xd67
 800eae2:	4859      	ldr	r0, [pc, #356]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800eae4:	f7f7 f952 	bl	8005d8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	430a      	orrs	r2, r1
 800eafc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb02:	f003 0310 	and.w	r3, r3, #16
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d018      	beq.n	800eb3c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d009      	beq.n	800eb26 <UART_AdvFeatureConfig+0x13a>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb1a:	d004      	beq.n	800eb26 <UART_AdvFeatureConfig+0x13a>
 800eb1c:	f640 516e 	movw	r1, #3438	@ 0xd6e
 800eb20:	4849      	ldr	r0, [pc, #292]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800eb22:	f7f7 f933 	bl	8005d8c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	430a      	orrs	r2, r1
 800eb3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb40:	f003 0320 	and.w	r3, r3, #32
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d018      	beq.n	800eb7a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d009      	beq.n	800eb64 <UART_AdvFeatureConfig+0x178>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb58:	d004      	beq.n	800eb64 <UART_AdvFeatureConfig+0x178>
 800eb5a:	f640 5175 	movw	r1, #3445	@ 0xd75
 800eb5e:	483a      	ldr	r0, [pc, #232]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800eb60:	f7f7 f914 	bl	8005d8c <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d06c      	beq.n	800ec60 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a30      	ldr	r2, [pc, #192]	@ (800ec4c <UART_AdvFeatureConfig+0x260>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d018      	beq.n	800ebc2 <UART_AdvFeatureConfig+0x1d6>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a2e      	ldr	r2, [pc, #184]	@ (800ec50 <UART_AdvFeatureConfig+0x264>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d013      	beq.n	800ebc2 <UART_AdvFeatureConfig+0x1d6>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4a2d      	ldr	r2, [pc, #180]	@ (800ec54 <UART_AdvFeatureConfig+0x268>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d00e      	beq.n	800ebc2 <UART_AdvFeatureConfig+0x1d6>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a2b      	ldr	r2, [pc, #172]	@ (800ec58 <UART_AdvFeatureConfig+0x26c>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d009      	beq.n	800ebc2 <UART_AdvFeatureConfig+0x1d6>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4a2a      	ldr	r2, [pc, #168]	@ (800ec5c <UART_AdvFeatureConfig+0x270>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d004      	beq.n	800ebc2 <UART_AdvFeatureConfig+0x1d6>
 800ebb8:	f640 517c 	movw	r1, #3452	@ 0xd7c
 800ebbc:	4822      	ldr	r0, [pc, #136]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800ebbe:	f7f7 f8e5 	bl	8005d8c <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d009      	beq.n	800ebde <UART_AdvFeatureConfig+0x1f2>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebd2:	d004      	beq.n	800ebde <UART_AdvFeatureConfig+0x1f2>
 800ebd4:	f640 517d 	movw	r1, #3453	@ 0xd7d
 800ebd8:	481b      	ldr	r0, [pc, #108]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800ebda:	f7f7 f8d7 	bl	8005d8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	430a      	orrs	r2, r1
 800ebf2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebfc:	d130      	bne.n	800ec60 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d013      	beq.n	800ec2e <UART_AdvFeatureConfig+0x242>
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ec0e:	d00e      	beq.n	800ec2e <UART_AdvFeatureConfig+0x242>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec18:	d009      	beq.n	800ec2e <UART_AdvFeatureConfig+0x242>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ec22:	d004      	beq.n	800ec2e <UART_AdvFeatureConfig+0x242>
 800ec24:	f640 5182 	movw	r1, #3458	@ 0xd82
 800ec28:	4807      	ldr	r0, [pc, #28]	@ (800ec48 <UART_AdvFeatureConfig+0x25c>)
 800ec2a:	f7f7 f8af 	bl	8005d8c <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	430a      	orrs	r2, r1
 800ec42:	605a      	str	r2, [r3, #4]
 800ec44:	e00c      	b.n	800ec60 <UART_AdvFeatureConfig+0x274>
 800ec46:	bf00      	nop
 800ec48:	08010c9c 	.word	0x08010c9c
 800ec4c:	40013800 	.word	0x40013800
 800ec50:	40004400 	.word	0x40004400
 800ec54:	40004800 	.word	0x40004800
 800ec58:	40004c00 	.word	0x40004c00
 800ec5c:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d018      	beq.n	800ec9e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d009      	beq.n	800ec88 <UART_AdvFeatureConfig+0x29c>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ec78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ec7c:	d004      	beq.n	800ec88 <UART_AdvFeatureConfig+0x29c>
 800ec7e:	f640 518a 	movw	r1, #3466	@ 0xd8a
 800ec82:	4809      	ldr	r0, [pc, #36]	@ (800eca8 <UART_AdvFeatureConfig+0x2bc>)
 800ec84:	f7f7 f882 	bl	8005d8c <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	430a      	orrs	r2, r1
 800ec9c:	605a      	str	r2, [r3, #4]
  }
}
 800ec9e:	bf00      	nop
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	08010c9c 	.word	0x08010c9c

0800ecac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b098      	sub	sp, #96	@ 0x60
 800ecb0:	af02      	add	r7, sp, #8
 800ecb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ecbc:	f7f7 fe90 	bl	80069e0 <HAL_GetTick>
 800ecc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f003 0308 	and.w	r3, r3, #8
 800eccc:	2b08      	cmp	r3, #8
 800ecce:	d12e      	bne.n	800ed2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 f88c 	bl	800edfc <UART_WaitOnFlagUntilTimeout>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d021      	beq.n	800ed2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf2:	e853 3f00 	ldrex	r3, [r3]
 800ecf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ecf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ecfe:	653b      	str	r3, [r7, #80]	@ 0x50
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	461a      	mov	r2, r3
 800ed06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed08:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed10:	e841 2300 	strex	r3, r2, [r1]
 800ed14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1e6      	bne.n	800ecea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2220      	movs	r2, #32
 800ed20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	e062      	b.n	800edf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f003 0304 	and.w	r3, r3, #4
 800ed38:	2b04      	cmp	r3, #4
 800ed3a:	d149      	bne.n	800edd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed44:	2200      	movs	r2, #0
 800ed46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 f856 	bl	800edfc <UART_WaitOnFlagUntilTimeout>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d03c      	beq.n	800edd0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5e:	e853 3f00 	ldrex	r3, [r3]
 800ed62:	623b      	str	r3, [r7, #32]
   return(result);
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	461a      	mov	r2, r3
 800ed72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed74:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed7c:	e841 2300 	strex	r3, r2, [r1]
 800ed80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d1e6      	bne.n	800ed56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	3308      	adds	r3, #8
 800ed8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	e853 3f00 	ldrex	r3, [r3]
 800ed96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f023 0301 	bic.w	r3, r3, #1
 800ed9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3308      	adds	r3, #8
 800eda6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eda8:	61fa      	str	r2, [r7, #28]
 800edaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edac:	69b9      	ldr	r1, [r7, #24]
 800edae:	69fa      	ldr	r2, [r7, #28]
 800edb0:	e841 2300 	strex	r3, r2, [r1]
 800edb4:	617b      	str	r3, [r7, #20]
   return(result);
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1e5      	bne.n	800ed88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2220      	movs	r2, #32
 800edc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edcc:	2303      	movs	r3, #3
 800edce:	e011      	b.n	800edf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2220      	movs	r2, #32
 800edd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2220      	movs	r2, #32
 800edda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3758      	adds	r7, #88	@ 0x58
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	603b      	str	r3, [r7, #0]
 800ee08:	4613      	mov	r3, r2
 800ee0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee0c:	e04f      	b.n	800eeae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee14:	d04b      	beq.n	800eeae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee16:	f7f7 fde3 	bl	80069e0 <HAL_GetTick>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	1ad3      	subs	r3, r2, r3
 800ee20:	69ba      	ldr	r2, [r7, #24]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d302      	bcc.n	800ee2c <UART_WaitOnFlagUntilTimeout+0x30>
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d101      	bne.n	800ee30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee2c:	2303      	movs	r3, #3
 800ee2e:	e04e      	b.n	800eece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f003 0304 	and.w	r3, r3, #4
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d037      	beq.n	800eeae <UART_WaitOnFlagUntilTimeout+0xb2>
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	2b80      	cmp	r3, #128	@ 0x80
 800ee42:	d034      	beq.n	800eeae <UART_WaitOnFlagUntilTimeout+0xb2>
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	2b40      	cmp	r3, #64	@ 0x40
 800ee48:	d031      	beq.n	800eeae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	69db      	ldr	r3, [r3, #28]
 800ee50:	f003 0308 	and.w	r3, r3, #8
 800ee54:	2b08      	cmp	r3, #8
 800ee56:	d110      	bne.n	800ee7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	2208      	movs	r2, #8
 800ee5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 f838 	bl	800eed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2208      	movs	r2, #8
 800ee6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e029      	b.n	800eece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee88:	d111      	bne.n	800eeae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ee92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f000 f81e 	bl	800eed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2220      	movs	r2, #32
 800ee9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	e00f      	b.n	800eece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	69da      	ldr	r2, [r3, #28]
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	4013      	ands	r3, r2
 800eeb8:	68ba      	ldr	r2, [r7, #8]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	bf0c      	ite	eq
 800eebe:	2301      	moveq	r3, #1
 800eec0:	2300      	movne	r3, #0
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	461a      	mov	r2, r3
 800eec6:	79fb      	ldrb	r3, [r7, #7]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d0a0      	beq.n	800ee0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eed6:	b480      	push	{r7}
 800eed8:	b095      	sub	sp, #84	@ 0x54
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee6:	e853 3f00 	ldrex	r3, [r3]
 800eeea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	461a      	mov	r2, r3
 800eefa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eefc:	643b      	str	r3, [r7, #64]	@ 0x40
 800eefe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ef02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ef04:	e841 2300 	strex	r3, r2, [r1]
 800ef08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ef0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1e6      	bne.n	800eede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3308      	adds	r3, #8
 800ef16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef18:	6a3b      	ldr	r3, [r7, #32]
 800ef1a:	e853 3f00 	ldrex	r3, [r3]
 800ef1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	f023 0301 	bic.w	r3, r3, #1
 800ef26:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	3308      	adds	r3, #8
 800ef2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef38:	e841 2300 	strex	r3, r2, [r1]
 800ef3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1e5      	bne.n	800ef10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d118      	bne.n	800ef7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	e853 3f00 	ldrex	r3, [r3]
 800ef58:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	f023 0310 	bic.w	r3, r3, #16
 800ef60:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	461a      	mov	r2, r3
 800ef68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef6a:	61bb      	str	r3, [r7, #24]
 800ef6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6e:	6979      	ldr	r1, [r7, #20]
 800ef70:	69ba      	ldr	r2, [r7, #24]
 800ef72:	e841 2300 	strex	r3, r2, [r1]
 800ef76:	613b      	str	r3, [r7, #16]
   return(result);
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1e6      	bne.n	800ef4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2220      	movs	r2, #32
 800ef82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ef92:	bf00      	nop
 800ef94:	3754      	adds	r7, #84	@ 0x54
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
	...

0800efa0 <calloc>:
 800efa0:	4b02      	ldr	r3, [pc, #8]	@ (800efac <calloc+0xc>)
 800efa2:	460a      	mov	r2, r1
 800efa4:	4601      	mov	r1, r0
 800efa6:	6818      	ldr	r0, [r3, #0]
 800efa8:	f000 b802 	b.w	800efb0 <_calloc_r>
 800efac:	2000002c 	.word	0x2000002c

0800efb0 <_calloc_r>:
 800efb0:	b570      	push	{r4, r5, r6, lr}
 800efb2:	fba1 5402 	umull	r5, r4, r1, r2
 800efb6:	b934      	cbnz	r4, 800efc6 <_calloc_r+0x16>
 800efb8:	4629      	mov	r1, r5
 800efba:	f000 f83f 	bl	800f03c <_malloc_r>
 800efbe:	4606      	mov	r6, r0
 800efc0:	b928      	cbnz	r0, 800efce <_calloc_r+0x1e>
 800efc2:	4630      	mov	r0, r6
 800efc4:	bd70      	pop	{r4, r5, r6, pc}
 800efc6:	220c      	movs	r2, #12
 800efc8:	6002      	str	r2, [r0, #0]
 800efca:	2600      	movs	r6, #0
 800efcc:	e7f9      	b.n	800efc2 <_calloc_r+0x12>
 800efce:	462a      	mov	r2, r5
 800efd0:	4621      	mov	r1, r4
 800efd2:	f000 fbb9 	bl	800f748 <memset>
 800efd6:	e7f4      	b.n	800efc2 <_calloc_r+0x12>

0800efd8 <malloc>:
 800efd8:	4b02      	ldr	r3, [pc, #8]	@ (800efe4 <malloc+0xc>)
 800efda:	4601      	mov	r1, r0
 800efdc:	6818      	ldr	r0, [r3, #0]
 800efde:	f000 b82d 	b.w	800f03c <_malloc_r>
 800efe2:	bf00      	nop
 800efe4:	2000002c 	.word	0x2000002c

0800efe8 <free>:
 800efe8:	4b02      	ldr	r3, [pc, #8]	@ (800eff4 <free+0xc>)
 800efea:	4601      	mov	r1, r0
 800efec:	6818      	ldr	r0, [r3, #0]
 800efee:	f000 bc45 	b.w	800f87c <_free_r>
 800eff2:	bf00      	nop
 800eff4:	2000002c 	.word	0x2000002c

0800eff8 <sbrk_aligned>:
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	4e0f      	ldr	r6, [pc, #60]	@ (800f038 <sbrk_aligned+0x40>)
 800effc:	460c      	mov	r4, r1
 800effe:	6831      	ldr	r1, [r6, #0]
 800f000:	4605      	mov	r5, r0
 800f002:	b911      	cbnz	r1, 800f00a <sbrk_aligned+0x12>
 800f004:	f000 fbdc 	bl	800f7c0 <_sbrk_r>
 800f008:	6030      	str	r0, [r6, #0]
 800f00a:	4621      	mov	r1, r4
 800f00c:	4628      	mov	r0, r5
 800f00e:	f000 fbd7 	bl	800f7c0 <_sbrk_r>
 800f012:	1c43      	adds	r3, r0, #1
 800f014:	d103      	bne.n	800f01e <sbrk_aligned+0x26>
 800f016:	f04f 34ff 	mov.w	r4, #4294967295
 800f01a:	4620      	mov	r0, r4
 800f01c:	bd70      	pop	{r4, r5, r6, pc}
 800f01e:	1cc4      	adds	r4, r0, #3
 800f020:	f024 0403 	bic.w	r4, r4, #3
 800f024:	42a0      	cmp	r0, r4
 800f026:	d0f8      	beq.n	800f01a <sbrk_aligned+0x22>
 800f028:	1a21      	subs	r1, r4, r0
 800f02a:	4628      	mov	r0, r5
 800f02c:	f000 fbc8 	bl	800f7c0 <_sbrk_r>
 800f030:	3001      	adds	r0, #1
 800f032:	d1f2      	bne.n	800f01a <sbrk_aligned+0x22>
 800f034:	e7ef      	b.n	800f016 <sbrk_aligned+0x1e>
 800f036:	bf00      	nop
 800f038:	20001140 	.word	0x20001140

0800f03c <_malloc_r>:
 800f03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f040:	1ccd      	adds	r5, r1, #3
 800f042:	f025 0503 	bic.w	r5, r5, #3
 800f046:	3508      	adds	r5, #8
 800f048:	2d0c      	cmp	r5, #12
 800f04a:	bf38      	it	cc
 800f04c:	250c      	movcc	r5, #12
 800f04e:	2d00      	cmp	r5, #0
 800f050:	4606      	mov	r6, r0
 800f052:	db01      	blt.n	800f058 <_malloc_r+0x1c>
 800f054:	42a9      	cmp	r1, r5
 800f056:	d904      	bls.n	800f062 <_malloc_r+0x26>
 800f058:	230c      	movs	r3, #12
 800f05a:	6033      	str	r3, [r6, #0]
 800f05c:	2000      	movs	r0, #0
 800f05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f062:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f138 <_malloc_r+0xfc>
 800f066:	f000 f869 	bl	800f13c <__malloc_lock>
 800f06a:	f8d8 3000 	ldr.w	r3, [r8]
 800f06e:	461c      	mov	r4, r3
 800f070:	bb44      	cbnz	r4, 800f0c4 <_malloc_r+0x88>
 800f072:	4629      	mov	r1, r5
 800f074:	4630      	mov	r0, r6
 800f076:	f7ff ffbf 	bl	800eff8 <sbrk_aligned>
 800f07a:	1c43      	adds	r3, r0, #1
 800f07c:	4604      	mov	r4, r0
 800f07e:	d158      	bne.n	800f132 <_malloc_r+0xf6>
 800f080:	f8d8 4000 	ldr.w	r4, [r8]
 800f084:	4627      	mov	r7, r4
 800f086:	2f00      	cmp	r7, #0
 800f088:	d143      	bne.n	800f112 <_malloc_r+0xd6>
 800f08a:	2c00      	cmp	r4, #0
 800f08c:	d04b      	beq.n	800f126 <_malloc_r+0xea>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	4639      	mov	r1, r7
 800f092:	4630      	mov	r0, r6
 800f094:	eb04 0903 	add.w	r9, r4, r3
 800f098:	f000 fb92 	bl	800f7c0 <_sbrk_r>
 800f09c:	4581      	cmp	r9, r0
 800f09e:	d142      	bne.n	800f126 <_malloc_r+0xea>
 800f0a0:	6821      	ldr	r1, [r4, #0]
 800f0a2:	1a6d      	subs	r5, r5, r1
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	f7ff ffa6 	bl	800eff8 <sbrk_aligned>
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	d03a      	beq.n	800f126 <_malloc_r+0xea>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	442b      	add	r3, r5
 800f0b4:	6023      	str	r3, [r4, #0]
 800f0b6:	f8d8 3000 	ldr.w	r3, [r8]
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	bb62      	cbnz	r2, 800f118 <_malloc_r+0xdc>
 800f0be:	f8c8 7000 	str.w	r7, [r8]
 800f0c2:	e00f      	b.n	800f0e4 <_malloc_r+0xa8>
 800f0c4:	6822      	ldr	r2, [r4, #0]
 800f0c6:	1b52      	subs	r2, r2, r5
 800f0c8:	d420      	bmi.n	800f10c <_malloc_r+0xd0>
 800f0ca:	2a0b      	cmp	r2, #11
 800f0cc:	d917      	bls.n	800f0fe <_malloc_r+0xc2>
 800f0ce:	1961      	adds	r1, r4, r5
 800f0d0:	42a3      	cmp	r3, r4
 800f0d2:	6025      	str	r5, [r4, #0]
 800f0d4:	bf18      	it	ne
 800f0d6:	6059      	strne	r1, [r3, #4]
 800f0d8:	6863      	ldr	r3, [r4, #4]
 800f0da:	bf08      	it	eq
 800f0dc:	f8c8 1000 	streq.w	r1, [r8]
 800f0e0:	5162      	str	r2, [r4, r5]
 800f0e2:	604b      	str	r3, [r1, #4]
 800f0e4:	4630      	mov	r0, r6
 800f0e6:	f000 f82f 	bl	800f148 <__malloc_unlock>
 800f0ea:	f104 000b 	add.w	r0, r4, #11
 800f0ee:	1d23      	adds	r3, r4, #4
 800f0f0:	f020 0007 	bic.w	r0, r0, #7
 800f0f4:	1ac2      	subs	r2, r0, r3
 800f0f6:	bf1c      	itt	ne
 800f0f8:	1a1b      	subne	r3, r3, r0
 800f0fa:	50a3      	strne	r3, [r4, r2]
 800f0fc:	e7af      	b.n	800f05e <_malloc_r+0x22>
 800f0fe:	6862      	ldr	r2, [r4, #4]
 800f100:	42a3      	cmp	r3, r4
 800f102:	bf0c      	ite	eq
 800f104:	f8c8 2000 	streq.w	r2, [r8]
 800f108:	605a      	strne	r2, [r3, #4]
 800f10a:	e7eb      	b.n	800f0e4 <_malloc_r+0xa8>
 800f10c:	4623      	mov	r3, r4
 800f10e:	6864      	ldr	r4, [r4, #4]
 800f110:	e7ae      	b.n	800f070 <_malloc_r+0x34>
 800f112:	463c      	mov	r4, r7
 800f114:	687f      	ldr	r7, [r7, #4]
 800f116:	e7b6      	b.n	800f086 <_malloc_r+0x4a>
 800f118:	461a      	mov	r2, r3
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	42a3      	cmp	r3, r4
 800f11e:	d1fb      	bne.n	800f118 <_malloc_r+0xdc>
 800f120:	2300      	movs	r3, #0
 800f122:	6053      	str	r3, [r2, #4]
 800f124:	e7de      	b.n	800f0e4 <_malloc_r+0xa8>
 800f126:	230c      	movs	r3, #12
 800f128:	6033      	str	r3, [r6, #0]
 800f12a:	4630      	mov	r0, r6
 800f12c:	f000 f80c 	bl	800f148 <__malloc_unlock>
 800f130:	e794      	b.n	800f05c <_malloc_r+0x20>
 800f132:	6005      	str	r5, [r0, #0]
 800f134:	e7d6      	b.n	800f0e4 <_malloc_r+0xa8>
 800f136:	bf00      	nop
 800f138:	20001144 	.word	0x20001144

0800f13c <__malloc_lock>:
 800f13c:	4801      	ldr	r0, [pc, #4]	@ (800f144 <__malloc_lock+0x8>)
 800f13e:	f000 bb8c 	b.w	800f85a <__retarget_lock_acquire_recursive>
 800f142:	bf00      	nop
 800f144:	20001288 	.word	0x20001288

0800f148 <__malloc_unlock>:
 800f148:	4801      	ldr	r0, [pc, #4]	@ (800f150 <__malloc_unlock+0x8>)
 800f14a:	f000 bb87 	b.w	800f85c <__retarget_lock_release_recursive>
 800f14e:	bf00      	nop
 800f150:	20001288 	.word	0x20001288

0800f154 <std>:
 800f154:	2300      	movs	r3, #0
 800f156:	b510      	push	{r4, lr}
 800f158:	4604      	mov	r4, r0
 800f15a:	e9c0 3300 	strd	r3, r3, [r0]
 800f15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f162:	6083      	str	r3, [r0, #8]
 800f164:	8181      	strh	r1, [r0, #12]
 800f166:	6643      	str	r3, [r0, #100]	@ 0x64
 800f168:	81c2      	strh	r2, [r0, #14]
 800f16a:	6183      	str	r3, [r0, #24]
 800f16c:	4619      	mov	r1, r3
 800f16e:	2208      	movs	r2, #8
 800f170:	305c      	adds	r0, #92	@ 0x5c
 800f172:	f000 fae9 	bl	800f748 <memset>
 800f176:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ac <std+0x58>)
 800f178:	6263      	str	r3, [r4, #36]	@ 0x24
 800f17a:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b0 <std+0x5c>)
 800f17c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f17e:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b4 <std+0x60>)
 800f180:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f182:	4b0d      	ldr	r3, [pc, #52]	@ (800f1b8 <std+0x64>)
 800f184:	6323      	str	r3, [r4, #48]	@ 0x30
 800f186:	4b0d      	ldr	r3, [pc, #52]	@ (800f1bc <std+0x68>)
 800f188:	6224      	str	r4, [r4, #32]
 800f18a:	429c      	cmp	r4, r3
 800f18c:	d006      	beq.n	800f19c <std+0x48>
 800f18e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f192:	4294      	cmp	r4, r2
 800f194:	d002      	beq.n	800f19c <std+0x48>
 800f196:	33d0      	adds	r3, #208	@ 0xd0
 800f198:	429c      	cmp	r4, r3
 800f19a:	d105      	bne.n	800f1a8 <std+0x54>
 800f19c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1a4:	f000 bb58 	b.w	800f858 <__retarget_lock_init_recursive>
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	bf00      	nop
 800f1ac:	0800f521 	.word	0x0800f521
 800f1b0:	0800f543 	.word	0x0800f543
 800f1b4:	0800f57b 	.word	0x0800f57b
 800f1b8:	0800f59f 	.word	0x0800f59f
 800f1bc:	20001148 	.word	0x20001148

0800f1c0 <stdio_exit_handler>:
 800f1c0:	4a02      	ldr	r2, [pc, #8]	@ (800f1cc <stdio_exit_handler+0xc>)
 800f1c2:	4903      	ldr	r1, [pc, #12]	@ (800f1d0 <stdio_exit_handler+0x10>)
 800f1c4:	4803      	ldr	r0, [pc, #12]	@ (800f1d4 <stdio_exit_handler+0x14>)
 800f1c6:	f000 b869 	b.w	800f29c <_fwalk_sglue>
 800f1ca:	bf00      	nop
 800f1cc:	20000020 	.word	0x20000020
 800f1d0:	08010265 	.word	0x08010265
 800f1d4:	20000030 	.word	0x20000030

0800f1d8 <cleanup_stdio>:
 800f1d8:	6841      	ldr	r1, [r0, #4]
 800f1da:	4b0c      	ldr	r3, [pc, #48]	@ (800f20c <cleanup_stdio+0x34>)
 800f1dc:	4299      	cmp	r1, r3
 800f1de:	b510      	push	{r4, lr}
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	d001      	beq.n	800f1e8 <cleanup_stdio+0x10>
 800f1e4:	f001 f83e 	bl	8010264 <_fflush_r>
 800f1e8:	68a1      	ldr	r1, [r4, #8]
 800f1ea:	4b09      	ldr	r3, [pc, #36]	@ (800f210 <cleanup_stdio+0x38>)
 800f1ec:	4299      	cmp	r1, r3
 800f1ee:	d002      	beq.n	800f1f6 <cleanup_stdio+0x1e>
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f001 f837 	bl	8010264 <_fflush_r>
 800f1f6:	68e1      	ldr	r1, [r4, #12]
 800f1f8:	4b06      	ldr	r3, [pc, #24]	@ (800f214 <cleanup_stdio+0x3c>)
 800f1fa:	4299      	cmp	r1, r3
 800f1fc:	d004      	beq.n	800f208 <cleanup_stdio+0x30>
 800f1fe:	4620      	mov	r0, r4
 800f200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f204:	f001 b82e 	b.w	8010264 <_fflush_r>
 800f208:	bd10      	pop	{r4, pc}
 800f20a:	bf00      	nop
 800f20c:	20001148 	.word	0x20001148
 800f210:	200011b0 	.word	0x200011b0
 800f214:	20001218 	.word	0x20001218

0800f218 <global_stdio_init.part.0>:
 800f218:	b510      	push	{r4, lr}
 800f21a:	4b0b      	ldr	r3, [pc, #44]	@ (800f248 <global_stdio_init.part.0+0x30>)
 800f21c:	4c0b      	ldr	r4, [pc, #44]	@ (800f24c <global_stdio_init.part.0+0x34>)
 800f21e:	4a0c      	ldr	r2, [pc, #48]	@ (800f250 <global_stdio_init.part.0+0x38>)
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	4620      	mov	r0, r4
 800f224:	2200      	movs	r2, #0
 800f226:	2104      	movs	r1, #4
 800f228:	f7ff ff94 	bl	800f154 <std>
 800f22c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f230:	2201      	movs	r2, #1
 800f232:	2109      	movs	r1, #9
 800f234:	f7ff ff8e 	bl	800f154 <std>
 800f238:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f23c:	2202      	movs	r2, #2
 800f23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f242:	2112      	movs	r1, #18
 800f244:	f7ff bf86 	b.w	800f154 <std>
 800f248:	20001280 	.word	0x20001280
 800f24c:	20001148 	.word	0x20001148
 800f250:	0800f1c1 	.word	0x0800f1c1

0800f254 <__sfp_lock_acquire>:
 800f254:	4801      	ldr	r0, [pc, #4]	@ (800f25c <__sfp_lock_acquire+0x8>)
 800f256:	f000 bb00 	b.w	800f85a <__retarget_lock_acquire_recursive>
 800f25a:	bf00      	nop
 800f25c:	20001289 	.word	0x20001289

0800f260 <__sfp_lock_release>:
 800f260:	4801      	ldr	r0, [pc, #4]	@ (800f268 <__sfp_lock_release+0x8>)
 800f262:	f000 bafb 	b.w	800f85c <__retarget_lock_release_recursive>
 800f266:	bf00      	nop
 800f268:	20001289 	.word	0x20001289

0800f26c <__sinit>:
 800f26c:	b510      	push	{r4, lr}
 800f26e:	4604      	mov	r4, r0
 800f270:	f7ff fff0 	bl	800f254 <__sfp_lock_acquire>
 800f274:	6a23      	ldr	r3, [r4, #32]
 800f276:	b11b      	cbz	r3, 800f280 <__sinit+0x14>
 800f278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f27c:	f7ff bff0 	b.w	800f260 <__sfp_lock_release>
 800f280:	4b04      	ldr	r3, [pc, #16]	@ (800f294 <__sinit+0x28>)
 800f282:	6223      	str	r3, [r4, #32]
 800f284:	4b04      	ldr	r3, [pc, #16]	@ (800f298 <__sinit+0x2c>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1f5      	bne.n	800f278 <__sinit+0xc>
 800f28c:	f7ff ffc4 	bl	800f218 <global_stdio_init.part.0>
 800f290:	e7f2      	b.n	800f278 <__sinit+0xc>
 800f292:	bf00      	nop
 800f294:	0800f1d9 	.word	0x0800f1d9
 800f298:	20001280 	.word	0x20001280

0800f29c <_fwalk_sglue>:
 800f29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	4688      	mov	r8, r1
 800f2a4:	4614      	mov	r4, r2
 800f2a6:	2600      	movs	r6, #0
 800f2a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2ac:	f1b9 0901 	subs.w	r9, r9, #1
 800f2b0:	d505      	bpl.n	800f2be <_fwalk_sglue+0x22>
 800f2b2:	6824      	ldr	r4, [r4, #0]
 800f2b4:	2c00      	cmp	r4, #0
 800f2b6:	d1f7      	bne.n	800f2a8 <_fwalk_sglue+0xc>
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2be:	89ab      	ldrh	r3, [r5, #12]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d907      	bls.n	800f2d4 <_fwalk_sglue+0x38>
 800f2c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	d003      	beq.n	800f2d4 <_fwalk_sglue+0x38>
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	4638      	mov	r0, r7
 800f2d0:	47c0      	blx	r8
 800f2d2:	4306      	orrs	r6, r0
 800f2d4:	3568      	adds	r5, #104	@ 0x68
 800f2d6:	e7e9      	b.n	800f2ac <_fwalk_sglue+0x10>

0800f2d8 <iprintf>:
 800f2d8:	b40f      	push	{r0, r1, r2, r3}
 800f2da:	b507      	push	{r0, r1, r2, lr}
 800f2dc:	4906      	ldr	r1, [pc, #24]	@ (800f2f8 <iprintf+0x20>)
 800f2de:	ab04      	add	r3, sp, #16
 800f2e0:	6808      	ldr	r0, [r1, #0]
 800f2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2e6:	6881      	ldr	r1, [r0, #8]
 800f2e8:	9301      	str	r3, [sp, #4]
 800f2ea:	f000 fc93 	bl	800fc14 <_vfiprintf_r>
 800f2ee:	b003      	add	sp, #12
 800f2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2f4:	b004      	add	sp, #16
 800f2f6:	4770      	bx	lr
 800f2f8:	2000002c 	.word	0x2000002c

0800f2fc <_puts_r>:
 800f2fc:	6a03      	ldr	r3, [r0, #32]
 800f2fe:	b570      	push	{r4, r5, r6, lr}
 800f300:	6884      	ldr	r4, [r0, #8]
 800f302:	4605      	mov	r5, r0
 800f304:	460e      	mov	r6, r1
 800f306:	b90b      	cbnz	r3, 800f30c <_puts_r+0x10>
 800f308:	f7ff ffb0 	bl	800f26c <__sinit>
 800f30c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f30e:	07db      	lsls	r3, r3, #31
 800f310:	d405      	bmi.n	800f31e <_puts_r+0x22>
 800f312:	89a3      	ldrh	r3, [r4, #12]
 800f314:	0598      	lsls	r0, r3, #22
 800f316:	d402      	bmi.n	800f31e <_puts_r+0x22>
 800f318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f31a:	f000 fa9e 	bl	800f85a <__retarget_lock_acquire_recursive>
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	0719      	lsls	r1, r3, #28
 800f322:	d502      	bpl.n	800f32a <_puts_r+0x2e>
 800f324:	6923      	ldr	r3, [r4, #16]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d135      	bne.n	800f396 <_puts_r+0x9a>
 800f32a:	4621      	mov	r1, r4
 800f32c:	4628      	mov	r0, r5
 800f32e:	f000 f9b5 	bl	800f69c <__swsetup_r>
 800f332:	b380      	cbz	r0, 800f396 <_puts_r+0x9a>
 800f334:	f04f 35ff 	mov.w	r5, #4294967295
 800f338:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f33a:	07da      	lsls	r2, r3, #31
 800f33c:	d405      	bmi.n	800f34a <_puts_r+0x4e>
 800f33e:	89a3      	ldrh	r3, [r4, #12]
 800f340:	059b      	lsls	r3, r3, #22
 800f342:	d402      	bmi.n	800f34a <_puts_r+0x4e>
 800f344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f346:	f000 fa89 	bl	800f85c <__retarget_lock_release_recursive>
 800f34a:	4628      	mov	r0, r5
 800f34c:	bd70      	pop	{r4, r5, r6, pc}
 800f34e:	2b00      	cmp	r3, #0
 800f350:	da04      	bge.n	800f35c <_puts_r+0x60>
 800f352:	69a2      	ldr	r2, [r4, #24]
 800f354:	429a      	cmp	r2, r3
 800f356:	dc17      	bgt.n	800f388 <_puts_r+0x8c>
 800f358:	290a      	cmp	r1, #10
 800f35a:	d015      	beq.n	800f388 <_puts_r+0x8c>
 800f35c:	6823      	ldr	r3, [r4, #0]
 800f35e:	1c5a      	adds	r2, r3, #1
 800f360:	6022      	str	r2, [r4, #0]
 800f362:	7019      	strb	r1, [r3, #0]
 800f364:	68a3      	ldr	r3, [r4, #8]
 800f366:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f36a:	3b01      	subs	r3, #1
 800f36c:	60a3      	str	r3, [r4, #8]
 800f36e:	2900      	cmp	r1, #0
 800f370:	d1ed      	bne.n	800f34e <_puts_r+0x52>
 800f372:	2b00      	cmp	r3, #0
 800f374:	da11      	bge.n	800f39a <_puts_r+0x9e>
 800f376:	4622      	mov	r2, r4
 800f378:	210a      	movs	r1, #10
 800f37a:	4628      	mov	r0, r5
 800f37c:	f000 f950 	bl	800f620 <__swbuf_r>
 800f380:	3001      	adds	r0, #1
 800f382:	d0d7      	beq.n	800f334 <_puts_r+0x38>
 800f384:	250a      	movs	r5, #10
 800f386:	e7d7      	b.n	800f338 <_puts_r+0x3c>
 800f388:	4622      	mov	r2, r4
 800f38a:	4628      	mov	r0, r5
 800f38c:	f000 f948 	bl	800f620 <__swbuf_r>
 800f390:	3001      	adds	r0, #1
 800f392:	d1e7      	bne.n	800f364 <_puts_r+0x68>
 800f394:	e7ce      	b.n	800f334 <_puts_r+0x38>
 800f396:	3e01      	subs	r6, #1
 800f398:	e7e4      	b.n	800f364 <_puts_r+0x68>
 800f39a:	6823      	ldr	r3, [r4, #0]
 800f39c:	1c5a      	adds	r2, r3, #1
 800f39e:	6022      	str	r2, [r4, #0]
 800f3a0:	220a      	movs	r2, #10
 800f3a2:	701a      	strb	r2, [r3, #0]
 800f3a4:	e7ee      	b.n	800f384 <_puts_r+0x88>
	...

0800f3a8 <puts>:
 800f3a8:	4b02      	ldr	r3, [pc, #8]	@ (800f3b4 <puts+0xc>)
 800f3aa:	4601      	mov	r1, r0
 800f3ac:	6818      	ldr	r0, [r3, #0]
 800f3ae:	f7ff bfa5 	b.w	800f2fc <_puts_r>
 800f3b2:	bf00      	nop
 800f3b4:	2000002c 	.word	0x2000002c

0800f3b8 <setvbuf>:
 800f3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3bc:	461d      	mov	r5, r3
 800f3be:	4b57      	ldr	r3, [pc, #348]	@ (800f51c <setvbuf+0x164>)
 800f3c0:	681f      	ldr	r7, [r3, #0]
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	460e      	mov	r6, r1
 800f3c6:	4690      	mov	r8, r2
 800f3c8:	b127      	cbz	r7, 800f3d4 <setvbuf+0x1c>
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	b913      	cbnz	r3, 800f3d4 <setvbuf+0x1c>
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	f7ff ff4c 	bl	800f26c <__sinit>
 800f3d4:	f1b8 0f02 	cmp.w	r8, #2
 800f3d8:	d006      	beq.n	800f3e8 <setvbuf+0x30>
 800f3da:	f1b8 0f01 	cmp.w	r8, #1
 800f3de:	f200 809a 	bhi.w	800f516 <setvbuf+0x15e>
 800f3e2:	2d00      	cmp	r5, #0
 800f3e4:	f2c0 8097 	blt.w	800f516 <setvbuf+0x15e>
 800f3e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3ea:	07d9      	lsls	r1, r3, #31
 800f3ec:	d405      	bmi.n	800f3fa <setvbuf+0x42>
 800f3ee:	89a3      	ldrh	r3, [r4, #12]
 800f3f0:	059a      	lsls	r2, r3, #22
 800f3f2:	d402      	bmi.n	800f3fa <setvbuf+0x42>
 800f3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3f6:	f000 fa30 	bl	800f85a <__retarget_lock_acquire_recursive>
 800f3fa:	4621      	mov	r1, r4
 800f3fc:	4638      	mov	r0, r7
 800f3fe:	f000 ff31 	bl	8010264 <_fflush_r>
 800f402:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f404:	b141      	cbz	r1, 800f418 <setvbuf+0x60>
 800f406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f40a:	4299      	cmp	r1, r3
 800f40c:	d002      	beq.n	800f414 <setvbuf+0x5c>
 800f40e:	4638      	mov	r0, r7
 800f410:	f000 fa34 	bl	800f87c <_free_r>
 800f414:	2300      	movs	r3, #0
 800f416:	6363      	str	r3, [r4, #52]	@ 0x34
 800f418:	2300      	movs	r3, #0
 800f41a:	61a3      	str	r3, [r4, #24]
 800f41c:	6063      	str	r3, [r4, #4]
 800f41e:	89a3      	ldrh	r3, [r4, #12]
 800f420:	061b      	lsls	r3, r3, #24
 800f422:	d503      	bpl.n	800f42c <setvbuf+0x74>
 800f424:	6921      	ldr	r1, [r4, #16]
 800f426:	4638      	mov	r0, r7
 800f428:	f000 fa28 	bl	800f87c <_free_r>
 800f42c:	89a3      	ldrh	r3, [r4, #12]
 800f42e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800f432:	f023 0303 	bic.w	r3, r3, #3
 800f436:	f1b8 0f02 	cmp.w	r8, #2
 800f43a:	81a3      	strh	r3, [r4, #12]
 800f43c:	d061      	beq.n	800f502 <setvbuf+0x14a>
 800f43e:	ab01      	add	r3, sp, #4
 800f440:	466a      	mov	r2, sp
 800f442:	4621      	mov	r1, r4
 800f444:	4638      	mov	r0, r7
 800f446:	f000 ff35 	bl	80102b4 <__swhatbuf_r>
 800f44a:	89a3      	ldrh	r3, [r4, #12]
 800f44c:	4318      	orrs	r0, r3
 800f44e:	81a0      	strh	r0, [r4, #12]
 800f450:	bb2d      	cbnz	r5, 800f49e <setvbuf+0xe6>
 800f452:	9d00      	ldr	r5, [sp, #0]
 800f454:	4628      	mov	r0, r5
 800f456:	f7ff fdbf 	bl	800efd8 <malloc>
 800f45a:	4606      	mov	r6, r0
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d152      	bne.n	800f506 <setvbuf+0x14e>
 800f460:	f8dd 9000 	ldr.w	r9, [sp]
 800f464:	45a9      	cmp	r9, r5
 800f466:	d140      	bne.n	800f4ea <setvbuf+0x132>
 800f468:	f04f 35ff 	mov.w	r5, #4294967295
 800f46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f470:	f043 0202 	orr.w	r2, r3, #2
 800f474:	81a2      	strh	r2, [r4, #12]
 800f476:	2200      	movs	r2, #0
 800f478:	60a2      	str	r2, [r4, #8]
 800f47a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800f47e:	6022      	str	r2, [r4, #0]
 800f480:	6122      	str	r2, [r4, #16]
 800f482:	2201      	movs	r2, #1
 800f484:	6162      	str	r2, [r4, #20]
 800f486:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f488:	07d6      	lsls	r6, r2, #31
 800f48a:	d404      	bmi.n	800f496 <setvbuf+0xde>
 800f48c:	0598      	lsls	r0, r3, #22
 800f48e:	d402      	bmi.n	800f496 <setvbuf+0xde>
 800f490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f492:	f000 f9e3 	bl	800f85c <__retarget_lock_release_recursive>
 800f496:	4628      	mov	r0, r5
 800f498:	b003      	add	sp, #12
 800f49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f49e:	2e00      	cmp	r6, #0
 800f4a0:	d0d8      	beq.n	800f454 <setvbuf+0x9c>
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	b913      	cbnz	r3, 800f4ac <setvbuf+0xf4>
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	f7ff fee0 	bl	800f26c <__sinit>
 800f4ac:	f1b8 0f01 	cmp.w	r8, #1
 800f4b0:	bf08      	it	eq
 800f4b2:	89a3      	ldrheq	r3, [r4, #12]
 800f4b4:	6026      	str	r6, [r4, #0]
 800f4b6:	bf04      	itt	eq
 800f4b8:	f043 0301 	orreq.w	r3, r3, #1
 800f4bc:	81a3      	strheq	r3, [r4, #12]
 800f4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4c2:	f013 0208 	ands.w	r2, r3, #8
 800f4c6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f4ca:	d01e      	beq.n	800f50a <setvbuf+0x152>
 800f4cc:	07d9      	lsls	r1, r3, #31
 800f4ce:	bf41      	itttt	mi
 800f4d0:	2200      	movmi	r2, #0
 800f4d2:	426d      	negmi	r5, r5
 800f4d4:	60a2      	strmi	r2, [r4, #8]
 800f4d6:	61a5      	strmi	r5, [r4, #24]
 800f4d8:	bf58      	it	pl
 800f4da:	60a5      	strpl	r5, [r4, #8]
 800f4dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4de:	07d2      	lsls	r2, r2, #31
 800f4e0:	d401      	bmi.n	800f4e6 <setvbuf+0x12e>
 800f4e2:	059b      	lsls	r3, r3, #22
 800f4e4:	d513      	bpl.n	800f50e <setvbuf+0x156>
 800f4e6:	2500      	movs	r5, #0
 800f4e8:	e7d5      	b.n	800f496 <setvbuf+0xde>
 800f4ea:	4648      	mov	r0, r9
 800f4ec:	f7ff fd74 	bl	800efd8 <malloc>
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d0b8      	beq.n	800f468 <setvbuf+0xb0>
 800f4f6:	89a3      	ldrh	r3, [r4, #12]
 800f4f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4fc:	81a3      	strh	r3, [r4, #12]
 800f4fe:	464d      	mov	r5, r9
 800f500:	e7cf      	b.n	800f4a2 <setvbuf+0xea>
 800f502:	2500      	movs	r5, #0
 800f504:	e7b2      	b.n	800f46c <setvbuf+0xb4>
 800f506:	46a9      	mov	r9, r5
 800f508:	e7f5      	b.n	800f4f6 <setvbuf+0x13e>
 800f50a:	60a2      	str	r2, [r4, #8]
 800f50c:	e7e6      	b.n	800f4dc <setvbuf+0x124>
 800f50e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f510:	f000 f9a4 	bl	800f85c <__retarget_lock_release_recursive>
 800f514:	e7e7      	b.n	800f4e6 <setvbuf+0x12e>
 800f516:	f04f 35ff 	mov.w	r5, #4294967295
 800f51a:	e7bc      	b.n	800f496 <setvbuf+0xde>
 800f51c:	2000002c 	.word	0x2000002c

0800f520 <__sread>:
 800f520:	b510      	push	{r4, lr}
 800f522:	460c      	mov	r4, r1
 800f524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f528:	f000 f938 	bl	800f79c <_read_r>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	bfab      	itete	ge
 800f530:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f532:	89a3      	ldrhlt	r3, [r4, #12]
 800f534:	181b      	addge	r3, r3, r0
 800f536:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f53a:	bfac      	ite	ge
 800f53c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f53e:	81a3      	strhlt	r3, [r4, #12]
 800f540:	bd10      	pop	{r4, pc}

0800f542 <__swrite>:
 800f542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f546:	461f      	mov	r7, r3
 800f548:	898b      	ldrh	r3, [r1, #12]
 800f54a:	05db      	lsls	r3, r3, #23
 800f54c:	4605      	mov	r5, r0
 800f54e:	460c      	mov	r4, r1
 800f550:	4616      	mov	r6, r2
 800f552:	d505      	bpl.n	800f560 <__swrite+0x1e>
 800f554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f558:	2302      	movs	r3, #2
 800f55a:	2200      	movs	r2, #0
 800f55c:	f000 f90c 	bl	800f778 <_lseek_r>
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f566:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f56a:	81a3      	strh	r3, [r4, #12]
 800f56c:	4632      	mov	r2, r6
 800f56e:	463b      	mov	r3, r7
 800f570:	4628      	mov	r0, r5
 800f572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f576:	f000 b933 	b.w	800f7e0 <_write_r>

0800f57a <__sseek>:
 800f57a:	b510      	push	{r4, lr}
 800f57c:	460c      	mov	r4, r1
 800f57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f582:	f000 f8f9 	bl	800f778 <_lseek_r>
 800f586:	1c43      	adds	r3, r0, #1
 800f588:	89a3      	ldrh	r3, [r4, #12]
 800f58a:	bf15      	itete	ne
 800f58c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f58e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f592:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f596:	81a3      	strheq	r3, [r4, #12]
 800f598:	bf18      	it	ne
 800f59a:	81a3      	strhne	r3, [r4, #12]
 800f59c:	bd10      	pop	{r4, pc}

0800f59e <__sclose>:
 800f59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5a2:	f000 b8d9 	b.w	800f758 <_close_r>

0800f5a6 <_vsniprintf_r>:
 800f5a6:	b530      	push	{r4, r5, lr}
 800f5a8:	4614      	mov	r4, r2
 800f5aa:	2c00      	cmp	r4, #0
 800f5ac:	b09b      	sub	sp, #108	@ 0x6c
 800f5ae:	4605      	mov	r5, r0
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	da05      	bge.n	800f5c0 <_vsniprintf_r+0x1a>
 800f5b4:	238b      	movs	r3, #139	@ 0x8b
 800f5b6:	6003      	str	r3, [r0, #0]
 800f5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5bc:	b01b      	add	sp, #108	@ 0x6c
 800f5be:	bd30      	pop	{r4, r5, pc}
 800f5c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f5c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f5c8:	f04f 0300 	mov.w	r3, #0
 800f5cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800f5ce:	bf14      	ite	ne
 800f5d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f5d4:	4623      	moveq	r3, r4
 800f5d6:	9302      	str	r3, [sp, #8]
 800f5d8:	9305      	str	r3, [sp, #20]
 800f5da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f5de:	9100      	str	r1, [sp, #0]
 800f5e0:	9104      	str	r1, [sp, #16]
 800f5e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f5e6:	4669      	mov	r1, sp
 800f5e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f5ea:	f000 f9ed 	bl	800f9c8 <_svfiprintf_r>
 800f5ee:	1c43      	adds	r3, r0, #1
 800f5f0:	bfbc      	itt	lt
 800f5f2:	238b      	movlt	r3, #139	@ 0x8b
 800f5f4:	602b      	strlt	r3, [r5, #0]
 800f5f6:	2c00      	cmp	r4, #0
 800f5f8:	d0e0      	beq.n	800f5bc <_vsniprintf_r+0x16>
 800f5fa:	9b00      	ldr	r3, [sp, #0]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	701a      	strb	r2, [r3, #0]
 800f600:	e7dc      	b.n	800f5bc <_vsniprintf_r+0x16>
	...

0800f604 <vsniprintf>:
 800f604:	b507      	push	{r0, r1, r2, lr}
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	4613      	mov	r3, r2
 800f60a:	460a      	mov	r2, r1
 800f60c:	4601      	mov	r1, r0
 800f60e:	4803      	ldr	r0, [pc, #12]	@ (800f61c <vsniprintf+0x18>)
 800f610:	6800      	ldr	r0, [r0, #0]
 800f612:	f7ff ffc8 	bl	800f5a6 <_vsniprintf_r>
 800f616:	b003      	add	sp, #12
 800f618:	f85d fb04 	ldr.w	pc, [sp], #4
 800f61c:	2000002c 	.word	0x2000002c

0800f620 <__swbuf_r>:
 800f620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f622:	460e      	mov	r6, r1
 800f624:	4614      	mov	r4, r2
 800f626:	4605      	mov	r5, r0
 800f628:	b118      	cbz	r0, 800f632 <__swbuf_r+0x12>
 800f62a:	6a03      	ldr	r3, [r0, #32]
 800f62c:	b90b      	cbnz	r3, 800f632 <__swbuf_r+0x12>
 800f62e:	f7ff fe1d 	bl	800f26c <__sinit>
 800f632:	69a3      	ldr	r3, [r4, #24]
 800f634:	60a3      	str	r3, [r4, #8]
 800f636:	89a3      	ldrh	r3, [r4, #12]
 800f638:	071a      	lsls	r2, r3, #28
 800f63a:	d501      	bpl.n	800f640 <__swbuf_r+0x20>
 800f63c:	6923      	ldr	r3, [r4, #16]
 800f63e:	b943      	cbnz	r3, 800f652 <__swbuf_r+0x32>
 800f640:	4621      	mov	r1, r4
 800f642:	4628      	mov	r0, r5
 800f644:	f000 f82a 	bl	800f69c <__swsetup_r>
 800f648:	b118      	cbz	r0, 800f652 <__swbuf_r+0x32>
 800f64a:	f04f 37ff 	mov.w	r7, #4294967295
 800f64e:	4638      	mov	r0, r7
 800f650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	6922      	ldr	r2, [r4, #16]
 800f656:	1a98      	subs	r0, r3, r2
 800f658:	6963      	ldr	r3, [r4, #20]
 800f65a:	b2f6      	uxtb	r6, r6
 800f65c:	4283      	cmp	r3, r0
 800f65e:	4637      	mov	r7, r6
 800f660:	dc05      	bgt.n	800f66e <__swbuf_r+0x4e>
 800f662:	4621      	mov	r1, r4
 800f664:	4628      	mov	r0, r5
 800f666:	f000 fdfd 	bl	8010264 <_fflush_r>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d1ed      	bne.n	800f64a <__swbuf_r+0x2a>
 800f66e:	68a3      	ldr	r3, [r4, #8]
 800f670:	3b01      	subs	r3, #1
 800f672:	60a3      	str	r3, [r4, #8]
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	1c5a      	adds	r2, r3, #1
 800f678:	6022      	str	r2, [r4, #0]
 800f67a:	701e      	strb	r6, [r3, #0]
 800f67c:	6962      	ldr	r2, [r4, #20]
 800f67e:	1c43      	adds	r3, r0, #1
 800f680:	429a      	cmp	r2, r3
 800f682:	d004      	beq.n	800f68e <__swbuf_r+0x6e>
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	07db      	lsls	r3, r3, #31
 800f688:	d5e1      	bpl.n	800f64e <__swbuf_r+0x2e>
 800f68a:	2e0a      	cmp	r6, #10
 800f68c:	d1df      	bne.n	800f64e <__swbuf_r+0x2e>
 800f68e:	4621      	mov	r1, r4
 800f690:	4628      	mov	r0, r5
 800f692:	f000 fde7 	bl	8010264 <_fflush_r>
 800f696:	2800      	cmp	r0, #0
 800f698:	d0d9      	beq.n	800f64e <__swbuf_r+0x2e>
 800f69a:	e7d6      	b.n	800f64a <__swbuf_r+0x2a>

0800f69c <__swsetup_r>:
 800f69c:	b538      	push	{r3, r4, r5, lr}
 800f69e:	4b29      	ldr	r3, [pc, #164]	@ (800f744 <__swsetup_r+0xa8>)
 800f6a0:	4605      	mov	r5, r0
 800f6a2:	6818      	ldr	r0, [r3, #0]
 800f6a4:	460c      	mov	r4, r1
 800f6a6:	b118      	cbz	r0, 800f6b0 <__swsetup_r+0x14>
 800f6a8:	6a03      	ldr	r3, [r0, #32]
 800f6aa:	b90b      	cbnz	r3, 800f6b0 <__swsetup_r+0x14>
 800f6ac:	f7ff fdde 	bl	800f26c <__sinit>
 800f6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6b4:	0719      	lsls	r1, r3, #28
 800f6b6:	d422      	bmi.n	800f6fe <__swsetup_r+0x62>
 800f6b8:	06da      	lsls	r2, r3, #27
 800f6ba:	d407      	bmi.n	800f6cc <__swsetup_r+0x30>
 800f6bc:	2209      	movs	r2, #9
 800f6be:	602a      	str	r2, [r5, #0]
 800f6c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6c4:	81a3      	strh	r3, [r4, #12]
 800f6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ca:	e033      	b.n	800f734 <__swsetup_r+0x98>
 800f6cc:	0758      	lsls	r0, r3, #29
 800f6ce:	d512      	bpl.n	800f6f6 <__swsetup_r+0x5a>
 800f6d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6d2:	b141      	cbz	r1, 800f6e6 <__swsetup_r+0x4a>
 800f6d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6d8:	4299      	cmp	r1, r3
 800f6da:	d002      	beq.n	800f6e2 <__swsetup_r+0x46>
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f000 f8cd 	bl	800f87c <_free_r>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6e6:	89a3      	ldrh	r3, [r4, #12]
 800f6e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f6ec:	81a3      	strh	r3, [r4, #12]
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	6063      	str	r3, [r4, #4]
 800f6f2:	6923      	ldr	r3, [r4, #16]
 800f6f4:	6023      	str	r3, [r4, #0]
 800f6f6:	89a3      	ldrh	r3, [r4, #12]
 800f6f8:	f043 0308 	orr.w	r3, r3, #8
 800f6fc:	81a3      	strh	r3, [r4, #12]
 800f6fe:	6923      	ldr	r3, [r4, #16]
 800f700:	b94b      	cbnz	r3, 800f716 <__swsetup_r+0x7a>
 800f702:	89a3      	ldrh	r3, [r4, #12]
 800f704:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f70c:	d003      	beq.n	800f716 <__swsetup_r+0x7a>
 800f70e:	4621      	mov	r1, r4
 800f710:	4628      	mov	r0, r5
 800f712:	f000 fdf5 	bl	8010300 <__smakebuf_r>
 800f716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f71a:	f013 0201 	ands.w	r2, r3, #1
 800f71e:	d00a      	beq.n	800f736 <__swsetup_r+0x9a>
 800f720:	2200      	movs	r2, #0
 800f722:	60a2      	str	r2, [r4, #8]
 800f724:	6962      	ldr	r2, [r4, #20]
 800f726:	4252      	negs	r2, r2
 800f728:	61a2      	str	r2, [r4, #24]
 800f72a:	6922      	ldr	r2, [r4, #16]
 800f72c:	b942      	cbnz	r2, 800f740 <__swsetup_r+0xa4>
 800f72e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f732:	d1c5      	bne.n	800f6c0 <__swsetup_r+0x24>
 800f734:	bd38      	pop	{r3, r4, r5, pc}
 800f736:	0799      	lsls	r1, r3, #30
 800f738:	bf58      	it	pl
 800f73a:	6962      	ldrpl	r2, [r4, #20]
 800f73c:	60a2      	str	r2, [r4, #8]
 800f73e:	e7f4      	b.n	800f72a <__swsetup_r+0x8e>
 800f740:	2000      	movs	r0, #0
 800f742:	e7f7      	b.n	800f734 <__swsetup_r+0x98>
 800f744:	2000002c 	.word	0x2000002c

0800f748 <memset>:
 800f748:	4402      	add	r2, r0
 800f74a:	4603      	mov	r3, r0
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d100      	bne.n	800f752 <memset+0xa>
 800f750:	4770      	bx	lr
 800f752:	f803 1b01 	strb.w	r1, [r3], #1
 800f756:	e7f9      	b.n	800f74c <memset+0x4>

0800f758 <_close_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4d06      	ldr	r5, [pc, #24]	@ (800f774 <_close_r+0x1c>)
 800f75c:	2300      	movs	r3, #0
 800f75e:	4604      	mov	r4, r0
 800f760:	4608      	mov	r0, r1
 800f762:	602b      	str	r3, [r5, #0]
 800f764:	f7f6 fcc6 	bl	80060f4 <_close>
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	d102      	bne.n	800f772 <_close_r+0x1a>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	b103      	cbz	r3, 800f772 <_close_r+0x1a>
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	bd38      	pop	{r3, r4, r5, pc}
 800f774:	20001284 	.word	0x20001284

0800f778 <_lseek_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d07      	ldr	r5, [pc, #28]	@ (800f798 <_lseek_r+0x20>)
 800f77c:	4604      	mov	r4, r0
 800f77e:	4608      	mov	r0, r1
 800f780:	4611      	mov	r1, r2
 800f782:	2200      	movs	r2, #0
 800f784:	602a      	str	r2, [r5, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	f7f6 fcdb 	bl	8006142 <_lseek>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d102      	bne.n	800f796 <_lseek_r+0x1e>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	b103      	cbz	r3, 800f796 <_lseek_r+0x1e>
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	bd38      	pop	{r3, r4, r5, pc}
 800f798:	20001284 	.word	0x20001284

0800f79c <_read_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4d07      	ldr	r5, [pc, #28]	@ (800f7bc <_read_r+0x20>)
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	4608      	mov	r0, r1
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	602a      	str	r2, [r5, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	f7f6 fc85 	bl	80060ba <_read>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	d102      	bne.n	800f7ba <_read_r+0x1e>
 800f7b4:	682b      	ldr	r3, [r5, #0]
 800f7b6:	b103      	cbz	r3, 800f7ba <_read_r+0x1e>
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	bd38      	pop	{r3, r4, r5, pc}
 800f7bc:	20001284 	.word	0x20001284

0800f7c0 <_sbrk_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4d06      	ldr	r5, [pc, #24]	@ (800f7dc <_sbrk_r+0x1c>)
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	4608      	mov	r0, r1
 800f7ca:	602b      	str	r3, [r5, #0]
 800f7cc:	f7f6 fcc6 	bl	800615c <_sbrk>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	d102      	bne.n	800f7da <_sbrk_r+0x1a>
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	b103      	cbz	r3, 800f7da <_sbrk_r+0x1a>
 800f7d8:	6023      	str	r3, [r4, #0]
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
 800f7dc:	20001284 	.word	0x20001284

0800f7e0 <_write_r>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4d07      	ldr	r5, [pc, #28]	@ (800f800 <_write_r+0x20>)
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	4611      	mov	r1, r2
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	602a      	str	r2, [r5, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f7f2 fed0 	bl	8002594 <_write>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_write_r+0x1e>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_write_r+0x1e>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	20001284 	.word	0x20001284

0800f804 <__errno>:
 800f804:	4b01      	ldr	r3, [pc, #4]	@ (800f80c <__errno+0x8>)
 800f806:	6818      	ldr	r0, [r3, #0]
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	2000002c 	.word	0x2000002c

0800f810 <__libc_init_array>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	4d0d      	ldr	r5, [pc, #52]	@ (800f848 <__libc_init_array+0x38>)
 800f814:	4c0d      	ldr	r4, [pc, #52]	@ (800f84c <__libc_init_array+0x3c>)
 800f816:	1b64      	subs	r4, r4, r5
 800f818:	10a4      	asrs	r4, r4, #2
 800f81a:	2600      	movs	r6, #0
 800f81c:	42a6      	cmp	r6, r4
 800f81e:	d109      	bne.n	800f834 <__libc_init_array+0x24>
 800f820:	4d0b      	ldr	r5, [pc, #44]	@ (800f850 <__libc_init_array+0x40>)
 800f822:	4c0c      	ldr	r4, [pc, #48]	@ (800f854 <__libc_init_array+0x44>)
 800f824:	f000 fe1a 	bl	801045c <_init>
 800f828:	1b64      	subs	r4, r4, r5
 800f82a:	10a4      	asrs	r4, r4, #2
 800f82c:	2600      	movs	r6, #0
 800f82e:	42a6      	cmp	r6, r4
 800f830:	d105      	bne.n	800f83e <__libc_init_array+0x2e>
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	f855 3b04 	ldr.w	r3, [r5], #4
 800f838:	4798      	blx	r3
 800f83a:	3601      	adds	r6, #1
 800f83c:	e7ee      	b.n	800f81c <__libc_init_array+0xc>
 800f83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f842:	4798      	blx	r3
 800f844:	3601      	adds	r6, #1
 800f846:	e7f2      	b.n	800f82e <__libc_init_array+0x1e>
 800f848:	08010ddc 	.word	0x08010ddc
 800f84c:	08010ddc 	.word	0x08010ddc
 800f850:	08010ddc 	.word	0x08010ddc
 800f854:	08010de0 	.word	0x08010de0

0800f858 <__retarget_lock_init_recursive>:
 800f858:	4770      	bx	lr

0800f85a <__retarget_lock_acquire_recursive>:
 800f85a:	4770      	bx	lr

0800f85c <__retarget_lock_release_recursive>:
 800f85c:	4770      	bx	lr

0800f85e <memcpy>:
 800f85e:	440a      	add	r2, r1
 800f860:	4291      	cmp	r1, r2
 800f862:	f100 33ff 	add.w	r3, r0, #4294967295
 800f866:	d100      	bne.n	800f86a <memcpy+0xc>
 800f868:	4770      	bx	lr
 800f86a:	b510      	push	{r4, lr}
 800f86c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f870:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f874:	4291      	cmp	r1, r2
 800f876:	d1f9      	bne.n	800f86c <memcpy+0xe>
 800f878:	bd10      	pop	{r4, pc}
	...

0800f87c <_free_r>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	4605      	mov	r5, r0
 800f880:	2900      	cmp	r1, #0
 800f882:	d041      	beq.n	800f908 <_free_r+0x8c>
 800f884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f888:	1f0c      	subs	r4, r1, #4
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	bfb8      	it	lt
 800f88e:	18e4      	addlt	r4, r4, r3
 800f890:	f7ff fc54 	bl	800f13c <__malloc_lock>
 800f894:	4a1d      	ldr	r2, [pc, #116]	@ (800f90c <_free_r+0x90>)
 800f896:	6813      	ldr	r3, [r2, #0]
 800f898:	b933      	cbnz	r3, 800f8a8 <_free_r+0x2c>
 800f89a:	6063      	str	r3, [r4, #4]
 800f89c:	6014      	str	r4, [r2, #0]
 800f89e:	4628      	mov	r0, r5
 800f8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8a4:	f7ff bc50 	b.w	800f148 <__malloc_unlock>
 800f8a8:	42a3      	cmp	r3, r4
 800f8aa:	d908      	bls.n	800f8be <_free_r+0x42>
 800f8ac:	6820      	ldr	r0, [r4, #0]
 800f8ae:	1821      	adds	r1, r4, r0
 800f8b0:	428b      	cmp	r3, r1
 800f8b2:	bf01      	itttt	eq
 800f8b4:	6819      	ldreq	r1, [r3, #0]
 800f8b6:	685b      	ldreq	r3, [r3, #4]
 800f8b8:	1809      	addeq	r1, r1, r0
 800f8ba:	6021      	streq	r1, [r4, #0]
 800f8bc:	e7ed      	b.n	800f89a <_free_r+0x1e>
 800f8be:	461a      	mov	r2, r3
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	b10b      	cbz	r3, 800f8c8 <_free_r+0x4c>
 800f8c4:	42a3      	cmp	r3, r4
 800f8c6:	d9fa      	bls.n	800f8be <_free_r+0x42>
 800f8c8:	6811      	ldr	r1, [r2, #0]
 800f8ca:	1850      	adds	r0, r2, r1
 800f8cc:	42a0      	cmp	r0, r4
 800f8ce:	d10b      	bne.n	800f8e8 <_free_r+0x6c>
 800f8d0:	6820      	ldr	r0, [r4, #0]
 800f8d2:	4401      	add	r1, r0
 800f8d4:	1850      	adds	r0, r2, r1
 800f8d6:	4283      	cmp	r3, r0
 800f8d8:	6011      	str	r1, [r2, #0]
 800f8da:	d1e0      	bne.n	800f89e <_free_r+0x22>
 800f8dc:	6818      	ldr	r0, [r3, #0]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	6053      	str	r3, [r2, #4]
 800f8e2:	4408      	add	r0, r1
 800f8e4:	6010      	str	r0, [r2, #0]
 800f8e6:	e7da      	b.n	800f89e <_free_r+0x22>
 800f8e8:	d902      	bls.n	800f8f0 <_free_r+0x74>
 800f8ea:	230c      	movs	r3, #12
 800f8ec:	602b      	str	r3, [r5, #0]
 800f8ee:	e7d6      	b.n	800f89e <_free_r+0x22>
 800f8f0:	6820      	ldr	r0, [r4, #0]
 800f8f2:	1821      	adds	r1, r4, r0
 800f8f4:	428b      	cmp	r3, r1
 800f8f6:	bf04      	itt	eq
 800f8f8:	6819      	ldreq	r1, [r3, #0]
 800f8fa:	685b      	ldreq	r3, [r3, #4]
 800f8fc:	6063      	str	r3, [r4, #4]
 800f8fe:	bf04      	itt	eq
 800f900:	1809      	addeq	r1, r1, r0
 800f902:	6021      	streq	r1, [r4, #0]
 800f904:	6054      	str	r4, [r2, #4]
 800f906:	e7ca      	b.n	800f89e <_free_r+0x22>
 800f908:	bd38      	pop	{r3, r4, r5, pc}
 800f90a:	bf00      	nop
 800f90c:	20001144 	.word	0x20001144

0800f910 <__ssputs_r>:
 800f910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f914:	688e      	ldr	r6, [r1, #8]
 800f916:	461f      	mov	r7, r3
 800f918:	42be      	cmp	r6, r7
 800f91a:	680b      	ldr	r3, [r1, #0]
 800f91c:	4682      	mov	sl, r0
 800f91e:	460c      	mov	r4, r1
 800f920:	4690      	mov	r8, r2
 800f922:	d82d      	bhi.n	800f980 <__ssputs_r+0x70>
 800f924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f928:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f92c:	d026      	beq.n	800f97c <__ssputs_r+0x6c>
 800f92e:	6965      	ldr	r5, [r4, #20]
 800f930:	6909      	ldr	r1, [r1, #16]
 800f932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f936:	eba3 0901 	sub.w	r9, r3, r1
 800f93a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f93e:	1c7b      	adds	r3, r7, #1
 800f940:	444b      	add	r3, r9
 800f942:	106d      	asrs	r5, r5, #1
 800f944:	429d      	cmp	r5, r3
 800f946:	bf38      	it	cc
 800f948:	461d      	movcc	r5, r3
 800f94a:	0553      	lsls	r3, r2, #21
 800f94c:	d527      	bpl.n	800f99e <__ssputs_r+0x8e>
 800f94e:	4629      	mov	r1, r5
 800f950:	f7ff fb74 	bl	800f03c <_malloc_r>
 800f954:	4606      	mov	r6, r0
 800f956:	b360      	cbz	r0, 800f9b2 <__ssputs_r+0xa2>
 800f958:	6921      	ldr	r1, [r4, #16]
 800f95a:	464a      	mov	r2, r9
 800f95c:	f7ff ff7f 	bl	800f85e <memcpy>
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f96a:	81a3      	strh	r3, [r4, #12]
 800f96c:	6126      	str	r6, [r4, #16]
 800f96e:	6165      	str	r5, [r4, #20]
 800f970:	444e      	add	r6, r9
 800f972:	eba5 0509 	sub.w	r5, r5, r9
 800f976:	6026      	str	r6, [r4, #0]
 800f978:	60a5      	str	r5, [r4, #8]
 800f97a:	463e      	mov	r6, r7
 800f97c:	42be      	cmp	r6, r7
 800f97e:	d900      	bls.n	800f982 <__ssputs_r+0x72>
 800f980:	463e      	mov	r6, r7
 800f982:	6820      	ldr	r0, [r4, #0]
 800f984:	4632      	mov	r2, r6
 800f986:	4641      	mov	r1, r8
 800f988:	f000 fcf6 	bl	8010378 <memmove>
 800f98c:	68a3      	ldr	r3, [r4, #8]
 800f98e:	1b9b      	subs	r3, r3, r6
 800f990:	60a3      	str	r3, [r4, #8]
 800f992:	6823      	ldr	r3, [r4, #0]
 800f994:	4433      	add	r3, r6
 800f996:	6023      	str	r3, [r4, #0]
 800f998:	2000      	movs	r0, #0
 800f99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99e:	462a      	mov	r2, r5
 800f9a0:	f000 fd26 	bl	80103f0 <_realloc_r>
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d1e0      	bne.n	800f96c <__ssputs_r+0x5c>
 800f9aa:	6921      	ldr	r1, [r4, #16]
 800f9ac:	4650      	mov	r0, sl
 800f9ae:	f7ff ff65 	bl	800f87c <_free_r>
 800f9b2:	230c      	movs	r3, #12
 800f9b4:	f8ca 3000 	str.w	r3, [sl]
 800f9b8:	89a3      	ldrh	r3, [r4, #12]
 800f9ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9be:	81a3      	strh	r3, [r4, #12]
 800f9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c4:	e7e9      	b.n	800f99a <__ssputs_r+0x8a>
	...

0800f9c8 <_svfiprintf_r>:
 800f9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9cc:	4698      	mov	r8, r3
 800f9ce:	898b      	ldrh	r3, [r1, #12]
 800f9d0:	061b      	lsls	r3, r3, #24
 800f9d2:	b09d      	sub	sp, #116	@ 0x74
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	460d      	mov	r5, r1
 800f9d8:	4614      	mov	r4, r2
 800f9da:	d510      	bpl.n	800f9fe <_svfiprintf_r+0x36>
 800f9dc:	690b      	ldr	r3, [r1, #16]
 800f9de:	b973      	cbnz	r3, 800f9fe <_svfiprintf_r+0x36>
 800f9e0:	2140      	movs	r1, #64	@ 0x40
 800f9e2:	f7ff fb2b 	bl	800f03c <_malloc_r>
 800f9e6:	6028      	str	r0, [r5, #0]
 800f9e8:	6128      	str	r0, [r5, #16]
 800f9ea:	b930      	cbnz	r0, 800f9fa <_svfiprintf_r+0x32>
 800f9ec:	230c      	movs	r3, #12
 800f9ee:	603b      	str	r3, [r7, #0]
 800f9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f4:	b01d      	add	sp, #116	@ 0x74
 800f9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fa:	2340      	movs	r3, #64	@ 0x40
 800f9fc:	616b      	str	r3, [r5, #20]
 800f9fe:	2300      	movs	r3, #0
 800fa00:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa02:	2320      	movs	r3, #32
 800fa04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa08:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa0c:	2330      	movs	r3, #48	@ 0x30
 800fa0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fbac <_svfiprintf_r+0x1e4>
 800fa12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa16:	f04f 0901 	mov.w	r9, #1
 800fa1a:	4623      	mov	r3, r4
 800fa1c:	469a      	mov	sl, r3
 800fa1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa22:	b10a      	cbz	r2, 800fa28 <_svfiprintf_r+0x60>
 800fa24:	2a25      	cmp	r2, #37	@ 0x25
 800fa26:	d1f9      	bne.n	800fa1c <_svfiprintf_r+0x54>
 800fa28:	ebba 0b04 	subs.w	fp, sl, r4
 800fa2c:	d00b      	beq.n	800fa46 <_svfiprintf_r+0x7e>
 800fa2e:	465b      	mov	r3, fp
 800fa30:	4622      	mov	r2, r4
 800fa32:	4629      	mov	r1, r5
 800fa34:	4638      	mov	r0, r7
 800fa36:	f7ff ff6b 	bl	800f910 <__ssputs_r>
 800fa3a:	3001      	adds	r0, #1
 800fa3c:	f000 80a7 	beq.w	800fb8e <_svfiprintf_r+0x1c6>
 800fa40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa42:	445a      	add	r2, fp
 800fa44:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa46:	f89a 3000 	ldrb.w	r3, [sl]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	f000 809f 	beq.w	800fb8e <_svfiprintf_r+0x1c6>
 800fa50:	2300      	movs	r3, #0
 800fa52:	f04f 32ff 	mov.w	r2, #4294967295
 800fa56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa5a:	f10a 0a01 	add.w	sl, sl, #1
 800fa5e:	9304      	str	r3, [sp, #16]
 800fa60:	9307      	str	r3, [sp, #28]
 800fa62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa66:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa68:	4654      	mov	r4, sl
 800fa6a:	2205      	movs	r2, #5
 800fa6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa70:	484e      	ldr	r0, [pc, #312]	@ (800fbac <_svfiprintf_r+0x1e4>)
 800fa72:	f7f0 fbad 	bl	80001d0 <memchr>
 800fa76:	9a04      	ldr	r2, [sp, #16]
 800fa78:	b9d8      	cbnz	r0, 800fab2 <_svfiprintf_r+0xea>
 800fa7a:	06d0      	lsls	r0, r2, #27
 800fa7c:	bf44      	itt	mi
 800fa7e:	2320      	movmi	r3, #32
 800fa80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa84:	0711      	lsls	r1, r2, #28
 800fa86:	bf44      	itt	mi
 800fa88:	232b      	movmi	r3, #43	@ 0x2b
 800fa8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa8e:	f89a 3000 	ldrb.w	r3, [sl]
 800fa92:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa94:	d015      	beq.n	800fac2 <_svfiprintf_r+0xfa>
 800fa96:	9a07      	ldr	r2, [sp, #28]
 800fa98:	4654      	mov	r4, sl
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	f04f 0c0a 	mov.w	ip, #10
 800faa0:	4621      	mov	r1, r4
 800faa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faa6:	3b30      	subs	r3, #48	@ 0x30
 800faa8:	2b09      	cmp	r3, #9
 800faaa:	d94b      	bls.n	800fb44 <_svfiprintf_r+0x17c>
 800faac:	b1b0      	cbz	r0, 800fadc <_svfiprintf_r+0x114>
 800faae:	9207      	str	r2, [sp, #28]
 800fab0:	e014      	b.n	800fadc <_svfiprintf_r+0x114>
 800fab2:	eba0 0308 	sub.w	r3, r0, r8
 800fab6:	fa09 f303 	lsl.w	r3, r9, r3
 800faba:	4313      	orrs	r3, r2
 800fabc:	9304      	str	r3, [sp, #16]
 800fabe:	46a2      	mov	sl, r4
 800fac0:	e7d2      	b.n	800fa68 <_svfiprintf_r+0xa0>
 800fac2:	9b03      	ldr	r3, [sp, #12]
 800fac4:	1d19      	adds	r1, r3, #4
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	9103      	str	r1, [sp, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	bfbb      	ittet	lt
 800face:	425b      	neglt	r3, r3
 800fad0:	f042 0202 	orrlt.w	r2, r2, #2
 800fad4:	9307      	strge	r3, [sp, #28]
 800fad6:	9307      	strlt	r3, [sp, #28]
 800fad8:	bfb8      	it	lt
 800fada:	9204      	strlt	r2, [sp, #16]
 800fadc:	7823      	ldrb	r3, [r4, #0]
 800fade:	2b2e      	cmp	r3, #46	@ 0x2e
 800fae0:	d10a      	bne.n	800faf8 <_svfiprintf_r+0x130>
 800fae2:	7863      	ldrb	r3, [r4, #1]
 800fae4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fae6:	d132      	bne.n	800fb4e <_svfiprintf_r+0x186>
 800fae8:	9b03      	ldr	r3, [sp, #12]
 800faea:	1d1a      	adds	r2, r3, #4
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	9203      	str	r2, [sp, #12]
 800faf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800faf4:	3402      	adds	r4, #2
 800faf6:	9305      	str	r3, [sp, #20]
 800faf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fbbc <_svfiprintf_r+0x1f4>
 800fafc:	7821      	ldrb	r1, [r4, #0]
 800fafe:	2203      	movs	r2, #3
 800fb00:	4650      	mov	r0, sl
 800fb02:	f7f0 fb65 	bl	80001d0 <memchr>
 800fb06:	b138      	cbz	r0, 800fb18 <_svfiprintf_r+0x150>
 800fb08:	9b04      	ldr	r3, [sp, #16]
 800fb0a:	eba0 000a 	sub.w	r0, r0, sl
 800fb0e:	2240      	movs	r2, #64	@ 0x40
 800fb10:	4082      	lsls	r2, r0
 800fb12:	4313      	orrs	r3, r2
 800fb14:	3401      	adds	r4, #1
 800fb16:	9304      	str	r3, [sp, #16]
 800fb18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb1c:	4824      	ldr	r0, [pc, #144]	@ (800fbb0 <_svfiprintf_r+0x1e8>)
 800fb1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb22:	2206      	movs	r2, #6
 800fb24:	f7f0 fb54 	bl	80001d0 <memchr>
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	d036      	beq.n	800fb9a <_svfiprintf_r+0x1d2>
 800fb2c:	4b21      	ldr	r3, [pc, #132]	@ (800fbb4 <_svfiprintf_r+0x1ec>)
 800fb2e:	bb1b      	cbnz	r3, 800fb78 <_svfiprintf_r+0x1b0>
 800fb30:	9b03      	ldr	r3, [sp, #12]
 800fb32:	3307      	adds	r3, #7
 800fb34:	f023 0307 	bic.w	r3, r3, #7
 800fb38:	3308      	adds	r3, #8
 800fb3a:	9303      	str	r3, [sp, #12]
 800fb3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb3e:	4433      	add	r3, r6
 800fb40:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb42:	e76a      	b.n	800fa1a <_svfiprintf_r+0x52>
 800fb44:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb48:	460c      	mov	r4, r1
 800fb4a:	2001      	movs	r0, #1
 800fb4c:	e7a8      	b.n	800faa0 <_svfiprintf_r+0xd8>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	3401      	adds	r4, #1
 800fb52:	9305      	str	r3, [sp, #20]
 800fb54:	4619      	mov	r1, r3
 800fb56:	f04f 0c0a 	mov.w	ip, #10
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb60:	3a30      	subs	r2, #48	@ 0x30
 800fb62:	2a09      	cmp	r2, #9
 800fb64:	d903      	bls.n	800fb6e <_svfiprintf_r+0x1a6>
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d0c6      	beq.n	800faf8 <_svfiprintf_r+0x130>
 800fb6a:	9105      	str	r1, [sp, #20]
 800fb6c:	e7c4      	b.n	800faf8 <_svfiprintf_r+0x130>
 800fb6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb72:	4604      	mov	r4, r0
 800fb74:	2301      	movs	r3, #1
 800fb76:	e7f0      	b.n	800fb5a <_svfiprintf_r+0x192>
 800fb78:	ab03      	add	r3, sp, #12
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	462a      	mov	r2, r5
 800fb7e:	4b0e      	ldr	r3, [pc, #56]	@ (800fbb8 <_svfiprintf_r+0x1f0>)
 800fb80:	a904      	add	r1, sp, #16
 800fb82:	4638      	mov	r0, r7
 800fb84:	f3af 8000 	nop.w
 800fb88:	1c42      	adds	r2, r0, #1
 800fb8a:	4606      	mov	r6, r0
 800fb8c:	d1d6      	bne.n	800fb3c <_svfiprintf_r+0x174>
 800fb8e:	89ab      	ldrh	r3, [r5, #12]
 800fb90:	065b      	lsls	r3, r3, #25
 800fb92:	f53f af2d 	bmi.w	800f9f0 <_svfiprintf_r+0x28>
 800fb96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb98:	e72c      	b.n	800f9f4 <_svfiprintf_r+0x2c>
 800fb9a:	ab03      	add	r3, sp, #12
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	462a      	mov	r2, r5
 800fba0:	4b05      	ldr	r3, [pc, #20]	@ (800fbb8 <_svfiprintf_r+0x1f0>)
 800fba2:	a904      	add	r1, sp, #16
 800fba4:	4638      	mov	r0, r7
 800fba6:	f000 f9bb 	bl	800ff20 <_printf_i>
 800fbaa:	e7ed      	b.n	800fb88 <_svfiprintf_r+0x1c0>
 800fbac:	08010da0 	.word	0x08010da0
 800fbb0:	08010daa 	.word	0x08010daa
 800fbb4:	00000000 	.word	0x00000000
 800fbb8:	0800f911 	.word	0x0800f911
 800fbbc:	08010da6 	.word	0x08010da6

0800fbc0 <__sfputc_r>:
 800fbc0:	6893      	ldr	r3, [r2, #8]
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	b410      	push	{r4}
 800fbc8:	6093      	str	r3, [r2, #8]
 800fbca:	da08      	bge.n	800fbde <__sfputc_r+0x1e>
 800fbcc:	6994      	ldr	r4, [r2, #24]
 800fbce:	42a3      	cmp	r3, r4
 800fbd0:	db01      	blt.n	800fbd6 <__sfputc_r+0x16>
 800fbd2:	290a      	cmp	r1, #10
 800fbd4:	d103      	bne.n	800fbde <__sfputc_r+0x1e>
 800fbd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbda:	f7ff bd21 	b.w	800f620 <__swbuf_r>
 800fbde:	6813      	ldr	r3, [r2, #0]
 800fbe0:	1c58      	adds	r0, r3, #1
 800fbe2:	6010      	str	r0, [r2, #0]
 800fbe4:	7019      	strb	r1, [r3, #0]
 800fbe6:	4608      	mov	r0, r1
 800fbe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbec:	4770      	bx	lr

0800fbee <__sfputs_r>:
 800fbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbf0:	4606      	mov	r6, r0
 800fbf2:	460f      	mov	r7, r1
 800fbf4:	4614      	mov	r4, r2
 800fbf6:	18d5      	adds	r5, r2, r3
 800fbf8:	42ac      	cmp	r4, r5
 800fbfa:	d101      	bne.n	800fc00 <__sfputs_r+0x12>
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	e007      	b.n	800fc10 <__sfputs_r+0x22>
 800fc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc04:	463a      	mov	r2, r7
 800fc06:	4630      	mov	r0, r6
 800fc08:	f7ff ffda 	bl	800fbc0 <__sfputc_r>
 800fc0c:	1c43      	adds	r3, r0, #1
 800fc0e:	d1f3      	bne.n	800fbf8 <__sfputs_r+0xa>
 800fc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc14 <_vfiprintf_r>:
 800fc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc18:	460d      	mov	r5, r1
 800fc1a:	b09d      	sub	sp, #116	@ 0x74
 800fc1c:	4614      	mov	r4, r2
 800fc1e:	4698      	mov	r8, r3
 800fc20:	4606      	mov	r6, r0
 800fc22:	b118      	cbz	r0, 800fc2c <_vfiprintf_r+0x18>
 800fc24:	6a03      	ldr	r3, [r0, #32]
 800fc26:	b90b      	cbnz	r3, 800fc2c <_vfiprintf_r+0x18>
 800fc28:	f7ff fb20 	bl	800f26c <__sinit>
 800fc2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc2e:	07d9      	lsls	r1, r3, #31
 800fc30:	d405      	bmi.n	800fc3e <_vfiprintf_r+0x2a>
 800fc32:	89ab      	ldrh	r3, [r5, #12]
 800fc34:	059a      	lsls	r2, r3, #22
 800fc36:	d402      	bmi.n	800fc3e <_vfiprintf_r+0x2a>
 800fc38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc3a:	f7ff fe0e 	bl	800f85a <__retarget_lock_acquire_recursive>
 800fc3e:	89ab      	ldrh	r3, [r5, #12]
 800fc40:	071b      	lsls	r3, r3, #28
 800fc42:	d501      	bpl.n	800fc48 <_vfiprintf_r+0x34>
 800fc44:	692b      	ldr	r3, [r5, #16]
 800fc46:	b99b      	cbnz	r3, 800fc70 <_vfiprintf_r+0x5c>
 800fc48:	4629      	mov	r1, r5
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f7ff fd26 	bl	800f69c <__swsetup_r>
 800fc50:	b170      	cbz	r0, 800fc70 <_vfiprintf_r+0x5c>
 800fc52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc54:	07dc      	lsls	r4, r3, #31
 800fc56:	d504      	bpl.n	800fc62 <_vfiprintf_r+0x4e>
 800fc58:	f04f 30ff 	mov.w	r0, #4294967295
 800fc5c:	b01d      	add	sp, #116	@ 0x74
 800fc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc62:	89ab      	ldrh	r3, [r5, #12]
 800fc64:	0598      	lsls	r0, r3, #22
 800fc66:	d4f7      	bmi.n	800fc58 <_vfiprintf_r+0x44>
 800fc68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc6a:	f7ff fdf7 	bl	800f85c <__retarget_lock_release_recursive>
 800fc6e:	e7f3      	b.n	800fc58 <_vfiprintf_r+0x44>
 800fc70:	2300      	movs	r3, #0
 800fc72:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc74:	2320      	movs	r3, #32
 800fc76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc7e:	2330      	movs	r3, #48	@ 0x30
 800fc80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fe30 <_vfiprintf_r+0x21c>
 800fc84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc88:	f04f 0901 	mov.w	r9, #1
 800fc8c:	4623      	mov	r3, r4
 800fc8e:	469a      	mov	sl, r3
 800fc90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc94:	b10a      	cbz	r2, 800fc9a <_vfiprintf_r+0x86>
 800fc96:	2a25      	cmp	r2, #37	@ 0x25
 800fc98:	d1f9      	bne.n	800fc8e <_vfiprintf_r+0x7a>
 800fc9a:	ebba 0b04 	subs.w	fp, sl, r4
 800fc9e:	d00b      	beq.n	800fcb8 <_vfiprintf_r+0xa4>
 800fca0:	465b      	mov	r3, fp
 800fca2:	4622      	mov	r2, r4
 800fca4:	4629      	mov	r1, r5
 800fca6:	4630      	mov	r0, r6
 800fca8:	f7ff ffa1 	bl	800fbee <__sfputs_r>
 800fcac:	3001      	adds	r0, #1
 800fcae:	f000 80a7 	beq.w	800fe00 <_vfiprintf_r+0x1ec>
 800fcb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fcb4:	445a      	add	r2, fp
 800fcb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f000 809f 	beq.w	800fe00 <_vfiprintf_r+0x1ec>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800fcc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fccc:	f10a 0a01 	add.w	sl, sl, #1
 800fcd0:	9304      	str	r3, [sp, #16]
 800fcd2:	9307      	str	r3, [sp, #28]
 800fcd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fcd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800fcda:	4654      	mov	r4, sl
 800fcdc:	2205      	movs	r2, #5
 800fcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fce2:	4853      	ldr	r0, [pc, #332]	@ (800fe30 <_vfiprintf_r+0x21c>)
 800fce4:	f7f0 fa74 	bl	80001d0 <memchr>
 800fce8:	9a04      	ldr	r2, [sp, #16]
 800fcea:	b9d8      	cbnz	r0, 800fd24 <_vfiprintf_r+0x110>
 800fcec:	06d1      	lsls	r1, r2, #27
 800fcee:	bf44      	itt	mi
 800fcf0:	2320      	movmi	r3, #32
 800fcf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcf6:	0713      	lsls	r3, r2, #28
 800fcf8:	bf44      	itt	mi
 800fcfa:	232b      	movmi	r3, #43	@ 0x2b
 800fcfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd00:	f89a 3000 	ldrb.w	r3, [sl]
 800fd04:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd06:	d015      	beq.n	800fd34 <_vfiprintf_r+0x120>
 800fd08:	9a07      	ldr	r2, [sp, #28]
 800fd0a:	4654      	mov	r4, sl
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	f04f 0c0a 	mov.w	ip, #10
 800fd12:	4621      	mov	r1, r4
 800fd14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd18:	3b30      	subs	r3, #48	@ 0x30
 800fd1a:	2b09      	cmp	r3, #9
 800fd1c:	d94b      	bls.n	800fdb6 <_vfiprintf_r+0x1a2>
 800fd1e:	b1b0      	cbz	r0, 800fd4e <_vfiprintf_r+0x13a>
 800fd20:	9207      	str	r2, [sp, #28]
 800fd22:	e014      	b.n	800fd4e <_vfiprintf_r+0x13a>
 800fd24:	eba0 0308 	sub.w	r3, r0, r8
 800fd28:	fa09 f303 	lsl.w	r3, r9, r3
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	9304      	str	r3, [sp, #16]
 800fd30:	46a2      	mov	sl, r4
 800fd32:	e7d2      	b.n	800fcda <_vfiprintf_r+0xc6>
 800fd34:	9b03      	ldr	r3, [sp, #12]
 800fd36:	1d19      	adds	r1, r3, #4
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	9103      	str	r1, [sp, #12]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	bfbb      	ittet	lt
 800fd40:	425b      	neglt	r3, r3
 800fd42:	f042 0202 	orrlt.w	r2, r2, #2
 800fd46:	9307      	strge	r3, [sp, #28]
 800fd48:	9307      	strlt	r3, [sp, #28]
 800fd4a:	bfb8      	it	lt
 800fd4c:	9204      	strlt	r2, [sp, #16]
 800fd4e:	7823      	ldrb	r3, [r4, #0]
 800fd50:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd52:	d10a      	bne.n	800fd6a <_vfiprintf_r+0x156>
 800fd54:	7863      	ldrb	r3, [r4, #1]
 800fd56:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd58:	d132      	bne.n	800fdc0 <_vfiprintf_r+0x1ac>
 800fd5a:	9b03      	ldr	r3, [sp, #12]
 800fd5c:	1d1a      	adds	r2, r3, #4
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	9203      	str	r2, [sp, #12]
 800fd62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd66:	3402      	adds	r4, #2
 800fd68:	9305      	str	r3, [sp, #20]
 800fd6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fe40 <_vfiprintf_r+0x22c>
 800fd6e:	7821      	ldrb	r1, [r4, #0]
 800fd70:	2203      	movs	r2, #3
 800fd72:	4650      	mov	r0, sl
 800fd74:	f7f0 fa2c 	bl	80001d0 <memchr>
 800fd78:	b138      	cbz	r0, 800fd8a <_vfiprintf_r+0x176>
 800fd7a:	9b04      	ldr	r3, [sp, #16]
 800fd7c:	eba0 000a 	sub.w	r0, r0, sl
 800fd80:	2240      	movs	r2, #64	@ 0x40
 800fd82:	4082      	lsls	r2, r0
 800fd84:	4313      	orrs	r3, r2
 800fd86:	3401      	adds	r4, #1
 800fd88:	9304      	str	r3, [sp, #16]
 800fd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd8e:	4829      	ldr	r0, [pc, #164]	@ (800fe34 <_vfiprintf_r+0x220>)
 800fd90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd94:	2206      	movs	r2, #6
 800fd96:	f7f0 fa1b 	bl	80001d0 <memchr>
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d03f      	beq.n	800fe1e <_vfiprintf_r+0x20a>
 800fd9e:	4b26      	ldr	r3, [pc, #152]	@ (800fe38 <_vfiprintf_r+0x224>)
 800fda0:	bb1b      	cbnz	r3, 800fdea <_vfiprintf_r+0x1d6>
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	3307      	adds	r3, #7
 800fda6:	f023 0307 	bic.w	r3, r3, #7
 800fdaa:	3308      	adds	r3, #8
 800fdac:	9303      	str	r3, [sp, #12]
 800fdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdb0:	443b      	add	r3, r7
 800fdb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdb4:	e76a      	b.n	800fc8c <_vfiprintf_r+0x78>
 800fdb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdba:	460c      	mov	r4, r1
 800fdbc:	2001      	movs	r0, #1
 800fdbe:	e7a8      	b.n	800fd12 <_vfiprintf_r+0xfe>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	3401      	adds	r4, #1
 800fdc4:	9305      	str	r3, [sp, #20]
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	f04f 0c0a 	mov.w	ip, #10
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdd2:	3a30      	subs	r2, #48	@ 0x30
 800fdd4:	2a09      	cmp	r2, #9
 800fdd6:	d903      	bls.n	800fde0 <_vfiprintf_r+0x1cc>
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d0c6      	beq.n	800fd6a <_vfiprintf_r+0x156>
 800fddc:	9105      	str	r1, [sp, #20]
 800fdde:	e7c4      	b.n	800fd6a <_vfiprintf_r+0x156>
 800fde0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fde4:	4604      	mov	r4, r0
 800fde6:	2301      	movs	r3, #1
 800fde8:	e7f0      	b.n	800fdcc <_vfiprintf_r+0x1b8>
 800fdea:	ab03      	add	r3, sp, #12
 800fdec:	9300      	str	r3, [sp, #0]
 800fdee:	462a      	mov	r2, r5
 800fdf0:	4b12      	ldr	r3, [pc, #72]	@ (800fe3c <_vfiprintf_r+0x228>)
 800fdf2:	a904      	add	r1, sp, #16
 800fdf4:	4630      	mov	r0, r6
 800fdf6:	f3af 8000 	nop.w
 800fdfa:	4607      	mov	r7, r0
 800fdfc:	1c78      	adds	r0, r7, #1
 800fdfe:	d1d6      	bne.n	800fdae <_vfiprintf_r+0x19a>
 800fe00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe02:	07d9      	lsls	r1, r3, #31
 800fe04:	d405      	bmi.n	800fe12 <_vfiprintf_r+0x1fe>
 800fe06:	89ab      	ldrh	r3, [r5, #12]
 800fe08:	059a      	lsls	r2, r3, #22
 800fe0a:	d402      	bmi.n	800fe12 <_vfiprintf_r+0x1fe>
 800fe0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe0e:	f7ff fd25 	bl	800f85c <__retarget_lock_release_recursive>
 800fe12:	89ab      	ldrh	r3, [r5, #12]
 800fe14:	065b      	lsls	r3, r3, #25
 800fe16:	f53f af1f 	bmi.w	800fc58 <_vfiprintf_r+0x44>
 800fe1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe1c:	e71e      	b.n	800fc5c <_vfiprintf_r+0x48>
 800fe1e:	ab03      	add	r3, sp, #12
 800fe20:	9300      	str	r3, [sp, #0]
 800fe22:	462a      	mov	r2, r5
 800fe24:	4b05      	ldr	r3, [pc, #20]	@ (800fe3c <_vfiprintf_r+0x228>)
 800fe26:	a904      	add	r1, sp, #16
 800fe28:	4630      	mov	r0, r6
 800fe2a:	f000 f879 	bl	800ff20 <_printf_i>
 800fe2e:	e7e4      	b.n	800fdfa <_vfiprintf_r+0x1e6>
 800fe30:	08010da0 	.word	0x08010da0
 800fe34:	08010daa 	.word	0x08010daa
 800fe38:	00000000 	.word	0x00000000
 800fe3c:	0800fbef 	.word	0x0800fbef
 800fe40:	08010da6 	.word	0x08010da6

0800fe44 <_printf_common>:
 800fe44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe48:	4616      	mov	r6, r2
 800fe4a:	4698      	mov	r8, r3
 800fe4c:	688a      	ldr	r2, [r1, #8]
 800fe4e:	690b      	ldr	r3, [r1, #16]
 800fe50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe54:	4293      	cmp	r3, r2
 800fe56:	bfb8      	it	lt
 800fe58:	4613      	movlt	r3, r2
 800fe5a:	6033      	str	r3, [r6, #0]
 800fe5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe60:	4607      	mov	r7, r0
 800fe62:	460c      	mov	r4, r1
 800fe64:	b10a      	cbz	r2, 800fe6a <_printf_common+0x26>
 800fe66:	3301      	adds	r3, #1
 800fe68:	6033      	str	r3, [r6, #0]
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	0699      	lsls	r1, r3, #26
 800fe6e:	bf42      	ittt	mi
 800fe70:	6833      	ldrmi	r3, [r6, #0]
 800fe72:	3302      	addmi	r3, #2
 800fe74:	6033      	strmi	r3, [r6, #0]
 800fe76:	6825      	ldr	r5, [r4, #0]
 800fe78:	f015 0506 	ands.w	r5, r5, #6
 800fe7c:	d106      	bne.n	800fe8c <_printf_common+0x48>
 800fe7e:	f104 0a19 	add.w	sl, r4, #25
 800fe82:	68e3      	ldr	r3, [r4, #12]
 800fe84:	6832      	ldr	r2, [r6, #0]
 800fe86:	1a9b      	subs	r3, r3, r2
 800fe88:	42ab      	cmp	r3, r5
 800fe8a:	dc26      	bgt.n	800feda <_printf_common+0x96>
 800fe8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe90:	6822      	ldr	r2, [r4, #0]
 800fe92:	3b00      	subs	r3, #0
 800fe94:	bf18      	it	ne
 800fe96:	2301      	movne	r3, #1
 800fe98:	0692      	lsls	r2, r2, #26
 800fe9a:	d42b      	bmi.n	800fef4 <_printf_common+0xb0>
 800fe9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fea0:	4641      	mov	r1, r8
 800fea2:	4638      	mov	r0, r7
 800fea4:	47c8      	blx	r9
 800fea6:	3001      	adds	r0, #1
 800fea8:	d01e      	beq.n	800fee8 <_printf_common+0xa4>
 800feaa:	6823      	ldr	r3, [r4, #0]
 800feac:	6922      	ldr	r2, [r4, #16]
 800feae:	f003 0306 	and.w	r3, r3, #6
 800feb2:	2b04      	cmp	r3, #4
 800feb4:	bf02      	ittt	eq
 800feb6:	68e5      	ldreq	r5, [r4, #12]
 800feb8:	6833      	ldreq	r3, [r6, #0]
 800feba:	1aed      	subeq	r5, r5, r3
 800febc:	68a3      	ldr	r3, [r4, #8]
 800febe:	bf0c      	ite	eq
 800fec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fec4:	2500      	movne	r5, #0
 800fec6:	4293      	cmp	r3, r2
 800fec8:	bfc4      	itt	gt
 800feca:	1a9b      	subgt	r3, r3, r2
 800fecc:	18ed      	addgt	r5, r5, r3
 800fece:	2600      	movs	r6, #0
 800fed0:	341a      	adds	r4, #26
 800fed2:	42b5      	cmp	r5, r6
 800fed4:	d11a      	bne.n	800ff0c <_printf_common+0xc8>
 800fed6:	2000      	movs	r0, #0
 800fed8:	e008      	b.n	800feec <_printf_common+0xa8>
 800feda:	2301      	movs	r3, #1
 800fedc:	4652      	mov	r2, sl
 800fede:	4641      	mov	r1, r8
 800fee0:	4638      	mov	r0, r7
 800fee2:	47c8      	blx	r9
 800fee4:	3001      	adds	r0, #1
 800fee6:	d103      	bne.n	800fef0 <_printf_common+0xac>
 800fee8:	f04f 30ff 	mov.w	r0, #4294967295
 800feec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef0:	3501      	adds	r5, #1
 800fef2:	e7c6      	b.n	800fe82 <_printf_common+0x3e>
 800fef4:	18e1      	adds	r1, r4, r3
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	2030      	movs	r0, #48	@ 0x30
 800fefa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fefe:	4422      	add	r2, r4
 800ff00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff08:	3302      	adds	r3, #2
 800ff0a:	e7c7      	b.n	800fe9c <_printf_common+0x58>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	4622      	mov	r2, r4
 800ff10:	4641      	mov	r1, r8
 800ff12:	4638      	mov	r0, r7
 800ff14:	47c8      	blx	r9
 800ff16:	3001      	adds	r0, #1
 800ff18:	d0e6      	beq.n	800fee8 <_printf_common+0xa4>
 800ff1a:	3601      	adds	r6, #1
 800ff1c:	e7d9      	b.n	800fed2 <_printf_common+0x8e>
	...

0800ff20 <_printf_i>:
 800ff20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff24:	7e0f      	ldrb	r7, [r1, #24]
 800ff26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff28:	2f78      	cmp	r7, #120	@ 0x78
 800ff2a:	4691      	mov	r9, r2
 800ff2c:	4680      	mov	r8, r0
 800ff2e:	460c      	mov	r4, r1
 800ff30:	469a      	mov	sl, r3
 800ff32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff36:	d807      	bhi.n	800ff48 <_printf_i+0x28>
 800ff38:	2f62      	cmp	r7, #98	@ 0x62
 800ff3a:	d80a      	bhi.n	800ff52 <_printf_i+0x32>
 800ff3c:	2f00      	cmp	r7, #0
 800ff3e:	f000 80d1 	beq.w	80100e4 <_printf_i+0x1c4>
 800ff42:	2f58      	cmp	r7, #88	@ 0x58
 800ff44:	f000 80b8 	beq.w	80100b8 <_printf_i+0x198>
 800ff48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff50:	e03a      	b.n	800ffc8 <_printf_i+0xa8>
 800ff52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff56:	2b15      	cmp	r3, #21
 800ff58:	d8f6      	bhi.n	800ff48 <_printf_i+0x28>
 800ff5a:	a101      	add	r1, pc, #4	@ (adr r1, 800ff60 <_printf_i+0x40>)
 800ff5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff60:	0800ffb9 	.word	0x0800ffb9
 800ff64:	0800ffcd 	.word	0x0800ffcd
 800ff68:	0800ff49 	.word	0x0800ff49
 800ff6c:	0800ff49 	.word	0x0800ff49
 800ff70:	0800ff49 	.word	0x0800ff49
 800ff74:	0800ff49 	.word	0x0800ff49
 800ff78:	0800ffcd 	.word	0x0800ffcd
 800ff7c:	0800ff49 	.word	0x0800ff49
 800ff80:	0800ff49 	.word	0x0800ff49
 800ff84:	0800ff49 	.word	0x0800ff49
 800ff88:	0800ff49 	.word	0x0800ff49
 800ff8c:	080100cb 	.word	0x080100cb
 800ff90:	0800fff7 	.word	0x0800fff7
 800ff94:	08010085 	.word	0x08010085
 800ff98:	0800ff49 	.word	0x0800ff49
 800ff9c:	0800ff49 	.word	0x0800ff49
 800ffa0:	080100ed 	.word	0x080100ed
 800ffa4:	0800ff49 	.word	0x0800ff49
 800ffa8:	0800fff7 	.word	0x0800fff7
 800ffac:	0800ff49 	.word	0x0800ff49
 800ffb0:	0800ff49 	.word	0x0800ff49
 800ffb4:	0801008d 	.word	0x0801008d
 800ffb8:	6833      	ldr	r3, [r6, #0]
 800ffba:	1d1a      	adds	r2, r3, #4
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	6032      	str	r2, [r6, #0]
 800ffc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ffc8:	2301      	movs	r3, #1
 800ffca:	e09c      	b.n	8010106 <_printf_i+0x1e6>
 800ffcc:	6833      	ldr	r3, [r6, #0]
 800ffce:	6820      	ldr	r0, [r4, #0]
 800ffd0:	1d19      	adds	r1, r3, #4
 800ffd2:	6031      	str	r1, [r6, #0]
 800ffd4:	0606      	lsls	r6, r0, #24
 800ffd6:	d501      	bpl.n	800ffdc <_printf_i+0xbc>
 800ffd8:	681d      	ldr	r5, [r3, #0]
 800ffda:	e003      	b.n	800ffe4 <_printf_i+0xc4>
 800ffdc:	0645      	lsls	r5, r0, #25
 800ffde:	d5fb      	bpl.n	800ffd8 <_printf_i+0xb8>
 800ffe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ffe4:	2d00      	cmp	r5, #0
 800ffe6:	da03      	bge.n	800fff0 <_printf_i+0xd0>
 800ffe8:	232d      	movs	r3, #45	@ 0x2d
 800ffea:	426d      	negs	r5, r5
 800ffec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fff0:	4858      	ldr	r0, [pc, #352]	@ (8010154 <_printf_i+0x234>)
 800fff2:	230a      	movs	r3, #10
 800fff4:	e011      	b.n	801001a <_printf_i+0xfa>
 800fff6:	6821      	ldr	r1, [r4, #0]
 800fff8:	6833      	ldr	r3, [r6, #0]
 800fffa:	0608      	lsls	r0, r1, #24
 800fffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8010000:	d402      	bmi.n	8010008 <_printf_i+0xe8>
 8010002:	0649      	lsls	r1, r1, #25
 8010004:	bf48      	it	mi
 8010006:	b2ad      	uxthmi	r5, r5
 8010008:	2f6f      	cmp	r7, #111	@ 0x6f
 801000a:	4852      	ldr	r0, [pc, #328]	@ (8010154 <_printf_i+0x234>)
 801000c:	6033      	str	r3, [r6, #0]
 801000e:	bf14      	ite	ne
 8010010:	230a      	movne	r3, #10
 8010012:	2308      	moveq	r3, #8
 8010014:	2100      	movs	r1, #0
 8010016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801001a:	6866      	ldr	r6, [r4, #4]
 801001c:	60a6      	str	r6, [r4, #8]
 801001e:	2e00      	cmp	r6, #0
 8010020:	db05      	blt.n	801002e <_printf_i+0x10e>
 8010022:	6821      	ldr	r1, [r4, #0]
 8010024:	432e      	orrs	r6, r5
 8010026:	f021 0104 	bic.w	r1, r1, #4
 801002a:	6021      	str	r1, [r4, #0]
 801002c:	d04b      	beq.n	80100c6 <_printf_i+0x1a6>
 801002e:	4616      	mov	r6, r2
 8010030:	fbb5 f1f3 	udiv	r1, r5, r3
 8010034:	fb03 5711 	mls	r7, r3, r1, r5
 8010038:	5dc7      	ldrb	r7, [r0, r7]
 801003a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801003e:	462f      	mov	r7, r5
 8010040:	42bb      	cmp	r3, r7
 8010042:	460d      	mov	r5, r1
 8010044:	d9f4      	bls.n	8010030 <_printf_i+0x110>
 8010046:	2b08      	cmp	r3, #8
 8010048:	d10b      	bne.n	8010062 <_printf_i+0x142>
 801004a:	6823      	ldr	r3, [r4, #0]
 801004c:	07df      	lsls	r7, r3, #31
 801004e:	d508      	bpl.n	8010062 <_printf_i+0x142>
 8010050:	6923      	ldr	r3, [r4, #16]
 8010052:	6861      	ldr	r1, [r4, #4]
 8010054:	4299      	cmp	r1, r3
 8010056:	bfde      	ittt	le
 8010058:	2330      	movle	r3, #48	@ 0x30
 801005a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801005e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010062:	1b92      	subs	r2, r2, r6
 8010064:	6122      	str	r2, [r4, #16]
 8010066:	f8cd a000 	str.w	sl, [sp]
 801006a:	464b      	mov	r3, r9
 801006c:	aa03      	add	r2, sp, #12
 801006e:	4621      	mov	r1, r4
 8010070:	4640      	mov	r0, r8
 8010072:	f7ff fee7 	bl	800fe44 <_printf_common>
 8010076:	3001      	adds	r0, #1
 8010078:	d14a      	bne.n	8010110 <_printf_i+0x1f0>
 801007a:	f04f 30ff 	mov.w	r0, #4294967295
 801007e:	b004      	add	sp, #16
 8010080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010084:	6823      	ldr	r3, [r4, #0]
 8010086:	f043 0320 	orr.w	r3, r3, #32
 801008a:	6023      	str	r3, [r4, #0]
 801008c:	4832      	ldr	r0, [pc, #200]	@ (8010158 <_printf_i+0x238>)
 801008e:	2778      	movs	r7, #120	@ 0x78
 8010090:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010094:	6823      	ldr	r3, [r4, #0]
 8010096:	6831      	ldr	r1, [r6, #0]
 8010098:	061f      	lsls	r7, r3, #24
 801009a:	f851 5b04 	ldr.w	r5, [r1], #4
 801009e:	d402      	bmi.n	80100a6 <_printf_i+0x186>
 80100a0:	065f      	lsls	r7, r3, #25
 80100a2:	bf48      	it	mi
 80100a4:	b2ad      	uxthmi	r5, r5
 80100a6:	6031      	str	r1, [r6, #0]
 80100a8:	07d9      	lsls	r1, r3, #31
 80100aa:	bf44      	itt	mi
 80100ac:	f043 0320 	orrmi.w	r3, r3, #32
 80100b0:	6023      	strmi	r3, [r4, #0]
 80100b2:	b11d      	cbz	r5, 80100bc <_printf_i+0x19c>
 80100b4:	2310      	movs	r3, #16
 80100b6:	e7ad      	b.n	8010014 <_printf_i+0xf4>
 80100b8:	4826      	ldr	r0, [pc, #152]	@ (8010154 <_printf_i+0x234>)
 80100ba:	e7e9      	b.n	8010090 <_printf_i+0x170>
 80100bc:	6823      	ldr	r3, [r4, #0]
 80100be:	f023 0320 	bic.w	r3, r3, #32
 80100c2:	6023      	str	r3, [r4, #0]
 80100c4:	e7f6      	b.n	80100b4 <_printf_i+0x194>
 80100c6:	4616      	mov	r6, r2
 80100c8:	e7bd      	b.n	8010046 <_printf_i+0x126>
 80100ca:	6833      	ldr	r3, [r6, #0]
 80100cc:	6825      	ldr	r5, [r4, #0]
 80100ce:	6961      	ldr	r1, [r4, #20]
 80100d0:	1d18      	adds	r0, r3, #4
 80100d2:	6030      	str	r0, [r6, #0]
 80100d4:	062e      	lsls	r6, r5, #24
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	d501      	bpl.n	80100de <_printf_i+0x1be>
 80100da:	6019      	str	r1, [r3, #0]
 80100dc:	e002      	b.n	80100e4 <_printf_i+0x1c4>
 80100de:	0668      	lsls	r0, r5, #25
 80100e0:	d5fb      	bpl.n	80100da <_printf_i+0x1ba>
 80100e2:	8019      	strh	r1, [r3, #0]
 80100e4:	2300      	movs	r3, #0
 80100e6:	6123      	str	r3, [r4, #16]
 80100e8:	4616      	mov	r6, r2
 80100ea:	e7bc      	b.n	8010066 <_printf_i+0x146>
 80100ec:	6833      	ldr	r3, [r6, #0]
 80100ee:	1d1a      	adds	r2, r3, #4
 80100f0:	6032      	str	r2, [r6, #0]
 80100f2:	681e      	ldr	r6, [r3, #0]
 80100f4:	6862      	ldr	r2, [r4, #4]
 80100f6:	2100      	movs	r1, #0
 80100f8:	4630      	mov	r0, r6
 80100fa:	f7f0 f869 	bl	80001d0 <memchr>
 80100fe:	b108      	cbz	r0, 8010104 <_printf_i+0x1e4>
 8010100:	1b80      	subs	r0, r0, r6
 8010102:	6060      	str	r0, [r4, #4]
 8010104:	6863      	ldr	r3, [r4, #4]
 8010106:	6123      	str	r3, [r4, #16]
 8010108:	2300      	movs	r3, #0
 801010a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801010e:	e7aa      	b.n	8010066 <_printf_i+0x146>
 8010110:	6923      	ldr	r3, [r4, #16]
 8010112:	4632      	mov	r2, r6
 8010114:	4649      	mov	r1, r9
 8010116:	4640      	mov	r0, r8
 8010118:	47d0      	blx	sl
 801011a:	3001      	adds	r0, #1
 801011c:	d0ad      	beq.n	801007a <_printf_i+0x15a>
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	079b      	lsls	r3, r3, #30
 8010122:	d413      	bmi.n	801014c <_printf_i+0x22c>
 8010124:	68e0      	ldr	r0, [r4, #12]
 8010126:	9b03      	ldr	r3, [sp, #12]
 8010128:	4298      	cmp	r0, r3
 801012a:	bfb8      	it	lt
 801012c:	4618      	movlt	r0, r3
 801012e:	e7a6      	b.n	801007e <_printf_i+0x15e>
 8010130:	2301      	movs	r3, #1
 8010132:	4632      	mov	r2, r6
 8010134:	4649      	mov	r1, r9
 8010136:	4640      	mov	r0, r8
 8010138:	47d0      	blx	sl
 801013a:	3001      	adds	r0, #1
 801013c:	d09d      	beq.n	801007a <_printf_i+0x15a>
 801013e:	3501      	adds	r5, #1
 8010140:	68e3      	ldr	r3, [r4, #12]
 8010142:	9903      	ldr	r1, [sp, #12]
 8010144:	1a5b      	subs	r3, r3, r1
 8010146:	42ab      	cmp	r3, r5
 8010148:	dcf2      	bgt.n	8010130 <_printf_i+0x210>
 801014a:	e7eb      	b.n	8010124 <_printf_i+0x204>
 801014c:	2500      	movs	r5, #0
 801014e:	f104 0619 	add.w	r6, r4, #25
 8010152:	e7f5      	b.n	8010140 <_printf_i+0x220>
 8010154:	08010db1 	.word	0x08010db1
 8010158:	08010dc2 	.word	0x08010dc2

0801015c <__sflush_r>:
 801015c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010164:	0716      	lsls	r6, r2, #28
 8010166:	4605      	mov	r5, r0
 8010168:	460c      	mov	r4, r1
 801016a:	d454      	bmi.n	8010216 <__sflush_r+0xba>
 801016c:	684b      	ldr	r3, [r1, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	dc02      	bgt.n	8010178 <__sflush_r+0x1c>
 8010172:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010174:	2b00      	cmp	r3, #0
 8010176:	dd48      	ble.n	801020a <__sflush_r+0xae>
 8010178:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801017a:	2e00      	cmp	r6, #0
 801017c:	d045      	beq.n	801020a <__sflush_r+0xae>
 801017e:	2300      	movs	r3, #0
 8010180:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010184:	682f      	ldr	r7, [r5, #0]
 8010186:	6a21      	ldr	r1, [r4, #32]
 8010188:	602b      	str	r3, [r5, #0]
 801018a:	d030      	beq.n	80101ee <__sflush_r+0x92>
 801018c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801018e:	89a3      	ldrh	r3, [r4, #12]
 8010190:	0759      	lsls	r1, r3, #29
 8010192:	d505      	bpl.n	80101a0 <__sflush_r+0x44>
 8010194:	6863      	ldr	r3, [r4, #4]
 8010196:	1ad2      	subs	r2, r2, r3
 8010198:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801019a:	b10b      	cbz	r3, 80101a0 <__sflush_r+0x44>
 801019c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801019e:	1ad2      	subs	r2, r2, r3
 80101a0:	2300      	movs	r3, #0
 80101a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101a4:	6a21      	ldr	r1, [r4, #32]
 80101a6:	4628      	mov	r0, r5
 80101a8:	47b0      	blx	r6
 80101aa:	1c43      	adds	r3, r0, #1
 80101ac:	89a3      	ldrh	r3, [r4, #12]
 80101ae:	d106      	bne.n	80101be <__sflush_r+0x62>
 80101b0:	6829      	ldr	r1, [r5, #0]
 80101b2:	291d      	cmp	r1, #29
 80101b4:	d82b      	bhi.n	801020e <__sflush_r+0xb2>
 80101b6:	4a2a      	ldr	r2, [pc, #168]	@ (8010260 <__sflush_r+0x104>)
 80101b8:	40ca      	lsrs	r2, r1
 80101ba:	07d6      	lsls	r6, r2, #31
 80101bc:	d527      	bpl.n	801020e <__sflush_r+0xb2>
 80101be:	2200      	movs	r2, #0
 80101c0:	6062      	str	r2, [r4, #4]
 80101c2:	04d9      	lsls	r1, r3, #19
 80101c4:	6922      	ldr	r2, [r4, #16]
 80101c6:	6022      	str	r2, [r4, #0]
 80101c8:	d504      	bpl.n	80101d4 <__sflush_r+0x78>
 80101ca:	1c42      	adds	r2, r0, #1
 80101cc:	d101      	bne.n	80101d2 <__sflush_r+0x76>
 80101ce:	682b      	ldr	r3, [r5, #0]
 80101d0:	b903      	cbnz	r3, 80101d4 <__sflush_r+0x78>
 80101d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80101d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101d6:	602f      	str	r7, [r5, #0]
 80101d8:	b1b9      	cbz	r1, 801020a <__sflush_r+0xae>
 80101da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101de:	4299      	cmp	r1, r3
 80101e0:	d002      	beq.n	80101e8 <__sflush_r+0x8c>
 80101e2:	4628      	mov	r0, r5
 80101e4:	f7ff fb4a 	bl	800f87c <_free_r>
 80101e8:	2300      	movs	r3, #0
 80101ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80101ec:	e00d      	b.n	801020a <__sflush_r+0xae>
 80101ee:	2301      	movs	r3, #1
 80101f0:	4628      	mov	r0, r5
 80101f2:	47b0      	blx	r6
 80101f4:	4602      	mov	r2, r0
 80101f6:	1c50      	adds	r0, r2, #1
 80101f8:	d1c9      	bne.n	801018e <__sflush_r+0x32>
 80101fa:	682b      	ldr	r3, [r5, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d0c6      	beq.n	801018e <__sflush_r+0x32>
 8010200:	2b1d      	cmp	r3, #29
 8010202:	d001      	beq.n	8010208 <__sflush_r+0xac>
 8010204:	2b16      	cmp	r3, #22
 8010206:	d11e      	bne.n	8010246 <__sflush_r+0xea>
 8010208:	602f      	str	r7, [r5, #0]
 801020a:	2000      	movs	r0, #0
 801020c:	e022      	b.n	8010254 <__sflush_r+0xf8>
 801020e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010212:	b21b      	sxth	r3, r3
 8010214:	e01b      	b.n	801024e <__sflush_r+0xf2>
 8010216:	690f      	ldr	r7, [r1, #16]
 8010218:	2f00      	cmp	r7, #0
 801021a:	d0f6      	beq.n	801020a <__sflush_r+0xae>
 801021c:	0793      	lsls	r3, r2, #30
 801021e:	680e      	ldr	r6, [r1, #0]
 8010220:	bf08      	it	eq
 8010222:	694b      	ldreq	r3, [r1, #20]
 8010224:	600f      	str	r7, [r1, #0]
 8010226:	bf18      	it	ne
 8010228:	2300      	movne	r3, #0
 801022a:	eba6 0807 	sub.w	r8, r6, r7
 801022e:	608b      	str	r3, [r1, #8]
 8010230:	f1b8 0f00 	cmp.w	r8, #0
 8010234:	dde9      	ble.n	801020a <__sflush_r+0xae>
 8010236:	6a21      	ldr	r1, [r4, #32]
 8010238:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801023a:	4643      	mov	r3, r8
 801023c:	463a      	mov	r2, r7
 801023e:	4628      	mov	r0, r5
 8010240:	47b0      	blx	r6
 8010242:	2800      	cmp	r0, #0
 8010244:	dc08      	bgt.n	8010258 <__sflush_r+0xfc>
 8010246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801024a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801024e:	81a3      	strh	r3, [r4, #12]
 8010250:	f04f 30ff 	mov.w	r0, #4294967295
 8010254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010258:	4407      	add	r7, r0
 801025a:	eba8 0800 	sub.w	r8, r8, r0
 801025e:	e7e7      	b.n	8010230 <__sflush_r+0xd4>
 8010260:	20400001 	.word	0x20400001

08010264 <_fflush_r>:
 8010264:	b538      	push	{r3, r4, r5, lr}
 8010266:	690b      	ldr	r3, [r1, #16]
 8010268:	4605      	mov	r5, r0
 801026a:	460c      	mov	r4, r1
 801026c:	b913      	cbnz	r3, 8010274 <_fflush_r+0x10>
 801026e:	2500      	movs	r5, #0
 8010270:	4628      	mov	r0, r5
 8010272:	bd38      	pop	{r3, r4, r5, pc}
 8010274:	b118      	cbz	r0, 801027e <_fflush_r+0x1a>
 8010276:	6a03      	ldr	r3, [r0, #32]
 8010278:	b90b      	cbnz	r3, 801027e <_fflush_r+0x1a>
 801027a:	f7fe fff7 	bl	800f26c <__sinit>
 801027e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d0f3      	beq.n	801026e <_fflush_r+0xa>
 8010286:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010288:	07d0      	lsls	r0, r2, #31
 801028a:	d404      	bmi.n	8010296 <_fflush_r+0x32>
 801028c:	0599      	lsls	r1, r3, #22
 801028e:	d402      	bmi.n	8010296 <_fflush_r+0x32>
 8010290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010292:	f7ff fae2 	bl	800f85a <__retarget_lock_acquire_recursive>
 8010296:	4628      	mov	r0, r5
 8010298:	4621      	mov	r1, r4
 801029a:	f7ff ff5f 	bl	801015c <__sflush_r>
 801029e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102a0:	07da      	lsls	r2, r3, #31
 80102a2:	4605      	mov	r5, r0
 80102a4:	d4e4      	bmi.n	8010270 <_fflush_r+0xc>
 80102a6:	89a3      	ldrh	r3, [r4, #12]
 80102a8:	059b      	lsls	r3, r3, #22
 80102aa:	d4e1      	bmi.n	8010270 <_fflush_r+0xc>
 80102ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102ae:	f7ff fad5 	bl	800f85c <__retarget_lock_release_recursive>
 80102b2:	e7dd      	b.n	8010270 <_fflush_r+0xc>

080102b4 <__swhatbuf_r>:
 80102b4:	b570      	push	{r4, r5, r6, lr}
 80102b6:	460c      	mov	r4, r1
 80102b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102bc:	2900      	cmp	r1, #0
 80102be:	b096      	sub	sp, #88	@ 0x58
 80102c0:	4615      	mov	r5, r2
 80102c2:	461e      	mov	r6, r3
 80102c4:	da0d      	bge.n	80102e2 <__swhatbuf_r+0x2e>
 80102c6:	89a3      	ldrh	r3, [r4, #12]
 80102c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80102cc:	f04f 0100 	mov.w	r1, #0
 80102d0:	bf14      	ite	ne
 80102d2:	2340      	movne	r3, #64	@ 0x40
 80102d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80102d8:	2000      	movs	r0, #0
 80102da:	6031      	str	r1, [r6, #0]
 80102dc:	602b      	str	r3, [r5, #0]
 80102de:	b016      	add	sp, #88	@ 0x58
 80102e0:	bd70      	pop	{r4, r5, r6, pc}
 80102e2:	466a      	mov	r2, sp
 80102e4:	f000 f862 	bl	80103ac <_fstat_r>
 80102e8:	2800      	cmp	r0, #0
 80102ea:	dbec      	blt.n	80102c6 <__swhatbuf_r+0x12>
 80102ec:	9901      	ldr	r1, [sp, #4]
 80102ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80102f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80102f6:	4259      	negs	r1, r3
 80102f8:	4159      	adcs	r1, r3
 80102fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102fe:	e7eb      	b.n	80102d8 <__swhatbuf_r+0x24>

08010300 <__smakebuf_r>:
 8010300:	898b      	ldrh	r3, [r1, #12]
 8010302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010304:	079d      	lsls	r5, r3, #30
 8010306:	4606      	mov	r6, r0
 8010308:	460c      	mov	r4, r1
 801030a:	d507      	bpl.n	801031c <__smakebuf_r+0x1c>
 801030c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010310:	6023      	str	r3, [r4, #0]
 8010312:	6123      	str	r3, [r4, #16]
 8010314:	2301      	movs	r3, #1
 8010316:	6163      	str	r3, [r4, #20]
 8010318:	b003      	add	sp, #12
 801031a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801031c:	ab01      	add	r3, sp, #4
 801031e:	466a      	mov	r2, sp
 8010320:	f7ff ffc8 	bl	80102b4 <__swhatbuf_r>
 8010324:	9f00      	ldr	r7, [sp, #0]
 8010326:	4605      	mov	r5, r0
 8010328:	4639      	mov	r1, r7
 801032a:	4630      	mov	r0, r6
 801032c:	f7fe fe86 	bl	800f03c <_malloc_r>
 8010330:	b948      	cbnz	r0, 8010346 <__smakebuf_r+0x46>
 8010332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010336:	059a      	lsls	r2, r3, #22
 8010338:	d4ee      	bmi.n	8010318 <__smakebuf_r+0x18>
 801033a:	f023 0303 	bic.w	r3, r3, #3
 801033e:	f043 0302 	orr.w	r3, r3, #2
 8010342:	81a3      	strh	r3, [r4, #12]
 8010344:	e7e2      	b.n	801030c <__smakebuf_r+0xc>
 8010346:	89a3      	ldrh	r3, [r4, #12]
 8010348:	6020      	str	r0, [r4, #0]
 801034a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801034e:	81a3      	strh	r3, [r4, #12]
 8010350:	9b01      	ldr	r3, [sp, #4]
 8010352:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010356:	b15b      	cbz	r3, 8010370 <__smakebuf_r+0x70>
 8010358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801035c:	4630      	mov	r0, r6
 801035e:	f000 f837 	bl	80103d0 <_isatty_r>
 8010362:	b128      	cbz	r0, 8010370 <__smakebuf_r+0x70>
 8010364:	89a3      	ldrh	r3, [r4, #12]
 8010366:	f023 0303 	bic.w	r3, r3, #3
 801036a:	f043 0301 	orr.w	r3, r3, #1
 801036e:	81a3      	strh	r3, [r4, #12]
 8010370:	89a3      	ldrh	r3, [r4, #12]
 8010372:	431d      	orrs	r5, r3
 8010374:	81a5      	strh	r5, [r4, #12]
 8010376:	e7cf      	b.n	8010318 <__smakebuf_r+0x18>

08010378 <memmove>:
 8010378:	4288      	cmp	r0, r1
 801037a:	b510      	push	{r4, lr}
 801037c:	eb01 0402 	add.w	r4, r1, r2
 8010380:	d902      	bls.n	8010388 <memmove+0x10>
 8010382:	4284      	cmp	r4, r0
 8010384:	4623      	mov	r3, r4
 8010386:	d807      	bhi.n	8010398 <memmove+0x20>
 8010388:	1e43      	subs	r3, r0, #1
 801038a:	42a1      	cmp	r1, r4
 801038c:	d008      	beq.n	80103a0 <memmove+0x28>
 801038e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010396:	e7f8      	b.n	801038a <memmove+0x12>
 8010398:	4402      	add	r2, r0
 801039a:	4601      	mov	r1, r0
 801039c:	428a      	cmp	r2, r1
 801039e:	d100      	bne.n	80103a2 <memmove+0x2a>
 80103a0:	bd10      	pop	{r4, pc}
 80103a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103aa:	e7f7      	b.n	801039c <memmove+0x24>

080103ac <_fstat_r>:
 80103ac:	b538      	push	{r3, r4, r5, lr}
 80103ae:	4d07      	ldr	r5, [pc, #28]	@ (80103cc <_fstat_r+0x20>)
 80103b0:	2300      	movs	r3, #0
 80103b2:	4604      	mov	r4, r0
 80103b4:	4608      	mov	r0, r1
 80103b6:	4611      	mov	r1, r2
 80103b8:	602b      	str	r3, [r5, #0]
 80103ba:	f7f5 fea7 	bl	800610c <_fstat>
 80103be:	1c43      	adds	r3, r0, #1
 80103c0:	d102      	bne.n	80103c8 <_fstat_r+0x1c>
 80103c2:	682b      	ldr	r3, [r5, #0]
 80103c4:	b103      	cbz	r3, 80103c8 <_fstat_r+0x1c>
 80103c6:	6023      	str	r3, [r4, #0]
 80103c8:	bd38      	pop	{r3, r4, r5, pc}
 80103ca:	bf00      	nop
 80103cc:	20001284 	.word	0x20001284

080103d0 <_isatty_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4d06      	ldr	r5, [pc, #24]	@ (80103ec <_isatty_r+0x1c>)
 80103d4:	2300      	movs	r3, #0
 80103d6:	4604      	mov	r4, r0
 80103d8:	4608      	mov	r0, r1
 80103da:	602b      	str	r3, [r5, #0]
 80103dc:	f7f5 fea6 	bl	800612c <_isatty>
 80103e0:	1c43      	adds	r3, r0, #1
 80103e2:	d102      	bne.n	80103ea <_isatty_r+0x1a>
 80103e4:	682b      	ldr	r3, [r5, #0]
 80103e6:	b103      	cbz	r3, 80103ea <_isatty_r+0x1a>
 80103e8:	6023      	str	r3, [r4, #0]
 80103ea:	bd38      	pop	{r3, r4, r5, pc}
 80103ec:	20001284 	.word	0x20001284

080103f0 <_realloc_r>:
 80103f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f4:	4607      	mov	r7, r0
 80103f6:	4614      	mov	r4, r2
 80103f8:	460d      	mov	r5, r1
 80103fa:	b921      	cbnz	r1, 8010406 <_realloc_r+0x16>
 80103fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010400:	4611      	mov	r1, r2
 8010402:	f7fe be1b 	b.w	800f03c <_malloc_r>
 8010406:	b92a      	cbnz	r2, 8010414 <_realloc_r+0x24>
 8010408:	f7ff fa38 	bl	800f87c <_free_r>
 801040c:	4625      	mov	r5, r4
 801040e:	4628      	mov	r0, r5
 8010410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010414:	f000 f81a 	bl	801044c <_malloc_usable_size_r>
 8010418:	4284      	cmp	r4, r0
 801041a:	4606      	mov	r6, r0
 801041c:	d802      	bhi.n	8010424 <_realloc_r+0x34>
 801041e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010422:	d8f4      	bhi.n	801040e <_realloc_r+0x1e>
 8010424:	4621      	mov	r1, r4
 8010426:	4638      	mov	r0, r7
 8010428:	f7fe fe08 	bl	800f03c <_malloc_r>
 801042c:	4680      	mov	r8, r0
 801042e:	b908      	cbnz	r0, 8010434 <_realloc_r+0x44>
 8010430:	4645      	mov	r5, r8
 8010432:	e7ec      	b.n	801040e <_realloc_r+0x1e>
 8010434:	42b4      	cmp	r4, r6
 8010436:	4622      	mov	r2, r4
 8010438:	4629      	mov	r1, r5
 801043a:	bf28      	it	cs
 801043c:	4632      	movcs	r2, r6
 801043e:	f7ff fa0e 	bl	800f85e <memcpy>
 8010442:	4629      	mov	r1, r5
 8010444:	4638      	mov	r0, r7
 8010446:	f7ff fa19 	bl	800f87c <_free_r>
 801044a:	e7f1      	b.n	8010430 <_realloc_r+0x40>

0801044c <_malloc_usable_size_r>:
 801044c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010450:	1f18      	subs	r0, r3, #4
 8010452:	2b00      	cmp	r3, #0
 8010454:	bfbc      	itt	lt
 8010456:	580b      	ldrlt	r3, [r1, r0]
 8010458:	18c0      	addlt	r0, r0, r3
 801045a:	4770      	bx	lr

0801045c <_init>:
 801045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801045e:	bf00      	nop
 8010460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010462:	bc08      	pop	{r3}
 8010464:	469e      	mov	lr, r3
 8010466:	4770      	bx	lr

08010468 <_fini>:
 8010468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046a:	bf00      	nop
 801046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801046e:	bc08      	pop	{r3}
 8010470:	469e      	mov	lr, r3
 8010472:	4770      	bx	lr
